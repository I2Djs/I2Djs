/*!
      * i2djs
      * (c) 2024 Narayana Swamy (narayanaswamy14@gmail.com)
      * @license BSD-3-Clause
      */
'use strict';

let animatorInstance = null;
let tweens = [];
const vDoms = {};
const vDomIds = [];
let animeFrameId;
let onFrameExe = [];
if (typeof window === "undefined") {
    global.window = {
        setTimeout: setTimeout,
        clearTimeout: clearTimeout,
    };
    global.performance = {
        now: function () {
            return Date.now();
        },
    };
    global.document = {};
}
window.requestAnimationFrame = (function requestAnimationFrameG() {
    return (
        window.requestAnimationFrame ||
        window.webkitRequestAnimationFrame ||
        window.mozRequestAnimationFrame ||
        window.oRequestAnimationFrame ||
        window.msRequestAnimationFrame ||
        function requestAnimationFrame(callback) {
            return window.setTimeout(callback, 1000 / 60);
        }
    );
})();
window.cancelAnimFrame = (function cancelAnimFrameG() {
    return (
        window.cancelAnimationFrame ||
        window.webkitCancelAnimationFrame ||
        window.mozCancelAnimationFrame ||
        window.oCancelAnimationFrame ||
        window.msCancelAnimationFrame ||
        function cancelAnimFrame(id) {
            return window.clearTimeout(id);
        }
    );
})();
function Tween(Id, executable, easying) {
    this.executable = executable;
    this.duration = executable.duration ? executable.duration : 0;
    this.delay = executable.delay ? executable.delay : 0;
    this.lastTime = 0 - (executable.delay ? executable.delay : 0);
    this.loopTracker = 0;
    this.loop = executable.loop ? executable.loop : 0;
    this.direction = executable.direction;
    this.easying = easying;
    this.end = executable.end ? executable.end : null;
    if (this.direction === "reverse") {
        this.factor = 1;
    } else {
        this.factor = 0;
    }
}
Tween.prototype.execute = function execute(f) {
    this.executable.run(f);
};
Tween.prototype.resetCallBack = function resetCallBack(_) {
    if (typeof _ !== "function") return;
    this.callBack = _;
};
function onRequestFrame(_) {
    if (typeof _ !== "function") {
        throw new Error("Wrong input");
    }
    onFrameExe.push(_);
    if (onFrameExe.length > 0 && !animeFrameId) {
        this.startAnimeFrames();
    }
}
function removeRequestFrameCall(_) {
    if (typeof _ !== "function") {
        throw new Error("Wrong input");
    }
    const index = onFrameExe.indexOf(_);
    if (index !== -1) {
        onFrameExe.splice(index, 1);
    }
}
function add(uId, executable, easying) {
    const exeObj = new Tween(uId, executable, easying);
    exeObj.currTime = performance.now();
    tweens.push(exeObj);
    this.startAnimeFrames();
}
function remove$1(exeObj) {
    const index = tweens.indexOf(exeObj);
    if (index !== -1) {
        tweens.splice(index, 1);
    }
}
function startAnimeFrames() {
    if (!animeFrameId) {
        animeFrameId = window.requestAnimationFrame(exeFrameCaller);
    }
}
function stopAnimeFrame() {
    if (animeFrameId) {
        window.cancelAnimFrame(animeFrameId);
        animeFrameId = null;
    }
}
function ExeQueue() {}
ExeQueue.prototype = {
    startAnimeFrames,
    stopAnimeFrame,
    add,
    remove: remove$1,
    onRequestFrame,
    removeRequestFrameCall,
    clearAll: function () {
        tweens = [];
        onFrameExe = [];
    },
};
ExeQueue.prototype.interruptNodeAnimations = function (node) {
    tweens = tweens.filter((d)=>{
        return (d?.executable?.target??null) !== node;
    });
};
ExeQueue.prototype.addVdom = function AaddVdom(_) {
    const ind = vDomIds.length + 1;
    vDoms[ind] = _;
    vDomIds.push(ind);
    this.startAnimeFrames();
    return ind;
};
ExeQueue.prototype.removeVdom = function removeVdom(_) {
    const index = vDomIds.indexOf(_);
    tweens = tweens.filter((d)=>{
        return (d?.executable?.target?.vDomIndex??null) !== _;
    });
    if (index !== -1) {
        vDomIds.splice(index, 1);
        vDoms[_].root.destroy();
        delete vDoms[_];
    }
    if (vDomIds.length === 0 && tweens.length === 0 && onFrameExe.length === 0) {
        this.stopAnimeFrame();
    }
};
ExeQueue.prototype.vDomChanged = function AvDomChanged(vDom) {
    if (vDoms[vDom] && vDoms[vDom].stateModified !== undefined) {
        vDoms[vDom].stateModified = true;
        vDoms[vDom].root.stateModified = true;
    } else if (typeof vDom === "string") {
        const ids = vDom.split(":");
        if (vDoms[ids[0]] && vDoms[ids[0]].stateModified !== undefined) {
            vDoms[ids[0]].stateModified = true;
            vDoms[ids[0]].root.stateModified = true;
            const childRootNode = vDoms[ids[0]].root.fetchEl("#" + ids[1]);
            if (childRootNode) {
                childRootNode.stateModified = true;
            }
        }
    }
};
ExeQueue.prototype.execute = function Aexecute() {
    this.startAnimeFrames();
};
ExeQueue.prototype.vDomUpdates = function () {
    for (let i = 0, len = vDomIds.length; i < len; i += 1) {
        const vdomId = vDomIds[i];
        const vdom = vDoms[vdomId];
        if (!vdom) {
            continue;
        }
        if (vdom.stateModified) {
            vdom.execute();
            vdom.stateModified = false;
        }
    }
};
let d;
let t;
const abs$1 = Math.abs;
let counter = 0;
let tweensN = [];
function exeFrameCaller() {
    try {
        tweensN = [];
        counter = 0;
        t = performance.now();
        for (let i = 0; i < tweens.length; i += 1) {
            d = tweens[i];
            d.lastTime += t - d.currTime;
            d.currTime = t;
            if (d.lastTime < d.duration && d.lastTime >= 0) {
                d.execute(abs$1(d.factor - d.easying(d.lastTime, d.duration)));
                tweensN[counter++] = d;
            } else if (d.lastTime > d.duration) {
                if (loopCheck(d)) {
                    tweensN[counter++] = d;
                }
            } else {
                tweensN[counter++] = d;
            }
        }
        tweens = tweensN;
        if (onFrameExe.length > 0) {
            onFrameExeFun(t);
        }
        animatorInstance.vDomUpdates();
    } catch (err) {
        console.error(err);
    } finally {
        animeFrameId = window.requestAnimationFrame(exeFrameCaller);
    }
}
function loopCheck(d) {
    if (d.loopTracker >= d.loop - 1) {
        d.execute(1 - d.factor);
        if (d.end) {
            d.end();
        }
        const animList = d.executable?.target?.animList;
        if (animList) {
            const index = animList.indexOf(d);
            if (index !== -1) animList.splice(index, 1);
        }
        return false
    } else {
        d.loopTracker += 1;
        d.lastTime = d.lastTime - d.duration;
        d.lastTime = d.lastTime % d.duration;
        d.factor = d.direction === "alternate"? (1 - d.factor) : (d.direction === "reverse" ? 1 : 0);
        d.execute(abs$1(d.factor - d.easying(d.lastTime, d.duration)));
        return true;
    }
}
function onFrameExeFun(t) {
    for (let i = 0; i < onFrameExe.length; i += 1) {
        onFrameExe[i](t);
    }
}
animatorInstance = new ExeQueue();
var queue$1 = animatorInstance;

function VDom() {}
const queueInstance$6 = queue$1;
VDom.prototype.execute = function execute() {
    let elementExists = document.body.contains(this.root.container);
    if (!elementExists) {
        queueInstance$6.removeVdom(this.root.vDomIndex);
        this.stateModified = false;
        return;
    }
    this.root.execute();
    this.stateModified = false;
};
VDom.prototype.rootNode = function root(_) {
    this.root = _;
    this.stateModified = true;
};
VDom.prototype.eventsCheck = function eventsCheck(nodes, mouseCoor, rawEvent) {
    const self = this;
    let node, temp;
    for (var i = 0; i <= nodes.length - 1; i += 1) {
        var d = nodes[i];
        var coOr = {
            x: mouseCoor.x,
            y: mouseCoor.y,
        };
        transformCoOr$1(d, coOr);
        if (
            d.in({
                x: coOr.x,
                y: coOr.y,
            })
        ) {
            if (d.children && d.children.length > 0) {
                temp = self.eventsCheck(
                    d.children,
                    {
                        x: coOr.x,
                        y: coOr.y,
                    },
                    rawEvent
                );
                if (temp) {
                    node = temp;
                }
            } else {
                node = d;
            }
        }
    }
    return node;
};
VDom.prototype.transformCoOr = transformCoOr$1;
function transformCoOr$1(d, coOr) {
    let hozMove = 0;
    let verMove = 0;
    let scaleX = 1;
    let scaleY = 1;
    const coOrLocal = coOr;
    if (d.attr.transform && d.attr.transform.translate) {
        [hozMove, verMove] = d.attr.transform.translate;
        coOrLocal.x -= hozMove;
        coOrLocal.y -= verMove;
    }
    if (d.attr.transform && d.attr.transform.scale) {
        scaleX = d.attr.transform.scale[0] !== undefined ? d.attr.transform.scale[0] : 1;
        scaleY = d.attr.transform.scale[1] !== undefined ? d.attr.transform.scale[1] : scaleX;
        coOrLocal.x /= scaleX;
        coOrLocal.y /= scaleY;
    }
    if (d.attr.transform && d.attr.transform.rotate) {
        const rotate = d.attr.transform.rotate[0];
        const cen = {
            x: d.attr.transform.rotate[1],
            y: d.attr.transform.rotate[2],
        };
        const x = coOrLocal.x;
        const y = coOrLocal.y;
        const cx = cen.x;
        const cy = cen.y;
        var radians = (Math.PI / 180) * rotate;
        var cos = Math.cos(radians);
        var sin = Math.sin(radians);
        coOrLocal.x = cos * (x - cx) + sin * (y - cy) + cx;
        coOrLocal.y = cos * (y - cy) - sin * (x - cx) + cy;
    }
}

const sqrt = Math.sqrt;
const sin = Math.sin;
const cos = Math.cos;
const abs = Math.abs;
const atan2 = Math.atan2;
const tan = Math.tan;
const PI = Math.PI;
const ceil = Math.ceil;
const max$1 = Math.max;
function pw(a, x) {
    let val = 1;
    if (x === 0) return val;
    for (let i = 1; i <= x; i += 1) {
        val *= a;
    }
    return val;
}
function bezierLength(p0, p1, p2) {
    const a = {};
    const b = {};
    a.x = p0.x + p2.x - 2 * p1.x;
    a.y = p0.y + p2.y - 2 * p1.y;
    b.x = 2 * p1.x - 2 * p0.x;
    b.y = 2 * p1.y - 2 * p0.y;
    const A = 4 * (a.x * a.x + a.y * a.y);
    const B = 4 * (a.x * b.x + a.y * b.y);
    const C = b.x * b.x + b.y * b.y;
    const Sabc = 2 * sqrt(A + B + C);
    const A_2 = sqrt(A);
    const A_32 = 2 * A * A_2;
    const C_2 = 2 * sqrt(C);
    const BA = B / A_2;
    let logVal = (2 * A_2 + BA + Sabc) / (BA + C_2);
    logVal = isNaN(logVal) || abs(logVal) === Infinity ? 1 : logVal;
    return (
        (A_32 * Sabc + A_2 * B * (Sabc - C_2) + (4 * C * A - B * B) * Math.log(logVal)) / (4 * A_32)
    );
}
function cubicBezierLength(p0, co) {
    const interval = 0.001;
    let sum = 0;
    const cubicBezierTransitionInstance = cubicBezierTransition.bind(null, p0, co);
    let p1;
    let p2;
    for (let i = 0; i <= 1; i += interval) {
        p1 = cubicBezierTransitionInstance(i);
        p2 = cubicBezierTransitionInstance(i + interval);
        sum += sqrt(pw((p2.x - p1.x) / interval, 2) + pw((p2.y - p1.y) / interval, 2)) * interval;
    }
    return sum;
}
function getDistance(p1, p2) {
    let cPw = 0;
    for (const p in p1) {
        cPw += pw(p2[p] - p1[p], 2);
    }
    if (isNaN(cPw)) {
        throw new Error("error");
    }
    return sqrt(cPw);
}
function get2DAngle(p1, p2) {
    return atan2(p2.x - p1.x, p2.y - p1.y);
}
function scaleAlongOrigin(co, factor) {
    const co_ = {};
    for (const prop in co) {
        co_[prop] = co[prop] * factor;
    }
    return co_;
}
function scaleAlongPoint(p, r, f) {
    const s = (p.y - r.y) / (p.x - r.x);
    const xX = p.x * f;
    const yY = (s * (xX - r.x) + r.y) * f;
    return {
        x: xX,
        y: yY,
    };
}
function cubicBezierCoefficients(p) {
    const cx = 3 * (p.cntrl1.x - p.p0.x);
    const bx = 3 * (p.cntrl2.x - p.cntrl1.x) - cx;
    const ax = p.p1.x - p.p0.x - cx - bx;
    const cy = 3 * (p.cntrl1.y - p.p0.y);
    const by = 3 * (p.cntrl2.y - p.cntrl1.y) - cy;
    const ay = p.p1.y - p.p0.y - cy - by;
    return {
        cx,
        bx,
        ax,
        cy,
        by,
        ay,
    };
}
function toCubicCurves(stack) {
    if (!stack.length) {
        return;
    }
    const _ = stack;
    const mappedArr = [];
    for (let i = 0; i < _.length; i += 1) {
        if (["M", "C", "S", "Q"].indexOf(_[i].type) !== -1) {
            mappedArr.push(_[i]);
        } else if (["V", "H", "L", "Z"].indexOf(_[i].type) !== -1) {
            const ctrl1 = {
                x: (_[i].p0.x + _[i].p1.x) / 2,
                y: (_[i].p0.y + _[i].p1.y) / 2,
            };
            mappedArr.push({
                p0: _[i].p0,
                cntrl1: ctrl1,
                cntrl2: ctrl1,
                p1: _[i].p1,
                type: "C",
                length: _[i].length,
            });
        } else {
            console.log("wrong cmd type");
        }
    }
    return mappedArr;
}
function cubicBezierTransition(p0, co, f) {
    const p3 = pw(f, 3);
    const p2 = pw(f, 2);
    return {
        x: co.ax * p3 + co.bx * p2 + co.cx * f + p0.x,
        y: co.ay * p3 + co.by * p2 + co.cy * f + p0.y,
    };
}
function bezierTransition(p0, p1, p2, f) {
    return {
        x: (p0.x - 2 * p1.x + p2.x) * f * f + (2 * p1.x - 2 * p0.x) * f + p0.x,
        y: (p0.y - 2 * p1.y + p2.y) * f * f + (2 * p1.y - 2 * p0.y) * f + p0.y,
    };
}
function linearTBetweenPoints(p1, p2, f) {
    return {
        x: p1.x + (p2.x - p1.x) * f,
        y: p1.y + (p2.y - p1.y) * f,
    };
}
function intermediateValue(v1, v2, f) {
    return v1 + (v2 - v1) * f;
}
const _slicedToArray$1 = (function () {
    function sliceIterator(arr, i) {
        const _arr = [];
        let _n = true;
        let _d = false;
        let _e;
        try {
            for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                _arr.push(_s.value);
                if (i && _arr.length === i) break;
            }
        } catch (err) {
            _d = true;
            _e = err;
        } finally {
            try {
                if (!_n && _i.return) _i.return();
            } finally {
                if (_d) {
                    console.log("Error -" + _e);
                }
            }
        }
        return _arr;
    }
    return function (arr, i) {
        if (Array.isArray(arr)) {
            return arr;
        } else if (Symbol.iterator in Object(arr)) {
            return sliceIterator(arr, i);
        }
        throw new TypeError("Invalid attempt to destructure non-iterable instance");
    };
})();
const TAU$1 = PI * 2;
const mapToEllipse = function mapToEllipse(_ref, rx, ry, cosphi, sinphi, centerx, centery) {
    let { x, y } = _ref;
    x *= rx;
    y *= ry;
    const xp = cosphi * x - sinphi * y;
    const yp = sinphi * x + cosphi * y;
    return {
        x: xp + centerx,
        y: yp + centery,
    };
};
const approxUnitArc = function approxUnitArc(ang1, ang2) {
    const a = (4 / 3) * tan(ang2 / 4);
    const x1 = cos(ang1);
    const y1 = sin(ang1);
    const x2 = cos(ang1 + ang2);
    const y2 = sin(ang1 + ang2);
    return [
        {
            x: x1 - y1 * a,
            y: y1 + x1 * a,
        },
        {
            x: x2 + y2 * a,
            y: y2 - x2 * a,
        },
        {
            x: x2,
            y: y2,
        },
    ];
};
const vectorAngle = function vectorAngle(ux, uy, vx, vy) {
    const sign = ux * vy - uy * vx < 0 ? -1 : 1;
    const umag = sqrt(ux * ux + uy * uy);
    const vmag = sqrt(ux * ux + uy * uy);
    const dot = ux * vx + uy * vy;
    let div = dot / (umag * vmag);
    if (div > 1) {
        div = 1;
    }
    if (div < -1) {
        div = -1;
    }
    return sign * Math.acos(div);
};
const getArcCenter = function getArcCenter(
    px,
    py,
    cx,
    cy,
    rx,
    ry,
    largeArcFlag,
    sweepFlag,
    sinphi,
    cosphi,
    pxp,
    pyp
) {
    const rxsq = pw(rx, 2);
    const rysq = pw(ry, 2);
    const pxpsq = pw(pxp, 2);
    const pypsq = pw(pyp, 2);
    let radicant = rxsq * rysq - rxsq * pypsq - rysq * pxpsq;
    if (radicant < 0) {
        radicant = 0;
    }
    radicant /= rxsq * pypsq + rysq * pxpsq;
    radicant = sqrt(radicant) * (largeArcFlag === sweepFlag ? -1 : 1);
    const centerxp = ((radicant * rx) / ry) * pyp;
    const centeryp = ((radicant * -ry) / rx) * pxp;
    const centerx = cosphi * centerxp - sinphi * centeryp + (px + cx) / 2;
    const centery = sinphi * centerxp + cosphi * centeryp + (py + cy) / 2;
    const vx1 = (pxp - centerxp) / rx;
    const vy1 = (pyp - centeryp) / ry;
    const vx2 = (-pxp - centerxp) / rx;
    const vy2 = (-pyp - centeryp) / ry;
    const ang1 = vectorAngle(1, 0, vx1, vy1);
    let ang2 = vectorAngle(vx1, vy1, vx2, vy2);
    if (sweepFlag === 0 && ang2 > 0) {
        ang2 -= TAU$1;
    }
    if (sweepFlag === 1 && ang2 < 0) {
        ang2 += TAU$1;
    }
    return [centerx, centery, ang1, ang2];
};
const arcToBezier = function arcToBezier(_ref2) {
    let { px, py, cx, cy, rx, ry } = _ref2;
    const _ref2$xAxisRotation = _ref2.xAxisRotation;
    const xAxisRotation = _ref2$xAxisRotation === undefined ? 0 : _ref2$xAxisRotation;
    const _ref2$largeArcFlag = _ref2.largeArcFlag;
    const largeArcFlag = _ref2$largeArcFlag === undefined ? 0 : _ref2$largeArcFlag;
    const _ref2$sweepFlag = _ref2.sweepFlag;
    const sweepFlag = _ref2$sweepFlag === undefined ? 0 : _ref2$sweepFlag;
    const curves = [];
    if (rx === 0 || ry === 0) {
        return [];
    }
    const sinphi = sin((xAxisRotation * TAU$1) / 360);
    const cosphi = cos((xAxisRotation * TAU$1) / 360);
    const pxp = (cosphi * (px - cx)) / 2 + (sinphi * (py - cy)) / 2;
    const pyp = (-sinphi * (px - cx)) / 2 + (cosphi * (py - cy)) / 2;
    if (pxp === 0 && pyp === 0) {
        return [];
    }
    rx = abs(rx);
    ry = abs(ry);
    const lambda = pw(pxp, 2) / pw(rx, 2) + pw(pyp, 2) / pw(ry, 2);
    if (lambda > 1) {
        rx *= sqrt(lambda);
        ry *= sqrt(lambda);
    }
    const _getArcCenter = getArcCenter(
        px,
        py,
        cx,
        cy,
        rx,
        ry,
        largeArcFlag,
        sweepFlag,
        sinphi,
        cosphi,
        pxp,
        pyp
    );
    const _getArcCenter2 = _slicedToArray$1(_getArcCenter, 4);
    const centerx = _getArcCenter2[0];
    const centery = _getArcCenter2[1];
    let ang1 = _getArcCenter2[2];
    let ang2 = _getArcCenter2[3];
    const segments = max$1(ceil(abs(ang2) / (TAU$1 / 4)), 1);
    ang2 /= segments;
    for (let i = 0; i < segments; i++) {
        curves.push(approxUnitArc(ang1, ang2));
        ang1 += ang2;
    }
    return curves.map((curve) => {
        const _mapToEllipse = mapToEllipse(curve[0], rx, ry, cosphi, sinphi, centerx, centery);
        const x1 = _mapToEllipse.x;
        const y1 = _mapToEllipse.y;
        const _mapToEllipse2 = mapToEllipse(curve[1], rx, ry, cosphi, sinphi, centerx, centery);
        const x2 = _mapToEllipse2.x;
        const y2 = _mapToEllipse2.y;
        const _mapToEllipse3 = mapToEllipse(curve[2], rx, ry, cosphi, sinphi, centerx, centery);
        const x = _mapToEllipse3.x;
        const y = _mapToEllipse3.y;
        return {
            x1,
            y1,
            x2,
            y2,
            x,
            y,
        };
    });
};
function rotatePoint(point, centre, newAngle) {
    const x = point.x;
    const y = point.y;
    const cx = centre.x;
    const cy = centre.y;
    var radians = (PI / 180) * newAngle;
    var c_ = cos(-radians);
    var s_ = sin(-radians);
    return {
        x: c_ * (x - cx) + s_ * (y - cy) + cx,
        y: c_ * (y - cy) - s_ * (x - cx) + cy,
    };
}
function rotateBBox(BBox, transform) {
    let point1 = {
        x: BBox.x,
        y: BBox.y,
    };
    let point2 = {
        x: BBox.x + BBox.width,
        y: BBox.y,
    };
    let point3 = {
        x: BBox.x,
        y: BBox.y + BBox.height,
    };
    let point4 = {
        x: BBox.x + BBox.width,
        y: BBox.y + BBox.height,
    };
    const { translate, rotate } = transform;
    const cen = {
        x: rotate[1] || 0,
        y: rotate[2] || 0,
    };
    const rotateAngle = rotate[0];
    if (translate && translate.length > 0) {
        cen.x += translate[0];
        cen.y += translate[1];
    }
    point1 = rotatePoint(point1, cen, rotateAngle, getDistance(point1, cen));
    point2 = rotatePoint(point2, cen, rotateAngle, getDistance(point2, cen));
    point3 = rotatePoint(point3, cen, rotateAngle, getDistance(point3, cen));
    point4 = rotatePoint(point4, cen, rotateAngle, getDistance(point4, cen));
    const xVec = [point1.x, point2.x, point3.x, point4.x].sort((bb, aa) => bb - aa);
    const yVec = [point1.y, point2.y, point3.y, point4.y].sort((bb, aa) => bb - aa);
    return {
        x: xVec[0],
        y: yVec[0],
        width: xVec[3] - xVec[0],
        height: yVec[3] - yVec[0],
    };
}
function Geometry() {}
Geometry.prototype = {
    pow: pw,
    getAngle: get2DAngle,
    getDistance,
    scaleAlongOrigin,
    scaleAlongPoint,
    linearTransitionBetweenPoints: linearTBetweenPoints,
    bezierTransition,
    bezierLength,
    cubicBezierTransition,
    cubicBezierLength,
    cubicBezierCoefficients,
    arcToBezier,
    intermediateValue,
    toCubicCurves,
    rotatePoint,
    rotateBBox,
};
var geometry = new Geometry();

const i2DGeometry$1 = geometry;
function linear(starttime, duration) {
    return starttime / duration;
}
function elastic(starttime, duration) {
    const decay = 8;
    const force = 2 / 1000;
    const t = starttime / duration;
    return (
        1 -
        ((1 - t) * Math.sin(t * duration * force * Math.PI * 2 + Math.PI / 2)) / Math.exp(t * decay)
    );
}
function bounce(starttime, duration) {
    const decay = 10;
    const t = starttime / duration;
    const force = t / 100;
    return (
        1 -
        ((1 - t) * Math.abs(Math.sin(t * duration * force * Math.PI * 2 + Math.PI / 2))) /
            Math.exp(t * decay)
    );
}
function easeInQuad(starttime, duration) {
    const t = starttime / duration;
    return t * t;
}
function easeOutQuad(starttime, duration) {
    const t = starttime / duration;
    return t * (2 - t);
}
function easeInOutQuad(starttime, duration) {
    const t = starttime / duration;
    return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;
}
function easeInCubic(starttime, duration) {
    const t = starttime / duration;
    return i2DGeometry$1.pow(t, 3);
}
function easeOutCubic(starttime, duration) {
    let t = starttime / duration;
    t -= 1;
    return t * t * t + 1;
}
function easeInOutCubic(starttime, duration) {
    const t = starttime / duration;
    return t < 0.5 ? 4 * i2DGeometry$1.pow(t, 3) : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;
}
function sinIn(starttime, duration) {
    const t = starttime / duration;
    return 1 - Math.cos((t * Math.PI) / 2);
}
function easeOutSin(starttime, duration) {
    const t = starttime / duration;
    return Math.cos((t * Math.PI) / 2);
}
function easeInOutSin(starttime, duration) {
    const t = starttime / duration;
    return (1 - Math.cos(Math.PI * t)) / 2;
}
function fetchTransitionType(_) {
    let res;
    if (typeof _ === "function") {
        return function custExe(starttime, duration) {
            return _(starttime / duration);
        };
    }
    switch (_) {
        case "easeOutQuad":
            res = easeOutQuad;
            break;
        case "easeInQuad":
            res = easeInQuad;
            break;
        case "easeInOutQuad":
            res = easeInOutQuad;
            break;
        case "easeInCubic":
            res = easeInCubic;
            break;
        case "easeOutCubic":
            res = easeOutCubic;
            break;
        case "easeInOutCubic":
            res = easeInOutCubic;
            break;
        case "easeInSin":
            res = sinIn;
            break;
        case "easeOutSin":
            res = easeOutSin;
            break;
        case "easeInOutSin":
            res = easeInOutSin;
            break;
        case "bounce":
            res = bounce;
            break;
        case "linear":
            res = linear;
            break;
        case "elastic":
            res = elastic;
            break;
        default:
            res = linear;
    }
    return res;
}

let Id$3 = 0;
let chainId = 0;
function generateRendererId() {
    Id$3 += 1;
    return Id$3;
}
function generateChainId() {
    chainId += 1;
    return chainId;
}
const easying$1 = fetchTransitionType;
function easeDef(type) {
    this.easying = easying$1(type);
    this.transition = type;
    return this;
}
function duration(value) {
    if (arguments.length !== 1) {
        throw new Error("arguments mis match");
    }
    this.durationP = value;
    return this;
}
function delay(value) {
    if (arguments.length !== 1) {
        throw new Error("arguments mis match");
    }
    this.delayValue = value;
    return this;
}
function loopValue(value) {
    if (arguments.length !== 1) {
        throw new Error("arguments mis match");
    }
    this.loopValue = value;
    return this;
}
function direction(value) {
    if (arguments.length !== 1) {
        throw new Error("arguments mis match");
    }
    this.directionV = value;
    return this;
}
function bind$2(value) {
    if (arguments.length !== 1) {
        throw new Error("arguments mis match");
    }
    this.data = value;
    if (this.data.nodeName === "CANVAS") {
        this.canvasStack = [];
    }
    return this;
}
function callbckExe(exe) {
    if (typeof exe !== "function") {
        return null;
    }
    this.callbckExe = exe;
    return this;
}
function reset(value) {
    this.resetV = value;
    return this;
}
function child(exe) {
    this.end = exe;
    return this;
}
function end(exe) {
    this.endExe = exe;
    return this;
}
function commit() {
    this.start();
}
function SequenceGroup() {
    this.queue = queue$1;
    this.sequenceQueue = [];
    this.lengthV = 0;
    this.currPos = 0;
    this.ID = generateRendererId();
    this.loopCounter = 0;
}
SequenceGroup.prototype = {
    delay: delay,
    duration,
    loop: loopValue,
    callbck: callbckExe,
    bind: bind$2,
    child,
    ease: easeDef,
    end,
    commit,
    reset,
    direction,
};
SequenceGroup.prototype.add = function SGadd(value) {
    const self = this;
    if (!Array.isArray(value) && typeof value !== "function") {
        value = [value];
    }
    if (Array.isArray(value)) {
        value.map((d) => {
            self.lengthV += d.length ? d.length : 0;
            return d;
        });
    }
    if (this.sequenceQueue.length === 0 && this.delayValue && value.length > 0) {
        value[0].delay += this.delayValue;
    }
    this.sequenceQueue = this.sequenceQueue.concat(value);
    return this;
};
SequenceGroup.prototype.easyingGlobal = function SGeasyingGlobal(completedTime, durationV) {
    return completedTime / durationV;
};
SequenceGroup.prototype.start = function SGstart() {
    const self = this;
    if (self.directionV === "alternate") {
        self.factor = self.factor ? -1 * self.factor : 1;
        self.currPos = self.factor < 0 ? this.sequenceQueue.length - 1 : 0;
    } else if (self.directionV === "reverse") {
        for (let i = 0; i < this.sequenceQueue.length; i += 1) {
            const currObj = this.sequenceQueue[i];
            if (!(currObj instanceof SequenceGroup) && !(currObj instanceof ParallelGroup)) {
                currObj.run(1);
            }
            self.currPos = i;
        }
        self.factor = -1;
    } else {
        self.currPos = 0;
        self.factor = 1;
    }
    this.execute();
};
SequenceGroup.prototype.execute = function SGexecute() {
    const self = this;
    let currObj = this.sequenceQueue[self.currPos];
    currObj = typeof currObj === "function" ? currObj() : currObj;
    if (!currObj) {
        return;
    }
    if (currObj instanceof SequenceGroup || currObj instanceof ParallelGroup) {
        currObj.end(self.triggerEnd.bind(self, currObj)).commit();
    } else {
        this.currObj = currObj;
        this.queue.add(
            generateChainId(),
            {
                run(f) {
                    currObj.run(f);
                },
                target: currObj.target,
                delay: currObj.delay !== undefined ? currObj.delay : 0,
                duration: currObj.duration !== undefined ? currObj.duration : self.durationP,
                loop: currObj.loop ? currObj.loop : 1,
                direction: self.factor < 0 ? "reverse" : "default",
                end: self.triggerEnd.bind(self, currObj),
            },
            (c, v) => c / v
        );
    }
    return this;
};
SequenceGroup.prototype.triggerEnd = function SGtriggerEnd(currObj) {
    const self = this;
    self.currPos += self.factor;
    if (currObj.end) {
        self.triggerChild(currObj);
    }
    if (self.sequenceQueue.length === self.currPos || self.currPos < 0) {
        if (self.endExe) {
            self.endExe();
        }
        self.loopCounter += 1;
        if (self.loopCounter < self.loopValue) {
            self.start();
        }
        return;
    }
    this.execute();
};
SequenceGroup.prototype.triggerChild = function SGtriggerChild(currObj) {
    if (currObj.end instanceof ParallelGroup || currObj.end instanceof SequenceGroup) {
        setTimeout(() => {
            currObj.end.commit();
        }, 0);
    } else {
        currObj.end();
    }
};
function ParallelGroup() {
    this.queue = queue$1;
    this.group = [];
    this.currPos = 0;
    this.delay = 0;
    this.ID = generateRendererId();
    this.loopCounter = 1;
}
ParallelGroup.prototype = {
    delay: delay,
    duration,
    loop: loopValue,
    callbck: callbckExe,
    bind: bind$2,
    child,
    ease: easeDef,
    end,
    commit,
    direction,
};
ParallelGroup.prototype.add = function PGadd(value) {
    const self = this;
    if (!Array.isArray(value)) {
        value = [value];
    }
    value.forEach((d) => {
        d.delay += self.delayValue || 0;
    });
    this.group = this.group.concat(value);
    this.group.forEach((d) => {
        d.durationP = d.durationP ? d.durationP : self.durationP;
    });
    return this;
};
ParallelGroup.prototype.execute = function PGexecute() {
    const self = this;
    self.currPos = 0;
    for (let i = 0, len = self.group.length; i < len; i++) {
        const currObj = self.group[i];
        if (currObj instanceof SequenceGroup || currObj instanceof ParallelGroup) {
            currObj
                .end(self.triggerEnd.bind(self, currObj))
                .commit();
        } else {
            self.queue.add(
                generateChainId(),
                {
                    run(f) {
                        currObj.run(f);
                    },
                    target: currObj.target,
                    delay: currObj.delay !== undefined ? currObj.delay : 0,
                    duration: currObj.duration !== undefined ? currObj.duration : self.durationP,
                    loop: currObj.loop ? currObj.loop : 1,
                    direction: currObj.direction ? currObj.direction : "default",
                    end: self.triggerEnd.bind(self, currObj),
                },
                currObj.ease ? easying$1(currObj.ease) : self.easying
            );
        }
    }
    return self;
};
ParallelGroup.prototype.start = function PGstart() {
    const self = this;
    if (self.directionV === "alternate") {
        self.factor = self.factor ? -1 * self.factor : 1;
    } else if (self.directionV === "reverse") {
        self.factor = -1;
    } else {
        self.factor = 1;
    }
    this.execute();
};
ParallelGroup.prototype.triggerEnd = function PGtriggerEnd(currObj) {
    const self = this;
    this.currPos += 1;
    if (currObj.end) {
        this.triggerChild(currObj.end);
    }
    if (this.currPos === this.group.length) {
        if (this.endExe) {
            this.triggerChild(this.endExe);
        }
        self.loopCounter += 1;
        if (self.loopCounter < self.loopValue) {
            self.start();
        }
    }
};
ParallelGroup.prototype.triggerChild = function PGtriggerChild(exe) {
    if (exe instanceof ParallelGroup || exe instanceof SequenceGroup) {
        exe.commit();
    } else if (typeof exe === "function") {
        exe();
    } else {
        console.log("wrong type");
    }
};
function sequenceChain() {
    return new SequenceGroup();
}
function parallelChain() {
    return new ParallelGroup();
}
var chain = {
    sequenceChain,
    parallelChain,
};

function polygonArea(polygon) {
  var i = -1,
      n = polygon.length,
      a,
      b = polygon[n - 1],
      area = 0;
  while (++i < n) {
    a = b;
    b = polygon[i];
    area += a[1] * b[0] - a[0] * b[1];
  }
  return area / 2;
}

function polygonLength(polygon) {
  var i = -1,
      n = polygon.length,
      b = polygon[n - 1],
      xa,
      ya,
      xb = b[0],
      yb = b[1],
      perimeter = 0;
  while (++i < n) {
    xa = xb;
    ya = yb;
    b = polygon[i];
    xb = b[0];
    yb = b[1];
    xa -= xb;
    ya -= yb;
    perimeter += Math.sqrt(xa * xa + ya * ya);
  }
  return perimeter;
}

var commonjsGlobal$1 = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function getDefaultExportFromCjs$1 (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

var paramCounts = { a: 7, c: 6, h: 1, l: 2, m: 2, r: 4, q: 4, s: 4, t: 2, v: 1, z: 0 };
var SPECIAL_SPACES = [
  0x1680, 0x180E, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006,
  0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF
];
function isSpace(ch) {
  return (ch === 0x0A) || (ch === 0x0D) || (ch === 0x2028) || (ch === 0x2029) ||
    (ch === 0x20) || (ch === 0x09) || (ch === 0x0B) || (ch === 0x0C) || (ch === 0xA0) ||
    (ch >= 0x1680 && SPECIAL_SPACES.indexOf(ch) >= 0);
}
function isCommand(code) {
  switch (code | 0x20) {
    case 0x6D:
    case 0x7A:
    case 0x6C:
    case 0x68:
    case 0x76:
    case 0x63:
    case 0x73:
    case 0x71:
    case 0x74:
    case 0x61:
    case 0x72:
      return true;
  }
  return false;
}
function isArc(code) {
  return (code | 0x20) === 0x61;
}
function isDigit(code) {
  return (code >= 48 && code <= 57);
}
function isDigitStart(code) {
  return (code >= 48 && code <= 57) ||
          code === 0x2B ||
          code === 0x2D ||
          code === 0x2E;
}
function State(path) {
  this.index  = 0;
  this.path   = path;
  this.max    = path.length;
  this.result = [];
  this.param  = 0.0;
  this.err    = '';
  this.segmentStart = 0;
  this.data   = [];
}
function skipSpaces(state) {
  while (state.index < state.max && isSpace(state.path.charCodeAt(state.index))) {
    state.index++;
  }
}
function scanFlag(state) {
  var ch = state.path.charCodeAt(state.index);
  if (ch === 0x30) {
    state.param = 0;
    state.index++;
    return;
  }
  if (ch === 0x31) {
    state.param = 1;
    state.index++;
    return;
  }
  state.err = 'SvgPath: arc flag can be 0 or 1 only (at pos ' + state.index + ')';
}
function scanParam(state) {
  var start = state.index,
      index = start,
      max = state.max,
      zeroFirst = false,
      hasCeiling = false,
      hasDecimal = false,
      hasDot = false,
      ch;
  if (index >= max) {
    state.err = 'SvgPath: missed param (at pos ' + index + ')';
    return;
  }
  ch = state.path.charCodeAt(index);
  if (ch === 0x2B || ch === 0x2D) {
    index++;
    ch = (index < max) ? state.path.charCodeAt(index) : 0;
  }
  if (!isDigit(ch) && ch !== 0x2E) {
    state.err = 'SvgPath: param should start with 0..9 or `.` (at pos ' + index + ')';
    return;
  }
  if (ch !== 0x2E) {
    zeroFirst = (ch === 0x30);
    index++;
    ch = (index < max) ? state.path.charCodeAt(index) : 0;
    if (zeroFirst && index < max) {
      if (ch && isDigit(ch)) {
        state.err = 'SvgPath: numbers started with `0` such as `09` are illegal (at pos ' + start + ')';
        return;
      }
    }
    while (index < max && isDigit(state.path.charCodeAt(index))) {
      index++;
      hasCeiling = true;
    }
    ch = (index < max) ? state.path.charCodeAt(index) : 0;
  }
  if (ch === 0x2E) {
    hasDot = true;
    index++;
    while (isDigit(state.path.charCodeAt(index))) {
      index++;
      hasDecimal = true;
    }
    ch = (index < max) ? state.path.charCodeAt(index) : 0;
  }
  if (ch === 0x65 || ch === 0x45) {
    if (hasDot && !hasCeiling && !hasDecimal) {
      state.err = 'SvgPath: invalid float exponent (at pos ' + index + ')';
      return;
    }
    index++;
    ch = (index < max) ? state.path.charCodeAt(index) : 0;
    if (ch === 0x2B || ch === 0x2D) {
      index++;
    }
    if (index < max && isDigit(state.path.charCodeAt(index))) {
      while (index < max && isDigit(state.path.charCodeAt(index))) {
        index++;
      }
    } else {
      state.err = 'SvgPath: invalid float exponent (at pos ' + index + ')';
      return;
    }
  }
  state.index = index;
  state.param = parseFloat(state.path.slice(start, index)) + 0.0;
}
function finalizeSegment(state) {
  var cmd, cmdLC;
  cmd   = state.path[state.segmentStart];
  cmdLC = cmd.toLowerCase();
  var params = state.data;
  if (cmdLC === 'm' && params.length > 2) {
    state.result.push([ cmd, params[0], params[1] ]);
    params = params.slice(2);
    cmdLC = 'l';
    cmd = (cmd === 'm') ? 'l' : 'L';
  }
  if (cmdLC === 'r') {
    state.result.push([ cmd ].concat(params));
  } else {
    while (params.length >= paramCounts[cmdLC]) {
      state.result.push([ cmd ].concat(params.splice(0, paramCounts[cmdLC])));
      if (!paramCounts[cmdLC]) {
        break;
      }
    }
  }
}
function scanSegment(state) {
  var max = state.max,
      cmdCode, is_arc, comma_found, need_params, i;
  state.segmentStart = state.index;
  cmdCode = state.path.charCodeAt(state.index);
  is_arc = isArc(cmdCode);
  if (!isCommand(cmdCode)) {
    state.err = 'SvgPath: bad command ' + state.path[state.index] + ' (at pos ' + state.index + ')';
    return;
  }
  need_params = paramCounts[state.path[state.index].toLowerCase()];
  state.index++;
  skipSpaces(state);
  state.data = [];
  if (!need_params) {
    finalizeSegment(state);
    return;
  }
  comma_found = false;
  for (;;) {
    for (i = need_params; i > 0; i--) {
      if (is_arc && (i === 3 || i === 4)) scanFlag(state);
      else scanParam(state);
      if (state.err.length) {
        finalizeSegment(state);
        return;
      }
      state.data.push(state.param);
      skipSpaces(state);
      comma_found = false;
      if (state.index < max && state.path.charCodeAt(state.index) === 0x2C) {
        state.index++;
        skipSpaces(state);
        comma_found = true;
      }
    }
    if (comma_found) {
      continue;
    }
    if (state.index >= state.max) {
      break;
    }
    if (!isDigitStart(state.path.charCodeAt(state.index))) {
      break;
    }
  }
  finalizeSegment(state);
}
var path_parse = function pathParse(svgPath) {
  var state = new State(svgPath);
  var max = state.max;
  skipSpaces(state);
  while (state.index < max && !state.err.length) {
    scanSegment(state);
  }
  if (state.result.length) {
    if ('mM'.indexOf(state.result[0][0]) < 0) {
      state.err = 'SvgPath: string should start with `M` or `m`';
      state.result = [];
    } else {
      state.result[0][0] = 'M';
    }
  }
  return {
    err: state.err,
    segments: state.result
  };
};

function combine(m1, m2) {
  return [
    m1[0] * m2[0] + m1[2] * m2[1],
    m1[1] * m2[0] + m1[3] * m2[1],
    m1[0] * m2[2] + m1[2] * m2[3],
    m1[1] * m2[2] + m1[3] * m2[3],
    m1[0] * m2[4] + m1[2] * m2[5] + m1[4],
    m1[1] * m2[4] + m1[3] * m2[5] + m1[5]
  ];
}
function Matrix$1() {
  if (!(this instanceof Matrix$1)) { return new Matrix$1(); }
  this.queue = [];
  this.cache = null;
}
Matrix$1.prototype.matrix = function (m) {
  if (m[0] === 1 && m[1] === 0 && m[2] === 0 && m[3] === 1 && m[4] === 0 && m[5] === 0) {
    return this;
  }
  this.cache = null;
  this.queue.push(m);
  return this;
};
Matrix$1.prototype.translate = function (tx, ty) {
  if (tx !== 0 || ty !== 0) {
    this.cache = null;
    this.queue.push([ 1, 0, 0, 1, tx, ty ]);
  }
  return this;
};
Matrix$1.prototype.scale = function (sx, sy) {
  if (sx !== 1 || sy !== 1) {
    this.cache = null;
    this.queue.push([ sx, 0, 0, sy, 0, 0 ]);
  }
  return this;
};
Matrix$1.prototype.rotate = function (angle, rx, ry) {
  var rad, cos, sin;
  if (angle !== 0) {
    this.translate(rx, ry);
    rad = angle * Math.PI / 180;
    cos = Math.cos(rad);
    sin = Math.sin(rad);
    this.queue.push([ cos, sin, -sin, cos, 0, 0 ]);
    this.cache = null;
    this.translate(-rx, -ry);
  }
  return this;
};
Matrix$1.prototype.skewX = function (angle) {
  if (angle !== 0) {
    this.cache = null;
    this.queue.push([ 1, 0, Math.tan(angle * Math.PI / 180), 1, 0, 0 ]);
  }
  return this;
};
Matrix$1.prototype.skewY = function (angle) {
  if (angle !== 0) {
    this.cache = null;
    this.queue.push([ 1, Math.tan(angle * Math.PI / 180), 0, 1, 0, 0 ]);
  }
  return this;
};
Matrix$1.prototype.toArray = function () {
  if (this.cache) {
    return this.cache;
  }
  if (!this.queue.length) {
    this.cache = [ 1, 0, 0, 1, 0, 0 ];
    return this.cache;
  }
  this.cache = this.queue[0];
  if (this.queue.length === 1) {
    return this.cache;
  }
  for (var i = 1; i < this.queue.length; i++) {
    this.cache = combine(this.cache, this.queue[i]);
  }
  return this.cache;
};
Matrix$1.prototype.calc = function (x, y, isRelative) {
  var m;
  if (!this.queue.length) { return [ x, y ]; }
  if (!this.cache) {
    this.cache = this.toArray();
  }
  m = this.cache;
  return [
    x * m[0] + y * m[2] + (isRelative ? 0 : m[4]),
    x * m[1] + y * m[3] + (isRelative ? 0 : m[5])
  ];
};
var matrix$1 = Matrix$1;

var Matrix = matrix$1;
var operations = {
  matrix: true,
  scale: true,
  rotate: true,
  translate: true,
  skewX: true,
  skewY: true
};
var CMD_SPLIT_RE    = /\s*(matrix|translate|scale|rotate|skewX|skewY)\s*\(\s*(.+?)\s*\)[\s,]*/;
var PARAMS_SPLIT_RE = /[\s,]+/;
var transform_parse = function transformParse(transformString) {
  var matrix = new Matrix();
  var cmd, params;
  transformString.split(CMD_SPLIT_RE).forEach(function (item) {
    if (!item.length) { return; }
    if (typeof operations[item] !== 'undefined') {
      cmd = item;
      return;
    }
    params = item.split(PARAMS_SPLIT_RE).map(function (i) {
      return +i || 0;
    });
    switch (cmd) {
      case 'matrix':
        if (params.length === 6) {
          matrix.matrix(params);
        }
        return;
      case 'scale':
        if (params.length === 1) {
          matrix.scale(params[0], params[0]);
        } else if (params.length === 2) {
          matrix.scale(params[0], params[1]);
        }
        return;
      case 'rotate':
        if (params.length === 1) {
          matrix.rotate(params[0], 0, 0);
        } else if (params.length === 3) {
          matrix.rotate(params[0], params[1], params[2]);
        }
        return;
      case 'translate':
        if (params.length === 1) {
          matrix.translate(params[0], 0);
        } else if (params.length === 2) {
          matrix.translate(params[0], params[1]);
        }
        return;
      case 'skewX':
        if (params.length === 1) {
          matrix.skewX(params[0]);
        }
        return;
      case 'skewY':
        if (params.length === 1) {
          matrix.skewY(params[0]);
        }
        return;
    }
  });
  return matrix;
};

var TAU = Math.PI * 2;
function unit_vector_angle(ux, uy, vx, vy) {
  var sign = (ux * vy - uy * vx < 0) ? -1 : 1;
  var dot  = ux * vx + uy * vy;
  if (dot >  1.0) { dot =  1.0; }
  if (dot < -1.0) { dot = -1.0; }
  return sign * Math.acos(dot);
}
function get_arc_center(x1, y1, x2, y2, fa, fs, rx, ry, sin_phi, cos_phi) {
  var x1p =  cos_phi*(x1-x2)/2 + sin_phi*(y1-y2)/2;
  var y1p = -sin_phi*(x1-x2)/2 + cos_phi*(y1-y2)/2;
  var rx_sq  =  rx * rx;
  var ry_sq  =  ry * ry;
  var x1p_sq = x1p * x1p;
  var y1p_sq = y1p * y1p;
  var radicant = (rx_sq * ry_sq) - (rx_sq * y1p_sq) - (ry_sq * x1p_sq);
  if (radicant < 0) {
    radicant = 0;
  }
  radicant /=   (rx_sq * y1p_sq) + (ry_sq * x1p_sq);
  radicant = Math.sqrt(radicant) * (fa === fs ? -1 : 1);
  var cxp = radicant *  rx/ry * y1p;
  var cyp = radicant * -ry/rx * x1p;
  var cx = cos_phi*cxp - sin_phi*cyp + (x1+x2)/2;
  var cy = sin_phi*cxp + cos_phi*cyp + (y1+y2)/2;
  var v1x =  (x1p - cxp) / rx;
  var v1y =  (y1p - cyp) / ry;
  var v2x = (-x1p - cxp) / rx;
  var v2y = (-y1p - cyp) / ry;
  var theta1 = unit_vector_angle(1, 0, v1x, v1y);
  var delta_theta = unit_vector_angle(v1x, v1y, v2x, v2y);
  if (fs === 0 && delta_theta > 0) {
    delta_theta -= TAU;
  }
  if (fs === 1 && delta_theta < 0) {
    delta_theta += TAU;
  }
  return [ cx, cy, theta1, delta_theta ];
}
function approximate_unit_arc(theta1, delta_theta) {
  var alpha = 4/3 * Math.tan(delta_theta/4);
  var x1 = Math.cos(theta1);
  var y1 = Math.sin(theta1);
  var x2 = Math.cos(theta1 + delta_theta);
  var y2 = Math.sin(theta1 + delta_theta);
  return [ x1, y1, x1 - y1*alpha, y1 + x1*alpha, x2 + y2*alpha, y2 - x2*alpha, x2, y2 ];
}
var a2c$1 = function a2c(x1, y1, x2, y2, fa, fs, rx, ry, phi) {
  var sin_phi = Math.sin(phi * TAU / 360);
  var cos_phi = Math.cos(phi * TAU / 360);
  var x1p =  cos_phi*(x1-x2)/2 + sin_phi*(y1-y2)/2;
  var y1p = -sin_phi*(x1-x2)/2 + cos_phi*(y1-y2)/2;
  if (x1p === 0 && y1p === 0) {
    return [];
  }
  if (rx === 0 || ry === 0) {
    return [];
  }
  rx = Math.abs(rx);
  ry = Math.abs(ry);
  var lambda = (x1p * x1p) / (rx * rx) + (y1p * y1p) / (ry * ry);
  if (lambda > 1) {
    rx *= Math.sqrt(lambda);
    ry *= Math.sqrt(lambda);
  }
  var cc = get_arc_center(x1, y1, x2, y2, fa, fs, rx, ry, sin_phi, cos_phi);
  var result = [];
  var theta1 = cc[2];
  var delta_theta = cc[3];
  var segments = Math.max(Math.ceil(Math.abs(delta_theta) / (TAU / 4)), 1);
  delta_theta /= segments;
  for (var i = 0; i < segments; i++) {
    result.push(approximate_unit_arc(theta1, delta_theta));
    theta1 += delta_theta;
  }
  return result.map(function (curve) {
    for (var i = 0; i < curve.length; i += 2) {
      var x = curve[i + 0];
      var y = curve[i + 1];
      x *= rx;
      y *= ry;
      var xp = cos_phi*x - sin_phi*y;
      var yp = sin_phi*x + cos_phi*y;
      curve[i + 0] = xp + cc[0];
      curve[i + 1] = yp + cc[1];
    }
    return curve;
  });
};

var epsilon = 0.0000000001;
var torad = Math.PI / 180;
function Ellipse(rx, ry, ax) {
  if (!(this instanceof Ellipse)) { return new Ellipse(rx, ry, ax); }
  this.rx = rx;
  this.ry = ry;
  this.ax = ax;
}
Ellipse.prototype.transform = function (m) {
  var c = Math.cos(this.ax * torad), s = Math.sin(this.ax * torad);
  var ma = [
    this.rx * (m[0]*c + m[2]*s),
    this.rx * (m[1]*c + m[3]*s),
    this.ry * (-m[0]*s + m[2]*c),
    this.ry * (-m[1]*s + m[3]*c)
  ];
  var J = ma[0]*ma[0] + ma[2]*ma[2],
      K = ma[1]*ma[1] + ma[3]*ma[3];
  var D = ((ma[0]-ma[3])*(ma[0]-ma[3]) + (ma[2]+ma[1])*(ma[2]+ma[1])) *
          ((ma[0]+ma[3])*(ma[0]+ma[3]) + (ma[2]-ma[1])*(ma[2]-ma[1]));
  var JK = (J + K) / 2;
  if (D < epsilon * JK) {
    this.rx = this.ry = Math.sqrt(JK);
    this.ax = 0;
    return this;
  }
  var L = ma[0]*ma[1] + ma[2]*ma[3];
  D = Math.sqrt(D);
  var l1 = JK + D/2,
      l2 = JK - D/2;
  this.ax = (Math.abs(L) < epsilon && Math.abs(l1 - K) < epsilon) ?
    90
  :
    Math.atan(Math.abs(L) > Math.abs(l1 - K) ?
      (l1 - J) / L
    :
      L / (l1 - K)
    ) * 180 / Math.PI;
  if (this.ax >= 0) {
    this.rx = Math.sqrt(l1);
    this.ry = Math.sqrt(l2);
  } else {
    this.ax += 90;
    this.rx = Math.sqrt(l2);
    this.ry = Math.sqrt(l1);
  }
  return this;
};
Ellipse.prototype.isDegenerate = function () {
  return (this.rx < epsilon * this.ry || this.ry < epsilon * this.rx);
};
var ellipse$1 = Ellipse;

var pathParse      = path_parse;
var transformParse = transform_parse;
var matrix         = matrix$1;
var a2c            = a2c$1;
var ellipse        = ellipse$1;
function SvgPath(path) {
  if (!(this instanceof SvgPath)) { return new SvgPath(path); }
  var pstate = pathParse(path);
  this.segments = pstate.segments;
  this.err      = pstate.err;
  this.__stack    = [];
}
SvgPath.from = function (src) {
  if (typeof src === 'string') return new SvgPath(src);
  if (src instanceof SvgPath) {
    var s = new SvgPath('');
    s.err = src.err;
    s.segments = src.segments.map(function (sgm) { return sgm.slice(); });
    s.__stack = src.__stack.map(function (m) {
      return matrix().matrix(m.toArray());
    });
    return s;
  }
  throw new Error('SvgPath.from: invalid param type ' + src);
};
SvgPath.prototype.__matrix = function (m) {
  var self = this, i;
  if (!m.queue.length) { return; }
  this.iterate(function (s, index, x, y) {
    var p, result, name, isRelative;
    switch (s[0]) {
      case 'v':
        p      = m.calc(0, s[1], true);
        result = (p[0] === 0) ? [ 'v', p[1] ] : [ 'l', p[0], p[1] ];
        break;
      case 'V':
        p      = m.calc(x, s[1], false);
        result = (p[0] === m.calc(x, y, false)[0]) ? [ 'V', p[1] ] : [ 'L', p[0], p[1] ];
        break;
      case 'h':
        p      = m.calc(s[1], 0, true);
        result = (p[1] === 0) ? [ 'h', p[0] ] : [ 'l', p[0], p[1] ];
        break;
      case 'H':
        p      = m.calc(s[1], y, false);
        result = (p[1] === m.calc(x, y, false)[1]) ? [ 'H', p[0] ] : [ 'L', p[0], p[1] ];
        break;
      case 'a':
      case 'A':
        var ma = m.toArray();
        var e = ellipse(s[1], s[2], s[3]).transform(ma);
        if (ma[0] * ma[3] - ma[1] * ma[2] < 0) {
          s[5] = s[5] ? '0' : '1';
        }
        p = m.calc(s[6], s[7], s[0] === 'a');
        if ((s[0] === 'A' && s[6] === x && s[7] === y) ||
            (s[0] === 'a' && s[6] === 0 && s[7] === 0)) {
          result = [ s[0] === 'a' ? 'l' : 'L', p[0], p[1] ];
          break;
        }
        if (e.isDegenerate()) {
          result = [ s[0] === 'a' ? 'l' : 'L', p[0], p[1] ];
        } else {
          result = [ s[0], e.rx, e.ry, e.ax, s[4], s[5], p[0], p[1] ];
        }
        break;
      case 'm':
        isRelative = index > 0;
        p = m.calc(s[1], s[2], isRelative);
        result = [ 'm', p[0], p[1] ];
        break;
      default:
        name       = s[0];
        result     = [ name ];
        isRelative = (name.toLowerCase() === name);
        for (i = 1; i < s.length; i += 2) {
          p = m.calc(s[i], s[i + 1], isRelative);
          result.push(p[0], p[1]);
        }
    }
    self.segments[index] = result;
  }, true);
};
SvgPath.prototype.__evaluateStack = function () {
  var m, i;
  if (!this.__stack.length) { return; }
  if (this.__stack.length === 1) {
    this.__matrix(this.__stack[0]);
    this.__stack = [];
    return;
  }
  m = matrix();
  i = this.__stack.length;
  while (--i >= 0) {
    m.matrix(this.__stack[i].toArray());
  }
  this.__matrix(m);
  this.__stack = [];
};
SvgPath.prototype.toString = function () {
  var result = '', prevCmd = '', cmdSkipped = false;
  this.__evaluateStack();
  for (var i = 0, len = this.segments.length; i < len; i++) {
    var segment = this.segments[i];
    var cmd = segment[0];
    if (cmd !== prevCmd || cmd === 'm' || cmd === 'M') {
      if (cmd === 'm' && prevCmd === 'z') result += ' ';
      result += cmd;
      cmdSkipped = false;
    } else {
      cmdSkipped = true;
    }
    for (var pos = 1; pos < segment.length; pos++) {
      var val = segment[pos];
      if (pos === 1) {
        if (cmdSkipped && val >= 0) result += ' ';
      } else if (val >= 0) result += ' ';
      result += val;
    }
    prevCmd = cmd;
  }
  return result;
};
SvgPath.prototype.translate = function (x, y) {
  this.__stack.push(matrix().translate(x, y || 0));
  return this;
};
SvgPath.prototype.scale = function (sx, sy) {
  this.__stack.push(matrix().scale(sx, (!sy && (sy !== 0)) ? sx : sy));
  return this;
};
SvgPath.prototype.rotate = function (angle, rx, ry) {
  this.__stack.push(matrix().rotate(angle, rx || 0, ry || 0));
  return this;
};
SvgPath.prototype.skewX = function (degrees) {
  this.__stack.push(matrix().skewX(degrees));
  return this;
};
SvgPath.prototype.skewY = function (degrees) {
  this.__stack.push(matrix().skewY(degrees));
  return this;
};
SvgPath.prototype.matrix = function (m) {
  this.__stack.push(matrix().matrix(m));
  return this;
};
SvgPath.prototype.transform = function (transformString) {
  if (!transformString.trim()) {
    return this;
  }
  this.__stack.push(transformParse(transformString));
  return this;
};
SvgPath.prototype.round = function (d) {
  var contourStartDeltaX = 0, contourStartDeltaY = 0, deltaX = 0, deltaY = 0, l;
  d = d || 0;
  this.__evaluateStack();
  this.segments.forEach(function (s) {
    var isRelative = (s[0].toLowerCase() === s[0]);
    switch (s[0]) {
      case 'H':
      case 'h':
        if (isRelative) { s[1] += deltaX; }
        deltaX = s[1] - s[1].toFixed(d);
        s[1] = +s[1].toFixed(d);
        return;
      case 'V':
      case 'v':
        if (isRelative) { s[1] += deltaY; }
        deltaY = s[1] - s[1].toFixed(d);
        s[1] = +s[1].toFixed(d);
        return;
      case 'Z':
      case 'z':
        deltaX = contourStartDeltaX;
        deltaY = contourStartDeltaY;
        return;
      case 'M':
      case 'm':
        if (isRelative) {
          s[1] += deltaX;
          s[2] += deltaY;
        }
        deltaX = s[1] - s[1].toFixed(d);
        deltaY = s[2] - s[2].toFixed(d);
        contourStartDeltaX = deltaX;
        contourStartDeltaY = deltaY;
        s[1] = +s[1].toFixed(d);
        s[2] = +s[2].toFixed(d);
        return;
      case 'A':
      case 'a':
        if (isRelative) {
          s[6] += deltaX;
          s[7] += deltaY;
        }
        deltaX = s[6] - s[6].toFixed(d);
        deltaY = s[7] - s[7].toFixed(d);
        s[1] = +s[1].toFixed(d);
        s[2] = +s[2].toFixed(d);
        s[3] = +s[3].toFixed(d + 2);
        s[6] = +s[6].toFixed(d);
        s[7] = +s[7].toFixed(d);
        return;
      default:
        l = s.length;
        if (isRelative) {
          s[l - 2] += deltaX;
          s[l - 1] += deltaY;
        }
        deltaX = s[l - 2] - s[l - 2].toFixed(d);
        deltaY = s[l - 1] - s[l - 1].toFixed(d);
        s.forEach(function (val, i) {
          if (!i) { return; }
          s[i] = +s[i].toFixed(d);
        });
        return;
    }
  });
  return this;
};
SvgPath.prototype.iterate = function (iterator, keepLazyStack) {
  var segments = this.segments,
      replacements = {},
      needReplace = false,
      lastX = 0,
      lastY = 0,
      countourStartX = 0,
      countourStartY = 0;
  var i, j, newSegments;
  if (!keepLazyStack) {
    this.__evaluateStack();
  }
  segments.forEach(function (s, index) {
    var res = iterator(s, index, lastX, lastY);
    if (Array.isArray(res)) {
      replacements[index] = res;
      needReplace = true;
    }
    var isRelative = (s[0] === s[0].toLowerCase());
    switch (s[0]) {
      case 'm':
      case 'M':
        lastX = s[1] + (isRelative ? lastX : 0);
        lastY = s[2] + (isRelative ? lastY : 0);
        countourStartX = lastX;
        countourStartY = lastY;
        return;
      case 'h':
      case 'H':
        lastX = s[1] + (isRelative ? lastX : 0);
        return;
      case 'v':
      case 'V':
        lastY = s[1] + (isRelative ? lastY : 0);
        return;
      case 'z':
      case 'Z':
        lastX = countourStartX;
        lastY = countourStartY;
        return;
      default:
        lastX = s[s.length - 2] + (isRelative ? lastX : 0);
        lastY = s[s.length - 1] + (isRelative ? lastY : 0);
    }
  });
  if (!needReplace) { return this; }
  newSegments = [];
  for (i = 0; i < segments.length; i++) {
    if (typeof replacements[i] !== 'undefined') {
      for (j = 0; j < replacements[i].length; j++) {
        newSegments.push(replacements[i][j]);
      }
    } else {
      newSegments.push(segments[i]);
    }
  }
  this.segments = newSegments;
  return this;
};
SvgPath.prototype.abs = function () {
  this.iterate(function (s, index, x, y) {
    var name = s[0],
        nameUC = name.toUpperCase(),
        i;
    if (name === nameUC) { return; }
    s[0] = nameUC;
    switch (name) {
      case 'v':
        s[1] += y;
        return;
      case 'a':
        s[6] += x;
        s[7] += y;
        return;
      default:
        for (i = 1; i < s.length; i++) {
          s[i] += i % 2 ? x : y;
        }
    }
  }, true);
  return this;
};
SvgPath.prototype.rel = function () {
  this.iterate(function (s, index, x, y) {
    var name = s[0],
        nameLC = name.toLowerCase(),
        i;
    if (name === nameLC) { return; }
    if (index === 0 && name === 'M') { return; }
    s[0] = nameLC;
    switch (name) {
      case 'V':
        s[1] -= y;
        return;
      case 'A':
        s[6] -= x;
        s[7] -= y;
        return;
      default:
        for (i = 1; i < s.length; i++) {
          s[i] -= i % 2 ? x : y;
        }
    }
  }, true);
  return this;
};
SvgPath.prototype.unarc = function () {
  this.iterate(function (s, index, x, y) {
    var new_segments, nextX, nextY, result = [], name = s[0];
    if (name !== 'A' && name !== 'a') { return null; }
    if (name === 'a') {
      nextX = x + s[6];
      nextY = y + s[7];
    } else {
      nextX = s[6];
      nextY = s[7];
    }
    new_segments = a2c(x, y, nextX, nextY, s[4], s[5], s[1], s[2], s[3]);
    if (new_segments.length === 0) {
      return [ [ s[0] === 'a' ? 'l' : 'L', s[6], s[7] ] ];
    }
    new_segments.forEach(function (s) {
      result.push([ 'C', s[2], s[3], s[4], s[5], s[6], s[7] ]);
    });
    return result;
  });
  return this;
};
SvgPath.prototype.unshort = function () {
  var segments = this.segments;
  var prevControlX, prevControlY, prevSegment;
  var curControlX, curControlY;
  this.iterate(function (s, idx, x, y) {
    var name = s[0], nameUC = name.toUpperCase(), isRelative;
    if (!idx) { return; }
    if (nameUC === 'T') {
      isRelative = (name === 't');
      prevSegment = segments[idx - 1];
      if (prevSegment[0] === 'Q') {
        prevControlX = prevSegment[1] - x;
        prevControlY = prevSegment[2] - y;
      } else if (prevSegment[0] === 'q') {
        prevControlX = prevSegment[1] - prevSegment[3];
        prevControlY = prevSegment[2] - prevSegment[4];
      } else {
        prevControlX = 0;
        prevControlY = 0;
      }
      curControlX = -prevControlX;
      curControlY = -prevControlY;
      if (!isRelative) {
        curControlX += x;
        curControlY += y;
      }
      segments[idx] = [
        isRelative ? 'q' : 'Q',
        curControlX, curControlY,
        s[1], s[2]
      ];
    } else if (nameUC === 'S') {
      isRelative = (name === 's');
      prevSegment = segments[idx - 1];
      if (prevSegment[0] === 'C') {
        prevControlX = prevSegment[3] - x;
        prevControlY = prevSegment[4] - y;
      } else if (prevSegment[0] === 'c') {
        prevControlX = prevSegment[3] - prevSegment[5];
        prevControlY = prevSegment[4] - prevSegment[6];
      } else {
        prevControlX = 0;
        prevControlY = 0;
      }
      curControlX = -prevControlX;
      curControlY = -prevControlY;
      if (!isRelative) {
        curControlX += x;
        curControlY += y;
      }
      segments[idx] = [
        isRelative ? 'c' : 'C',
        curControlX, curControlY,
        s[1], s[2], s[3], s[4]
      ];
    }
  });
  return this;
};
var svgpath$1 = SvgPath;

var svgpath = svgpath$1;

var Path$1 = /*@__PURE__*/getDefaultExportFromCjs$1(svgpath);

var pathProperties = {exports: {}};

(function (module, exports) {
	(function (global, factory) {
		factory(exports) ;
	}(commonjsGlobal$1, (function (exports) {	var length = {a: 7, c: 6, h: 1, l: 2, m: 2, q: 4, s: 4, t: 2, v: 1, z: 0};
	var segment = /([astvzqmhlc])([^astvzqmhlc]*)/ig;
	var parse = function(path) {
	  var data = [];
		path.replace(segment, function(_, command, args){
			var type = command.toLowerCase();
			args = parseValues(args);
			if (type === 'm' && args.length > 2) {
				data.push([command].concat(args.splice(0, 2)));
				type = 'l';
				command = command === 'm' ? 'l' : 'L';
			}
			while (args.length >= 0) {
				if (args.length === length[type]) {
					args.unshift(command);
					return data.push(args);
				}
				if (args.length < length[type]) {
	        throw new Error('malformed path data');
	      }
				data.push([command].concat(args.splice(0, length[type])));
			}
		});
	  return data;
	};
	var number = /-?[0-9]*\.?[0-9]+(?:e[-+]?\d+)?/ig;
	function parseValues(args) {
		var numbers = args.match(number);
		return numbers ? numbers.map(Number) : [];
	}
	var Bezier = function(ax, ay, bx, by, cx, cy, dx, dy) {
	  return new Bezier$1(ax, ay, bx, by, cx, cy, dx, dy);
	};
	function Bezier$1(ax, ay, bx, by, cx, cy, dx, dy) {
	  this.a = {x:ax, y:ay};
	  this.b = {x:bx, y:by};
	  this.c = {x:cx, y:cy};
	  this.d = {x:dx, y:dy};
	  if(dx !== null && dx !== undefined && dy !== null && dy !== undefined){
	    this.getArcLength = getCubicArcLength;
	    this.getPoint = cubicPoint;
	    this.getDerivative = cubicDerivative;
	  } else {
	    this.getArcLength = getQuadraticArcLength;
	    this.getPoint = quadraticPoint;
	    this.getDerivative = quadraticDerivative;
	  }
	  this.init();
	}
	Bezier$1.prototype = {
	  constructor: Bezier$1,
	  init: function() {
	    this.length = this.getArcLength([this.a.x, this.b.x, this.c.x, this.d.x],
	                                    [this.a.y, this.b.y, this.c.y, this.d.y]);
	  },
	  getTotalLength: function() {
	    return this.length;
	  },
	  getPointAtLength: function(length) {
	    var t = t2length(length, this.length, this.getArcLength,
	                    [this.a.x, this.b.x, this.c.x, this.d.x],
	                    [this.a.y, this.b.y, this.c.y, this.d.y]);
	    return this.getPoint([this.a.x, this.b.x, this.c.x, this.d.x],
	                                    [this.a.y, this.b.y, this.c.y, this.d.y],
	                                  t);
	  },
	  getTangentAtLength: function(length){
	    var t = t2length(length, this.length, this.getArcLength,
	                    [this.a.x, this.b.x, this.c.x, this.d.x],
	                    [this.a.y, this.b.y, this.c.y, this.d.y]);
	    var derivative = this.getDerivative([this.a.x, this.b.x, this.c.x, this.d.x],
	                    [this.a.y, this.b.y, this.c.y, this.d.y], t);
	    var mdl = Math.sqrt(derivative.x * derivative.x + derivative.y * derivative.y);
	    var tangent;
	    if (mdl > 0){
	      tangent = {x: derivative.x/mdl, y: derivative.y/mdl};
	    } else {
	      tangent = {x: 0, y: 0};
	    }
	    return tangent;
	  },
	  getPropertiesAtLength: function(length){
	    var t = t2length(length, this.length, this.getArcLength,
	                    [this.a.x, this.b.x, this.c.x, this.d.x],
	                    [this.a.y, this.b.y, this.c.y, this.d.y]);
	    var derivative = this.getDerivative([this.a.x, this.b.x, this.c.x, this.d.x],
	                    [this.a.y, this.b.y, this.c.y, this.d.y], t);
	    var mdl = Math.sqrt(derivative.x * derivative.x + derivative.y * derivative.y);
	    var tangent;
	    if (mdl > 0){
	      tangent = {x: derivative.x/mdl, y: derivative.y/mdl};
	    } else {
	      tangent = {x: 0, y: 0};
	    }
	    var point = this.getPoint([this.a.x, this.b.x, this.c.x, this.d.x],
	                                    [this.a.y, this.b.y, this.c.y, this.d.y],
	                                  t);
	    return {x: point.x, y: point.y, tangentX: tangent.x, tangentY: tangent.y};
	  }
	};
	function quadraticDerivative(xs, ys, t){
	  return {x: (1 - t) * 2*(xs[1] - xs[0]) +t * 2*(xs[2] - xs[1]),
	    y: (1 - t) * 2*(ys[1] - ys[0]) +t * 2*(ys[2] - ys[1])
	  };
	}
	function cubicDerivative(xs, ys, t){
	  var derivative = quadraticPoint(
	            [3*(xs[1] - xs[0]), 3*(xs[2] - xs[1]), 3*(xs[3] - xs[2])],
	            [3*(ys[1] - ys[0]), 3*(ys[2] - ys[1]), 3*(ys[3] - ys[2])],
	            t);
	  return derivative;
	}
	function t2length(length, total_length, func, xs, ys){
	  var error = 1;
	  var t = length/total_length;
	  var step = (length - func(xs, ys, t))/total_length;
	  while (error > 0.001){
	    var increasedTLength = func(xs, ys, t + step);
	    var decreasedTLength = func(xs, ys, t - step);
	    var increasedTError = Math.abs(length - increasedTLength)/total_length;
	    var decreasedTError = Math.abs(length - decreasedTLength)/total_length;
	    if (increasedTError < error) {
	      error = increasedTError;
	      t += step;
	    } else if (decreasedTError < error) {
	      error = decreasedTError;
	      t -= step;
	    } else {
	      step /= 2;
	    }
	  }
	  return t;
	}
	function quadraticPoint(xs, ys, t){
	  var x = (1 - t) * (1 - t) * xs[0] + 2 * (1 - t) * t * xs[1] + t * t * xs[2];
	  var y = (1 - t) * (1 - t) * ys[0] + 2 * (1 - t) * t * ys[1] + t * t * ys[2];
	  return {x: x, y: y};
	}
	function cubicPoint(xs, ys, t){
	  var x = (1 - t) * (1 - t) * (1 - t) * xs[0] + 3 * (1 - t) * (1 - t) * t * xs[1] +
	  3 * (1 - t) * t * t * xs[2] + t * t * t * xs[3];
	  var y = (1 - t) * (1 - t) * (1 - t) * ys[0] + 3 * (1 - t) * (1 - t) * t * ys[1] +
	  3 * (1 - t) * t * t * ys[2] + t * t * t * ys[3];
	  return {x: x, y: y};
	}
	function getQuadraticArcLength(xs, ys, t) {
	  if (t === undefined) {
	    t = 1;
	  }
	   var ax = xs[0] - 2 * xs[1] + xs[2];
	   var ay = ys[0] - 2 * ys[1] + ys[2];
	   var bx = 2 * xs[1] - 2 * xs[0];
	   var by = 2 * ys[1] - 2 * ys[0];
	   var A = 4 * (ax * ax + ay * ay);
	   var B = 4 * (ax * bx + ay * by);
	   var C = bx * bx + by * by;
	   if(A === 0){
	     return t * Math.sqrt(Math.pow(xs[2] - xs[0], 2) + Math.pow(ys[2] - ys[0], 2));
	   }
	   var b = B/(2*A);
	   var c = C/A;
	   var u = t + b;
	   var k = c - b*b;
	   return (Math.sqrt(A)/2)*(
	     u*Math.sqrt(u*u+k)-b*Math.sqrt(b*b+k)+
	     k*Math.log(Math.abs(
	       (u+Math.sqrt(u*u+k))/(b+Math.sqrt(b*b+k))
	     ))
	   );
	}
	var tValues = [
	  [],
	  [],
	  [-0.5773502691896257645091487805019574556476,0.5773502691896257645091487805019574556476],
	  [0,-0.7745966692414833770358530799564799221665,0.7745966692414833770358530799564799221665],
	  [-0.3399810435848562648026657591032446872005,0.3399810435848562648026657591032446872005,-0.8611363115940525752239464888928095050957,0.8611363115940525752239464888928095050957],
	  [0,-0.5384693101056830910363144207002088049672,0.5384693101056830910363144207002088049672,-0.9061798459386639927976268782993929651256,0.9061798459386639927976268782993929651256],
	  [0.6612093864662645136613995950199053470064,-0.6612093864662645136613995950199053470064,-0.2386191860831969086305017216807119354186,0.2386191860831969086305017216807119354186,-0.9324695142031520278123015544939946091347,0.9324695142031520278123015544939946091347],
	  [0, 0.4058451513773971669066064120769614633473,-0.4058451513773971669066064120769614633473,-0.7415311855993944398638647732807884070741,0.7415311855993944398638647732807884070741,-0.9491079123427585245261896840478512624007,0.9491079123427585245261896840478512624007],
	  [-0.1834346424956498049394761423601839806667,0.1834346424956498049394761423601839806667,-0.5255324099163289858177390491892463490419,0.5255324099163289858177390491892463490419,-0.7966664774136267395915539364758304368371,0.7966664774136267395915539364758304368371,-0.9602898564975362316835608685694729904282,0.9602898564975362316835608685694729904282],
	  [0,-0.8360311073266357942994297880697348765441,0.8360311073266357942994297880697348765441,-0.9681602395076260898355762029036728700494,0.9681602395076260898355762029036728700494,-0.3242534234038089290385380146433366085719,0.3242534234038089290385380146433366085719,-0.6133714327005903973087020393414741847857,0.6133714327005903973087020393414741847857],
	  [-0.1488743389816312108848260011297199846175,0.1488743389816312108848260011297199846175,-0.4333953941292471907992659431657841622000,0.4333953941292471907992659431657841622000,-0.6794095682990244062343273651148735757692,0.6794095682990244062343273651148735757692,-0.8650633666889845107320966884234930485275,0.8650633666889845107320966884234930485275,-0.9739065285171717200779640120844520534282,0.9739065285171717200779640120844520534282],
	  [0,-0.2695431559523449723315319854008615246796,0.2695431559523449723315319854008615246796,-0.5190961292068118159257256694586095544802,0.5190961292068118159257256694586095544802,-0.7301520055740493240934162520311534580496,0.7301520055740493240934162520311534580496,-0.8870625997680952990751577693039272666316,0.8870625997680952990751577693039272666316,-0.9782286581460569928039380011228573907714,0.9782286581460569928039380011228573907714],
	  [-0.1252334085114689154724413694638531299833,0.1252334085114689154724413694638531299833,-0.3678314989981801937526915366437175612563,0.3678314989981801937526915366437175612563,-0.5873179542866174472967024189405342803690,0.5873179542866174472967024189405342803690,-0.7699026741943046870368938332128180759849,0.7699026741943046870368938332128180759849,-0.9041172563704748566784658661190961925375,0.9041172563704748566784658661190961925375,-0.9815606342467192506905490901492808229601,0.9815606342467192506905490901492808229601],
	  [0,-0.2304583159551347940655281210979888352115,0.2304583159551347940655281210979888352115,-0.4484927510364468528779128521276398678019,0.4484927510364468528779128521276398678019,-0.6423493394403402206439846069955156500716,0.6423493394403402206439846069955156500716,-0.8015780907333099127942064895828598903056,0.8015780907333099127942064895828598903056,-0.9175983992229779652065478365007195123904,0.9175983992229779652065478365007195123904,-0.9841830547185881494728294488071096110649,0.9841830547185881494728294488071096110649],
	  [-0.1080549487073436620662446502198347476119,0.1080549487073436620662446502198347476119,-0.3191123689278897604356718241684754668342,0.3191123689278897604356718241684754668342,-0.5152486363581540919652907185511886623088,0.5152486363581540919652907185511886623088,-0.6872929048116854701480198030193341375384,0.6872929048116854701480198030193341375384,-0.8272013150697649931897947426503949610397,0.8272013150697649931897947426503949610397,-0.9284348836635735173363911393778742644770,0.9284348836635735173363911393778742644770,-0.9862838086968123388415972667040528016760,0.9862838086968123388415972667040528016760],
	  [0,-0.2011940939974345223006283033945962078128,0.2011940939974345223006283033945962078128,-0.3941513470775633698972073709810454683627,0.3941513470775633698972073709810454683627,-0.5709721726085388475372267372539106412383,0.5709721726085388475372267372539106412383,-0.7244177313601700474161860546139380096308,0.7244177313601700474161860546139380096308,-0.8482065834104272162006483207742168513662,0.8482065834104272162006483207742168513662,-0.9372733924007059043077589477102094712439,0.9372733924007059043077589477102094712439,-0.9879925180204854284895657185866125811469,0.9879925180204854284895657185866125811469],
	  [-0.0950125098376374401853193354249580631303,0.0950125098376374401853193354249580631303,-0.2816035507792589132304605014604961064860,0.2816035507792589132304605014604961064860,-0.4580167776572273863424194429835775735400,0.4580167776572273863424194429835775735400,-0.6178762444026437484466717640487910189918,0.6178762444026437484466717640487910189918,-0.7554044083550030338951011948474422683538,0.7554044083550030338951011948474422683538,-0.8656312023878317438804678977123931323873,0.8656312023878317438804678977123931323873,-0.9445750230732325760779884155346083450911,0.9445750230732325760779884155346083450911,-0.9894009349916499325961541734503326274262,0.9894009349916499325961541734503326274262],
	  [0,-0.1784841814958478558506774936540655574754,0.1784841814958478558506774936540655574754,-0.3512317634538763152971855170953460050405,0.3512317634538763152971855170953460050405,-0.5126905370864769678862465686295518745829,0.5126905370864769678862465686295518745829,-0.6576711592166907658503022166430023351478,0.6576711592166907658503022166430023351478,-0.7815140038968014069252300555204760502239,0.7815140038968014069252300555204760502239,-0.8802391537269859021229556944881556926234,0.8802391537269859021229556944881556926234,-0.9506755217687677612227169578958030214433,0.9506755217687677612227169578958030214433,-0.9905754753144173356754340199406652765077,0.9905754753144173356754340199406652765077],
	  [-0.0847750130417353012422618529357838117333,0.0847750130417353012422618529357838117333,-0.2518862256915055095889728548779112301628,0.2518862256915055095889728548779112301628,-0.4117511614628426460359317938330516370789,0.4117511614628426460359317938330516370789,-0.5597708310739475346078715485253291369276,0.5597708310739475346078715485253291369276,-0.6916870430603532078748910812888483894522,0.6916870430603532078748910812888483894522,-0.8037049589725231156824174550145907971032,0.8037049589725231156824174550145907971032,-0.8926024664975557392060605911271455154078,0.8926024664975557392060605911271455154078,-0.9558239495713977551811958929297763099728,0.9558239495713977551811958929297763099728,-0.9915651684209309467300160047061507702525,0.9915651684209309467300160047061507702525],
	  [0,-0.1603586456402253758680961157407435495048,0.1603586456402253758680961157407435495048,-0.3165640999636298319901173288498449178922,0.3165640999636298319901173288498449178922,-0.4645707413759609457172671481041023679762,0.4645707413759609457172671481041023679762,-0.6005453046616810234696381649462392798683,0.6005453046616810234696381649462392798683,-0.7209661773352293786170958608237816296571,0.7209661773352293786170958608237816296571,-0.8227146565371428249789224867127139017745,0.8227146565371428249789224867127139017745,-0.9031559036148179016426609285323124878093,0.9031559036148179016426609285323124878093,-0.9602081521348300308527788406876515266150,0.9602081521348300308527788406876515266150,-0.9924068438435844031890176702532604935893,0.9924068438435844031890176702532604935893],
	  [-0.0765265211334973337546404093988382110047,0.0765265211334973337546404093988382110047,-0.2277858511416450780804961953685746247430,0.2277858511416450780804961953685746247430,-0.3737060887154195606725481770249272373957,0.3737060887154195606725481770249272373957,-0.5108670019508270980043640509552509984254,0.5108670019508270980043640509552509984254,-0.6360536807265150254528366962262859367433,0.6360536807265150254528366962262859367433,-0.7463319064601507926143050703556415903107,0.7463319064601507926143050703556415903107,-0.8391169718222188233945290617015206853296,0.8391169718222188233945290617015206853296,-0.9122344282513259058677524412032981130491,0.9122344282513259058677524412032981130491,-0.9639719272779137912676661311972772219120,0.9639719272779137912676661311972772219120,-0.9931285991850949247861223884713202782226,0.9931285991850949247861223884713202782226],
	  [0,-0.1455618541608950909370309823386863301163,0.1455618541608950909370309823386863301163,-0.2880213168024010966007925160646003199090,0.2880213168024010966007925160646003199090,-0.4243421202074387835736688885437880520964,0.4243421202074387835736688885437880520964,-0.5516188358872198070590187967243132866220,0.5516188358872198070590187967243132866220,-0.6671388041974123193059666699903391625970,0.6671388041974123193059666699903391625970,-0.7684399634756779086158778513062280348209,0.7684399634756779086158778513062280348209,-0.8533633645833172836472506385875676702761,0.8533633645833172836472506385875676702761,-0.9200993341504008287901871337149688941591,0.9200993341504008287901871337149688941591,-0.9672268385663062943166222149076951614246,0.9672268385663062943166222149076951614246,-0.9937521706203895002602420359379409291933,0.9937521706203895002602420359379409291933],
	  [-0.0697392733197222212138417961186280818222,0.0697392733197222212138417961186280818222,-0.2078604266882212854788465339195457342156,0.2078604266882212854788465339195457342156,-0.3419358208920842251581474204273796195591,0.3419358208920842251581474204273796195591,-0.4693558379867570264063307109664063460953,0.4693558379867570264063307109664063460953,-0.5876404035069115929588769276386473488776,0.5876404035069115929588769276386473488776,-0.6944872631866827800506898357622567712673,0.6944872631866827800506898357622567712673,-0.7878168059792081620042779554083515213881,0.7878168059792081620042779554083515213881,-0.8658125777203001365364256370193787290847,0.8658125777203001365364256370193787290847,-0.9269567721871740005206929392590531966353,0.9269567721871740005206929392590531966353,-0.9700604978354287271239509867652687108059,0.9700604978354287271239509867652687108059,-0.9942945854823992920730314211612989803930,0.9942945854823992920730314211612989803930],
	  [0,-0.1332568242984661109317426822417661370104,0.1332568242984661109317426822417661370104,-0.2641356809703449305338695382833096029790,0.2641356809703449305338695382833096029790,-0.3903010380302908314214888728806054585780,0.3903010380302908314214888728806054585780,-0.5095014778460075496897930478668464305448,0.5095014778460075496897930478668464305448,-0.6196098757636461563850973116495956533871,0.6196098757636461563850973116495956533871,-0.7186613631319501944616244837486188483299,0.7186613631319501944616244837486188483299,-0.8048884016188398921511184069967785579414,0.8048884016188398921511184069967785579414,-0.8767523582704416673781568859341456716389,0.8767523582704416673781568859341456716389,-0.9329710868260161023491969890384229782357,0.9329710868260161023491969890384229782357,-0.9725424712181152319560240768207773751816,0.9725424712181152319560240768207773751816,-0.9947693349975521235239257154455743605736,0.9947693349975521235239257154455743605736],
	  [-0.0640568928626056260850430826247450385909,0.0640568928626056260850430826247450385909,-0.1911188674736163091586398207570696318404,0.1911188674736163091586398207570696318404,-0.3150426796961633743867932913198102407864,0.3150426796961633743867932913198102407864,-0.4337935076260451384870842319133497124524,0.4337935076260451384870842319133497124524,-0.5454214713888395356583756172183723700107,0.5454214713888395356583756172183723700107,-0.6480936519369755692524957869107476266696,0.6480936519369755692524957869107476266696,-0.7401241915785543642438281030999784255232,0.7401241915785543642438281030999784255232,-0.8200019859739029219539498726697452080761,0.8200019859739029219539498726697452080761,-0.8864155270044010342131543419821967550873,0.8864155270044010342131543419821967550873,-0.9382745520027327585236490017087214496548,0.9382745520027327585236490017087214496548,-0.9747285559713094981983919930081690617411,0.9747285559713094981983919930081690617411,-0.9951872199970213601799974097007368118745,0.9951872199970213601799974097007368118745]
	];
	var cValues = [
	  [],[],
	  [1.0,1.0],
	  [0.8888888888888888888888888888888888888888,0.5555555555555555555555555555555555555555,0.5555555555555555555555555555555555555555],
	  [0.6521451548625461426269360507780005927646,0.6521451548625461426269360507780005927646,0.3478548451374538573730639492219994072353,0.3478548451374538573730639492219994072353],
	  [0.5688888888888888888888888888888888888888,0.4786286704993664680412915148356381929122,0.4786286704993664680412915148356381929122,0.2369268850561890875142640407199173626432,0.2369268850561890875142640407199173626432],
	  [0.3607615730481386075698335138377161116615,0.3607615730481386075698335138377161116615,0.4679139345726910473898703439895509948116,0.4679139345726910473898703439895509948116,0.1713244923791703450402961421727328935268,0.1713244923791703450402961421727328935268],
	  [0.4179591836734693877551020408163265306122,0.3818300505051189449503697754889751338783,0.3818300505051189449503697754889751338783,0.2797053914892766679014677714237795824869,0.2797053914892766679014677714237795824869,0.1294849661688696932706114326790820183285,0.1294849661688696932706114326790820183285],
	  [0.3626837833783619829651504492771956121941,0.3626837833783619829651504492771956121941,0.3137066458778872873379622019866013132603,0.3137066458778872873379622019866013132603,0.2223810344533744705443559944262408844301,0.2223810344533744705443559944262408844301,0.1012285362903762591525313543099621901153,0.1012285362903762591525313543099621901153],
	  [0.3302393550012597631645250692869740488788,0.1806481606948574040584720312429128095143,0.1806481606948574040584720312429128095143,0.0812743883615744119718921581105236506756,0.0812743883615744119718921581105236506756,0.3123470770400028400686304065844436655987,0.3123470770400028400686304065844436655987,0.2606106964029354623187428694186328497718,0.2606106964029354623187428694186328497718],
	  [0.2955242247147528701738929946513383294210,0.2955242247147528701738929946513383294210,0.2692667193099963550912269215694693528597,0.2692667193099963550912269215694693528597,0.2190863625159820439955349342281631924587,0.2190863625159820439955349342281631924587,0.1494513491505805931457763396576973324025,0.1494513491505805931457763396576973324025,0.0666713443086881375935688098933317928578,0.0666713443086881375935688098933317928578],
	  [0.2729250867779006307144835283363421891560,0.2628045445102466621806888698905091953727,0.2628045445102466621806888698905091953727,0.2331937645919904799185237048431751394317,0.2331937645919904799185237048431751394317,0.1862902109277342514260976414316558916912,0.1862902109277342514260976414316558916912,0.1255803694649046246346942992239401001976,0.1255803694649046246346942992239401001976,0.0556685671161736664827537204425485787285,0.0556685671161736664827537204425485787285],
	  [0.2491470458134027850005624360429512108304,0.2491470458134027850005624360429512108304,0.2334925365383548087608498989248780562594,0.2334925365383548087608498989248780562594,0.2031674267230659217490644558097983765065,0.2031674267230659217490644558097983765065,0.1600783285433462263346525295433590718720,0.1600783285433462263346525295433590718720,0.1069393259953184309602547181939962242145,0.1069393259953184309602547181939962242145,0.0471753363865118271946159614850170603170,0.0471753363865118271946159614850170603170],
	
	
	
	
	
	  [0.1691423829631435918406564701349866103341,0.1691423829631435918406564701349866103341,0.1642764837458327229860537764659275904123,0.1642764837458327229860537764659275904123,0.1546846751262652449254180038363747721932,0.1546846751262652449254180038363747721932,0.1406429146706506512047313037519472280955,0.1406429146706506512047313037519472280955,0.1225552067114784601845191268002015552281,0.1225552067114784601845191268002015552281,0.1009420441062871655628139849248346070628,0.1009420441062871655628139849248346070628,0.0764257302548890565291296776166365256053,0.0764257302548890565291296776166365256053,0.0497145488949697964533349462026386416808,0.0497145488949697964533349462026386416808,0.0216160135264833103133427102664524693876,0.0216160135264833103133427102664524693876],
	  [0.1610544498487836959791636253209167350399,0.1589688433939543476499564394650472016787,0.1589688433939543476499564394650472016787,0.1527660420658596667788554008976629984610,0.1527660420658596667788554008976629984610,0.1426067021736066117757461094419029724756,0.1426067021736066117757461094419029724756,0.1287539625393362276755157848568771170558,0.1287539625393362276755157848568771170558,0.1115666455473339947160239016817659974813,0.1115666455473339947160239016817659974813,0.0914900216224499994644620941238396526609,0.0914900216224499994644620941238396526609,0.0690445427376412265807082580060130449618,0.0690445427376412265807082580060130449618,0.0448142267656996003328381574019942119517,0.0448142267656996003328381574019942119517,0.0194617882297264770363120414644384357529,0.0194617882297264770363120414644384357529],
	  [0.1527533871307258506980843319550975934919,0.1527533871307258506980843319550975934919,0.1491729864726037467878287370019694366926,0.1491729864726037467878287370019694366926,0.1420961093183820513292983250671649330345,0.1420961093183820513292983250671649330345,0.1316886384491766268984944997481631349161,0.1316886384491766268984944997481631349161,0.1181945319615184173123773777113822870050,0.1181945319615184173123773777113822870050,0.1019301198172404350367501354803498761666,0.1019301198172404350367501354803498761666,0.0832767415767047487247581432220462061001,0.0832767415767047487247581432220462061001,0.0626720483341090635695065351870416063516,0.0626720483341090635695065351870416063516,0.0406014298003869413310399522749321098790,0.0406014298003869413310399522749321098790,0.0176140071391521183118619623518528163621,0.0176140071391521183118619623518528163621],
	  [0.1460811336496904271919851476833711882448,0.1445244039899700590638271665537525436099,0.1445244039899700590638271665537525436099,0.1398873947910731547221334238675831108927,0.1398873947910731547221334238675831108927,0.1322689386333374617810525744967756043290,0.1322689386333374617810525744967756043290,0.1218314160537285341953671771257335983563,0.1218314160537285341953671771257335983563,0.1087972991671483776634745780701056420336,0.1087972991671483776634745780701056420336,0.0934444234560338615532897411139320884835,0.0934444234560338615532897411139320884835,0.0761001136283793020170516533001831792261,0.0761001136283793020170516533001831792261,0.0571344254268572082836358264724479574912,0.0571344254268572082836358264724479574912,0.0369537897708524937999506682993296661889,0.0369537897708524937999506682993296661889,0.0160172282577743333242246168584710152658,0.0160172282577743333242246168584710152658],
	  [0.1392518728556319933754102483418099578739,0.1392518728556319933754102483418099578739,0.1365414983460151713525738312315173965863,0.1365414983460151713525738312315173965863,0.1311735047870623707329649925303074458757,0.1311735047870623707329649925303074458757,0.1232523768105124242855609861548144719594,0.1232523768105124242855609861548144719594,0.1129322960805392183934006074217843191142,0.1129322960805392183934006074217843191142,0.1004141444428809649320788378305362823508,0.1004141444428809649320788378305362823508,0.0859416062170677274144436813727028661891,0.0859416062170677274144436813727028661891,0.0697964684245204880949614189302176573987,0.0697964684245204880949614189302176573987,0.0522933351526832859403120512732112561121,0.0522933351526832859403120512732112561121,0.0337749015848141547933022468659129013491,0.0337749015848141547933022468659129013491,0.0146279952982722006849910980471854451902,0.0146279952982722006849910980471854451902],
	  [0.1336545721861061753514571105458443385831,0.1324620394046966173716424647033169258050,0.1324620394046966173716424647033169258050,0.1289057221880821499785953393997936532597,0.1289057221880821499785953393997936532597,0.1230490843067295304675784006720096548158,0.1230490843067295304675784006720096548158,0.1149966402224113649416435129339613014914,0.1149966402224113649416435129339613014914,0.1048920914645414100740861850147438548584,0.1048920914645414100740861850147438548584,0.0929157660600351474770186173697646486034,0.0929157660600351474770186173697646486034,0.0792814117767189549228925247420432269137,0.0792814117767189549228925247420432269137,0.0642324214085258521271696151589109980391,0.0642324214085258521271696151589109980391,0.0480376717310846685716410716320339965612,0.0480376717310846685716410716320339965612,0.0309880058569794443106942196418845053837,0.0309880058569794443106942196418845053837,0.0134118594871417720813094934586150649766,0.0134118594871417720813094934586150649766],
	  [0.1279381953467521569740561652246953718517,0.1279381953467521569740561652246953718517,0.1258374563468282961213753825111836887264,0.1258374563468282961213753825111836887264,0.1216704729278033912044631534762624256070,0.1216704729278033912044631534762624256070,0.1155056680537256013533444839067835598622,0.1155056680537256013533444839067835598622,0.1074442701159656347825773424466062227946,0.1074442701159656347825773424466062227946,0.0976186521041138882698806644642471544279,0.0976186521041138882698806644642471544279,0.0861901615319532759171852029837426671850,0.0861901615319532759171852029837426671850,0.0733464814110803057340336152531165181193,0.0733464814110803057340336152531165181193,0.0592985849154367807463677585001085845412,0.0592985849154367807463677585001085845412,0.0442774388174198061686027482113382288593,0.0442774388174198061686027482113382288593,0.0285313886289336631813078159518782864491,0.0285313886289336631813078159518782864491,0.0123412297999871995468056670700372915759,0.0123412297999871995468056670700372915759]
	];
	var binomialCoefficients = [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1]];
	function binomials(n, k) {
	  return binomialCoefficients[n][k];
	}
	function getDerivative(derivative, t, vs) {
	  var n = vs.length - 1,
	      _vs,
	      value,
	      k;
	  if (n === 0) {
	    return 0;
	  }
	  if (derivative === 0) {
	    value = 0;
	    for (k = 0; k <= n; k++) {
	      value += binomials(n, k) * Math.pow(1 - t, n - k) * Math.pow(t, k) * vs[k];
	    }
	    return value;
	  } else {
	    _vs = new Array(n);
	    for (k = 0; k < n; k++) {
	      _vs[k] = n * (vs[k + 1] - vs[k]);
	    }
	    return getDerivative(derivative - 1, t, _vs);
	  }
	}
	function B(xs, ys, t) {
	  var xbase = getDerivative(1, t, xs);
	  var ybase = getDerivative(1, t, ys);
	  var combined = xbase * xbase + ybase * ybase;
	  return Math.sqrt(combined);
	}
	function getCubicArcLength(xs, ys, t) {
	  var z, sum, i, correctedT;
	  if (t === undefined) {
	    t = 1;
	  }
	  var n = 20;
	  z = t / 2;
	  sum = 0;
	  for (i = 0; i < n; i++) {
	    correctedT = z * tValues[n][i] + z;
	    sum += cValues[n][i] * B(xs, ys, correctedT);
	  }
	  return z * sum;
	}
	var TAU = Math.PI * 2;
	function unit_vector_angle(ux, uy, vx, vy) {
	  var sign = (ux * vy - uy * vx < 0) ? -1 : 1;
	  var dot  = ux * vx + uy * vy;
	  if (dot >  1.0) { dot =  1.0; }
	  if (dot < -1.0) { dot = -1.0; }
	  return sign * Math.acos(dot);
	}
	function get_arc_center(x1, y1, x2, y2, fa, fs, rx, ry, sin_phi, cos_phi) {
	  var x1p =  cos_phi*(x1-x2)/2 + sin_phi*(y1-y2)/2;
	  var y1p = -sin_phi*(x1-x2)/2 + cos_phi*(y1-y2)/2;
	  var rx_sq  =  rx * rx;
	  var ry_sq  =  ry * ry;
	  var x1p_sq = x1p * x1p;
	  var y1p_sq = y1p * y1p;
	  var radicant = (rx_sq * ry_sq) - (rx_sq * y1p_sq) - (ry_sq * x1p_sq);
	  if (radicant < 0) {
	    radicant = 0;
	  }
	  radicant /=   (rx_sq * y1p_sq) + (ry_sq * x1p_sq);
	  radicant = Math.sqrt(radicant) * (fa === fs ? -1 : 1);
	  var cxp = radicant *  rx/ry * y1p;
	  var cyp = radicant * -ry/rx * x1p;
	  var cx = cos_phi*cxp - sin_phi*cyp + (x1+x2)/2;
	  var cy = sin_phi*cxp + cos_phi*cyp + (y1+y2)/2;
	  var v1x =  (x1p - cxp) / rx;
	  var v1y =  (y1p - cyp) / ry;
	  var v2x = (-x1p - cxp) / rx;
	  var v2y = (-y1p - cyp) / ry;
	  var theta1 = unit_vector_angle(1, 0, v1x, v1y);
	  var delta_theta = unit_vector_angle(v1x, v1y, v2x, v2y);
	  if (fs === 0 && delta_theta > 0) {
	    delta_theta -= TAU;
	  }
	  if (fs === 1 && delta_theta < 0) {
	    delta_theta += TAU;
	  }
	  return [ cx, cy, theta1, delta_theta ];
	}
	function approximate_unit_arc(theta1, delta_theta) {
	  var alpha = 4/3 * Math.tan(delta_theta/4);
	  var x1 = Math.cos(theta1);
	  var y1 = Math.sin(theta1);
	  var x2 = Math.cos(theta1 + delta_theta);
	  var y2 = Math.sin(theta1 + delta_theta);
	  return [ x1, y1, x1 - y1*alpha, y1 + x1*alpha, x2 + y2*alpha, y2 - x2*alpha, x2, y2 ];
	}
	var a2c = function(x1, y1, rx, ry, phi, fa, fs, x2, y2) {
	  var sin_phi = Math.sin(phi * TAU / 360);
	  var cos_phi = Math.cos(phi * TAU / 360);
	  var x1p =  cos_phi*(x1-x2)/2 + sin_phi*(y1-y2)/2;
	  var y1p = -sin_phi*(x1-x2)/2 + cos_phi*(y1-y2)/2;
	  if (x1p === 0 && y1p === 0) {
	    return [];
	  }
	  if (rx === 0 || ry === 0) {
	    return [];
	  }
	  rx = Math.abs(rx);
	  ry = Math.abs(ry);
	  var lambda = (x1p * x1p) / (rx * rx) + (y1p * y1p) / (ry * ry);
	  if (lambda > 1) {
	    rx *= Math.sqrt(lambda);
	    ry *= Math.sqrt(lambda);
	  }
	  var cc = get_arc_center(x1, y1, x2, y2, fa, fs, rx, ry, sin_phi, cos_phi);
	  var result = [];
	  var theta1 = cc[2];
	  var delta_theta = cc[3];
	  var segments = Math.max(Math.ceil(Math.abs(delta_theta) / (TAU / 4)), 1);
	  delta_theta /= segments;
	  for (var i = 0; i < segments; i++) {
	    result.push(approximate_unit_arc(theta1, delta_theta));
	    theta1 += delta_theta;
	  }
	  return result.map(function (curve) {
	    for (var i = 0; i < curve.length; i += 2) {
	      var x = curve[i + 0];
	      var y = curve[i + 1];
	      x *= rx;
	      y *= ry;
	      var xp = cos_phi*x - sin_phi*y;
	      var yp = sin_phi*x + cos_phi*y;
	      curve[i + 0] = xp + cc[0];
	      curve[i + 1] = yp + cc[1];
	    }
	    return curve;
	  });
	};
	var Arc = function(x0, y0, rx,ry, xAxisRotate, LargeArcFlag,SweepFlag, x,y) {
	  return new Arc$1(x0, y0, rx,ry, xAxisRotate, LargeArcFlag,SweepFlag, x,y);
	};
	function Arc$1(x0, y0,rx,ry, xAxisRotate, LargeArcFlag,SweepFlag,x,y) {
	    var length = 0;
	    var partialLengths = [];
	    var curves = [];
	    var res = a2c(x0, y0,rx,ry, xAxisRotate, LargeArcFlag,SweepFlag,x,y);
	    res.forEach(function(d){
	        var curve = new Bezier(d[0], d[1], d[2], d[3], d[4], d[5], d[6], d[7]);
	        var curveLength = curve.getTotalLength();
	        length += curveLength;
	        partialLengths.push(curveLength);
	        curves.push(curve);
	    });
	    this.length = length;
	    this.partialLengths = partialLengths;
	    this.curves = curves;
	}
	Arc$1.prototype = {
	  constructor: Arc$1,
	  init: function() {
	  },
	  getTotalLength: function() {
	    return this.length;
	  },
	  getPointAtLength: function(fractionLength) {
	    if(fractionLength < 0){
	      fractionLength = 0;
	    } else if(fractionLength > this.length){
	      fractionLength = this.length;
	    }
	    var i = this.partialLengths.length - 1;
	    while(this.partialLengths[i] >= fractionLength && this.partialLengths[i] > 0){
	      i--;
	    }
	    if(i<this.partialLengths.length-1){
	        i++;
	    }
	    var lengthOffset = 0;
	    for(var j=0; j<i; j++){
	        lengthOffset += this.partialLengths[j];
	    }
	    return this.curves[i].getPointAtLength(fractionLength - lengthOffset);
	  },
	  getTangentAtLength: function(fractionLength) {
	    if(fractionLength < 0){
	        fractionLength = 0;
	        } else if(fractionLength > this.length){
	        fractionLength = this.length;
	        }
	        var i = this.partialLengths.length - 1;
	        while(this.partialLengths[i] >= fractionLength && this.partialLengths[i] > 0){
	        i--;
	        }
	        if(i<this.partialLengths.length-1){
	            i++;
	        }
	        var lengthOffset = 0;
	        for(var j=0; j<i; j++){
	            lengthOffset += this.partialLengths[j];
	        }
	    return this.curves[i].getTangentAtLength(fractionLength - lengthOffset);
	  },
	  getPropertiesAtLength: function(fractionLength){
	    var tangent = this.getTangentAtLength(fractionLength);
	    var point = this.getPointAtLength(fractionLength);
	    return {x: point.x, y: point.y, tangentX: tangent.x, tangentY: tangent.y};
	  }
	};
	var LinearPosition = function(x0, x1, y0, y1) {
	  return new LinearPosition$1(x0, x1, y0, y1);
	};
	function LinearPosition$1(x0, x1, y0, y1){
	  this.x0 = x0;
	  this.x1 = x1;
	  this.y0 = y0;
	  this.y1 = y1;
	}
	LinearPosition$1.prototype.getTotalLength = function(){
	  return Math.sqrt(Math.pow(this.x0 - this.x1, 2) +
	         Math.pow(this.y0 - this.y1, 2));
	};
	LinearPosition$1.prototype.getPointAtLength = function(pos){
	  var fraction = pos/ (Math.sqrt(Math.pow(this.x0 - this.x1, 2) +
	         Math.pow(this.y0 - this.y1, 2)));
	  var newDeltaX = (this.x1 - this.x0)*fraction;
	  var newDeltaY = (this.y1 - this.y0)*fraction;
	  return { x: this.x0 + newDeltaX, y: this.y0 + newDeltaY };
	};
	LinearPosition$1.prototype.getTangentAtLength = function(){
	  var module = Math.sqrt((this.x1 - this.x0) * (this.x1 - this.x0) +
	              (this.y1 - this.y0) * (this.y1 - this.y0));
	  return { x: (this.x1 - this.x0)/module, y: (this.y1 - this.y0)/module };
	};
	LinearPosition$1.prototype.getPropertiesAtLength = function(pos){
	  var point = this.getPointAtLength(pos);
	  var tangent = this.getTangentAtLength();
	  return {x: point.x, y: point.y, tangentX: tangent.x, tangentY: tangent.y};
	};
	var pathProperties = function(svgString) {
	  var length = 0;
	  var partial_lengths = [];
	  var functions = [];
	  function svgProperties(string){
	    if(!string){return null;}
	    var parsed = parse(string);
	    var cur = [0, 0];
	    var prev_point = [0, 0];
	    var curve;
	    var ringStart;
	    for (var i = 0; i < parsed.length; i++){
	      if(parsed[i][0] === "M"){
	        cur = [parsed[i][1], parsed[i][2]];
	        ringStart = [cur[0], cur[1]];
	        functions.push(null);
	      } else if(parsed[i][0] === "m"){
	        cur = [parsed[i][1] + cur[0], parsed[i][2] + cur[1]];
	        ringStart = [cur[0], cur[1]];
	        functions.push(null);
	      }
	      else if(parsed[i][0] === "L"){
	        length = length + Math.sqrt(Math.pow(cur[0] - parsed[i][1], 2) + Math.pow(cur[1] - parsed[i][2], 2));
	        functions.push(new LinearPosition(cur[0], parsed[i][1], cur[1], parsed[i][2]));
	        cur = [parsed[i][1], parsed[i][2]];
	      } else if(parsed[i][0] === "l"){
	        length = length + Math.sqrt(Math.pow(parsed[i][1], 2) + Math.pow(parsed[i][2], 2));
	        functions.push(new LinearPosition(cur[0], parsed[i][1] + cur[0], cur[1], parsed[i][2] + cur[1]));
	        cur = [parsed[i][1] + cur[0], parsed[i][2] + cur[1]];
	      } else if(parsed[i][0] === "H"){
	        length = length + Math.abs(cur[0] - parsed[i][1]);
	        functions.push(new LinearPosition(cur[0], parsed[i][1], cur[1], cur[1]));
	        cur[0] = parsed[i][1];
	      } else if(parsed[i][0] === "h"){
	        length = length + Math.abs(parsed[i][1]);
	        functions.push(new LinearPosition(cur[0], cur[0] + parsed[i][1], cur[1], cur[1]));
	        cur[0] = parsed[i][1] + cur[0];
	      } else if(parsed[i][0] === "V"){
	        length = length + Math.abs(cur[1] - parsed[i][1]);
	        functions.push(new LinearPosition(cur[0], cur[0], cur[1], parsed[i][1]));
	        cur[1] = parsed[i][1];
	      } else if(parsed[i][0] === "v"){
	        length = length + Math.abs(parsed[i][1]);
	        functions.push(new LinearPosition(cur[0], cur[0], cur[1], cur[1] + parsed[i][1]));
	        cur[1] = parsed[i][1] + cur[1];
	      }  else if(parsed[i][0] === "z" || parsed[i][0] === "Z"){
	        length = length + Math.sqrt(Math.pow(ringStart[0] - cur[0], 2) + Math.pow(ringStart[1] - cur[1], 2));
	        functions.push(new LinearPosition(cur[0], ringStart[0], cur[1], ringStart[1]));
	        cur = [ringStart[0], ringStart[1]];
	      }
	      else if(parsed[i][0] === "C"){
	        curve = new Bezier(cur[0], cur[1] , parsed[i][1], parsed[i][2] , parsed[i][3], parsed[i][4] , parsed[i][5], parsed[i][6]);
	        length = length + curve.getTotalLength();
	        cur = [parsed[i][5], parsed[i][6]];
	        functions.push(curve);
	      } else if(parsed[i][0] === "c"){
	        curve = new Bezier(cur[0], cur[1] , cur[0] + parsed[i][1], cur[1] + parsed[i][2] , cur[0] + parsed[i][3], cur[1] + parsed[i][4] , cur[0] + parsed[i][5], cur[1] + parsed[i][6]);
	        length = length + curve.getTotalLength();
	        cur = [parsed[i][5] + cur[0], parsed[i][6] + cur[1]];
	        functions.push(curve);
	      } else if(parsed[i][0] === "S"){
	        if(i>0 && ["C","c","S","s"].indexOf(parsed[i-1][0]) > -1){
	          curve = new Bezier(cur[0], cur[1] , 2*cur[0] - parsed[i-1][parsed[i-1].length - 4], 2*cur[1] - parsed[i-1][parsed[i-1].length - 3], parsed[i][1], parsed[i][2] , parsed[i][3], parsed[i][4]);
	        } else {
	          curve = new Bezier(cur[0], cur[1] , cur[0], cur[1], parsed[i][1], parsed[i][2] , parsed[i][3], parsed[i][4]);
	        }
	        length = length + curve.getTotalLength();
	        cur = [parsed[i][3], parsed[i][4]];
	        functions.push(curve);
	      }  else if(parsed[i][0] === "s"){
	        if(i>0 && ["C","c","S","s"].indexOf(parsed[i-1][0]) > -1){
	          curve = new Bezier(cur[0], cur[1] , cur[0] + curve.d.x - curve.c.x, cur[1] + curve.d.y - curve.c.y, cur[0] + parsed[i][1], cur[1] + parsed[i][2] , cur[0] + parsed[i][3], cur[1] + parsed[i][4]);
	        } else {
	          curve = new Bezier(cur[0], cur[1] , cur[0], cur[1], cur[0] + parsed[i][1], cur[1] + parsed[i][2] , cur[0] + parsed[i][3], cur[1] + parsed[i][4]);
	        }
	        length = length + curve.getTotalLength();
	        cur = [parsed[i][3] + cur[0], parsed[i][4] + cur[1]];
	        functions.push(curve);
	      }
	      else if(parsed[i][0] === "Q"){
	        if(cur[0] != parsed[i][1] && cur[1] != parsed[i][2]){
	          curve = new Bezier(cur[0], cur[1] , parsed[i][1], parsed[i][2] , parsed[i][3], parsed[i][4]);
	        } else {
	          curve = new LinearPosition(parsed[i][1], parsed[i][3], parsed[i][2], parsed[i][4]);
	        }
	        length = length + curve.getTotalLength();
	        functions.push(curve);
	        cur = [parsed[i][3], parsed[i][4]];
	        prev_point = [parsed[i][1], parsed[i][2]];
	      }  else if(parsed[i][0] === "q"){
	        if(!(parsed[i][1] == 0 && parsed[i][2] == 0)){
	          curve = new Bezier(cur[0], cur[1] , cur[0] + parsed[i][1], cur[1] + parsed[i][2] , cur[0] + parsed[i][3], cur[1] + parsed[i][4]);
	        } else {
	          curve = new LinearPosition(cur[0] + parsed[i][1], cur[0] + parsed[i][3], cur[1] + parsed[i][2], cur[1] + parsed[i][4]);
	        }
	        length = length + curve.getTotalLength();
	        prev_point = [cur[0] + parsed[i][1], cur[1] + parsed[i][2]];
	        cur = [parsed[i][3] + cur[0], parsed[i][4] + cur[1]];
	        functions.push(curve);
	      } else if(parsed[i][0] === "T"){
	        if(i>0 && ["Q","q","T","t"].indexOf(parsed[i-1][0]) > -1){
	          curve = new Bezier(cur[0], cur[1] , 2 * cur[0] - prev_point[0] , 2 * cur[1] - prev_point[1] , parsed[i][1], parsed[i][2]);
	        } else {
	          curve = new LinearPosition(cur[0], parsed[i][1], cur[1], parsed[i][2]);
	        }
	        functions.push(curve);
	        length = length + curve.getTotalLength();
	        prev_point = [2 * cur[0] - prev_point[0] , 2 * cur[1] - prev_point[1]];
	        cur = [parsed[i][1], parsed[i][2]];
	      } else if(parsed[i][0] === "t"){
	        if(i>0 && ["Q","q","T","t"].indexOf(parsed[i-1][0]) > -1){
	          curve = new Bezier(cur[0], cur[1] , 2 * cur[0] - prev_point[0] , 2 * cur[1] - prev_point[1] , cur[0] + parsed[i][1], cur[1] + parsed[i][2]);
	        } else {
	          curve = new LinearPosition(cur[0], cur[0] + parsed[i][1], cur[1], cur[1] + parsed[i][2]);
	        }
	        length = length + curve.getTotalLength();
	        prev_point = [2 * cur[0] - prev_point[0] , 2 * cur[1] - prev_point[1]];
	        cur = [parsed[i][1] + cur[0], parsed[i][2] + cur[0]];
	        functions.push(curve);
	      } else if(parsed[i][0] === "A"){
	        curve = new Arc(cur[0], cur[1], parsed[i][1], parsed[i][2], parsed[i][3], parsed[i][4], parsed[i][5], parsed[i][6], parsed[i][7]);
	        length = length + curve.getTotalLength();
	        cur = [parsed[i][6], parsed[i][7]];
	        functions.push(curve);
	      } else if(parsed[i][0] === "a"){
	        curve = new Arc(cur[0], cur[1], parsed[i][1], parsed[i][2], parsed[i][3], parsed[i][4], parsed[i][5], cur[0] + parsed[i][6], cur[1] + parsed[i][7]);
	        length = length + curve.getTotalLength();
	        cur = [cur[0] + parsed[i][6], cur[1] + parsed[i][7]];
	        functions.push(curve);
	      }
	      partial_lengths.push(length);
	    }
	    return svgProperties;
	  }
	 svgProperties.getTotalLength = function(){
	    return length;
	  };
	  svgProperties.getPointAtLength = function(fractionLength){
	    var fractionPart = getPartAtLength(fractionLength);
	    return functions[fractionPart.i].getPointAtLength(fractionPart.fraction);
	  };
	  svgProperties.getTangentAtLength = function(fractionLength){
	    var fractionPart = getPartAtLength(fractionLength);
	    return functions[fractionPart.i].getTangentAtLength(fractionPart.fraction);
	  };
	  svgProperties.getPropertiesAtLength = function(fractionLength){
	    var fractionPart = getPartAtLength(fractionLength);
	    return functions[fractionPart.i].getPropertiesAtLength(fractionPart.fraction);
	  };
	  var getPartAtLength = function(fractionLength){
	    if(fractionLength < 0){
	      fractionLength = 0;
	    } else if(fractionLength > length){
	      fractionLength = length;
	    }
	    var i = partial_lengths.length - 1;
	    while(partial_lengths[i] >= fractionLength && partial_lengths[i] > 0){
	      i--;
	    }
	    i++;
	    return {fraction: fractionLength-partial_lengths[i-1], i: i};
	  };
	  return svgProperties(svgString);
	};
	exports.svgPathProperties = pathProperties;
	exports.parse = parse;
	exports.Bezier = Bezier;
	Object.defineProperty(exports, '__esModule', { value: true });
	}))); 
} (pathProperties, pathProperties.exports));

var pathPropertiesExports = pathProperties.exports;

function distance(a, b) {
  return Math.sqrt((a[0] - b[0]) * (a[0] - b[0]) + (a[1] - b[1]) * (a[1] - b[1]));
}
function pointAlong(a, b, pct) {
  return [a[0] + (b[0] - a[0]) * pct, a[1] + (b[1] - a[1]) * pct];
}
function samePoint(a, b) {
  return distance(a, b) < 1e-9;
}
function interpolatePoints(a, b, string) {
  let interpolators = a.map((d, i) => interpolatePoint(d, b[i]));
  return function(t) {
    let values = interpolators.map(fn => fn(t));
    return string ? toPathString(values) : values;
  };
}
function interpolatePoint(a, b) {
  return function(t) {
    return a.map((d, i) => d + t * (b[i] - d));
  };
}
function isFiniteNumber(number) {
  return typeof number === "number" && isFinite(number);
}

const INVALID_INPUT = `All shapes must be supplied as arrays of [x, y] points or an SVG path string (https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/d).
Example valid ways of supplying a shape would be:
[[0, 0], [10, 0], [10, 10]]
"M0,0 L10,0 L10,10Z"
`;

function parse$1(str) {
  return new Path$1(str).abs();
}
function split(parsed) {
  return parsed
    .toString()
    .split("M")
    .map((d, i) => {
      d = d.trim();
      return i && d ? "M" + d : d;
    })
    .filter(d => d);
}
function toPathString(ring) {
  return "M" + ring.join("L") + "Z";
}
function pathStringToRing(str, maxSegmentLength) {
  let parsed = parse$1(str);
  return exactRing(parsed) || approximateRing(parsed, maxSegmentLength);
}
function exactRing(parsed) {
  let segments = parsed.segments || [],
    ring = [];
  if (!segments.length || segments[0][0] !== "M") {
    return false;
  }
  for (let i = 0; i < segments.length; i++) {
    let [command, x, y] = segments[i];
    if ((command === "M" && i) || command === "Z") {
      break;
    } else if (command === "M" || command === "L") {
      ring.push([x, y]);
    } else if (command === "H") {
      ring.push([x, ring[ring.length - 1][1]]);
    } else if (command === "V") {
      ring.push([ring[ring.length - 1][0], x]);
    } else {
      return false;
    }
  }
  return ring.length ? { ring } : false;
}
function approximateRing(parsed, maxSegmentLength) {
  let ringPath = split(parsed)[0],
    ring = [],
    len,
    m,
    numPoints = 3;
  if (!ringPath) {
    throw new TypeError(INVALID_INPUT);
  }
  m = measure(ringPath);
  len = m.getTotalLength();
  if (maxSegmentLength && isFiniteNumber(maxSegmentLength) && maxSegmentLength > 0) {
    numPoints = Math.max(numPoints, Math.ceil(len / maxSegmentLength));
  }
  for (let i = 0; i < numPoints; i++) {
    let p = m.getPointAtLength(len * i / numPoints);
    ring.push([p.x, p.y]);
  }
  return {
    ring,
    skipBisect: true
  };
}
function measure(d) {
  if (typeof window !== "undefined" && window && window.document) {
    try {
      let path = window.document.createElementNS("http://www.w3.org/2000/svg", "path");
      path.setAttributeNS(null, "d", d);
      return path;
    } catch (e) {}
  }
  return pathPropertiesExports.svgPathProperties(d);
}

function addPoints(ring, numPoints) {
  const desiredLength = ring.length + numPoints,
    step = polygonLength(ring) / numPoints;
  let i = 0,
    cursor = 0,
    insertAt = step / 2;
  while (ring.length < desiredLength) {
    let a = ring[i],
      b = ring[(i + 1) % ring.length],
      segment = distance(a, b);
    if (insertAt <= cursor + segment) {
      ring.splice(i + 1, 0, segment ? pointAlong(a, b, (insertAt - cursor) / segment) : a.slice(0));
      insertAt += step;
      continue;
    }
    cursor += segment;
    i++;
  }
}
function bisect(ring, maxSegmentLength = Infinity) {
  for (let i = 0; i < ring.length; i++) {
    let a = ring[i],
      b = i === ring.length - 1 ? ring[0] : ring[i + 1];
    while (distance(a, b) > maxSegmentLength) {
      b = pointAlong(a, b, 0.5);
      ring.splice(i + 1, 0, b);
    }
  }
}

function normalizeRing(ring, maxSegmentLength) {
  let points, area, skipBisect;
  if (typeof ring === "string") {
    let converted = pathStringToRing(ring, maxSegmentLength);
    ring = converted.ring;
    skipBisect = converted.skipBisect;
  } else if (!Array.isArray(ring)) {
    throw new TypeError(INVALID_INPUT);
  }
  points = ring.slice(0);
  if (!validRing(points)) {
    throw new TypeError(INVALID_INPUT);
  }
  if (points.length > 1 && samePoint(points[0], points[points.length - 1])) {
    points.pop();
  }
  area = polygonArea(points);
  if (area > 0) {
    points.reverse();
  }
  if (
    !skipBisect &&
    maxSegmentLength &&
    isFiniteNumber(maxSegmentLength) &&
    maxSegmentLength > 0
  ) {
    bisect(points, maxSegmentLength);
  }
  return points;
}
function validRing(ring) {
  return ring.every(function(point) {
    return (
      Array.isArray(point) &&
      point.length >= 2 &&
      isFiniteNumber(point[0]) &&
      isFiniteNumber(point[1])
    );
  });
}

function rotate$1(ring, vs) {
  let len = ring.length,
      min = Infinity,
      bestOffset,
      sumOfSquares,
      spliced;
  for (let offset = 0; offset < len; offset++) {
    sumOfSquares = 0;
    vs.forEach(function(p, i){
      let d = distance(ring[(offset + i) % len], p);
      sumOfSquares += d * d;
    });
    if (sumOfSquares < min) {
      min = sumOfSquares;
      bestOffset = offset;
    }
  }
  if (bestOffset) {
    spliced = ring.splice(0, bestOffset);
    ring.splice(ring.length, 0, ...spliced);
  }
}

function interpolate(fromShape, toShape, { maxSegmentLength = 10, string = true } = {}) {
  let fromRing = normalizeRing(fromShape, maxSegmentLength),
    toRing = normalizeRing(toShape, maxSegmentLength),
    interpolator = interpolateRing(fromRing, toRing, string);
  if (!string || (typeof fromShape !== "string" && typeof toShape !== "string")) {
    return interpolator;
  }
  return t => {
    if (t < 1e-4 && typeof fromShape === "string") {
      return fromShape;
    }
    if (1 - t < 1e-4 && typeof toShape === "string") {
      return toShape;
    }
    return interpolator(t);
  };
}
function interpolateRing(fromRing, toRing, string) {
  let diff;
  diff = fromRing.length - toRing.length;
  addPoints(fromRing, diff < 0 ? diff * -1 : 0);
  addPoints(toRing, diff > 0 ? diff : 0);
  rotate$1(fromRing, toRing);
  return interpolatePoints(fromRing, toRing, string);
}

var earcut$2 = {exports: {}};

earcut$2.exports = earcut;
earcut$2.exports.default = earcut;
function earcut(data, holeIndices, dim) {
    dim = dim || 2;
    var hasHoles = holeIndices && holeIndices.length,
        outerLen = hasHoles ? holeIndices[0] * dim : data.length,
        outerNode = linkedList(data, 0, outerLen, dim, true),
        triangles = [];
    if (!outerNode || outerNode.next === outerNode.prev) return triangles;
    var minX, minY, maxX, maxY, x, y, invSize;
    if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim);
    if (data.length > 80 * dim) {
        minX = maxX = data[0];
        minY = maxY = data[1];
        for (var i = dim; i < outerLen; i += dim) {
            x = data[i];
            y = data[i + 1];
            if (x < minX) minX = x;
            if (y < minY) minY = y;
            if (x > maxX) maxX = x;
            if (y > maxY) maxY = y;
        }
        invSize = Math.max(maxX - minX, maxY - minY);
        invSize = invSize !== 0 ? 32767 / invSize : 0;
    }
    earcutLinked(outerNode, triangles, dim, minX, minY, invSize, 0);
    return triangles;
}
function linkedList(data, start, end, dim, clockwise) {
    var i, last;
    if (clockwise === (signedArea(data, start, end, dim) > 0)) {
        for (i = start; i < end; i += dim) last = insertNode(i, data[i], data[i + 1], last);
    } else {
        for (i = end - dim; i >= start; i -= dim) last = insertNode(i, data[i], data[i + 1], last);
    }
    if (last && equals(last, last.next)) {
        removeNode(last);
        last = last.next;
    }
    return last;
}
function filterPoints(start, end) {
    if (!start) return start;
    if (!end) end = start;
    var p = start,
        again;
    do {
        again = false;
        if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {
            removeNode(p);
            p = end = p.prev;
            if (p === p.next) break;
            again = true;
        } else {
            p = p.next;
        }
    } while (again || p !== end);
    return end;
}
function earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {
    if (!ear) return;
    if (!pass && invSize) indexCurve(ear, minX, minY, invSize);
    var stop = ear,
        prev, next;
    while (ear.prev !== ear.next) {
        prev = ear.prev;
        next = ear.next;
        if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {
            triangles.push(prev.i / dim | 0);
            triangles.push(ear.i / dim | 0);
            triangles.push(next.i / dim | 0);
            removeNode(ear);
            ear = next.next;
            stop = next.next;
            continue;
        }
        ear = next;
        if (ear === stop) {
            if (!pass) {
                earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1);
            } else if (pass === 1) {
                ear = cureLocalIntersections(filterPoints(ear), triangles, dim);
                earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);
            } else if (pass === 2) {
                splitEarcut(ear, triangles, dim, minX, minY, invSize);
            }
            break;
        }
    }
}
function isEar(ear) {
    var a = ear.prev,
        b = ear,
        c = ear.next;
    if (area(a, b, c) >= 0) return false;
    var ax = a.x, bx = b.x, cx = c.x, ay = a.y, by = b.y, cy = c.y;
    var x0 = ax < bx ? (ax < cx ? ax : cx) : (bx < cx ? bx : cx),
        y0 = ay < by ? (ay < cy ? ay : cy) : (by < cy ? by : cy),
        x1 = ax > bx ? (ax > cx ? ax : cx) : (bx > cx ? bx : cx),
        y1 = ay > by ? (ay > cy ? ay : cy) : (by > cy ? by : cy);
    var p = c.next;
    while (p !== a) {
        if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 &&
            pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) &&
            area(p.prev, p, p.next) >= 0) return false;
        p = p.next;
    }
    return true;
}
function isEarHashed(ear, minX, minY, invSize) {
    var a = ear.prev,
        b = ear,
        c = ear.next;
    if (area(a, b, c) >= 0) return false;
    var ax = a.x, bx = b.x, cx = c.x, ay = a.y, by = b.y, cy = c.y;
    var x0 = ax < bx ? (ax < cx ? ax : cx) : (bx < cx ? bx : cx),
        y0 = ay < by ? (ay < cy ? ay : cy) : (by < cy ? by : cy),
        x1 = ax > bx ? (ax > cx ? ax : cx) : (bx > cx ? bx : cx),
        y1 = ay > by ? (ay > cy ? ay : cy) : (by > cy ? by : cy);
    var minZ = zOrder(x0, y0, minX, minY, invSize),
        maxZ = zOrder(x1, y1, minX, minY, invSize);
    var p = ear.prevZ,
        n = ear.nextZ;
    while (p && p.z >= minZ && n && n.z <= maxZ) {
        if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && p !== a && p !== c &&
            pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;
        p = p.prevZ;
        if (n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c &&
            pointInTriangle(ax, ay, bx, by, cx, cy, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;
        n = n.nextZ;
    }
    while (p && p.z >= minZ) {
        if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && p !== a && p !== c &&
            pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;
        p = p.prevZ;
    }
    while (n && n.z <= maxZ) {
        if (n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c &&
            pointInTriangle(ax, ay, bx, by, cx, cy, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;
        n = n.nextZ;
    }
    return true;
}
function cureLocalIntersections(start, triangles, dim) {
    var p = start;
    do {
        var a = p.prev,
            b = p.next.next;
        if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {
            triangles.push(a.i / dim | 0);
            triangles.push(p.i / dim | 0);
            triangles.push(b.i / dim | 0);
            removeNode(p);
            removeNode(p.next);
            p = start = b;
        }
        p = p.next;
    } while (p !== start);
    return filterPoints(p);
}
function splitEarcut(start, triangles, dim, minX, minY, invSize) {
    var a = start;
    do {
        var b = a.next.next;
        while (b !== a.prev) {
            if (a.i !== b.i && isValidDiagonal(a, b)) {
                var c = splitPolygon(a, b);
                a = filterPoints(a, a.next);
                c = filterPoints(c, c.next);
                earcutLinked(a, triangles, dim, minX, minY, invSize, 0);
                earcutLinked(c, triangles, dim, minX, minY, invSize, 0);
                return;
            }
            b = b.next;
        }
        a = a.next;
    } while (a !== start);
}
function eliminateHoles(data, holeIndices, outerNode, dim) {
    var queue = [],
        i, len, start, end, list;
    for (i = 0, len = holeIndices.length; i < len; i++) {
        start = holeIndices[i] * dim;
        end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;
        list = linkedList(data, start, end, dim, false);
        if (list === list.next) list.steiner = true;
        queue.push(getLeftmost(list));
    }
    queue.sort(compareX);
    for (i = 0; i < queue.length; i++) {
        outerNode = eliminateHole(queue[i], outerNode);
    }
    return outerNode;
}
function compareX(a, b) {
    return a.x - b.x;
}
function eliminateHole(hole, outerNode) {
    var bridge = findHoleBridge(hole, outerNode);
    if (!bridge) {
        return outerNode;
    }
    var bridgeReverse = splitPolygon(bridge, hole);
    filterPoints(bridgeReverse, bridgeReverse.next);
    return filterPoints(bridge, bridge.next);
}
function findHoleBridge(hole, outerNode) {
    var p = outerNode,
        hx = hole.x,
        hy = hole.y,
        qx = -Infinity,
        m;
    do {
        if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {
            var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);
            if (x <= hx && x > qx) {
                qx = x;
                m = p.x < p.next.x ? p : p.next;
                if (x === hx) return m;
            }
        }
        p = p.next;
    } while (p !== outerNode);
    if (!m) return null;
    var stop = m,
        mx = m.x,
        my = m.y,
        tanMin = Infinity,
        tan;
    p = m;
    do {
        if (hx >= p.x && p.x >= mx && hx !== p.x &&
                pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {
            tan = Math.abs(hy - p.y) / (hx - p.x);
            if (locallyInside(p, hole) &&
                (tan < tanMin || (tan === tanMin && (p.x > m.x || (p.x === m.x && sectorContainsSector(m, p)))))) {
                m = p;
                tanMin = tan;
            }
        }
        p = p.next;
    } while (p !== stop);
    return m;
}
function sectorContainsSector(m, p) {
    return area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;
}
function indexCurve(start, minX, minY, invSize) {
    var p = start;
    do {
        if (p.z === 0) p.z = zOrder(p.x, p.y, minX, minY, invSize);
        p.prevZ = p.prev;
        p.nextZ = p.next;
        p = p.next;
    } while (p !== start);
    p.prevZ.nextZ = null;
    p.prevZ = null;
    sortLinked(p);
}
function sortLinked(list) {
    var i, p, q, e, tail, numMerges, pSize, qSize,
        inSize = 1;
    do {
        p = list;
        list = null;
        tail = null;
        numMerges = 0;
        while (p) {
            numMerges++;
            q = p;
            pSize = 0;
            for (i = 0; i < inSize; i++) {
                pSize++;
                q = q.nextZ;
                if (!q) break;
            }
            qSize = inSize;
            while (pSize > 0 || (qSize > 0 && q)) {
                if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {
                    e = p;
                    p = p.nextZ;
                    pSize--;
                } else {
                    e = q;
                    q = q.nextZ;
                    qSize--;
                }
                if (tail) tail.nextZ = e;
                else list = e;
                e.prevZ = tail;
                tail = e;
            }
            p = q;
        }
        tail.nextZ = null;
        inSize *= 2;
    } while (numMerges > 1);
    return list;
}
function zOrder(x, y, minX, minY, invSize) {
    x = (x - minX) * invSize | 0;
    y = (y - minY) * invSize | 0;
    x = (x | (x << 8)) & 0x00FF00FF;
    x = (x | (x << 4)) & 0x0F0F0F0F;
    x = (x | (x << 2)) & 0x33333333;
    x = (x | (x << 1)) & 0x55555555;
    y = (y | (y << 8)) & 0x00FF00FF;
    y = (y | (y << 4)) & 0x0F0F0F0F;
    y = (y | (y << 2)) & 0x33333333;
    y = (y | (y << 1)) & 0x55555555;
    return x | (y << 1);
}
function getLeftmost(start) {
    var p = start,
        leftmost = start;
    do {
        if (p.x < leftmost.x || (p.x === leftmost.x && p.y < leftmost.y)) leftmost = p;
        p = p.next;
    } while (p !== start);
    return leftmost;
}
function pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {
    return (cx - px) * (ay - py) >= (ax - px) * (cy - py) &&
           (ax - px) * (by - py) >= (bx - px) * (ay - py) &&
           (bx - px) * (cy - py) >= (cx - px) * (by - py);
}
function isValidDiagonal(a, b) {
    return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) &&
           (locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) &&
            (area(a.prev, a, b.prev) || area(a, b.prev, b)) ||
            equals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0);
}
function area(p, q, r) {
    return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);
}
function equals(p1, p2) {
    return p1.x === p2.x && p1.y === p2.y;
}
function intersects(p1, q1, p2, q2) {
    var o1 = sign(area(p1, q1, p2));
    var o2 = sign(area(p1, q1, q2));
    var o3 = sign(area(p2, q2, p1));
    var o4 = sign(area(p2, q2, q1));
    if (o1 !== o2 && o3 !== o4) return true;
    if (o1 === 0 && onSegment(p1, p2, q1)) return true;
    if (o2 === 0 && onSegment(p1, q2, q1)) return true;
    if (o3 === 0 && onSegment(p2, p1, q2)) return true;
    if (o4 === 0 && onSegment(p2, q1, q2)) return true;
    return false;
}
function onSegment(p, q, r) {
    return q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);
}
function sign(num) {
    return num > 0 ? 1 : num < 0 ? -1 : 0;
}
function intersectsPolygon(a, b) {
    var p = a;
    do {
        if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&
                intersects(p, p.next, a, b)) return true;
        p = p.next;
    } while (p !== a);
    return false;
}
function locallyInside(a, b) {
    return area(a.prev, a, a.next) < 0 ?
        area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 :
        area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;
}
function middleInside(a, b) {
    var p = a,
        inside = false,
        px = (a.x + b.x) / 2,
        py = (a.y + b.y) / 2;
    do {
        if (((p.y > py) !== (p.next.y > py)) && p.next.y !== p.y &&
                (px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x))
            inside = !inside;
        p = p.next;
    } while (p !== a);
    return inside;
}
function splitPolygon(a, b) {
    var a2 = new Node(a.i, a.x, a.y),
        b2 = new Node(b.i, b.x, b.y),
        an = a.next,
        bp = b.prev;
    a.next = b;
    b.prev = a;
    a2.next = an;
    an.prev = a2;
    b2.next = a2;
    a2.prev = b2;
    bp.next = b2;
    b2.prev = bp;
    return b2;
}
function insertNode(i, x, y, last) {
    var p = new Node(i, x, y);
    if (!last) {
        p.prev = p;
        p.next = p;
    } else {
        p.next = last.next;
        p.prev = last;
        last.next.prev = p;
        last.next = p;
    }
    return p;
}
function removeNode(p) {
    p.next.prev = p.prev;
    p.prev.next = p.next;
    if (p.prevZ) p.prevZ.nextZ = p.nextZ;
    if (p.nextZ) p.nextZ.prevZ = p.prevZ;
}
function Node(i, x, y) {
    this.i = i;
    this.x = x;
    this.y = y;
    this.prev = null;
    this.next = null;
    this.z = 0;
    this.prevZ = null;
    this.nextZ = null;
    this.steiner = false;
}
earcut.deviation = function (data, holeIndices, dim, triangles) {
    var hasHoles = holeIndices && holeIndices.length;
    var outerLen = hasHoles ? holeIndices[0] * dim : data.length;
    var polygonArea = Math.abs(signedArea(data, 0, outerLen, dim));
    if (hasHoles) {
        for (var i = 0, len = holeIndices.length; i < len; i++) {
            var start = holeIndices[i] * dim;
            var end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;
            polygonArea -= Math.abs(signedArea(data, start, end, dim));
        }
    }
    var trianglesArea = 0;
    for (i = 0; i < triangles.length; i += 3) {
        var a = triangles[i] * dim;
        var b = triangles[i + 1] * dim;
        var c = triangles[i + 2] * dim;
        trianglesArea += Math.abs(
            (data[a] - data[c]) * (data[b + 1] - data[a + 1]) -
            (data[a] - data[b]) * (data[c + 1] - data[a + 1]));
    }
    return polygonArea === 0 && trianglesArea === 0 ? 0 :
        Math.abs((trianglesArea - polygonArea) / polygonArea);
};
function signedArea(data, start, end, dim) {
    var sum = 0;
    for (var i = start, j = end - dim; i < end; i += dim) {
        sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);
        j = i;
    }
    return sum;
}
earcut.flatten = function (data) {
    var dim = data[0][0].length,
        result = {vertices: [], holes: [], dimensions: dim},
        holeIndex = 0;
    for (var i = 0; i < data.length; i++) {
        for (var j = 0; j < data[i].length; j++) {
            for (var d = 0; d < dim; d++) result.vertices.push(data[i][j][d]);
        }
        if (i > 0) {
            holeIndex += data[i - 1].length;
            result.holes.push(holeIndex);
        }
    }
    return result;
};

var earcutExports = earcut$2.exports;
var earcut$1 = /*@__PURE__*/getDefaultExportFromCjs$1(earcutExports);

function ascending(a, b) {
  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}

function bisector(compare) {
  if (compare.length === 1) compare = ascendingComparator(compare);
  return {
    left: function(a, x, lo, hi) {
      if (lo == null) lo = 0;
      if (hi == null) hi = a.length;
      while (lo < hi) {
        var mid = lo + hi >>> 1;
        if (compare(a[mid], x) < 0) lo = mid + 1;
        else hi = mid;
      }
      return lo;
    },
    right: function(a, x, lo, hi) {
      if (lo == null) lo = 0;
      if (hi == null) hi = a.length;
      while (lo < hi) {
        var mid = lo + hi >>> 1;
        if (compare(a[mid], x) > 0) hi = mid;
        else lo = mid + 1;
      }
      return lo;
    }
  };
}
function ascendingComparator(f) {
  return function(d, x) {
    return ascending(f(d), x);
  };
}

bisector(ascending);

const colorMap = {
    AliceBlue: "f0f8ff",
    AntiqueWhite: "faebd7",
    Aqua: "00ffff",
    Aquamarine: "7fffd4",
    Azure: "f0ffff",
    Beige: "f5f5dc",
    Bisque: "ffe4c4",
    Black: "000000",
    BlanchedAlmond: "ffebcd",
    Blue: "0000ff",
    BlueViolet: "8a2be2",
    Brown: "a52a2a",
    BurlyWood: "deb887",
    CadetBlue: "5f9ea0",
    Chartreuse: "7fff00",
    Chocolate: "d2691e",
    Coral: "ff7f50",
    CornflowerBlue: "6495ed",
    Cornsilk: "fff8dc",
    Crimson: "dc143c",
    Cyan: "00ffff",
    DarkBlue: "00008b",
    DarkCyan: "008b8b",
    DarkGoldenRod: "b8860b",
    DarkGray: "a9a9a9",
    DarkGrey: "a9a9a9",
    DarkGreen: "006400",
    DarkKhaki: "bdb76b",
    DarkMagenta: "8b008b",
    DarkOliveGreen: "556b2f",
    DarkOrange: "ff8c00",
    DarkOrchid: "9932cc",
    DarkRed: "8b0000",
    DarkSalmon: "e9967a",
    DarkSeaGreen: "8fbc8f",
    DarkSlateBlue: "483d8b",
    DarkSlateGray: "2f4f4f",
    DarkSlateGrey: "2f4f4f",
    DarkTurquoise: "00ced1",
    DarkViolet: "9400d3",
    DeepPink: "ff1493",
    DeepSkyBlue: "00bfff",
    DimGray: "696969",
    DimGrey: "696969",
    DodgerBlue: "1e90ff",
    FireBrick: "b22222",
    FloralWhite: "fffaf0",
    ForestGreen: "228b22",
    Fuchsia: "ff00ff",
    Gainsboro: "dcdcdc",
    GhostWhite: "f8f8ff",
    Gold: "ffd700",
    GoldenRod: "daa520",
    Gray: "808080",
    Grey: "808080",
    Green: "008000",
    GreenYellow: "adff2f",
    HoneyDew: "f0fff0",
    HotPink: "ff69b4",
    IndianRed: "cd5c5c",
    Indigo: "4b0082",
    Ivory: "fffff0",
    Khaki: "f0e68c",
    Lavender: "e6e6fa",
    LavenderBlush: "fff0f5",
    LawnGreen: "7cfc00",
    LemonChiffon: "fffacd",
    LightBlue: "add8e6",
    LightCoral: "f08080",
    LightCyan: "e0ffff",
    LightGoldenRodYellow: "fafad2",
    LightGray: "d3d3d3",
    LightGrey: "d3d3d3",
    LightGreen: "90ee90",
    LightPink: "ffb6c1",
    LightSalmon: "ffa07a",
    LightSeaGreen: "20b2aa",
    LightSkyBlue: "87cefa",
    LightSlateGray: "778899",
    LightSlateGrey: "778899",
    LightSteelBlue: "b0c4de",
    LightYellow: "ffffe0",
    Lime: "00ff00",
    LimeGreen: "32cd32",
    Linen: "faf0e6",
    Magenta: "ff00ff",
    Maroon: "800000",
    MediumAquaMarine: "66cdaa",
    MediumBlue: "0000cd",
    MediumOrchid: "ba55d3",
    MediumPurple: "9370db",
    MediumSeaGreen: "3cb371",
    MediumSlateBlue: "7b68ee",
    MediumSpringGreen: "00fa9a",
    MediumTurquoise: "48d1cc",
    MediumVioletRed: "c71585",
    MidnightBlue: "191970",
    MintCream: "f5fffa",
    MistyRose: "ffe4e1",
    Moccasin: "ffe4b5",
    NavajoWhite: "ffdead",
    Navy: "000080",
    OldLace: "fdf5e6",
    Olive: "808000",
    OliveDrab: "6b8e23",
    Orange: "ffa500",
    OrangeRed: "ff4500",
    Orchid: "da70d6",
    PaleGoldenRod: "eee8aa",
    PaleGreen: "98fb98",
    PaleTurquoise: "afeeee",
    PaleVioletRed: "db7093",
    PapayaWhip: "ffefd5",
    PeachPuff: "ffdab9",
    Peru: "cd853f",
    Pink: "ffc0cb",
    Plum: "dda0dd",
    PowderBlue: "b0e0e6",
    Purple: "800080",
    RebeccaPurple: "663399",
    Red: "ff0000",
    RosyBrown: "bc8f8f",
    RoyalBlue: "4169e1",
    SaddleBrown: "8b4513",
    Salmon: "fa8072",
    SandyBrown: "f4a460",
    SeaGreen: "2e8b57",
    SeaShell: "fff5ee",
    Sienna: "a0522d",
    Silver: "c0c0c0",
    SkyBlue: "87ceeb",
    SlateBlue: "6a5acd",
    SlateGray: "708090",
    SlateGrey: "708090",
    Snow: "fffafa",
    SpringGreen: "00ff7f",
    SteelBlue: "4682b4",
    Tan: "d2b48c",
    Teal: "008080",
    Thistle: "d8bfd8",
    Tomato: "ff6347",
    Turquoise: "40e0d0",
    Violet: "ee82ee",
    Wheat: "f5deb3",
    White: "ffffff",
    WhiteSmoke: "f5f5f5",
    Yellow: "ffff00",
    YellowGreen: "9acd32",
};
const round = Math.round;
var defaultColor$1 = "rgba(0,0,0,0)";
function RGBA(r, g, b, a) {
    this.r = r;
    this.g = g;
    this.b = b;
    this.a = a === undefined ? 255 : a;
    this.rgba = `rgba(${r},${g},${b},${a})`;
}
RGBA.prototype.normalize = function () {
    if (!this.normalFlag) {
        this.r /= 255;
        this.g /= 255;
        this.b /= 255;
        this.a /= 255;
        this.normalFlag = true;
    }
    return this;
};
function nameToHex(name) {
    return colorMap[name] ? `#${colorMap[name]}` : "#000";
}
function hexToRgb(hex) {
    const shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
    hex = hex.replace(shorthandRegex, (m, r, g, b) => r + r + g + g + b + b);
    const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    return new RGBA(parseInt(result[1], 16), parseInt(result[2], 16), parseInt(result[3], 16), 255);
}
function rgbToHex(rgb) {
    const rgbComponents = rgb.substring(rgb.lastIndexOf("(") + 1, rgb.lastIndexOf(")")).split(",");
    const r = parseInt(rgbComponents[0], 10);
    const g = parseInt(rgbComponents[1], 10);
    const b = parseInt(rgbComponents[2], 10);
    return `#${((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1)}`;
}
function rgbParse(rgb) {
    const res = rgb.replace(/[^0-9.,]+/g, "").split(",");
    const obj = {};
    const flags = ["r", "g", "b", "a"];
    for (let i = 0; i < res.length; i += 1) {
        obj[flags[i]] = parseFloat(res[i]);
    }
    return new RGBA(obj.r, obj.g, obj.b, obj.a);
}
function hslParse(hsl) {
    var r;
    var g;
    var b;
    var a;
    var h;
    var s;
    var l;
    const res = hsl
        .replace(/[^0-9.,]+/g, "")
        .split(",")
        .map(function (d) {
            return parseFloat(d);
        });
    h = res[0] / 360;
    s = res[1] / 100;
    l = res[2] / 100;
    a = res[3];
    if (s === 0) {
        r = g = b = l;
    } else {
        var hue2rgb = function hue2rgb(p, q, t) {
            if (t < 0) t += 1;
            if (t > 1) t -= 1;
            if (t < 1 / 6) return p + (q - p) * 6 * t;
            if (t < 1 / 2) return q;
            if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
            return p;
        };
        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
        var p = 2 * l - q;
        r = hue2rgb(p, q, h + 1 / 3) * 255;
        g = hue2rgb(p, q, h) * 255;
        b = hue2rgb(p, q, h - 1 / 3) * 255;
    }
    a = a === undefined ? 255 : a;
    return new RGBA(r, g, b, a);
}
function colorToRGB(val) {
    return val instanceof RGBA
        ? val
        : val.startsWith("#")
        ? hexToRgb(val)
        : val.startsWith("rgb")
        ? rgbParse(val)
        : val.startsWith("hsl")
        ? hslParse(val)
        : {
              r: 0,
              g: 0,
              b: 0,
              a: 255,
          };
}
function colorToRGBPdf(val) {
    const rgbColor =
        val instanceof RGBA
            ? val
            : val.startsWith("#")
            ? hexToRgb(val)
            : val.startsWith("rgb")
            ? rgbParse(val)
            : val.startsWith("hsl")
            ? hslParse(val)
            : {
                  r: 0,
                  g: 0,
                  b: 0,
                  a: 255,
              };
    return [rgbColor.r, rgbColor.g, rgbColor.b];
}
function colorRGBtransition(src, dest) {
    src = src || defaultColor$1;
    dest = dest || defaultColor$1;
    src = colorToRGB(src);
    dest = colorToRGB(dest);
    return function trans(f) {
        return new RGBA(
            round(src.r + (dest.r - src.r) * f),
            round(src.g + (dest.g - src.g) * f),
            round(src.b + (dest.b - src.b) * f),
            round(src.a + (dest.a - src.a) * f)
        );
    };
}
function rgbaInstance(r, g, b, a) {
    return new RGBA(r, g, b, a);
}
function isTypeColor(value) {
    return (
        value instanceof RGBA ||
        value.startsWith("#") ||
        value.startsWith("rgb") ||
        value.startsWith("hsl")
    );
}
var colorMap$1 = {
    nameToHex: nameToHex,
    hexToRgb: hexToRgb,
    rgbToHex: rgbToHex,
    hslToRgb: hslParse,
    transition: colorRGBtransition,
    colorToRGB: colorToRGB,
    rgba: rgbaInstance,
    isTypeColor: isTypeColor,
    RGBAInstanceCheck: function (_) {
        return _ instanceof RGBA;
    },
    colorToRGBPdf: colorToRGBPdf,
};

let morphIdentifier = 0;
const t2DGeometry$2 = geometry;
const queueInstance$5 = queue$1;
const easying = fetchTransitionType;
function animeId$2() {
    morphIdentifier += 1;
    return "morph_" + morphIdentifier;
}
function pathCmdIsValid(_) {
    return (
        [
            "m",
            "M",
            "v",
            "V",
            "l",
            "L",
            "h",
            "H",
            "q",
            "Q",
            "c",
            "C",
            "s",
            "S",
            "a",
            "A",
            "z",
            "Z",
        ].indexOf(_) !== -1
    );
}
function updateBBox(d, pd, minMax, bbox) {
    const updateBounds = (point) => {
        minMax.minX = Math.min(minMax.minX, point.x);
        minMax.maxX = Math.max(minMax.maxX, point.x);
        minMax.minY = Math.min(minMax.minY, point.y);
        minMax.maxY = Math.max(minMax.maxY, point.y);
    };
    if (["V", "H", "L", "v", "h", "l"].includes(d.type)) {
        [d.p0 || pd.p1, d.p1].forEach(updateBounds);
    } else if (["Q", "C", "q", "c"].includes(d.type)) {
        const co = t2DGeometry$2.cubicBezierCoefficients(d);
        const exe = t2DGeometry$2.cubicBezierTransition.bind(null, d.p0, co);
        for (let ii = 0; ii <= 1; ii += 0.05) {
            updateBounds(exe(ii));
        }
    } else {
        updateBounds(d.p0);
    }
    Object.assign(bbox, {
        x: minMax.minX,
        y: minMax.minY,
        width: minMax.maxX - minMax.minX,
        height: minMax.maxY - minMax.minY,
    });
}
function pathParser(path) {
    let pathStr = path.replace(/e-/g, "$");
    pathStr = pathStr.replace(/ /g, ",");
    pathStr = pathStr.replace(/-/g, ",-");
    pathStr = pathStr
        .split(/([a-zA-Z,])/g)
        .filter((d) => {
            if (d === "" || d === ",") {
                return false;
            }
            return true;
        })
        .map((d) => {
            const dd = d.replace(/\$/g, "e-");
            return dd;
        });
    for (let i = 0; i < pathStr.length; i += 1) {
        if (pathStr[i].split(".").length > 2) {
            const splitArr = pathStr[i].split(".");
            const arr = [`${splitArr[0]}.${splitArr[1]}`];
            for (let j = 2; j < splitArr.length; j += 1) {
                arr.push(`.${splitArr[j]}`);
            }
            pathStr.splice(i, 1, arr[0], arr[1]);
        }
    }
    return pathStr;
}
function addVectors(v1, v2) {
    return {
        x: v1.x + v2.x,
        y: v1.y + v2.y,
    };
}
function subVectors(v1, v2) {
    return {
        x: v1.x - v2.x,
        y: v1.y - v2.y,
    };
}
function fetchXY() {
    const x = parseFloat(this.pathArr[(this.currPathArr += 1)]);
    const y = parseFloat(this.pathArr[(this.currPathArr += 1)]);
    return {
        x,
        y,
    };
}
function relative(flag, p1, p2) {
    return flag ? p2 : p1;
}
function m(rel, p0) {
    const temp = relative(
        rel,
        this.pp
            ? this.pp
            : {
                  x: 0,
                  y: 0,
              },
        {
            x: 0,
            y: 0,
        }
    );
    this.cntrl = null;
    this.cp = addVectors(p0, temp);
    this.start = this.cp;
    this.segmentLength = 0;
    this.length = this.segmentLength;
    if (this.currPathArr !== 0 && this.pp) {
        this.stackGroup.push(this.stack);
        this.stack = [];
    } else {
        this.stackGroup.push(this.stack);
    }
    this.stack.push({
        type: "M",
        p0: this.cp,
        length: this.segmentLength,
        pointAt() {
            return this.p0;
        },
    });
    this.pp = this.cp;
    updateBBox(
        this.stack[this.stack.length - 1],
        this.stack[this.stack.length - 2],
        this.minMax,
        this.BBox
    );
    return this;
}
function v(rel, p1) {
    const temp = relative(rel, this.pp, {
        x: this.pp.x,
        y: 0,
    });
    this.cntrl = null;
    this.cp = addVectors(p1, temp);
    this.segmentLength = t2DGeometry$2.getDistance(this.pp, this.cp);
    this.stack.push({
        type: "V",
        p0: this.pp,
        p1: this.cp,
        length: this.segmentLength,
        pointAt(f) {
            return t2DGeometry$2.linearTransitionBetweenPoints(this.p0, this.p1, f);
        },
    });
    this.length += this.segmentLength;
    this.pp = this.cp;
    updateBBox(
        this.stack[this.stack.length - 1],
        this.stack[this.stack.length - 2],
        this.minMax,
        this.BBox
    );
    return this;
}
function l(rel, p1) {
    const temp = relative(rel, this.pp, {
        x: 0,
        y: 0,
    });
    this.cntrl = null;
    this.cp = addVectors(p1, temp);
    this.segmentLength = t2DGeometry$2.getDistance(this.pp, this.cp);
    this.stack.push({
        type: rel ? "L" : "l",
        p0: this.pp,
        p1: this.cp,
        relative: {
            p1: p1,
        },
        length: this.segmentLength,
        pointAt(f) {
            return t2DGeometry$2.linearTransitionBetweenPoints(this.p0, this.p1, f);
        },
    });
    this.length += this.segmentLength;
    this.pp = this.cp;
    updateBBox(
        this.stack[this.stack.length - 1],
        this.stack[this.stack.length - 2],
        this.minMax,
        this.BBox
    );
    return this;
}
function h(rel, p1) {
    const temp = relative(rel, this.pp, {
        x: 0,
        y: this.pp.y,
    });
    this.cp = addVectors(p1, temp);
    this.cntrl = null;
    this.segmentLength = t2DGeometry$2.getDistance(this.pp, this.cp);
    this.stack.push({
        type: rel ? "H" : "h",
        p0: this.pp,
        p1: this.cp,
        length: this.segmentLength,
        relative: {
            p1: p1,
        },
        pointAt(f) {
            return t2DGeometry$2.linearTransitionBetweenPoints(this.p0, this.p1, f);
        },
    });
    this.length += this.segmentLength;
    this.pp = this.cp;
    updateBBox(
        this.stack[this.stack.length - 1],
        this.stack[this.stack.length - 2],
        this.minMax,
        this.BBox
    );
    return this;
}
function z() {
    this.cp = this.start;
    this.segmentLength = t2DGeometry$2.getDistance(this.pp, this.cp);
    this.stack.push({
        p0: this.pp,
        p1: this.cp,
        type: "Z",
        length: this.segmentLength,
        pointAt(f) {
            return t2DGeometry$2.linearTransitionBetweenPoints(this.p0, this.p1, f);
        },
    });
    this.length += this.segmentLength;
    this.pp = this.cp;
    updateBBox(
        this.stack[this.stack.length - 1],
        this.stack[this.stack.length - 2],
        this.minMax,
        this.BBox
    );
    return this;
}
function q(rel, c1, ep) {
    const temp = relative(rel, this.pp, {
        x: 0,
        y: 0,
    });
    const cntrl1 = addVectors(c1, temp);
    const endPoint = addVectors(ep, temp);
    this.cp = endPoint;
    this.segmentLength = t2DGeometry$2.bezierLength(this.pp, cntrl1, this.cp);
    this.cp = endPoint;
    this.stack.push({
        type: rel ? "Q" : "q",
        p0: this.pp,
        cntrl1,
        cntrl2: cntrl1,
        p1: this.cp,
        relative: {
            cntrl1: c1,
            p1: ep,
        },
        length: this.segmentLength,
        pointAt(f) {
            return t2DGeometry$2.bezierTransition(this.p0, this.cntrl1, this.p1, f);
        },
    });
    this.length += this.segmentLength;
    this.pp = this.cp;
    this.cntrl = cntrl1;
    updateBBox(
        this.stack[this.stack.length - 1],
        this.stack[this.stack.length - 2],
        this.minMax,
        this.BBox
    );
    return this;
}
function c(rel, c1, c2, ep) {
    const self = this;
    const temp = relative(rel, this.pp, {
        x: 0,
        y: 0,
    });
    const cntrl1 = addVectors(c1, temp);
    const cntrl2 = addVectors(c2, temp);
    const endPoint = addVectors(ep, temp);
    const co = t2DGeometry$2.cubicBezierCoefficients({
        p0: this.pp,
        cntrl1,
        cntrl2,
        p1: endPoint,
    });
    this.cntrl = cntrl2;
    this.cp = endPoint;
    this.segmentLength = t2DGeometry$2.cubicBezierLength(this.pp, co);
    this.stack.push({
        type: rel ? "C" : "c",
        p0: this.pp,
        cntrl1,
        cntrl2,
        p1: this.cp,
        length: this.segmentLength,
        co: co,
        relative: {
            cntrl1: c1,
            cntrl2: c2,
            p1: ep,
        },
        pointAt(f) {
            return t2DGeometry$2.cubicBezierTransition(this.p0, this.co, f);
        },
    });
    this.length += this.segmentLength;
    this.pp = this.cp;
    updateBBox(
        self.stack[self.stack.length - 1],
        self.stack[self.stack.length - 2],
        self.minMax,
        self.BBox
    );
    return this;
}
function s(rel, c2, ep) {
    const temp = relative(rel, this.pp, {
        x: 0,
        y: 0,
    });
    const cntrl2 = addVectors(c2, temp);
    const cntrl1 = this.cntrl
        ? addVectors(this.pp, subVectors(this.pp, this.cntrl ? this.cntrl : this.pp))
        : cntrl2;
    const endPoint = addVectors(ep, temp);
    this.cp = endPoint;
    const co = t2DGeometry$2.cubicBezierCoefficients({
        p0: this.pp,
        cntrl1,
        cntrl2,
        p1: endPoint,
    });
    this.segmentLength = t2DGeometry$2.cubicBezierLength(this.pp, co);
    this.stack.push({
        type: rel ? "S" : "s",
        p0: this.pp,
        cntrl1,
        cntrl2,
        p1: this.cp,
        co: co,
        length: this.segmentLength,
        relative: {
            cntrl2: c2,
            p1: ep,
        },
        pointAt(f) {
            return t2DGeometry$2.cubicBezierTransition(this.p0, this.co, f);
        },
    });
    updateBBox(
        this.stack[this.stack.length - 1],
        this.stack[this.stack.length - 2],
        this.minMax,
        this.BBox
    );
    this.length += this.segmentLength;
    this.pp = this.cp;
    this.cntrl = cntrl2;
    return this;
}
function a(rel, rx, ry, xRotation, arcLargeFlag, sweepFlag, ep) {
    const temp = relative(rel, this.pp, {
        x: 0,
        y: 0,
    });
    const self = this;
    const endPoint = addVectors(ep, temp);
    this.cp = endPoint;
    const arcToQuad = t2DGeometry$2.arcToBezier({
        px: this.pp.x,
        py: this.pp.y,
        cx: endPoint.x,
        cy: endPoint.y,
        rx,
        ry,
        xAxisRotation: xRotation,
        largeArcFlag: arcLargeFlag,
        sweepFlag,
    });
    arcToQuad.forEach((d, i) => {
        const pp =
            i === 0
                ? self.pp
                : {
                      x: arcToQuad[0].x,
                      y: arcToQuad[0].y,
                  };
        const cntrl1 = {
            x: d.x1,
            y: d.y1,
        };
        const cntrl2 = {
            x: d.x2,
            y: d.y2,
        };
        const cp = {
            x: d.x,
            y: d.y,
        };
        const segmentLength = t2DGeometry$2.cubicBezierLength(
            pp,
            t2DGeometry$2.cubicBezierCoefficients({
                p0: pp,
                cntrl1,
                cntrl2,
                p1: cp,
            })
        );
        self.stack.push({
            type: "C",
            p0: pp,
            cntrl1,
            cntrl2,
            p1: cp,
            length: segmentLength,
            pointAt(f) {
                return t2DGeometry$2.bezierTransition(this.p0, this.cntrl1, this.cntrl2, this.p1, f);
            },
        });
        self.length += segmentLength;
        updateBBox(
            self.stack[self.stack.length - 1],
            self.stack[self.stack.length - 2],
            self.minMax,
            self.BBox
        );
    });
    this.pp = this.cp;
    this.cntrl = null;
    return this;
}
function Path(path) {
    this.stack = [];
    this.length = 0;
    this.stackGroup = [];
    this.BBox = {
        x: 0,
        y: 0,
        width: 0,
        height: 0,
    };
    this.minMax = {
        minX: Infinity,
        minY: Infinity,
        maxX: -Infinity,
        maxY: -Infinity,
    };
    if (path) {
        this.parse(path);
    }
}
Path.prototype = {
    z,
    m,
    v,
    h,
    l,
    q,
    s,
    c,
    a,
    fetchXY,
};
Path.prototype.points = function (points) {
    if (typeof this.f === "undefined") this.f = 0.3;
    if (typeof this.t === "undefined") this.t = 0.6;
    if (points.length === 0) return;
    this.m(true, { x: points[0].x, y: points[0].y });
    var m = 0;
    var dx1 = 0;
    var dy1 = 0;
    let dx2 = 0;
    let dy2 = 0;
    var preP = points[0];
    for (var i = 1; i < points.length; i++) {
        var curP = points[i];
        var nexP = points[i + 1];
        dx2 = 0;
        dy2 = 0;
        if (nexP) {
            m = (nexP.y - preP.y) / (nexP.x - preP.x);
            dx2 = (nexP.x - curP.x) * -this.f;
            dy2 = dx2 * m * this.t;
        }
        this.c(
            true,
            { x: preP.x - dx1, y: preP.y - dy1 },
            { x: curP.x + dx2, y: curP.y + dy2 },
            { x: curP.x, y: curP.y }
        );
        dx1 = dx2;
        dy1 = dy2;
        preP = curP;
    }
};
Path.prototype.curveFfactor = function (f) {
    this.f = f;
};
Path.prototype.curveTfactor = function (t) {
    this.t = t;
};
Path.prototype.parse = function parse(path) {
    this.path = path;
    this.currPathArr = -1;
    this.stack = [];
    this.length = 0;
    this.pathArr = pathParser(this.path);
    this.stackGroup = [];
    while (this.currPathArr < this.pathArr.length - 1) {
        this.case(this.pathArr[(this.currPathArr += 1)]);
    }
    return this.stack;
};
Path.prototype.fetchPathString = function () {
    let p = "";
    let c;
    for (let i = 0; i < this.stack.length; i++) {
        c = this.stack[i];
        if (c.type === "M" || c.type === "m") {
            p += c.type + " " + c.p0.x + "," + c.p0.y + " ";
        } else if (c.type === "Z" || c.type === "z") {
            p += "z";
        } else if (c.type === "C") {
            p +=
                c.type +
                " " +
                c.cntrl1.x +
                "," +
                c.cntrl1.y +
                " " +
                c.cntrl2.x +
                "," +
                c.cntrl2.y +
                " " +
                c.p1.x +
                "," +
                c.p1.y +
                " ";
        } else if (c.type === "c") {
            p +=
                c.type +
                " " +
                c.relative.cntrl1.x +
                "," +
                c.relative.cntrl1.y +
                " " +
                c.relative.cntrl2.x +
                "," +
                c.relative.cntrl2.y +
                " " +
                c.relative.p1.x +
                "," +
                c.relative.p1.y +
                " ";
        } else if (c.type === "Q") {
            p += c.type + " " + c.cntrl1.x + "," + c.cntrl1.y + " " + c.p1.x + "," + c.p1.y + " ";
        } else if (c.type === "q") {
            p +=
                c.type +
                " " +
                c.relative.cntrl1.x +
                "," +
                c.relative.cntrl1.y +
                " " +
                c.relative.p1.x +
                "," +
                c.relative.p1.y +
                " ";
        } else if (c.type === "S") {
            p += c.type + " " + c.cntrl2.x + "," + c.cntrl2.y + " " + c.p1.x + "," + c.p1.y + " ";
        } else if (c.type === "s") {
            p +=
                c.type +
                " " +
                c.relative.cntrl2.x +
                "," +
                c.relative.cntrl2.y +
                " " +
                c.relative.p1.x +
                "," +
                c.relative.p1.y +
                " ";
        } else if (c.type === "V") {
            p += c.type + " " + c.p1.y + " ";
        } else if (c.type === "v") {
            p += c.type + " " + c.relative.p1.y + " ";
        } else if (c.type === "H") {
            p += c.type + " " + c.p1.x + " ";
        } else if (c.type === "h") {
            p += c.type + " " + c.relative.p1.x + " ";
        } else if (c.type === "L") {
            p += c.type + " " + c.p1.x + "," + c.p1.y + " ";
        } else if (c.type === "l") {
            p += c.type + " " + c.relative.p1.x + "," + c.relative.p1.y + " ";
        }
    }
    return p;
};
Path.prototype.getTotalLength = function getTotalLength() {
    return this.length;
};
Path.prototype.getAngleAtLength = function getAngleAtLength(length, dir) {
    if (length > this.length) {
        return null;
    }
    const point1 = this.getPointAtLength(length);
    const point2 = this.getPointAtLength(
        length + (dir === "src" ? -1 * length * 0.01 : length * 0.01)
    );
    return Math.atan2(point2.y - point1.y, point2.x - point1.x);
};
Path.prototype.getPointAtLength = function getPointAtLength(length) {
    let coOr = {
        x: 0,
        y: 0,
    };
    let tLength = length;
    this.stack.every((d) => {
        tLength -= d.length;
        if (Math.floor(tLength) >= 0) {
            return true;
        }
        coOr = d.pointAt((d.length + tLength) / (d.length === 0 ? 1 : d.length));
        return false;
    });
    return coOr;
};
Path.prototype.execute = function (ctx, clippath) {
    let c;
    if (!clippath) {
        ctx.beginPath();
    }
    for (let i = 0; i < this.stack.length; i++) {
        c = this.stack[i];
        switch (c.type) {
            case "M":
            case "m":
                ctx.moveTo(c.p0.x, c.p0.y);
                break;
            case "Z":
            case "z":
                ctx.lineTo(c.p1.x, c.p1.y);
                break;
            case "L":
            case "l":
            case "V":
            case "v":
            case "H":
            case "h":
                ctx.lineTo(c.p1.x, c.p1.y);
                break;
            case "C":
            case "c":
            case "S":
            case "s":
                ctx.bezierCurveTo(c.cntrl1.x, c.cntrl1.y, c.cntrl2.x, c.cntrl2.y, c.p1.x, c.p1.y);
                break;
            case "Q":
            case "q":
                ctx.quadraticCurveTo(c.cntrl1.x, c.cntrl1.y, c.p1.x, c.p1.y);
                break;
        }
    }
    if (!clippath) {
        ctx.closePath();
    }
};
Path.prototype.case = function pCase(currCmd) {
    let currCmdI = currCmd;
    let rx;
    let ry;
    let xRotation;
    let arcLargeFlag;
    let sweepFlag;
    if (pathCmdIsValid(currCmdI)) {
        this.PC = currCmdI;
    } else {
        currCmdI = this.PC;
        this.currPathArr = this.currPathArr - 1;
    }
    switch (currCmdI) {
        case "m":
            this.m(false, this.fetchXY());
            break;
        case "M":
            this.m(true, this.fetchXY());
            break;
        case "v":
            this.v(false, {
                x: 0,
                y: parseFloat(this.pathArr[(this.currPathArr += 1)]),
            });
            break;
        case "V":
            this.v(true, {
                x: 0,
                y: parseFloat(this.pathArr[(this.currPathArr += 1)]),
            });
            break;
        case "l":
            this.l(false, this.fetchXY());
            break;
        case "L":
            this.l(true, this.fetchXY());
            break;
        case "h":
            this.h(false, {
                x: parseFloat(this.pathArr[(this.currPathArr += 1)]),
                y: 0,
            });
            break;
        case "H":
            this.h(true, {
                x: parseFloat(this.pathArr[(this.currPathArr += 1)]),
                y: 0,
            });
            break;
        case "q":
            this.q(false, this.fetchXY(), this.fetchXY());
            break;
        case "Q":
            this.q(true, this.fetchXY(), this.fetchXY());
            break;
        case "c":
            this.c(false, this.fetchXY(), this.fetchXY(), this.fetchXY());
            break;
        case "C":
            this.c(true, this.fetchXY(), this.fetchXY(), this.fetchXY());
            break;
        case "s":
            this.s(false, this.fetchXY(), this.fetchXY());
            break;
        case "S":
            this.s(true, this.fetchXY(), this.fetchXY());
            break;
        case "a":
            rx = parseFloat(this.pathArr[(this.currPathArr += 1)]);
            ry = parseFloat(this.pathArr[(this.currPathArr += 1)]);
            xRotation = parseFloat(this.pathArr[(this.currPathArr += 1)]);
            arcLargeFlag = parseFloat(this.pathArr[(this.currPathArr += 1)]);
            sweepFlag = parseFloat(this.pathArr[(this.currPathArr += 1)]);
            this.a(false, rx, ry, xRotation, arcLargeFlag, sweepFlag, this.fetchXY());
            break;
        case "A":
            rx = parseFloat(this.pathArr[(this.currPathArr += 1)]);
            ry = parseFloat(this.pathArr[(this.currPathArr += 1)]);
            xRotation = parseFloat(this.pathArr[(this.currPathArr += 1)]);
            arcLargeFlag = parseFloat(this.pathArr[(this.currPathArr += 1)]);
            sweepFlag = parseFloat(this.pathArr[(this.currPathArr += 1)]);
            this.a(true, rx, ry, xRotation, arcLargeFlag, sweepFlag, this.fetchXY());
            break;
        case "z":
        case "Z":
            this.z();
            break;
    }
};
Path.prototype.getPath2DObject = function (pathStr) {
    return new Path2D(pathStr || this.fetchPathString());
};
Path.prototype.getPathTexture = function (style = {}, refresh) {
    if (!this.layer) {
        this.layer = document.createElement("canvas");
        this.ctx = this.layer.getContext("2d");
        refresh = true;
    }
    if(refresh) {
        let lineWidth = (style['lineWidth'] || 1) * 2;
        const {x = 0, y= 0, height = 0, width = 0} = this.BBox;
        this.pathNode = this.getPath2DObject();
        this.layer.setAttribute("height", height + lineWidth * 2);
        this.layer.setAttribute("width", width + lineWidth * 2);
        this.ctx.clearRect(0, 0, width + lineWidth * 2, height + lineWidth * 2);
        this.ctx.save();
        this.ctx.translate((x * -1 + lineWidth) || 0, (y * -1 + lineWidth) || 0);
        for(let key in style) {
            let value = style[key];
            if (key === 'fillStyle' || key === 'strokeStyle') {
                this.ctx[key] = colorMap$1.RGBAInstanceCheck(value) ? value.rgba : value;
            } else {
                if (typeof this.ctx[key] !== "function") {
                    this.ctx[key] = value;
                } else if (typeof this.ctx[key] === "function") {
                    this.ctx[key](value);
                }
            }
        }
        if (style['fillStyle']) {
            this.ctx.fill(this.pathNode);
        }
        if (style['strokeStyle']) {
            this.ctx.stroke(this.pathNode);
        }
        this.ctx.restore();
    }
    return this.layer;
};
function relativeCheck(type) {
    return ["S", "C", "V", "L", "H", "Q"].indexOf(type) > -1;
}
const CubicBezierTransition = function CubicBezierTransition(type, p0, c1, c2, co, length) {
    this.type = type;
    this.p0 = p0;
    this.c1_src = c1;
    this.c2_src = c2;
    this.co = co;
    this.length_src = length;
};
CubicBezierTransition.prototype.execute = function (f) {
    const co = this.co;
    const p0 = this.p0;
    const c1 = this.c1_src;
    const c2 = this.c2_src;
    const c1Temp = {
        x: p0.x + (c1.x - p0.x) * f,
        y: p0.y + (c1.y - p0.y) * f,
    };
    const c2Temp = {
        x: c1.x + (c2.x - c1.x) * f,
        y: c1.y + (c2.y - c1.y) * f,
    };
    this.cntrl1 = c1Temp;
    this.cntrl2 = {
        x: c1Temp.x + (c2Temp.x - c1Temp.x) * f,
        y: c1Temp.y + (c2Temp.y - c1Temp.y) * f,
    };
    this.p1 = {
        x: co.ax * t2DGeometry$2.pow(f, 3) + co.bx * t2DGeometry$2.pow(f, 2) + co.cx * f + p0.x,
        y: co.ay * t2DGeometry$2.pow(f, 3) + co.by * t2DGeometry$2.pow(f, 2) + co.cy * f + p0.y,
    };
    this.length = this.length_src * f;
    this.relative = {
        cntrl1: relativeCheck(this.type) ? this.cntrl1 : subVectors(this.cntrl1, this.p0),
        cntrl2: relativeCheck(this.type) ? this.cntrl2 : subVectors(this.cntrl2, this.p0),
        p1: relativeCheck(this.type) ? this.p1 : subVectors(this.p1, this.p0),
    };
    return this;
};
CubicBezierTransition.prototype.pointAt = function (f) {
    return t2DGeometry$2.cubicBezierTransition(this.p0, this.co, f);
};
const BezierTransition = function BezierTransition(type, p0, p1, p2, length) {
    this.type = type;
    this.p0 = p0;
    this.p1_src = p1;
    this.p2_src = p2;
    this.length_src = length;
    this.length = 0;
};
BezierTransition.prototype.execute = function (f) {
    const p0 = this.p0;
    const p1 = this.p1_src;
    const p2 = this.p2_src;
    this.length = this.length_src * f;
    this.cntrl1 = {
        x: p0.x + (p1.x - p0.x) * f,
        y: p0.y + (p1.y - p0.y) * f,
    };
    this.cntrl2 = this.cntrl1;
    this.p1 = {
        x: (p0.x - 2 * p1.x + p2.x) * f * f + (2 * p1.x - 2 * p0.x) * f + p0.x,
        y: (p0.y - 2 * p1.y + p2.y) * f * f + (2 * p1.y - 2 * p0.y) * f + p0.y,
    };
    this.relative = {
        cntrl1: relativeCheck(this.type) ? this.cntrl1 : subVectors(this.cntrl1, this.p0),
        p1: relativeCheck(this.type) ? this.p1 : subVectors(this.p1, this.p0),
    };
    return this;
};
BezierTransition.prototype.pointAt = function (f) {
    return t2DGeometry$2.bezierTransition(this.p0, this.cntrl1, this.p1, f);
};
const LinearTransitionBetweenPoints = function LinearTransitionBetweenPoints(
    type,
    p0,
    p2,
    length
) {
    this.type = type;
    this.p0 = p0;
    this.p1 = p0;
    this.p2_src = p2;
    this.length_src = length;
    this.length = 0;
};
LinearTransitionBetweenPoints.prototype.execute = function (f) {
    const p0 = this.p0;
    const p2 = this.p2_src;
    this.p1 = {
        x: p0.x + (p2.x - p0.x) * f,
        y: p0.y + (p2.y - p0.y) * f,
    };
    this.length = this.length_src * f;
    this.relative = {
        p1: relativeCheck(this.type) ? this.p1 : subVectors(this.p1, this.p0),
    };
    return this;
};
LinearTransitionBetweenPoints.prototype.pointAt = function (f) {
    return t2DGeometry$2.linearTransitionBetweenPoints(this.p0, this.p1, f);
};
function AnimatePathTo(targetConfig, fromConfig) {
    const self = this;
    const { duration, ease, end, loop, direction, attr, delay = 0 } = targetConfig;
    const src = (fromConfig || self)?.attr?.d ?? (attr.d || "");
    let totalLength = 0;
    self.arrayStack = [];
    if (this.ctx && this.ctx.type_ === "pdf") return;
    if (!src) {
        throw Error("Path Not defined");
    }
    const chainInstance = chain.sequenceChain();
    const newPathInstance = CheckPathType(src) ? src : new Path(src);
    const arrExe = newPathInstance.stackGroup.reduce((p, c) => {
        p = p.concat(c);
        return p;
    }, []);
    const mappedArr = [];
    for (let i = 0; i < arrExe.length; i += 1) {
        if (arrExe[i].type === "Z" || arrExe[i].type === "z") {
            mappedArr.push({
                run(f) {
                    newPathInstance.stack.length = this.id + 1;
                    newPathInstance.stack[this.id] = this.render.execute(f);
                    self.setAttr("d", newPathInstance);
                },
                target: self,
                id: i,
                delay: 0,
                render: new LinearTransitionBetweenPoints(
                    arrExe[i].type,
                    arrExe[i].p0,
                    arrExe[0].p0,
                    arrExe[i].segmentLength
                ),
                length: arrExe[i].length,
            });
            totalLength += 0;
        } else if (["V", "v", "H", "h", "L", "l"].indexOf(arrExe[i].type) !== -1) {
            mappedArr.push({
                run(f) {
                    newPathInstance.stack.length = this.id + 1;
                    newPathInstance.stack[this.id] = this.render.execute(f);
                    self.setAttr("d", newPathInstance);
                },
                target: self,
                id: i,
                delay: 0,
                render: new LinearTransitionBetweenPoints(
                    arrExe[i].type,
                    arrExe[i].p0,
                    arrExe[i].p1,
                    arrExe[i].length
                ),
                length: arrExe[i].length,
            });
            totalLength += arrExe[i].length;
        } else if (arrExe[i].type === "Q" || arrExe[i].type === "q") {
            mappedArr.push({
                run(f) {
                    newPathInstance.stack.length = this.id + 1;
                    newPathInstance.stack[this.id] = this.render.execute(f);
                    self.setAttr("d", newPathInstance);
                },
                target: self,
                id: i,
                delay: 0,
                render: new BezierTransition(
                    arrExe[i].type,
                    arrExe[i].p0,
                    arrExe[i].cntrl1,
                    arrExe[i].p1,
                    arrExe[i].length
                ),
                length: arrExe[i].length,
            });
            totalLength += arrExe[i].length;
        } else if (
            arrExe[i].type === "C" ||
            arrExe[i].type === "S" ||
            arrExe[i].type === "c" ||
            arrExe[i].type === "s"
        ) {
            const co = t2DGeometry$2.cubicBezierCoefficients(arrExe[i]);
            mappedArr.push({
                run(f) {
                    newPathInstance.stack.length = this.id + 1;
                    newPathInstance.stack[this.id] = this.render.execute(f);
                    self.setAttr("d", newPathInstance);
                },
                target: self,
                id: i,
                co,
                delay: 0,
                render: new CubicBezierTransition(
                    arrExe[i].type,
                    arrExe[i].p0,
                    arrExe[i].cntrl1,
                    arrExe[i].cntrl2,
                    co,
                    arrExe[i].length
                ),
                length: arrExe[i].length,
            });
            totalLength += arrExe[i].length;
        } else if (arrExe[i].type === "M" || arrExe[i].type === "m") {
            mappedArr.push({
                run() {
                    newPathInstance.stack.length = this.id + 1;
                    newPathInstance.stack[this.id] = {
                        type: "M",
                        p0: arrExe[i].p0,
                        length: 0,
                        pointAt() {
                            return this.p0;
                        },
                    };
                },
                delay: 0,
                target: self,
                id: i,
                length: 0,
            });
            totalLength += 0;
        } else ;
    }
    mappedArr.forEach(function (d) {
        d.duration = (d.length / totalLength) * duration;
    });
    chainInstance
        .delay(delay)
        .add(mappedArr)
        .ease(ease)
        .loop(loop || 0)
        .direction(direction || "default");
    if (typeof end === "function") {
        chainInstance.end(end.bind(self));
    }
    chainInstance.commit();
    return this;
}
function MorphTo(targetConfig) {
    const self = this;
    const { duration } = targetConfig;
    const { ease } = targetConfig;
    const loop = targetConfig.loop ? targetConfig.loop : 0;
    const direction = targetConfig.direction ? targetConfig.direction : "default";
    const destD = targetConfig.attr.d ? targetConfig.attr.d : self.attr.d;
    const srcPath = CheckPathType(self.attr.d) ? self.attr.d : new Path(self.attr.d);
    const destPath = CheckPathType(destD) ? destD : new Path(destD);
    const morphExe = interpolate(srcPath.fetchPathString(), destPath.fetchPathString(), {
        maxSegmentLength: 25,
    });
    queueInstance$5.add(
        animeId$2(),
        {
            run(f) {
                self.setAttr("d", morphExe(f));
            },
            target: self,
            duration: duration,
            loop: loop,
            delay: 0,
            direction: direction,
        },
        easying(ease)
    );
}
function CheckPathType(pathInstance) {
    return pathInstance instanceof Path;
}
function CreatePath (d) {
    return new Path(d);
}

function Events(vDom) {
    this.vDom = vDom;
    this.disable = false;
    this.dragNode = null;
    this.touchNode = null;
    this.wheelNode = null;
    this.pointers = [];
}
Events.prototype.getNode = function () {};
Events.prototype.addPointer = function (e) {
    this.pointers.push(e);
};
Events.prototype.removePointer = function (e) {
    const self = this;
    const pointers = this.pointers;
    let index = -1;
    for (var i = 0; i < pointers.length; i++) {
        if (e.pointerId === pointers[i].pointerId) {
            index = i;
            break;
        }
    }
    if (index !== -1) {
        self.pointers = [];
        self.distance = 0;
        if (this.pointerNode && this.pointerNode.node.events.zoom) {
            this.pointerNode.node.events.zoom.onZoomEnd(this.pointerNode.node, e, self);
        }
    }
};
Events.prototype.clickCheck = function (e) {
    propogateEvent(
        [this.vDom],
        {
            x: e.offsetX,
            y: e.offsetY,
        },
        e,
        "click"
    );
};
Events.prototype.dblclickCheck = function (e) {
    propogateEvent(
        [this.vDom],
        {
            x: e.offsetX,
            y: e.offsetY,
        },
        e,
        "dblclick"
    );
};
Events.prototype.pointerdownCheck = function (e) {
    const self = this;
    const node = propogateEvent(
        [this.vDom],
        {
            x: e.offsetX,
            y: e.offsetY,
        },
        e,
        "pointerdown"
    );
    if (node && (!this.pointerNode || this.pointerNode.node !== node)) {
        this.pointerNode = {
            node: node,
            clickCounter: 1,
            dragCounter: 0,
        };
    } else if (this.pointerNode) {
        this.pointerNode.clickCounter += 1;
    }
    if (node && (node.events.zoom || node.events.drag)) {
        if (node.events.zoom) {
            if (node.events.zoom.panFlag) {
                node.events.zoom.panExecute(node, e, "pointerdown", self);
            }
        }
        if (node.events.drag) {
            node.events.drag.execute(node, e, "pointerdown", self);
        }
    } else if (node) {
        if (e.pointerType === "touch") {
            node.events.mouseover.call(node, e);
        }
    }
};
Events.prototype.pointermoveCheck = function (e) {
    const self = this;
    const node = this.pointerNode ? this.pointerNode.node : null;
    if (node) {
        this.pointerNode.dragCounter += 1;
        if (node.events.zoom) {
            if (node.events.zoom.panFlag) {
                node.events.zoom.panExecute(node, e, "pointermove", self);
            }
            node.events.zoom.zoomPinch(node, e, self);
        }
        if (node.events.drag) {
            node.events.drag.execute(node, e, "pointermove", self);
        }
        if (node.events.mousemove) {
            node.events.mousemove.call(node, e);
        }
    }
    e.preventDefault();
};
function eventBubble(node, eventType, event) {
    if (node.dom.parent) {
        if (node.dom.parent.events[eventType]) {
            node.dom.parent.events[eventType](node.dom.parent, event);
        }
        return eventBubble(node.dom.parent, eventType, event);
    }
}
let clickInterval;
Events.prototype.pointerupCheck = function (e) {
    const self = this;
    const node = this.pointerNode ? this.pointerNode.node : null;
    if (node) {
        if (node.events.drag) {
            node.events.drag.execute(node, e, "pointerup", self);
        }
        if (node.events.zoom) {
            if (node.events.zoom.panFlag) {
                node.events.zoom.panExecute(node, e, "pointerup", self);
            }
        }
        if (
            this.pointerNode.dragCounter <= 2 ||
            (e.pointerType === "touch" && this.pointerNode.dragCounter <= 5)
        ) {
            if (node.events.click) {
                node.events.click.call(node, e);
            }
            eventBubble(node, "click", e);
            if (this.pointerNode.clickCounter === 2) {
                if (node.events.dblclick) {
                    node.events.dblclick.call(node, e);
                }
                eventBubble(node, "dblclick", e);
            }
            if (clickInterval) {
                clearTimeout(clickInterval);
            }
            clickInterval = setTimeout(function () {
                self.pointerNode = null;
                clickInterval = null;
            }, 200);
        } else {
            this.pointerNode = null;
        }
        if (e.pointerType === "touch") {
            node.events.mouseup.call(node, e);
        }
    }
};
Events.prototype.mousedownCheck = function (e) {
    propogateEvent(
        [this.vDom],
        {
            x: e.offsetX,
            y: e.offsetY,
        },
        e,
        "mousedown"
    );
};
Events.prototype.mousemoveCheck = function (e) {
    const node = propogateEvent(
        [this.vDom],
        {
            x: e.offsetX,
            y: e.offsetY,
        },
        e,
        "mousemove"
    );
    if (this.selectedNode && this.selectedNode !== node) {
        if (this.selectedNode.events.mouseout) {
            this.selectedNode.events.mouseout.call(this.selectedNode, e);
        }
        if (this.selectedNode.events.mouseleave) {
            this.selectedNode.events.mouseleave.call(this.selectedNode, e);
        }
    }
    if (node && (node.events.mouseover || node.events.mousein)) {
        if (this.selectedNode !== node) {
            if (node.events.mouseover) {
                node.events.mouseover.call(node, e);
            }
            if (node.events.mousein) {
                node.events.mousein.call(node, e);
            }
        }
    }
    this.selectedNode = node;
    e.preventDefault();
};
Events.prototype.mouseupCheck = function (e) {
    propogateEvent(
        [this.vDom],
        {
            x: e.offsetX,
            y: e.offsetY,
        },
        e,
        "mouseup"
    );
};
Events.prototype.mouseleaveCheck = function (e) {
    propogateEvent(
        [this.vDom],
        {
            x: e.offsetX,
            y: e.offsetY,
        },
        e,
        "mouseleave"
    );
};
Events.prototype.contextmenuCheck = function (e) {
    propogateEvent(
        [this.vDom],
        {
            x: e.offsetX,
            y: e.offsetY,
        },
        e,
        "contextmenu"
    );
};
Events.prototype.touchstartCheck = function (e) {
    propogateEvent(
        [this.vDom],
        {
            x: e.offsetX,
            y: e.offsetY,
        },
        e,
        "touchstart"
    );
};
Events.prototype.touchendCheck = function (e) {
    propogateEvent(
        [this.vDom],
        {
            x: e.offsetX,
            y: e.offsetY,
        },
        e,
        "touchend"
    );
};
Events.prototype.touchmoveCheck = function (e) {
    const touches = e.touches;
    if (touches.length === 0) {
        return;
    }
    propogateEvent(
        [this.vDom],
        {
            x: touches[0].clientX,
            y: touches[0].clientY,
        },
        e,
        "touchmove"
    );
};
Events.prototype.touchcancelCheck = function (e) {
    propogateEvent(
        [this.vDom],
        {
            x: e.x,
            y: e.y,
        },
        e,
        "touchcacel"
    );
};
let wheelCounter = 0;
let deltaWheel = 0;
Events.prototype.wheelEventCheck = function (e) {
    const self = this;
    if (!this.wheelNode) {
        let node = propogateEvent(
            [this.vDom],
            {
                x: e.offsetX,
                y: e.offsetY,
            },
            e,
            "wheel"
        );
        node = node || this.vDom;
        if (node && node.events.zoom) {
            if (!node.events.zoom.disableWheel) {
                node.events.zoom.zoomExecute(node, e, self);
                this.wheelNode = node;
            }
        }
    } else {
        this.wheelNode.events.zoom.zoomExecute(this.wheelNode, e, self);
        wheelCounter += 1;
        if (this.wheelHndl) {
            clearTimeout(this.wheelHndl);
            this.wheelHndl = null;
            deltaWheel = wheelCounter;
        }
        this.wheelHndl = setTimeout(function () {
            if (deltaWheel !== wheelCounter) {
                deltaWheel = wheelCounter;
            } else {
                self.wheelHndl = null;
                self.wheelNode.events.zoom.onZoomEnd(self.wheelNode, e, self);
                self.wheelNode = null;
                wheelCounter = 0;
            }
        }, 100);
    }
};
function propogateEvent(nodes, mouseCoor, rawEvent, eventType) {
    let node, temp;
    for (var i = nodes.length - 1; i >= 0; i -= 1) {
        var d = nodes[i];
        var coOr = {
            x: mouseCoor.x,
            y: mouseCoor.y,
        };
        if (!d.bbox) {
            continue;
        }
        transformCoOr(d, coOr);
        if (d.in({ x: coOr.x, y: coOr.y })) {
            if (d.children && d.children.length > 0) {
                temp = propogateEvent(
                    d.children,
                    {
                        x: coOr.x,
                        y: coOr.y,
                    },
                    rawEvent,
                    eventType
                );
                if (temp) {
                    node = temp;
                }
            } else {
                node = d;
            }
            if (d.events[eventType] && typeof d.events[eventType] === "function") {
                d.events[eventType](rawEvent);
            }
            if (node) {
                break;
            }
        }
    }
    if (!node && d.attr.id === "rootNode") {
        node = d;
        if (d.events[eventType] && typeof d.events[eventType] === "function") {
            d.events[eventType](rawEvent);
        }
    }
    return node;
}
function transformCoOr(d, coOr) {
    let hozMove = 0;
    let verMove = 0;
    let scaleX = 1;
    let scaleY = 1;
    const coOrLocal = coOr;
    if (d.attr.transform && d.attr.transform.translate) {
        [hozMove, verMove] = d.attr.transform.translate;
        coOrLocal.x -= hozMove;
        coOrLocal.y -= verMove;
    }
    if (d.attr.transform && d.attr.transform.scale) {
        scaleX = d.attr.transform.scale[0] !== undefined ? d.attr.transform.scale[0] : 1;
        scaleY = d.attr.transform.scale[1] !== undefined ? d.attr.transform.scale[1] : scaleX;
        coOrLocal.x /= scaleX;
        coOrLocal.y /= scaleY;
    }
    if (d.attr.transform && d.attr.transform.rotate) {
        const rotate = d.attr.transform.rotate[0];
        const cen = {
            x: d.attr.transform.rotate[1],
            y: d.attr.transform.rotate[2],
        };
        const x = coOrLocal.x;
        const y = coOrLocal.y;
        const cx = cen.x;
        const cy = cen.y;
        var radians = (Math.PI / 180) * rotate;
        var cos = Math.cos(radians);
        var sin = Math.sin(radians);
        coOrLocal.x = cos * (x - cx) + sin * (y - cy) + cx;
        coOrLocal.y = cos * (y - cy) - sin * (x - cx) + cy;
    }
}

var resizeObservers = [];

var hasActiveObservations = function () {
    return resizeObservers.some(function (ro) { return ro.activeTargets.length > 0; });
};

var hasSkippedObservations = function () {
    return resizeObservers.some(function (ro) { return ro.skippedTargets.length > 0; });
};

var msg$1 = 'ResizeObserver loop completed with undelivered notifications.';
var deliverResizeLoopError = function () {
    var event;
    if (typeof ErrorEvent === 'function') {
        event = new ErrorEvent('error', {
            message: msg$1
        });
    }
    else {
        event = document.createEvent('Event');
        event.initEvent('error', false, false);
        event.message = msg$1;
    }
    window.dispatchEvent(event);
};

var ResizeObserverBoxOptions;
(function (ResizeObserverBoxOptions) {
    ResizeObserverBoxOptions["BORDER_BOX"] = "border-box";
    ResizeObserverBoxOptions["CONTENT_BOX"] = "content-box";
    ResizeObserverBoxOptions["DEVICE_PIXEL_CONTENT_BOX"] = "device-pixel-content-box";
})(ResizeObserverBoxOptions || (ResizeObserverBoxOptions = {}));

var freeze = function (obj) { return Object.freeze(obj); };

var ResizeObserverSize = (function () {
    function ResizeObserverSize(inlineSize, blockSize) {
        this.inlineSize = inlineSize;
        this.blockSize = blockSize;
        freeze(this);
    }
    return ResizeObserverSize;
}());

var DOMRectReadOnly = (function () {
    function DOMRectReadOnly(x, y, width, height) {
        this.x = x;
        this.y = y;
        this.width = width;
        this.height = height;
        this.top = this.y;
        this.left = this.x;
        this.bottom = this.top + this.height;
        this.right = this.left + this.width;
        return freeze(this);
    }
    DOMRectReadOnly.prototype.toJSON = function () {
        var _a = this, x = _a.x, y = _a.y, top = _a.top, right = _a.right, bottom = _a.bottom, left = _a.left, width = _a.width, height = _a.height;
        return { x: x, y: y, top: top, right: right, bottom: bottom, left: left, width: width, height: height };
    };
    DOMRectReadOnly.fromRect = function (rectangle) {
        return new DOMRectReadOnly(rectangle.x, rectangle.y, rectangle.width, rectangle.height);
    };
    return DOMRectReadOnly;
}());

var isSVG = function (target) { return target instanceof SVGElement && 'getBBox' in target; };
var isHidden = function (target) {
    if (isSVG(target)) {
        var _a = target.getBBox(), width = _a.width, height = _a.height;
        return !width && !height;
    }
    var _b = target, offsetWidth = _b.offsetWidth, offsetHeight = _b.offsetHeight;
    return !(offsetWidth || offsetHeight || target.getClientRects().length);
};
var isElement$1 = function (obj) {
    var _a;
    if (obj instanceof Element) {
        return true;
    }
    var scope = (_a = obj === null || obj === void 0 ? void 0 : obj.ownerDocument) === null || _a === void 0 ? void 0 : _a.defaultView;
    return !!(scope && obj instanceof scope.Element);
};
var isReplacedElement = function (target) {
    switch (target.tagName) {
        case 'INPUT':
            if (target.type !== 'image') {
                break;
            }
        case 'VIDEO':
        case 'AUDIO':
        case 'EMBED':
        case 'OBJECT':
        case 'CANVAS':
        case 'IFRAME':
        case 'IMG':
            return true;
    }
    return false;
};

var global$1 = typeof window !== 'undefined' ? window : {};

var cache$1 = new WeakMap();
var scrollRegexp = /auto|scroll/;
var verticalRegexp = /^tb|vertical/;
var IE = (/msie|trident/i).test(global$1.navigator && global$1.navigator.userAgent);
var parseDimension = function (pixel) { return parseFloat(pixel || '0'); };
var size = function (inlineSize, blockSize, switchSizes) {
    if (inlineSize === void 0) { inlineSize = 0; }
    if (blockSize === void 0) { blockSize = 0; }
    if (switchSizes === void 0) { switchSizes = false; }
    return new ResizeObserverSize((switchSizes ? blockSize : inlineSize) || 0, (switchSizes ? inlineSize : blockSize) || 0);
};
var zeroBoxes = freeze({
    devicePixelContentBoxSize: size(),
    borderBoxSize: size(),
    contentBoxSize: size(),
    contentRect: new DOMRectReadOnly(0, 0, 0, 0)
});
var calculateBoxSizes = function (target, forceRecalculation) {
    if (forceRecalculation === void 0) { forceRecalculation = false; }
    if (cache$1.has(target) && !forceRecalculation) {
        return cache$1.get(target);
    }
    if (isHidden(target)) {
        cache$1.set(target, zeroBoxes);
        return zeroBoxes;
    }
    var cs = getComputedStyle(target);
    var svg = isSVG(target) && target.ownerSVGElement && target.getBBox();
    var removePadding = !IE && cs.boxSizing === 'border-box';
    var switchSizes = verticalRegexp.test(cs.writingMode || '');
    var canScrollVertically = !svg && scrollRegexp.test(cs.overflowY || '');
    var canScrollHorizontally = !svg && scrollRegexp.test(cs.overflowX || '');
    var paddingTop = svg ? 0 : parseDimension(cs.paddingTop);
    var paddingRight = svg ? 0 : parseDimension(cs.paddingRight);
    var paddingBottom = svg ? 0 : parseDimension(cs.paddingBottom);
    var paddingLeft = svg ? 0 : parseDimension(cs.paddingLeft);
    var borderTop = svg ? 0 : parseDimension(cs.borderTopWidth);
    var borderRight = svg ? 0 : parseDimension(cs.borderRightWidth);
    var borderBottom = svg ? 0 : parseDimension(cs.borderBottomWidth);
    var borderLeft = svg ? 0 : parseDimension(cs.borderLeftWidth);
    var horizontalPadding = paddingLeft + paddingRight;
    var verticalPadding = paddingTop + paddingBottom;
    var horizontalBorderArea = borderLeft + borderRight;
    var verticalBorderArea = borderTop + borderBottom;
    var horizontalScrollbarThickness = !canScrollHorizontally ? 0 : target.offsetHeight - verticalBorderArea - target.clientHeight;
    var verticalScrollbarThickness = !canScrollVertically ? 0 : target.offsetWidth - horizontalBorderArea - target.clientWidth;
    var widthReduction = removePadding ? horizontalPadding + horizontalBorderArea : 0;
    var heightReduction = removePadding ? verticalPadding + verticalBorderArea : 0;
    var contentWidth = svg ? svg.width : parseDimension(cs.width) - widthReduction - verticalScrollbarThickness;
    var contentHeight = svg ? svg.height : parseDimension(cs.height) - heightReduction - horizontalScrollbarThickness;
    var borderBoxWidth = contentWidth + horizontalPadding + verticalScrollbarThickness + horizontalBorderArea;
    var borderBoxHeight = contentHeight + verticalPadding + horizontalScrollbarThickness + verticalBorderArea;
    var boxes = freeze({
        devicePixelContentBoxSize: size(Math.round(contentWidth * devicePixelRatio), Math.round(contentHeight * devicePixelRatio), switchSizes),
        borderBoxSize: size(borderBoxWidth, borderBoxHeight, switchSizes),
        contentBoxSize: size(contentWidth, contentHeight, switchSizes),
        contentRect: new DOMRectReadOnly(paddingLeft, paddingTop, contentWidth, contentHeight)
    });
    cache$1.set(target, boxes);
    return boxes;
};
var calculateBoxSize = function (target, observedBox, forceRecalculation) {
    var _a = calculateBoxSizes(target, forceRecalculation), borderBoxSize = _a.borderBoxSize, contentBoxSize = _a.contentBoxSize, devicePixelContentBoxSize = _a.devicePixelContentBoxSize;
    switch (observedBox) {
        case ResizeObserverBoxOptions.DEVICE_PIXEL_CONTENT_BOX:
            return devicePixelContentBoxSize;
        case ResizeObserverBoxOptions.BORDER_BOX:
            return borderBoxSize;
        default:
            return contentBoxSize;
    }
};

var ResizeObserverEntry = (function () {
    function ResizeObserverEntry(target) {
        var boxes = calculateBoxSizes(target);
        this.target = target;
        this.contentRect = boxes.contentRect;
        this.borderBoxSize = freeze([boxes.borderBoxSize]);
        this.contentBoxSize = freeze([boxes.contentBoxSize]);
        this.devicePixelContentBoxSize = freeze([boxes.devicePixelContentBoxSize]);
    }
    return ResizeObserverEntry;
}());

var calculateDepthForNode = function (node) {
    if (isHidden(node)) {
        return Infinity;
    }
    var depth = 0;
    var parent = node.parentNode;
    while (parent) {
        depth += 1;
        parent = parent.parentNode;
    }
    return depth;
};

var broadcastActiveObservations = function () {
    var shallowestDepth = Infinity;
    var callbacks = [];
    resizeObservers.forEach(function processObserver(ro) {
        if (ro.activeTargets.length === 0) {
            return;
        }
        var entries = [];
        ro.activeTargets.forEach(function processTarget(ot) {
            var entry = new ResizeObserverEntry(ot.target);
            var targetDepth = calculateDepthForNode(ot.target);
            entries.push(entry);
            ot.lastReportedSize = calculateBoxSize(ot.target, ot.observedBox);
            if (targetDepth < shallowestDepth) {
                shallowestDepth = targetDepth;
            }
        });
        callbacks.push(function resizeObserverCallback() {
            ro.callback.call(ro.observer, entries, ro.observer);
        });
        ro.activeTargets.splice(0, ro.activeTargets.length);
    });
    for (var _i = 0, callbacks_1 = callbacks; _i < callbacks_1.length; _i++) {
        var callback = callbacks_1[_i];
        callback();
    }
    return shallowestDepth;
};

var gatherActiveObservationsAtDepth = function (depth) {
    resizeObservers.forEach(function processObserver(ro) {
        ro.activeTargets.splice(0, ro.activeTargets.length);
        ro.skippedTargets.splice(0, ro.skippedTargets.length);
        ro.observationTargets.forEach(function processTarget(ot) {
            if (ot.isActive()) {
                if (calculateDepthForNode(ot.target) > depth) {
                    ro.activeTargets.push(ot);
                }
                else {
                    ro.skippedTargets.push(ot);
                }
            }
        });
    });
};

var process$2 = function () {
    var depth = 0;
    gatherActiveObservationsAtDepth(depth);
    while (hasActiveObservations()) {
        depth = broadcastActiveObservations();
        gatherActiveObservationsAtDepth(depth);
    }
    if (hasSkippedObservations()) {
        deliverResizeLoopError();
    }
    return depth > 0;
};

var trigger;
var callbacks = [];
var notify = function () { return callbacks.splice(0).forEach(function (cb) { return cb(); }); };
var queueMicroTask = function (callback) {
    if (!trigger) {
        var toggle_1 = 0;
        var el_1 = document.createTextNode('');
        var config = { characterData: true };
        new MutationObserver(function () { return notify(); }).observe(el_1, config);
        trigger = function () { el_1.textContent = "".concat(toggle_1 ? toggle_1-- : toggle_1++); };
    }
    callbacks.push(callback);
    trigger();
};

var queueResizeObserver = function (cb) {
    queueMicroTask(function ResizeObserver() {
        requestAnimationFrame(cb);
    });
};

var watching = 0;
var isWatching = function () { return !!watching; };
var CATCH_PERIOD = 250;
var observerConfig = { attributes: true, characterData: true, childList: true, subtree: true };
var events$1 = [
    'resize',
    'load',
    'transitionend',
    'animationend',
    'animationstart',
    'animationiteration',
    'keyup',
    'keydown',
    'mouseup',
    'mousedown',
    'mouseover',
    'mouseout',
    'blur',
    'focus'
];
var time = function (timeout) {
    if (timeout === void 0) { timeout = 0; }
    return Date.now() + timeout;
};
var scheduled = false;
var Scheduler = (function () {
    function Scheduler() {
        var _this = this;
        this.stopped = true;
        this.listener = function () { return _this.schedule(); };
    }
    Scheduler.prototype.run = function (timeout) {
        var _this = this;
        if (timeout === void 0) { timeout = CATCH_PERIOD; }
        if (scheduled) {
            return;
        }
        scheduled = true;
        var until = time(timeout);
        queueResizeObserver(function () {
            var elementsHaveResized = false;
            try {
                elementsHaveResized = process$2();
            }
            finally {
                scheduled = false;
                timeout = until - time();
                if (!isWatching()) {
                    return;
                }
                if (elementsHaveResized) {
                    _this.run(1000);
                }
                else if (timeout > 0) {
                    _this.run(timeout);
                }
                else {
                    _this.start();
                }
            }
        });
    };
    Scheduler.prototype.schedule = function () {
        this.stop();
        this.run();
    };
    Scheduler.prototype.observe = function () {
        var _this = this;
        var cb = function () { return _this.observer && _this.observer.observe(document.body, observerConfig); };
        document.body ? cb() : global$1.addEventListener('DOMContentLoaded', cb);
    };
    Scheduler.prototype.start = function () {
        var _this = this;
        if (this.stopped) {
            this.stopped = false;
            this.observer = new MutationObserver(this.listener);
            this.observe();
            events$1.forEach(function (name) { return global$1.addEventListener(name, _this.listener, true); });
        }
    };
    Scheduler.prototype.stop = function () {
        var _this = this;
        if (!this.stopped) {
            this.observer && this.observer.disconnect();
            events$1.forEach(function (name) { return global$1.removeEventListener(name, _this.listener, true); });
            this.stopped = true;
        }
    };
    return Scheduler;
}());
var scheduler = new Scheduler();
var updateCount = function (n) {
    !watching && n > 0 && scheduler.start();
    watching += n;
    !watching && scheduler.stop();
};

var skipNotifyOnElement = function (target) {
    return !isSVG(target)
        && !isReplacedElement(target)
        && getComputedStyle(target).display === 'inline';
};
var ResizeObservation = (function () {
    function ResizeObservation(target, observedBox) {
        this.target = target;
        this.observedBox = observedBox || ResizeObserverBoxOptions.CONTENT_BOX;
        this.lastReportedSize = {
            inlineSize: 0,
            blockSize: 0
        };
    }
    ResizeObservation.prototype.isActive = function () {
        var size = calculateBoxSize(this.target, this.observedBox, true);
        if (skipNotifyOnElement(this.target)) {
            this.lastReportedSize = size;
        }
        if (this.lastReportedSize.inlineSize !== size.inlineSize
            || this.lastReportedSize.blockSize !== size.blockSize) {
            return true;
        }
        return false;
    };
    return ResizeObservation;
}());

var ResizeObserverDetail = (function () {
    function ResizeObserverDetail(resizeObserver, callback) {
        this.activeTargets = [];
        this.skippedTargets = [];
        this.observationTargets = [];
        this.observer = resizeObserver;
        this.callback = callback;
    }
    return ResizeObserverDetail;
}());

var observerMap = new WeakMap();
var getObservationIndex = function (observationTargets, target) {
    for (var i = 0; i < observationTargets.length; i += 1) {
        if (observationTargets[i].target === target) {
            return i;
        }
    }
    return -1;
};
var ResizeObserverController = (function () {
    function ResizeObserverController() {
    }
    ResizeObserverController.connect = function (resizeObserver, callback) {
        var detail = new ResizeObserverDetail(resizeObserver, callback);
        observerMap.set(resizeObserver, detail);
    };
    ResizeObserverController.observe = function (resizeObserver, target, options) {
        var detail = observerMap.get(resizeObserver);
        var firstObservation = detail.observationTargets.length === 0;
        if (getObservationIndex(detail.observationTargets, target) < 0) {
            firstObservation && resizeObservers.push(detail);
            detail.observationTargets.push(new ResizeObservation(target, options && options.box));
            updateCount(1);
            scheduler.schedule();
        }
    };
    ResizeObserverController.unobserve = function (resizeObserver, target) {
        var detail = observerMap.get(resizeObserver);
        var index = getObservationIndex(detail.observationTargets, target);
        var lastObservation = detail.observationTargets.length === 1;
        if (index >= 0) {
            lastObservation && resizeObservers.splice(resizeObservers.indexOf(detail), 1);
            detail.observationTargets.splice(index, 1);
            updateCount(-1);
        }
    };
    ResizeObserverController.disconnect = function (resizeObserver) {
        var _this = this;
        var detail = observerMap.get(resizeObserver);
        detail.observationTargets.slice().forEach(function (ot) { return _this.unobserve(resizeObserver, ot.target); });
        detail.activeTargets.splice(0, detail.activeTargets.length);
    };
    return ResizeObserverController;
}());

var ResizeObserver$1 = (function () {
    function ResizeObserver(callback) {
        if (arguments.length === 0) {
            throw new TypeError("Failed to construct 'ResizeObserver': 1 argument required, but only 0 present.");
        }
        if (typeof callback !== 'function') {
            throw new TypeError("Failed to construct 'ResizeObserver': The callback provided as parameter 1 is not a function.");
        }
        ResizeObserverController.connect(this, callback);
    }
    ResizeObserver.prototype.observe = function (target, options) {
        if (arguments.length === 0) {
            throw new TypeError("Failed to execute 'observe' on 'ResizeObserver': 1 argument required, but only 0 present.");
        }
        if (!isElement$1(target)) {
            throw new TypeError("Failed to execute 'observe' on 'ResizeObserver': parameter 1 is not of type 'Element");
        }
        ResizeObserverController.observe(this, target, options);
    };
    ResizeObserver.prototype.unobserve = function (target) {
        if (arguments.length === 0) {
            throw new TypeError("Failed to execute 'unobserve' on 'ResizeObserver': 1 argument required, but only 0 present.");
        }
        if (!isElement$1(target)) {
            throw new TypeError("Failed to execute 'unobserve' on 'ResizeObserver': parameter 1 is not of type 'Element");
        }
        ResizeObserverController.unobserve(this, target);
    };
    ResizeObserver.prototype.disconnect = function () {
        ResizeObserverController.disconnect(this);
    };
    ResizeObserver.toString = function () {
        return 'function ResizeObserver () { [polyfill code] }';
    };
    return ResizeObserver;
}());

const canvasStyleMapper = {
    "fill": "fillStyle",
    "stroke": "strokeStyle",
    "lineDash": "setLineDash",
    "opacity": "globalAlpha",
    "stroke-width": "lineWidth",
    "stroke-dasharray": "setLineDash",
};
const svgStyleMapper = {
    "fillStyle": "fill",
    "strokeStyle": "stroke",
    "lineDash": "stroke-dasharray",
    "globalAlpha": "opacity",
    "lineWidth": "stroke-width",
    "setLineDash": "stroke-dasharray",
};
const pdfSupportedFontFamily = [
    "Courier",
    "Courier-Bold",
    "Courier-Oblique",
    "Courier-BoldOblique",
    "Helvetica",
    "Helvetica-Bold",
    "Helvetica-Oblique",
    "Helvetica-BoldOblique",
    "Symbol",
    "Times-Roman",
    "Times-Bold",
    "Times-Italic",
    "Times-BoldItalic",
    "ZapfDingbats",
];

let animeIdentifier$1 = 0;
const t2DGeometry$1 = geometry;
const easing$1 = fetchTransitionType;
const queueInstance$4 = queue$1;
const ResizeObserver = window.ResizeObserver || ResizeObserver$1;
function animeId$1() {
    animeIdentifier$1 += 1;
    return animeIdentifier$1;
}
const transitionSetAttr = function transitionSetAttr(self, key, value) {
    return function inner(f) {
        self.attr[key] = value.call(self, f);
    };
};
const transformTransition = function transformTransition(self, subkey, srcVal, value) {
    const exe = [];
    if (typeof value === "function") {
        return function inner(f) {
            self[subkey](value.call(self, f));
        };
    }
    value.forEach((tV, i) => {
        let val;
        if (srcVal) {
            if (srcVal[i] !== undefined) {
                val = srcVal[i];
            } else {
                val = subkey === "scale" ? 1 : 0;
            }
        } else {
            val = subkey === "scale" ? 1 : 0;
        }
        exe.push(t2DGeometry$1.intermediateValue.bind(null, val, tV));
    });
    return function inner(f) {
        self[subkey](exe.map((d) => d(f)));
    };
};
const attrTransition = function attrTransition(self, key, srcVal, tgtVal) {
    return function setAttr_(f) {
        self.attr[key] = t2DGeometry$1.intermediateValue(srcVal, tgtVal, f);
    };
};
const styleTransition = function styleTransition(self, key, sVal, value) {
    let srcValue;
    let destUnit;
    let destValue;
    if (typeof value === "function") {
        return function inner(f) {
            self.style[key] = value.call(self, self.dataObj, f);
        };
    } else {
        srcValue = sVal;
        if (isNaN(value)) {
            if (colorMap$1.isTypeColor(value)) {
                const colorExe = colorMap$1.transition(srcValue, value);
                return function inner(f) {
                    self.style[key] = colorExe(f);
                };
            }
            srcValue = srcValue.match(/(\d+)/g);
            destValue = value.match(/(\d+)/g);
            destUnit = value.match(/\D+$/);
            srcValue = parseInt(srcValue.length > 0 ? srcValue[0] : 0, 10);
            destValue = parseInt(destValue.length > 0 ? destValue[0] : 0, 10);
            destUnit = destUnit.length > 0 ? destUnit[0] : "px";
        } else {
            srcValue = sVal !== undefined ? sVal : 1;
            destValue = value;
            destUnit = 0;
        }
        return function inner(f) {
            self.style[key] = t2DGeometry$1.intermediateValue(srcValue, destValue, f) + destUnit;
        };
    }
};
function resolveStyle(style, styleMapper) {
    let resolvedStyle = {};
    let val = null;
    for(let st in style) {
        val = style[st];
        st = styleMapper[st] || st;
        resolvedStyle[st] = val;
    }
    return resolvedStyle;
}
const animate = function animate(self, fromConfig, targetConfig) {
    const tattr = targetConfig.attr || {};
    let tstyles = targetConfig.style || {};
    const sattr = fromConfig.attr || {};
    let sstyles = fromConfig.style || {};
    const runStack = [];
    const styleMapper = ['WEBGL', 'canvas'].includes(self.nodeType) ? canvasStyleMapper : svgStyleMapper;
    sstyles = resolveStyle(sstyles, styleMapper);
    tstyles = resolveStyle(tstyles, styleMapper);
    if (typeof tattr !== "function") {
        for (const key in tattr) {
            if (key !== "transform") {
                const value = tattr[key];
                if (typeof value === "function") {
                    runStack[runStack.length] = function setAttr_(f) {
                        self.attr[key] = value.call(self, f);
                    };
                } else {
                    if (key === "d") {
                        self.morphTo(targetConfig);
                    } else if (key === "points") {
                        console.log("write points mapper");
                    } else {
                        runStack[runStack.length] = attrTransition(
                            self,
                            key,
                            sattr[key],
                            tattr[key]
                        );
                    }
                }
            } else {
                const value = tattr[key];
                if (typeof value === "function") {
                    runStack[runStack.length] = transitionSetAttr(self, key, value);
                } else {
                    let trans = sattr.transform;
                    if (!trans) {
                        self.setAttr("transform", {});
                        trans = {};
                    }
                    const subTrnsKeys = Object.keys(tattr.transform);
                    for (let j = 0, jLen = subTrnsKeys.length; j < jLen; j += 1) {
                        runStack[runStack.length] = transformTransition(
                            self,
                            subTrnsKeys[j],
                            trans[subTrnsKeys[j]],
                            tattr.transform[subTrnsKeys[j]]
                        );
                    }
                }
            }
        }
    } else {
        runStack[runStack.length] = tattr.bind(self);
    }
    if (typeof tstyles !== "function") {
        for (let style in tstyles) {
            runStack[runStack.length] = styleTransition(
                self,
                style,
                sstyles[style],
                tstyles[style]
            );
        }
    } else {
        runStack[runStack.length] = tstyles.bind(self);
    }
    return {
        run(f) {
            for (let j = 0, len = runStack.length; j < len; j += 1) {
                runStack[j](f);
            }
        },
        target: self,
        duration: targetConfig.duration || 0,
        delay: targetConfig.delay || 0,
        end: targetConfig.end ? targetConfig.end.bind(self, self.dataObj) : null,
        loop: targetConfig.loop || 0,
        direction: targetConfig.direction || "default",
        ease: targetConfig.ease || "default",
    };
};
function performJoin(data, nodes, cond) {
    const dataIds = data.map(cond);
    const res = {
        new: [],
        update: [],
        old: [],
    };
    for (let i = 0; i < nodes.length; i += 1) {
        const index = dataIds.indexOf(cond(nodes[i].dataObj, i));
        if (index !== -1) {
            nodes[i].dataObj = data[index];
            res.update.push(nodes[i]);
            dataIds[index] = null;
        } else {
            res.old.push(nodes[i]);
        }
    }
    res.new = data.filter((d, i) => {
        const index = dataIds.indexOf(cond(d, i));
        if (index !== -1) {
            dataIds[index] = null;
            return true;
        }
        return false;
    });
    return res;
}
const CompositeArray = {};
CompositeArray.push = {
    value: function (data) {
        if (Object.prototype.toString.call(data) !== "[object Array]") {
            data = [data];
        }
        for (let i = 0, len = data.length; i < len; i++) {
            this.data.push(data[i]);
        }
        if (this.config.action.enter) {
            const nodes = {};
            this.selector.split(",").forEach(function (d) {
                nodes[d] = data;
            });
            this.config.action.enter.call(this, nodes);
        }
    },
    enumerable: false,
    configurable: false,
    writable: false,
};
CompositeArray.pop = {
    value: function () {
        const self = this;
        const elData = this.data.pop();
        if (this.config.action.exit) {
            const nodes = {};
            this.selector.split(",").forEach(function (d) {
                nodes[d] = self.fetchEls(d, [elData]);
            });
            this.config.action.exit.call(this, nodes);
        }
    },
    enumerable: false,
    configurable: false,
    writable: false,
};
CompositeArray.remove = {
    value: function (data) {
        if (Object.prototype.toString.call(data) !== "[object Array]") {
            data = [data];
        }
        const self = this;
        for (let i = 0, len = data.length; i < len; i++) {
            if (this.data.indexOf(data[i]) !== -1) {
                this.data.splice(this.data.indexOf(data[i]), 1);
            }
        }
        if (this.config.action.exit) {
            const nodes = {};
            this.selector.split(",").forEach(function (d) {
                nodes[d] = self.fetchEls(d, data);
            });
            this.config.action.exit.call(this, nodes);
        }
    },
    enumerable: false,
    configurable: true,
    writable: false,
};
CompositeArray.update = {
    value: function () {
        const self = this;
        if (this.config.action.update) {
            const nodes = {};
            this.selector.split(",").forEach(function (d) {
                nodes[d] = self.fetchEls(d, self.data);
            });
            this.config.action.update.call(this, nodes);
        }
    },
    enumerable: false,
    configurable: true,
    writable: false,
};
CompositeArray.join = {
    value: function (data) {
        this.data = data;
        dataJoin.call(this, data, this.selector, this.config);
    },
    enumerable: false,
    configurable: true,
    writable: false,
};
var NodePrototype = function () {};
NodePrototype.prototype.getAttr = function (_) {
    return this.attr[_];
};
NodePrototype.prototype.getStyle = function (_) {
    return this.style[_];
};
NodePrototype.prototype.exec = function Cexe(exe) {
    if (typeof exe !== "function") {
        console.error("Wrong Exe type");
    }
    exe.call(this, this.dataObj);
    return this;
};
NodePrototype.prototype.fetchEls = function fetchEls (nodeSelector, dataArray) {
    const nodes = [];
    const wrap = new CollectionPrototype();
    const selectorType = nodeSelector.charAt(0);
    const token = ['.', '#'].includes(selectorType) ? nodeSelector.substring(1) : nodeSelector;
    const isMatch = (node, compareToken) => {
        if (!node) return false;
        const attrValue = selectorType === '.' ? node.attr?.class :
                          selectorType === '#' ? node.attr?.id :
                          node.nodeName;
        const isInDataArray = dataArray ? dataArray.includes(node.dataObj) : true;
        return isInDataArray && attrValue === compareToken;
    };
    for (let i = 0; i < this.children.length; i++) {
        const node = this.children[i];
        if (isMatch(node, token)) {
            nodes.push(node);
        }
    }
    return wrap.wrapper(nodes);
};
NodePrototype.prototype.fetchEl = function fetchEl(nodeSelector, data) {
    let matchedNode = null;
    const selectorType = nodeSelector.charAt(0);
    const token = ['.', '#'].includes(selectorType) ? nodeSelector.substring(1) : nodeSelector;
    const isMatch = (node, compareToken) => {
        if (!node) return false;
        const nodeAttr = node.attr || {};
        const compareAgainst = selectorType === '.' ? nodeAttr['class'] :
                               selectorType === '#' ? nodeAttr['id'] :
                               node.nodeName;
        return (!data || node.dataObj === data) && compareAgainst === compareToken;
    };
     for (let node of this.children) {
        const compareToken = (selectorType === '.' || selectorType === '#') ? token :
                             (nodeSelector === 'group' ? 'g' : nodeSelector);
        if (isMatch(node, compareToken)) {
            matchedNode = node;
            break;
        }
    }
    return matchedNode;
};
function dataJoin(data, selector, config) {
    const self = this;
    const selectors = selector.split(",");
    let { joinOn } = config;
    const joinResult = {
        new: {},
        update: {},
        old: {},
    };
    if (!joinOn) {
        joinOn = function (d, i) {
            return i;
        };
    }
    for (let i = 0, len = selectors.length; i < len; i++) {
        const d = selectors[i];
        const nodes = self.fetchEls(d);
        const join = performJoin(data, nodes.stack, joinOn);
        joinResult.new[d] = join.new;
        joinResult.update[d] = new CollectionPrototype().wrapper(join.update);
        joinResult.old[d] = new CollectionPrototype().wrapper(join.old);
    }
    if (config.action) {
        if (config.action.enter) {
            config.action.enter.call(self, joinResult.new);
        }
        if (config.action.exit) {
            config.action.exit.call(self, joinResult.old);
        }
        if (config.action.update) {
            config.action.update.call(self, joinResult.update);
        }
    }
    CompositeArray.config = {
        value: config,
        enumerable: false,
        configurable: true,
        writable: true,
    };
    CompositeArray.selector = {
        value: selector,
        enumerable: false,
        configurable: true,
        writable: false,
    };
    CompositeArray.data = {
        value: data,
        enumerable: false,
        configurable: true,
        writable: true,
    };
    return Object.create(self, CompositeArray);
}
NodePrototype.prototype.join = dataJoin;
NodePrototype.prototype.data = function (data) {
    if (!data) {
        return this.dataObj;
    } else {
        this.dataObj = data;
    }
    return this;
};
NodePrototype.prototype.interrupt = function () {
    if (this.ctx && this.ctx.type_ === "pdf") return;
    queueInstance$4.interruptNodeAnimations(this);
    return this;
};
NodePrototype.prototype.animateTo = function (toConfig, fromConfig) {
    if (this.ctx && this.ctx.type_ === "pdf") return;
    queueInstance$4.add(
        animeId$1(),
        animate(this, fromConfig || this, toConfig),
        easing$1(toConfig.ease)
    );
    return this;
};
NodePrototype.prototype.animateExe = function (targetConfig, fromConfig) {
    if (this.ctx && this.ctx.type_ === "pdf") return;
    return animate(this, fromConfig || this, targetConfig);
};
function fetchEls(nodeSelector, dataArray) {
    let d;
    const coll = [];
    for (let i = 0; i < this.stack.length; i += 1) {
        d = this.stack[i];
        coll.push(d.fetchEls(nodeSelector, dataArray));
    }
    const collection = new CollectionPrototype();
    collection.wrapper(coll);
    return collection;
}
function join(data, el, arg) {
    let d;
    const coll = [];
    for (let i = 0; i < this.stack.length; i += 1) {
        d = this.stack[i];
        coll.push(d.join(data, el, arg));
    }
    const collection = new CollectionPrototype();
    collection.wrapper(coll);
    return collection;
}
function createEl(config) {
    let d;
    const coll = [];
    for (let i = 0, len = this.stack.length; i < len; i += 1) {
        let cRes = {};
        d = this.stack[i];
        if (typeof config === "function") {
            cRes = config.call(d, d.dataObj, i);
        } else {
            const keys = Object.keys(config);
            for (let j = 0, lenJ = keys.length; j < lenJ; j += 1) {
                const key = keys[j];
                if (typeof config[key] !== "object") {
                    cRes[key] = config[key];
                } else {
                    cRes[key] = JSON.parse(JSON.stringify(config[key]));
                }
            }
        }
        coll.push(d.createEl(cRes));
    }
    const collection = new CollectionPrototype();
    collection.wrapper(coll);
    return collection;
}
function createEls(data, config) {
    let d;
    const coll = [];
    let res = data;
    for (let i = 0, len = this.stack.length; i < len; i += 1) {
        let cRes = {};
        d = this.stack[i];
        if (typeof data === "function") {
            res = data.call(d, d.dataObj, i);
        }
        if (typeof config === "function") {
            cRes = config.call(d, d.dataObj, i);
        } else {
            const keys = Object.keys(config);
            for (let j = 0, lenJ = keys.length; j < lenJ; j += 1) {
                const key = keys[j];
                cRes[key] = config[key];
            }
        }
        coll.push(d.createEls(res, cRes));
    }
    const collection = new CollectionPrototype();
    collection.wrapper(coll);
    return collection;
}
function forEach$2(callBck) {
    for (let i = 0, len = this.stack.length; i < len; i += 1) {
        callBck.call(this.stack[i], this.stack[i].dataObj, i);
    }
    return this;
}
function setAttribute(key, value) {
    const setAttrHelper = (element, attrKey, attrValue, index) => {
        const resolvedValue = typeof attrValue === 'function' ? attrValue.call(element, element.dataObj, index) : attrValue;
        element.setAttr(attrKey, resolvedValue);
    };
    for (let i = 0, len = this.stack.length; i < len; i += 1) {
        let element = this.stack[i];
        if (arguments.length > 1) {
            setAttrHelper(element, key, value, i);
        } else if (typeof key === 'function') {
            element.setAttr(key.call(element, element.dataObj, i));
        } else if (typeof key === 'object' && key !== null) {
            Object.entries(key).forEach(([attrKey, attrValue]) => {
                setAttrHelper(element, attrKey, attrValue, i);
            });
        }
    }
    return this;
}
function setStyle(key, value) {
    const setStyleHelper = (element, styleKey, styleValue, index) => {
        const resolvedValue = typeof styleValue === 'function' ? styleValue.call(element, element.dataObj, index) : styleValue;
        element.setStyle(styleKey, resolvedValue);
    };
    for (let i = 0, len = this.stack.length; i < len; i += 1) {
        let element = this.stack[i];
        if (arguments.length > 1) {
          setStyleHelper(element, key, value, i);
        } else if (typeof key === 'function') {
          element.setStyle(key.call(element, element.dataObj, i));
        } else if (typeof key === 'object') {
          Object.entries(key).forEach(([styleKey, styleValue]) => {
            setStyleHelper(element, styleKey, styleValue, i);
          });
        }
    }
    return this;
}
function translate(value) {
    let d;
    for (let i = 0, len = this.stack.length; i < len; i += 1) {
        d = this.stack[i];
        if (typeof value === "function") {
            d.translate(value.call(d, d.dataObj, i));
        } else {
            d.translate(value);
        }
    }
    return this;
}
function rotate(value) {
    let d;
    for (let i = 0, len = this.stack.length; i < len; i += 1) {
        d = this.stack[i];
        if (typeof value === "function") {
            d.rotate(value.call(d, d.dataObj, i));
        } else {
            d.rotate(value);
        }
    }
    return this;
}
function scale(value) {
    let d;
    for (let i = 0, len = this.stack.length; i < len; i += 1) {
        d = this.stack[i];
        if (typeof value === "function") {
            d.scale(value.call(d, d.dataObj, i));
        } else {
            d.scale(value);
        }
    }
    return this;
}
function exec(value) {
    let d;
    if (typeof value !== "function") {
        return;
    }
    for (let i = 0, len = this.stack.length; i < len; i += 1) {
        d = this.stack[i];
        value.call(d, d.dataObj, i);
    }
    return this;
}
function on(eventType, hndlr) {
    for (let i = 0, len = this.stack.length; i < len; i += 1) {
        this.stack[i].on(eventType, hndlr);
    }
    return this;
}
function remove() {
    for (let i = 0, len = this.stack.length; i < len; i += 1) {
        this.stack[i].remove();
    }
    return this;
}
function interrupt() {
    for (let i = 0, len = this.stack.length; i < len; i += 1) {
        this.stack[i].interrupt();
    }
    return this;
}
function resolveObject(config, node, i) {
    const obj = {};
    let key;
    for (key in config) {
        if (key !== "end") {
            if (typeof config[key] === "function") {
                obj[key] = config[key].call(node, node.dataObj, i);
            } else {
                obj[key] = config[key];
            }
        }
    }
    return obj;
}
const animateArrayTo = function animateArrayTo(config) {
    for (let i = 0; i < this.stack.length; i += 1) {
        let node = this.stack[i];
        let newConfig = resolveObject(config, node, i);
        if (config.attr && typeof config.attr !== "function") {
            newConfig.attr = resolveObject(config.attr, node, i);
        }
        if (config.style && typeof config.style !== "function") {
            newConfig.style = resolveObject(config.style, node, i);
        }
        if (config.end) newConfig.end = config.end;
        if (config.ease) newConfig.ease = config.ease;
        node.animateTo(newConfig);
    }
    return this;
};
const animateArrayExe = function animateArrayExe(config) {
    const exeArray = [];
    for (let i = 0; i < this.stack.length; i += 1) {
        let node = this.stack[i];
        let newConfig = resolveObject(config, node, i);
        if (config.attr && typeof config.attr !== "function") {
            newConfig.attr = resolveObject(config.attr, node, i);
        }
        if (config.style && typeof config.style !== "function") {
            newConfig.style = resolveObject(config.style, node, i);
        }
        if (config.end) newConfig.end = config.end;
        if (config.ease) newConfig.ease = config.ease;
        exeArray.push(node.animateExe(newConfig));
    }
    return exeArray;
};
const animatePathArrayTo = function animatePathArrayTo(config) {
    let node;
    const keys = Object.keys(config);
    for (let i = 0, len = this.stack.length; i < len; i += 1) {
        node = this.stack[i];
        const conf = {};
        for (let j = 0; j < keys.length; j++) {
            let value = config[keys[j]];
            if (typeof value === "function") {
                value = value.call(node, node.dataObj, i);
            }
            if (keys[j] === 'attr' && typeof config.attr !== "function") {
                value = resolveObject(config.attr, node, i);
            }
            if (keys[j] === 'style' && typeof config.style !== "function") {
                value = resolveObject(config.style, node, i);
            }
            conf[keys[j]] = value;
        }
        node.animatePathTo(conf);
    }
    return this;
};
const textArray = function textArray(value) {
    let node;
    if (typeof value !== "function") {
        for (let i = 0; i < this.stack.length; i += 1) {
            node = this.stack[i];
            node.text(value);
        }
    } else {
        for (let i = 0; i < this.stack.length; i += 1) {
            node = this.stack[i];
            node.text(value.call(node, node.dataObj, i));
        }
    }
    return this;
};
function CollectionPrototype(contextInfo, data, config, vDomIndex) {
    if (!data) {
        data = [];
    }
    let transform;
    let key;
    const attrKeys = config ? (config.attr ? Object.keys(config.attr) : []) : [];
    const styleKeys = config ? (config.style ? Object.keys(config.style) : []) : [];
    const bbox = config ? (config.bbox !== undefined ? config.bbox : true) : true;
    this.stack = data.map((d, i) => {
        const node = this.createNode(
            contextInfo.ctx,
            {
                el: config.el,
                bbox: bbox,
            },
            vDomIndex
        );
        for (let j = 0, len = styleKeys.length; j < len; j += 1) {
            key = styleKeys[j];
            if (typeof config.style[key] === "function") {
                const resValue = config.style[key].call(node, d, i);
                node.style[key] = resValue;
            } else {
                node.style[key] = config.style[key];
            }
        }
        for (let j = 0, len = attrKeys.length; j < len; j += 1) {
            key = attrKeys[j];
            if (key !== "transform") {
                if (typeof config.attr[key] === "function") {
                    const resValue = config.attr[key].call(node, d, i);
                    node.attr[key] = resValue;
                } else {
                    node.attr[key] = config.attr[key];
                }
            } else {
                if (typeof config.attr.transform === "function") {
                    transform = config.attr[key].call(node, d, i);
                } else {
                    ({ transform } = config.attr);
                }
                for (const trns in transform) {
                    node[trns](transform[trns]);
                }
            }
        }
        node.dataObj = d;
        return node;
    });
    return this;
}
CollectionPrototype.prototype = {
    createEls,
    createEl,
    forEach: forEach$2,
    setAttr: setAttribute,
    fetchEls,
    setStyle,
    translate,
    rotate,
    scale,
    exec,
    animateTo: animateArrayTo,
    animateExe: animateArrayExe,
    animatePathTo: animatePathArrayTo,
    remove,
    interrupt,
    text: textArray,
    join,
    on,
};
CollectionPrototype.prototype.createNode = function () {};
CollectionPrototype.prototype.wrapper = function wrapper(nodes) {
    const self = this;
    if (nodes) {
        for (let i = 0, len = nodes.length; i < len; i++) {
            const node = nodes[i];
            self.stack.push(node);
        }
    }
    return this;
};
const layerResizeHandler = function (entries) {
    for (const key in entries) {
        const entry = entries[key];
        const cr = entry.contentRect;
        if (entry.target.resizeHandler) {
            entry.target.resizeHandler.forEach(function (exec) {
                exec(cr);
            });
        }
    }
};
function layerResizeBind(layer, handler) {
    if (!layer.ro) {
        layer.ro = new ResizeObserver(layerResizeHandler);
        layer.ro.observe(layer.container);
    }
    if (!layer.container.resizeHandler) {
        layer.container.resizeHandler = [];
    }
    layer.container.resizeHandler.push(handler);
}
function layerResizeUnBind(layer, handler) {
    if (!layer.container.resizeHandler) {
        return;
    }
    const execIndex = layer.container.resizeHandler.indexOf(handler);
    if (execIndex !== -1) {
        layer.container.resizeHandler.splice(execIndex, 1);
    }
    if (layer.container.resizeHandler.length === 0 && layer.ro) {
        layer.ro.disconnect();
    }
}
function prepArrayProxy(arr, context, BBoxUpdate) {
    const handlr = {
        get(target, prop) {
            if (prop === 'push') {
              return (...args) => {
                queueInstance$4.vDomChanged(context.vDomIndex);
                if (BBoxUpdate) {
                    context.BBoxUpdate = true;
                }
                return target.push(...args);
              };
            } else if (prop === 'pop') {
              return (...args) => {
                queueInstance$4.vDomChanged(context.vDomIndex);
                if (BBoxUpdate) {
                    context.BBoxUpdate = true;
                }
                return target.pop(...args);
              };
            } else {
              return target[prop];
            }
        },
        set(obj, prop, value) {
            obj[prop] = value;
            queueInstance$4.vDomChanged(context.vDomIndex);
            if (BBoxUpdate) {
                context.BBoxUpdate = true;
            }
            return true;
        },
        deleteProperty() {
            queueInstance$4.vDomChanged(context.vDomIndex);
            if (BBoxUpdate) {
                context.BBoxUpdate = true;
            }
            return Reflect.deleteProperty(...arguments);
        }
    };
    return new Proxy(arr || [], handlr);
}

const queueInstance$3 = queue$1;
let Id$2 = 0;
function domId$2() {
    Id$2 += 1;
    return Id$2;
}
const SVGCollection = function () {
    CollectionPrototype.apply(this, arguments);
};
SVGCollection.prototype = new CollectionPrototype();
SVGCollection.prototype.constructor = SVGCollection;
SVGCollection.prototype.createNode = function (ctx, config, vDomIndex) {
    return createDomElement(config, vDomIndex);
};
function SVGMasking(self, config = {}) {
    this.pDom = self;
    const maskId = config.id ? config.id : "mask-" + Math.ceil(Math.random() * 1000);
    this.id = config.id || maskId;
    config.id = maskId;
    if (!this.defs) {
        this.defs = self.createEl({
            el: "defs",
        });
    }
    this.mask = this.defs.createEl({
        el: "mask",
        attr: config,
        style: {},
    });
}
SVGMasking.prototype.exe = function exe() {
    return `url(#${this.id})`;
};
function SVGClipping(self, config = {}) {
    this.pDom = self;
    const clipId = config.id ? config.id : "clip-" + Math.ceil(Math.random() * 1000);
    this.id = config.id || clipId;
    config.id = clipId;
    if (!this.defs) {
        this.defs = self.createEl({
            el: "defs",
        });
    }
    this.clip = this.defs.createEl({
        el: "clipPath",
        attr: config,
        style: {},
    });
}
SVGClipping.prototype.exe = function exe() {
    return `url(#${this.id})`;
};
function SVGPattern(self, config = {}) {
    this.pDom = self;
    const patternId = config.id ? config.id : "pattern-" + Math.ceil(Math.random() * 1000);
    this.id = config.id || patternId;
    config.id = patternId;
    if (!this.defs) {
        this.defs = self.createEl({
            el: "defs",
        });
    }
    this.pattern = this.defs.createEl({
        el: "pattern",
        attr: config,
        style: {},
    });
}
SVGPattern.prototype.exe = function exe() {
    return `url(#${this.id})`;
};
function transformToString(trns) {
    let cmd = "";
    for (const trnX in trns) {
        if (trnX === "rotate") {
            cmd += `${trnX}(${
                trns.rotate[0] + " " + (trns.rotate[1] || 0) + " " + (trns.rotate[2] || 0)
            }) `;
        } else if (trnX === "skew") {
            if (trns.skew[0]) {
                cmd += `skewX(${trns[trnX][0]}) `;
            }
            if (trns.skew[1]) {
                cmd += `skewY(${trns[trnX][1]}) `;
            }
        } else {
            if (trns[trnX].length > 1) {
                cmd += `${trnX}(${trns[trnX].join(" ")}) `;
            } else {
                cmd += `${trnX}(${trns[trnX]}) `;
            }
        }
    }
    return cmd;
}
function prepObjProxySvg(type, attr, context) {
    const handlr = {
        set(obj, prop, value) {
            if (value !== null) {
                if (prop === 'points') {
                    value = pointsToString(value);
                }
                if (type === 'attr') {
                    if (prop === 'transform') {
                        value = prepObjProxySvg("transform", value, context);
                    }
                    context.changedAttribute[prop] = value;
                    context.attrChanged = true;
                } else if (type === 'style') {
                    if (colorMap$1.RGBAInstanceCheck(value)) {
                        value = value.rgba;
                    }
                    context.changedStyles[prop] = value;
                    context.styleChanged = true;
                } else if (type === 'transform') {
                    if (prop === 'translate' || prop === 'scale' || prop === 'skew') {
                        value = Array.isArray(value) && value.length > 0 ? [value[0], value[1] ? value[1] : value[0]] : [0, 0];
                    } else if (prop === 'rotate') {
                        value = Array.isArray(value) && value.length > 0 ? [value[0] || 0, value[1] || 0, value[2] || 0] : [0, 0, 0];
                    }
                    context.changedStyles['transform'] = obj;
                    context.attrChanged = true;
                }
                obj[prop] = value;
                queueInstance$3.vDomChanged(context.vDomIndex);
            } else {
                delete obj[prop];
            }
            return true;
        },
        deleteProperty(obj, prop) {
            if (prop in obj) {
                delete obj[prop];
                queueInstance$3.vDomChanged(context.vDomIndex);
            }
            return true;
        },
    };
    return new Proxy(Object.assign({}, attr), handlr);
}
function DomGradients(config, type, pDom) {
    this.config = config;
    this.type = type || "linear";
    this.pDom = pDom;
    this.defs = this.pDom.createEl({
        el: "defs",
    });
}
DomGradients.prototype.exe = function exe() {
    return `url(#${this.config.id})`;
};
DomGradients.prototype.linearGradient = function linearGradient() {
    const self = this;
    this.linearEl = this.defs.join([1], "linearGradient", {
        action: {
            enter(data) {
                const gredEl = this.createEls(data.linearGradient, {
                    el: "linearGradient",
                }).setAttr({
                    id: self.config.id,
                    x1: `${self.config.x1}%`,
                    y1: `${self.config.y1}%`,
                    x2: `${self.config.x2}%`,
                    y2: `${self.config.y2}%`,
                    spreadMethod: self.config.spreadMethod || "pad",
                    gradientUnits: self.config.gradientUnits || "objectBoundingBox",
                });
                if (self.config.gradientTransform) {
                    gredEl.setAttr(
                        "gradientTransform",
                        transformToString(self.config.gradientTransform)
                    );
                }
            },
            exit(oldNodes) {
                oldNodes.linearGradient.remove();
            },
            update(nodes) {
                nodes.linearGradient.setAttr({
                    id: self.config.id,
                    x1: `${self.config.x1}%`,
                    y1: `${self.config.y1}%`,
                    x2: `${self.config.x2}%`,
                    y2: `${self.config.y2}%`,
                    spreadMethod: self.config.spreadMethod || "pad",
                    gradientUnits: self.config.gradientUnits || "objectBoundingBox",
                });
                if (self.config.gradientTransform) {
                    nodes.linearGradient.setAttr(
                        "gradientTransform",
                        transformToString(self.config.gradientTransform)
                    );
                }
            },
        },
    });
    this.linearEl = this.linearEl.fetchEl("linearGradient");
    this.linearEl.fetchEls("stop").remove();
    this.linearEl.createEls(this.config.colorStops, {
        el: "stop",
        attr: {
            "offset"(d) {
                return `${d.offset}%`;
            },
            "stop-color": function stopColor(d) {
                return d.color;
            },
        },
    });
    return this;
};
DomGradients.prototype.radialGradient = function radialGradient() {
    const self = this;
    const { innerCircle = {}, outerCircle = {} } = this.config;
    if (!this.defs) {
        this.defs = this.pDom.createEl({
            el: "defs",
        });
    }
    this.radialEl = this.defs.join([1], "radialGradient", {
        action: {
            enter(data) {
                const gredEl = this.createEls(data.radialGradient, {
                    el: "radialGradient",
                }).setAttr({
                    id: self.config.id,
                    cx: `${innerCircle.x}%`,
                    cy: `${innerCircle.y}%`,
                    r: `${innerCircle.r}%`,
                    fx: `${outerCircle.x}%`,
                    fy: `${outerCircle.y}%`,
                    spreadMethod: self.config.spreadMethod || "pad",
                    gradientUnits: self.config.gradientUnits || "objectBoundingBox",
                });
                if (self.config.gradientTransform) {
                    gredEl.setAttr(
                        "gradientTransform",
                        transformToString(self.config.gradientTransform)
                    );
                }
            },
            exit(oldNodes) {
                oldNodes.radialGradient.remove();
            },
            update(nodes) {
                nodes.radialGradient.setAttr({
                    id: self.config.id,
                    cx: `${innerCircle.x}%`,
                    cy: `${innerCircle.y}%`,
                    r: `${innerCircle.r}%`,
                    fx: `${outerCircle.x}%`,
                    fy: `${outerCircle.y}%`,
                    spreadMethod: self.config.spreadMethod || "pad",
                    gradientUnits: self.config.gradientUnits || "objectBoundingBox",
                });
                if (self.config.gradientTransform) {
                    nodes.radialGradient.setAttr(
                        "gradientTransform",
                        transformToString(self.config.gradientTransform)
                    );
                }
            },
        },
    });
    this.radialEl = this.radialEl.fetchEl("radialGradient");
    this.radialEl.fetchEls("stop").remove();
    this.radialEl.createEls(this.config.colorStops, {
        el: "stop",
        attr: {
            "offset"(d) {
                return `${d.offset}%`;
            },
            "stop-color": function stopColor(d) {
                return d.color;
            },
        },
    });
    return this;
};
DomGradients.prototype.colorStops = function colorStops(colorSts) {
    if (Object.prototype.toString.call(colorSts) !== "[object Array]") {
        return false;
    }
    this.config.colorStops = colorSts;
    if (this.type === "linear") {
        return this.linearGradient();
    } else if (this.type === "radial") {
        return this.radialGradient();
    }
    return false;
};
const nameSpace = {
    svg: "http://www.w3.org/2000/svg",
    xlink: "http://www.w3.org/1999/xlink",
    xhtml: "http://www.w3.org/1999/xhtml",
};
const buildDom = function buildSVGElement(ele) {
    return document.createElementNS(nameSpace.svg, ele);
};
const buildNamespaceDom = function buildNamespaceDom(ns, ele) {
    return document.createElementNS(nameSpace[ns], ele);
};
function createDomElement(obj, vDomIndex) {
    let dom = null;
    const ind = obj.el.indexOf(":");
    if (ind >= 0) {
        dom = buildNamespaceDom(obj.el.slice(0, ind), obj.el.slice(ind + 1));
    } else {
        switch (obj.el) {
            case "group":
                dom = buildDom("g");
                break;
            default:
                dom = buildDom(obj.el);
                break;
        }
    }
    const node = new DomExe(dom, obj, domId$2(), vDomIndex);
    if (obj.dataObj) {
        dom.dataObj = obj.dataObj;
    }
    return node;
}
const DomExe = function DomExe(dom, config, id, vDomIndex) {
    this.dom = dom;
    this.nodeName = dom.nodeName;
    this.changedAttribute = {};
    this.changedStyles = {};
    this.id = id;
    this.nodeType = "svg";
    this.dom.nodeId = id;
    this.children = [];
    this.vDomIndex = vDomIndex;
    this.events = {};
    this.style = prepObjProxySvg('style', {}, this);
    this.attr = prepObjProxySvg('attr',{}, this);
    if (config.style) {
        this.setStyle(config.style);
    }
    if (config.attr) {
        this.setAttr(config.attr);
    }
};
DomExe.prototype = new NodePrototype();
DomExe.prototype.node = function node() {
    this.execute();
    return this.dom;
};
function updateAttrsToDom(self, key) {
    const ind = key.indexOf(":");
    const value = self.changedAttribute[key];
    if (ind >= 0) {
        self.dom.setAttributeNS(nameSpace[key.slice(0, ind)], key.slice(ind + 1), value);
    } else {
        if (key === "text") {
            self.dom.textContent = value;
        } else if (key === "d") {
            if (CheckPathType(value)) {
                self.dom.setAttribute(key, value.fetchPathString());
            } else {
                self.dom.setAttribute(key, value);
            }
        } else {
            if (key === "onerror" || key === "onload") {
                self.dom[key] = function fun(e) {
                    value.call(self, e);
                };
            } else {
                self.dom.setAttribute(key, value);
            }
        }
    }
}
function updateTransAttrsToDom(self) {
    self.dom.setAttribute("transform", transformToString(self.attr.transform));
}
DomExe.prototype.transFormAttributes = function transFormAttributes() {
    const self = this;
    for (const key in self.changedAttribute) {
        if (key !== "transform") {
            updateAttrsToDom(self, key);
        } else {
            updateTransAttrsToDom(self);
        }
    }
    this.changedAttribute = {};
};
DomExe.prototype.scale = function DMscale(XY) {
    if (!this.attr.transform) {
        this.attr.transform = prepObjProxySvg('transform', {}, this);
    }
    this.attr.transform.scale = XY;
    return this;
};
DomExe.prototype.skew = function DMskewX(XY) {
    if (!this.attr.transform) {
        this.attr.transform = prepObjProxySvg('transform', {}, this);
    }
    this.attr.transform.skew = XY;
    return this;
};
DomExe.prototype.translate = function DMtranslate(XY) {
    if (!this.attr.transform) {
        this.attr.transform = prepObjProxySvg('transform', {}, this);
    }
    this.attr.transform.translate = XY;
    return this;
};
DomExe.prototype.rotate = function DMrotate(angleXY) {
    if (!this.attr.transform) {
        this.attr.transform = prepObjProxySvg('transform', {}, this);
    }
    this.attr.transform.rotate = angleXY;
    return this;
};
DomExe.prototype.setStyle = function DMsetStyle(attr, value) {
    if (arguments.length === 2) {
        this.style[attr] = value;
    } else if (arguments.length === 1 && typeof attr === "object") {
        for (const key in attr) {
            this.style[key] = attr[key];
        }
    }
    return this;
};
function pointsToString(points) {
    if (Object.prototype.toString.call(points) !== "[object Array]") {
        return;
    }
    return points.reduce(function (p, c) {
        return p + c.x + "," + c.y + " ";
    }, "");
}
DomExe.prototype.setAttr = function DMsetAttr(attr, value) {
    if (arguments.length === 2) {
        this.attr[attr] = value;
    } else if (arguments.length === 1 && typeof attr === "object") {
        for (const key in attr) {
            this.attr[key] = attr[key];
        }
    }
    return this;
};
DomExe.prototype.execute = function DMexecute() {
    if (!this.styleChanged && !this.attrChanged) {
        for (let i = 0, len = this.children.length; i < len; i += 1) {
            this.children[i].execute();
        }
        return;
    }
    this.transFormAttributes();
    for (let i = 0, len = this.children.length; i < len; i += 1) {
        this.children[i].execute();
    }
    for (const style in this.changedStyles) {
        if (typeof this.changedStyles[style] === "object") {
            if (
                this.changedStyles[style] instanceof DomGradients ||
                this.changedStyles[style] instanceof SVGPattern ||
                this.changedStyles[style] instanceof SVGClipping ||
                this.changedStyles[style] instanceof SVGMasking
            ) {
                this.changedStyles[style] = this.changedStyles[style].exe();
            }
        }
        this.dom.style.setProperty(style, this.changedStyles[style], "");
    }
    this.changedStyles = {};
};
DomExe.prototype.child = function DMchild(nodes) {
    const parent = this.dom;
    const self = this;
    if (nodes instanceof SVGCollection) {
        var fragment = document.createDocumentFragment();
        for (let i = 0, len = nodes.stack.length; i < len; i++) {
            fragment.appendChild(nodes.stack[i].dom);
            nodes.stack[i].parentNode = self;
            nodes.stack[i].vDomIndex = self.vDomIndex;
            this.children[this.children.length] = nodes.stack[i];
        }
        parent.appendChild(fragment);
    } else if (nodes instanceof DomExe) {
        parent.appendChild(nodes.dom);
        nodes.parentNode = self;
        this.children.push(nodes);
    } else {
        console.log("wrong node type");
    }
    return this;
};
DomExe.prototype.animatePathTo = AnimatePathTo;
DomExe.prototype.morphTo = MorphTo;
DomExe.prototype.createRadialGradient = function DMcreateRadialGradient(config) {
    const gradientIns = new DomGradients(config, "radial", this);
    gradientIns.radialGradient();
    return gradientIns;
};
DomExe.prototype.createLinearGradient = function DMcreateLinearGradient(config) {
    const gradientIns = new DomGradients(config, "linear", this);
    gradientIns.linearGradient();
    return gradientIns;
};
DomExe.prototype.on = function DMon(eventType, hndlr) {
    const self = this;
    if (self.events[eventType] && eventType !== "drag" && eventType !== "zoom") {
        self.dom.removeEventListener(eventType, self.events[eventType]);
        delete self.events[eventType];
    }
    if (eventType === "drag") {
        delete self.dom.drag_;
    }
    if (eventType === "zoom") {
        self.dom.removeEventListener("wheel", self.events[eventType]);
        delete self.dom.drag_;
    }
    if (!hndlr) {
        return;
    }
    if (eventType === "drag") {
        self.dom.drag_ = function (event, eventType) {
            hndlr.execute(self, event, eventType);
        };
    } else if (eventType === "zoom") {
        let wheelCounter = 0;
        let deltaWheel = 0;
        let wheelHndl;
        self.events[eventType] = function (event) {
            if (hndlr.disableWheel) {
                return;
            }
            hndlr.zoomExecute(self, event);
            wheelCounter += 1;
            if (wheelHndl) {
                clearTimeout(wheelHndl);
                wheelHndl = null;
                deltaWheel = wheelCounter;
            }
            wheelHndl = setTimeout(function () {
                if (deltaWheel !== wheelCounter) {
                    deltaWheel = wheelCounter;
                } else {
                    wheelHndl = null;
                    hndlr.onZoomEnd(self, event);
                    wheelCounter = 0;
                }
            }, 100);
        };
        self.dom.addEventListener("wheel", self.events[eventType]);
        self.dom.drag_ = function (event, eventType, eventsInstance) {
            if (hndlr.panFlag) {
                hndlr.panExecute(self, event, eventType, eventsInstance);
            }
        };
    } else {
        const hnd = hndlr.bind(self);
        self.events[eventType] = function (event) {
            hnd(event);
        };
        self.dom.addEventListener(eventType, self.events[eventType]);
    }
    return this;
};
DomExe.prototype.html = function DMhtml(value) {
    if (!arguments.length) {
        return this.dom.innerHTML;
    }
    this.dom.innerHTML(value);
    return this;
};
DomExe.prototype.text = function DMtext(value) {
    if (!arguments.length) {
        return this.attr.text;
    }
    this.attr.text = value;
    this.changedAttribute.text = value;
    return this;
};
DomExe.prototype.createEls = function DMcreateEls(data, config) {
    const e = new SVGCollection(
        {
            type: "SVG",
        },
        data,
        config,
        this.vDomIndex
    );
    this.child(e);
    queueInstance$3.vDomChanged(this.vDomIndex);
    return e;
};
DomExe.prototype.createEl = function DMcreateEl(config) {
    const e = createDomElement(config, this.vDomIndex);
    this.child(e);
    queueInstance$3.vDomChanged(this.vDomIndex);
    return e;
};
DomExe.prototype.remove = function DMremove() {
    if (this.parentNode) {
        this.parentNode.removeChild(this);
    }
};
DomExe.prototype.removeChild = function DMremoveChild(obj) {
    const { children } = this;
    const index = children.indexOf(obj);
    if (index !== -1) {
        const removedNode = children[index];
        const dom = children.splice(index, 1)[0].dom;
        if (!this.dom.contains(dom)) {
            return;
        }
        this.dom.removeChild(dom);
        markForDeletion$2(removedNode);
    }
};
function markForDeletion$2(removedNode) {
    removedNode.deleted = true;
    if (!removedNode.deleted) {
        for(let i = 0; i < removedNode.children.length; i++) {
            markForDeletion$2(removedNode[i]);
        }
    }
}
function svgLayer(container, layerSettings = {}) {
    const res = typeof container === 'string' ? document.querySelector(container) : container instanceof HTMLElement ? container : null;
    let height = res?.clientHeight || 0;
    let width = res?.clientWidth || 0;
    const { autoUpdate = true, enableResize = true } = layerSettings;
    const layer = document.createElementNS(nameSpace.svg, "svg");
    layer.setAttribute("height", height);
    layer.setAttribute("width", width);
    let vDomInstance;
    let vDomIndex = 999999;
    let cHeight;
    let cWidth;
    let resizeCall;
    let onChangeExe;
    if (res) {
        res.appendChild(layer);
        vDomInstance = new VDom();
        if (autoUpdate) {
            vDomIndex = queueInstance$3.addVdom(vDomInstance);
        }
    }
    const root = new DomExe(layer, {}, domId$2(), vDomIndex);
    root.container = res;
    root.type = "SVG";
    root.width = width;
    root.height = height;
    root.domEl = layer;
    const eventsInstance = new Events(root);
    if (vDomInstance) {
        vDomInstance.rootNode(root);
    }
    root.setLayerId = function (id) {
        layer.setAttribute("id", id);
    };
    const resize = function (cr) {
        if (
            (container instanceof HTMLElement && !document.body.contains(container)) ||
            (container instanceof String && !document.querySelector(container))
        ) {
            layerResizeUnBind(root);
            root.destroy();
            return;
        }
        height = cHeight || cr.height;
        width = cWidth || cr.width;
        layer.setAttribute("height", height);
        layer.setAttribute("width", width);
        root.width = width;
        root.height = height;
        if (resizeCall) {
            resizeCall();
        }
        root.update();
    };
    root.onResize = function (exec) {
        resizeCall = exec;
    };
    root.onChange = function (exec) {
        onChangeExe = exec;
    };
    root.invokeOnChange = function () {
        if (onChangeExe) {
            onChangeExe();
        }
    };
    root.setSize = function (width, height) {
        this.dom.setAttribute("height", height);
        this.dom.setAttribute("width", width);
        this.width = width;
        this.height = height;
        cHeight = height;
        cWidth = width;
    };
    root.update = function () {
        this.execute();
    };
    root.setViewBox = function (x, y, height, width) {
        this.dom.setAttribute("viewBox", x + "," + y + "," + width + "," + height);
    };
    root.destroy = function () {
        const res = document.body.contains(this.container);
        if (res && this.container.contains(this.domEl)) {
            this.container.removeChild(this.domEl);
        }
        queueInstance$3.removeVdom(vDomIndex);
        layerResizeUnBind(root, resize);
    };
    root.createPattern = function (config) {
        return new SVGPattern(this, config);
    };
    root.createClip = function (config) {
        return new SVGClipping(this, config);
    };
    root.createMask = function (config) {
        return new SVGMasking(this, config);
    };
    let dragNode = null;
    root.dom.addEventListener("pointerdown", (e) => {
        eventsInstance.addPointer(e);
        if (e.target.drag_) {
            e.target.drag_(e, "pointerdown", eventsInstance);
            dragNode = e.target;
        }
    });
    root.dom.addEventListener("pointerup", (e) => {
        if (dragNode) {
            dragNode.drag_(e, "pointerup", eventsInstance);
            dragNode = null;
        }
        eventsInstance.removePointer(e);
    });
    root.dom.addEventListener("pointermove", (e) => {
        e.preventDefault();
        if (dragNode) {
            dragNode.drag_(e, "pointermove", eventsInstance);
        }
    });
    queueInstance$3.execute();
    if (enableResize) {
        layerResizeBind(root, resize);
    }
    return root;
}

function shaders(el) {
    let res;
    switch (el) {
        case "point":
            res = {
                vertexShader: `#version 300 es
                    precision highp float;
                    in vec2 a_position;
                    in vec4 a_color;
                    in float a_size;
                    in mat3 a_transformMatrix;
                    out vec4 v_color;
                    void main() {
                      gl_Position = vec4(a_transformMatrix * vec3(a_position, 1), 1);
                      gl_PointSize = a_size;
                      v_color = a_color;
                    }
                    `,
                fragmentShader: `#version 300 es
                    precision mediump float;
                    in vec4 v_color;
                    out vec4 fragColor;
                    void main() {
                        fragColor = v_color;
                    }
                    `,
            };
            break;
        case "circle":
            res = {
                vertexShader: `#version 300 es
                    precision highp float;
                    in vec2 a_position;
                    in vec4 a_color;
                    in float a_radius;
                    in mat3 a_transformMatrix;
                    out vec4 v_color;

                    void main() {
                      gl_Position = vec4(a_transformMatrix * vec3(a_position, 1), 1);
                      gl_PointSize = a_radius; // * a_transform.z * u_transform.z;
                      v_color = a_color;
                    }
                    `,
                fragmentShader: `#version 300 es
                    precision mediump float;
                    in vec4 v_color;
                    out vec4 fragColor;
                    void main() {
                      float r = 0.0, delta = 0.0, alpha = 1.0;
                      vec2 cxy = 2.0 * gl_PointCoord - 1.0;
                      r = dot(cxy, cxy);
                      if(r > 1.0) {
                        discard;
                      }
                      delta = 0.09;
                      alpha = 1.0 - smoothstep(1.0 - delta, 1.0 + delta, r);
                      fragColor = v_color * alpha;
                    }
                    `,
            };
            break;
        case "image":
            res = {
                vertexShader: `#version 300 es
                    precision highp float;
                    in vec2 a_position;
                    in vec2 a_texCoord;
                    uniform mat3 u_transformMatrix;
                    out vec2 v_texCoord;

                    void main() {
                      gl_Position = vec4(u_transformMatrix * vec3(a_position, 1), 1);
                      v_texCoord = a_texCoord;
                    }
          `,
                fragmentShader: `#version 300 es
                    precision mediump float;
                    uniform sampler2D u_image;
                    uniform float u_opacity;
                    in vec2 v_texCoord;
                    out vec4 fragColor;
                    void main() {
                      vec4 col = texture(u_image, v_texCoord);
                      if (col.a == 0.0) {
                        discard;
                      } else {
                        fragColor = col;
                        fragColor.a *= u_opacity;
                      }
                    }
                    `,
            };
            break;
        case "polyline":
        case "polygon":
            res = {
                vertexShader: `#version 300 es
                    precision highp float;
                    in vec2 a_position;
                    uniform mat3 u_transformMatrix;

                    void main() {
                      gl_Position = vec4(u_transformMatrix * vec3(a_position, 1), 1);
                    }
                    `,
                fragmentShader: `#version 300 es
                    precision mediump float;
                    uniform vec4 u_color;
                    out vec4 fragColor;
                    void main() {
                        fragColor = u_color;
                    }
                    `,
            };
            break;
        case "rect":
            res = {
                vertexShader: `#version 300 es
                    precision highp float;
                    in vec2 a_position;
                    in vec4 a_color;
                    in mat3 a_transformMatrix;
                    out vec4 v_color;

                    void main() {
                      gl_Position = vec4(a_transformMatrix * vec3(a_position, 1), 1);
                      v_color = a_color;
                    }
                    `,
                fragmentShader: `#version 300 es
                    precision mediump float;
                    in vec4 v_color;
                    out vec4 fragColor;
                    void main() {
                      fragColor = v_color;
                    }
                    `,
            };
            break;
        case "line":
            res = {
                vertexShader: `#version 300 es
                    precision highp float;
                    in vec2 a_position;
                    in vec4 a_color;
                    in mat3 a_transformMatrix;
                    out vec4 v_color;

                    void main() {
                      gl_Position = vec4(a_transformMatrix * vec3(a_position, 1), 1);
                      v_color = a_color;
                    }
                    `,
                fragmentShader: `#version 300 es
                    precision mediump float;
                    in vec4 v_color;
                    out vec4 fragColor;
                    void main() {
                        fragColor = v_color;
                    }
                    `,
            };
            break;
        default:
            res = {
                vertexShader: `#version 300 es
                    precision highp float;
                    in vec2 a_position;
                    in vec4 a_color;
                    in mat3 a_transformMatrix;
                    out vec4 v_color;

                    void main() {
                      gl_Position = vec4(a_transformMatrix * vec3(a_position, 1), 1);
                      v_color = a_color;
                    }
                    `,
                fragmentShader: `#version 300 es
                    precision mediump float;
                    in vec4 v_color;
                    out vec4 fragColor;
                    void main() {
                      fragColor = v_color;
                    }
                    `,
            };
    }
    return res;
}

const queueInstance$2 = queue$1;
const easing = fetchTransitionType;
let animeIdentifier = 0;
function animeId() {
    animeIdentifier += 1;
    return animeIdentifier;
}
function checkForTranslateBounds(trnsExt, [scaleX, scaleY], newTrns) {
    return (
        newTrns[0] >= trnsExt[0][0] * scaleX &&
        newTrns[0] <= trnsExt[1][0] * scaleX &&
        newTrns[1] >= trnsExt[0][1] * scaleY &&
        newTrns[1] <= trnsExt[1][1] * scaleY
    );
}
function applyTranslate(event, { dx = 0, dy = 0 }, extent) {
    const translate = event.transform.translate;
    const [scaleX, scaleY = scaleX] = event.transform.scale;
    if (checkForTranslateBounds(extent, [scaleX, scaleY], [translate[0] + dx, translate[1] + dy])) {
        dx /= scaleX;
        dy /= scaleY;
        event.dx = dx;
        event.dy = dy;
        translate[0] /= scaleX;
        translate[1] /= scaleY;
        translate[0] += dx;
        translate[1] += dy;
        translate[0] *= scaleX;
        translate[1] *= scaleY;
    }
    return event;
}
const DragClass = function () {
    const self = this;
    this.dragStartFlag = false;
    this.dragExtent = [
        [-Infinity, -Infinity],
        [Infinity, Infinity],
    ];
    this.event = {
        x: 0,
        y: 0,
        dx: 0,
        dy: 0,
        transform: {
            translate: [0, 0],
            scale: [1, 1],
        },
    };
    this.onDragStart = function (trgt, event) {
        self.event.x = event.offsetX;
        self.event.y = event.offsetY;
        self.event.dx = 0;
        self.event.dy = 0;
        self.dragStartFlag = true;
    };
    this.onDrag = function () {};
    this.onDragEnd = function () {
        self.event.x = event.offsetX;
        self.event.y = event.offsetY;
        self.event.dx = 0;
        self.event.dy = 0;
        self.dragStartFlag = false;
    };
};
DragClass.prototype = {
    dragExtent: function (ext) {
        this.dragExtent = ext;
        return this;
    },
    dragStart: function (fun) {
        const self = this;
        if (typeof fun === "function") {
            this.onDragStart = function (trgt, event) {
                self.event.x = event.offsetX;
                self.event.y = event.offsetY;
                self.event.dx = 0;
                self.event.dy = 0;
                fun.call(trgt, self.event);
                self.dragStartFlag = true;
            };
        }
        return this;
    },
    drag: function (fun) {
        const self = this;
        if (typeof fun === "function") {
            this.onDrag = function (trgt, event) {
                const dx = event.offsetX - self.event.x;
                const dy = event.offsetY - self.event.y;
                self.event.x = event.offsetX;
                self.event.y = event.offsetY;
                self.event = applyTranslate(this.event, { dx, dy }, self.dragExtent);
                fun.call(trgt, self.event);
            };
        }
        return this;
    },
    dragEnd: function (fun) {
        const self = this;
        if (typeof fun === "function") {
            this.onDragEnd = function (trgt, event) {
                self.dragStartFlag = false;
                self.event.x = event.offsetX;
                self.event.y = event.offsetY;
                self.event.dx = 0;
                self.event.dy = 0;
                fun.call(trgt, self.event);
            };
        }
        return this;
    },
    bindMethods: function (trgt) {
        const self = this;
        trgt.dragTo = function (k, point) {
            self.dragTo(trgt, k, point);
        };
    },
    execute: function (trgt, event, eventType) {
        const self = this;
        this.event.e = event;
        if (event.preventDefault) {
            event.preventDefault();
        }
        if (!this.dragStartFlag && (eventType === "mousedown" || eventType === "pointerdown")) {
            self.onDragStart(trgt, event);
        } else if (
            this.onDragEnd &&
            this.dragStartFlag &&
            (eventType === "mouseup" ||
                eventType === "mouseleave" ||
                eventType === "pointerleave" ||
                eventType === "pointerup")
        ) {
            self.onDragEnd(trgt, event);
        } else if (this.dragStartFlag && this.onDrag) {
            self.onDrag(trgt, event);
        }
    },
};
function scaleRangeCheck(range, scale) {
    if (scale <= range[0]) {
        return range[0];
    } else if (scale >= range[1]) {
        return range[1];
    }
    return scale;
}
function computeTransform(transformObj, oScale, nScale, point) {
    transformObj.translate[0] /= oScale;
    transformObj.translate[1] /= oScale;
    transformObj.translate[0] -= point[0] / oScale - point[0] / nScale;
    transformObj.translate[1] -= point[1] / oScale - point[1] / nScale;
    transformObj.scale = [nScale, nScale];
    transformObj.translate[0] *= nScale;
    transformObj.translate[1] *= nScale;
    return transformObj;
}
const ZoomClass = function () {
    const self = this;
    this.event = {
        x: 0,
        y: 0,
        dx: 0,
        dy: 0,
        distance: 0,
    };
    this.event.pointers = [];
    this.event.transform = {
        translate: [0, 0],
        scale: [1, 1],
    };
    this.zoomBy_ = 0.001;
    this.zoomExtent_ = [0, Infinity];
    this.zoomStartFlag = false;
    this.zoomDuration = 250;
    this.onZoomStart = function (trgt, event) {
        self.event.x = event.offsetX;
        self.event.y = event.offsetY;
        self.event.dx = 0;
        self.event.dy = 0;
        self.zoomStartFlag = true;
        self.event.distance = 0;
    };
    this.onZoom = function (trgt, event) {
        self.event.x = event.offsetX;
        self.event.y = event.offsetY;
    };
    this.onZoomEnd = function (trgt, event) {
        self.event.x = event.offsetX;
        self.event.y = event.offsetY;
        self.event.dx = 0;
        self.event.dy = 0;
        self.zoomStartFlag = false;
        self.event.distance = 0;
    };
    this.onPanStart = function () {};
    this.onPan = function () {};
    this.onPanEnd = function () {};
    this.disableWheel = false;
    this.disableDbclick = false;
};
ZoomClass.prototype.zoomStart = function (fun) {
    const self = this;
    if (typeof fun === "function") {
        this.zoomStartExe = fun;
        this.onZoomStart = function (trgt, event, eventsInstance) {
            if (eventsInstance.pointers && eventsInstance.pointers.length === 2) {
                const pointers = eventsInstance.pointers;
                event = {
                    x: pointers[0].offsetX + (pointers[1].offsetX - pointers[0].offsetX) * 0.5,
                    y: pointers[0].offsetY + (pointers[1].offsetY - pointers[0].offsetY) * 0.5,
                };
            }
            self.event.x = event.offsetX;
            self.event.y = event.offsetY;
            self.event.dx = 0;
            self.event.dy = 0;
            if (!self.zoomStartFlag) {
                fun.call(trgt, self.event);
            }
            self.zoomStartFlag = true;
            self.event.distance = 0;
        };
    }
    return this;
};
ZoomClass.prototype.zoom = function (fun) {
    const self = this;
    if (typeof fun === "function") {
        this.zoomExe = fun;
        this.onZoom = function (trgt, event) {
            const transform = self.event.transform;
            const origScale = transform.scale[0];
            let newScale = origScale;
            const deltaY = event.deltaY;
            const x = event.offsetX;
            const y = event.offsetY;
            newScale = scaleRangeCheck(self.zoomExtent_, newScale + deltaY * -1 * self.zoomBy_);
            self.event.transform = computeTransform(transform, origScale, newScale, [x, y]);
            self.event.x = x;
            self.event.y = y;
            fun.call(trgt, self.event);
        };
    }
    return this;
};
ZoomClass.prototype.zoomEnd = function (fun) {
    const self = this;
    if (typeof fun === "function") {
        this.zoomEndExe = fun;
        this.onZoomEnd = function (trgt, event) {
            self.event.x = event.offsetX;
            self.event.y = event.offsetY;
            self.event.dx = 0;
            self.event.dy = 0;
            self.zoomStartFlag = false;
            fun.call(trgt, self.event);
            self.event.distance = 0;
        };
    }
    return this;
};
ZoomClass.prototype.zoomTransition = function () {};
ZoomClass.prototype.zoomExecute = function (trgt, event, eventsInstance) {
    this.eventType = "zoom";
    if (event.preventDefault) {
        event.preventDefault();
    }
    if (!this.zoomStartFlag) {
        this.onZoomStart(trgt, event, eventsInstance);
    } else {
        this.onZoom(trgt, event);
    }
};
ZoomClass.prototype.zoomPinch = function (trgt, event, eventsInstance) {
    const pointers = eventsInstance.pointers;
    if (event.preventDefault) {
        event.preventDefault();
    }
    if (eventsInstance.pointers.length === 2) {
        if (!this.zoomStartFlag) {
            this.onZoomStart(trgt, event, eventsInstance);
        } else {
            const distance_ = this.event.distance;
            for (var i = 0; i < pointers.length; i++) {
                if (event.pointerId === pointers[i].pointerId) {
                    pointers[i] = event;
                    break;
                }
            }
            const distance = geometry.getDistance(
                { x: pointers[0].offsetX, y: pointers[0].offsetY },
                { x: pointers[1].offsetX, y: pointers[1].offsetY }
            );
            const pinchEvent = {
                offsetX: this.event.x,
                offsetY: this.event.y,
                deltaY: !distance_ ? 0 : distance_ - distance,
            };
            this.event.distance = distance;
            this.onZoom(trgt, pinchEvent);
        }
    }
};
ZoomClass.prototype.scaleBy = function scaleBy(trgt, k, point) {
    const self = this;
    const transform = self.event.transform;
    const newScale = k * transform.scale[0];
    const origScale = transform.scale[0];
    const zoomTrgt = this.zoomTarget_ || point;
    const xdiff = (zoomTrgt[0] - point[0]) * origScale;
    const ydiff = (zoomTrgt[1] - point[1]) * origScale;
    let pf = 0;
    const targetConfig = {
        run(f) {
            const oScale = transform.scale[0];
            const nscale = scaleRangeCheck(
                self.zoomExtent_,
                origScale + (newScale - origScale) * f
            );
            self.event.transform = computeTransform(transform, oScale, nscale, point);
            self.event.transform.translate[0] += (xdiff * (f - pf)) / nscale;
            self.event.transform.translate[1] += (ydiff * (f - pf)) / nscale;
            pf = f;
            if (self.zoomExe) {
                self.zoomExe.call(trgt, self.event);
            }
        },
        target: trgt,
        duration: self.zoomDuration,
        delay: 0,
        end: function () {
            if (self.onZoomEnd) {
                self.onZoomEnd(trgt, {});
            }
        },
        loop: 1,
        direction: "default",
        ease: "default",
    };
    queueInstance$2.add(animeId(), targetConfig, easing(targetConfig.ease));
};
ZoomClass.prototype.zoomTarget = function zoomTarget(point) {
    this.zoomTarget_ = point;
};
ZoomClass.prototype.scaleTo = function scaleTo(trgt, newScale, point) {
    const self = this;
    const transform = self.event.transform;
    const origScale = transform.scale[0];
    const zoomTrgt = this.zoomTarget_ || point;
    const xdiff = (zoomTrgt[0] - point[0]) * origScale;
    const ydiff = (zoomTrgt[1] - point[1]) * origScale;
    let pf = 0;
    const targetConfig = {
        run(f) {
            const oScale = transform.scale[0];
            const nscale = scaleRangeCheck(
                self.zoomExtent_,
                origScale + (newScale - origScale) * f
            );
            self.event.transform = computeTransform(transform, oScale, nscale, point);
            self.event.transform.translate[0] += (xdiff * (f - pf)) / nscale;
            self.event.transform.translate[1] += (ydiff * (f - pf)) / nscale;
            pf = f;
            if (!self.zoomStartFlag) {
                self.onZoomStart(
                    trgt,
                    {
                        offsetX: point[0],
                        offsetY: point[1],
                    },
                    {}
                );
            }
            if (self.zoomExe) {
                self.zoomExe.call(trgt, self.event);
            }
        },
        target: trgt,
        duration: self.zoomDuration,
        delay: 0,
        end: function () {
            if (self.onZoomEnd) {
                self.onZoomEnd(trgt, self.event);
            }
        },
        loop: 1,
        direction: "default",
        ease: "default",
    };
    queueInstance$2.add(animeId(), targetConfig, easing(targetConfig.ease));
};
ZoomClass.prototype.panTo = function panTo(trgt, point) {
    const self = this;
    const transform = self.event.transform;
    const xdiff = point[0] - self.event.x;
    const ydiff = point[1] - self.event.y;
    let pf = 0;
    const targetConfig = {
        run(f) {
            const [scale] = transform.scale;
            transform.translate[0] += (xdiff * (f - pf)) / scale;
            transform.translate[1] += (ydiff * (f - pf)) / scale;
            pf = f;
            if (self.zoomExe) {
                self.zoomExe.call(trgt, self.event);
            }
        },
        target: trgt,
        duration: self.zoomDuration,
        delay: 0,
        end: function () {
            if (self.onZoomEnd) {
                self.onZoomEnd(trgt, self.event);
            }
        },
        loop: 1,
        direction: "default",
        ease: "default",
    };
    queueInstance$2.add(animeId(), targetConfig, easing(targetConfig.ease));
};
ZoomClass.prototype.bindMethods = function (trgt) {
    const self = this;
    trgt.scaleTo = function (k, point) {
        self.scaleTo(trgt, k, point);
    };
    trgt.scaleBy = function (k, point) {
        self.scaleBy(trgt, k, point);
        return trgt;
    };
    trgt.panTo = function (srcPoint, point) {
        self.panTo(trgt, srcPoint, point);
        return trgt;
    };
};
ZoomClass.prototype.zoomFactor = function (factor) {
    this.zoomBy_ = factor;
    return this;
};
ZoomClass.prototype.scaleExtent = function (range) {
    this.zoomExtent_ = range;
    return this;
};
ZoomClass.prototype.duration = function (time) {
    this.zoomDuration = time || 250;
    return this;
};
ZoomClass.prototype.panExtent = function (range) {
    this.panExtent_ = range;
    this.panFlag = true;
    return this;
};
ZoomClass.prototype.panExecute = function (trgt, event, eventType, eventsInstance) {
    if (eventsInstance.pointers.length !== 1) {
        return;
    }
    this.event.e = event;
    this.eventType = "pan";
    if (event.preventDefault) {
        event.preventDefault();
    }
    if (
        event.type === "touchstart" ||
        event.type === "touchmove" ||
        event.type === "touchend" ||
        event.type === "touchcancel"
    ) {
        event.offsetX = event.touches[0].clientX;
        event.offsetY = event.touches[0].clientY;
    }
    if (!this.zoomStartFlag && (eventType === "mousedown" || eventType === "pointerdown")) {
        this.onZoomStart(trgt, event, {});
    } else if (
        this.onZoomEnd &&
        (eventType === "mouseup" ||
            eventType === "mouseleave" ||
            eventType === "pointerup" ||
            eventType === "pointerleave")
    ) {
        this.onZoomEnd(trgt, event);
    } else if (this.zoomExe) {
        const dx = event.offsetX - this.event.x;
        const dy = event.offsetY - this.event.y;
        this.event.x = event.offsetX;
        this.event.y = event.offsetY;
        this.event = applyTranslate(this.event, { dx, dy }, this.panExtent_);
        this.zoomExe.call(trgt, this.event);
    }
    if (event.preventDefault) {
        event.preventDefault();
    }
};
var behaviour = {
    drag: function () {
        return new DragClass();
    },
    zoom: function () {
        return new ZoomClass();
    },
};

const t2DGeometry = geometry;
let ratio;
const queueInstance$1 = queue$1;
const zoomInstance$1 = behaviour.zoom();
const dragInstance$1 = behaviour.drag();
function getPixlRatio$1(ctx) {
    const dpr = window.devicePixelRatio || 1;
    const bsr =
        ctx.webkitBackingStorePixelRatio ||
        ctx.mozBackingStorePixelRatio ||
        ctx.msBackingStorePixelRatio ||
        ctx.oBackingStorePixelRatio ||
        ctx.backingStorePixelRatio ||
        1;
    const ratio = dpr / bsr;
    return ratio < 1.0 ? 1.0 : ratio;
}
let Id$1 = 0;
function domId$1() {
    Id$1 += 1;
    return Id$1;
}
function parseTransform$1(transform) {
    const output = {
        translateX: 0,
        translateY: 0,
        scaleX: 1,
        scaleY: 1,
        angle: 0,
    };
    if (transform) {
        if (transform.translate && transform.translate.length > 0) {
            output.translateX = transform.translate[0];
            output.translateY = transform.translate[1];
        }
        if (transform.scale && transform.scale.length > 0) {
            output.scaleX = transform.scale[0];
            output.scaleY = transform.scale[1] || output.scaleX;
        }
        if (transform.rotate && transform.rotate.length > 0) {
            output.angle = transform.rotate[0];
        }
    }
    return output;
}
function RPolyupdateBBox$1() {
    const self = this;
    const { transform, points = [] } = self.attr;
    const { translateX, translateY, scaleX, scaleY } = parseTransform$1(transform);
    if (points && points.length > 0) {
        let minX = points[0].x;
        let maxX = points[0].x;
        let minY = points[0].y;
        let maxY = points[0].y;
        for (let i = 1; i < points.length; i += 1) {
            if (minX > points[i].x) minX = points[i].x;
            if (maxX < points[i].x) maxX = points[i].x;
            if (minY > points[i].y) minY = points[i].y;
            if (maxY < points[i].y) maxY = points[i].y;
        }
        self.BBox = {
            x: translateX + minX * scaleX,
            y: translateY + minY * scaleY,
            width: (maxX - minX) * scaleX,
            height: (maxY - minY) * scaleY,
        };
    } else {
        self.BBox = {
            x: 0,
            y: 0,
            width: 0,
            height: 0,
        };
    }
    if (transform && transform.rotate) {
        self.BBoxHit = t2DGeometry.rotateBBox(this.BBox, transform);
    } else {
        self.BBoxHit = this.BBox;
    }
}
var m3 = {
    multiply: function (a, b) {
        var a00 = a[0 * 3 + 0];
        var a01 = a[0 * 3 + 1];
        var a02 = a[0 * 3 + 2];
        var a10 = a[1 * 3 + 0];
        var a11 = a[1 * 3 + 1];
        var a12 = a[1 * 3 + 2];
        var a20 = a[2 * 3 + 0];
        var a21 = a[2 * 3 + 1];
        var a22 = a[2 * 3 + 2];
        var b00 = b[0 * 3 + 0];
        var b01 = b[0 * 3 + 1];
        var b02 = b[0 * 3 + 2];
        var b10 = b[1 * 3 + 0];
        var b11 = b[1 * 3 + 1];
        var b12 = b[1 * 3 + 2];
        var b20 = b[2 * 3 + 0];
        var b21 = b[2 * 3 + 1];
        var b22 = b[2 * 3 + 2];
        return [
            b00 * a00 + b01 * a10 + b02 * a20,
            b00 * a01 + b01 * a11 + b02 * a21,
            b00 * a02 + b01 * a12 + b02 * a22,
            b10 * a00 + b11 * a10 + b12 * a20,
            b10 * a01 + b11 * a11 + b12 * a21,
            b10 * a02 + b11 * a12 + b12 * a22,
            b20 * a00 + b21 * a10 + b22 * a20,
            b20 * a01 + b21 * a11 + b22 * a21,
            b20 * a02 + b21 * a12 + b22 * a22,
        ];
    },
    translation: function (tx, ty, mtrx) {
        if (mtrx && mtrx[6] === tx && mtrx[7] === ty) {
            return mtrx;
        }
        return [1, 0, 0, 0, 1, 0, tx, ty, 1];
    },
    rotation: function (angleInRadians) {
        var c = Math.cos(angleInRadians);
        var s = Math.sin(angleInRadians);
        return [c, -s, 0, s, c, 0, 0, 0, 1];
    },
    scaling: function (sx, sy) {
        return [sx, 0, 0, 0, sy, 0, 0, 0, 1];
    },
    identity: function () {
        return [1, 0, 0, 0, 1, 0, 0, 0, 1];
    },
    projection: function (width, height) {
        return [2 / width, 0, 0, 0, -2 / height, 0, -1, 1, 1];
    },
};
function updateTransformMatrix(matrix_) {
    const transform = this.attr.transform;
    let matrix = matrix_ || this.projectionMatrix;
    if (transform && transform.translate) {
        this.translationMatrix = m3.translation(
            transform.translate[0],
            transform.translate[1],
            this.translationMatrix
        );
        matrix = m3.multiply(matrix, this.translationMatrix);
    }
    if (transform && transform.rotate) {
        const angle = (Math.PI / 180) * transform.rotate[0];
        this.rotationMatrix = m3.rotation(angle);
        this.rotationCentric = m3.translation(
            transform.rotate[1] || 0,
            transform.rotate[2] || 0,
            this.rotationCentric
        );
        matrix = m3.multiply(matrix, this.rotationMatrix);
    }
    if (transform && transform.scale) {
        this.scaleMatrix = m3.scaling(transform.scale[0], transform.scale[1]);
        matrix = m3.multiply(matrix, this.scaleMatrix);
    }
    if (this.rotationCentric) {
        matrix = m3.multiply(matrix, this.rotationCentric);
    }
    this.transformMatrix = matrix;
}
function prepObjProxyWebGl(type, attr, context, BBoxUpdate) {
    const handlr = {
        set(obj, prop, value) {
            if (value !== null) {
                if (type === 'attr') {
                    if (prop === "transform" && context.children.length > 0) {
                        value = prepObjProxyWebGl('transform', value, context, BBoxUpdate);
                        context.children.forEach(function (d) {
                            d.applyTransformationMatrix(context.dom.transformMatrix);
                        });
                    }
                    obj[prop] = value;
                    if (context && context.dom) {
                        context.dom.setAttr(prop, value);
                    }
                    if (BBoxUpdate) {
                        context.BBoxUpdate = true;
                    }
                } else if (type === 'style') {
                    let resProp = canvasStyleMapper[prop] || prop;
                    if ((resProp === "fillStyle" || resProp === "strokeStyle") && !colorMap$1.RGBAInstanceCheck(value) ) {
                        value = colorMap$1.colorToRGB(value);
                    }
                    if (context && context.dom) {
                        context.dom.setStyle(resProp, value);
                    }
                    obj[resProp] = value;
                } else if (type === 'transform') {
                    if (prop === 'translate' || prop === 'scale' || prop === 'skew') {
                        value = Array.isArray(value) && value.length > 0 ? [value[0], value[1] ? value[1] : value[0]] : [0, 0];
                    } else if (prop === 'rotate') {
                        value = Array.isArray(value) && value.length > 0 ? [value[0] || 0, value[1] || 0, value[2] || 0] : [0, 0, 0];
                    }
                    obj[prop] = value;
                    if (context && context.dom) {
                        context.dom.setAttr('transform', obj);
                    }
                    if (BBoxUpdate) {
                        context.BBoxUpdate = true;
                    }
                }
                queueInstance$1.vDomChanged(context.vDomIndex);
            } else {
                delete obj[prop];
            }
            return true;
        },
        deleteProperty(obj, prop) {
            if (prop in obj) {
                delete obj[prop];
                queueInstance$1.vDomChanged(context.vDomIndex);
                if (type === 'attr' && BBoxUpdate) {
                    context.BBoxUpdate = true;
                }
            }
            return true;
        },
    };
    return new Proxy(Object.assign({}, attr), handlr);
}
function updatePositionVector (positionArray, attr) {
        const x = attr.x || 0;
        const y = attr.y || 0;
        const width = attr.width || 0;
        const height = attr.height || 0;
        const x1 = x + width;
        const y1 = y + height;
        positionArray[0] = positionArray[4] = positionArray[6] = x;
        positionArray[1] = positionArray[3] = positionArray[9] = y;
        positionArray[2] = positionArray[8] = positionArray[10] = x1;
        positionArray[5] = positionArray[7] = positionArray[11] = y1;
}
const WebglCollection = function () {
    CollectionPrototype.apply(this, arguments);
};
WebglCollection.prototype = new CollectionPrototype();
WebglCollection.prototype.constructor = WebglCollection;
WebglCollection.prototype.createNode = function (ctx, config, vDomIndex) {
    return new WebglNodeExe(ctx, config, domId$1(), vDomIndex);
};
function loadShader(ctx, shaderSource, shaderType) {
    var shader = ctx.createShader(shaderType);
    ctx.shaderSource(shader, shaderSource);
    ctx.compileShader(shader);
    var compiled = ctx.getShaderParameter(shader, ctx.COMPILE_STATUS);
    if (!compiled) {
        var lastError = ctx.getShaderInfoLog(shader);
        console.error("*** Error compiling shader '" + shader + "':" + lastError);
        ctx.deleteShader(shader);
        return null;
    }
    return shader;
}
function createProgram(ctx, shaders) {
    var program = ctx.createProgram();
    shaders.forEach(function (shader) {
        ctx.attachShader(program, shader);
    });
    ctx.linkProgram(program);
    var linked = ctx.getProgramParameter(program, ctx.LINK_STATUS);
    if (!linked) {
        var lastError = ctx.getProgramInfoLog(program);
        console.error("Error in program linking:" + lastError);
        ctx.deleteProgram(program);
        return null;
    }
    return program;
}
function getProgram(ctx, shaderCode) {
    var shaders = [
        loadShader(ctx, shaderCode.vertexShader, ctx.VERTEX_SHADER),
        loadShader(ctx, shaderCode.fragmentShader, ctx.FRAGMENT_SHADER),
    ];
    return createProgram(ctx, shaders);
}
function WebglDom() {
    this.BBox = {
        x: 0,
        y: 0,
        width: 0,
        height: 0,
    };
    this.BBoxHit = {
        x: 0,
        y: 0,
        width: 0,
        height: 0,
    };
}
WebglDom.prototype.exec = function (exe, d) {
    if (typeof exe !== "function") {
        console.error("Wrong Exe type");
    }
    exe.call(this, d);
};
WebglDom.prototype.setStyle = function (key, value) {
    if (value) {
        this.style[key] = value;
        if (this.shader && key === "fillStyle") {
            if (this.style.opacity !== undefined) {
                value.a *= this.style.opacity;
            }
            if (this.shader.indexBased) {
                this.shader.updateColor(this.pindex, value);
            }
        }
        if (this.shader && key === "opacity") {
            if (this.style.fillStyle !== undefined) {
                this.style.fillStyle.a *= this.style.opacity;
            }
            this.shader.updateColor(this.pindex, this.style.fillStyle);
        }
    } else if (this.style[key]) {
        delete this.style[key];
    }
};
WebglDom.prototype.getAttr = function (key) {
    return this.attr[key];
};
WebglDom.prototype.getStyle = function (key) {
    let resKey = canvasStyleMapper[key] || key;
    return this.style[resKey];
};
function PointNode(ctx, attr, style) {
    this.ctx = ctx;
    this.attr = Object.assign({}, attr) ;
    this.style = Object.assign({}, style);
    this.projectionMatrix = m3.projection(
        this.ctx.canvas.width / ratio,
        this.ctx.canvas.height / ratio
    );
    this.transformMatrix = m3.multiply(this.projectionMatrix, m3.identity());
    if (this.attr.transform) {
        this.exec(updateTransformMatrix, null);
    }
}
PointNode.prototype = new WebglDom();
PointNode.prototype.constructor = PointNode;
PointNode.prototype.setShader = function (shader) {
    this.shader = shader;
    if (this.shader) {
        this.shader.addVertex(this.attr.x || 0, this.attr.y || 0, this.pindex);
        this.shader.addColors(this.style.fillStyle || defaultColor, this.pindex);
        this.shader.addSize(this.attr.size || 0, this.pindex);
        this.shader.addTransform(this.transformMatrix, this.pindex);
    }
};
PointNode.prototype.setAttr = function (prop, value) {
    this.attr[prop] = value;
    if (prop === "transform") {
        this.exec(updateTransformMatrix, this.p_matrix);
    }
    if (!this.shader) {
        return;
    }
    if (prop === "x" || prop === "y") {
        this.shader.updateVertex(this.pindex, this.attr.x, this.attr.y);
    } else if (prop === "size") {
        this.shader.updateSize(this.pindex, this.attr.size || 0);
    } else if (prop === "transform") {
        this.shader.updateTransform(this.pindex, this.transformMatrix);
    }
};
PointNode.prototype.applyTransformationMatrix = function (matrix) {
    this.p_matrix = matrix;
    this.exec(updateTransformMatrix, matrix);
    if (this.shader) {
        this.shader.addTransform(this.transformMatrix, this.pindex);
    }
};
PointNode.prototype.in = function RRinfun(co) {
    const { x = 0, y = 0, size = 0 } = this.attr;
    return co.x >= x && co.x <= x + size && co.y >= y && co.y <= y + size;
};
PointNode.prototype.updateBBox = function RRupdateBBox() {
    const self = this;
    const { transform, x = 0, y = 0, size = 0 } = self.attr;
    const { translateX, translateY, scaleX, scaleY } = parseTransform$1(transform);
    self.BBox = {
        x: translateX + x * scaleX,
        y: translateY + y * scaleY,
        width: size * scaleX,
        height: size * scaleY,
    };
    if (transform && transform.rotate) {
        self.BBoxHit = t2DGeometry.rotateBBox(this.BBox, transform);
    } else {
        self.BBoxHit = this.BBox;
    }
};
function RectNode(ctx, attr, style) {
    this.ctx = ctx;
    this.attr = Object.assign({}, attr) ;
    this.style = Object.assign({}, style);
    this.projectionMatrix = m3.projection(
        this.ctx.canvas.width / ratio,
        this.ctx.canvas.height / ratio
    );
    this.transformMatrix = m3.multiply(this.projectionMatrix, m3.identity());
    if (this.attr.transform) {
        this.exec(updateTransformMatrix, null);
    }
}
RectNode.prototype = new WebglDom();
RectNode.prototype.constructor = RectNode;
RectNode.prototype.setShader = function (shader) {
    this.shader = shader;
    if (this.shader) {
        this.shader.addVertex(
            this.attr.x || 0,
            this.attr.y || 0,
            this.attr.width || 0,
            this.attr.height || 0,
            this.pindex
        );
        this.shader.addColors(this.style.fillStyle || defaultColor, this.pindex);
        this.shader.addTransform(this.transformMatrix, this.pindex);
    }
};
RectNode.prototype.applyTransformationMatrix = function (matrix) {
    this.p_matrix = matrix;
    this.exec(updateTransformMatrix, matrix);
    if (this.shader) {
        this.shader.addTransform(this.transformMatrix, this.pindex);
    }
};
RectNode.prototype.setAttr = function (key, value) {
    this.attr[key] = value;
    if (key === "transform") {
        this.exec(updateTransformMatrix, this.p_matrix);
    }
    if (!this.shader) {
        return;
    }
    if (key === "x" || key === "width" || key === "y" || key === "height") {
        this.shader.updateVertex(
            this.pindex,
            this.attr.x || 0,
            this.attr.y || 0,
            this.attr.width || 0,
            this.attr.height || 0
        );
    } else if (key === "transform") {
        this.shader.updateTransform(this.pindex, this.transformMatrix);
    }
};
RectNode.prototype.in = function RRinfun(co) {
    const { x = 0, y = 0, width = 0, height = 0 } = this.attr;
    return co.x >= x && co.x <= x + width && co.y >= y && co.y <= y + height;
};
RectNode.prototype.updateBBox = function RRupdateBBox() {
    const self = this;
    const { transform, x = 0, y = 0, width = 0, height = 0 } = self.attr;
    const { translateX, translateY, scaleX, scaleY } = parseTransform$1(transform);
    self.BBox = {
        x: translateX + x * scaleX,
        y: translateY + y * scaleY,
        width: width * scaleX,
        height: height * scaleY,
    };
    if (transform && transform.rotate) {
        self.BBoxHit = t2DGeometry.rotateBBox(this.BBox, transform);
    } else {
        self.BBoxHit = this.BBox;
    }
};
function PathNode(ctx, attr, style) {
    const self = this;
    this.ctx = ctx;
    this.attr = Object.assign({}, attr) ;
    this.style = Object.assign({}, style);
    this.pointsGeometry = [];
    this.transform = [0, 0, 1, 1];
    this.positionArray = new Float32Array(12);
    this.projectionMatrix = m3.projection(
        this.ctx.canvas.width / ratio,
        this.ctx.canvas.height / ratio
    );
    this.transformMatrix = m3.multiply(this.projectionMatrix, m3.identity());
    for(let key in self.attr) {
        this.setAttr(key, self.attr[key]);
    }
}
PathNode.prototype = new WebglDom();
PathNode.prototype.constructor = PathNode;
PathNode.prototype.setShader = function (shader) {
    this.shader = shader;
};
PathNode.prototype.applyTransformationMatrix = function (matrix) {
    this.p_matrix = matrix;
    this.exec(updateTransformMatrix, matrix);
};
PathNode.prototype.setAttr = function (key, value) {
    this.attr[key] = value;
    if (value === null) {
        delete this.attr[key];
        return;
    }
    if (key === "d") {
        if (CheckPathType(value)) {
            this.path = value;
            this.attr.d = value.fetchPathString();
        } else {
            this.path = CreatePath(this.attr.d);
        }
        let bbox = this.path.BBox;
        let pathTexture = this.path.getPathTexture(this.style, true);
        if (!this.textureNode) {
            this.textureNode = new TextureObject(
                this.ctx,
                {
                    src: pathTexture,
                },
                this.vDomIndex
            );
        } else {
            this.textureNode.setAttr('src', pathTexture);
        }
        updatePositionVector(this.positionArray, {x: 0, y: 0, height: bbox?.height??0, width: bbox?.width??0});
    } else if (key === "transform") {
        this.exec(updateTransformMatrix, this.p_matrix ? this.p_matrix : this.projectionMatrix);
    }
};
PathNode.prototype.setStyle = function (key, value) {
    if (value === null) {
        delete this.style[key];
        return;
    }
    this.style[key] = value;
    if (this.path) {
        this.textureNode.setAttr('src', this.path.getPathTexture(this.style, true));
    }
};
PathNode.prototype.in = function RIinfun(co) {
    const { x = 0, y = 0 } = co;
    let ctx = this.path.ctx;
    let flag = false;
    ctx.save();
    flag = ctx.isPointInPath(this.path.pathNode, x, y);
    ctx.restore();
    return flag;
};
PathNode.prototype.updateBBox = function RCupdateBBox() {
    const self = this;
    const { transform } = self.attr;
    const { translateX, translateY, scaleX, scaleY } = parseTransform$1(transform);
    self.BBox = self.path
        ? self.path.BBox
        : {
              x: 0,
              y: 0,
              width: 0,
              height: 0,
          };
    self.BBox.x = translateX + self.BBox.x * scaleX;
    self.BBox.y = translateY + self.BBox.y * scaleY;
    self.BBox.width *= scaleX;
    self.BBox.height *= scaleY;
    if (transform && transform.rotate) {
        self.BBoxHit = t2DGeometry.rotateBBox(this.BBox, transform);
    } else {
        self.BBoxHit = this.BBox;
    }
};
function PolyLineNode(ctx, attr, style) {
    this.ctx = ctx;
    this.attr = Object.assign({}, attr || {}) ;
    this.style = Object.assign({}, style || {});
    this.points = [];
    this.transform = [0, 0, 1, 1];
    const subPoints = [];
    this.projectionMatrix = m3.projection(
        this.ctx.canvas.width / ratio,
        this.ctx.canvas.height / ratio
    );
    if (this.attr.points) {
        const points = this.attr.points;
        for (let j = 0, jlen = points.length; j < jlen; j++) {
            subPoints[j * 2] = points[j].x;
            subPoints[j * 2 + 1] = points[j].y;
        }
        this.points = new Float32Array(subPoints);
    }
    if (this.style.strokeStyle) {
        this.color = new Float32Array([
            this.style.strokeStyle.r / 255,
            this.style.strokeStyle.g / 255,
            this.style.strokeStyle.b / 255,
            this.style.strokeStyle.a === undefined ? 1 : this.style.strokeStyle.a / 255,
        ]);
    }
    this.transformMatrix = m3.multiply(this.projectionMatrix, m3.identity());
    if (this.attr.transform) {
        this.exec(updateTransformMatrix, null);
    }
}
PolyLineNode.prototype = new WebglDom();
PolyLineNode.prototype.constructor = PolyLineNode;
PolyLineNode.prototype.setShader = function (shader) {
    this.shader = shader;
};
PolyLineNode.prototype.applyTransformationMatrix = function (matrix) {
    this.p_matrix = matrix;
    this.exec(updateTransformMatrix, matrix);
};
PolyLineNode.prototype.setAttr = function (key, value) {
    this.attr[key] = value;
    if (key === "points") {
        const points = this.attr.points;
        const subPoints = [];
        for (let j = 0, jlen = points.length; j < jlen; j++) {
            subPoints[j * 2] = points[j].x;
            subPoints[j * 2 + 1] = points[j].y;
        }
        this.points = new Float32Array(subPoints);
    } else if (key === "transform") {
        this.exec(updateTransformMatrix, this.p_matrix);
    }
};
PolyLineNode.prototype.updateBBox = RPolyupdateBBox$1;
PolyLineNode.prototype.setStyle = function (key, value) {
    this.style[key] = value;
    if (key === "strokeStyle") {
        this.color = new Float32Array([
            this.style.strokeStyle.r / 255,
            this.style.strokeStyle.g / 255,
            this.style.strokeStyle.b / 255,
            this.style.strokeStyle.a === undefined ? 1 : this.style.strokeStyle.a / 255,
        ]);
    }
};
function LineNode(ctx, attr, style) {
    this.ctx = ctx;
    this.attr = Object.assign({}, attr || {}) ;
    this.style = Object.assign({}, style || {});
    this.projectionMatrix = m3.projection(
        this.ctx.canvas.width / ratio,
        this.ctx.canvas.height / ratio
    );
    this.transformMatrix = m3.multiply(this.projectionMatrix, m3.identity());
    if (this.attr.transform) {
        this.exec(updateTransformMatrix, null);
    }
}
LineNode.prototype = new WebglDom();
LineNode.prototype.constructor = LineNode;
LineNode.prototype.setShader = function (shader) {
    this.shader = shader;
    const { x1 = 0, y1 = 0, x2 = x1, y2 = y1 } = this.attr;
    if (this.shader) {
        this.shader.addVertex(x1, y1, x2, y2, this.pindex);
        this.shader.addColors(this.style.strokeStyle || defaultColor, this.pindex);
        this.shader.addTransform(this.transformMatrix, this.pindex);
    }
};
LineNode.prototype.applyTransformationMatrix = function (matrix) {
    this.p_matrix = matrix;
    this.exec(updateTransformMatrix, matrix);
    if (this.shader) {
        this.shader.addTransform(this.transformMatrix, this.pindex);
    }
};
LineNode.prototype.setAttr = function (key, value) {
    this.attr[key] = value;
    if (value === null && this.attr[key] !== null) {
        delete this.attr[key];
        return;
    }
    if (key === "transform") {
        this.exec(updateTransformMatrix, this.p_matrix);
    }
    if (this.shader && (key === "x1" || key === "y1" || key === "x2" || key === "y2")) {
        this.shader.updateVertex(
            this.pindex,
            this.attr.x1,
            this.attr.y1,
            this.attr.x2,
            this.attr.y2
        );
    } else if (this.shader && key === "transform") {
        this.shader.updateTransform(this.pindex, this.transformMatrix);
    }
};
LineNode.prototype.updateBBox = function RLupdateBBox() {
    const self = this;
    const { transform, x1 = 0, y1 = 0, x2 = 0, y2 = 0 } = self.attr;
    const { translateX, translateY, scaleX, scaleY } = parseTransform$1(transform);
    self.BBox = {
        x: translateX + (x1 < x2 ? x1 : x2) * scaleX,
        y: translateY + (y1 < y2 ? y1 : y2) * scaleY,
        width: Math.abs(x2 - x1) * scaleX,
        height: Math.abs(y2 - y1) * scaleY,
    };
    if (transform && transform.rotate) {
        self.BBoxHit = t2DGeometry.rotateBBox(this.BBox, transform);
    } else {
        self.BBoxHit = this.BBox;
    }
};
function polygonPointsMapper(value) {
    return earcut$1(value.reduce(function (p, c) {
            p[p.length] = c.x;
            p[p.length] = c.y;
            return p;
        }, [])).map(function (d) {
        return value[d];
    });
}
function PolygonNode(ctx, attr, style) {
    this.ctx = ctx;
    this.attr = Object.assign({}, attr || {}) ;
    this.style = Object.assign({}, style || {});
    this.positionArray = [];
    this.transform = [0, 0, 1, 1];
    const subPoints = [];
    this.projectionMatrix = m3.projection(
        this.ctx.canvas.width / ratio,
        this.ctx.canvas.height / ratio
    );
    if (this.attr.points) {
        const points = polygonPointsMapper(this.attr.points || []);
        for (let j = 0, jlen = points.length; j < jlen; j++) {
            subPoints[j * 2] = points[j].x;
            subPoints[j * 2 + 1] = points[j].y;
        }
        this.points = new Float32Array(subPoints);
    }
    if (this.style.fillStyle || this.style.strokeStyle) {
        this.color = new Float32Array([
            this.style.strokeStyle.r / 255,
            this.style.strokeStyle.g / 255,
            this.style.strokeStyle.b / 255,
            this.style.strokeStyle.a === undefined ? 1 : this.style.strokeStyle.a / 255,
        ]);
    }
    this.transformMatrix = m3.multiply(this.projectionMatrix, m3.identity());
    if (this.attr.transform) {
        this.exec(updateTransformMatrix, null);
    }
}
PolygonNode.prototype = new WebglDom();
PolygonNode.prototype.constructor = PolygonNode;
PolygonNode.prototype.setShader = function (shader) {
    this.shader = shader;
};
PolygonNode.prototype.applyTransformationMatrix = function (matrix) {
    this.p_matrix = matrix;
    this.exec(updateTransformMatrix, matrix);
};
PolygonNode.prototype.setAttr = function (key, value) {
    this.attr[key] = value;
    if (value === null) {
        delete this.attr[key];
        return;
    }
    if (key === "points") {
        const subPoints = [];
        const points = polygonPointsMapper((value || []));
        for (let j = 0, jlen = points.length; j < jlen; j++) {
            subPoints[j * 2] = points[j].x;
            subPoints[j * 2 + 1] = points[j].y;
        }
        this.points = new Float32Array(subPoints);
    } else if (key === "transform") {
        this.exec(updateTransformMatrix, this.p_matrix);
    }
};
PolygonNode.prototype.setStyle = function (key, value) {
    this.style[key] = value;
    if (key === "fillStyle") {
        this.color = new Float32Array([
            this.style.fillStyle.r / 255,
            this.style.fillStyle.g / 255,
            this.style.fillStyle.b / 255,
            this.style.fillStyle.a === undefined ? 1 : this.style.fillStyle.a / 255,
        ]);
    }
};
PolygonNode.prototype.updateBBox = RPolyupdateBBox$1;
function CircleNode(ctx, attr, style) {
    this.ctx = ctx;
    this.attr = Object.assign({}, attr || {}) ;
    this.style = Object.assign({}, style || {});
    this.projectionMatrix = m3.projection(
        this.ctx.canvas.width / ratio,
        this.ctx.canvas.height / ratio
    );
    this.transformMatrix = m3.multiply(this.projectionMatrix, m3.identity());
    if (this.attr.transform) {
        this.exec(updateTransformMatrix, null);
    }
}
CircleNode.prototype = new WebglDom();
CircleNode.prototype.constructor = CircleNode;
CircleNode.prototype.setShader = function (shader) {
    this.shader = shader;
    if (this.shader) {
        this.shader.addVertex(this.attr.cx || 0, this.attr.cy || 0, this.pindex);
        this.shader.addColors(this.style.fillStyle || defaultColor, this.pindex);
        this.shader.addSize(this.attr.r * ratio || 0, this.pindex);
        this.shader.addTransform(this.transformMatrix, this.pindex);
    }
};
CircleNode.prototype.applyTransformationMatrix = function (matrix) {
    this.p_matrix = matrix;
    this.exec(updateTransformMatrix, matrix);
    if (this.shader) {
        this.shader.addTransform(this.transformMatrix, this.pindex);
    }
};
CircleNode.prototype.setAttr = function (prop, value) {
    this.attr[prop] = value;
    if (value === null) {
        delete this.attr[prop];
        return;
    }
    if (prop === "transform") {
        this.exec(updateTransformMatrix, this.p_matrix);
    }
    if ((prop === "cx" || prop === "cy") && this.shader) {
        this.shader.updateVertex(this.pindex, this.attr.cx, this.attr.cy);
    } else if (prop === "r" && this.shader) {
        this.shader.updateSize(this.pindex, this.attr.r || 0);
    } else if (prop === "transform" && this.shader) {
        this.shader.updateTransform(this.pindex, this.transformMatrix);
    }
};
CircleNode.prototype.in = function RCinfun(co) {
    const { r = 0, cx = 0, cy = 0 } = this.attr;
    const tr = Math.sqrt((co.x - cx) * (co.x - cx) + (co.y - cy) * (co.y - cy));
    return tr <= r;
};
CircleNode.prototype.updateBBox = function RCupdateBBox() {
    const self = this;
    const { transform, r = 0, cx = 0, cy = 0 } = self.attr;
    const { translateX, translateY, scaleX, scaleY } = parseTransform$1(transform);
    self.BBox = {
        x: translateX + (cx - r) * scaleX,
        y: translateY + (cy - r) * scaleY,
        width: 2 * r * scaleX,
        height: 2 * r * scaleY,
    };
    if (transform && transform.rotate) {
        self.BBoxHit = t2DGeometry.rotateBBox(this.BBox, transform);
    } else {
        self.BBoxHit = this.BBox;
    }
};
const webGLImageTextures = {};
function isPowerOf2(value) {
    return (value & (value - 1)) === 0;
}
const onClear = function (ctx, width, height, ratio) {
    ctx.clearRect(0, 0, width * ratio, height * ratio);
};
function fetchColorCode(value) {
    return colorMap$1.RGBAInstanceCheck(value) ? value.rgba : value;
}
function buildCanvasTextEl(str, style) {
    const layer = document.createElement("canvas");
    const ctx = layer.getContext("2d");
    style = style || {
        fillStyle: "#fff",
    };
    if (!style.font) {
        style.font = "10px Arial";
    }
    const fontSize = parseFloat(style.font, 10) || 12;
    ctx.font = style.font;
    const twid = ctx.measureText(str);
    const width = twid.width;
    const height = fontSize;
    layer.setAttribute("height", height * ratio);
    layer.setAttribute("width", width * ratio);
    for (const st in style) {
        let value = style[st];
        if (st === 'fillStyle' || st === 'strokeStyle') {
            value = fetchColorCode(value);
        } else if (st === 'font') {
            value = fontSize * ratio +
                    (isNaN(parseFloat(style.font, 10))
                        ? style.font
                        : style.font.substring(fontSize.toString().length));
        }
        ctx[st] = value;
    }
    ctx.fillText(str, 0, height * 0.75 * ratio);
    return {
        dom: layer,
        ctx: ctx,
        width: width,
        height: height,
        ratio: ratio,
        style: style,
        str: str,
        updateText: function (str, style) {
            if (!style.font) {
                style.font = "10px Arial";
            }
            const fontSize = parseFloat(style.font, 10) || 12;
            ctx.font = style.font;
            const twid = ctx.measureText(str);
            const width = twid.width;
            const height = fontSize;
            layer.setAttribute("height", height * ratio);
            layer.setAttribute("width", width * ratio);
            onClear(ctx, width, height, ratio);
            this.width = width;
            this.height = height;
            for (const st in style) {
                let value = style[st];
                if (st === 'fillStyle' || st === 'strokeStyle') {
                    value = fetchColorCode(value);
                } else if (st === 'font') {
                    value = fontSize * ratio +
                            (isNaN(parseFloat(style.font, 10))
                                ? style.font
                                : style.font.substring(fontSize.toString().length));
                }
                ctx[st] = value;
            }
            ctx.fillText(str, 0, height * 0.75 * ratio);
        },
    };
}
function TextNode(ctx, attr, style, vDomIndex) {
    const self = this;
    this.ctx = ctx;
    this.attr = Object.assign({}, attr || {}) ;
    this.style = Object.assign({}, style || {});
    this.vDomIndex = vDomIndex;
    this.positionArray = new Float32Array(12);
    this.transform = [0, 0, 1, 1];
    this.projectionMatrix = m3.projection(
        this.ctx.canvas.width / ratio,
        this.ctx.canvas.height / ratio
    );
    this.transformMatrix = m3.multiply(this.projectionMatrix, m3.identity());
    if (this.attr.transform) {
        this.exec(updateTransformMatrix, null);
    }
    if (self.attr.text && typeof self.attr.text === "string") {
        this.text = buildCanvasTextEl(self.attr.text, self.style);
        this.attr.width = this.text.width;
        this.attr.height = this.text.height;
    }
    if (this.attr.x || this.attr.y) {
        updatePositionVector(this.positionArray, this.attr);
    }
    if (this.text) {
        this.textureNode = new TextureObject(
            ctx,
            {
                src: this.text.dom,
            },
            this.vDomIndex
        );
    }
}
TextNode.prototype = new WebglDom();
TextNode.prototype.constructor = TextNode;
TextNode.prototype.setShader = function (shader) {
    this.shader = shader;
};
TextNode.prototype.setAttr = function (key, value) {
    this.attr[key] = value;
    if (value === null) {
        delete this.attr[key];
        return;
    }
    if (key === "text" && typeof value === "string") {
        if (!this.text) {
            this.text = buildCanvasTextEl(this.attr.text, this.style);
        } else {
            this.text.updateText(value, this.style);
        }
        this.attr.width = this.text.width;
        this.attr.height = this.text.height;
        if (this.textureNode) {
            this.textureNode.setAttr("src", this.text.dom);
        } else {
            this.textureNode = new TextureObject(
                this.ctx,
                {
                    src: this.text.dom,
                },
                this.vDomIndex
            );
        }
    }
    if (key === "transform") {
        this.exec(updateTransformMatrix, this.p_matrix);
    } else if (key === 'text' || key === "x" || key === "y") {
        updatePositionVector(this.positionArray, this.attr);
    }
};
TextNode.prototype.applyTransformationMatrix = function (matrix) {
    this.p_matrix = matrix;
    this.exec(updateTransformMatrix, matrix);
};
TextNode.prototype.setStyle = function (key, value) {
    this.style[key] = value;
    if (this.text) {
        this.text.style[key] = value;
        if (key === "font") {
            const fontSize = parseFloat(value, 10) || 12;
            this.text.ctx.font = value;
            const twid = this.text.ctx.measureText(this.attr.text);
            const width = twid.width;
            const height = fontSize;
            this.text.style.font =
                fontSize * ratio +
                (isNaN(parseFloat(value, 10))
                    ? this.style.font
                    : this.style.font.substring(fontSize.toString().length));
            this.text.updateText();
            this.text.dom.setAttribute("height", height * ratio);
            this.text.dom.setAttribute("width", width * ratio);
            this.attr.width = width;
            this.attr.height = height;
            this.shader.updateVertexX(this.pindex, this.attr.x || 0, this.attr.width || 0);
            this.shader.updateVertexY(this.pindex, this.attr.y || 0, this.attr.height || 0);
        } else {
            this.text.style[key] = value;
            this.text.updateText();
            this.textureNode.setAttr("src", this.text.dom);
        }
    }
};
TextNode.prototype.in = function RIinfun(co) {
    const { width = 0, height = 0, x = 0, y = 0 } = this.attr;
    return co.x >= x && co.x <= x + width && co.y >= y && co.y <= y + height;
};
TextNode.prototype.updateBBox = function RIupdateBBox() {
    const self = this;
    const { transform, x = 0, y = 0, width = 0, height = 0 } = self.attr;
    const { translateX, translateY, scaleX, scaleY } = parseTransform$1(transform);
    self.BBox = {
        x: (translateX + x) * scaleX,
        y: (translateY + y) * scaleY,
        width: width * scaleX,
        height: height * scaleY,
    };
    if (transform && transform.rotate) {
        self.BBoxHit = t2DGeometry.rotateBBox(this.BBox, transform);
    } else {
        self.BBoxHit = this.BBox;
    }
};
function ImageNode(ctx, attr, style, vDomIndex) {
    const self = this;
    this.ctx = ctx;
    this.attr = Object.assign({}, attr || {}) ;
    this.style = Object.assign({}, style || {});
    this.vDomIndex = vDomIndex;
    this.positionArray = new Float32Array(12);
    this.transform = [0, 0, 1, 1];
    this.projectionMatrix = m3.projection(
        this.ctx.canvas.width / ratio,
        this.ctx.canvas.height / ratio
    );
    this.transformMatrix = m3.multiply(this.projectionMatrix, m3.identity());
    if (this.attr.transform) {
        this.exec(updateTransformMatrix, null);
    }
    if (self.attr.src && typeof self.attr.src === "string" && !webGLImageTextures[self.attr.src]) {
        this.textureNode = new TextureObject(
            ctx,
            {
                src: this.attr.src,
            },
            this.vDomIndex
        );
        webGLImageTextures[self.attr.src] = this.textureNode;
    } else if (self.attr.src && self.attr.src instanceof NodePrototype) {
        this.textureNode = new TextureObject(
            ctx,
            {
                src: this.attr.src,
            },
            this.vDomIndex
        );
    } else if (typeof self.attr.src === "string" && webGLImageTextures[self.attr.src]) {
        this.textureNode = webGLImageTextures[self.attr.src];
    } else if (self.attr.src && self.attr.src instanceof TextureObject) {
        this.textureNode = self.attr.src;
    }
    if (this.attr.x || this.attr.y || this.attr.width || this.attr.height) {
        updatePositionVector(this.positionArray, this.attr);
    }
}
ImageNode.prototype = new WebglDom();
ImageNode.prototype.constructor = ImageNode;
ImageNode.prototype.setShader = function (shader) {
    this.shader = shader;
};
ImageNode.prototype.applyTransformationMatrix = function (matrix) {
    this.p_matrix = matrix;
    this.exec(updateTransformMatrix, matrix);
};
ImageNode.prototype.setAttr = function (key, value) {
    this.attr[key] = value;
    if (value === null) {
        delete this.attr[key];
        return;
    }
    if (key === "src" && typeof value === "string") {
        if (value && !webGLImageTextures[value]) {
            this.textureNode = new TextureObject(
                this.ctx,
                {
                    src: value,
                },
                this.vDomIndex
            );
            webGLImageTextures[value] = this.textureNode;
        } else if (value && webGLImageTextures[value]) {
            this.textureNode = webGLImageTextures[value];
        }
    } else if (key === "src" && value instanceof NodePrototype) {
        this.textureNode = new TextureObject(
            this.ctx,
            {
                src: value,
            },
            this.vDomIndex
        );
    } else if (key === "src" && value instanceof TextureObject) {
        this.textureNode = value;
    } else if (key === "x" || key === "width" || key === "y" || key === "height") {
        updatePositionVector(this.positionArray, this.attr);
    } else if (key === "transform") {
        this.exec(updateTransformMatrix, this.p_matrix);
    }
};
ImageNode.prototype.setStyle = function (key, value) {
    if (value) {
        this.style[key] = value;
    } else if (this.style[key]) {
        delete this.style[key];
    }
};
ImageNode.prototype.in = function RIinfun(co) {
    const { width = 0, height = 0, x = 0, y = 0 } = this.attr;
    return co.x >= x && co.x <= x + width && co.y >= y && co.y <= y + height;
};
ImageNode.prototype.updateBBox = function RIupdateBBox() {
    const self = this;
    const { transform, x = 0, y = 0, width = 0, height = 0 } = self.attr;
    const { translateX, translateY, scaleX, scaleY } = parseTransform$1(transform);
    self.BBox = {
        x: (translateX + x) * scaleX,
        y: (translateY + y) * scaleY,
        width: width * scaleX,
        height: height * scaleY,
    };
    if (transform && transform.rotate) {
        self.BBoxHit = t2DGeometry.rotateBBox(this.BBox, transform);
    } else {
        self.BBoxHit = this.BBox;
    }
};
function WebglGroupNode(ctx, attr, style, renderTarget, vDomIndex) {
    this.ctx = ctx;
    this.attr = Object.assign({}, attr || {}) ;
    this.style = Object.assign({}, style || {});
    this.renderTarget = renderTarget;
    this.vDomIndex = vDomIndex;
    if (attr.shaderType) {
        this.shader = getTypeShader(
            ctx,
            attr,
            style,
            attr.shaderType,
            this.renderTarget,
            vDomIndex
        );
    }
    this.projectionMatrix = m3.projection(
        this.ctx.canvas.width / ratio,
        this.ctx.canvas.height / ratio
    );
    this.transformMatrix = m3.multiply(this.projectionMatrix, m3.identity());
    if (this.attr.transform) {
        this.exec(updateTransformMatrix, null);
    }
}
WebglGroupNode.prototype = new WebglDom();
WebglGroupNode.prototype.constructor = WebglGroupNode;
WebglGroupNode.prototype.applyTransformationMatrix = function (matrix) {
    this.p_matrix = matrix;
    this.exec(updateTransformMatrix, matrix);
    this.transformMatrix = m3.multiply(this.transformMatrix, matrix);
};
WebglGroupNode.prototype.setAttr = function (key, value) {
    this.attr[key] = value;
    if (key === "shaderType") {
        this.shader = getTypeShader(
            this.ctx,
            this.attr,
            this.style,
            value,
            this.renderTarget,
            this.vDomIndex
        );
    }
    if (key === "transform") {
        this.exec(updateTransformMatrix, this.p_matrix);
    }
};
WebglGroupNode.prototype.setShader = function () {};
WebglGroupNode.prototype.in = function RGinfun(coOr) {
    const self = this;
    const co = {
        x: coOr.x,
        y: coOr.y,
    };
    const { BBox } = this;
    const { transform } = self.attr;
    const { translateX, translateY, scaleX, scaleY } = parseTransform$1(transform);
    return (
        co.x >= (BBox.x - translateX) / scaleX &&
        co.x <= (BBox.x - translateX + BBox.width) / scaleX &&
        co.y >= (BBox.y - translateY) / scaleY &&
        co.y <= (BBox.y - translateY + BBox.height) / scaleY
    );
};
WebglGroupNode.prototype.updateBBox = function RGupdateBBox(children) {
    const self = this;
    let minX;
    let maxX;
    let minY;
    let maxY;
    const { transform } = self.attr;
    const { translateX, translateY, scaleX, scaleY } = parseTransform$1(transform);
    self.BBox = {};
    if (children && children.length > 0) {
        let d;
        let boxX;
        let boxY;
        for (let i = 0; i < children.length; i += 1) {
            d = children[i];
            if (!d) {
                continue;
            }
            boxX = d.dom.BBoxHit.x;
            boxY = d.dom.BBoxHit.y;
            minX = minX === undefined ? boxX : minX > boxX ? boxX : minX;
            minY = minY === undefined ? boxY : minY > boxY ? boxY : minY;
            maxX =
                maxX === undefined
                    ? boxX + d.dom.BBoxHit.width
                    : maxX < boxX + d.dom.BBoxHit.width
                    ? boxX + d.dom.BBoxHit.width
                    : maxX;
            maxY =
                maxY === undefined
                    ? boxY + d.dom.BBoxHit.height
                    : maxY < boxY + d.dom.BBoxHit.height
                    ? boxY + d.dom.BBoxHit.height
                    : maxY;
        }
    }
    minX = minX === undefined ? 0 : minX;
    minY = minY === undefined ? 0 : minY;
    maxX = maxX === undefined ? 0 : maxX;
    maxY = maxY === undefined ? 0 : maxY;
    self.BBox.x = translateX + minX * scaleX;
    self.BBox.y = translateY + minY * scaleY;
    self.BBox.width = Math.abs(maxX - minX) * scaleX;
    self.BBox.height = Math.abs(maxY - minY) * scaleY;
    if (self.attr.transform && self.attr.transform.rotate) {
        self.BBoxHit = t2DGeometry.rotateBBox(this.BBox, this.attr.transform);
    } else {
        self.BBoxHit = this.BBox;
    }
};
const defaultColor = colorMap$1.rgba(0, 0, 0, 255);
function webGlAttrMapper(ctx, program, attr, attrObj) {
    let valType = attrObj.type;
    if (!valType) {
        valType = "FLOAT";
        if (attrObj.value instanceof Float32Array) {
            valType = "FLOAT";
        } else if (attrObj.value instanceof Int8Array) {
            valType = "BYTE";
        } else if (attrObj.value instanceof Int16Array) {
            valType = "SHORT";
        } else if (attrObj.value instanceof Uint8Array) {
            valType = "UNSIGNED_BYTE";
        } else if (attrObj.value instanceof Uint16Array) {
            valType = "UNSIGNED_SHORT";
        }
    }
    const buffer = ctx.createBuffer();
    const newAttrObj = {
        bufferType: ctx.ARRAY_BUFFER,
        buffer: buffer,
        drawType: ctx.STATIC_DRAW,
        valueType: ctx[valType],
        size: attrObj.size,
        attributeLocation: ctx.getAttribLocation(program, attr),
        value: attrObj.value,
        attr: attr,
    };
    return newAttrObj;
}
function webGlIndexMapper(ctx, program, attrObj) {
    let valType = "FLOAT";
    if (attrObj.value instanceof Float32Array) {
        valType = "FLOAT";
    } else if (attrObj.value instanceof Int8Array) {
        valType = "BYTE";
    } else if (attrObj.value instanceof Int16Array) {
        valType = "SHORT";
    } else if (attrObj.value instanceof Uint8Array) {
        valType = "UNSIGNED_BYTE";
    } else if (attrObj.value instanceof Uint16Array) {
        valType = "UNSIGNED_SHORT";
    }
    return {
        bufferType: ctx.ELEMENT_ARRAY_BUFFER,
        buffer: ctx.createBuffer(),
        drawType: ctx.STATIC_DRAW,
        valueType: ctx[valType],
        value: attrObj.value,
        count: attrObj.count,
        offset: attrObj.offset,
    };
}
function webGlUniformMapper(ctx, program, uniform, uniObj) {
    let type;
    const len = uniObj.size ? uniObj.size : uniObj.value.length;
    if (!uniObj.matrix) {
        if (uniObj.value instanceof TextureObject) {
            type = "uniform1i";
        } else if (uniObj.value instanceof Float32Array) {
            type = "uniform" + len + "fv";
        } else if (
            uniObj.value instanceof Int8Array ||
            uniObj.value instanceof Int16Array ||
            uniObj.value instanceof Uint8Array
        ) {
            type = "uniform" + len + "iv";
        } else if (!Number.isInteger(uniObj.value)) {
            type = "uniform1f";
        } else if (Number.isInteger(uniObj.value)) {
            type = "uniform1i";
        }
    } else {
        if (Number.isInteger(Math.sqrt(uniObj.value.length))) {
            type = "uniformMatrix" + Math.sqrt(uniObj.value.length) + "fv";
        } else {
            console.error("Not Square Matrix");
        }
    }
    return {
        matrix: uniObj.matrix,
        transpose: uniObj.transpose === undefined ? false : uniObj.transpose,
        type: type,
        value: uniObj.value,
        uniformLocation: ctx.getUniformLocation(program, uniform),
    };
}
function RenderWebglShader(ctx, shader, vDomIndex) {
    this.ctx = ctx;
    this.dom = {
        BBoxHit: {
            x: 0,
            y: 0,
            height: 0,
            width: 0,
        },
    };
    this.shader = shader;
    this.vDomIndex = vDomIndex;
    this.program = getProgram(ctx, shader);
    this.uniforms = {};
    this.attr = {};
    this.attrObjs = {};
    this.indexesObj = null;
    this.preDraw = shader.preDraw;
    this.postDraw = shader.postDraw;
    this.geometry = shader.geometry;
    this.renderTarget = shader.renderTarget;
    this.vao = ctx.createVertexArray();
    for (const uniform in shader.uniforms) {
        this.uniforms[uniform] = webGlUniformMapper(
            ctx,
            this.program,
            uniform,
            shader.uniforms[uniform]
        );
    }
    if (this.geometry) {
        if (
            this.geometry instanceof MeshGeometry ||
            this.geometry instanceof PointsGeometry ||
            this.geometry instanceof LineGeometry
        ) {
            this.attributes = this.geometry.attributes;
            this.indexes = this.geometry.indexes;
        } else {
            console.error("Wrong Geometry type");
        }
    }
    for (const attr in this.attributes) {
        this.attrObjs[attr] = webGlAttrMapper(ctx, this.program, attr, this.attributes[attr]);
        this.applyAttributeToVao(attr, this.attrObjs[attr]);
    }
    if (this.indexes) {
        this.indexesObj = webGlIndexMapper(ctx, this.program, this.indexes);
    }
}
RenderWebglShader.prototype = new ShaderNodePrototype();
RenderWebglShader.prototype.constructor = RenderWebglShader;
RenderWebglShader.prototype.applyAttributeToVao = function (attr, d) {
    this.ctx.bindVertexArray(this.vao);
    if (attr === "a_transformMatrix") {
        this.ctx.enableVertexAttribArray(d.attributeLocation + 0);
        this.ctx.enableVertexAttribArray(d.attributeLocation + 1);
        this.ctx.enableVertexAttribArray(d.attributeLocation + 2);
        this.ctx.bindBuffer(d.bufferType, d.buffer);
        this.ctx.bufferData(d.bufferType, d.value, d.drawType);
        this.ctx.vertexAttribPointer(
            d.attributeLocation + 0,
            d.size,
            d.valueType,
            false,
            d.size * 4 * 3,
            3 * 4 * 0
        );
        this.ctx.vertexAttribPointer(
            d.attributeLocation + 1,
            d.size,
            d.valueType,
            false,
            d.size * 4 * 3,
            3 * 4 * 1
        );
        this.ctx.vertexAttribPointer(
            d.attributeLocation + 2,
            d.size,
            d.valueType,
            false,
            d.size * 4 * 3,
            3 * 4 * 2
        );
    } else {
        this.ctx.enableVertexAttribArray(d.attributeLocation);
        this.ctx.bindBuffer(d.bufferType, d.buffer);
        this.ctx.bufferData(d.bufferType, d.value, d.drawType);
        this.ctx.vertexAttribPointer(d.attributeLocation, d.size, d.valueType, false, 0, 0);
    }
};
RenderWebglShader.prototype.useProgram = function () {
    this.ctx.useProgram(this.program);
};
RenderWebglShader.prototype.applyUniforms = function () {
    for (const uniform in this.uniforms) {
        if (this.uniforms[uniform].matrix) {
            this.ctx[this.uniforms[uniform].type](
                this.uniforms[uniform].uniformLocation,
                this.uniforms[uniform].transpose,
                this.uniforms[uniform].value
            );
        } else {
            if (this.uniforms[uniform].value instanceof TextureObject) {
                this.ctx[this.uniforms[uniform].type](
                    this.uniforms[uniform].uniformLocation,
                    this.uniforms[uniform].value.texture
                );
                this.uniforms[uniform].value.loadTexture();
            } else {
                this.ctx[this.uniforms[uniform].type](
                    this.uniforms[uniform].uniformLocation,
                    this.uniforms[uniform].value
                );
            }
        }
    }
};
RenderWebglShader.prototype.applyIndexes = function () {
    const d = this.indexesObj;
    this.ctx.bindBuffer(d.bufferType, d.buffer);
    this.ctx.bufferData(d.bufferType, d.value, d.drawType);
};
RenderWebglShader.prototype.draw = function () {
    this.ctx.drawArrays(
        this.ctx[this.geometry.drawType],
        this.geometry.drawRange[0],
        this.geometry.drawRange[1]
    );
};
RenderWebglShader.prototype.drawElements = function () {
    this.ctx.drawElements(
        this.ctx[this.geometry.drawType],
        this.indexesObj.count,
        this.indexesObj.type ? this.indexesObj.type : this.ctx.UNSIGNED_SHORT,
        this.indexesObj.offset
    );
};
RenderWebglShader.prototype.updateBBox = function () {
    return true;
};
RenderWebglShader.prototype.execute = function () {
    this.ctx.useProgram(this.program);
    this.applyUniforms();
    this.ctx.bindVertexArray(this.vao);
    if (this.renderTarget && this.renderTarget instanceof RenderTarget) {
        this.renderTarget.update();
    }
    if (this.indexesObj) {
        this.applyIndexes();
        this.drawElements();
    } else {
        this.draw();
    }
    if (this.renderTarget && this.renderTarget instanceof RenderTarget) {
        this.renderTarget.clear();
    }
    this.ctx.bindVertexArray(null);
};
RenderWebglShader.prototype.addUniform = function (key, value) {
    this.uniforms[key] = webGlUniformMapper(this.ctx, this.program, key, value);
    queueInstance$1.vDomChanged(this.vDomIndex);
};
RenderWebglShader.prototype.addAttribute = function (key, obj) {
    this.attributes[key] = obj;
    this.attrObjs[key] = webGlAttrMapper(this.ctx, this.program, key, obj);
    this.applyAttributeToVao(key, this.attrObjs[key]);
    queueInstance$1.vDomChanged(this.vDomIndex);
};
RenderWebglShader.prototype.setAttributeData = function (key, value) {
    const attrObj = this.attrObjs[key];
    this.attributes[key].value = value;
    this.attrObjs[key].value = value;
    this.ctx.bindBuffer(attrObj.bufferType, attrObj.buffer);
    this.ctx.bufferData(attrObj.bufferType, attrObj.value, attrObj.drawType);
    queueInstance$1.vDomChanged(this.vDomIndex);
};
RenderWebglShader.prototype.applyAttributeData = function (key, value) {
    this.attributes[key].value = value;
    this.attrObjs[key].value = value;
    const d = this.attrObjs[key];
    this.ctx.bindBuffer(d.bufferType, d.buffer);
    this.ctx.bufferData(d.bufferType, this.attributes[d.attr].value, d.drawType);
    this.ctx.enableVertexAttribArray(d.attributeLocation);
    this.ctx.vertexAttribPointer(d.attributeLocation, d.size, d.valueType, false, 0, 0);
};
RenderWebglShader.prototype.setUniformData = function (key, value) {
    this.uniforms[key].value = value;
    queueInstance$1.vDomChanged(this.vDomIndex);
};
RenderWebglShader.prototype.applyUniformData = function (uniform, value) {
    this.uniforms[uniform].value = value;
    if (this.uniforms[uniform].matrix) {
        this.ctx[this.uniforms[uniform].type](
            this.uniforms[uniform].uniformLocation,
            this.uniforms[uniform].transpose,
            this.uniforms[uniform].value
        );
    } else {
        this.ctx[this.uniforms[uniform].type](
            this.uniforms[uniform].uniformLocation,
            this.uniforms[uniform].value
        );
    }
};
function ShaderNodePrototype() {}
ShaderNodePrototype.prototype.setAttr = function (attr, value) {
    this.attr[attr] = value;
    if (attr === "transform") {
        const { translateX, translateY, scaleX, scaleY } = parseTransform$1(this.attr.transform);
        this.selftransform = new Float32Array([translateX, translateY, scaleX, scaleY]);
    }
};
ShaderNodePrototype.prototype.translate = function (trans) {
    this.attr.transform.translate = trans;
};
ShaderNodePrototype.prototype.scale = function (scale) {
    this.attr.transform.scale = scale;
};
ShaderNodePrototype.prototype.rotate = function (angle) {
    this.attr.transform.rotate = angle;
};
function addTransform(self, index, length, transform) {
    self.transform =
        self.transformTyped && self.transformTyped.length > 0
            ? Array.from(self.transformTyped)
            : self.transform;
    self.transformTyped = null;
    const len = index * length * 9;
    let i = 0;
    while (i < length) {
        self.transform[len + i * 9] = transform[0];
        self.transform[len + i * 9 + 1] = transform[1];
        self.transform[len + i * 9 + 2] = transform[2];
        self.transform[len + i * 9 + 3] = transform[3];
        self.transform[len + i * 9 + 4] = transform[4];
        self.transform[len + i * 9 + 5] = transform[5];
        self.transform[len + i * 9 + 6] = transform[6];
        self.transform[len + i * 9 + 7] = transform[7];
        self.transform[len + i * 9 + 8] = transform[8];
        i++;
    }
    self.addTransform_ = true;
    self.transformUpdate = true;
}
function updateTransform(self, index, length, transform) {
    const transform_ = self.addTransform_ ? self.transform : self.transformTyped;
    const len = index * length * 9;
    let i = 0;
    while (i < length) {
        transform_[len + i * 9] = transform[0];
        transform_[len + i * 9 + 1] = transform[1];
        transform_[len + i * 9 + 2] = transform[2];
        transform_[len + i * 9 + 3] = transform[3];
        transform_[len + i * 9 + 4] = transform[4];
        transform_[len + i * 9 + 5] = transform[5];
        transform_[len + i * 9 + 6] = transform[6];
        transform_[len + i * 9 + 7] = transform[7];
        transform_[len + i * 9 + 8] = transform[8];
        i++;
    }
    self.updateTransform_ = true;
}
function clearTransform(self, index, length) {
    const transform_ = self.addTransform_ ? self.transform : self.transformTyped;
    const len = index * length * 9;
    let i = 0;
    while (i < length) {
        transform_[len + i * 9] = undefined;
        transform_[len + i * 9 + 1] = undefined;
        transform_[len + i * 9 + 2] = undefined;
        transform_[len + i * 9 + 3] = undefined;
        transform_[len + i * 9 + 4] = undefined;
        transform_[len + i * 9 + 5] = undefined;
        transform_[len + i * 9 + 6] = undefined;
        transform_[len + i * 9 + 7] = undefined;
        transform_[len + i * 9 + 8] = undefined;
        i++;
    }
    self.clearTransform_ = true;
    self.filterTransformUpdate = true;
}
function transformExec(self) {
    if (self.addTransform_) {
        if (self.clearTransform_) {
            self.transform = self.transform.filter(function (d) {
                return !isNaN(d);
            });
            self.clearTransform_ = false;
        }
        self.transformTyped = new Float32Array(self.transform);
        self.transform = [];
        self.addTransform_ = false;
        self.updateTransform_ = false;
        self.shaderInstance.setAttributeData("a_transformMatrix", self.transformTyped);
    }
    if (self.clearTransform_) {
        self.transformTyped = self.transformTyped.filter(function (d) {
            return !isNaN(d);
        });
        self.clearTransform_ = false;
        self.shaderInstance.setAttributeData("a_transformMatrix", self.transformTyped);
    }
    if (self.updateTransform_) {
        self.shaderInstance.setAttributeData("a_transformMatrix", self.transformTyped);
        self.updateTransform_ = false;
    }
}
function addVertex(self, index, length, ver) {
    self.positionArray =
        self.typedPositionArray && self.typedPositionArray.length > 0
            ? Array.from(self.typedPositionArray)
            : self.positionArray;
    self.typedPositionArray = null;
    const b = index * length * 2;
    let i = 0;
    while (i < ver.length) {
        self.positionArray[b + i] = ver[i];
        i++;
    }
    self.addVertex_ = true;
}
function updateVertex(self, index, length, ver) {
    const positionArray = self.addVertex_ ? self.positionArray : self.typedPositionArray;
    const b = index * length * 2;
    let i = 0;
    if (isNaN(positionArray[b])) {
        console.log("overriding Nan");
    }
    while (i < ver.length) {
        positionArray[b + i] = ver[i];
        i++;
    }
    self.updateVertex_ = true;
}
function clearVertex(self, index, length) {
    const positionArray = self.addVertex_ ? self.positionArray : self.typedPositionArray;
    const b = index * length * 2;
    let i = 0;
    while (i < length) {
        positionArray[b + i * 2] = undefined;
        positionArray[b + i * 2 + 1] = undefined;
        i++;
    }
    self.filterVertex_ = true;
}
function vertexExec(self) {
    if (self.addVertex_) {
        if (self.filterVertex_) {
            self.positionArray = self.positionArray.filter(function (d) {
                return !isNaN(d);
            });
            self.filterVertex_ = false;
        }
        self.typedPositionArray = new Float32Array(self.positionArray);
        self.positionArray = [];
        self.addVertex_ = false;
        self.updateVertex_ = false;
        self.shaderInstance.setAttributeData("a_position", self.typedPositionArray);
    }
    if (self.filterVertex_) {
        self.typedPositionArray = self.typedPositionArray.filter(function (d) {
            return !isNaN(d);
        });
        self.filterVertex_ = false;
        self.shaderInstance.setAttributeData("a_position", self.typedPositionArray);
    }
    if (self.updateVertex_) {
        self.shaderInstance.setAttributeData("a_position", self.typedPositionArray);
        self.updateVertex_ = false;
    }
}
function addColors(self, index, length, fillStyle) {
    self.colorArray =
        self.typedColorArray && self.typedColorArray.length > 0
            ? Array.from(self.typedColorArray)
            : self.colorArray;
    self.typedColorArray = null;
    const b = index * length * 4;
    let i = 0;
    fillStyle = colorMap$1.colorToRGB(fillStyle);
    while (i < length) {
        self.colorArray[b + i * 4] = fillStyle.r / 255;
        self.colorArray[b + i * 4 + 1] = fillStyle.g / 255;
        self.colorArray[b + i * 4 + 2] = fillStyle.b / 255;
        self.colorArray[b + i * 4 + 3] = fillStyle.a === undefined ? 1 : fillStyle.a / 255;
        i++;
    }
    self.addColor_ = true;
}
function updateColor(self, index, length, fillStyle) {
    const colorArray = self.addColor_ ? self.colorArray : self.typedColorArray;
    const ti = index * length * 4;
    if (isNaN(colorArray[ti])) {
        console.log("overriding Nan");
    }
    const b = index * length * 4;
    let i = 0;
    while (i < length) {
        colorArray[b + i * 4] = fillStyle.r / 255;
        colorArray[b + i * 4 + 1] = fillStyle.g / 255;
        colorArray[b + i * 4 + 2] = fillStyle.b / 255;
        colorArray[b + i * 4 + 3] = fillStyle.a === undefined ? 1 : fillStyle.a / 255;
        i++;
    }
    self.updateColor_ = true;
}
function clearColor(self, index, length) {
    const colorArray = self.addColor_ ? self.colorArray : self.typedColorArray;
    const ti = index * length * 4;
    if (isNaN(colorArray[ti])) {
        console.log("overriding Nan");
    }
    const b = index * length * 4;
    let i = 0;
    while (i < length) {
        colorArray[b + i * 4] = undefined;
        colorArray[b + i * 4 + 1] = undefined;
        colorArray[b + i * 4 + 2] = undefined;
        colorArray[b + i * 4 + 3] = undefined;
        i++;
    }
    self.filterColor_ = true;
}
function colorExec(self) {
    if (self.addColor_) {
        if (self.filterColor_) {
            self.colorArray = self.colorArray.filter(function (d) {
                return !isNaN(d);
            });
            self.filterColor_ = false;
        }
        self.typedColorArray = new Float32Array(self.colorArray);
        self.colorArray = [];
        self.addColor_ = false;
        self.updateColor_ = false;
        self.shaderInstance.setAttributeData("a_color", self.typedColorArray);
    }
    if (self.filterColor_) {
        self.typedColorArray = self.typedColorArray.filter(function (d) {
            return !isNaN(d);
        });
        self.shaderInstance.setAttributeData("a_color", self.typedColorArray);
        self.filterColor_ = false;
    }
    if (self.updateColor_) {
        self.shaderInstance.setAttributeData("a_color", self.typedColorArray);
        self.updateColor_ = false;
    }
}
function RenderWebglPoints(ctx, attr, style, vDomIndex) {
    this.ctx = ctx;
    this.dom = {};
    this.attr = attr || {};
    this.style = style || {};
    this.vDomIndex = vDomIndex;
    this.indexBased = true;
    this.transform = [];
    this.selftransform = [0, 0, 1, 1];
    if (!this.attr.transform) {
        this.attr.transform = {
            translate: [0.0, 0.0],
            scale: [1.0, 1.0],
        };
    }
    this.geometry = new PointsGeometry();
    this.geometry.setAttr("a_color", {
        value: new Float32Array([]),
        size: 4,
    });
    this.geometry.setAttr("a_size", {
        value: new Float32Array([]),
        size: 1,
    });
    this.geometry.setAttr("a_position", {
        value: new Float32Array([]),
        size: 2,
    });
    this.geometry.setAttr("a_transformMatrix", {
        value: new Float32Array(this.transform),
        size: 3,
    });
    this.shaderInstance = new RenderWebglShader(
        ctx,
        {
            fragmentShader: shaders("point").fragmentShader,
            vertexShader: shaders("point").vertexShader,
            uniforms: {},
            geometry: this.geometry,
        },
        vDomIndex
    );
    this.positionArray = [];
    this.colorArray = [];
    this.pointsSize = [];
    this.transform = [];
    this.vertexUpdate = true;
    this.colorUpdate = true;
    this.sizeUpdate = true;
    this.transformUpdate = true;
}
RenderWebglPoints.prototype = new ShaderNodePrototype();
RenderWebglPoints.prototype.constructor = RenderWebglPoints;
RenderWebglPoints.prototype.clear = function (index) {
    clearColor(this, index, 1);
    clearVertex(this, index, 1);
    clearTransform(this, index, 1);
    const sizeArray = this.sizeUpdate ? this.pointsSize : this.typedSizeArray;
    sizeArray[index] = undefined;
    this.filterSizeFlag = true;
};
RenderWebglPoints.prototype.addTransform = function (transform, index) {
    addTransform(this, index, 1, transform);
};
RenderWebglPoints.prototype.updateTransform = function (index, transform) {
    updateTransform(this, index, 1, transform);
};
RenderWebglPoints.prototype.updateVertex = function (index, x, y) {
    updateVertex(this, index, 1, [x, y]);
};
RenderWebglPoints.prototype.updateSize = function (index, size) {
    const sizeArray = this.sizeUpdate ? this.pointsSize : this.typedSizeArray;
    sizeArray[index] = size;
};
RenderWebglPoints.prototype.updateColor = function (index, fillStyle) {
    updateColor(this, index, 1, fillStyle);
};
RenderWebglPoints.prototype.addVertex = function (x, y, index) {
    addVertex(this, index, 1, [x, y]);
};
RenderWebglPoints.prototype.addSize = function (size, index) {
    this.pointsSize =
        this.typedSizeArray && this.typedSizeArray.length > 0
            ? Array.from(this.typedSizeArray)
            : this.pointsSize;
    this.pointsSize[index] = size;
    this.sizeUpdate = true;
};
RenderWebglPoints.prototype.addColors = function (fillStyle, index) {
    addColors(this, index, 1, fillStyle);
};
RenderWebglPoints.prototype.execute = function () {
    if (this.renderTarget && this.renderTarget instanceof RenderTarget) {
        this.renderTarget.update();
    }
    vertexExec(this);
    colorExec(this);
    transformExec(this);
    if (this.sizeUpdate) {
        if (this.filterSizeFlag) {
            this.pointsSize = this.pointsSize.filter(function (d) {
                return !isNaN(d);
            });
            this.filterSizeFlag = false;
        }
        this.typedSizeArray = new Float32Array(this.pointsSize);
        this.pointsSize = [];
        this.sizeUpdate = false;
    }
    if (this.filterSizeFlag) {
        this.typedSizeArray = this.typedSizeArray.filter(function (d) {
            return !isNaN(d);
        });
        this.filterSizeFlag = false;
    }
    this.shaderInstance.setAttributeData("a_size", this.typedSizeArray);
    this.geometry.setDrawRange(0, (this.typedPositionArray?.length ?? 0) / 2);
    this.shaderInstance.execute();
    if (this.renderTarget && this.renderTarget instanceof RenderTarget) {
        this.renderTarget.update();
    }
};
function RenderWebglRects(ctx, attr, style, renderTarget, vDomIndex) {
    this.ctx = ctx;
    this.dom = {};
    this.positionArray = [];
    this.colorArray = [];
    this.transform = [];
    this.rotate = [];
    this.attr = attr || {};
    this.style = style || {};
    this.vDomIndex = vDomIndex;
    this.renderTarget = renderTarget;
    this.indexBased = true;
    this.selftransform = [0, 0, 1, 1];
    this.geometry = new MeshGeometry();
    this.geometry.setAttr("a_transformMatrix", {
        value: new Float32Array([]),
        size: 3,
    });
    this.geometry.setAttr("a_color", {
        value: new Float32Array(this.colorArray),
        size: 4,
    });
    this.geometry.setAttr("a_position", {
        value: new Float32Array(this.positionArray),
        size: 2,
    });
    this.geometry.setDrawRange(0, (this.positionArray?.length??0) / 2);
    this.shaderInstance = new RenderWebglShader(
        ctx,
        {
            fragmentShader: shaders("rect").fragmentShader,
            vertexShader: shaders("rect").vertexShader,
            uniforms: {},
            geometry: this.geometry,
        },
        vDomIndex
    );
}
RenderWebglRects.prototype = new ShaderNodePrototype();
RenderWebglRects.prototype.constructor = RenderWebglRects;
RenderWebglRects.prototype.clear = function (index) {
    clearColor(this, index, 6);
    clearVertex(this, index, 6);
    clearTransform(this, index, 6);
};
RenderWebglRects.prototype.updateVertex = function (index, x, y, width, height) {
    const x1 = x + width;
    const y1 = y + height;
    updateVertex(this, index, 6, [x, y, x1, y, x, y1, x, y1, x1, y, x1, y1]);
};
RenderWebglRects.prototype.updateTransform = function (index, transform) {
    updateTransform(this, index, 6, transform);
};
RenderWebglRects.prototype.addTransform = function (transform, index) {
    addTransform(this, index, 6, transform);
};
RenderWebglRects.prototype.updateColor = function (index, fillStyle) {
    updateColor(this, index, 6, fillStyle);
};
RenderWebglRects.prototype.addVertex = function (x, y, width, height, index) {
    const x1 = x + width;
    const y1 = y + height;
    addVertex(this, index, 6, [x, y, x1, y, x, y1, x, y1, x1, y, x1, y1]);
};
RenderWebglRects.prototype.addColors = function (fillStyle, index) {
    addColors(this, index, 6, fillStyle);
};
RenderWebglRects.prototype.execute = function () {
    if (this.renderTarget && this.renderTarget instanceof RenderTarget) {
        this.renderTarget.update();
    }
    colorExec(this);
    transformExec(this);
    vertexExec(this);
    this.geometry.setDrawRange(0, (this.typedPositionArray?.length??0) / 2);
    this.shaderInstance.execute();
    if (this.renderTarget && this.renderTarget instanceof RenderTarget) {
        this.renderTarget.clear();
    }
};
function RenderWebglLines(ctx, attr, style, renderTarget, vDomIndex) {
    this.ctx = ctx;
    this.dom = {};
    this.attr = attr || {};
    this.style = style || {};
    this.vDomIndex = vDomIndex;
    this.positionArray = [];
    this.colorArray = [];
    this.transform = [];
    this.vertexUpdate = true;
    this.colorUpdate = true;
    this.renderTarget = renderTarget;
    this.indexBased = true;
    this.selftransform = new Float32Array([0, 0, 1, 1]);
    this.geometry = new LineGeometry();
    this.geometry.setAttr("a_color", {
        value: new Float32Array(this.colorArray),
        size: 4,
    });
    this.geometry.setAttr("a_position", {
        value: new Float32Array(this.positionArray),
        size: 2,
    });
    this.geometry.setAttr("a_transformMatrix", {
        value: new Float32Array(this.transform),
        size: 3,
    });
    this.geometry.setDrawRange(0, (this.positionArray?.length??0) / 2);
    this.shaderInstance = new RenderWebglShader(
        ctx,
        {
            fragmentShader: shaders("line").fragmentShader,
            vertexShader: shaders("line").vertexShader,
            uniforms: {},
            geometry: this.geometry,
        },
        vDomIndex
    );
}
RenderWebglLines.prototype = new ShaderNodePrototype();
RenderWebglLines.prototype.constructor = RenderWebglLines;
RenderWebglLines.prototype.clear = function (index) {
    clearColor(this, index, 2);
    clearVertex(this, index, 2);
};
RenderWebglLines.prototype.updateTransform = function (index, transform) {
    updateTransform(this, index, 2, transform);
};
RenderWebglLines.prototype.addTransform = function (transform, index) {
    addTransform(this, index, 2, transform);
};
RenderWebglLines.prototype.updateVertex = function (index, x1, y1, x2, y2) {
    updateVertex(this, index, 2, [x1, y1, x2, y2]);
};
RenderWebglLines.prototype.updateColor = function (index, strokeStyle) {
    updateColor(this, index, 2, strokeStyle);
};
RenderWebglLines.prototype.addVertex = function (x1, y1, x2, y2, index) {
    addVertex(this, index, 2, [x1, y1, x2, y2]);
};
RenderWebglLines.prototype.addColors = function (strokeStyle, index) {
    addColors(this, index, 2, strokeStyle);
};
RenderWebglLines.prototype.execute = function () {
    if (this.renderTarget && this.renderTarget instanceof RenderTarget) {
        this.renderTarget.update();
    }
    vertexExec(this);
    colorExec(this);
    transformExec(this);
    this.geometry.setDrawRange(0, (this.typedPositionArray?.length??0) / 2);
    this.shaderInstance.execute();
    if (this.renderTarget && this.renderTarget instanceof RenderTarget) {
        this.renderTarget.clear();
    }
};
function RenderWebglPolyLines(ctx, attr, style, renderTarget, vDomIndex) {
    this.ctx = ctx;
    this.dom = {};
    this.attr = attr || {};
    this.style = style || {};
    this.vDomIndex = vDomIndex;
    this.positionArray = [];
    this.colorArray = [];
    this.renderTarget = renderTarget;
    this.indexBased = false;
    this.geometry = new LineGeometry();
    this.geometry.drawType = "LINE_STRIP";
    this.geometry.setAttr("a_position", {
        value: new Float32Array(this.positionArray),
        size: 2,
    });
    this.geometry.setDrawRange(0, (this.positionArray?.length??0) / 2);
    this.shaderInstance = new RenderWebglShader(
        ctx,
        {
            fragmentShader: shaders("polyline").fragmentShader,
            vertexShader: shaders("polyline").vertexShader,
            uniforms: {
                u_transformMatrix: {
                    value: new Float32Array(m3.identity()),
                    matrix: true,
                },
                u_color: {
                    value: new Float32Array(4),
                },
            },
            geometry: this.geometry,
        },
        vDomIndex
    );
}
RenderWebglPolyLines.prototype = new ShaderNodePrototype();
RenderWebglPolyLines.prototype.constructor = RenderWebglPolyLines;
RenderWebglPolyLines.prototype.execute = function (stack) {
    if (this.renderTarget && this.renderTarget instanceof RenderTarget) {
        this.renderTarget.update();
    }
    for (let i = 0, len = stack.length; i < len; i++) {
        this.shaderInstance.setUniformData("u_transformMatrix", stack[i].dom.transformMatrix);
        this.shaderInstance.setAttributeData("a_position", stack[i].dom.points);
        this.shaderInstance.setUniformData("u_color", stack[i].dom.color);
        this.geometry.setDrawRange(0, stack[i].dom.points.length / 2);
        this.shaderInstance.execute();
    }
    if (this.renderTarget && this.renderTarget instanceof RenderTarget) {
        this.renderTarget.clear();
    }
};
function RenderWebglPolygons(ctx, attr, style, renderTarget, vDomIndex) {
    this.ctx = ctx;
    this.dom = {};
    this.attr = attr || {};
    this.style = style || {};
    this.vDomIndex = vDomIndex;
    this.colorArray = [];
    this.positionArray = [];
    this.renderTarget = renderTarget;
    this.indexBased = false;
    this.geometry = new MeshGeometry();
    this.geometry.setAttr("a_position", {
        value: new Float32Array([]),
        size: 2,
    });
    this.shaderInstance = new RenderWebglShader(
        ctx,
        {
            fragmentShader: shaders("polygon").fragmentShader,
            vertexShader: shaders("polygon").vertexShader,
            uniforms: {
                u_transformMatrix: {
                    value: new Float32Array(m3.identity()),
                    matrix: true,
                },
                u_color: {
                    value: new Float32Array(4),
                },
            },
            geometry: this.geometry,
        },
        vDomIndex
    );
}
RenderWebglPolygons.prototype = new ShaderNodePrototype();
RenderWebglPolygons.prototype.constructor = RenderWebglPolygons;
RenderWebglPolygons.prototype.execute = function (stack) {
    if (this.renderTarget && this.renderTarget instanceof RenderTarget) {
        this.renderTarget.update();
    }
    this.shaderInstance.useProgram();
    for (let i = 0, len = stack.length; i < len; i++) {
        this.shaderInstance.setUniformData("u_transformMatrix", stack[i].dom.transformMatrix);
        this.shaderInstance.setAttributeData("a_position", stack[i].dom.points);
        this.shaderInstance.setUniformData("u_color", stack[i].dom.color);
        this.geometry.setDrawRange(0, stack[i].dom.points.length / 2);
        this.shaderInstance.execute();
    }
    if (this.renderTarget && this.renderTarget instanceof RenderTarget) {
        this.renderTarget.clear();
    }
};
function RenderWebglCircles(ctx, attr, style, renderTarget, vDomIndex) {
    this.ctx = ctx;
    this.dom = {};
    this.attr = attr || {};
    this.style = style || {};
    this.vDomIndex = vDomIndex;
    this.positionArray = [];
    this.colorArray = [];
    this.transform = [];
    this.pointsSize = [];
    this.renderTarget = renderTarget;
    this.indexBased = true;
    this.geometry = new PointsGeometry();
    this.geometry.setAttr("a_transformMatrix", {
        value: new Float32Array(this.transform),
        size: 3,
    });
    this.geometry.setAttr("a_color", {
        value: new Float32Array(this.colorArray),
        size: 4,
    });
    this.geometry.setAttr("a_radius", {
        value: new Float32Array(this.pointsSize),
        size: 1,
    });
    this.geometry.setAttr("a_position", {
        value: new Float32Array(this.positionArray),
        size: 2,
    });
    this.geometry.setDrawRange(0, 0);
    this.shaderInstance = new RenderWebglShader(
        ctx,
        {
            fragmentShader: shaders("circle").fragmentShader,
            vertexShader: shaders("circle").vertexShader,
            uniforms: {},
            geometry: this.geometry,
        },
        vDomIndex
    );
}
RenderWebglCircles.prototype = new ShaderNodePrototype();
RenderWebglCircles.prototype.constructor = RenderWebglCircles;
RenderWebglCircles.prototype.clear = function (index) {
    clearColor(this, index, 1);
    clearVertex(this, index, 1);
    clearTransform(this, index, 1);
    const sizeArray = this.sizeUpdate ? this.pointsSize : this.typedSizeArray;
    sizeArray[index] = undefined;
    this.filterSizeFlag = true;
};
RenderWebglCircles.prototype.updateTransform = function (index, transform) {
    updateTransform(this, index, 1, transform);
};
RenderWebglCircles.prototype.addTransform = function (transform, index) {
    addTransform(this, index, 1, transform);
};
RenderWebglCircles.prototype.updateVertex = function (index, x, y) {
    updateVertex(this, index, 1, [x, y]);
};
RenderWebglCircles.prototype.updateColor = function (index, fillStyle) {
    updateColor(this, index, 1, fillStyle);
};
RenderWebglCircles.prototype.updateSize = function (index, value) {
    const sizeArray = this.sizeUpdate ? this.pointsSize : this.typedSizeArray;
    sizeArray[index] = value;
};
RenderWebglCircles.prototype.addVertex = function (x, y, index) {
    addVertex(this, index, 1, [x, y]);
};
RenderWebglCircles.prototype.addSize = function (size, index) {
    this.pointsSize =
        this.typedSizeArray && this.typedSizeArray.length > 0
            ? Array.from(this.typedSizeArray)
            : this.pointsSize;
    this.pointsSize[index] = size;
    this.sizeUpdate = true;
};
RenderWebglCircles.prototype.addColors = function (fillStyle, index) {
    addColors(this, index, 1, fillStyle);
};
RenderWebglCircles.prototype.execute = function () {
    if (this.renderTarget && this.renderTarget instanceof RenderTarget) {
        this.renderTarget.update();
    }
    vertexExec(this);
    colorExec(this);
    transformExec(this);
    if (this.sizeUpdate) {
        if (this.filterSizeFlag) {
            this.pointsSize = this.pointsSize.filter(function (d) {
                return !isNaN(d);
            });
            this.filterSizeFlag = false;
        }
        this.typedSizeArray = new Float32Array(this.pointsSize);
        this.pointsSize = [];
        this.sizeUpdate = false;
    }
    if (this.filterSizeFlag) {
        this.typedSizeArray = this.typedSizeArray.filter(function (d) {
            return !isNaN(d);
        });
        this.filterSizeFlag = false;
    }
    this.shaderInstance.setAttributeData("a_radius", this.typedSizeArray);
    this.geometry.setDrawRange(0, (this.typedPositionArray?.length??0) / 2);
    this.shaderInstance.execute();
    if (this.renderTarget && this.renderTarget instanceof RenderTarget) {
        this.renderTarget.clear();
    }
};
function RenderWebglImages(ctx, attr, style, renderTarget, vDomIndex) {
    this.ctx = ctx;
    this.dom = {};
    this.attr = attr || {};
    this.style = style || {};
    this.vDomIndex = vDomIndex;
    this.textCoor = new Float32Array([0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0]);
    this.renderTarget = renderTarget;
    this.indexBased = false;
    this.geometry = new MeshGeometry();
    this.geometry.setAttr("a_texCoord", {
        value: this.textCoor,
        size: 2,
    });
    this.geometry.setAttr("a_position", {
        value: new Float32Array([0, 0]),
        size: 2,
    });
    this.geometry.setDrawRange(0, 6);
    this.shaderInstance = new RenderWebglShader(
        ctx,
        {
            fragmentShader: shaders("image").fragmentShader.trim(),
            vertexShader: shaders("image").vertexShader.trim(),
            uniforms: {
                u_transformMatrix: {
                    value: new Float32Array(m3.identity()),
                    matrix: true,
                },
                u_image: {
                    value: new TextureObject(this.ctx, {}, this.vDomIndex),
                },
                u_opacity: {
                    value: (1.0).toFixed(2),
                },
            },
            geometry: this.geometry,
        },
        vDomIndex
    );
    this.positionArray = [];
    this.vertexUpdate = true;
}
RenderWebglImages.prototype = new ShaderNodePrototype();
RenderWebglImages.prototype.constructor = RenderWebglImages;
RenderWebglImages.prototype.execute = function (stack) {
    if (this.renderTarget && this.renderTarget instanceof RenderTarget) {
        this.renderTarget.update();
    }
    this.shaderInstance.useProgram();
    this.shaderInstance.applyAttributeData("a_texCoord", this.textCoor);
    const gOp = this.style.opacity !== undefined ? this.style.opacity : 1.0;
    let prevTexture;
    for (let i = 0, len = stack.length; i < len; i++) {
        const node = stack[i];
        if (!node.dom.textureNode || !node.dom.textureNode.updated) {
            continue;
        }
        if (node.style.display === "none") {
            continue;
        }
        this.shaderInstance.applyUniformData("u_transformMatrix", node.dom.transformMatrix);
        if (node.dom.textureNode !== prevTexture) {
            node.dom.textureNode.loadTexture();
            prevTexture = node.dom.textureNode;
            this.shaderInstance.applyUniformData("u_image", node.dom.textureNode);
        }
        this.shaderInstance.applyAttributeData("a_position", node.dom.positionArray);
        this.shaderInstance.applyUniformData(
            "u_opacity",
            ((node.style.opacity !== undefined ? node.style.opacity : 1.0) * gOp).toFixed(2)
        );
        this.shaderInstance.draw();
    }
    if (this.renderTarget && this.renderTarget instanceof RenderTarget) {
        this.renderTarget.clear();
    }
};
function getTypeShader(ctx, attr, style, type, renderTarget, vDomIndex) {
    let e;
    switch (type) {
        case "rect":
            e = new RenderWebglRects(ctx, attr, style, renderTarget, vDomIndex);
            break;
        case "point":
            e = new RenderWebglPoints(ctx, attr, style, renderTarget);
            break;
        case "line":
            e = new RenderWebglLines(ctx, attr, style, renderTarget, vDomIndex);
            break;
        case "polyline":
            e = new RenderWebglPolyLines(ctx, attr, style, renderTarget, vDomIndex);
            break;
        case "path":
            e = new RenderWebglImages(ctx, attr, style, renderTarget, vDomIndex);
            break;
        case "polygon":
            e = new RenderWebglPolygons(ctx, attr, style, renderTarget, vDomIndex);
            break;
        case "circle":
            e = new RenderWebglCircles(ctx, attr, style, renderTarget, vDomIndex);
            break;
        case "image":
            e = new RenderWebglImages(ctx, attr, style, renderTarget, vDomIndex);
            break;
        case "text":
            e = new RenderWebglImages(ctx, attr, style, renderTarget, vDomIndex);
            break;
        default:
            e = null;
            break;
    }
    return e;
}
function WebglNodeExe(ctx, config, id, vDomIndex) {
    this.ctx = ctx;
    this.id = id;
    this.nodeName = config.el;
    this.nodeType = "WEBGL";
    this.children = [];
    this.ctx = ctx;
    this.vDomIndex = vDomIndex;
    this.el = config.el;
    this.shaderType = config.shaderType;
    this.exeCtx = config.ctx;
    this.bbox = config.bbox !== undefined ? config.bbox : true;
    this.events = {};
    let style = {};
    if (config.style) {
        for(let key in config.style) {
            let resKey = canvasStyleMapper[key] || key;
            let value = config.style[key];
            if ((resKey === "fillStyle" || resKey === "strokeStyle") && !colorMap$1.RGBAInstanceCheck(value) ) {
                value = colorMap$1.colorToRGB(value);
            }
            style[resKey] = value;
        }
    }
    this.style = prepObjProxyWebGl('style', {}, this, true);
    this.attr = prepObjProxyWebGl('attr', {}, this, true);
    if (style) {
        this.setStyle(style);
    }
    if (config.attr) {
        this.setAttr(config.attr);
    }
    switch (config.el) {
        case "point":
            this.dom = new PointNode(this.ctx, this.attr, this.style);
            break;
        case "rect":
            this.dom = new RectNode(this.ctx, this.attr, this.style);
            break;
        case "line":
            this.dom = new LineNode(this.ctx, this.attr, this.style);
            break;
        case "polyline":
            this.dom = new PolyLineNode(this.ctx, this.attr, this.style);
            break;
        case "polygon":
            this.dom = new PolygonNode(this.ctx, this.attr, this.style);
            break;
        case "path":
            this.dom = new PathNode(this.ctx, this.attr, this.style);
            break;
        case "circle":
            this.dom = new CircleNode(this.ctx, this.attr, this.style);
            break;
        case "image":
            this.dom = new ImageNode(this.ctx, this.attr, this.style, vDomIndex);
            break;
        case "text":
            this.dom = new TextNode(this.ctx, this.attr, this.style, vDomIndex);
            break;
        case "group":
            this.dom = new WebglGroupNode(
                this.ctx,
                this.attr,
                this.style,
                config.renderTarget,
                vDomIndex
            );
            break;
        default:
            this.dom = null;
            break;
    }
    this.dom.nodeExe = this;
    if (!(this.dom instanceof WebglGroupNode)) {
        delete this.createEl;
        delete this.createEls;
    }
}
WebglNodeExe.prototype = new NodePrototype();
WebglNodeExe.prototype.reIndexChildren = function (shader) {
    const childParent = shader || this;
    let children = childParent.children;
    children = children.filter(function (d) {
        return d;
    });
    for (var i = 0, len = children.length; i < len; i++) {
        children[i].dom.pindex = i;
    }
    childParent.children = children;
};
WebglNodeExe.prototype.applyTransformationMatrix = function (matrix) {
    this.dom.applyTransformationMatrix(matrix);
    this.children.forEach(function (d) {
        d.applyTransformationMatrix(self.dom.transformMatrix);
    });
};
WebglNodeExe.prototype.setAttr = function WsetAttr(attr, value) {
    if (arguments.length === 2) {
        this.attr[attr] = value;
    } else if (arguments.length === 1 && typeof attr === "object") {
        for (const key in attr) {
            this.attr[key] = attr[key];
        }
    }
    return this;
};
WebglNodeExe.prototype.scale = function Cscale(XY) {
    if (!this.attr.transform) {
        this.attr.transform = prepObjProxyWebGl('transform', {}, this, true);
    }
    this.attr.transform.scale = XY;
    return this;
};
WebglNodeExe.prototype.translate = function Ctranslate(XY) {
    if (!this.attr.transform) {
        this.attr.transform = prepObjProxyWebGl('transform', {}, this, true);
    }
    this.attr.transform.translate = XY;
    return this;
};
WebglNodeExe.prototype.rotate = function Crotate(angleXY) {
    if (!this.attr.transform) {
        this.attr.transform = prepObjProxyWebGl('transform', {}, this, true);
    }
    this.attr.transform.rotate = angleXY;
    return this;
};
WebglNodeExe.prototype.setStyle = function WsetStyle(attr, value) {
    if (arguments.length === 2) {
        this.style[attr] = value;
    } else if (arguments.length === 1 && typeof attr === "object") {
        for (const key in attr) {
            this.style[key] = attr[key];
        }
    }
    return this;
};
WebglNodeExe.prototype.setReIndex = function () {
    this.reindex = true;
};
WebglNodeExe.prototype.updateBBox = function CupdateBBox() {
    let status;
    if (this.bbox) {
        for (let i = 0, len = this.children.length; i < len; i += 1) {
            if (this.children[i]) {
                status = this.children[i].updateBBox() || status;
            }
        }
        if (this.BBoxUpdate || status) {
            this.dom.updateBBox(this.children);
            this.BBoxUpdate = false;
            return true;
        }
    }
    return false;
};
WebglNodeExe.prototype.in = function Cinfun(co) {
    return this.dom.in(co);
};
WebglNodeExe.prototype.on = function Con(eventType, hndlr) {
    const self = this;
    if (!this.events) {
        this.events = {};
    }
    if (hndlr === null && this.events[eventType] !== null) {
        delete this.events[eventType];
    } else if (hndlr) {
        if (typeof hndlr === "function") {
            const hnd = hndlr.bind(self);
            this.events[eventType] = function (event) {
                hnd(event);
            };
        } else if (typeof hndlr === "object") {
            this.events[eventType] = hndlr;
            if (
                hndlr.constructor === zoomInstance$1.constructor ||
                hndlr.constructor === dragInstance$1.constructor
            ) {
                hndlr.bindMethods(this);
            }
        }
    }
    return this;
};
WebglNodeExe.prototype.execute = function Cexecute() {
    if (this.style.display === "none") {
        return;
    }
    if (!this.dom.shader && !this.dom.shaderGroup && this.dom instanceof WebglGroupNode) {
        for (let i = 0, len = this.children.length; i < len; i += 1) {
            this.children[i].execute();
        }
    } else if (this.dom.shader && this.dom instanceof WebglGroupNode) {
        if (this.reindex) {
            this.reIndexChildren();
            this.reindex = false;
        }
        if (this.exeCtx) {
            this.exeCtx(this.ctx);
        }
        this.dom.shader.execute(this.children);
    } else if (this.dom.shaderGroup && this.dom instanceof WebglGroupNode) {
        if (this.exeCtx) {
            this.exeCtx(this.ctx);
        }
        for (const key in this.dom.shaderGroup) {
            const shad = this.dom.shaderGroup[key];
            if (shad.reindex) {
                this.reIndexChildren(shad);
                shad.reindex = false;
            }
            shad.shader.execute(shad.children);
        }
    }
};
WebglNodeExe.prototype.child = function child(childrens) {
    const self = this;
    let node;
    if (self.dom instanceof WebglGroupNode) {
        for (let i = 0; i < childrens.length; i += 1) {
            node = childrens[i];
            node.dom.parent = self;
            self.children[self.children.length] = node;
            node.dom.pindex = self.children.length - 1;
            node.vDomIndex = self.vDomIndex;
            if (!(node instanceof RenderWebglShader) && !(node.dom instanceof WebglGroupNode)) {
                if (this.dom.shader) {
                    if (node.el === this.dom.shader.attr.shaderType) {
                        node.dom.setShader(this.dom.shader);
                    } else {
                        console.warn(
                            "wrong el type '" +
                                node.el +
                                "' being added to shader group - '" +
                                this.dom.shader.attr.shaderType +
                                "'"
                        );
                        self.children.pop();
                    }
                } else {
                    if (!this.dom.shaderGroup) {
                        this.dom.shaderGroup = {};
                    }
                    if (!this.dom.shaderGroup[node.el]) {
                        this.dom.shaderGroup[node.el] = {
                            children: [],
                            shader: getTypeShader(
                                self.ctx,
                                self.attr,
                                self.style,
                                node.el,
                                self.renderTarget,
                                self.vDomIndex
                            ),
                        };
                    }
                    this.dom.shaderGroup[node.el].children[
                        this.dom.shaderGroup[node.el].children.length
                    ] = node;
                    node.dom.pindex = this.dom.shaderGroup[node.el].children.length - 1;
                    node.dom.setShader(this.dom.shaderGroup[node.el].shader);
                }
            }
            if (self.dom.attr && self.dom.attr.transform) {
                node.applyTransformationMatrix(self.dom.transformMatrix);
            }
        }
    } else {
        console.log("Error");
    }
    this.BBoxUpdate = true;
    queueInstance$1.vDomChanged(this.vDomIndex);
    return self;
};
WebglNodeExe.prototype.createEls = function CcreateEls(data, config) {
    const e = new WebglCollection(
        {
            type: "WEBGL",
            ctx: this.dom.ctx,
        },
        data,
        config,
        this.vDomIndex
    );
    this.child(e.stack);
    queueInstance$1.vDomChanged(this.vDomIndex);
    return e;
};
WebglNodeExe.prototype.createEl = function WcreateEl(config) {
    const e = new WebglNodeExe(this.ctx, config, domId$1(), this.vDomIndex);
    this.child([e]);
    queueInstance$1.vDomChanged(this.vDomIndex);
    return e;
};
WebglNodeExe.prototype.createShaderEl = function createShader(shaderObject) {
    const e = new RenderWebglShader(this.ctx, shaderObject, this.vDomIndex);
    this.child([e]);
    queueInstance$1.vDomChanged(this.vDomIndex);
    return e;
};
WebglNodeExe.prototype.remove = function Wremove() {
    const { children } = this.dom.parent;
    const index = children.indexOf(this);
    if (index !== -1) {
        if (this.dom.parent.dom.shader) {
            if (this.dom.parent.dom.shader.indexBased) {
                this.dom.parent.dom.shader.clear(this.dom.pindex);
            }
            this.dom.parent.setReIndex();
            children[this.dom.pindex] = undefined;
        } else if (this.dom.parent.dom.shaderGroup) {
            const shaderEl = this.dom.parent.dom.shaderGroup[this.el];
            if (shaderEl) {
                const localIndex = shaderEl.children.indexOf(this);
                shaderEl.reindex = true;
                if (shaderEl.shader.indexBased) {
                    shaderEl.shader.clear(this.dom.pindex);
                    this.dom.parent.setReIndex();
                }
                shaderEl.children[localIndex] = undefined;
            }
            children[index] = undefined;
        } else {
            children.splice(index, 1);
        }
    }
    markForDeletion$1(this);
    this.BBoxUpdate = true;
    queueInstance$1.vDomChanged(this.vDomIndex);
};
WebglNodeExe.prototype.removeChild = function WremoveChild(obj) {
    let index = this.children.indexOf(obj);
    if (index !== -1) {
        this.children.splice(index, 1);
        this.dom.removeChild(obj.dom);
        markForDeletion$1(obj);
        this.BBoxUpdate = true;
        queueInstance$1.vDomChanged(this.vDomIndex);
    }
};
function markForDeletion$1(removedNode) {
    removedNode.deleted = true;
    if (!removedNode.deleted) {
        for(let i = 0; i < removedNode.children.length; i++) {
            markForDeletion$1(removedNode[i]);
        }
    }
}
WebglNodeExe.prototype.animatePathTo = AnimatePathTo;
WebglNodeExe.prototype.morphTo = MorphTo;
WebglNodeExe.prototype.text = function Ctext(value) {
    if (this.dom instanceof TextNode) {
        this.setAttr('text', value);
    }
    return this;
};
function webglLayer(container, contextConfig = {}, layerSettings = {}) {
    const res = typeof container === 'string' ? document.querySelector(container) : container instanceof HTMLElement ? container : null;
    let height = res?.clientHeight || 0;
    let width = res?.clientWidth || 0;
    let clearColor = colorMap$1.rgba(0, 0, 0, 0);
    const { enableEvents = false, autoUpdate = true, enableResize = false } = layerSettings;
    contextConfig = contextConfig || {
        premultipliedAlpha: false,
        depth: false,
        antialias: false,
        alpha: true,
    };
    contextConfig.premultipliedAlpha =
        contextConfig.premultipliedAlpha === undefined ? false : contextConfig.premultipliedAlpha;
    contextConfig.depth = contextConfig.depth === undefined ? false : contextConfig.depth;
    contextConfig.antialias =
        contextConfig.antialias === undefined ? false : contextConfig.antialias;
    contextConfig.alpha = contextConfig.alpha === undefined ? true : contextConfig.alpha;
    const layer = document.createElement("canvas");
    const ctx = layer.getContext("webgl2", contextConfig);
    const actualPixel = getPixlRatio$1(ctx);
    ratio = actualPixel >= 2 ? 2 : Math.floor(actualPixel);
    layer.setAttribute("height", height * ratio);
    layer.setAttribute("width", width * ratio);
    layer.style.height = `${height}px`;
    layer.style.width = `${width}px`;
    let vDomInstance;
    let vDomIndex = 999999;
    let resizeCall;
    let onChangeExe;
    if (res) {
        res.appendChild(layer);
        vDomInstance = new VDom();
        if (autoUpdate) {
            vDomIndex = queueInstance$1.addVdom(vDomInstance);
        }
    }
    const root = new WebglNodeExe(
        ctx,
        {
            el: "group",
            attr: {
                id: "rootNode",
            },
            ctx: function (ctx) {
                ctx.enable(ctx.BLEND);
                ctx.blendFunc(ctx.ONE, ctx.ONE_MINUS_SRC_ALPHA);
                ctx.clearColor(clearColor.r, clearColor.g, clearColor.b, clearColor.a);
            },
        },
        domId$1(),
        vDomIndex
    );
    if (vDomInstance) {
        vDomInstance.rootNode(root);
    }
    const execute = root.execute.bind(root);
    root.container = res;
    root.domEl = layer;
    root.height = height;
    root.width = width;
    root.type = "WEBGL";
    root.ctx.pixelRatio = ratio;
    let onClear = function (ctx) {
        ctx.viewport(0, 0, ctx.canvas.width, ctx.canvas.height);
        ctx.clear(ctx.COLOR_BUFFER_BIT | ctx.DEPTH_BUFFER_BIT);
    };
    root.execute = function () {
        onClear(this.ctx);
        this.updateBBox();
        this.ctx.enable(this.ctx.BLEND);
        this.ctx.blendFunc(this.ctx.SRC_ALPHA, this.ctx.ONE_MINUS_SRC_ALPHA);
        execute();
    };
    root.update = function () {
        this.execute();
    };
    root.getPixels = function (x, y, width_, height_) {
        const pixels = new Uint8Array(width_ * height_ * 4);
        this.ctx.readPixels(x, y, width_, height_, this.ctx.RGBA, this.ctx.UNSIGNED_BYTE, pixels);
        return pixels;
    };
    root.putPixels = function (imageData, x, y) {
        return this.ctx.putImageData(imageData, x, y);
    };
    root.clear = function () {
        onClear(this.ctx);
    };
    root.setClearColor = function (color) {
        clearColor = color;
    };
    root.setClear = function (exe) {
        onClear = exe;
    };
    const resize = function (cr) {
        if (
            (container instanceof HTMLElement && !document.body.contains(container)) ||
            (container instanceof String && !document.querySelector(container))
        ) {
            layerResizeUnBind(root);
            root.destroy();
            return;
        }
        height = cr.height;
        width = cr.width;
        root.width = width;
        root.height = height;
        updateLayerDimension(root.domEl, width, height);
        onClear(root.ctx);
        if (resizeCall) {
            resizeCall();
        }
        root.execute();
        layer.style.height = `${height}px`;
        layer.style.width = `${width}px`;
    };
    const updateLayerDimension = function (layer, width, height) {
        layer.width = Math.floor(width * ratio);
        layer.height = Math.floor(height * ratio);
        layer.style.height = height + "px";
        layer.style.width = width + "px";
    };
    root.onResize = function (exec) {
        resizeCall = exec;
    };
    root.destroy = function () {
        const res = document.body.contains(this.container);
        if (res && this.container.contains(this.domEl)) {
            this.container.removeChild(this.domEl);
        }
        queueInstance$1.removeVdom(vDomIndex);
        layerResizeUnBind(root, resize);
    };
    root.onChange = function (exec) {
        onChangeExe = exec;
    };
    root.invokeOnChange = function () {
        if (onChangeExe) {
            onChangeExe();
        }
    };
    root.setPixelRatio = function (val) {
        ratio = val;
        this.ctx.pixelRatio = ratio;
        updateLayerDimension(this.domEl, this.width, this.height);
    };
    root.setSize = function (width_, height_) {
        this.width = width_;
        this.height = height_;
        height = height_;
        width = width_;
        updateLayerDimension(this.domEl, this.width, this.height);
        this.execute();
    };
    root.setViewBox = function () {};
    root.setStyle = function (prop, value) {
        this.domEl.style[prop] = value;
    };
    root.setAttr = function (prop, value) {
        if (prop === "viewBox") {
            this.setViewBox.apply(this, value.split(","));
        }
        layer.setAttribute(prop, value);
    };
    root.setContext = function (prop, value) {
        if (this.ctx[prop] && typeof this.ctx[prop] === "function") {
            this.ctx[prop].apply(null, value);
        } else if (this.ctx[prop]) {
            this.ctx[prop] = value;
        }
    };
    root.MeshGeometry = function () {
        return new MeshGeometry(this.ctx);
    };
    root.PointsGeometry = function () {
        return new PointsGeometry(this.ctx);
    };
    root.LineGeometry = function () {
        return new LineGeometry(this.ctx);
    };
    root.createWebglTexture = function (config) {
        return new TextureObject(this.ctx, config, this.vDomIndex);
    };
    root.RenderTarget = function (config) {
        return new RenderTarget(this.ctx, config, this.vDomIndex);
    };
    if (enableEvents) {
        const eventsInstance = new Events(root);
        layer.addEventListener("mousemove", (e) => {
            e.preventDefault();
            eventsInstance.mousemoveCheck(e);
        });
        layer.addEventListener("mousedown", (e) => {
            eventsInstance.mousedownCheck(e);
        });
        layer.addEventListener("mouseup", (e) => {
            eventsInstance.mouseupCheck(e);
        });
        layer.addEventListener("mouseleave", (e) => {
            eventsInstance.mouseleaveCheck(e);
        });
        layer.addEventListener("contextmenu", (e) => {
            eventsInstance.contextmenuCheck(e);
        });
        layer.addEventListener("touchstart", (e) => {
            eventsInstance.touchstartCheck(e);
        });
        layer.addEventListener("touchend", (e) => {
            eventsInstance.touchendCheck(e);
        });
        layer.addEventListener("touchmove", (e) => {
            e.preventDefault();
            eventsInstance.touchmoveCheck(e);
        });
        layer.addEventListener("touchcancel", (e) => {
            eventsInstance.touchcancelCheck(e);
        });
        layer.addEventListener("wheel", (e) => {
            eventsInstance.wheelEventCheck(e);
        });
        layer.addEventListener("pointerdown", (e) => {
            eventsInstance.addPointer(e);
            eventsInstance.pointerdownCheck(e);
        });
        layer.addEventListener("pointerup", (e) => {
            eventsInstance.removePointer(e);
            eventsInstance.pointerupCheck(e);
        });
        layer.addEventListener("pointermove", (e) => {
            e.preventDefault();
            eventsInstance.pointermoveCheck(e);
        });
    }
    queueInstance$1.execute();
    if (enableResize && root.container) {
        layerResizeBind(root, resize);
    }
    return root;
}
function imageInstance$1(self) {
    const imageIns = new Image();
    imageIns.crossOrigin = "anonymous";
    imageIns.onload = function onload() {
        self.update();
        self.updated = true;
        queueInstance$1.vDomChanged(self.vDomIndex);
    };
    imageIns.onerror = function onerror(onerrorExe) {
    };
    return imageIns;
}
function createEmptyArrayBuffer(width, height) {
    return new Uint8Array(new ArrayBuffer(width * height * 4));
}
function TextureObject(ctx, config, vDomIndex) {
    const self = this;
    const maxTextureSize = ctx.getParameter(ctx.MAX_TEXTURE_SIZE);
    this.ctx = ctx;
    this.texture = ctx.createTexture();
    this.type = "TEXTURE_2D";
    this.width = config.width > maxTextureSize ? maxTextureSize : config.width;
    this.height = config.height > maxTextureSize ? maxTextureSize : config.height;
    this.border = config.border ? config.border : 0;
    this.format = config.format ? config.format : "RGBA";
    this.type = config.type ? config.type : "UNSIGNED_BYTE";
    this.warpS = config.warpS ? config.warpS : "CLAMP_TO_EDGE";
    this.warpT = config.warpT ? config.warpT : "CLAMP_TO_EDGE";
    this.magFilter = config.magFilter ? config.magFilter : "LINEAR";
    this.minFilter = config.minFilter ? config.minFilter : "LINEAR";
    this.mipMap = config.mipMap;
    this.updated = false;
    this.image = null;
    this.vDomIndex = vDomIndex;
    if (typeof config.src === "string") {
        self.image = imageInstance$1(self);
        self.image.src = config.src;
    } else if (
        config.src instanceof HTMLImageElement ||
        config.src instanceof SVGImageElement ||
        config.src instanceof HTMLCanvasElement ||
        config.src instanceof Uint8Array
    ) {
        self.image = config.src;
        self.update();
        self.updated = true;
    } else if (config.src instanceof NodePrototype) {
        self.image = config.src.domEl;
        self.update();
        self.updated = true;
    } else {
        if (this.width && this.height) {
            self.image = createEmptyArrayBuffer(this.width, this.height);
            self.update();
        }
        self.updated = true;
    }
    queueInstance$1.vDomChanged(self.vDomIndex);
}
TextureObject.prototype.setAttr = function (attr, value) {
    if (arguments.length === 1) {
        for (const key in attr) {
            this[key] = attr[key];
            if (key === "src") {
                if (typeof value === "string") {
                    if (!this.image || !(this.image instanceof Image)) {
                        this.image = imageInstance$1(this);
                    }
                    this.image.src = value;
                } else if (
                    value instanceof HTMLImageElement ||
                    value instanceof SVGImageElement ||
                    value instanceof HTMLCanvasElement ||
                    value instanceof Uint8Array
                ) {
                    this.image = value;
                    this.update();
                } else if (value instanceof NodePrototype) {
                    this.image = value.domEl;
                    this.update();
                }
            }
            if (attr.height || attr.width) {
                self.image = createEmptyArrayBuffer(this.width, this.height);
            }
        }
    } else {
        this[attr] = value;
        if (attr === "src") {
            if (typeof value === "string") {
                if (!this.image || !(this.image instanceof Image)) {
                    this.image = imageInstance$1(this);
                }
                this.image.src = value;
            } else if (
                value instanceof HTMLImageElement ||
                value instanceof SVGImageElement ||
                value instanceof HTMLCanvasElement ||
                value instanceof Uint8Array
            ) {
                this.image = value;
                this.update();
            } else if (value instanceof NodePrototype) {
                this.image = value.domEl;
                this.update();
            }
        }
    }
};
TextureObject.prototype.loadTexture = function () {
    if (!this.updated) {
        return;
    }
    this.ctx.activeTexture(this.ctx.TEXTURE0);
    this.ctx.bindTexture(this.ctx.TEXTURE_2D, this.texture);
};
TextureObject.prototype.clear = function () {};
TextureObject.prototype.update = function () {
    const ctx = this.ctx;
    ctx.activeTexture(ctx.TEXTURE0);
    ctx.bindTexture(ctx.TEXTURE_2D, this.texture);
    if (this.image && !(this.image instanceof Uint8Array)) {
        ctx.texImage2D(
            ctx.TEXTURE_2D,
            this.border,
            ctx[this.format],
            ctx[this.format],
            ctx[this.type],
            this.image
        );
    } else {
        ctx.texImage2D(
            ctx.TEXTURE_2D,
            this.border,
            ctx[this.format],
            this.width,
            this.height,
            0,
            ctx[this.format],
            ctx[this.type],
            this.image
        );
    }
    if (this.mipMap) {
        if (!isPowerOf2(self.image.width) || !isPowerOf2(self.image.height)) {
            console.warn("Image dimension not in power of 2");
        }
        ctx.generateMipmap(ctx.TEXTURE_2D);
        ctx.texParameteri(ctx.TEXTURE_2D, ctx.TEXTURE_MIN_FILTER, ctx[this.minFilter]);
        ctx.texParameteri(ctx.TEXTURE_2D, ctx.TEXTURE_MAG_FILTER, ctx[this.magFilter]);
    } else {
        ctx.texParameteri(ctx.TEXTURE_2D, ctx.TEXTURE_WRAP_S, ctx[this.warpS]);
        ctx.texParameteri(ctx.TEXTURE_2D, ctx.TEXTURE_WRAP_T, ctx[this.warpT]);
        ctx.texParameteri(ctx.TEXTURE_2D, ctx.TEXTURE_MIN_FILTER, ctx[this.minFilter]);
        ctx.texParameteri(ctx.TEXTURE_2D, ctx.TEXTURE_MAG_FILTER, ctx[this.minFilter]);
    }
    this.updated = true;
};
function RenderTarget(ctx, config) {
    this.ctx = ctx;
    this.fbo = ctx.createFramebuffer();
    this.texture = config.texture;
    if (!this.texture.updated) {
        this.texture.update();
    }
}
RenderTarget.prototype.setAttr = function (attr, value) {
    this[attr] = value;
};
RenderTarget.prototype.update = function () {
    if (!this.texture || !(this.texture instanceof TextureObject)) {
        return;
    }
    this.ctx.bindFramebuffer(this.ctx.FRAMEBUFFER, this.fbo);
    this.ctx.framebufferTexture2D(
        this.ctx.FRAMEBUFFER,
        this.ctx.COLOR_ATTACHMENT0,
        this.ctx.TEXTURE_2D,
        this.texture.texture,
        0
    );
    this.ctx.clearColor(0, 0, 0, 0);
    this.ctx.clear(this.ctx.COLOR_BUFFER_BIT | this.ctx.DEPTH_BUFFER_BIT);
};
RenderTarget.prototype.clear = function () {
    this.ctx.bindFramebuffer(this.ctx.FRAMEBUFFER, null);
};
function WebGLGeometry() {
}
WebGLGeometry.prototype.setAttr = function (attr, value) {
    if (!value && this.attributes[attr]) {
        delete this.attributes[attr];
    } else {
        this.attributes[attr] = value;
    }
};
WebGLGeometry.prototype.setDrawRange = function (start, end) {
    this.drawRange = [start, end];
};
WebGLGeometry.prototype.setDrawType = function (type) {
    this.drawType = type;
};
WebGLGeometry.prototype.setIndex = function (obj) {
    this.indexes = obj;
};
function MeshGeometry() {
    this.attributes = {};
    this.drawType = "TRIANGLES";
    this.indexes = null;
    this.drawRange = [0, 0];
}
MeshGeometry.prototype = new WebGLGeometry();
MeshGeometry.constructor = MeshGeometry;
function PointsGeometry() {
    this.attributes = {};
    this.drawType = "POINTS";
    this.indexes = null;
    this.drawRange = [0, 0];
}
PointsGeometry.prototype = new WebGLGeometry();
PointsGeometry.constructor = PointsGeometry;
function LineGeometry() {
    this.attributes = {};
    this.drawType = "LINES";
    this.indexes = null;
    this.drawRange = [0, 0];
}
LineGeometry.prototype = new WebGLGeometry();
LineGeometry.constructor = LineGeometry;

var buffer = {};

var base64Js = {};

base64Js.byteLength = byteLength$1;
base64Js.toByteArray = toByteArray;
base64Js.fromByteArray = fromByteArray;
var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i];
  revLookup[code.charCodeAt(i)] = i;
}
revLookup['-'.charCodeAt(0)] = 62;
revLookup['_'.charCodeAt(0)] = 63;
function getLens (b64) {
  var len = b64.length;
  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }
  var validLen = b64.indexOf('=');
  if (validLen === -1) validLen = len;
  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4);
  return [validLen, placeHoldersLen]
}
function byteLength$1 (b64) {
  var lens = getLens(b64);
  var validLen = lens[0];
  var placeHoldersLen = lens[1];
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}
function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}
function toByteArray (b64) {
  var tmp;
  var lens = getLens(b64);
  var validLen = lens[0];
  var placeHoldersLen = lens[1];
  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
  var curByte = 0;
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen;
  var i;
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)];
    arr[curByte++] = (tmp >> 16) & 0xFF;
    arr[curByte++] = (tmp >> 8) & 0xFF;
    arr[curByte++] = tmp & 0xFF;
  }
  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4);
    arr[curByte++] = tmp & 0xFF;
  }
  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2);
    arr[curByte++] = (tmp >> 8) & 0xFF;
    arr[curByte++] = tmp & 0xFF;
  }
  return arr
}
function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}
function encodeChunk (uint8, start, end) {
  var tmp;
  var output = [];
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF);
    output.push(tripletToBase64(tmp));
  }
  return output.join('')
}
function fromByteArray (uint8) {
  var tmp;
  var len = uint8.length;
  var extraBytes = len % 3;
  var parts = [];
  var maxChunkLength = 16383;
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));
  }
  if (extraBytes === 1) {
    tmp = uint8[len - 1];
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    );
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1];
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    );
  }
  return parts.join('')
}

var ieee754 = {};

/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */

ieee754.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m;
  var eLen = (nBytes * 8) - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = -7;
  var i = isLE ? (nBytes - 1) : 0;
  var d = isLE ? -1 : 1;
  var s = buffer[offset + i];
  i += d;
  e = s & ((1 << (-nBits)) - 1);
  s >>= (-nBits);
  nBits += eLen;
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}
  m = e & ((1 << (-nBits)) - 1);
  e >>= (-nBits);
  nBits += mLen;
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}
  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen);
    e = e - eBias;
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
};
ieee754.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c;
  var eLen = (nBytes * 8) - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
  var i = isLE ? 0 : (nBytes - 1);
  var d = isLE ? 1 : -1;
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;
  value = Math.abs(value);
  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0;
    e = eMax;
  } else {
    e = Math.floor(Math.log(value) / Math.LN2);
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * Math.pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }
    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
      e = 0;
    }
  }
  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}
  e = (e << mLen) | m;
  eLen += mLen;
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}
  buffer[offset + i - d] |= s * 128;
};

/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */

(function (exports) {
	const base64 = base64Js;
	const ieee754$1 = ieee754;
	const customInspectSymbol =
	  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function')
	    ? Symbol['for']('nodejs.util.inspect.custom')
	    : null;
	exports.Buffer = Buffer;
	exports.SlowBuffer = SlowBuffer;
	exports.INSPECT_MAX_BYTES = 50;
	const K_MAX_LENGTH = 0x7fffffff;
	exports.kMaxLength = K_MAX_LENGTH;
	Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();
	if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
	    typeof console.error === 'function') {
	  console.error(
	    'This browser lacks typed array (Uint8Array) support which is required by ' +
	    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
	  );
	}
	function typedArraySupport () {
	  try {
	    const arr = new Uint8Array(1);
	    const proto = { foo: function () { return 42 } };
	    Object.setPrototypeOf(proto, Uint8Array.prototype);
	    Object.setPrototypeOf(arr, proto);
	    return arr.foo() === 42
	  } catch (e) {
	    return false
	  }
	}
	Object.defineProperty(Buffer.prototype, 'parent', {
	  enumerable: true,
	  get: function () {
	    if (!Buffer.isBuffer(this)) return undefined
	    return this.buffer
	  }
	});
	Object.defineProperty(Buffer.prototype, 'offset', {
	  enumerable: true,
	  get: function () {
	    if (!Buffer.isBuffer(this)) return undefined
	    return this.byteOffset
	  }
	});
	function createBuffer (length) {
	  if (length > K_MAX_LENGTH) {
	    throw new RangeError('The value "' + length + '" is invalid for option "size"')
	  }
	  const buf = new Uint8Array(length);
	  Object.setPrototypeOf(buf, Buffer.prototype);
	  return buf
	}
	function Buffer (arg, encodingOrOffset, length) {
	  if (typeof arg === 'number') {
	    if (typeof encodingOrOffset === 'string') {
	      throw new TypeError(
	        'The "string" argument must be of type string. Received type number'
	      )
	    }
	    return allocUnsafe(arg)
	  }
	  return from(arg, encodingOrOffset, length)
	}
	Buffer.poolSize = 8192;
	function from (value, encodingOrOffset, length) {
	  if (typeof value === 'string') {
	    return fromString(value, encodingOrOffset)
	  }
	  if (ArrayBuffer.isView(value)) {
	    return fromArrayView(value)
	  }
	  if (value == null) {
	    throw new TypeError(
	      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
	      'or Array-like Object. Received type ' + (typeof value)
	    )
	  }
	  if (isInstance(value, ArrayBuffer) ||
	      (value && isInstance(value.buffer, ArrayBuffer))) {
	    return fromArrayBuffer(value, encodingOrOffset, length)
	  }
	  if (typeof SharedArrayBuffer !== 'undefined' &&
	      (isInstance(value, SharedArrayBuffer) ||
	      (value && isInstance(value.buffer, SharedArrayBuffer)))) {
	    return fromArrayBuffer(value, encodingOrOffset, length)
	  }
	  if (typeof value === 'number') {
	    throw new TypeError(
	      'The "value" argument must not be of type number. Received type number'
	    )
	  }
	  const valueOf = value.valueOf && value.valueOf();
	  if (valueOf != null && valueOf !== value) {
	    return Buffer.from(valueOf, encodingOrOffset, length)
	  }
	  const b = fromObject(value);
	  if (b) return b
	  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
	      typeof value[Symbol.toPrimitive] === 'function') {
	    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)
	  }
	  throw new TypeError(
	    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
	    'or Array-like Object. Received type ' + (typeof value)
	  )
	}
	Buffer.from = function (value, encodingOrOffset, length) {
	  return from(value, encodingOrOffset, length)
	};
	Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype);
	Object.setPrototypeOf(Buffer, Uint8Array);
	function assertSize (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('"size" argument must be of type number')
	  } else if (size < 0) {
	    throw new RangeError('The value "' + size + '" is invalid for option "size"')
	  }
	}
	function alloc (size, fill, encoding) {
	  assertSize(size);
	  if (size <= 0) {
	    return createBuffer(size)
	  }
	  if (fill !== undefined) {
	    return typeof encoding === 'string'
	      ? createBuffer(size).fill(fill, encoding)
	      : createBuffer(size).fill(fill)
	  }
	  return createBuffer(size)
	}
	Buffer.alloc = function (size, fill, encoding) {
	  return alloc(size, fill, encoding)
	};
	function allocUnsafe (size) {
	  assertSize(size);
	  return createBuffer(size < 0 ? 0 : checked(size) | 0)
	}
	Buffer.allocUnsafe = function (size) {
	  return allocUnsafe(size)
	};
	Buffer.allocUnsafeSlow = function (size) {
	  return allocUnsafe(size)
	};
	function fromString (string, encoding) {
	  if (typeof encoding !== 'string' || encoding === '') {
	    encoding = 'utf8';
	  }
	  if (!Buffer.isEncoding(encoding)) {
	    throw new TypeError('Unknown encoding: ' + encoding)
	  }
	  const length = byteLength(string, encoding) | 0;
	  let buf = createBuffer(length);
	  const actual = buf.write(string, encoding);
	  if (actual !== length) {
	    buf = buf.slice(0, actual);
	  }
	  return buf
	}
	function fromArrayLike (array) {
	  const length = array.length < 0 ? 0 : checked(array.length) | 0;
	  const buf = createBuffer(length);
	  for (let i = 0; i < length; i += 1) {
	    buf[i] = array[i] & 255;
	  }
	  return buf
	}
	function fromArrayView (arrayView) {
	  if (isInstance(arrayView, Uint8Array)) {
	    const copy = new Uint8Array(arrayView);
	    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)
	  }
	  return fromArrayLike(arrayView)
	}
	function fromArrayBuffer (array, byteOffset, length) {
	  if (byteOffset < 0 || array.byteLength < byteOffset) {
	    throw new RangeError('"offset" is outside of buffer bounds')
	  }
	  if (array.byteLength < byteOffset + (length || 0)) {
	    throw new RangeError('"length" is outside of buffer bounds')
	  }
	  let buf;
	  if (byteOffset === undefined && length === undefined) {
	    buf = new Uint8Array(array);
	  } else if (length === undefined) {
	    buf = new Uint8Array(array, byteOffset);
	  } else {
	    buf = new Uint8Array(array, byteOffset, length);
	  }
	  Object.setPrototypeOf(buf, Buffer.prototype);
	  return buf
	}
	function fromObject (obj) {
	  if (Buffer.isBuffer(obj)) {
	    const len = checked(obj.length) | 0;
	    const buf = createBuffer(len);
	    if (buf.length === 0) {
	      return buf
	    }
	    obj.copy(buf, 0, 0, len);
	    return buf
	  }
	  if (obj.length !== undefined) {
	    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
	      return createBuffer(0)
	    }
	    return fromArrayLike(obj)
	  }
	  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
	    return fromArrayLike(obj.data)
	  }
	}
	function checked (length) {
	  if (length >= K_MAX_LENGTH) {
	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
	                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
	  }
	  return length | 0
	}
	function SlowBuffer (length) {
	  if (+length != length) {
	    length = 0;
	  }
	  return Buffer.alloc(+length)
	}
	Buffer.isBuffer = function isBuffer (b) {
	  return b != null && b._isBuffer === true &&
	    b !== Buffer.prototype
	};
	Buffer.compare = function compare (a, b) {
	  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);
	  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);
	  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
	    throw new TypeError(
	      'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
	    )
	  }
	  if (a === b) return 0
	  let x = a.length;
	  let y = b.length;
	  for (let i = 0, len = Math.min(x, y); i < len; ++i) {
	    if (a[i] !== b[i]) {
	      x = a[i];
	      y = b[i];
	      break
	    }
	  }
	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	};
	Buffer.isEncoding = function isEncoding (encoding) {
	  switch (String(encoding).toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'latin1':
	    case 'binary':
	    case 'base64':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return true
	    default:
	      return false
	  }
	};
	Buffer.concat = function concat (list, length) {
	  if (!Array.isArray(list)) {
	    throw new TypeError('"list" argument must be an Array of Buffers')
	  }
	  if (list.length === 0) {
	    return Buffer.alloc(0)
	  }
	  let i;
	  if (length === undefined) {
	    length = 0;
	    for (i = 0; i < list.length; ++i) {
	      length += list[i].length;
	    }
	  }
	  const buffer = Buffer.allocUnsafe(length);
	  let pos = 0;
	  for (i = 0; i < list.length; ++i) {
	    let buf = list[i];
	    if (isInstance(buf, Uint8Array)) {
	      if (pos + buf.length > buffer.length) {
	        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf);
	        buf.copy(buffer, pos);
	      } else {
	        Uint8Array.prototype.set.call(
	          buffer,
	          buf,
	          pos
	        );
	      }
	    } else if (!Buffer.isBuffer(buf)) {
	      throw new TypeError('"list" argument must be an Array of Buffers')
	    } else {
	      buf.copy(buffer, pos);
	    }
	    pos += buf.length;
	  }
	  return buffer
	};
	function byteLength (string, encoding) {
	  if (Buffer.isBuffer(string)) {
	    return string.length
	  }
	  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
	    return string.byteLength
	  }
	  if (typeof string !== 'string') {
	    throw new TypeError(
	      'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
	      'Received type ' + typeof string
	    )
	  }
	  const len = string.length;
	  const mustMatch = (arguments.length > 2 && arguments[2] === true);
	  if (!mustMatch && len === 0) return 0
	  let loweredCase = false;
	  for (;;) {
	    switch (encoding) {
	      case 'ascii':
	      case 'latin1':
	      case 'binary':
	        return len
	      case 'utf8':
	      case 'utf-8':
	        return utf8ToBytes(string).length
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return len * 2
	      case 'hex':
	        return len >>> 1
	      case 'base64':
	        return base64ToBytes(string).length
	      default:
	        if (loweredCase) {
	          return mustMatch ? -1 : utf8ToBytes(string).length
	        }
	        encoding = ('' + encoding).toLowerCase();
	        loweredCase = true;
	    }
	  }
	}
	Buffer.byteLength = byteLength;
	function slowToString (encoding, start, end) {
	  let loweredCase = false;
	  if (start === undefined || start < 0) {
	    start = 0;
	  }
	  if (start > this.length) {
	    return ''
	  }
	  if (end === undefined || end > this.length) {
	    end = this.length;
	  }
	  if (end <= 0) {
	    return ''
	  }
	  end >>>= 0;
	  start >>>= 0;
	  if (end <= start) {
	    return ''
	  }
	  if (!encoding) encoding = 'utf8';
	  while (true) {
	    switch (encoding) {
	      case 'hex':
	        return hexSlice(this, start, end)
	      case 'utf8':
	      case 'utf-8':
	        return utf8Slice(this, start, end)
	      case 'ascii':
	        return asciiSlice(this, start, end)
	      case 'latin1':
	      case 'binary':
	        return latin1Slice(this, start, end)
	      case 'base64':
	        return base64Slice(this, start, end)
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return utf16leSlice(this, start, end)
	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = (encoding + '').toLowerCase();
	        loweredCase = true;
	    }
	  }
	}
	Buffer.prototype._isBuffer = true;
	function swap (b, n, m) {
	  const i = b[n];
	  b[n] = b[m];
	  b[m] = i;
	}
	Buffer.prototype.swap16 = function swap16 () {
	  const len = this.length;
	  if (len % 2 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 16-bits')
	  }
	  for (let i = 0; i < len; i += 2) {
	    swap(this, i, i + 1);
	  }
	  return this
	};
	Buffer.prototype.swap32 = function swap32 () {
	  const len = this.length;
	  if (len % 4 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 32-bits')
	  }
	  for (let i = 0; i < len; i += 4) {
	    swap(this, i, i + 3);
	    swap(this, i + 1, i + 2);
	  }
	  return this
	};
	Buffer.prototype.swap64 = function swap64 () {
	  const len = this.length;
	  if (len % 8 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 64-bits')
	  }
	  for (let i = 0; i < len; i += 8) {
	    swap(this, i, i + 7);
	    swap(this, i + 1, i + 6);
	    swap(this, i + 2, i + 5);
	    swap(this, i + 3, i + 4);
	  }
	  return this
	};
	Buffer.prototype.toString = function toString () {
	  const length = this.length;
	  if (length === 0) return ''
	  if (arguments.length === 0) return utf8Slice(this, 0, length)
	  return slowToString.apply(this, arguments)
	};
	Buffer.prototype.toLocaleString = Buffer.prototype.toString;
	Buffer.prototype.equals = function equals (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return true
	  return Buffer.compare(this, b) === 0
	};
	Buffer.prototype.inspect = function inspect () {
	  let str = '';
	  const max = exports.INSPECT_MAX_BYTES;
	  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim();
	  if (this.length > max) str += ' ... ';
	  return '<Buffer ' + str + '>'
	};
	if (customInspectSymbol) {
	  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect;
	}
	Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
	  if (isInstance(target, Uint8Array)) {
	    target = Buffer.from(target, target.offset, target.byteLength);
	  }
	  if (!Buffer.isBuffer(target)) {
	    throw new TypeError(
	      'The "target" argument must be one of type Buffer or Uint8Array. ' +
	      'Received type ' + (typeof target)
	    )
	  }
	  if (start === undefined) {
	    start = 0;
	  }
	  if (end === undefined) {
	    end = target ? target.length : 0;
	  }
	  if (thisStart === undefined) {
	    thisStart = 0;
	  }
	  if (thisEnd === undefined) {
	    thisEnd = this.length;
	  }
	  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
	    throw new RangeError('out of range index')
	  }
	  if (thisStart >= thisEnd && start >= end) {
	    return 0
	  }
	  if (thisStart >= thisEnd) {
	    return -1
	  }
	  if (start >= end) {
	    return 1
	  }
	  start >>>= 0;
	  end >>>= 0;
	  thisStart >>>= 0;
	  thisEnd >>>= 0;
	  if (this === target) return 0
	  let x = thisEnd - thisStart;
	  let y = end - start;
	  const len = Math.min(x, y);
	  const thisCopy = this.slice(thisStart, thisEnd);
	  const targetCopy = target.slice(start, end);
	  for (let i = 0; i < len; ++i) {
	    if (thisCopy[i] !== targetCopy[i]) {
	      x = thisCopy[i];
	      y = targetCopy[i];
	      break
	    }
	  }
	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	};
	function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
	  if (buffer.length === 0) return -1
	  if (typeof byteOffset === 'string') {
	    encoding = byteOffset;
	    byteOffset = 0;
	  } else if (byteOffset > 0x7fffffff) {
	    byteOffset = 0x7fffffff;
	  } else if (byteOffset < -0x80000000) {
	    byteOffset = -0x80000000;
	  }
	  byteOffset = +byteOffset;
	  if (numberIsNaN(byteOffset)) {
	    byteOffset = dir ? 0 : (buffer.length - 1);
	  }
	  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
	  if (byteOffset >= buffer.length) {
	    if (dir) return -1
	    else byteOffset = buffer.length - 1;
	  } else if (byteOffset < 0) {
	    if (dir) byteOffset = 0;
	    else return -1
	  }
	  if (typeof val === 'string') {
	    val = Buffer.from(val, encoding);
	  }
	  if (Buffer.isBuffer(val)) {
	    if (val.length === 0) {
	      return -1
	    }
	    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
	  } else if (typeof val === 'number') {
	    val = val & 0xFF;
	    if (typeof Uint8Array.prototype.indexOf === 'function') {
	      if (dir) {
	        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
	      } else {
	        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
	      }
	    }
	    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)
	  }
	  throw new TypeError('val must be string, number or Buffer')
	}
	function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
	  let indexSize = 1;
	  let arrLength = arr.length;
	  let valLength = val.length;
	  if (encoding !== undefined) {
	    encoding = String(encoding).toLowerCase();
	    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
	        encoding === 'utf16le' || encoding === 'utf-16le') {
	      if (arr.length < 2 || val.length < 2) {
	        return -1
	      }
	      indexSize = 2;
	      arrLength /= 2;
	      valLength /= 2;
	      byteOffset /= 2;
	    }
	  }
	  function read (buf, i) {
	    if (indexSize === 1) {
	      return buf[i]
	    } else {
	      return buf.readUInt16BE(i * indexSize)
	    }
	  }
	  let i;
	  if (dir) {
	    let foundIndex = -1;
	    for (i = byteOffset; i < arrLength; i++) {
	      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
	        if (foundIndex === -1) foundIndex = i;
	        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
	      } else {
	        if (foundIndex !== -1) i -= i - foundIndex;
	        foundIndex = -1;
	      }
	    }
	  } else {
	    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
	    for (i = byteOffset; i >= 0; i--) {
	      let found = true;
	      for (let j = 0; j < valLength; j++) {
	        if (read(arr, i + j) !== read(val, j)) {
	          found = false;
	          break
	        }
	      }
	      if (found) return i
	    }
	  }
	  return -1
	}
	Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
	  return this.indexOf(val, byteOffset, encoding) !== -1
	};
	Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
	};
	Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
	};
	function hexWrite (buf, string, offset, length) {
	  offset = Number(offset) || 0;
	  const remaining = buf.length - offset;
	  if (!length) {
	    length = remaining;
	  } else {
	    length = Number(length);
	    if (length > remaining) {
	      length = remaining;
	    }
	  }
	  const strLen = string.length;
	  if (length > strLen / 2) {
	    length = strLen / 2;
	  }
	  let i;
	  for (i = 0; i < length; ++i) {
	    const parsed = parseInt(string.substr(i * 2, 2), 16);
	    if (numberIsNaN(parsed)) return i
	    buf[offset + i] = parsed;
	  }
	  return i
	}
	function utf8Write (buf, string, offset, length) {
	  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
	}
	function asciiWrite (buf, string, offset, length) {
	  return blitBuffer(asciiToBytes(string), buf, offset, length)
	}
	function base64Write (buf, string, offset, length) {
	  return blitBuffer(base64ToBytes(string), buf, offset, length)
	}
	function ucs2Write (buf, string, offset, length) {
	  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
	}
	Buffer.prototype.write = function write (string, offset, length, encoding) {
	  if (offset === undefined) {
	    encoding = 'utf8';
	    length = this.length;
	    offset = 0;
	  } else if (length === undefined && typeof offset === 'string') {
	    encoding = offset;
	    length = this.length;
	    offset = 0;
	  } else if (isFinite(offset)) {
	    offset = offset >>> 0;
	    if (isFinite(length)) {
	      length = length >>> 0;
	      if (encoding === undefined) encoding = 'utf8';
	    } else {
	      encoding = length;
	      length = undefined;
	    }
	  } else {
	    throw new Error(
	      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
	    )
	  }
	  const remaining = this.length - offset;
	  if (length === undefined || length > remaining) length = remaining;
	  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
	    throw new RangeError('Attempt to write outside buffer bounds')
	  }
	  if (!encoding) encoding = 'utf8';
	  let loweredCase = false;
	  for (;;) {
	    switch (encoding) {
	      case 'hex':
	        return hexWrite(this, string, offset, length)
	      case 'utf8':
	      case 'utf-8':
	        return utf8Write(this, string, offset, length)
	      case 'ascii':
	      case 'latin1':
	      case 'binary':
	        return asciiWrite(this, string, offset, length)
	      case 'base64':
	        return base64Write(this, string, offset, length)
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return ucs2Write(this, string, offset, length)
	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = ('' + encoding).toLowerCase();
	        loweredCase = true;
	    }
	  }
	};
	Buffer.prototype.toJSON = function toJSON () {
	  return {
	    type: 'Buffer',
	    data: Array.prototype.slice.call(this._arr || this, 0)
	  }
	};
	function base64Slice (buf, start, end) {
	  if (start === 0 && end === buf.length) {
	    return base64.fromByteArray(buf)
	  } else {
	    return base64.fromByteArray(buf.slice(start, end))
	  }
	}
	function utf8Slice (buf, start, end) {
	  end = Math.min(buf.length, end);
	  const res = [];
	  let i = start;
	  while (i < end) {
	    const firstByte = buf[i];
	    let codePoint = null;
	    let bytesPerSequence = (firstByte > 0xEF)
	      ? 4
	      : (firstByte > 0xDF)
	          ? 3
	          : (firstByte > 0xBF)
	              ? 2
	              : 1;
	    if (i + bytesPerSequence <= end) {
	      let secondByte, thirdByte, fourthByte, tempCodePoint;
	      switch (bytesPerSequence) {
	        case 1:
	          if (firstByte < 0x80) {
	            codePoint = firstByte;
	          }
	          break
	        case 2:
	          secondByte = buf[i + 1];
	          if ((secondByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);
	            if (tempCodePoint > 0x7F) {
	              codePoint = tempCodePoint;
	            }
	          }
	          break
	        case 3:
	          secondByte = buf[i + 1];
	          thirdByte = buf[i + 2];
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);
	            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
	              codePoint = tempCodePoint;
	            }
	          }
	          break
	        case 4:
	          secondByte = buf[i + 1];
	          thirdByte = buf[i + 2];
	          fourthByte = buf[i + 3];
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);
	            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
	              codePoint = tempCodePoint;
	            }
	          }
	      }
	    }
	    if (codePoint === null) {
	      codePoint = 0xFFFD;
	      bytesPerSequence = 1;
	    } else if (codePoint > 0xFFFF) {
	      codePoint -= 0x10000;
	      res.push(codePoint >>> 10 & 0x3FF | 0xD800);
	      codePoint = 0xDC00 | codePoint & 0x3FF;
	    }
	    res.push(codePoint);
	    i += bytesPerSequence;
	  }
	  return decodeCodePointsArray(res)
	}
	const MAX_ARGUMENTS_LENGTH = 0x1000;
	function decodeCodePointsArray (codePoints) {
	  const len = codePoints.length;
	  if (len <= MAX_ARGUMENTS_LENGTH) {
	    return String.fromCharCode.apply(String, codePoints)
	  }
	  let res = '';
	  let i = 0;
	  while (i < len) {
	    res += String.fromCharCode.apply(
	      String,
	      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
	    );
	  }
	  return res
	}
	function asciiSlice (buf, start, end) {
	  let ret = '';
	  end = Math.min(buf.length, end);
	  for (let i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i] & 0x7F);
	  }
	  return ret
	}
	function latin1Slice (buf, start, end) {
	  let ret = '';
	  end = Math.min(buf.length, end);
	  for (let i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i]);
	  }
	  return ret
	}
	function hexSlice (buf, start, end) {
	  const len = buf.length;
	  if (!start || start < 0) start = 0;
	  if (!end || end < 0 || end > len) end = len;
	  let out = '';
	  for (let i = start; i < end; ++i) {
	    out += hexSliceLookupTable[buf[i]];
	  }
	  return out
	}
	function utf16leSlice (buf, start, end) {
	  const bytes = buf.slice(start, end);
	  let res = '';
	  for (let i = 0; i < bytes.length - 1; i += 2) {
	    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256));
	  }
	  return res
	}
	Buffer.prototype.slice = function slice (start, end) {
	  const len = this.length;
	  start = ~~start;
	  end = end === undefined ? len : ~~end;
	  if (start < 0) {
	    start += len;
	    if (start < 0) start = 0;
	  } else if (start > len) {
	    start = len;
	  }
	  if (end < 0) {
	    end += len;
	    if (end < 0) end = 0;
	  } else if (end > len) {
	    end = len;
	  }
	  if (end < start) end = start;
	  const newBuf = this.subarray(start, end);
	  Object.setPrototypeOf(newBuf, Buffer.prototype);
	  return newBuf
	};
	function checkOffset (offset, ext, length) {
	  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
	  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
	}
	Buffer.prototype.readUintLE =
	Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
	  offset = offset >>> 0;
	  byteLength = byteLength >>> 0;
	  if (!noAssert) checkOffset(offset, byteLength, this.length);
	  let val = this[offset];
	  let mul = 1;
	  let i = 0;
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul;
	  }
	  return val
	};
	Buffer.prototype.readUintBE =
	Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
	  offset = offset >>> 0;
	  byteLength = byteLength >>> 0;
	  if (!noAssert) {
	    checkOffset(offset, byteLength, this.length);
	  }
	  let val = this[offset + --byteLength];
	  let mul = 1;
	  while (byteLength > 0 && (mul *= 0x100)) {
	    val += this[offset + --byteLength] * mul;
	  }
	  return val
	};
	Buffer.prototype.readUint8 =
	Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
	  offset = offset >>> 0;
	  if (!noAssert) checkOffset(offset, 1, this.length);
	  return this[offset]
	};
	Buffer.prototype.readUint16LE =
	Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
	  offset = offset >>> 0;
	  if (!noAssert) checkOffset(offset, 2, this.length);
	  return this[offset] | (this[offset + 1] << 8)
	};
	Buffer.prototype.readUint16BE =
	Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
	  offset = offset >>> 0;
	  if (!noAssert) checkOffset(offset, 2, this.length);
	  return (this[offset] << 8) | this[offset + 1]
	};
	Buffer.prototype.readUint32LE =
	Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
	  offset = offset >>> 0;
	  if (!noAssert) checkOffset(offset, 4, this.length);
	  return ((this[offset]) |
	      (this[offset + 1] << 8) |
	      (this[offset + 2] << 16)) +
	      (this[offset + 3] * 0x1000000)
	};
	Buffer.prototype.readUint32BE =
	Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
	  offset = offset >>> 0;
	  if (!noAssert) checkOffset(offset, 4, this.length);
	  return (this[offset] * 0x1000000) +
	    ((this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    this[offset + 3])
	};
	Buffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {
	  offset = offset >>> 0;
	  validateNumber(offset, 'offset');
	  const first = this[offset];
	  const last = this[offset + 7];
	  if (first === undefined || last === undefined) {
	    boundsError(offset, this.length - 8);
	  }
	  const lo = first +
	    this[++offset] * 2 ** 8 +
	    this[++offset] * 2 ** 16 +
	    this[++offset] * 2 ** 24;
	  const hi = this[++offset] +
	    this[++offset] * 2 ** 8 +
	    this[++offset] * 2 ** 16 +
	    last * 2 ** 24;
	  return BigInt(lo) + (BigInt(hi) << BigInt(32))
	});
	Buffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {
	  offset = offset >>> 0;
	  validateNumber(offset, 'offset');
	  const first = this[offset];
	  const last = this[offset + 7];
	  if (first === undefined || last === undefined) {
	    boundsError(offset, this.length - 8);
	  }
	  const hi = first * 2 ** 24 +
	    this[++offset] * 2 ** 16 +
	    this[++offset] * 2 ** 8 +
	    this[++offset];
	  const lo = this[++offset] * 2 ** 24 +
	    this[++offset] * 2 ** 16 +
	    this[++offset] * 2 ** 8 +
	    last;
	  return (BigInt(hi) << BigInt(32)) + BigInt(lo)
	});
	Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
	  offset = offset >>> 0;
	  byteLength = byteLength >>> 0;
	  if (!noAssert) checkOffset(offset, byteLength, this.length);
	  let val = this[offset];
	  let mul = 1;
	  let i = 0;
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul;
	  }
	  mul *= 0x80;
	  if (val >= mul) val -= Math.pow(2, 8 * byteLength);
	  return val
	};
	Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
	  offset = offset >>> 0;
	  byteLength = byteLength >>> 0;
	  if (!noAssert) checkOffset(offset, byteLength, this.length);
	  let i = byteLength;
	  let mul = 1;
	  let val = this[offset + --i];
	  while (i > 0 && (mul *= 0x100)) {
	    val += this[offset + --i] * mul;
	  }
	  mul *= 0x80;
	  if (val >= mul) val -= Math.pow(2, 8 * byteLength);
	  return val
	};
	Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
	  offset = offset >>> 0;
	  if (!noAssert) checkOffset(offset, 1, this.length);
	  if (!(this[offset] & 0x80)) return (this[offset])
	  return ((0xff - this[offset] + 1) * -1)
	};
	Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
	  offset = offset >>> 0;
	  if (!noAssert) checkOffset(offset, 2, this.length);
	  const val = this[offset] | (this[offset + 1] << 8);
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	};
	Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
	  offset = offset >>> 0;
	  if (!noAssert) checkOffset(offset, 2, this.length);
	  const val = this[offset + 1] | (this[offset] << 8);
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	};
	Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
	  offset = offset >>> 0;
	  if (!noAssert) checkOffset(offset, 4, this.length);
	  return (this[offset]) |
	    (this[offset + 1] << 8) |
	    (this[offset + 2] << 16) |
	    (this[offset + 3] << 24)
	};
	Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
	  offset = offset >>> 0;
	  if (!noAssert) checkOffset(offset, 4, this.length);
	  return (this[offset] << 24) |
	    (this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    (this[offset + 3])
	};
	Buffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {
	  offset = offset >>> 0;
	  validateNumber(offset, 'offset');
	  const first = this[offset];
	  const last = this[offset + 7];
	  if (first === undefined || last === undefined) {
	    boundsError(offset, this.length - 8);
	  }
	  const val = this[offset + 4] +
	    this[offset + 5] * 2 ** 8 +
	    this[offset + 6] * 2 ** 16 +
	    (last << 24);
	  return (BigInt(val) << BigInt(32)) +
	    BigInt(first +
	    this[++offset] * 2 ** 8 +
	    this[++offset] * 2 ** 16 +
	    this[++offset] * 2 ** 24)
	});
	Buffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {
	  offset = offset >>> 0;
	  validateNumber(offset, 'offset');
	  const first = this[offset];
	  const last = this[offset + 7];
	  if (first === undefined || last === undefined) {
	    boundsError(offset, this.length - 8);
	  }
	  const val = (first << 24) +
	    this[++offset] * 2 ** 16 +
	    this[++offset] * 2 ** 8 +
	    this[++offset];
	  return (BigInt(val) << BigInt(32)) +
	    BigInt(this[++offset] * 2 ** 24 +
	    this[++offset] * 2 ** 16 +
	    this[++offset] * 2 ** 8 +
	    last)
	});
	Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
	  offset = offset >>> 0;
	  if (!noAssert) checkOffset(offset, 4, this.length);
	  return ieee754$1.read(this, offset, true, 23, 4)
	};
	Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
	  offset = offset >>> 0;
	  if (!noAssert) checkOffset(offset, 4, this.length);
	  return ieee754$1.read(this, offset, false, 23, 4)
	};
	Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
	  offset = offset >>> 0;
	  if (!noAssert) checkOffset(offset, 8, this.length);
	  return ieee754$1.read(this, offset, true, 52, 8)
	};
	Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
	  offset = offset >>> 0;
	  if (!noAssert) checkOffset(offset, 8, this.length);
	  return ieee754$1.read(this, offset, false, 52, 8)
	};
	function checkInt (buf, value, offset, ext, max, min) {
	  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
	  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	}
	Buffer.prototype.writeUintLE =
	Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
	  value = +value;
	  offset = offset >>> 0;
	  byteLength = byteLength >>> 0;
	  if (!noAssert) {
	    const maxBytes = Math.pow(2, 8 * byteLength) - 1;
	    checkInt(this, value, offset, byteLength, maxBytes, 0);
	  }
	  let mul = 1;
	  let i = 0;
	  this[offset] = value & 0xFF;
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF;
	  }
	  return offset + byteLength
	};
	Buffer.prototype.writeUintBE =
	Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
	  value = +value;
	  offset = offset >>> 0;
	  byteLength = byteLength >>> 0;
	  if (!noAssert) {
	    const maxBytes = Math.pow(2, 8 * byteLength) - 1;
	    checkInt(this, value, offset, byteLength, maxBytes, 0);
	  }
	  let i = byteLength - 1;
	  let mul = 1;
	  this[offset + i] = value & 0xFF;
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF;
	  }
	  return offset + byteLength
	};
	Buffer.prototype.writeUint8 =
	Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
	  value = +value;
	  offset = offset >>> 0;
	  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
	  this[offset] = (value & 0xff);
	  return offset + 1
	};
	Buffer.prototype.writeUint16LE =
	Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
	  value = +value;
	  offset = offset >>> 0;
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
	  this[offset] = (value & 0xff);
	  this[offset + 1] = (value >>> 8);
	  return offset + 2
	};
	Buffer.prototype.writeUint16BE =
	Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
	  value = +value;
	  offset = offset >>> 0;
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
	  this[offset] = (value >>> 8);
	  this[offset + 1] = (value & 0xff);
	  return offset + 2
	};
	Buffer.prototype.writeUint32LE =
	Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
	  value = +value;
	  offset = offset >>> 0;
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
	  this[offset + 3] = (value >>> 24);
	  this[offset + 2] = (value >>> 16);
	  this[offset + 1] = (value >>> 8);
	  this[offset] = (value & 0xff);
	  return offset + 4
	};
	Buffer.prototype.writeUint32BE =
	Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
	  value = +value;
	  offset = offset >>> 0;
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
	  this[offset] = (value >>> 24);
	  this[offset + 1] = (value >>> 16);
	  this[offset + 2] = (value >>> 8);
	  this[offset + 3] = (value & 0xff);
	  return offset + 4
	};
	function wrtBigUInt64LE (buf, value, offset, min, max) {
	  checkIntBI(value, min, max, buf, offset, 7);
	  let lo = Number(value & BigInt(0xffffffff));
	  buf[offset++] = lo;
	  lo = lo >> 8;
	  buf[offset++] = lo;
	  lo = lo >> 8;
	  buf[offset++] = lo;
	  lo = lo >> 8;
	  buf[offset++] = lo;
	  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff));
	  buf[offset++] = hi;
	  hi = hi >> 8;
	  buf[offset++] = hi;
	  hi = hi >> 8;
	  buf[offset++] = hi;
	  hi = hi >> 8;
	  buf[offset++] = hi;
	  return offset
	}
	function wrtBigUInt64BE (buf, value, offset, min, max) {
	  checkIntBI(value, min, max, buf, offset, 7);
	  let lo = Number(value & BigInt(0xffffffff));
	  buf[offset + 7] = lo;
	  lo = lo >> 8;
	  buf[offset + 6] = lo;
	  lo = lo >> 8;
	  buf[offset + 5] = lo;
	  lo = lo >> 8;
	  buf[offset + 4] = lo;
	  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff));
	  buf[offset + 3] = hi;
	  hi = hi >> 8;
	  buf[offset + 2] = hi;
	  hi = hi >> 8;
	  buf[offset + 1] = hi;
	  hi = hi >> 8;
	  buf[offset] = hi;
	  return offset + 8
	}
	Buffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {
	  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))
	});
	Buffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {
	  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))
	});
	Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
	  value = +value;
	  offset = offset >>> 0;
	  if (!noAssert) {
	    const limit = Math.pow(2, (8 * byteLength) - 1);
	    checkInt(this, value, offset, byteLength, limit - 1, -limit);
	  }
	  let i = 0;
	  let mul = 1;
	  let sub = 0;
	  this[offset] = value & 0xFF;
	  while (++i < byteLength && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
	      sub = 1;
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
	  }
	  return offset + byteLength
	};
	Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
	  value = +value;
	  offset = offset >>> 0;
	  if (!noAssert) {
	    const limit = Math.pow(2, (8 * byteLength) - 1);
	    checkInt(this, value, offset, byteLength, limit - 1, -limit);
	  }
	  let i = byteLength - 1;
	  let mul = 1;
	  let sub = 0;
	  this[offset + i] = value & 0xFF;
	  while (--i >= 0 && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
	      sub = 1;
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
	  }
	  return offset + byteLength
	};
	Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
	  value = +value;
	  offset = offset >>> 0;
	  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
	  if (value < 0) value = 0xff + value + 1;
	  this[offset] = (value & 0xff);
	  return offset + 1
	};
	Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
	  value = +value;
	  offset = offset >>> 0;
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
	  this[offset] = (value & 0xff);
	  this[offset + 1] = (value >>> 8);
	  return offset + 2
	};
	Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
	  value = +value;
	  offset = offset >>> 0;
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
	  this[offset] = (value >>> 8);
	  this[offset + 1] = (value & 0xff);
	  return offset + 2
	};
	Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
	  value = +value;
	  offset = offset >>> 0;
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
	  this[offset] = (value & 0xff);
	  this[offset + 1] = (value >>> 8);
	  this[offset + 2] = (value >>> 16);
	  this[offset + 3] = (value >>> 24);
	  return offset + 4
	};
	Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
	  value = +value;
	  offset = offset >>> 0;
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
	  if (value < 0) value = 0xffffffff + value + 1;
	  this[offset] = (value >>> 24);
	  this[offset + 1] = (value >>> 16);
	  this[offset + 2] = (value >>> 8);
	  this[offset + 3] = (value & 0xff);
	  return offset + 4
	};
	Buffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {
	  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))
	});
	Buffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {
	  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))
	});
	function checkIEEE754 (buf, value, offset, ext, max, min) {
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	  if (offset < 0) throw new RangeError('Index out of range')
	}
	function writeFloat (buf, value, offset, littleEndian, noAssert) {
	  value = +value;
	  offset = offset >>> 0;
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 4);
	  }
	  ieee754$1.write(buf, value, offset, littleEndian, 23, 4);
	  return offset + 4
	}
	Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, true, noAssert)
	};
	Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, false, noAssert)
	};
	function writeDouble (buf, value, offset, littleEndian, noAssert) {
	  value = +value;
	  offset = offset >>> 0;
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 8);
	  }
	  ieee754$1.write(buf, value, offset, littleEndian, 52, 8);
	  return offset + 8
	}
	Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, true, noAssert)
	};
	Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, false, noAssert)
	};
	Buffer.prototype.copy = function copy (target, targetStart, start, end) {
	  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
	  if (!start) start = 0;
	  if (!end && end !== 0) end = this.length;
	  if (targetStart >= target.length) targetStart = target.length;
	  if (!targetStart) targetStart = 0;
	  if (end > 0 && end < start) end = start;
	  if (end === start) return 0
	  if (target.length === 0 || this.length === 0) return 0
	  if (targetStart < 0) {
	    throw new RangeError('targetStart out of bounds')
	  }
	  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
	  if (end < 0) throw new RangeError('sourceEnd out of bounds')
	  if (end > this.length) end = this.length;
	  if (target.length - targetStart < end - start) {
	    end = target.length - targetStart + start;
	  }
	  const len = end - start;
	  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
	    this.copyWithin(targetStart, start, end);
	  } else {
	    Uint8Array.prototype.set.call(
	      target,
	      this.subarray(start, end),
	      targetStart
	    );
	  }
	  return len
	};
	Buffer.prototype.fill = function fill (val, start, end, encoding) {
	  if (typeof val === 'string') {
	    if (typeof start === 'string') {
	      encoding = start;
	      start = 0;
	      end = this.length;
	    } else if (typeof end === 'string') {
	      encoding = end;
	      end = this.length;
	    }
	    if (encoding !== undefined && typeof encoding !== 'string') {
	      throw new TypeError('encoding must be a string')
	    }
	    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
	      throw new TypeError('Unknown encoding: ' + encoding)
	    }
	    if (val.length === 1) {
	      const code = val.charCodeAt(0);
	      if ((encoding === 'utf8' && code < 128) ||
	          encoding === 'latin1') {
	        val = code;
	      }
	    }
	  } else if (typeof val === 'number') {
	    val = val & 255;
	  } else if (typeof val === 'boolean') {
	    val = Number(val);
	  }
	  if (start < 0 || this.length < start || this.length < end) {
	    throw new RangeError('Out of range index')
	  }
	  if (end <= start) {
	    return this
	  }
	  start = start >>> 0;
	  end = end === undefined ? this.length : end >>> 0;
	  if (!val) val = 0;
	  let i;
	  if (typeof val === 'number') {
	    for (i = start; i < end; ++i) {
	      this[i] = val;
	    }
	  } else {
	    const bytes = Buffer.isBuffer(val)
	      ? val
	      : Buffer.from(val, encoding);
	    const len = bytes.length;
	    if (len === 0) {
	      throw new TypeError('The value "' + val +
	        '" is invalid for argument "value"')
	    }
	    for (i = 0; i < end - start; ++i) {
	      this[i + start] = bytes[i % len];
	    }
	  }
	  return this
	};
	const errors = {};
	function E (sym, getMessage, Base) {
	  errors[sym] = class NodeError extends Base {
	    constructor () {
	      super();
	      Object.defineProperty(this, 'message', {
	        value: getMessage.apply(this, arguments),
	        writable: true,
	        configurable: true
	      });
	      this.name = `${this.name} [${sym}]`;
	      this.stack;
	      delete this.name;
	    }
	    get code () {
	      return sym
	    }
	    set code (value) {
	      Object.defineProperty(this, 'code', {
	        configurable: true,
	        enumerable: true,
	        value,
	        writable: true
	      });
	    }
	    toString () {
	      return `${this.name} [${sym}]: ${this.message}`
	    }
	  };
	}
	E('ERR_BUFFER_OUT_OF_BOUNDS',
	  function (name) {
	    if (name) {
	      return `${name} is outside of buffer bounds`
	    }
	    return 'Attempt to access memory outside buffer bounds'
	  }, RangeError);
	E('ERR_INVALID_ARG_TYPE',
	  function (name, actual) {
	    return `The "${name}" argument must be of type number. Received type ${typeof actual}`
	  }, TypeError);
	E('ERR_OUT_OF_RANGE',
	  function (str, range, input) {
	    let msg = `The value of "${str}" is out of range.`;
	    let received = input;
	    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {
	      received = addNumericalSeparator(String(input));
	    } else if (typeof input === 'bigint') {
	      received = String(input);
	      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {
	        received = addNumericalSeparator(received);
	      }
	      received += 'n';
	    }
	    msg += ` It must be ${range}. Received ${received}`;
	    return msg
	  }, RangeError);
	function addNumericalSeparator (val) {
	  let res = '';
	  let i = val.length;
	  const start = val[0] === '-' ? 1 : 0;
	  for (; i >= start + 4; i -= 3) {
	    res = `_${val.slice(i - 3, i)}${res}`;
	  }
	  return `${val.slice(0, i)}${res}`
	}
	function checkBounds (buf, offset, byteLength) {
	  validateNumber(offset, 'offset');
	  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {
	    boundsError(offset, buf.length - (byteLength + 1));
	  }
	}
	function checkIntBI (value, min, max, buf, offset, byteLength) {
	  if (value > max || value < min) {
	    const n = typeof min === 'bigint' ? 'n' : '';
	    let range;
	    if (byteLength > 3) {
	      if (min === 0 || min === BigInt(0)) {
	        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`;
	      } else {
	        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +
	                `${(byteLength + 1) * 8 - 1}${n}`;
	      }
	    } else {
	      range = `>= ${min}${n} and <= ${max}${n}`;
	    }
	    throw new errors.ERR_OUT_OF_RANGE('value', range, value)
	  }
	  checkBounds(buf, offset, byteLength);
	}
	function validateNumber (value, name) {
	  if (typeof value !== 'number') {
	    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)
	  }
	}
	function boundsError (value, length, type) {
	  if (Math.floor(value) !== value) {
	    validateNumber(value, type);
	    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)
	  }
	  if (length < 0) {
	    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()
	  }
	  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',
	                                    `>= ${type ? 1 : 0} and <= ${length}`,
	                                    value)
	}
	const INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
	function base64clean (str) {
	  str = str.split('=')[0];
	  str = str.trim().replace(INVALID_BASE64_RE, '');
	  if (str.length < 2) return ''
	  while (str.length % 4 !== 0) {
	    str = str + '=';
	  }
	  return str
	}
	function utf8ToBytes (string, units) {
	  units = units || Infinity;
	  let codePoint;
	  const length = string.length;
	  let leadSurrogate = null;
	  const bytes = [];
	  for (let i = 0; i < length; ++i) {
	    codePoint = string.charCodeAt(i);
	    if (codePoint > 0xD7FF && codePoint < 0xE000) {
	      if (!leadSurrogate) {
	        if (codePoint > 0xDBFF) {
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
	          continue
	        } else if (i + 1 === length) {
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
	          continue
	        }
	        leadSurrogate = codePoint;
	        continue
	      }
	      if (codePoint < 0xDC00) {
	        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
	        leadSurrogate = codePoint;
	        continue
	      }
	      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
	    } else if (leadSurrogate) {
	      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
	    }
	    leadSurrogate = null;
	    if (codePoint < 0x80) {
	      if ((units -= 1) < 0) break
	      bytes.push(codePoint);
	    } else if (codePoint < 0x800) {
	      if ((units -= 2) < 0) break
	      bytes.push(
	        codePoint >> 0x6 | 0xC0,
	        codePoint & 0x3F | 0x80
	      );
	    } else if (codePoint < 0x10000) {
	      if ((units -= 3) < 0) break
	      bytes.push(
	        codePoint >> 0xC | 0xE0,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      );
	    } else if (codePoint < 0x110000) {
	      if ((units -= 4) < 0) break
	      bytes.push(
	        codePoint >> 0x12 | 0xF0,
	        codePoint >> 0xC & 0x3F | 0x80,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      );
	    } else {
	      throw new Error('Invalid code point')
	    }
	  }
	  return bytes
	}
	function asciiToBytes (str) {
	  const byteArray = [];
	  for (let i = 0; i < str.length; ++i) {
	    byteArray.push(str.charCodeAt(i) & 0xFF);
	  }
	  return byteArray
	}
	function utf16leToBytes (str, units) {
	  let c, hi, lo;
	  const byteArray = [];
	  for (let i = 0; i < str.length; ++i) {
	    if ((units -= 2) < 0) break
	    c = str.charCodeAt(i);
	    hi = c >> 8;
	    lo = c % 256;
	    byteArray.push(lo);
	    byteArray.push(hi);
	  }
	  return byteArray
	}
	function base64ToBytes (str) {
	  return base64.toByteArray(base64clean(str))
	}
	function blitBuffer (src, dst, offset, length) {
	  let i;
	  for (i = 0; i < length; ++i) {
	    if ((i + offset >= dst.length) || (i >= src.length)) break
	    dst[i + offset] = src[i];
	  }
	  return i
	}
	function isInstance (obj, type) {
	  return obj instanceof type ||
	    (obj != null && obj.constructor != null && obj.constructor.name != null &&
	      obj.constructor.name === type.name)
	}
	function numberIsNaN (obj) {
	  return obj !== obj
	}
	const hexSliceLookupTable = (function () {
	  const alphabet = '0123456789abcdef';
	  const table = new Array(256);
	  for (let i = 0; i < 16; ++i) {
	    const i16 = i * 16;
	    for (let j = 0; j < 16; ++j) {
	      table[i16 + j] = alphabet[i] + alphabet[j];
	    }
	  }
	  return table
	})();
	function defineBigIntMethod (fn) {
	  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn
	}
	function BufferBigIntNotDefined () {
	  throw new Error('BigInt not supported')
	} 
} (buffer));

var events = {exports: {}};

var R = typeof Reflect === 'object' ? Reflect : null;
var ReflectApply = R && typeof R.apply === 'function'
  ? R.apply
  : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
  };
var ReflectOwnKeys;
if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys;
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target)
      .concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}
function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}
var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
};
function EventEmitter() {
  EventEmitter.init.call(this);
}
events.exports = EventEmitter;
events.exports.once = once;
EventEmitter.EventEmitter = EventEmitter;
EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;
var defaultMaxListeners = 10;
function checkListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
}
Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function() {
    return defaultMaxListeners;
  },
  set: function(arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners = arg;
  }
});
EventEmitter.init = function() {
  if (this._events === undefined ||
      this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }
  this._maxListeners = this._maxListeners || undefined;
};
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};
function _getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}
EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};
EventEmitter.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = (type === 'error');
  var events = this._events;
  if (events !== undefined)
    doError = (doError && events.error === undefined);
  else if (!doError)
    return false;
  if (doError) {
    var er;
    if (args.length > 0)
      er = args[0];
    if (er instanceof Error) {
      throw er;
    }
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err;
  }
  var handler = events[type];
  if (handler === undefined)
    return false;
  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      ReflectApply(listeners[i], this, args);
  }
  return true;
};
function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;
  checkListener(listener);
  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    if (events.newListener !== undefined) {
      target.emit('newListener', type,
                  listener.listener ? listener.listener : listener);
      events = target._events;
    }
    existing = events[type];
  }
  if (existing === undefined) {
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      existing = events[type] =
        prepend ? [listener, existing] : [existing, listener];
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }
    m = _getMaxListeners(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      var w = new Error('Possible EventEmitter memory leak detected. ' +
                          existing.length + ' ' + String(type) + ' listeners ' +
                          'added. Use emitter.setMaxListeners() to ' +
                          'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }
  return target;
}
EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};
EventEmitter.prototype.on = EventEmitter.prototype.addListener;
EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };
function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0)
      return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}
function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}
EventEmitter.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};
EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;
      checkListener(listener);
      events = this._events;
      if (events === undefined)
        return this;
      list = events[type];
      if (list === undefined)
        return this;
      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;
        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }
        if (position < 0)
          return this;
        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }
        if (list.length === 1)
          events[type] = list[0];
        if (events.removeListener !== undefined)
          this.emit('removeListener', type, originalListener || listener);
      }
      return this;
    };
EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;
      events = this._events;
      if (events === undefined)
        return this;
      if (events.removeListener === undefined) {
        if (arguments.length === 0) {
          this._events = Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== undefined) {
          if (--this._eventsCount === 0)
            this._events = Object.create(null);
          else
            delete events[type];
        }
        return this;
      }
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
      }
      listeners = events[type];
      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners !== undefined) {
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }
      return this;
    };
function _listeners(target, type, unwrap) {
  var events = target._events;
  if (events === undefined)
    return [];
  var evlistener = events[type];
  if (evlistener === undefined)
    return [];
  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];
  return unwrap ?
    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}
EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};
EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};
EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};
EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;
  if (events !== undefined) {
    var evlistener = events[type];
    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }
  return 0;
}
EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};
function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}
function spliceOne(list, index) {
  for (; index + 1 < list.length; index++)
    list[index] = list[index + 1];
  list.pop();
}
function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}
function once(emitter, name) {
  return new Promise(function (resolve, reject) {
    function errorListener(err) {
      emitter.removeListener(name, resolver);
      reject(err);
    }
    function resolver() {
      if (typeof emitter.removeListener === 'function') {
        emitter.removeListener('error', errorListener);
      }
      resolve([].slice.call(arguments));
    }    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
    if (name !== 'error') {
      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
    }
  });
}
function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
  if (typeof emitter.on === 'function') {
    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
  }
}
function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
  if (typeof emitter.on === 'function') {
    if (flags.once) {
      emitter.once(name, listener);
    } else {
      emitter.on(name, listener);
    }
  } else if (typeof emitter.addEventListener === 'function') {
    emitter.addEventListener(name, function wrapListener(arg) {
      if (flags.once) {
        emitter.removeEventListener(name, wrapListener);
      }
      listener(arg);
    });
  } else {
    throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
  }
}

var eventsExports = events.exports;

var inherits_browser = {exports: {}};

if (typeof Object.create === 'function') {
  inherits_browser.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor;
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
    }
  };
} else {
  inherits_browser.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor;
      var TempCtor = function () {};
      TempCtor.prototype = superCtor.prototype;
      ctor.prototype = new TempCtor();
      ctor.prototype.constructor = ctor;
    }
  };
}

var inherits_browserExports = inherits_browser.exports;

var browser = {exports: {}};

var process = browser.exports = {};
var cachedSetTimeout;
var cachedClearTimeout;
function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ());
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        return setTimeout(fun, 0);
    }
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            return cachedSetTimeout.call(this, fun, 0);
        }
    }
}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        return clearTimeout(marker);
    }
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            return cachedClearTimeout.call(this, marker);
        }
    }
}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;
function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}
function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;
    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}
process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = '';
process.versions = {};
function noop() {}
process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;
process.listeners = function (name) { return [] };
process.binding = function (name) {
    throw new Error('process.binding is not supported');
};
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

var browserExports = browser.exports;
var process$1 = /*@__PURE__*/getDefaultExportFromCjs$1(browserExports);

var stream$2;
var hasRequiredStream;

function requireStream () {
	if (hasRequiredStream) return stream$2;
	hasRequiredStream = 1;
	stream$2 = requireStreamBrowserify();
	return stream$2;
}

var util = {};

var types = {};

var shams$1 = function hasSymbols() {
	if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }
	if (typeof Symbol.iterator === 'symbol') { return true; }
	var obj = {};
	var sym = Symbol('test');
	var symObj = Object(sym);
	if (typeof sym === 'string') { return false; }
	if (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }
	if (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }
	var symVal = 42;
	obj[sym] = symVal;
	for (sym in obj) { return false; }
	if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }
	if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }
	var syms = Object.getOwnPropertySymbols(obj);
	if (syms.length !== 1 || syms[0] !== sym) { return false; }
	if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }
	if (typeof Object.getOwnPropertyDescriptor === 'function') {
		var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
		if (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }
	}
	return true;
};

var hasSymbols$5 = shams$1;
var shams = function hasToStringTagShams() {
	return hasSymbols$5() && !!Symbol.toStringTag;
};

var esErrors = Error;

var _eval = EvalError;

var range = RangeError;

var ref = ReferenceError;

var syntax = SyntaxError;

var type = TypeError;

var uri = URIError;

var origSymbol = typeof Symbol !== 'undefined' && Symbol;
var hasSymbolSham = shams$1;
var hasSymbols$4 = function hasNativeSymbols() {
	if (typeof origSymbol !== 'function') { return false; }
	if (typeof Symbol !== 'function') { return false; }
	if (typeof origSymbol('foo') !== 'symbol') { return false; }
	if (typeof Symbol('bar') !== 'symbol') { return false; }
	return hasSymbolSham();
};

var test = {
	__proto__: null,
	foo: {}
};
var $Object$1 = Object;
var hasProto$1 = function hasProto() {
	return { __proto__: test }.foo === test.foo
		&& !(test instanceof $Object$1);
};

var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
var toStr$a = Object.prototype.toString;
var max = Math.max;
var funcType = '[object Function]';
var concatty = function concatty(a, b) {
    var arr = [];
    for (var i = 0; i < a.length; i += 1) {
        arr[i] = a[i];
    }
    for (var j = 0; j < b.length; j += 1) {
        arr[j + a.length] = b[j];
    }
    return arr;
};
var slicy = function slicy(arrLike, offset) {
    var arr = [];
    for (var i = offset || 0, j = 0; i < arrLike.length; i += 1, j += 1) {
        arr[j] = arrLike[i];
    }
    return arr;
};
var joiny = function (arr, joiner) {
    var str = '';
    for (var i = 0; i < arr.length; i += 1) {
        str += arr[i];
        if (i + 1 < arr.length) {
            str += joiner;
        }
    }
    return str;
};
var implementation$c = function bind(that) {
    var target = this;
    if (typeof target !== 'function' || toStr$a.apply(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
    }
    var args = slicy(arguments, 1);
    var bound;
    var binder = function () {
        if (this instanceof bound) {
            var result = target.apply(
                this,
                concatty(args, arguments)
            );
            if (Object(result) === result) {
                return result;
            }
            return this;
        }
        return target.apply(
            that,
            concatty(args, arguments)
        );
    };
    var boundLength = max(0, target.length - args.length);
    var boundArgs = [];
    for (var i = 0; i < boundLength; i++) {
        boundArgs[i] = '$' + i;
    }
    bound = Function('binder', 'return function (' + joiny(boundArgs, ',') + '){ return binder.apply(this,arguments); }')(binder);
    if (target.prototype) {
        var Empty = function Empty() {};
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
    }
    return bound;
};

var implementation$b = implementation$c;
var functionBind = Function.prototype.bind || implementation$b;

var call = Function.prototype.call;
var $hasOwn = Object.prototype.hasOwnProperty;
var bind$1 = functionBind;
var hasown = bind$1.call(call, $hasOwn);

var undefined$1;
var $Error = esErrors;
var $EvalError = _eval;
var $RangeError = range;
var $ReferenceError = ref;
var $SyntaxError$1 = syntax;
var $TypeError$5 = type;
var $URIError = uri;
var $Function = Function;
var getEvalledConstructor = function (expressionSyntax) {
	try {
		return $Function('"use strict"; return (' + expressionSyntax + ').constructor;')();
	} catch (e) {}
};
var $gOPD$2 = Object.getOwnPropertyDescriptor;
if ($gOPD$2) {
	try {
		$gOPD$2({}, '');
	} catch (e) {
		$gOPD$2 = null;
	}
}
var throwTypeError = function () {
	throw new $TypeError$5();
};
var ThrowTypeError = $gOPD$2
	? (function () {
		try {
			arguments.callee;
			return throwTypeError;
		} catch (calleeThrows) {
			try {
				return $gOPD$2(arguments, 'callee').get;
			} catch (gOPDthrows) {
				return throwTypeError;
			}
		}
	}())
	: throwTypeError;
var hasSymbols$3 = hasSymbols$4();
var hasProto = hasProto$1();
var getProto$2 = Object.getPrototypeOf || (
	hasProto
		? function (x) { return x.__proto__; }
		: null
);
var needsEval = {};
var TypedArray = typeof Uint8Array === 'undefined' || !getProto$2 ? undefined$1 : getProto$2(Uint8Array);
var INTRINSICS = {
	__proto__: null,
	'%AggregateError%': typeof AggregateError === 'undefined' ? undefined$1 : AggregateError,
	'%Array%': Array,
	'%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined$1 : ArrayBuffer,
	'%ArrayIteratorPrototype%': hasSymbols$3 && getProto$2 ? getProto$2([][Symbol.iterator]()) : undefined$1,
	'%AsyncFromSyncIteratorPrototype%': undefined$1,
	'%AsyncFunction%': needsEval,
	'%AsyncGenerator%': needsEval,
	'%AsyncGeneratorFunction%': needsEval,
	'%AsyncIteratorPrototype%': needsEval,
	'%Atomics%': typeof Atomics === 'undefined' ? undefined$1 : Atomics,
	'%BigInt%': typeof BigInt === 'undefined' ? undefined$1 : BigInt,
	'%BigInt64Array%': typeof BigInt64Array === 'undefined' ? undefined$1 : BigInt64Array,
	'%BigUint64Array%': typeof BigUint64Array === 'undefined' ? undefined$1 : BigUint64Array,
	'%Boolean%': Boolean,
	'%DataView%': typeof DataView === 'undefined' ? undefined$1 : DataView,
	'%Date%': Date,
	'%decodeURI%': decodeURI,
	'%decodeURIComponent%': decodeURIComponent,
	'%encodeURI%': encodeURI,
	'%encodeURIComponent%': encodeURIComponent,
	'%Error%': $Error,
	'%eval%': eval,
	'%EvalError%': $EvalError,
	'%Float32Array%': typeof Float32Array === 'undefined' ? undefined$1 : Float32Array,
	'%Float64Array%': typeof Float64Array === 'undefined' ? undefined$1 : Float64Array,
	'%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined$1 : FinalizationRegistry,
	'%Function%': $Function,
	'%GeneratorFunction%': needsEval,
	'%Int8Array%': typeof Int8Array === 'undefined' ? undefined$1 : Int8Array,
	'%Int16Array%': typeof Int16Array === 'undefined' ? undefined$1 : Int16Array,
	'%Int32Array%': typeof Int32Array === 'undefined' ? undefined$1 : Int32Array,
	'%isFinite%': isFinite,
	'%isNaN%': isNaN,
	'%IteratorPrototype%': hasSymbols$3 && getProto$2 ? getProto$2(getProto$2([][Symbol.iterator]())) : undefined$1,
	'%JSON%': typeof JSON === 'object' ? JSON : undefined$1,
	'%Map%': typeof Map === 'undefined' ? undefined$1 : Map,
	'%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols$3 || !getProto$2 ? undefined$1 : getProto$2(new Map()[Symbol.iterator]()),
	'%Math%': Math,
	'%Number%': Number,
	'%Object%': Object,
	'%parseFloat%': parseFloat,
	'%parseInt%': parseInt,
	'%Promise%': typeof Promise === 'undefined' ? undefined$1 : Promise,
	'%Proxy%': typeof Proxy === 'undefined' ? undefined$1 : Proxy,
	'%RangeError%': $RangeError,
	'%ReferenceError%': $ReferenceError,
	'%Reflect%': typeof Reflect === 'undefined' ? undefined$1 : Reflect,
	'%RegExp%': RegExp,
	'%Set%': typeof Set === 'undefined' ? undefined$1 : Set,
	'%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols$3 || !getProto$2 ? undefined$1 : getProto$2(new Set()[Symbol.iterator]()),
	'%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined$1 : SharedArrayBuffer,
	'%String%': String,
	'%StringIteratorPrototype%': hasSymbols$3 && getProto$2 ? getProto$2(''[Symbol.iterator]()) : undefined$1,
	'%Symbol%': hasSymbols$3 ? Symbol : undefined$1,
	'%SyntaxError%': $SyntaxError$1,
	'%ThrowTypeError%': ThrowTypeError,
	'%TypedArray%': TypedArray,
	'%TypeError%': $TypeError$5,
	'%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined$1 : Uint8Array,
	'%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined$1 : Uint8ClampedArray,
	'%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined$1 : Uint16Array,
	'%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined$1 : Uint32Array,
	'%URIError%': $URIError,
	'%WeakMap%': typeof WeakMap === 'undefined' ? undefined$1 : WeakMap,
	'%WeakRef%': typeof WeakRef === 'undefined' ? undefined$1 : WeakRef,
	'%WeakSet%': typeof WeakSet === 'undefined' ? undefined$1 : WeakSet
};
if (getProto$2) {
	try {
		null.error;
	} catch (e) {
		var errorProto = getProto$2(getProto$2(e));
		INTRINSICS['%Error.prototype%'] = errorProto;
	}
}
var doEval = function doEval(name) {
	var value;
	if (name === '%AsyncFunction%') {
		value = getEvalledConstructor('async function () {}');
	} else if (name === '%GeneratorFunction%') {
		value = getEvalledConstructor('function* () {}');
	} else if (name === '%AsyncGeneratorFunction%') {
		value = getEvalledConstructor('async function* () {}');
	} else if (name === '%AsyncGenerator%') {
		var fn = doEval('%AsyncGeneratorFunction%');
		if (fn) {
			value = fn.prototype;
		}
	} else if (name === '%AsyncIteratorPrototype%') {
		var gen = doEval('%AsyncGenerator%');
		if (gen && getProto$2) {
			value = getProto$2(gen.prototype);
		}
	}
	INTRINSICS[name] = value;
	return value;
};
var LEGACY_ALIASES = {
	__proto__: null,
	'%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],
	'%ArrayPrototype%': ['Array', 'prototype'],
	'%ArrayProto_entries%': ['Array', 'prototype', 'entries'],
	'%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],
	'%ArrayProto_keys%': ['Array', 'prototype', 'keys'],
	'%ArrayProto_values%': ['Array', 'prototype', 'values'],
	'%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],
	'%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],
	'%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],
	'%BooleanPrototype%': ['Boolean', 'prototype'],
	'%DataViewPrototype%': ['DataView', 'prototype'],
	'%DatePrototype%': ['Date', 'prototype'],
	'%ErrorPrototype%': ['Error', 'prototype'],
	'%EvalErrorPrototype%': ['EvalError', 'prototype'],
	'%Float32ArrayPrototype%': ['Float32Array', 'prototype'],
	'%Float64ArrayPrototype%': ['Float64Array', 'prototype'],
	'%FunctionPrototype%': ['Function', 'prototype'],
	'%Generator%': ['GeneratorFunction', 'prototype'],
	'%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],
	'%Int8ArrayPrototype%': ['Int8Array', 'prototype'],
	'%Int16ArrayPrototype%': ['Int16Array', 'prototype'],
	'%Int32ArrayPrototype%': ['Int32Array', 'prototype'],
	'%JSONParse%': ['JSON', 'parse'],
	'%JSONStringify%': ['JSON', 'stringify'],
	'%MapPrototype%': ['Map', 'prototype'],
	'%NumberPrototype%': ['Number', 'prototype'],
	'%ObjectPrototype%': ['Object', 'prototype'],
	'%ObjProto_toString%': ['Object', 'prototype', 'toString'],
	'%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],
	'%PromisePrototype%': ['Promise', 'prototype'],
	'%PromiseProto_then%': ['Promise', 'prototype', 'then'],
	'%Promise_all%': ['Promise', 'all'],
	'%Promise_reject%': ['Promise', 'reject'],
	'%Promise_resolve%': ['Promise', 'resolve'],
	'%RangeErrorPrototype%': ['RangeError', 'prototype'],
	'%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],
	'%RegExpPrototype%': ['RegExp', 'prototype'],
	'%SetPrototype%': ['Set', 'prototype'],
	'%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],
	'%StringPrototype%': ['String', 'prototype'],
	'%SymbolPrototype%': ['Symbol', 'prototype'],
	'%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],
	'%TypedArrayPrototype%': ['TypedArray', 'prototype'],
	'%TypeErrorPrototype%': ['TypeError', 'prototype'],
	'%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],
	'%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],
	'%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],
	'%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],
	'%URIErrorPrototype%': ['URIError', 'prototype'],
	'%WeakMapPrototype%': ['WeakMap', 'prototype'],
	'%WeakSetPrototype%': ['WeakSet', 'prototype']
};
var bind = functionBind;
var hasOwn$1 = hasown;
var $concat$1 = bind.call(Function.call, Array.prototype.concat);
var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
var $replace$1 = bind.call(Function.call, String.prototype.replace);
var $strSlice = bind.call(Function.call, String.prototype.slice);
var $exec$1 = bind.call(Function.call, RegExp.prototype.exec);
var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
var reEscapeChar = /\\(\\)?/g;
var stringToPath = function stringToPath(string) {
	var first = $strSlice(string, 0, 1);
	var last = $strSlice(string, -1);
	if (first === '%' && last !== '%') {
		throw new $SyntaxError$1('invalid intrinsic syntax, expected closing `%`');
	} else if (last === '%' && first !== '%') {
		throw new $SyntaxError$1('invalid intrinsic syntax, expected opening `%`');
	}
	var result = [];
	$replace$1(string, rePropName, function (match, number, quote, subString) {
		result[result.length] = quote ? $replace$1(subString, reEscapeChar, '$1') : number || match;
	});
	return result;
};
var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
	var intrinsicName = name;
	var alias;
	if (hasOwn$1(LEGACY_ALIASES, intrinsicName)) {
		alias = LEGACY_ALIASES[intrinsicName];
		intrinsicName = '%' + alias[0] + '%';
	}
	if (hasOwn$1(INTRINSICS, intrinsicName)) {
		var value = INTRINSICS[intrinsicName];
		if (value === needsEval) {
			value = doEval(intrinsicName);
		}
		if (typeof value === 'undefined' && !allowMissing) {
			throw new $TypeError$5('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
		}
		return {
			alias: alias,
			name: intrinsicName,
			value: value
		};
	}
	throw new $SyntaxError$1('intrinsic ' + name + ' does not exist!');
};
var getIntrinsic = function GetIntrinsic(name, allowMissing) {
	if (typeof name !== 'string' || name.length === 0) {
		throw new $TypeError$5('intrinsic name must be a non-empty string');
	}
	if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
		throw new $TypeError$5('"allowMissing" argument must be a boolean');
	}
	if ($exec$1(/^%?[^%]*%?$/, name) === null) {
		throw new $SyntaxError$1('`%` may not be present anywhere but at the beginning and end of the intrinsic name');
	}
	var parts = stringToPath(name);
	var intrinsicBaseName = parts.length > 0 ? parts[0] : '';
	var intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);
	var intrinsicRealName = intrinsic.name;
	var value = intrinsic.value;
	var skipFurtherCaching = false;
	var alias = intrinsic.alias;
	if (alias) {
		intrinsicBaseName = alias[0];
		$spliceApply(parts, $concat$1([0, 1], alias));
	}
	for (var i = 1, isOwn = true; i < parts.length; i += 1) {
		var part = parts[i];
		var first = $strSlice(part, 0, 1);
		var last = $strSlice(part, -1);
		if (
			(
				(first === '"' || first === "'" || first === '`')
				|| (last === '"' || last === "'" || last === '`')
			)
			&& first !== last
		) {
			throw new $SyntaxError$1('property names with quotes must have matching quotes');
		}
		if (part === 'constructor' || !isOwn) {
			skipFurtherCaching = true;
		}
		intrinsicBaseName += '.' + part;
		intrinsicRealName = '%' + intrinsicBaseName + '%';
		if (hasOwn$1(INTRINSICS, intrinsicRealName)) {
			value = INTRINSICS[intrinsicRealName];
		} else if (value != null) {
			if (!(part in value)) {
				if (!allowMissing) {
					throw new $TypeError$5('base intrinsic for ' + name + ' exists, but the property is not available.');
				}
				return void undefined$1;
			}
			if ($gOPD$2 && (i + 1) >= parts.length) {
				var desc = $gOPD$2(value, part);
				isOwn = !!desc;
				if (isOwn && 'get' in desc && !('originalValue' in desc.get)) {
					value = desc.get;
				} else {
					value = value[part];
				}
			} else {
				isOwn = hasOwn$1(value, part);
				value = value[part];
			}
			if (isOwn && !skipFurtherCaching) {
				INTRINSICS[intrinsicRealName] = value;
			}
		}
	}
	return value;
};

var callBind$6 = {exports: {}};

var esDefineProperty;
var hasRequiredEsDefineProperty;

function requireEsDefineProperty () {
	if (hasRequiredEsDefineProperty) return esDefineProperty;
	hasRequiredEsDefineProperty = 1;
	var GetIntrinsic = getIntrinsic;
	var $defineProperty = GetIntrinsic('%Object.defineProperty%', true) || false;
	if ($defineProperty) {
		try {
			$defineProperty({}, 'a', { value: 1 });
		} catch (e) {
			$defineProperty = false;
		}
	}
	esDefineProperty = $defineProperty;
	return esDefineProperty;
}

var GetIntrinsic$6 = getIntrinsic;
var $gOPD$1 = GetIntrinsic$6('%Object.getOwnPropertyDescriptor%', true);
if ($gOPD$1) {
	try {
		$gOPD$1([], 'length');
	} catch (e) {
		$gOPD$1 = null;
	}
}
var gopd$1 = $gOPD$1;

var $defineProperty$1 = requireEsDefineProperty();
var $SyntaxError = syntax;
var $TypeError$4 = type;
var gopd = gopd$1;
var defineDataProperty$1 = function defineDataProperty(
	obj,
	property,
	value
) {
	if (!obj || (typeof obj !== 'object' && typeof obj !== 'function')) {
		throw new $TypeError$4('`obj` must be an object or a function`');
	}
	if (typeof property !== 'string' && typeof property !== 'symbol') {
		throw new $TypeError$4('`property` must be a string or a symbol`');
	}
	if (arguments.length > 3 && typeof arguments[3] !== 'boolean' && arguments[3] !== null) {
		throw new $TypeError$4('`nonEnumerable`, if provided, must be a boolean or null');
	}
	if (arguments.length > 4 && typeof arguments[4] !== 'boolean' && arguments[4] !== null) {
		throw new $TypeError$4('`nonWritable`, if provided, must be a boolean or null');
	}
	if (arguments.length > 5 && typeof arguments[5] !== 'boolean' && arguments[5] !== null) {
		throw new $TypeError$4('`nonConfigurable`, if provided, must be a boolean or null');
	}
	if (arguments.length > 6 && typeof arguments[6] !== 'boolean') {
		throw new $TypeError$4('`loose`, if provided, must be a boolean');
	}
	var nonEnumerable = arguments.length > 3 ? arguments[3] : null;
	var nonWritable = arguments.length > 4 ? arguments[4] : null;
	var nonConfigurable = arguments.length > 5 ? arguments[5] : null;
	var loose = arguments.length > 6 ? arguments[6] : false;
	var desc = !!gopd && gopd(obj, property);
	if ($defineProperty$1) {
		$defineProperty$1(obj, property, {
			configurable: nonConfigurable === null && desc ? desc.configurable : !nonConfigurable,
			enumerable: nonEnumerable === null && desc ? desc.enumerable : !nonEnumerable,
			value: value,
			writable: nonWritable === null && desc ? desc.writable : !nonWritable
		});
	} else if (loose || (!nonEnumerable && !nonWritable && !nonConfigurable)) {
		obj[property] = value;
	} else {
		throw new $SyntaxError('This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.');
	}
};

var $defineProperty = requireEsDefineProperty();
var hasPropertyDescriptors = function hasPropertyDescriptors() {
	return !!$defineProperty;
};
hasPropertyDescriptors.hasArrayLengthDefineBug = function hasArrayLengthDefineBug() {
	if (!$defineProperty) {
		return null;
	}
	try {
		return $defineProperty([], 'length', { value: 1 }).length !== 1;
	} catch (e) {
		return true;
	}
};
var hasPropertyDescriptors_1 = hasPropertyDescriptors;

var GetIntrinsic$5 = getIntrinsic;
var define$5 = defineDataProperty$1;
var hasDescriptors$1 = hasPropertyDescriptors_1();
var gOPD$4 = gopd$1;
var $TypeError$3 = type;
var $floor$1 = GetIntrinsic$5('%Math.floor%');
var setFunctionLength = function setFunctionLength(fn, length) {
	if (typeof fn !== 'function') {
		throw new $TypeError$3('`fn` is not a function');
	}
	if (typeof length !== 'number' || length < 0 || length > 0xFFFFFFFF || $floor$1(length) !== length) {
		throw new $TypeError$3('`length` must be a positive 32-bit integer');
	}
	var loose = arguments.length > 2 && !!arguments[2];
	var functionLengthIsConfigurable = true;
	var functionLengthIsWritable = true;
	if ('length' in fn && gOPD$4) {
		var desc = gOPD$4(fn, 'length');
		if (desc && !desc.configurable) {
			functionLengthIsConfigurable = false;
		}
		if (desc && !desc.writable) {
			functionLengthIsWritable = false;
		}
	}
	if (functionLengthIsConfigurable || functionLengthIsWritable || !loose) {
		if (hasDescriptors$1) {
			define$5( (fn), 'length', length, true, true);
		} else {
			define$5( (fn), 'length', length);
		}
	}
	return fn;
};

(function (module) {
	var bind = functionBind;
	var GetIntrinsic = getIntrinsic;
	var setFunctionLength$1 = setFunctionLength;
	var $TypeError = type;
	var $apply = GetIntrinsic('%Function.prototype.apply%');
	var $call = GetIntrinsic('%Function.prototype.call%');
	var $reflectApply = GetIntrinsic('%Reflect.apply%', true) || bind.call($call, $apply);
	var $defineProperty = requireEsDefineProperty();
	var $max = GetIntrinsic('%Math.max%');
	module.exports = function callBind(originalFunction) {
		if (typeof originalFunction !== 'function') {
			throw new $TypeError('a function is required');
		}
		var func = $reflectApply(bind, $call, arguments);
		return setFunctionLength$1(
			func,
			1 + $max(0, originalFunction.length - (arguments.length - 1)),
			true
		);
	};
	var applyBind = function applyBind() {
		return $reflectApply(bind, $apply, arguments);
	};
	if ($defineProperty) {
		$defineProperty(module.exports, 'apply', { value: applyBind });
	} else {
		module.exports.apply = applyBind;
	} 
} (callBind$6));

var callBindExports = callBind$6.exports;

var GetIntrinsic$4 = getIntrinsic;
var callBind$5 = callBindExports;
var $indexOf$1 = callBind$5(GetIntrinsic$4('String.prototype.indexOf'));
var callBound$b = function callBoundIntrinsic(name, allowMissing) {
	var intrinsic = GetIntrinsic$4(name, !!allowMissing);
	if (typeof intrinsic === 'function' && $indexOf$1(name, '.prototype.') > -1) {
		return callBind$5(intrinsic);
	}
	return intrinsic;
};

var hasToStringTag$8 = shams();
var callBound$a = callBound$b;
var $toString$4 = callBound$a('Object.prototype.toString');
var isStandardArguments = function isArguments(value) {
	if (hasToStringTag$8 && value && typeof value === 'object' && Symbol.toStringTag in value) {
		return false;
	}
	return $toString$4(value) === '[object Arguments]';
};
var isLegacyArguments = function isArguments(value) {
	if (isStandardArguments(value)) {
		return true;
	}
	return value !== null &&
		typeof value === 'object' &&
		typeof value.length === 'number' &&
		value.length >= 0 &&
		$toString$4(value) !== '[object Array]' &&
		$toString$4(value.callee) === '[object Function]';
};
var supportsStandardArguments = (function () {
	return isStandardArguments(arguments);
}());
isStandardArguments.isLegacyArguments = isLegacyArguments;
var isArguments$2 = supportsStandardArguments ? isStandardArguments : isLegacyArguments;

var toStr$9 = Object.prototype.toString;
var fnToStr$1 = Function.prototype.toString;
var isFnRegex = /^\s*(?:function)?\*/;
var hasToStringTag$7 = shams();
var getProto$1 = Object.getPrototypeOf;
var getGeneratorFunc = function () {
	if (!hasToStringTag$7) {
		return false;
	}
	try {
		return Function('return function*() {}')();
	} catch (e) {
	}
};
var GeneratorFunction;
var isGeneratorFunction = function isGeneratorFunction(fn) {
	if (typeof fn !== 'function') {
		return false;
	}
	if (isFnRegex.test(fnToStr$1.call(fn))) {
		return true;
	}
	if (!hasToStringTag$7) {
		var str = toStr$9.call(fn);
		return str === '[object GeneratorFunction]';
	}
	if (!getProto$1) {
		return false;
	}
	if (typeof GeneratorFunction === 'undefined') {
		var generatorFunc = getGeneratorFunc();
		GeneratorFunction = generatorFunc ? getProto$1(generatorFunc) : false;
	}
	return getProto$1(fn) === GeneratorFunction;
};

var fnToStr = Function.prototype.toString;
var reflectApply = typeof Reflect === 'object' && Reflect !== null && Reflect.apply;
var badArrayLike;
var isCallableMarker;
if (typeof reflectApply === 'function' && typeof Object.defineProperty === 'function') {
	try {
		badArrayLike = Object.defineProperty({}, 'length', {
			get: function () {
				throw isCallableMarker;
			}
		});
		isCallableMarker = {};
		reflectApply(function () { throw 42; }, null, badArrayLike);
	} catch (_) {
		if (_ !== isCallableMarker) {
			reflectApply = null;
		}
	}
} else {
	reflectApply = null;
}
var constructorRegex = /^\s*class\b/;
var isES6ClassFn = function isES6ClassFunction(value) {
	try {
		var fnStr = fnToStr.call(value);
		return constructorRegex.test(fnStr);
	} catch (e) {
		return false;
	}
};
var tryFunctionObject = function tryFunctionToStr(value) {
	try {
		if (isES6ClassFn(value)) { return false; }
		fnToStr.call(value);
		return true;
	} catch (e) {
		return false;
	}
};
var toStr$8 = Object.prototype.toString;
var objectClass = '[object Object]';
var fnClass = '[object Function]';
var genClass = '[object GeneratorFunction]';
var ddaClass = '[object HTMLAllCollection]';
var ddaClass2 = '[object HTML document.all class]';
var ddaClass3 = '[object HTMLCollection]';
var hasToStringTag$6 = typeof Symbol === 'function' && !!Symbol.toStringTag;
var isIE68 = !(0 in [,]);
var isDDA = function isDocumentDotAll() { return false; };
if (typeof document === 'object') {
	var all = document.all;
	if (toStr$8.call(all) === toStr$8.call(document.all)) {
		isDDA = function isDocumentDotAll(value) {
			if ((isIE68 || !value) && (typeof value === 'undefined' || typeof value === 'object')) {
				try {
					var str = toStr$8.call(value);
					return (
						str === ddaClass
						|| str === ddaClass2
						|| str === ddaClass3
						|| str === objectClass
					) && value('') == null;
				} catch (e) {  }
			}
			return false;
		};
	}
}
var isCallable$1 = reflectApply
	? function isCallable(value) {
		if (isDDA(value)) { return true; }
		if (!value) { return false; }
		if (typeof value !== 'function' && typeof value !== 'object') { return false; }
		try {
			reflectApply(value, null, badArrayLike);
		} catch (e) {
			if (e !== isCallableMarker) { return false; }
		}
		return !isES6ClassFn(value) && tryFunctionObject(value);
	}
	: function isCallable(value) {
		if (isDDA(value)) { return true; }
		if (!value) { return false; }
		if (typeof value !== 'function' && typeof value !== 'object') { return false; }
		if (hasToStringTag$6) { return tryFunctionObject(value); }
		if (isES6ClassFn(value)) { return false; }
		var strClass = toStr$8.call(value);
		if (strClass !== fnClass && strClass !== genClass && !(/^\[object HTML/).test(strClass)) { return false; }
		return tryFunctionObject(value);
	};

var isCallable = isCallable$1;
var toStr$7 = Object.prototype.toString;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var forEachArray = function forEachArray(array, iterator, receiver) {
    for (var i = 0, len = array.length; i < len; i++) {
        if (hasOwnProperty.call(array, i)) {
            if (receiver == null) {
                iterator(array[i], i, array);
            } else {
                iterator.call(receiver, array[i], i, array);
            }
        }
    }
};
var forEachString = function forEachString(string, iterator, receiver) {
    for (var i = 0, len = string.length; i < len; i++) {
        if (receiver == null) {
            iterator(string.charAt(i), i, string);
        } else {
            iterator.call(receiver, string.charAt(i), i, string);
        }
    }
};
var forEachObject = function forEachObject(object, iterator, receiver) {
    for (var k in object) {
        if (hasOwnProperty.call(object, k)) {
            if (receiver == null) {
                iterator(object[k], k, object);
            } else {
                iterator.call(receiver, object[k], k, object);
            }
        }
    }
};
var forEach$1 = function forEach(list, iterator, thisArg) {
    if (!isCallable(iterator)) {
        throw new TypeError('iterator must be a function');
    }
    var receiver;
    if (arguments.length >= 3) {
        receiver = thisArg;
    }
    if (toStr$7.call(list) === '[object Array]') {
        forEachArray(list, iterator, receiver);
    } else if (typeof list === 'string') {
        forEachString(list, iterator, receiver);
    } else {
        forEachObject(list, iterator, receiver);
    }
};
var forEach_1 = forEach$1;

var possibleTypedArrayNames = [
	'Float32Array',
	'Float64Array',
	'Int8Array',
	'Int16Array',
	'Int32Array',
	'Uint8Array',
	'Uint8ClampedArray',
	'Uint16Array',
	'Uint32Array',
	'BigInt64Array',
	'BigUint64Array'
];

var possibleNames = possibleTypedArrayNames;
var g$1 = typeof globalThis === 'undefined' ? commonjsGlobal$1 : globalThis;
var availableTypedArrays$1 = function availableTypedArrays() {
	var  out = [];
	for (var i = 0; i < possibleNames.length; i++) {
		if (typeof g$1[possibleNames[i]] === 'function') {
			out[out.length] = possibleNames[i];
		}
	}
	return out;
};

var forEach = forEach_1;
var availableTypedArrays = availableTypedArrays$1;
var callBind$4 = callBindExports;
var callBound$9 = callBound$b;
var gOPD$3 = gopd$1;
var $toString$3 = callBound$9('Object.prototype.toString');
var hasToStringTag$5 = shams();
var g = typeof globalThis === 'undefined' ? commonjsGlobal$1 : globalThis;
var typedArrays = availableTypedArrays();
var $slice$1 = callBound$9('String.prototype.slice');
var getPrototypeOf = Object.getPrototypeOf;
var $indexOf = callBound$9('Array.prototype.indexOf', true) ||  function indexOf(array, value) {
	for (var i = 0; i < array.length; i += 1) {
		if (array[i] === value) {
			return i;
		}
	}
	return -1;
};
var cache = { __proto__: null };
if (hasToStringTag$5 && gOPD$3 && getPrototypeOf) {
	forEach(typedArrays, function (typedArray) {
		var arr = new g[typedArray]();
		if (Symbol.toStringTag in arr) {
			var proto = getPrototypeOf(arr);
			var descriptor = gOPD$3(proto, Symbol.toStringTag);
			if (!descriptor) {
				var superProto = getPrototypeOf(proto);
				descriptor = gOPD$3(superProto, Symbol.toStringTag);
			}
			cache['$' + typedArray] = callBind$4(descriptor.get);
		}
	});
} else {
	forEach(typedArrays, function (typedArray) {
		var arr = new g[typedArray]();
		var fn = arr.slice || arr.set;
		if (fn) {
			cache['$' + typedArray] = callBind$4(fn);
		}
	});
}
var tryTypedArrays = function tryAllTypedArrays(value) {
	 var found = false;
	forEach(
		  (cache),
		 function (getter, typedArray) {
			if (!found) {
				try {
					if ('$' + getter(value) === typedArray) {
						found = $slice$1(typedArray, 1);
					}
				} catch (e) {  }
			}
		}
	);
	return found;
};
var trySlices = function tryAllSlices(value) {
	 var found = false;
	forEach(
		 (cache),
		 function (getter, name) {
			if (!found) {
				try {
					getter(value);
					found = $slice$1(name, 1);
				} catch (e) {  }
			}
		}
	);
	return found;
};
var whichTypedArray$2 = function whichTypedArray(value) {
	if (!value || typeof value !== 'object') { return false; }
	if (!hasToStringTag$5) {
		var tag = $slice$1($toString$3(value), 8, -1);
		if ($indexOf(typedArrays, tag) > -1) {
			return tag;
		}
		if (tag !== 'Object') {
			return false;
		}
		return trySlices(value);
	}
	if (!gOPD$3) { return null; }
	return tryTypedArrays(value);
};

var whichTypedArray$1 = whichTypedArray$2;
var isTypedArray = function isTypedArray(value) {
	return !!whichTypedArray$1(value);
};

(function (exports) {
	var isArgumentsObject = isArguments$2;
	var isGeneratorFunction$1 = isGeneratorFunction;
	var whichTypedArray = whichTypedArray$2;
	var isTypedArray$1 = isTypedArray;
	function uncurryThis(f) {
	  return f.call.bind(f);
	}
	var BigIntSupported = typeof BigInt !== 'undefined';
	var SymbolSupported = typeof Symbol !== 'undefined';
	var ObjectToString = uncurryThis(Object.prototype.toString);
	var numberValue = uncurryThis(Number.prototype.valueOf);
	var stringValue = uncurryThis(String.prototype.valueOf);
	var booleanValue = uncurryThis(Boolean.prototype.valueOf);
	if (BigIntSupported) {
	  var bigIntValue = uncurryThis(BigInt.prototype.valueOf);
	}
	if (SymbolSupported) {
	  var symbolValue = uncurryThis(Symbol.prototype.valueOf);
	}
	function checkBoxedPrimitive(value, prototypeValueOf) {
	  if (typeof value !== 'object') {
	    return false;
	  }
	  try {
	    prototypeValueOf(value);
	    return true;
	  } catch(e) {
	    return false;
	  }
	}
	exports.isArgumentsObject = isArgumentsObject;
	exports.isGeneratorFunction = isGeneratorFunction$1;
	exports.isTypedArray = isTypedArray$1;
	function isPromise(input) {
		return (
			(
				typeof Promise !== 'undefined' &&
				input instanceof Promise
			) ||
			(
				input !== null &&
				typeof input === 'object' &&
				typeof input.then === 'function' &&
				typeof input.catch === 'function'
			)
		);
	}
	exports.isPromise = isPromise;
	function isArrayBufferView(value) {
	  if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) {
	    return ArrayBuffer.isView(value);
	  }
	  return (
	    isTypedArray$1(value) ||
	    isDataView(value)
	  );
	}
	exports.isArrayBufferView = isArrayBufferView;
	function isUint8Array(value) {
	  return whichTypedArray(value) === 'Uint8Array';
	}
	exports.isUint8Array = isUint8Array;
	function isUint8ClampedArray(value) {
	  return whichTypedArray(value) === 'Uint8ClampedArray';
	}
	exports.isUint8ClampedArray = isUint8ClampedArray;
	function isUint16Array(value) {
	  return whichTypedArray(value) === 'Uint16Array';
	}
	exports.isUint16Array = isUint16Array;
	function isUint32Array(value) {
	  return whichTypedArray(value) === 'Uint32Array';
	}
	exports.isUint32Array = isUint32Array;
	function isInt8Array(value) {
	  return whichTypedArray(value) === 'Int8Array';
	}
	exports.isInt8Array = isInt8Array;
	function isInt16Array(value) {
	  return whichTypedArray(value) === 'Int16Array';
	}
	exports.isInt16Array = isInt16Array;
	function isInt32Array(value) {
	  return whichTypedArray(value) === 'Int32Array';
	}
	exports.isInt32Array = isInt32Array;
	function isFloat32Array(value) {
	  return whichTypedArray(value) === 'Float32Array';
	}
	exports.isFloat32Array = isFloat32Array;
	function isFloat64Array(value) {
	  return whichTypedArray(value) === 'Float64Array';
	}
	exports.isFloat64Array = isFloat64Array;
	function isBigInt64Array(value) {
	  return whichTypedArray(value) === 'BigInt64Array';
	}
	exports.isBigInt64Array = isBigInt64Array;
	function isBigUint64Array(value) {
	  return whichTypedArray(value) === 'BigUint64Array';
	}
	exports.isBigUint64Array = isBigUint64Array;
	function isMapToString(value) {
	  return ObjectToString(value) === '[object Map]';
	}
	isMapToString.working = (
	  typeof Map !== 'undefined' &&
	  isMapToString(new Map())
	);
	function isMap(value) {
	  if (typeof Map === 'undefined') {
	    return false;
	  }
	  return isMapToString.working
	    ? isMapToString(value)
	    : value instanceof Map;
	}
	exports.isMap = isMap;
	function isSetToString(value) {
	  return ObjectToString(value) === '[object Set]';
	}
	isSetToString.working = (
	  typeof Set !== 'undefined' &&
	  isSetToString(new Set())
	);
	function isSet(value) {
	  if (typeof Set === 'undefined') {
	    return false;
	  }
	  return isSetToString.working
	    ? isSetToString(value)
	    : value instanceof Set;
	}
	exports.isSet = isSet;
	function isWeakMapToString(value) {
	  return ObjectToString(value) === '[object WeakMap]';
	}
	isWeakMapToString.working = (
	  typeof WeakMap !== 'undefined' &&
	  isWeakMapToString(new WeakMap())
	);
	function isWeakMap(value) {
	  if (typeof WeakMap === 'undefined') {
	    return false;
	  }
	  return isWeakMapToString.working
	    ? isWeakMapToString(value)
	    : value instanceof WeakMap;
	}
	exports.isWeakMap = isWeakMap;
	function isWeakSetToString(value) {
	  return ObjectToString(value) === '[object WeakSet]';
	}
	isWeakSetToString.working = (
	  typeof WeakSet !== 'undefined' &&
	  isWeakSetToString(new WeakSet())
	);
	function isWeakSet(value) {
	  return isWeakSetToString(value);
	}
	exports.isWeakSet = isWeakSet;
	function isArrayBufferToString(value) {
	  return ObjectToString(value) === '[object ArrayBuffer]';
	}
	isArrayBufferToString.working = (
	  typeof ArrayBuffer !== 'undefined' &&
	  isArrayBufferToString(new ArrayBuffer())
	);
	function isArrayBuffer(value) {
	  if (typeof ArrayBuffer === 'undefined') {
	    return false;
	  }
	  return isArrayBufferToString.working
	    ? isArrayBufferToString(value)
	    : value instanceof ArrayBuffer;
	}
	exports.isArrayBuffer = isArrayBuffer;
	function isDataViewToString(value) {
	  return ObjectToString(value) === '[object DataView]';
	}
	isDataViewToString.working = (
	  typeof ArrayBuffer !== 'undefined' &&
	  typeof DataView !== 'undefined' &&
	  isDataViewToString(new DataView(new ArrayBuffer(1), 0, 1))
	);
	function isDataView(value) {
	  if (typeof DataView === 'undefined') {
	    return false;
	  }
	  return isDataViewToString.working
	    ? isDataViewToString(value)
	    : value instanceof DataView;
	}
	exports.isDataView = isDataView;
	var SharedArrayBufferCopy = typeof SharedArrayBuffer !== 'undefined' ? SharedArrayBuffer : undefined;
	function isSharedArrayBufferToString(value) {
	  return ObjectToString(value) === '[object SharedArrayBuffer]';
	}
	function isSharedArrayBuffer(value) {
	  if (typeof SharedArrayBufferCopy === 'undefined') {
	    return false;
	  }
	  if (typeof isSharedArrayBufferToString.working === 'undefined') {
	    isSharedArrayBufferToString.working = isSharedArrayBufferToString(new SharedArrayBufferCopy());
	  }
	  return isSharedArrayBufferToString.working
	    ? isSharedArrayBufferToString(value)
	    : value instanceof SharedArrayBufferCopy;
	}
	exports.isSharedArrayBuffer = isSharedArrayBuffer;
	function isAsyncFunction(value) {
	  return ObjectToString(value) === '[object AsyncFunction]';
	}
	exports.isAsyncFunction = isAsyncFunction;
	function isMapIterator(value) {
	  return ObjectToString(value) === '[object Map Iterator]';
	}
	exports.isMapIterator = isMapIterator;
	function isSetIterator(value) {
	  return ObjectToString(value) === '[object Set Iterator]';
	}
	exports.isSetIterator = isSetIterator;
	function isGeneratorObject(value) {
	  return ObjectToString(value) === '[object Generator]';
	}
	exports.isGeneratorObject = isGeneratorObject;
	function isWebAssemblyCompiledModule(value) {
	  return ObjectToString(value) === '[object WebAssembly.Module]';
	}
	exports.isWebAssemblyCompiledModule = isWebAssemblyCompiledModule;
	function isNumberObject(value) {
	  return checkBoxedPrimitive(value, numberValue);
	}
	exports.isNumberObject = isNumberObject;
	function isStringObject(value) {
	  return checkBoxedPrimitive(value, stringValue);
	}
	exports.isStringObject = isStringObject;
	function isBooleanObject(value) {
	  return checkBoxedPrimitive(value, booleanValue);
	}
	exports.isBooleanObject = isBooleanObject;
	function isBigIntObject(value) {
	  return BigIntSupported && checkBoxedPrimitive(value, bigIntValue);
	}
	exports.isBigIntObject = isBigIntObject;
	function isSymbolObject(value) {
	  return SymbolSupported && checkBoxedPrimitive(value, symbolValue);
	}
	exports.isSymbolObject = isSymbolObject;
	function isBoxedPrimitive(value) {
	  return (
	    isNumberObject(value) ||
	    isStringObject(value) ||
	    isBooleanObject(value) ||
	    isBigIntObject(value) ||
	    isSymbolObject(value)
	  );
	}
	exports.isBoxedPrimitive = isBoxedPrimitive;
	function isAnyArrayBuffer(value) {
	  return typeof Uint8Array !== 'undefined' && (
	    isArrayBuffer(value) ||
	    isSharedArrayBuffer(value)
	  );
	}
	exports.isAnyArrayBuffer = isAnyArrayBuffer;
	['isProxy', 'isExternal', 'isModuleNamespaceObject'].forEach(function(method) {
	  Object.defineProperty(exports, method, {
	    enumerable: false,
	    value: function() {
	      throw new Error(method + ' is not supported in userland');
	    }
	  });
	}); 
} (types));

var isBuffer$1 = function isBuffer(arg) {
  return arg instanceof buffer.Buffer;
};

(function (exports) {
	var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors ||
	  function getOwnPropertyDescriptors(obj) {
	    var keys = Object.keys(obj);
	    var descriptors = {};
	    for (var i = 0; i < keys.length; i++) {
	      descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
	    }
	    return descriptors;
	  };
	var formatRegExp = /%[sdj%]/g;
	exports.format = function(f) {
	  if (!isString(f)) {
	    var objects = [];
	    for (var i = 0; i < arguments.length; i++) {
	      objects.push(inspect(arguments[i]));
	    }
	    return objects.join(' ');
	  }
	  var i = 1;
	  var args = arguments;
	  var len = args.length;
	  var str = String(f).replace(formatRegExp, function(x) {
	    if (x === '%%') return '%';
	    if (i >= len) return x;
	    switch (x) {
	      case '%s': return String(args[i++]);
	      case '%d': return Number(args[i++]);
	      case '%j':
	        try {
	          return JSON.stringify(args[i++]);
	        } catch (_) {
	          return '[Circular]';
	        }
	      default:
	        return x;
	    }
	  });
	  for (var x = args[i]; i < len; x = args[++i]) {
	    if (isNull(x) || !isObject(x)) {
	      str += ' ' + x;
	    } else {
	      str += ' ' + inspect(x);
	    }
	  }
	  return str;
	};
	exports.deprecate = function(fn, msg) {
	  if (typeof process$1 !== 'undefined' && process$1.noDeprecation === true) {
	    return fn;
	  }
	  if (typeof process$1 === 'undefined') {
	    return function() {
	      return exports.deprecate(fn, msg).apply(this, arguments);
	    };
	  }
	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (process$1.throwDeprecation) {
	        throw new Error(msg);
	      } else if (process$1.traceDeprecation) {
	        console.trace(msg);
	      } else {
	        console.error(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }
	  return deprecated;
	};
	var debugs = {};
	var debugEnvRegex = /^$/;
	if (process$1.env.NODE_DEBUG) {
	  var debugEnv = process$1.env.NODE_DEBUG;
	  debugEnv = debugEnv.replace(/[|\\{}()[\]^$+?.]/g, '\\$&')
	    .replace(/\*/g, '.*')
	    .replace(/,/g, '$|^')
	    .toUpperCase();
	  debugEnvRegex = new RegExp('^' + debugEnv + '$', 'i');
	}
	exports.debuglog = function(set) {
	  set = set.toUpperCase();
	  if (!debugs[set]) {
	    if (debugEnvRegex.test(set)) {
	      var pid = process$1.pid;
	      debugs[set] = function() {
	        var msg = exports.format.apply(exports, arguments);
	        console.error('%s %d: %s', set, pid, msg);
	      };
	    } else {
	      debugs[set] = function() {};
	    }
	  }
	  return debugs[set];
	};
	function inspect(obj, opts) {
	  var ctx = {
	    seen: [],
	    stylize: stylizeNoColor
	  };
	  if (arguments.length >= 3) ctx.depth = arguments[2];
	  if (arguments.length >= 4) ctx.colors = arguments[3];
	  if (isBoolean(opts)) {
	    ctx.showHidden = opts;
	  } else if (opts) {
	    exports._extend(ctx, opts);
	  }
	  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
	  if (isUndefined(ctx.depth)) ctx.depth = 2;
	  if (isUndefined(ctx.colors)) ctx.colors = false;
	  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
	  if (ctx.colors) ctx.stylize = stylizeWithColor;
	  return formatValue(ctx, obj, ctx.depth);
	}
	exports.inspect = inspect;
	inspect.colors = {
	  'bold' : [1, 22],
	  'italic' : [3, 23],
	  'underline' : [4, 24],
	  'inverse' : [7, 27],
	  'white' : [37, 39],
	  'grey' : [90, 39],
	  'black' : [30, 39],
	  'blue' : [34, 39],
	  'cyan' : [36, 39],
	  'green' : [32, 39],
	  'magenta' : [35, 39],
	  'red' : [31, 39],
	  'yellow' : [33, 39]
	};
	inspect.styles = {
	  'special': 'cyan',
	  'number': 'yellow',
	  'boolean': 'yellow',
	  'undefined': 'grey',
	  'null': 'bold',
	  'string': 'green',
	  'date': 'magenta',
	  'regexp': 'red'
	};
	function stylizeWithColor(str, styleType) {
	  var style = inspect.styles[styleType];
	  if (style) {
	    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
	           '\u001b[' + inspect.colors[style][1] + 'm';
	  } else {
	    return str;
	  }
	}
	function stylizeNoColor(str, styleType) {
	  return str;
	}
	function arrayToHash(array) {
	  var hash = {};
	  array.forEach(function(val, idx) {
	    hash[val] = true;
	  });
	  return hash;
	}
	function formatValue(ctx, value, recurseTimes) {
	  if (ctx.customInspect &&
	      value &&
	      isFunction(value.inspect) &&
	      value.inspect !== exports.inspect &&
	      !(value.constructor && value.constructor.prototype === value)) {
	    var ret = value.inspect(recurseTimes, ctx);
	    if (!isString(ret)) {
	      ret = formatValue(ctx, ret, recurseTimes);
	    }
	    return ret;
	  }
	  var primitive = formatPrimitive(ctx, value);
	  if (primitive) {
	    return primitive;
	  }
	  var keys = Object.keys(value);
	  var visibleKeys = arrayToHash(keys);
	  if (ctx.showHidden) {
	    keys = Object.getOwnPropertyNames(value);
	  }
	  if (isError(value)
	      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
	    return formatError(value);
	  }
	  if (keys.length === 0) {
	    if (isFunction(value)) {
	      var name = value.name ? ': ' + value.name : '';
	      return ctx.stylize('[Function' + name + ']', 'special');
	    }
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    }
	    if (isDate(value)) {
	      return ctx.stylize(Date.prototype.toString.call(value), 'date');
	    }
	    if (isError(value)) {
	      return formatError(value);
	    }
	  }
	  var base = '', array = false, braces = ['{', '}'];
	  if (isArray(value)) {
	    array = true;
	    braces = ['[', ']'];
	  }
	  if (isFunction(value)) {
	    var n = value.name ? ': ' + value.name : '';
	    base = ' [Function' + n + ']';
	  }
	  if (isRegExp(value)) {
	    base = ' ' + RegExp.prototype.toString.call(value);
	  }
	  if (isDate(value)) {
	    base = ' ' + Date.prototype.toUTCString.call(value);
	  }
	  if (isError(value)) {
	    base = ' ' + formatError(value);
	  }
	  if (keys.length === 0 && (!array || value.length == 0)) {
	    return braces[0] + base + braces[1];
	  }
	  if (recurseTimes < 0) {
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    } else {
	      return ctx.stylize('[Object]', 'special');
	    }
	  }
	  ctx.seen.push(value);
	  var output;
	  if (array) {
	    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
	  } else {
	    output = keys.map(function(key) {
	      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
	    });
	  }
	  ctx.seen.pop();
	  return reduceToSingleString(output, base, braces);
	}
	function formatPrimitive(ctx, value) {
	  if (isUndefined(value))
	    return ctx.stylize('undefined', 'undefined');
	  if (isString(value)) {
	    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
	                                             .replace(/'/g, "\\'")
	                                             .replace(/\\"/g, '"') + '\'';
	    return ctx.stylize(simple, 'string');
	  }
	  if (isNumber(value))
	    return ctx.stylize('' + value, 'number');
	  if (isBoolean(value))
	    return ctx.stylize('' + value, 'boolean');
	  if (isNull(value))
	    return ctx.stylize('null', 'null');
	}
	function formatError(value) {
	  return '[' + Error.prototype.toString.call(value) + ']';
	}
	function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
	  var output = [];
	  for (var i = 0, l = value.length; i < l; ++i) {
	    if (hasOwnProperty(value, String(i))) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          String(i), true));
	    } else {
	      output.push('');
	    }
	  }
	  keys.forEach(function(key) {
	    if (!key.match(/^\d+$/)) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          key, true));
	    }
	  });
	  return output;
	}
	function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
	  var name, str, desc;
	  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
	  if (desc.get) {
	    if (desc.set) {
	      str = ctx.stylize('[Getter/Setter]', 'special');
	    } else {
	      str = ctx.stylize('[Getter]', 'special');
	    }
	  } else {
	    if (desc.set) {
	      str = ctx.stylize('[Setter]', 'special');
	    }
	  }
	  if (!hasOwnProperty(visibleKeys, key)) {
	    name = '[' + key + ']';
	  }
	  if (!str) {
	    if (ctx.seen.indexOf(desc.value) < 0) {
	      if (isNull(recurseTimes)) {
	        str = formatValue(ctx, desc.value, null);
	      } else {
	        str = formatValue(ctx, desc.value, recurseTimes - 1);
	      }
	      if (str.indexOf('\n') > -1) {
	        if (array) {
	          str = str.split('\n').map(function(line) {
	            return '  ' + line;
	          }).join('\n').slice(2);
	        } else {
	          str = '\n' + str.split('\n').map(function(line) {
	            return '   ' + line;
	          }).join('\n');
	        }
	      }
	    } else {
	      str = ctx.stylize('[Circular]', 'special');
	    }
	  }
	  if (isUndefined(name)) {
	    if (array && key.match(/^\d+$/)) {
	      return str;
	    }
	    name = JSON.stringify('' + key);
	    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
	      name = name.slice(1, -1);
	      name = ctx.stylize(name, 'name');
	    } else {
	      name = name.replace(/'/g, "\\'")
	                 .replace(/\\"/g, '"')
	                 .replace(/(^"|"$)/g, "'");
	      name = ctx.stylize(name, 'string');
	    }
	  }
	  return name + ': ' + str;
	}
	function reduceToSingleString(output, base, braces) {
	  var length = output.reduce(function(prev, cur) {
	    if (cur.indexOf('\n') >= 0) ;
	    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
	  }, 0);
	  if (length > 60) {
	    return braces[0] +
	           (base === '' ? '' : base + '\n ') +
	           ' ' +
	           output.join(',\n  ') +
	           ' ' +
	           braces[1];
	  }
	  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
	}
	exports.types = types;
	function isArray(ar) {
	  return Array.isArray(ar);
	}
	exports.isArray = isArray;
	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;
	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;
	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;
	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;
	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;
	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;
	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;
	function isRegExp(re) {
	  return isObject(re) && objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;
	exports.types.isRegExp = isRegExp;
	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;
	function isDate(d) {
	  return isObject(d) && objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;
	exports.types.isDate = isDate;
	function isError(e) {
	  return isObject(e) &&
	      (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;
	exports.types.isNativeError = isError;
	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;
	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;
	exports.isBuffer = isBuffer$1;
	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}
	function pad(n) {
	  return n < 10 ? '0' + n.toString(10) : n.toString(10);
	}
	var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
	              'Oct', 'Nov', 'Dec'];
	function timestamp() {
	  var d = new Date();
	  var time = [pad(d.getHours()),
	              pad(d.getMinutes()),
	              pad(d.getSeconds())].join(':');
	  return [d.getDate(), months[d.getMonth()], time].join(' ');
	}
	exports.log = function() {
	  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
	};
	exports.inherits = inherits_browserExports;
	exports._extend = function(origin, add) {
	  if (!add || !isObject(add)) return origin;
	  var keys = Object.keys(add);
	  var i = keys.length;
	  while (i--) {
	    origin[keys[i]] = add[keys[i]];
	  }
	  return origin;
	};
	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}
	var kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;
	exports.promisify = function promisify(original) {
	  if (typeof original !== 'function')
	    throw new TypeError('The "original" argument must be of type Function');
	  if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
	    var fn = original[kCustomPromisifiedSymbol];
	    if (typeof fn !== 'function') {
	      throw new TypeError('The "util.promisify.custom" argument must be of type Function');
	    }
	    Object.defineProperty(fn, kCustomPromisifiedSymbol, {
	      value: fn, enumerable: false, writable: false, configurable: true
	    });
	    return fn;
	  }
	  function fn() {
	    var promiseResolve, promiseReject;
	    var promise = new Promise(function (resolve, reject) {
	      promiseResolve = resolve;
	      promiseReject = reject;
	    });
	    var args = [];
	    for (var i = 0; i < arguments.length; i++) {
	      args.push(arguments[i]);
	    }
	    args.push(function (err, value) {
	      if (err) {
	        promiseReject(err);
	      } else {
	        promiseResolve(value);
	      }
	    });
	    try {
	      original.apply(this, args);
	    } catch (err) {
	      promiseReject(err);
	    }
	    return promise;
	  }
	  Object.setPrototypeOf(fn, Object.getPrototypeOf(original));
	  if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {
	    value: fn, enumerable: false, writable: false, configurable: true
	  });
	  return Object.defineProperties(
	    fn,
	    getOwnPropertyDescriptors(original)
	  );
	};
	exports.promisify.custom = kCustomPromisifiedSymbol;
	function callbackifyOnRejected(reason, cb) {
	  if (!reason) {
	    var newReason = new Error('Promise was rejected with a falsy value');
	    newReason.reason = reason;
	    reason = newReason;
	  }
	  return cb(reason);
	}
	function callbackify(original) {
	  if (typeof original !== 'function') {
	    throw new TypeError('The "original" argument must be of type Function');
	  }
	  function callbackified() {
	    var args = [];
	    for (var i = 0; i < arguments.length; i++) {
	      args.push(arguments[i]);
	    }
	    var maybeCb = args.pop();
	    if (typeof maybeCb !== 'function') {
	      throw new TypeError('The last argument must be of type Function');
	    }
	    var self = this;
	    var cb = function() {
	      return maybeCb.apply(self, arguments);
	    };
	    original.apply(this, args)
	      .then(function(ret) { process$1.nextTick(cb.bind(null, null, ret)); },
	            function(rej) { process$1.nextTick(callbackifyOnRejected.bind(null, rej, cb)); });
	  }
	  Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
	  Object.defineProperties(callbackified,
	                          getOwnPropertyDescriptors(original));
	  return callbackified;
	}
	exports.callbackify = callbackify; 
} (util));

var buffer_list;
var hasRequiredBuffer_list;

function requireBuffer_list () {
	if (hasRequiredBuffer_list) return buffer_list;
	hasRequiredBuffer_list = 1;
	function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
	function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
	function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
	function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
	function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
	var _require = buffer,
	  Buffer = _require.Buffer;
	var _require2 = util,
	  inspect = _require2.inspect;
	var custom = inspect && inspect.custom || 'inspect';
	function copyBuffer(src, target, offset) {
	  Buffer.prototype.copy.call(src, target, offset);
	}
	buffer_list = function () {
	  function BufferList() {
	    _classCallCheck(this, BufferList);
	    this.head = null;
	    this.tail = null;
	    this.length = 0;
	  }
	  _createClass(BufferList, [{
	    key: "push",
	    value: function push(v) {
	      var entry = {
	        data: v,
	        next: null
	      };
	      if (this.length > 0) this.tail.next = entry;else this.head = entry;
	      this.tail = entry;
	      ++this.length;
	    }
	  }, {
	    key: "unshift",
	    value: function unshift(v) {
	      var entry = {
	        data: v,
	        next: this.head
	      };
	      if (this.length === 0) this.tail = entry;
	      this.head = entry;
	      ++this.length;
	    }
	  }, {
	    key: "shift",
	    value: function shift() {
	      if (this.length === 0) return;
	      var ret = this.head.data;
	      if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
	      --this.length;
	      return ret;
	    }
	  }, {
	    key: "clear",
	    value: function clear() {
	      this.head = this.tail = null;
	      this.length = 0;
	    }
	  }, {
	    key: "join",
	    value: function join(s) {
	      if (this.length === 0) return '';
	      var p = this.head;
	      var ret = '' + p.data;
	      while (p = p.next) ret += s + p.data;
	      return ret;
	    }
	  }, {
	    key: "concat",
	    value: function concat(n) {
	      if (this.length === 0) return Buffer.alloc(0);
	      var ret = Buffer.allocUnsafe(n >>> 0);
	      var p = this.head;
	      var i = 0;
	      while (p) {
	        copyBuffer(p.data, ret, i);
	        i += p.data.length;
	        p = p.next;
	      }
	      return ret;
	    }
	  }, {
	    key: "consume",
	    value: function consume(n, hasStrings) {
	      var ret;
	      if (n < this.head.data.length) {
	        ret = this.head.data.slice(0, n);
	        this.head.data = this.head.data.slice(n);
	      } else if (n === this.head.data.length) {
	        ret = this.shift();
	      } else {
	        ret = hasStrings ? this._getString(n) : this._getBuffer(n);
	      }
	      return ret;
	    }
	  }, {
	    key: "first",
	    value: function first() {
	      return this.head.data;
	    }
	  }, {
	    key: "_getString",
	    value: function _getString(n) {
	      var p = this.head;
	      var c = 1;
	      var ret = p.data;
	      n -= ret.length;
	      while (p = p.next) {
	        var str = p.data;
	        var nb = n > str.length ? str.length : n;
	        if (nb === str.length) ret += str;else ret += str.slice(0, n);
	        n -= nb;
	        if (n === 0) {
	          if (nb === str.length) {
	            ++c;
	            if (p.next) this.head = p.next;else this.head = this.tail = null;
	          } else {
	            this.head = p;
	            p.data = str.slice(nb);
	          }
	          break;
	        }
	        ++c;
	      }
	      this.length -= c;
	      return ret;
	    }
	  }, {
	    key: "_getBuffer",
	    value: function _getBuffer(n) {
	      var ret = Buffer.allocUnsafe(n);
	      var p = this.head;
	      var c = 1;
	      p.data.copy(ret);
	      n -= p.data.length;
	      while (p = p.next) {
	        var buf = p.data;
	        var nb = n > buf.length ? buf.length : n;
	        buf.copy(ret, ret.length - n, 0, nb);
	        n -= nb;
	        if (n === 0) {
	          if (nb === buf.length) {
	            ++c;
	            if (p.next) this.head = p.next;else this.head = this.tail = null;
	          } else {
	            this.head = p;
	            p.data = buf.slice(nb);
	          }
	          break;
	        }
	        ++c;
	      }
	      this.length -= c;
	      return ret;
	    }
	  }, {
	    key: custom,
	    value: function value(_, options) {
	      return inspect(this, _objectSpread(_objectSpread({}, options), {}, {
	        depth: 0,
	        customInspect: false
	      }));
	    }
	  }]);
	  return BufferList;
	}();
	return buffer_list;
}

var destroy_1;
var hasRequiredDestroy;

function requireDestroy () {
	if (hasRequiredDestroy) return destroy_1;
	hasRequiredDestroy = 1;
	function destroy(err, cb) {
	  var _this = this;
	  var readableDestroyed = this._readableState && this._readableState.destroyed;
	  var writableDestroyed = this._writableState && this._writableState.destroyed;
	  if (readableDestroyed || writableDestroyed) {
	    if (cb) {
	      cb(err);
	    } else if (err) {
	      if (!this._writableState) {
	        process$1.nextTick(emitErrorNT, this, err);
	      } else if (!this._writableState.errorEmitted) {
	        this._writableState.errorEmitted = true;
	        process$1.nextTick(emitErrorNT, this, err);
	      }
	    }
	    return this;
	  }
	  if (this._readableState) {
	    this._readableState.destroyed = true;
	  }
	  if (this._writableState) {
	    this._writableState.destroyed = true;
	  }
	  this._destroy(err || null, function (err) {
	    if (!cb && err) {
	      if (!_this._writableState) {
	        process$1.nextTick(emitErrorAndCloseNT, _this, err);
	      } else if (!_this._writableState.errorEmitted) {
	        _this._writableState.errorEmitted = true;
	        process$1.nextTick(emitErrorAndCloseNT, _this, err);
	      } else {
	        process$1.nextTick(emitCloseNT, _this);
	      }
	    } else if (cb) {
	      process$1.nextTick(emitCloseNT, _this);
	      cb(err);
	    } else {
	      process$1.nextTick(emitCloseNT, _this);
	    }
	  });
	  return this;
	}
	function emitErrorAndCloseNT(self, err) {
	  emitErrorNT(self, err);
	  emitCloseNT(self);
	}
	function emitCloseNT(self) {
	  if (self._writableState && !self._writableState.emitClose) return;
	  if (self._readableState && !self._readableState.emitClose) return;
	  self.emit('close');
	}
	function undestroy() {
	  if (this._readableState) {
	    this._readableState.destroyed = false;
	    this._readableState.reading = false;
	    this._readableState.ended = false;
	    this._readableState.endEmitted = false;
	  }
	  if (this._writableState) {
	    this._writableState.destroyed = false;
	    this._writableState.ended = false;
	    this._writableState.ending = false;
	    this._writableState.finalCalled = false;
	    this._writableState.prefinished = false;
	    this._writableState.finished = false;
	    this._writableState.errorEmitted = false;
	  }
	}
	function emitErrorNT(self, err) {
	  self.emit('error', err);
	}
	function errorOrDestroy(stream, err) {
	  var rState = stream._readableState;
	  var wState = stream._writableState;
	  if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);else stream.emit('error', err);
	}
	destroy_1 = {
	  destroy: destroy,
	  undestroy: undestroy,
	  errorOrDestroy: errorOrDestroy
	};
	return destroy_1;
}

var errors$1 = {};

var hasRequiredErrors$1;

function requireErrors$1 () {
	if (hasRequiredErrors$1) return errors$1;
	hasRequiredErrors$1 = 1;
	const codes = {};
	function createErrorType(code, message, Base) {
	  if (!Base) {
	    Base = Error;
	  }
	  function getMessage (arg1, arg2, arg3) {
	    if (typeof message === 'string') {
	      return message
	    } else {
	      return message(arg1, arg2, arg3)
	    }
	  }
	  class NodeError extends Base {
	    constructor (arg1, arg2, arg3) {
	      super(getMessage(arg1, arg2, arg3));
	    }
	  }
	  NodeError.prototype.name = Base.name;
	  NodeError.prototype.code = code;
	  codes[code] = NodeError;
	}
	function oneOf(expected, thing) {
	  if (Array.isArray(expected)) {
	    const len = expected.length;
	    expected = expected.map((i) => String(i));
	    if (len > 2) {
	      return `one of ${thing} ${expected.slice(0, len - 1).join(', ')}, or ` +
	             expected[len - 1];
	    } else if (len === 2) {
	      return `one of ${thing} ${expected[0]} or ${expected[1]}`;
	    } else {
	      return `of ${thing} ${expected[0]}`;
	    }
	  } else {
	    return `of ${thing} ${String(expected)}`;
	  }
	}
	function startsWith(str, search, pos) {
		return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
	}
	function endsWith(str, search, this_len) {
		if (this_len === undefined || this_len > str.length) {
			this_len = str.length;
		}
		return str.substring(this_len - search.length, this_len) === search;
	}
	function includes(str, search, start) {
	  if (typeof start !== 'number') {
	    start = 0;
	  }
	  if (start + search.length > str.length) {
	    return false;
	  } else {
	    return str.indexOf(search, start) !== -1;
	  }
	}
	createErrorType('ERR_INVALID_OPT_VALUE', function (name, value) {
	  return 'The value "' + value + '" is invalid for option "' + name + '"'
	}, TypeError);
	createErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {
	  let determiner;
	  if (typeof expected === 'string' && startsWith(expected, 'not ')) {
	    determiner = 'must not be';
	    expected = expected.replace(/^not /, '');
	  } else {
	    determiner = 'must be';
	  }
	  let msg;
	  if (endsWith(name, ' argument')) {
	    msg = `The ${name} ${determiner} ${oneOf(expected, 'type')}`;
	  } else {
	    const type = includes(name, '.') ? 'property' : 'argument';
	    msg = `The "${name}" ${type} ${determiner} ${oneOf(expected, 'type')}`;
	  }
	  msg += `. Received type ${typeof actual}`;
	  return msg;
	}, TypeError);
	createErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');
	createErrorType('ERR_METHOD_NOT_IMPLEMENTED', function (name) {
	  return 'The ' + name + ' method is not implemented'
	});
	createErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
	createErrorType('ERR_STREAM_DESTROYED', function (name) {
	  return 'Cannot call ' + name + ' after a stream was destroyed';
	});
	createErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
	createErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');
	createErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');
	createErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);
	createErrorType('ERR_UNKNOWN_ENCODING', function (arg) {
	  return 'Unknown encoding: ' + arg
	}, TypeError);
	createErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');
	errors$1.codes = codes;
	return errors$1;
}

var state;
var hasRequiredState;

function requireState () {
	if (hasRequiredState) return state;
	hasRequiredState = 1;
	var ERR_INVALID_OPT_VALUE = requireErrors$1().codes.ERR_INVALID_OPT_VALUE;
	function highWaterMarkFrom(options, isDuplex, duplexKey) {
	  return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
	}
	function getHighWaterMark(state, options, duplexKey, isDuplex) {
	  var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);
	  if (hwm != null) {
	    if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
	      var name = isDuplex ? duplexKey : 'highWaterMark';
	      throw new ERR_INVALID_OPT_VALUE(name, hwm);
	    }
	    return Math.floor(hwm);
	  }
	  return state.objectMode ? 16 : 16 * 1024;
	}
	state = {
	  getHighWaterMark: getHighWaterMark
	};
	return state;
}

var node$1;
var hasRequiredNode;

function requireNode () {
	if (hasRequiredNode) return node$1;
	hasRequiredNode = 1;
	node$1 = util.deprecate;
	return node$1;
}

var _stream_writable;
var hasRequired_stream_writable;

function require_stream_writable () {
	if (hasRequired_stream_writable) return _stream_writable;
	hasRequired_stream_writable = 1;
	_stream_writable = Writable;
	function CorkedRequest(state) {
	  var _this = this;
	  this.next = null;
	  this.entry = null;
	  this.finish = function () {
	    onCorkedFinish(_this, state);
	  };
	}
	var Duplex;
	Writable.WritableState = WritableState;
	var internalUtil = {
	  deprecate: requireNode()
	};
	var Stream = requireStream();
	var Buffer = buffer.Buffer;
	var OurUint8Array = (typeof commonjsGlobal$1 !== 'undefined' ? commonjsGlobal$1 : typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : {}).Uint8Array || function () {};
	function _uint8ArrayToBuffer(chunk) {
	  return Buffer.from(chunk);
	}
	function _isUint8Array(obj) {
	  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
	}
	var destroyImpl = requireDestroy();
	var _require = requireState(),
	  getHighWaterMark = _require.getHighWaterMark;
	var _require$codes = requireErrors$1().codes,
	  ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
	  ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
	  ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
	  ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE,
	  ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED,
	  ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES,
	  ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END,
	  ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;
	var errorOrDestroy = destroyImpl.errorOrDestroy;
	inherits_browserExports(Writable, Stream);
	function nop() {}
	function WritableState(options, stream, isDuplex) {
	  Duplex = Duplex || require_stream_duplex();
	  options = options || {};
	  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex;
	  this.objectMode = !!options.objectMode;
	  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;
	  this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex);
	  this.finalCalled = false;
	  this.needDrain = false;
	  this.ending = false;
	  this.ended = false;
	  this.finished = false;
	  this.destroyed = false;
	  var noDecode = options.decodeStrings === false;
	  this.decodeStrings = !noDecode;
	  this.defaultEncoding = options.defaultEncoding || 'utf8';
	  this.length = 0;
	  this.writing = false;
	  this.corked = 0;
	  this.sync = true;
	  this.bufferProcessing = false;
	  this.onwrite = function (er) {
	    onwrite(stream, er);
	  };
	  this.writecb = null;
	  this.writelen = 0;
	  this.bufferedRequest = null;
	  this.lastBufferedRequest = null;
	  this.pendingcb = 0;
	  this.prefinished = false;
	  this.errorEmitted = false;
	  this.emitClose = options.emitClose !== false;
	  this.autoDestroy = !!options.autoDestroy;
	  this.bufferedRequestCount = 0;
	  this.corkedRequestsFree = new CorkedRequest(this);
	}
	WritableState.prototype.getBuffer = function getBuffer() {
	  var current = this.bufferedRequest;
	  var out = [];
	  while (current) {
	    out.push(current);
	    current = current.next;
	  }
	  return out;
	};
	(function () {
	  try {
	    Object.defineProperty(WritableState.prototype, 'buffer', {
	      get: internalUtil.deprecate(function writableStateBufferGetter() {
	        return this.getBuffer();
	      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
	    });
	  } catch (_) {}
	})();
	var realHasInstance;
	if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
	  realHasInstance = Function.prototype[Symbol.hasInstance];
	  Object.defineProperty(Writable, Symbol.hasInstance, {
	    value: function value(object) {
	      if (realHasInstance.call(this, object)) return true;
	      if (this !== Writable) return false;
	      return object && object._writableState instanceof WritableState;
	    }
	  });
	} else {
	  realHasInstance = function realHasInstance(object) {
	    return object instanceof this;
	  };
	}
	function Writable(options) {
	  Duplex = Duplex || require_stream_duplex();
	  var isDuplex = this instanceof Duplex;
	  if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
	  this._writableState = new WritableState(options, this, isDuplex);
	  this.writable = true;
	  if (options) {
	    if (typeof options.write === 'function') this._write = options.write;
	    if (typeof options.writev === 'function') this._writev = options.writev;
	    if (typeof options.destroy === 'function') this._destroy = options.destroy;
	    if (typeof options.final === 'function') this._final = options.final;
	  }
	  Stream.call(this);
	}
	Writable.prototype.pipe = function () {
	  errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
	};
	function writeAfterEnd(stream, cb) {
	  var er = new ERR_STREAM_WRITE_AFTER_END();
	  errorOrDestroy(stream, er);
	  process$1.nextTick(cb, er);
	}
	function validChunk(stream, state, chunk, cb) {
	  var er;
	  if (chunk === null) {
	    er = new ERR_STREAM_NULL_VALUES();
	  } else if (typeof chunk !== 'string' && !state.objectMode) {
	    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer'], chunk);
	  }
	  if (er) {
	    errorOrDestroy(stream, er);
	    process$1.nextTick(cb, er);
	    return false;
	  }
	  return true;
	}
	Writable.prototype.write = function (chunk, encoding, cb) {
	  var state = this._writableState;
	  var ret = false;
	  var isBuf = !state.objectMode && _isUint8Array(chunk);
	  if (isBuf && !Buffer.isBuffer(chunk)) {
	    chunk = _uint8ArrayToBuffer(chunk);
	  }
	  if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }
	  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
	  if (typeof cb !== 'function') cb = nop;
	  if (state.ending) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
	    state.pendingcb++;
	    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
	  }
	  return ret;
	};
	Writable.prototype.cork = function () {
	  this._writableState.corked++;
	};
	Writable.prototype.uncork = function () {
	  var state = this._writableState;
	  if (state.corked) {
	    state.corked--;
	    if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
	  }
	};
	Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
	  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
	  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
	  this._writableState.defaultEncoding = encoding;
	  return this;
	};
	Object.defineProperty(Writable.prototype, 'writableBuffer', {
	  enumerable: false,
	  get: function get() {
	    return this._writableState && this._writableState.getBuffer();
	  }
	});
	function decodeChunk(state, chunk, encoding) {
	  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
	    chunk = Buffer.from(chunk, encoding);
	  }
	  return chunk;
	}
	Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
	  enumerable: false,
	  get: function get() {
	    return this._writableState.highWaterMark;
	  }
	});
	function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
	  if (!isBuf) {
	    var newChunk = decodeChunk(state, chunk, encoding);
	    if (chunk !== newChunk) {
	      isBuf = true;
	      encoding = 'buffer';
	      chunk = newChunk;
	    }
	  }
	  var len = state.objectMode ? 1 : chunk.length;
	  state.length += len;
	  var ret = state.length < state.highWaterMark;
	  if (!ret) state.needDrain = true;
	  if (state.writing || state.corked) {
	    var last = state.lastBufferedRequest;
	    state.lastBufferedRequest = {
	      chunk: chunk,
	      encoding: encoding,
	      isBuf: isBuf,
	      callback: cb,
	      next: null
	    };
	    if (last) {
	      last.next = state.lastBufferedRequest;
	    } else {
	      state.bufferedRequest = state.lastBufferedRequest;
	    }
	    state.bufferedRequestCount += 1;
	  } else {
	    doWrite(stream, state, false, len, chunk, encoding, cb);
	  }
	  return ret;
	}
	function doWrite(stream, state, writev, len, chunk, encoding, cb) {
	  state.writelen = len;
	  state.writecb = cb;
	  state.writing = true;
	  state.sync = true;
	  if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'));else if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
	  state.sync = false;
	}
	function onwriteError(stream, state, sync, er, cb) {
	  --state.pendingcb;
	  if (sync) {
	    process$1.nextTick(cb, er);
	    process$1.nextTick(finishMaybe, stream, state);
	    stream._writableState.errorEmitted = true;
	    errorOrDestroy(stream, er);
	  } else {
	    cb(er);
	    stream._writableState.errorEmitted = true;
	    errorOrDestroy(stream, er);
	    finishMaybe(stream, state);
	  }
	}
	function onwriteStateUpdate(state) {
	  state.writing = false;
	  state.writecb = null;
	  state.length -= state.writelen;
	  state.writelen = 0;
	}
	function onwrite(stream, er) {
	  var state = stream._writableState;
	  var sync = state.sync;
	  var cb = state.writecb;
	  if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();
	  onwriteStateUpdate(state);
	  if (er) onwriteError(stream, state, sync, er, cb);else {
	    var finished = needFinish(state) || stream.destroyed;
	    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
	      clearBuffer(stream, state);
	    }
	    if (sync) {
	      process$1.nextTick(afterWrite, stream, state, finished, cb);
	    } else {
	      afterWrite(stream, state, finished, cb);
	    }
	  }
	}
	function afterWrite(stream, state, finished, cb) {
	  if (!finished) onwriteDrain(stream, state);
	  state.pendingcb--;
	  cb();
	  finishMaybe(stream, state);
	}
	function onwriteDrain(stream, state) {
	  if (state.length === 0 && state.needDrain) {
	    state.needDrain = false;
	    stream.emit('drain');
	  }
	}
	function clearBuffer(stream, state) {
	  state.bufferProcessing = true;
	  var entry = state.bufferedRequest;
	  if (stream._writev && entry && entry.next) {
	    var l = state.bufferedRequestCount;
	    var buffer = new Array(l);
	    var holder = state.corkedRequestsFree;
	    holder.entry = entry;
	    var count = 0;
	    var allBuffers = true;
	    while (entry) {
	      buffer[count] = entry;
	      if (!entry.isBuf) allBuffers = false;
	      entry = entry.next;
	      count += 1;
	    }
	    buffer.allBuffers = allBuffers;
	    doWrite(stream, state, true, state.length, buffer, '', holder.finish);
	    state.pendingcb++;
	    state.lastBufferedRequest = null;
	    if (holder.next) {
	      state.corkedRequestsFree = holder.next;
	      holder.next = null;
	    } else {
	      state.corkedRequestsFree = new CorkedRequest(state);
	    }
	    state.bufferedRequestCount = 0;
	  } else {
	    while (entry) {
	      var chunk = entry.chunk;
	      var encoding = entry.encoding;
	      var cb = entry.callback;
	      var len = state.objectMode ? 1 : chunk.length;
	      doWrite(stream, state, false, len, chunk, encoding, cb);
	      entry = entry.next;
	      state.bufferedRequestCount--;
	      if (state.writing) {
	        break;
	      }
	    }
	    if (entry === null) state.lastBufferedRequest = null;
	  }
	  state.bufferedRequest = entry;
	  state.bufferProcessing = false;
	}
	Writable.prototype._write = function (chunk, encoding, cb) {
	  cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));
	};
	Writable.prototype._writev = null;
	Writable.prototype.end = function (chunk, encoding, cb) {
	  var state = this._writableState;
	  if (typeof chunk === 'function') {
	    cb = chunk;
	    chunk = null;
	    encoding = null;
	  } else if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }
	  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);
	  if (state.corked) {
	    state.corked = 1;
	    this.uncork();
	  }
	  if (!state.ending) endWritable(this, state, cb);
	  return this;
	};
	Object.defineProperty(Writable.prototype, 'writableLength', {
	  enumerable: false,
	  get: function get() {
	    return this._writableState.length;
	  }
	});
	function needFinish(state) {
	  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
	}
	function callFinal(stream, state) {
	  stream._final(function (err) {
	    state.pendingcb--;
	    if (err) {
	      errorOrDestroy(stream, err);
	    }
	    state.prefinished = true;
	    stream.emit('prefinish');
	    finishMaybe(stream, state);
	  });
	}
	function prefinish(stream, state) {
	  if (!state.prefinished && !state.finalCalled) {
	    if (typeof stream._final === 'function' && !state.destroyed) {
	      state.pendingcb++;
	      state.finalCalled = true;
	      process$1.nextTick(callFinal, stream, state);
	    } else {
	      state.prefinished = true;
	      stream.emit('prefinish');
	    }
	  }
	}
	function finishMaybe(stream, state) {
	  var need = needFinish(state);
	  if (need) {
	    prefinish(stream, state);
	    if (state.pendingcb === 0) {
	      state.finished = true;
	      stream.emit('finish');
	      if (state.autoDestroy) {
	        var rState = stream._readableState;
	        if (!rState || rState.autoDestroy && rState.endEmitted) {
	          stream.destroy();
	        }
	      }
	    }
	  }
	  return need;
	}
	function endWritable(stream, state, cb) {
	  state.ending = true;
	  finishMaybe(stream, state);
	  if (cb) {
	    if (state.finished) process$1.nextTick(cb);else stream.once('finish', cb);
	  }
	  state.ended = true;
	  stream.writable = false;
	}
	function onCorkedFinish(corkReq, state, err) {
	  var entry = corkReq.entry;
	  corkReq.entry = null;
	  while (entry) {
	    var cb = entry.callback;
	    state.pendingcb--;
	    cb(err);
	    entry = entry.next;
	  }
	  state.corkedRequestsFree.next = corkReq;
	}
	Object.defineProperty(Writable.prototype, 'destroyed', {
	  enumerable: false,
	  get: function get() {
	    if (this._writableState === undefined) {
	      return false;
	    }
	    return this._writableState.destroyed;
	  },
	  set: function set(value) {
	    if (!this._writableState) {
	      return;
	    }
	    this._writableState.destroyed = value;
	  }
	});
	Writable.prototype.destroy = destroyImpl.destroy;
	Writable.prototype._undestroy = destroyImpl.undestroy;
	Writable.prototype._destroy = function (err, cb) {
	  cb(err);
	};
	return _stream_writable;
}

var _stream_duplex;
var hasRequired_stream_duplex;

function require_stream_duplex () {
	if (hasRequired_stream_duplex) return _stream_duplex;
	hasRequired_stream_duplex = 1;
	var objectKeys = Object.keys || function (obj) {
	  var keys = [];
	  for (var key in obj) keys.push(key);
	  return keys;
	};
	_stream_duplex = Duplex;
	var Readable = require_stream_readable();
	var Writable = require_stream_writable();
	inherits_browserExports(Duplex, Readable);
	{
	  var keys = objectKeys(Writable.prototype);
	  for (var v = 0; v < keys.length; v++) {
	    var method = keys[v];
	    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
	  }
	}
	function Duplex(options) {
	  if (!(this instanceof Duplex)) return new Duplex(options);
	  Readable.call(this, options);
	  Writable.call(this, options);
	  this.allowHalfOpen = true;
	  if (options) {
	    if (options.readable === false) this.readable = false;
	    if (options.writable === false) this.writable = false;
	    if (options.allowHalfOpen === false) {
	      this.allowHalfOpen = false;
	      this.once('end', onend);
	    }
	  }
	}
	Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
	  enumerable: false,
	  get: function get() {
	    return this._writableState.highWaterMark;
	  }
	});
	Object.defineProperty(Duplex.prototype, 'writableBuffer', {
	  enumerable: false,
	  get: function get() {
	    return this._writableState && this._writableState.getBuffer();
	  }
	});
	Object.defineProperty(Duplex.prototype, 'writableLength', {
	  enumerable: false,
	  get: function get() {
	    return this._writableState.length;
	  }
	});
	function onend() {
	  if (this._writableState.ended) return;
	  process$1.nextTick(onEndNT, this);
	}
	function onEndNT(self) {
	  self.end();
	}
	Object.defineProperty(Duplex.prototype, 'destroyed', {
	  enumerable: false,
	  get: function get() {
	    if (this._readableState === undefined || this._writableState === undefined) {
	      return false;
	    }
	    return this._readableState.destroyed && this._writableState.destroyed;
	  },
	  set: function set(value) {
	    if (this._readableState === undefined || this._writableState === undefined) {
	      return;
	    }
	    this._readableState.destroyed = value;
	    this._writableState.destroyed = value;
	  }
	});
	return _stream_duplex;
}

var string_decoder = {};

var safeBuffer = {exports: {}};

/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */

var hasRequiredSafeBuffer;

function requireSafeBuffer () {
	if (hasRequiredSafeBuffer) return safeBuffer.exports;
	hasRequiredSafeBuffer = 1;
	(function (module, exports) {
		var buffer$1 = buffer;
		var Buffer = buffer$1.Buffer;
		function copyProps (src, dst) {
		  for (var key in src) {
		    dst[key] = src[key];
		  }
		}
		if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
		  module.exports = buffer$1;
		} else {
		  copyProps(buffer$1, exports);
		  exports.Buffer = SafeBuffer;
		}
		function SafeBuffer (arg, encodingOrOffset, length) {
		  return Buffer(arg, encodingOrOffset, length)
		}
		SafeBuffer.prototype = Object.create(Buffer.prototype);
		copyProps(Buffer, SafeBuffer);
		SafeBuffer.from = function (arg, encodingOrOffset, length) {
		  if (typeof arg === 'number') {
		    throw new TypeError('Argument must not be a number')
		  }
		  return Buffer(arg, encodingOrOffset, length)
		};
		SafeBuffer.alloc = function (size, fill, encoding) {
		  if (typeof size !== 'number') {
		    throw new TypeError('Argument must be a number')
		  }
		  var buf = Buffer(size);
		  if (fill !== undefined) {
		    if (typeof encoding === 'string') {
		      buf.fill(fill, encoding);
		    } else {
		      buf.fill(fill);
		    }
		  } else {
		    buf.fill(0);
		  }
		  return buf
		};
		SafeBuffer.allocUnsafe = function (size) {
		  if (typeof size !== 'number') {
		    throw new TypeError('Argument must be a number')
		  }
		  return Buffer(size)
		};
		SafeBuffer.allocUnsafeSlow = function (size) {
		  if (typeof size !== 'number') {
		    throw new TypeError('Argument must be a number')
		  }
		  return buffer$1.SlowBuffer(size)
		}; 
	} (safeBuffer, safeBuffer.exports));
	return safeBuffer.exports;
}

var hasRequiredString_decoder;

function requireString_decoder () {
	if (hasRequiredString_decoder) return string_decoder;
	hasRequiredString_decoder = 1;
	var Buffer = requireSafeBuffer().Buffer;
	var isEncoding = Buffer.isEncoding || function (encoding) {
	  encoding = '' + encoding;
	  switch (encoding && encoding.toLowerCase()) {
	    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
	      return true;
	    default:
	      return false;
	  }
	};
	function _normalizeEncoding(enc) {
	  if (!enc) return 'utf8';
	  var retried;
	  while (true) {
	    switch (enc) {
	      case 'utf8':
	      case 'utf-8':
	        return 'utf8';
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return 'utf16le';
	      case 'latin1':
	      case 'binary':
	        return 'latin1';
	      case 'base64':
	      case 'ascii':
	      case 'hex':
	        return enc;
	      default:
	        if (retried) return;
	        enc = ('' + enc).toLowerCase();
	        retried = true;
	    }
	  }
	}	function normalizeEncoding(enc) {
	  var nenc = _normalizeEncoding(enc);
	  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
	  return nenc || enc;
	}
	string_decoder.StringDecoder = StringDecoder;
	function StringDecoder(encoding) {
	  this.encoding = normalizeEncoding(encoding);
	  var nb;
	  switch (this.encoding) {
	    case 'utf16le':
	      this.text = utf16Text;
	      this.end = utf16End;
	      nb = 4;
	      break;
	    case 'utf8':
	      this.fillLast = utf8FillLast;
	      nb = 4;
	      break;
	    case 'base64':
	      this.text = base64Text;
	      this.end = base64End;
	      nb = 3;
	      break;
	    default:
	      this.write = simpleWrite;
	      this.end = simpleEnd;
	      return;
	  }
	  this.lastNeed = 0;
	  this.lastTotal = 0;
	  this.lastChar = Buffer.allocUnsafe(nb);
	}
	StringDecoder.prototype.write = function (buf) {
	  if (buf.length === 0) return '';
	  var r;
	  var i;
	  if (this.lastNeed) {
	    r = this.fillLast(buf);
	    if (r === undefined) return '';
	    i = this.lastNeed;
	    this.lastNeed = 0;
	  } else {
	    i = 0;
	  }
	  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
	  return r || '';
	};
	StringDecoder.prototype.end = utf8End;
	StringDecoder.prototype.text = utf8Text;
	StringDecoder.prototype.fillLast = function (buf) {
	  if (this.lastNeed <= buf.length) {
	    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
	    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
	  }
	  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
	  this.lastNeed -= buf.length;
	};
	function utf8CheckByte(byte) {
	  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
	  return byte >> 6 === 0x02 ? -1 : -2;
	}
	function utf8CheckIncomplete(self, buf, i) {
	  var j = buf.length - 1;
	  if (j < i) return 0;
	  var nb = utf8CheckByte(buf[j]);
	  if (nb >= 0) {
	    if (nb > 0) self.lastNeed = nb - 1;
	    return nb;
	  }
	  if (--j < i || nb === -2) return 0;
	  nb = utf8CheckByte(buf[j]);
	  if (nb >= 0) {
	    if (nb > 0) self.lastNeed = nb - 2;
	    return nb;
	  }
	  if (--j < i || nb === -2) return 0;
	  nb = utf8CheckByte(buf[j]);
	  if (nb >= 0) {
	    if (nb > 0) {
	      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
	    }
	    return nb;
	  }
	  return 0;
	}
	function utf8CheckExtraBytes(self, buf, p) {
	  if ((buf[0] & 0xC0) !== 0x80) {
	    self.lastNeed = 0;
	    return '\ufffd';
	  }
	  if (self.lastNeed > 1 && buf.length > 1) {
	    if ((buf[1] & 0xC0) !== 0x80) {
	      self.lastNeed = 1;
	      return '\ufffd';
	    }
	    if (self.lastNeed > 2 && buf.length > 2) {
	      if ((buf[2] & 0xC0) !== 0x80) {
	        self.lastNeed = 2;
	        return '\ufffd';
	      }
	    }
	  }
	}
	function utf8FillLast(buf) {
	  var p = this.lastTotal - this.lastNeed;
	  var r = utf8CheckExtraBytes(this, buf);
	  if (r !== undefined) return r;
	  if (this.lastNeed <= buf.length) {
	    buf.copy(this.lastChar, p, 0, this.lastNeed);
	    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
	  }
	  buf.copy(this.lastChar, p, 0, buf.length);
	  this.lastNeed -= buf.length;
	}
	function utf8Text(buf, i) {
	  var total = utf8CheckIncomplete(this, buf, i);
	  if (!this.lastNeed) return buf.toString('utf8', i);
	  this.lastTotal = total;
	  var end = buf.length - (total - this.lastNeed);
	  buf.copy(this.lastChar, 0, end);
	  return buf.toString('utf8', i, end);
	}
	function utf8End(buf) {
	  var r = buf && buf.length ? this.write(buf) : '';
	  if (this.lastNeed) return r + '\ufffd';
	  return r;
	}
	function utf16Text(buf, i) {
	  if ((buf.length - i) % 2 === 0) {
	    var r = buf.toString('utf16le', i);
	    if (r) {
	      var c = r.charCodeAt(r.length - 1);
	      if (c >= 0xD800 && c <= 0xDBFF) {
	        this.lastNeed = 2;
	        this.lastTotal = 4;
	        this.lastChar[0] = buf[buf.length - 2];
	        this.lastChar[1] = buf[buf.length - 1];
	        return r.slice(0, -1);
	      }
	    }
	    return r;
	  }
	  this.lastNeed = 1;
	  this.lastTotal = 2;
	  this.lastChar[0] = buf[buf.length - 1];
	  return buf.toString('utf16le', i, buf.length - 1);
	}
	function utf16End(buf) {
	  var r = buf && buf.length ? this.write(buf) : '';
	  if (this.lastNeed) {
	    var end = this.lastTotal - this.lastNeed;
	    return r + this.lastChar.toString('utf16le', 0, end);
	  }
	  return r;
	}
	function base64Text(buf, i) {
	  var n = (buf.length - i) % 3;
	  if (n === 0) return buf.toString('base64', i);
	  this.lastNeed = 3 - n;
	  this.lastTotal = 3;
	  if (n === 1) {
	    this.lastChar[0] = buf[buf.length - 1];
	  } else {
	    this.lastChar[0] = buf[buf.length - 2];
	    this.lastChar[1] = buf[buf.length - 1];
	  }
	  return buf.toString('base64', i, buf.length - n);
	}
	function base64End(buf) {
	  var r = buf && buf.length ? this.write(buf) : '';
	  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
	  return r;
	}
	function simpleWrite(buf) {
	  return buf.toString(this.encoding);
	}
	function simpleEnd(buf) {
	  return buf && buf.length ? this.write(buf) : '';
	}
	return string_decoder;
}

var endOfStream;
var hasRequiredEndOfStream;

function requireEndOfStream () {
	if (hasRequiredEndOfStream) return endOfStream;
	hasRequiredEndOfStream = 1;
	var ERR_STREAM_PREMATURE_CLOSE = requireErrors$1().codes.ERR_STREAM_PREMATURE_CLOSE;
	function once(callback) {
	  var called = false;
	  return function () {
	    if (called) return;
	    called = true;
	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	    callback.apply(this, args);
	  };
	}
	function noop() {}
	function isRequest(stream) {
	  return stream.setHeader && typeof stream.abort === 'function';
	}
	function eos(stream, opts, callback) {
	  if (typeof opts === 'function') return eos(stream, null, opts);
	  if (!opts) opts = {};
	  callback = once(callback || noop);
	  var readable = opts.readable || opts.readable !== false && stream.readable;
	  var writable = opts.writable || opts.writable !== false && stream.writable;
	  var onlegacyfinish = function onlegacyfinish() {
	    if (!stream.writable) onfinish();
	  };
	  var writableEnded = stream._writableState && stream._writableState.finished;
	  var onfinish = function onfinish() {
	    writable = false;
	    writableEnded = true;
	    if (!readable) callback.call(stream);
	  };
	  var readableEnded = stream._readableState && stream._readableState.endEmitted;
	  var onend = function onend() {
	    readable = false;
	    readableEnded = true;
	    if (!writable) callback.call(stream);
	  };
	  var onerror = function onerror(err) {
	    callback.call(stream, err);
	  };
	  var onclose = function onclose() {
	    var err;
	    if (readable && !readableEnded) {
	      if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
	      return callback.call(stream, err);
	    }
	    if (writable && !writableEnded) {
	      if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
	      return callback.call(stream, err);
	    }
	  };
	  var onrequest = function onrequest() {
	    stream.req.on('finish', onfinish);
	  };
	  if (isRequest(stream)) {
	    stream.on('complete', onfinish);
	    stream.on('abort', onclose);
	    if (stream.req) onrequest();else stream.on('request', onrequest);
	  } else if (writable && !stream._writableState) {
	    stream.on('end', onlegacyfinish);
	    stream.on('close', onlegacyfinish);
	  }
	  stream.on('end', onend);
	  stream.on('finish', onfinish);
	  if (opts.error !== false) stream.on('error', onerror);
	  stream.on('close', onclose);
	  return function () {
	    stream.removeListener('complete', onfinish);
	    stream.removeListener('abort', onclose);
	    stream.removeListener('request', onrequest);
	    if (stream.req) stream.req.removeListener('finish', onfinish);
	    stream.removeListener('end', onlegacyfinish);
	    stream.removeListener('close', onlegacyfinish);
	    stream.removeListener('finish', onfinish);
	    stream.removeListener('end', onend);
	    stream.removeListener('error', onerror);
	    stream.removeListener('close', onclose);
	  };
	}
	endOfStream = eos;
	return endOfStream;
}

var async_iterator;
var hasRequiredAsync_iterator;

function requireAsync_iterator () {
	if (hasRequiredAsync_iterator) return async_iterator;
	hasRequiredAsync_iterator = 1;
	var _Object$setPrototypeO;
	function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
	function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
	var finished = requireEndOfStream();
	var kLastResolve = Symbol('lastResolve');
	var kLastReject = Symbol('lastReject');
	var kError = Symbol('error');
	var kEnded = Symbol('ended');
	var kLastPromise = Symbol('lastPromise');
	var kHandlePromise = Symbol('handlePromise');
	var kStream = Symbol('stream');
	function createIterResult(value, done) {
	  return {
	    value: value,
	    done: done
	  };
	}
	function readAndResolve(iter) {
	  var resolve = iter[kLastResolve];
	  if (resolve !== null) {
	    var data = iter[kStream].read();
	    if (data !== null) {
	      iter[kLastPromise] = null;
	      iter[kLastResolve] = null;
	      iter[kLastReject] = null;
	      resolve(createIterResult(data, false));
	    }
	  }
	}
	function onReadable(iter) {
	  process$1.nextTick(readAndResolve, iter);
	}
	function wrapForNext(lastPromise, iter) {
	  return function (resolve, reject) {
	    lastPromise.then(function () {
	      if (iter[kEnded]) {
	        resolve(createIterResult(undefined, true));
	        return;
	      }
	      iter[kHandlePromise](resolve, reject);
	    }, reject);
	  };
	}
	var AsyncIteratorPrototype = Object.getPrototypeOf(function () {});
	var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
	  get stream() {
	    return this[kStream];
	  },
	  next: function next() {
	    var _this = this;
	    var error = this[kError];
	    if (error !== null) {
	      return Promise.reject(error);
	    }
	    if (this[kEnded]) {
	      return Promise.resolve(createIterResult(undefined, true));
	    }
	    if (this[kStream].destroyed) {
	      return new Promise(function (resolve, reject) {
	        process$1.nextTick(function () {
	          if (_this[kError]) {
	            reject(_this[kError]);
	          } else {
	            resolve(createIterResult(undefined, true));
	          }
	        });
	      });
	    }
	    var lastPromise = this[kLastPromise];
	    var promise;
	    if (lastPromise) {
	      promise = new Promise(wrapForNext(lastPromise, this));
	    } else {
	      var data = this[kStream].read();
	      if (data !== null) {
	        return Promise.resolve(createIterResult(data, false));
	      }
	      promise = new Promise(this[kHandlePromise]);
	    }
	    this[kLastPromise] = promise;
	    return promise;
	  }
	}, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function () {
	  return this;
	}), _defineProperty(_Object$setPrototypeO, "return", function _return() {
	  var _this2 = this;
	  return new Promise(function (resolve, reject) {
	    _this2[kStream].destroy(null, function (err) {
	      if (err) {
	        reject(err);
	        return;
	      }
	      resolve(createIterResult(undefined, true));
	    });
	  });
	}), _Object$setPrototypeO), AsyncIteratorPrototype);
	var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
	  var _Object$create;
	  var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
	    value: stream,
	    writable: true
	  }), _defineProperty(_Object$create, kLastResolve, {
	    value: null,
	    writable: true
	  }), _defineProperty(_Object$create, kLastReject, {
	    value: null,
	    writable: true
	  }), _defineProperty(_Object$create, kError, {
	    value: null,
	    writable: true
	  }), _defineProperty(_Object$create, kEnded, {
	    value: stream._readableState.endEmitted,
	    writable: true
	  }), _defineProperty(_Object$create, kHandlePromise, {
	    value: function value(resolve, reject) {
	      var data = iterator[kStream].read();
	      if (data) {
	        iterator[kLastPromise] = null;
	        iterator[kLastResolve] = null;
	        iterator[kLastReject] = null;
	        resolve(createIterResult(data, false));
	      } else {
	        iterator[kLastResolve] = resolve;
	        iterator[kLastReject] = reject;
	      }
	    },
	    writable: true
	  }), _Object$create));
	  iterator[kLastPromise] = null;
	  finished(stream, function (err) {
	    if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
	      var reject = iterator[kLastReject];
	      if (reject !== null) {
	        iterator[kLastPromise] = null;
	        iterator[kLastResolve] = null;
	        iterator[kLastReject] = null;
	        reject(err);
	      }
	      iterator[kError] = err;
	      return;
	    }
	    var resolve = iterator[kLastResolve];
	    if (resolve !== null) {
	      iterator[kLastPromise] = null;
	      iterator[kLastResolve] = null;
	      iterator[kLastReject] = null;
	      resolve(createIterResult(undefined, true));
	    }
	    iterator[kEnded] = true;
	  });
	  stream.on('readable', onReadable.bind(null, iterator));
	  return iterator;
	};
	async_iterator = createReadableStreamAsyncIterator;
	return async_iterator;
}

var from_1;
var hasRequiredFrom;

function requireFrom () {
	if (hasRequiredFrom) return from_1;
	hasRequiredFrom = 1;
	function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
	function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
	function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
	function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
	function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
	var ERR_INVALID_ARG_TYPE = requireErrors$1().codes.ERR_INVALID_ARG_TYPE;
	function from(Readable, iterable, opts) {
	  var iterator;
	  if (iterable && typeof iterable.next === 'function') {
	    iterator = iterable;
	  } else if (iterable && iterable[Symbol.asyncIterator]) iterator = iterable[Symbol.asyncIterator]();else if (iterable && iterable[Symbol.iterator]) iterator = iterable[Symbol.iterator]();else throw new ERR_INVALID_ARG_TYPE('iterable', ['Iterable'], iterable);
	  var readable = new Readable(_objectSpread({
	    objectMode: true
	  }, opts));
	  var reading = false;
	  readable._read = function () {
	    if (!reading) {
	      reading = true;
	      next();
	    }
	  };
	  function next() {
	    return _next2.apply(this, arguments);
	  }
	  function _next2() {
	    _next2 = _asyncToGenerator(function* () {
	      try {
	        var _yield$iterator$next = yield iterator.next(),
	          value = _yield$iterator$next.value,
	          done = _yield$iterator$next.done;
	        if (done) {
	          readable.push(null);
	        } else if (readable.push(yield value)) {
	          next();
	        } else {
	          reading = false;
	        }
	      } catch (err) {
	        readable.destroy(err);
	      }
	    });
	    return _next2.apply(this, arguments);
	  }
	  return readable;
	}
	from_1 = from;
	return from_1;
}

var _stream_readable;
var hasRequired_stream_readable;

function require_stream_readable () {
	if (hasRequired_stream_readable) return _stream_readable;
	hasRequired_stream_readable = 1;
	_stream_readable = Readable;
	var Duplex;
	Readable.ReadableState = ReadableState;
	eventsExports.EventEmitter;
	var EElistenerCount = function EElistenerCount(emitter, type) {
	  return emitter.listeners(type).length;
	};
	var Stream = requireStream();
	var Buffer = buffer.Buffer;
	var OurUint8Array = (typeof commonjsGlobal$1 !== 'undefined' ? commonjsGlobal$1 : typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : {}).Uint8Array || function () {};
	function _uint8ArrayToBuffer(chunk) {
	  return Buffer.from(chunk);
	}
	function _isUint8Array(obj) {
	  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
	}
	var debugUtil = util;
	var debug;
	if (debugUtil && debugUtil.debuglog) {
	  debug = debugUtil.debuglog('stream');
	} else {
	  debug = function debug() {};
	}
	var BufferList = requireBuffer_list();
	var destroyImpl = requireDestroy();
	var _require = requireState(),
	  getHighWaterMark = _require.getHighWaterMark;
	var _require$codes = requireErrors$1().codes,
	  ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
	  ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF,
	  ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
	  ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;
	var StringDecoder;
	var createReadableStreamAsyncIterator;
	var from;
	inherits_browserExports(Readable, Stream);
	var errorOrDestroy = destroyImpl.errorOrDestroy;
	var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];
	function prependListener(emitter, event, fn) {
	  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);
	  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
	}
	function ReadableState(options, stream, isDuplex) {
	  Duplex = Duplex || require_stream_duplex();
	  options = options || {};
	  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex;
	  this.objectMode = !!options.objectMode;
	  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;
	  this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex);
	  this.buffer = new BufferList();
	  this.length = 0;
	  this.pipes = null;
	  this.pipesCount = 0;
	  this.flowing = null;
	  this.ended = false;
	  this.endEmitted = false;
	  this.reading = false;
	  this.sync = true;
	  this.needReadable = false;
	  this.emittedReadable = false;
	  this.readableListening = false;
	  this.resumeScheduled = false;
	  this.paused = true;
	  this.emitClose = options.emitClose !== false;
	  this.autoDestroy = !!options.autoDestroy;
	  this.destroyed = false;
	  this.defaultEncoding = options.defaultEncoding || 'utf8';
	  this.awaitDrain = 0;
	  this.readingMore = false;
	  this.decoder = null;
	  this.encoding = null;
	  if (options.encoding) {
	    if (!StringDecoder) StringDecoder = requireString_decoder().StringDecoder;
	    this.decoder = new StringDecoder(options.encoding);
	    this.encoding = options.encoding;
	  }
	}
	function Readable(options) {
	  Duplex = Duplex || require_stream_duplex();
	  if (!(this instanceof Readable)) return new Readable(options);
	  var isDuplex = this instanceof Duplex;
	  this._readableState = new ReadableState(options, this, isDuplex);
	  this.readable = true;
	  if (options) {
	    if (typeof options.read === 'function') this._read = options.read;
	    if (typeof options.destroy === 'function') this._destroy = options.destroy;
	  }
	  Stream.call(this);
	}
	Object.defineProperty(Readable.prototype, 'destroyed', {
	  enumerable: false,
	  get: function get() {
	    if (this._readableState === undefined) {
	      return false;
	    }
	    return this._readableState.destroyed;
	  },
	  set: function set(value) {
	    if (!this._readableState) {
	      return;
	    }
	    this._readableState.destroyed = value;
	  }
	});
	Readable.prototype.destroy = destroyImpl.destroy;
	Readable.prototype._undestroy = destroyImpl.undestroy;
	Readable.prototype._destroy = function (err, cb) {
	  cb(err);
	};
	Readable.prototype.push = function (chunk, encoding) {
	  var state = this._readableState;
	  var skipChunkCheck;
	  if (!state.objectMode) {
	    if (typeof chunk === 'string') {
	      encoding = encoding || state.defaultEncoding;
	      if (encoding !== state.encoding) {
	        chunk = Buffer.from(chunk, encoding);
	        encoding = '';
	      }
	      skipChunkCheck = true;
	    }
	  } else {
	    skipChunkCheck = true;
	  }
	  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
	};
	Readable.prototype.unshift = function (chunk) {
	  return readableAddChunk(this, chunk, null, true, false);
	};
	function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
	  debug('readableAddChunk', chunk);
	  var state = stream._readableState;
	  if (chunk === null) {
	    state.reading = false;
	    onEofChunk(stream, state);
	  } else {
	    var er;
	    if (!skipChunkCheck) er = chunkInvalid(state, chunk);
	    if (er) {
	      errorOrDestroy(stream, er);
	    } else if (state.objectMode || chunk && chunk.length > 0) {
	      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
	        chunk = _uint8ArrayToBuffer(chunk);
	      }
	      if (addToFront) {
	        if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());else addChunk(stream, state, chunk, true);
	      } else if (state.ended) {
	        errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
	      } else if (state.destroyed) {
	        return false;
	      } else {
	        state.reading = false;
	        if (state.decoder && !encoding) {
	          chunk = state.decoder.write(chunk);
	          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
	        } else {
	          addChunk(stream, state, chunk, false);
	        }
	      }
	    } else if (!addToFront) {
	      state.reading = false;
	      maybeReadMore(stream, state);
	    }
	  }
	  return !state.ended && (state.length < state.highWaterMark || state.length === 0);
	}
	function addChunk(stream, state, chunk, addToFront) {
	  if (state.flowing && state.length === 0 && !state.sync) {
	    state.awaitDrain = 0;
	    stream.emit('data', chunk);
	  } else {
	    state.length += state.objectMode ? 1 : chunk.length;
	    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
	    if (state.needReadable) emitReadable(stream);
	  }
	  maybeReadMore(stream, state);
	}
	function chunkInvalid(state, chunk) {
	  var er;
	  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
	    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);
	  }
	  return er;
	}
	Readable.prototype.isPaused = function () {
	  return this._readableState.flowing === false;
	};
	Readable.prototype.setEncoding = function (enc) {
	  if (!StringDecoder) StringDecoder = requireString_decoder().StringDecoder;
	  var decoder = new StringDecoder(enc);
	  this._readableState.decoder = decoder;
	  this._readableState.encoding = this._readableState.decoder.encoding;
	  var p = this._readableState.buffer.head;
	  var content = '';
	  while (p !== null) {
	    content += decoder.write(p.data);
	    p = p.next;
	  }
	  this._readableState.buffer.clear();
	  if (content !== '') this._readableState.buffer.push(content);
	  this._readableState.length = content.length;
	  return this;
	};
	var MAX_HWM = 0x40000000;
	function computeNewHighWaterMark(n) {
	  if (n >= MAX_HWM) {
	    n = MAX_HWM;
	  } else {
	    n--;
	    n |= n >>> 1;
	    n |= n >>> 2;
	    n |= n >>> 4;
	    n |= n >>> 8;
	    n |= n >>> 16;
	    n++;
	  }
	  return n;
	}
	function howMuchToRead(n, state) {
	  if (n <= 0 || state.length === 0 && state.ended) return 0;
	  if (state.objectMode) return 1;
	  if (n !== n) {
	    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
	  }
	  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
	  if (n <= state.length) return n;
	  if (!state.ended) {
	    state.needReadable = true;
	    return 0;
	  }
	  return state.length;
	}
	Readable.prototype.read = function (n) {
	  debug('read', n);
	  n = parseInt(n, 10);
	  var state = this._readableState;
	  var nOrig = n;
	  if (n !== 0) state.emittedReadable = false;
	  if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
	    debug('read: emitReadable', state.length, state.ended);
	    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
	    return null;
	  }
	  n = howMuchToRead(n, state);
	  if (n === 0 && state.ended) {
	    if (state.length === 0) endReadable(this);
	    return null;
	  }
	  var doRead = state.needReadable;
	  debug('need readable', doRead);
	  if (state.length === 0 || state.length - n < state.highWaterMark) {
	    doRead = true;
	    debug('length less than watermark', doRead);
	  }
	  if (state.ended || state.reading) {
	    doRead = false;
	    debug('reading or ended', doRead);
	  } else if (doRead) {
	    debug('do read');
	    state.reading = true;
	    state.sync = true;
	    if (state.length === 0) state.needReadable = true;
	    this._read(state.highWaterMark);
	    state.sync = false;
	    if (!state.reading) n = howMuchToRead(nOrig, state);
	  }
	  var ret;
	  if (n > 0) ret = fromList(n, state);else ret = null;
	  if (ret === null) {
	    state.needReadable = state.length <= state.highWaterMark;
	    n = 0;
	  } else {
	    state.length -= n;
	    state.awaitDrain = 0;
	  }
	  if (state.length === 0) {
	    if (!state.ended) state.needReadable = true;
	    if (nOrig !== n && state.ended) endReadable(this);
	  }
	  if (ret !== null) this.emit('data', ret);
	  return ret;
	};
	function onEofChunk(stream, state) {
	  debug('onEofChunk');
	  if (state.ended) return;
	  if (state.decoder) {
	    var chunk = state.decoder.end();
	    if (chunk && chunk.length) {
	      state.buffer.push(chunk);
	      state.length += state.objectMode ? 1 : chunk.length;
	    }
	  }
	  state.ended = true;
	  if (state.sync) {
	    emitReadable(stream);
	  } else {
	    state.needReadable = false;
	    if (!state.emittedReadable) {
	      state.emittedReadable = true;
	      emitReadable_(stream);
	    }
	  }
	}
	function emitReadable(stream) {
	  var state = stream._readableState;
	  debug('emitReadable', state.needReadable, state.emittedReadable);
	  state.needReadable = false;
	  if (!state.emittedReadable) {
	    debug('emitReadable', state.flowing);
	    state.emittedReadable = true;
	    process$1.nextTick(emitReadable_, stream);
	  }
	}
	function emitReadable_(stream) {
	  var state = stream._readableState;
	  debug('emitReadable_', state.destroyed, state.length, state.ended);
	  if (!state.destroyed && (state.length || state.ended)) {
	    stream.emit('readable');
	    state.emittedReadable = false;
	  }
	  state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
	  flow(stream);
	}
	function maybeReadMore(stream, state) {
	  if (!state.readingMore) {
	    state.readingMore = true;
	    process$1.nextTick(maybeReadMore_, stream, state);
	  }
	}
	function maybeReadMore_(stream, state) {
	  while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
	    var len = state.length;
	    debug('maybeReadMore read 0');
	    stream.read(0);
	    if (len === state.length)
	      break;
	  }
	  state.readingMore = false;
	}
	Readable.prototype._read = function (n) {
	  errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));
	};
	Readable.prototype.pipe = function (dest, pipeOpts) {
	  var src = this;
	  var state = this._readableState;
	  switch (state.pipesCount) {
	    case 0:
	      state.pipes = dest;
	      break;
	    case 1:
	      state.pipes = [state.pipes, dest];
	      break;
	    default:
	      state.pipes.push(dest);
	      break;
	  }
	  state.pipesCount += 1;
	  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
	  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process$1.stdout && dest !== process$1.stderr;
	  var endFn = doEnd ? onend : unpipe;
	  if (state.endEmitted) process$1.nextTick(endFn);else src.once('end', endFn);
	  dest.on('unpipe', onunpipe);
	  function onunpipe(readable, unpipeInfo) {
	    debug('onunpipe');
	    if (readable === src) {
	      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
	        unpipeInfo.hasUnpiped = true;
	        cleanup();
	      }
	    }
	  }
	  function onend() {
	    debug('onend');
	    dest.end();
	  }
	  var ondrain = pipeOnDrain(src);
	  dest.on('drain', ondrain);
	  var cleanedUp = false;
	  function cleanup() {
	    debug('cleanup');
	    dest.removeListener('close', onclose);
	    dest.removeListener('finish', onfinish);
	    dest.removeListener('drain', ondrain);
	    dest.removeListener('error', onerror);
	    dest.removeListener('unpipe', onunpipe);
	    src.removeListener('end', onend);
	    src.removeListener('end', unpipe);
	    src.removeListener('data', ondata);
	    cleanedUp = true;
	    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
	  }
	  src.on('data', ondata);
	  function ondata(chunk) {
	    debug('ondata');
	    var ret = dest.write(chunk);
	    debug('dest.write', ret);
	    if (ret === false) {
	      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
	        debug('false write response, pause', state.awaitDrain);
	        state.awaitDrain++;
	      }
	      src.pause();
	    }
	  }
	  function onerror(er) {
	    debug('onerror', er);
	    unpipe();
	    dest.removeListener('error', onerror);
	    if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);
	  }
	  prependListener(dest, 'error', onerror);
	  function onclose() {
	    dest.removeListener('finish', onfinish);
	    unpipe();
	  }
	  dest.once('close', onclose);
	  function onfinish() {
	    debug('onfinish');
	    dest.removeListener('close', onclose);
	    unpipe();
	  }
	  dest.once('finish', onfinish);
	  function unpipe() {
	    debug('unpipe');
	    src.unpipe(dest);
	  }
	  dest.emit('pipe', src);
	  if (!state.flowing) {
	    debug('pipe resume');
	    src.resume();
	  }
	  return dest;
	};
	function pipeOnDrain(src) {
	  return function pipeOnDrainFunctionResult() {
	    var state = src._readableState;
	    debug('pipeOnDrain', state.awaitDrain);
	    if (state.awaitDrain) state.awaitDrain--;
	    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
	      state.flowing = true;
	      flow(src);
	    }
	  };
	}
	Readable.prototype.unpipe = function (dest) {
	  var state = this._readableState;
	  var unpipeInfo = {
	    hasUnpiped: false
	  };
	  if (state.pipesCount === 0) return this;
	  if (state.pipesCount === 1) {
	    if (dest && dest !== state.pipes) return this;
	    if (!dest) dest = state.pipes;
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;
	    if (dest) dest.emit('unpipe', this, unpipeInfo);
	    return this;
	  }
	  if (!dest) {
	    var dests = state.pipes;
	    var len = state.pipesCount;
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;
	    for (var i = 0; i < len; i++) dests[i].emit('unpipe', this, {
	      hasUnpiped: false
	    });
	    return this;
	  }
	  var index = indexOf(state.pipes, dest);
	  if (index === -1) return this;
	  state.pipes.splice(index, 1);
	  state.pipesCount -= 1;
	  if (state.pipesCount === 1) state.pipes = state.pipes[0];
	  dest.emit('unpipe', this, unpipeInfo);
	  return this;
	};
	Readable.prototype.on = function (ev, fn) {
	  var res = Stream.prototype.on.call(this, ev, fn);
	  var state = this._readableState;
	  if (ev === 'data') {
	    state.readableListening = this.listenerCount('readable') > 0;
	    if (state.flowing !== false) this.resume();
	  } else if (ev === 'readable') {
	    if (!state.endEmitted && !state.readableListening) {
	      state.readableListening = state.needReadable = true;
	      state.flowing = false;
	      state.emittedReadable = false;
	      debug('on readable', state.length, state.reading);
	      if (state.length) {
	        emitReadable(this);
	      } else if (!state.reading) {
	        process$1.nextTick(nReadingNextTick, this);
	      }
	    }
	  }
	  return res;
	};
	Readable.prototype.addListener = Readable.prototype.on;
	Readable.prototype.removeListener = function (ev, fn) {
	  var res = Stream.prototype.removeListener.call(this, ev, fn);
	  if (ev === 'readable') {
	    process$1.nextTick(updateReadableListening, this);
	  }
	  return res;
	};
	Readable.prototype.removeAllListeners = function (ev) {
	  var res = Stream.prototype.removeAllListeners.apply(this, arguments);
	  if (ev === 'readable' || ev === undefined) {
	    process$1.nextTick(updateReadableListening, this);
	  }
	  return res;
	};
	function updateReadableListening(self) {
	  var state = self._readableState;
	  state.readableListening = self.listenerCount('readable') > 0;
	  if (state.resumeScheduled && !state.paused) {
	    state.flowing = true;
	  } else if (self.listenerCount('data') > 0) {
	    self.resume();
	  }
	}
	function nReadingNextTick(self) {
	  debug('readable nexttick read 0');
	  self.read(0);
	}
	Readable.prototype.resume = function () {
	  var state = this._readableState;
	  if (!state.flowing) {
	    debug('resume');
	    state.flowing = !state.readableListening;
	    resume(this, state);
	  }
	  state.paused = false;
	  return this;
	};
	function resume(stream, state) {
	  if (!state.resumeScheduled) {
	    state.resumeScheduled = true;
	    process$1.nextTick(resume_, stream, state);
	  }
	}
	function resume_(stream, state) {
	  debug('resume', state.reading);
	  if (!state.reading) {
	    stream.read(0);
	  }
	  state.resumeScheduled = false;
	  stream.emit('resume');
	  flow(stream);
	  if (state.flowing && !state.reading) stream.read(0);
	}
	Readable.prototype.pause = function () {
	  debug('call pause flowing=%j', this._readableState.flowing);
	  if (this._readableState.flowing !== false) {
	    debug('pause');
	    this._readableState.flowing = false;
	    this.emit('pause');
	  }
	  this._readableState.paused = true;
	  return this;
	};
	function flow(stream) {
	  var state = stream._readableState;
	  debug('flow', state.flowing);
	  while (state.flowing && stream.read() !== null);
	}
	Readable.prototype.wrap = function (stream) {
	  var _this = this;
	  var state = this._readableState;
	  var paused = false;
	  stream.on('end', function () {
	    debug('wrapped end');
	    if (state.decoder && !state.ended) {
	      var chunk = state.decoder.end();
	      if (chunk && chunk.length) _this.push(chunk);
	    }
	    _this.push(null);
	  });
	  stream.on('data', function (chunk) {
	    debug('wrapped data');
	    if (state.decoder) chunk = state.decoder.write(chunk);
	    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;
	    var ret = _this.push(chunk);
	    if (!ret) {
	      paused = true;
	      stream.pause();
	    }
	  });
	  for (var i in stream) {
	    if (this[i] === undefined && typeof stream[i] === 'function') {
	      this[i] = function methodWrap(method) {
	        return function methodWrapReturnFunction() {
	          return stream[method].apply(stream, arguments);
	        };
	      }(i);
	    }
	  }
	  for (var n = 0; n < kProxyEvents.length; n++) {
	    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
	  }
	  this._read = function (n) {
	    debug('wrapped _read', n);
	    if (paused) {
	      paused = false;
	      stream.resume();
	    }
	  };
	  return this;
	};
	if (typeof Symbol === 'function') {
	  Readable.prototype[Symbol.asyncIterator] = function () {
	    if (createReadableStreamAsyncIterator === undefined) {
	      createReadableStreamAsyncIterator = requireAsync_iterator();
	    }
	    return createReadableStreamAsyncIterator(this);
	  };
	}
	Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
	  enumerable: false,
	  get: function get() {
	    return this._readableState.highWaterMark;
	  }
	});
	Object.defineProperty(Readable.prototype, 'readableBuffer', {
	  enumerable: false,
	  get: function get() {
	    return this._readableState && this._readableState.buffer;
	  }
	});
	Object.defineProperty(Readable.prototype, 'readableFlowing', {
	  enumerable: false,
	  get: function get() {
	    return this._readableState.flowing;
	  },
	  set: function set(state) {
	    if (this._readableState) {
	      this._readableState.flowing = state;
	    }
	  }
	});
	Readable._fromList = fromList;
	Object.defineProperty(Readable.prototype, 'readableLength', {
	  enumerable: false,
	  get: function get() {
	    return this._readableState.length;
	  }
	});
	function fromList(n, state) {
	  if (state.length === 0) return null;
	  var ret;
	  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
	    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.first();else ret = state.buffer.concat(state.length);
	    state.buffer.clear();
	  } else {
	    ret = state.buffer.consume(n, state.decoder);
	  }
	  return ret;
	}
	function endReadable(stream) {
	  var state = stream._readableState;
	  debug('endReadable', state.endEmitted);
	  if (!state.endEmitted) {
	    state.ended = true;
	    process$1.nextTick(endReadableNT, state, stream);
	  }
	}
	function endReadableNT(state, stream) {
	  debug('endReadableNT', state.endEmitted, state.length);
	  if (!state.endEmitted && state.length === 0) {
	    state.endEmitted = true;
	    stream.readable = false;
	    stream.emit('end');
	    if (state.autoDestroy) {
	      var wState = stream._writableState;
	      if (!wState || wState.autoDestroy && wState.finished) {
	        stream.destroy();
	      }
	    }
	  }
	}
	if (typeof Symbol === 'function') {
	  Readable.from = function (iterable, opts) {
	    if (from === undefined) {
	      from = requireFrom();
	    }
	    return from(Readable, iterable, opts);
	  };
	}
	function indexOf(xs, x) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    if (xs[i] === x) return i;
	  }
	  return -1;
	}
	return _stream_readable;
}

var _stream_transform;
var hasRequired_stream_transform;

function require_stream_transform () {
	if (hasRequired_stream_transform) return _stream_transform;
	hasRequired_stream_transform = 1;
	_stream_transform = Transform;
	var _require$codes = requireErrors$1().codes,
	  ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
	  ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
	  ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING,
	  ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;
	var Duplex = require_stream_duplex();
	inherits_browserExports(Transform, Duplex);
	function afterTransform(er, data) {
	  var ts = this._transformState;
	  ts.transforming = false;
	  var cb = ts.writecb;
	  if (cb === null) {
	    return this.emit('error', new ERR_MULTIPLE_CALLBACK());
	  }
	  ts.writechunk = null;
	  ts.writecb = null;
	  if (data != null)
	    this.push(data);
	  cb(er);
	  var rs = this._readableState;
	  rs.reading = false;
	  if (rs.needReadable || rs.length < rs.highWaterMark) {
	    this._read(rs.highWaterMark);
	  }
	}
	function Transform(options) {
	  if (!(this instanceof Transform)) return new Transform(options);
	  Duplex.call(this, options);
	  this._transformState = {
	    afterTransform: afterTransform.bind(this),
	    needTransform: false,
	    transforming: false,
	    writecb: null,
	    writechunk: null,
	    writeencoding: null
	  };
	  this._readableState.needReadable = true;
	  this._readableState.sync = false;
	  if (options) {
	    if (typeof options.transform === 'function') this._transform = options.transform;
	    if (typeof options.flush === 'function') this._flush = options.flush;
	  }
	  this.on('prefinish', prefinish);
	}
	function prefinish() {
	  var _this = this;
	  if (typeof this._flush === 'function' && !this._readableState.destroyed) {
	    this._flush(function (er, data) {
	      done(_this, er, data);
	    });
	  } else {
	    done(this, null, null);
	  }
	}
	Transform.prototype.push = function (chunk, encoding) {
	  this._transformState.needTransform = false;
	  return Duplex.prototype.push.call(this, chunk, encoding);
	};
	Transform.prototype._transform = function (chunk, encoding, cb) {
	  cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));
	};
	Transform.prototype._write = function (chunk, encoding, cb) {
	  var ts = this._transformState;
	  ts.writecb = cb;
	  ts.writechunk = chunk;
	  ts.writeencoding = encoding;
	  if (!ts.transforming) {
	    var rs = this._readableState;
	    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
	  }
	};
	Transform.prototype._read = function (n) {
	  var ts = this._transformState;
	  if (ts.writechunk !== null && !ts.transforming) {
	    ts.transforming = true;
	    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
	  } else {
	    ts.needTransform = true;
	  }
	};
	Transform.prototype._destroy = function (err, cb) {
	  Duplex.prototype._destroy.call(this, err, function (err2) {
	    cb(err2);
	  });
	};
	function done(stream, er, data) {
	  if (er) return stream.emit('error', er);
	  if (data != null)
	    stream.push(data);
	  if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
	  if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
	  return stream.push(null);
	}
	return _stream_transform;
}

var _stream_passthrough;
var hasRequired_stream_passthrough;

function require_stream_passthrough () {
	if (hasRequired_stream_passthrough) return _stream_passthrough;
	hasRequired_stream_passthrough = 1;
	_stream_passthrough = PassThrough;
	var Transform = require_stream_transform();
	inherits_browserExports(PassThrough, Transform);
	function PassThrough(options) {
	  if (!(this instanceof PassThrough)) return new PassThrough(options);
	  Transform.call(this, options);
	}
	PassThrough.prototype._transform = function (chunk, encoding, cb) {
	  cb(null, chunk);
	};
	return _stream_passthrough;
}

var pipeline_1;
var hasRequiredPipeline;

function requirePipeline () {
	if (hasRequiredPipeline) return pipeline_1;
	hasRequiredPipeline = 1;
	var eos;
	function once(callback) {
	  var called = false;
	  return function () {
	    if (called) return;
	    called = true;
	    callback.apply(void 0, arguments);
	  };
	}
	var _require$codes = requireErrors$1().codes,
	  ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS,
	  ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
	function noop(err) {
	  if (err) throw err;
	}
	function isRequest(stream) {
	  return stream.setHeader && typeof stream.abort === 'function';
	}
	function destroyer(stream, reading, writing, callback) {
	  callback = once(callback);
	  var closed = false;
	  stream.on('close', function () {
	    closed = true;
	  });
	  if (eos === undefined) eos = requireEndOfStream();
	  eos(stream, {
	    readable: reading,
	    writable: writing
	  }, function (err) {
	    if (err) return callback(err);
	    closed = true;
	    callback();
	  });
	  var destroyed = false;
	  return function (err) {
	    if (closed) return;
	    if (destroyed) return;
	    destroyed = true;
	    if (isRequest(stream)) return stream.abort();
	    if (typeof stream.destroy === 'function') return stream.destroy();
	    callback(err || new ERR_STREAM_DESTROYED('pipe'));
	  };
	}
	function call(fn) {
	  fn();
	}
	function pipe(from, to) {
	  return from.pipe(to);
	}
	function popCallback(streams) {
	  if (!streams.length) return noop;
	  if (typeof streams[streams.length - 1] !== 'function') return noop;
	  return streams.pop();
	}
	function pipeline() {
	  for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
	    streams[_key] = arguments[_key];
	  }
	  var callback = popCallback(streams);
	  if (Array.isArray(streams[0])) streams = streams[0];
	  if (streams.length < 2) {
	    throw new ERR_MISSING_ARGS('streams');
	  }
	  var error;
	  var destroys = streams.map(function (stream, i) {
	    var reading = i < streams.length - 1;
	    var writing = i > 0;
	    return destroyer(stream, reading, writing, function (err) {
	      if (!error) error = err;
	      if (err) destroys.forEach(call);
	      if (reading) return;
	      destroys.forEach(call);
	      callback(error);
	    });
	  });
	  return streams.reduce(pipe);
	}
	pipeline_1 = pipeline;
	return pipeline_1;
}

var streamBrowserify;
var hasRequiredStreamBrowserify;

function requireStreamBrowserify () {
	if (hasRequiredStreamBrowserify) return streamBrowserify;
	hasRequiredStreamBrowserify = 1;
	streamBrowserify = Stream;
	var EE = eventsExports.EventEmitter;
	var inherits = inherits_browserExports;
	inherits(Stream, EE);
	Stream.Readable = require_stream_readable();
	Stream.Writable = require_stream_writable();
	Stream.Duplex = require_stream_duplex();
	Stream.Transform = require_stream_transform();
	Stream.PassThrough = require_stream_passthrough();
	Stream.finished = requireEndOfStream();
	Stream.pipeline = requirePipeline();
	Stream.Stream = Stream;
	function Stream() {
	  EE.call(this);
	}
	Stream.prototype.pipe = function(dest, options) {
	  var source = this;
	  function ondata(chunk) {
	    if (dest.writable) {
	      if (false === dest.write(chunk) && source.pause) {
	        source.pause();
	      }
	    }
	  }
	  source.on('data', ondata);
	  function ondrain() {
	    if (source.readable && source.resume) {
	      source.resume();
	    }
	  }
	  dest.on('drain', ondrain);
	  if (!dest._isStdio && (!options || options.end !== false)) {
	    source.on('end', onend);
	    source.on('close', onclose);
	  }
	  var didOnEnd = false;
	  function onend() {
	    if (didOnEnd) return;
	    didOnEnd = true;
	    dest.end();
	  }
	  function onclose() {
	    if (didOnEnd) return;
	    didOnEnd = true;
	    if (typeof dest.destroy === 'function') dest.destroy();
	  }
	  function onerror(er) {
	    cleanup();
	    if (EE.listenerCount(this, 'error') === 0) {
	      throw er;
	    }
	  }
	  source.on('error', onerror);
	  dest.on('error', onerror);
	  function cleanup() {
	    source.removeListener('data', ondata);
	    dest.removeListener('drain', ondrain);
	    source.removeListener('end', onend);
	    source.removeListener('close', onclose);
	    source.removeListener('error', onerror);
	    dest.removeListener('error', onerror);
	    source.removeListener('end', cleanup);
	    source.removeListener('close', cleanup);
	    dest.removeListener('close', cleanup);
	  }
	  source.on('end', cleanup);
	  source.on('close', cleanup);
	  dest.on('close', cleanup);
	  dest.emit('pipe', source);
	  return dest;
	};
	return streamBrowserify;
}

var streamBrowserifyExports = requireStreamBrowserify();
var stream$1 = /*@__PURE__*/getDefaultExportFromCjs$1(streamBrowserifyExports);

var VirtualFileSystem = function () {
  function VirtualFileSystem() {
    this.fileData = {};
  }
  var _proto = VirtualFileSystem.prototype;
  _proto.readFileSync = function readFileSync(fileName, options) {
    if (options === void 0) {
      options = {};
    }
    var encoding = typeof options === 'string' ? options : options.encoding;
    var virtualFileName = normalizeFilename(fileName);
    var data = this.fileData[virtualFileName];
    if (data == null) {
      throw new Error("File '" + virtualFileName + "' not found in virtual file system");
    }
    if (encoding) {
      return typeof data === 'string' ? data : data.toString(encoding);
    }
    return buffer.Buffer.from(data, typeof data === 'string' ? 'base64' : undefined);
  };
  _proto.writeFileSync = function writeFileSync(fileName, content) {
    this.fileData[normalizeFilename(fileName)] = content;
  };
  _proto.bindFileData = function bindFileData(data, options) {
    if (data === void 0) {
      data = {};
    }
    if (options === void 0) {
      options = {};
    }
    if (options.reset) {
      this.fileData = data;
    } else {
      Object.assign(this.fileData, data);
    }
  };
  return VirtualFileSystem;
}();
function normalizeFilename(fileName) {
  let __dirname = '/';
  if (fileName.indexOf("") === 0) {
    fileName = fileName.substring(__dirname.length);
  }
  if (fileName.indexOf('/') === 0) {
    fileName = fileName.substring(1);
  }
  return fileName;
}
var virtualFs = new VirtualFileSystem();
var virtualFs_1 = virtualFs;

var fs$1 = /*@__PURE__*/getDefaultExportFromCjs$1(virtualFs_1);

var lib = {};

var binding = {};

var assert = {exports: {}};

var errors = {};

var hasRequiredErrors;

function requireErrors () {
	if (hasRequiredErrors) return errors;
	hasRequiredErrors = 1;
	function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
	function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
	function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
	function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
	function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
	function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
	function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
	function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
	function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
	function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
	function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
	var codes = {};
	var assert;
	var util$1;
	function createErrorType(code, message, Base) {
	  if (!Base) {
	    Base = Error;
	  }
	  function getMessage(arg1, arg2, arg3) {
	    if (typeof message === 'string') {
	      return message;
	    } else {
	      return message(arg1, arg2, arg3);
	    }
	  }
	  var NodeError = function (_Base) {
	    _inherits(NodeError, _Base);
	    var _super = _createSuper(NodeError);
	    function NodeError(arg1, arg2, arg3) {
	      var _this;
	      _classCallCheck(this, NodeError);
	      _this = _super.call(this, getMessage(arg1, arg2, arg3));
	      _this.code = code;
	      return _this;
	    }
	    return _createClass(NodeError);
	  }(Base);
	  codes[code] = NodeError;
	}
	function oneOf(expected, thing) {
	  if (Array.isArray(expected)) {
	    var len = expected.length;
	    expected = expected.map(function (i) {
	      return String(i);
	    });
	    if (len > 2) {
	      return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
	    } else if (len === 2) {
	      return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
	    } else {
	      return "of ".concat(thing, " ").concat(expected[0]);
	    }
	  } else {
	    return "of ".concat(thing, " ").concat(String(expected));
	  }
	}
	function startsWith(str, search, pos) {
	  return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
	}
	function endsWith(str, search, this_len) {
	  if (this_len === undefined || this_len > str.length) {
	    this_len = str.length;
	  }
	  return str.substring(this_len - search.length, this_len) === search;
	}
	function includes(str, search, start) {
	  if (typeof start !== 'number') {
	    start = 0;
	  }
	  if (start + search.length > str.length) {
	    return false;
	  } else {
	    return str.indexOf(search, start) !== -1;
	  }
	}
	createErrorType('ERR_AMBIGUOUS_ARGUMENT', 'The "%s" argument is ambiguous. %s', TypeError);
	createErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {
	  if (assert === undefined) assert = requireAssert();
	  assert(typeof name === 'string', "'name' must be a string");
	  var determiner;
	  if (typeof expected === 'string' && startsWith(expected, 'not ')) {
	    determiner = 'must not be';
	    expected = expected.replace(/^not /, '');
	  } else {
	    determiner = 'must be';
	  }
	  var msg;
	  if (endsWith(name, ' argument')) {
	    msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
	  } else {
	    var type = includes(name, '.') ? 'property' : 'argument';
	    msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
	  }
	  msg += ". Received type ".concat(_typeof(actual));
	  return msg;
	}, TypeError);
	createErrorType('ERR_INVALID_ARG_VALUE', function (name, value) {
	  var reason = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'is invalid';
	  if (util$1 === undefined) util$1 = util;
	  var inspected = util$1.inspect(value);
	  if (inspected.length > 128) {
	    inspected = "".concat(inspected.slice(0, 128), "...");
	  }
	  return "The argument '".concat(name, "' ").concat(reason, ". Received ").concat(inspected);
	}, TypeError);
	createErrorType('ERR_INVALID_RETURN_VALUE', function (input, name, value) {
	  var type;
	  if (value && value.constructor && value.constructor.name) {
	    type = "instance of ".concat(value.constructor.name);
	  } else {
	    type = "type ".concat(_typeof(value));
	  }
	  return "Expected ".concat(input, " to be returned from the \"").concat(name, "\"") + " function but got ".concat(type, ".");
	}, TypeError);
	createErrorType('ERR_MISSING_ARGS', function () {
	  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	    args[_key] = arguments[_key];
	  }
	  if (assert === undefined) assert = requireAssert();
	  assert(args.length > 0, 'At least one arg needs to be specified');
	  var msg = 'The ';
	  var len = args.length;
	  args = args.map(function (a) {
	    return "\"".concat(a, "\"");
	  });
	  switch (len) {
	    case 1:
	      msg += "".concat(args[0], " argument");
	      break;
	    case 2:
	      msg += "".concat(args[0], " and ").concat(args[1], " arguments");
	      break;
	    default:
	      msg += args.slice(0, len - 1).join(', ');
	      msg += ", and ".concat(args[len - 1], " arguments");
	      break;
	  }
	  return "".concat(msg, " must be specified");
	}, TypeError);
	errors.codes = codes;
	return errors;
}

var assertion_error;
var hasRequiredAssertion_error;

function requireAssertion_error () {
	if (hasRequiredAssertion_error) return assertion_error;
	hasRequiredAssertion_error = 1;
	function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
	function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
	function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
	function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
	function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
	function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
	function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
	function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
	function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
	function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }
	function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct.bind(); } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }
	function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
	function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }
	function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
	function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
	function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
	var _require = util,
	  inspect = _require.inspect;
	var _require2 = requireErrors(),
	  ERR_INVALID_ARG_TYPE = _require2.codes.ERR_INVALID_ARG_TYPE;
	function endsWith(str, search, this_len) {
	  if (this_len === undefined || this_len > str.length) {
	    this_len = str.length;
	  }
	  return str.substring(this_len - search.length, this_len) === search;
	}
	function repeat(str, count) {
	  count = Math.floor(count);
	  if (str.length == 0 || count == 0) return '';
	  var maxCount = str.length * count;
	  count = Math.floor(Math.log(count) / Math.log(2));
	  while (count) {
	    str += str;
	    count--;
	  }
	  str += str.substring(0, maxCount - str.length);
	  return str;
	}
	var blue = '';
	var green = '';
	var red = '';
	var white = '';
	var kReadableOperator = {
	  deepStrictEqual: 'Expected values to be strictly deep-equal:',
	  strictEqual: 'Expected values to be strictly equal:',
	  strictEqualObject: 'Expected "actual" to be reference-equal to "expected":',
	  deepEqual: 'Expected values to be loosely deep-equal:',
	  equal: 'Expected values to be loosely equal:',
	  notDeepStrictEqual: 'Expected "actual" not to be strictly deep-equal to:',
	  notStrictEqual: 'Expected "actual" to be strictly unequal to:',
	  notStrictEqualObject: 'Expected "actual" not to be reference-equal to "expected":',
	  notDeepEqual: 'Expected "actual" not to be loosely deep-equal to:',
	  notEqual: 'Expected "actual" to be loosely unequal to:',
	  notIdentical: 'Values identical but not reference-equal:'
	};
	var kMaxShortLength = 10;
	function copyError(source) {
	  var keys = Object.keys(source);
	  var target = Object.create(Object.getPrototypeOf(source));
	  keys.forEach(function (key) {
	    target[key] = source[key];
	  });
	  Object.defineProperty(target, 'message', {
	    value: source.message
	  });
	  return target;
	}
	function inspectValue(val) {
	  return inspect(val, {
	    compact: false,
	    customInspect: false,
	    depth: 1000,
	    maxArrayLength: Infinity,
	    showHidden: false,
	    breakLength: Infinity,
	    showProxy: false,
	    sorted: true,
	    getters: true
	  });
	}
	function createErrDiff(actual, expected, operator) {
	  var other = '';
	  var res = '';
	  var lastPos = 0;
	  var end = '';
	  var skipped = false;
	  var actualInspected = inspectValue(actual);
	  var actualLines = actualInspected.split('\n');
	  var expectedLines = inspectValue(expected).split('\n');
	  var i = 0;
	  var indicator = '';
	  if (operator === 'strictEqual' && _typeof(actual) === 'object' && _typeof(expected) === 'object' && actual !== null && expected !== null) {
	    operator = 'strictEqualObject';
	  }
	  if (actualLines.length === 1 && expectedLines.length === 1 && actualLines[0] !== expectedLines[0]) {
	    var inputLength = actualLines[0].length + expectedLines[0].length;
	    if (inputLength <= kMaxShortLength) {
	      if ((_typeof(actual) !== 'object' || actual === null) && (_typeof(expected) !== 'object' || expected === null) && (actual !== 0 || expected !== 0)) {
	        return "".concat(kReadableOperator[operator], "\n\n") + "".concat(actualLines[0], " !== ").concat(expectedLines[0], "\n");
	      }
	    } else if (operator !== 'strictEqualObject') {
	      var maxLength = process$1.stderr && process$1.stderr.isTTY ? process$1.stderr.columns : 80;
	      if (inputLength < maxLength) {
	        while (actualLines[0][i] === expectedLines[0][i]) {
	          i++;
	        }
	        if (i > 2) {
	          indicator = "\n  ".concat(repeat(' ', i), "^");
	          i = 0;
	        }
	      }
	    }
	  }
	  var a = actualLines[actualLines.length - 1];
	  var b = expectedLines[expectedLines.length - 1];
	  while (a === b) {
	    if (i++ < 2) {
	      end = "\n  ".concat(a).concat(end);
	    } else {
	      other = a;
	    }
	    actualLines.pop();
	    expectedLines.pop();
	    if (actualLines.length === 0 || expectedLines.length === 0) break;
	    a = actualLines[actualLines.length - 1];
	    b = expectedLines[expectedLines.length - 1];
	  }
	  var maxLines = Math.max(actualLines.length, expectedLines.length);
	  if (maxLines === 0) {
	    var _actualLines = actualInspected.split('\n');
	    if (_actualLines.length > 30) {
	      _actualLines[26] = "".concat(blue, "...").concat(white);
	      while (_actualLines.length > 27) {
	        _actualLines.pop();
	      }
	    }
	    return "".concat(kReadableOperator.notIdentical, "\n\n").concat(_actualLines.join('\n'), "\n");
	  }
	  if (i > 3) {
	    end = "\n".concat(blue, "...").concat(white).concat(end);
	    skipped = true;
	  }
	  if (other !== '') {
	    end = "\n  ".concat(other).concat(end);
	    other = '';
	  }
	  var printedLines = 0;
	  var msg = kReadableOperator[operator] + "\n".concat(green, "+ actual").concat(white, " ").concat(red, "- expected").concat(white);
	  var skippedMsg = " ".concat(blue, "...").concat(white, " Lines skipped");
	  for (i = 0; i < maxLines; i++) {
	    var cur = i - lastPos;
	    if (actualLines.length < i + 1) {
	      if (cur > 1 && i > 2) {
	        if (cur > 4) {
	          res += "\n".concat(blue, "...").concat(white);
	          skipped = true;
	        } else if (cur > 3) {
	          res += "\n  ".concat(expectedLines[i - 2]);
	          printedLines++;
	        }
	        res += "\n  ".concat(expectedLines[i - 1]);
	        printedLines++;
	      }
	      lastPos = i;
	      other += "\n".concat(red, "-").concat(white, " ").concat(expectedLines[i]);
	      printedLines++;
	    } else if (expectedLines.length < i + 1) {
	      if (cur > 1 && i > 2) {
	        if (cur > 4) {
	          res += "\n".concat(blue, "...").concat(white);
	          skipped = true;
	        } else if (cur > 3) {
	          res += "\n  ".concat(actualLines[i - 2]);
	          printedLines++;
	        }
	        res += "\n  ".concat(actualLines[i - 1]);
	        printedLines++;
	      }
	      lastPos = i;
	      res += "\n".concat(green, "+").concat(white, " ").concat(actualLines[i]);
	      printedLines++;
	    } else {
	      var expectedLine = expectedLines[i];
	      var actualLine = actualLines[i];
	      var divergingLines = actualLine !== expectedLine && (!endsWith(actualLine, ',') || actualLine.slice(0, -1) !== expectedLine);
	      if (divergingLines && endsWith(expectedLine, ',') && expectedLine.slice(0, -1) === actualLine) {
	        divergingLines = false;
	        actualLine += ',';
	      }
	      if (divergingLines) {
	        if (cur > 1 && i > 2) {
	          if (cur > 4) {
	            res += "\n".concat(blue, "...").concat(white);
	            skipped = true;
	          } else if (cur > 3) {
	            res += "\n  ".concat(actualLines[i - 2]);
	            printedLines++;
	          }
	          res += "\n  ".concat(actualLines[i - 1]);
	          printedLines++;
	        }
	        lastPos = i;
	        res += "\n".concat(green, "+").concat(white, " ").concat(actualLine);
	        other += "\n".concat(red, "-").concat(white, " ").concat(expectedLine);
	        printedLines += 2;
	      } else {
	        res += other;
	        other = '';
	        if (cur === 1 || i === 0) {
	          res += "\n  ".concat(actualLine);
	          printedLines++;
	        }
	      }
	    }
	    if (printedLines > 20 && i < maxLines - 2) {
	      return "".concat(msg).concat(skippedMsg, "\n").concat(res, "\n").concat(blue, "...").concat(white).concat(other, "\n") + "".concat(blue, "...").concat(white);
	    }
	  }
	  return "".concat(msg).concat(skipped ? skippedMsg : '', "\n").concat(res).concat(other).concat(end).concat(indicator);
	}
	var AssertionError = function (_Error, _inspect$custom) {
	  _inherits(AssertionError, _Error);
	  var _super = _createSuper(AssertionError);
	  function AssertionError(options) {
	    var _this;
	    _classCallCheck(this, AssertionError);
	    if (_typeof(options) !== 'object' || options === null) {
	      throw new ERR_INVALID_ARG_TYPE('options', 'Object', options);
	    }
	    var message = options.message,
	      operator = options.operator,
	      stackStartFn = options.stackStartFn;
	    var actual = options.actual,
	      expected = options.expected;
	    var limit = Error.stackTraceLimit;
	    Error.stackTraceLimit = 0;
	    if (message != null) {
	      _this = _super.call(this, String(message));
	    } else {
	      if (process$1.stderr && process$1.stderr.isTTY) {
	        if (process$1.stderr && process$1.stderr.getColorDepth && process$1.stderr.getColorDepth() !== 1) {
	          blue = "\x1B[34m";
	          green = "\x1B[32m";
	          white = "\x1B[39m";
	          red = "\x1B[31m";
	        } else {
	          blue = '';
	          green = '';
	          white = '';
	          red = '';
	        }
	      }
	      if (_typeof(actual) === 'object' && actual !== null && _typeof(expected) === 'object' && expected !== null && 'stack' in actual && actual instanceof Error && 'stack' in expected && expected instanceof Error) {
	        actual = copyError(actual);
	        expected = copyError(expected);
	      }
	      if (operator === 'deepStrictEqual' || operator === 'strictEqual') {
	        _this = _super.call(this, createErrDiff(actual, expected, operator));
	      } else if (operator === 'notDeepStrictEqual' || operator === 'notStrictEqual') {
	        var base = kReadableOperator[operator];
	        var res = inspectValue(actual).split('\n');
	        if (operator === 'notStrictEqual' && _typeof(actual) === 'object' && actual !== null) {
	          base = kReadableOperator.notStrictEqualObject;
	        }
	        if (res.length > 30) {
	          res[26] = "".concat(blue, "...").concat(white);
	          while (res.length > 27) {
	            res.pop();
	          }
	        }
	        if (res.length === 1) {
	          _this = _super.call(this, "".concat(base, " ").concat(res[0]));
	        } else {
	          _this = _super.call(this, "".concat(base, "\n\n").concat(res.join('\n'), "\n"));
	        }
	      } else {
	        var _res = inspectValue(actual);
	        var other = '';
	        var knownOperators = kReadableOperator[operator];
	        if (operator === 'notDeepEqual' || operator === 'notEqual') {
	          _res = "".concat(kReadableOperator[operator], "\n\n").concat(_res);
	          if (_res.length > 1024) {
	            _res = "".concat(_res.slice(0, 1021), "...");
	          }
	        } else {
	          other = "".concat(inspectValue(expected));
	          if (_res.length > 512) {
	            _res = "".concat(_res.slice(0, 509), "...");
	          }
	          if (other.length > 512) {
	            other = "".concat(other.slice(0, 509), "...");
	          }
	          if (operator === 'deepEqual' || operator === 'equal') {
	            _res = "".concat(knownOperators, "\n\n").concat(_res, "\n\nshould equal\n\n");
	          } else {
	            other = " ".concat(operator, " ").concat(other);
	          }
	        }
	        _this = _super.call(this, "".concat(_res).concat(other));
	      }
	    }
	    Error.stackTraceLimit = limit;
	    _this.generatedMessage = !message;
	    Object.defineProperty(_assertThisInitialized(_this), 'name', {
	      value: 'AssertionError [ERR_ASSERTION]',
	      enumerable: false,
	      writable: true,
	      configurable: true
	    });
	    _this.code = 'ERR_ASSERTION';
	    _this.actual = actual;
	    _this.expected = expected;
	    _this.operator = operator;
	    if (Error.captureStackTrace) {
	      Error.captureStackTrace(_assertThisInitialized(_this), stackStartFn);
	    }
	    _this.stack;
	    _this.name = 'AssertionError';
	    return _possibleConstructorReturn(_this);
	  }
	  _createClass(AssertionError, [{
	    key: "toString",
	    value: function toString() {
	      return "".concat(this.name, " [").concat(this.code, "]: ").concat(this.message);
	    }
	  }, {
	    key: _inspect$custom,
	    value: function value(recurseTimes, ctx) {
	      return inspect(this, _objectSpread(_objectSpread({}, ctx), {}, {
	        customInspect: false,
	        depth: 0
	      }));
	    }
	  }]);
	  return AssertionError;
	}( _wrapNativeSuper(Error), inspect.custom);
	assertion_error = AssertionError;
	return assertion_error;
}

var toStr$6 = Object.prototype.toString;
var isArguments$1 = function isArguments(value) {
	var str = toStr$6.call(value);
	var isArgs = str === '[object Arguments]';
	if (!isArgs) {
		isArgs = str !== '[object Array]' &&
			value !== null &&
			typeof value === 'object' &&
			typeof value.length === 'number' &&
			value.length >= 0 &&
			toStr$6.call(value.callee) === '[object Function]';
	}
	return isArgs;
};

var implementation$a;
var hasRequiredImplementation$1;

function requireImplementation$1 () {
	if (hasRequiredImplementation$1) return implementation$a;
	hasRequiredImplementation$1 = 1;
	var keysShim;
	if (!Object.keys) {
		var has = Object.prototype.hasOwnProperty;
		var toStr = Object.prototype.toString;
		var isArgs = isArguments$1;
		var isEnumerable = Object.prototype.propertyIsEnumerable;
		var hasDontEnumBug = !isEnumerable.call({ toString: null }, 'toString');
		var hasProtoEnumBug = isEnumerable.call(function () {}, 'prototype');
		var dontEnums = [
			'toString',
			'toLocaleString',
			'valueOf',
			'hasOwnProperty',
			'isPrototypeOf',
			'propertyIsEnumerable',
			'constructor'
		];
		var equalsConstructorPrototype = function (o) {
			var ctor = o.constructor;
			return ctor && ctor.prototype === o;
		};
		var excludedKeys = {
			$applicationCache: true,
			$console: true,
			$external: true,
			$frame: true,
			$frameElement: true,
			$frames: true,
			$innerHeight: true,
			$innerWidth: true,
			$onmozfullscreenchange: true,
			$onmozfullscreenerror: true,
			$outerHeight: true,
			$outerWidth: true,
			$pageXOffset: true,
			$pageYOffset: true,
			$parent: true,
			$scrollLeft: true,
			$scrollTop: true,
			$scrollX: true,
			$scrollY: true,
			$self: true,
			$webkitIndexedDB: true,
			$webkitStorageInfo: true,
			$window: true
		};
		var hasAutomationEqualityBug = (function () {
			if (typeof window === 'undefined') { return false; }
			for (var k in window) {
				try {
					if (!excludedKeys['$' + k] && has.call(window, k) && window[k] !== null && typeof window[k] === 'object') {
						try {
							equalsConstructorPrototype(window[k]);
						} catch (e) {
							return true;
						}
					}
				} catch (e) {
					return true;
				}
			}
			return false;
		}());
		var equalsConstructorPrototypeIfNotBuggy = function (o) {
			if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
				return equalsConstructorPrototype(o);
			}
			try {
				return equalsConstructorPrototype(o);
			} catch (e) {
				return false;
			}
		};
		keysShim = function keys(object) {
			var isObject = object !== null && typeof object === 'object';
			var isFunction = toStr.call(object) === '[object Function]';
			var isArguments = isArgs(object);
			var isString = isObject && toStr.call(object) === '[object String]';
			var theKeys = [];
			if (!isObject && !isFunction && !isArguments) {
				throw new TypeError('Object.keys called on a non-object');
			}
			var skipProto = hasProtoEnumBug && isFunction;
			if (isString && object.length > 0 && !has.call(object, 0)) {
				for (var i = 0; i < object.length; ++i) {
					theKeys.push(String(i));
				}
			}
			if (isArguments && object.length > 0) {
				for (var j = 0; j < object.length; ++j) {
					theKeys.push(String(j));
				}
			} else {
				for (var name in object) {
					if (!(skipProto && name === 'prototype') && has.call(object, name)) {
						theKeys.push(String(name));
					}
				}
			}
			if (hasDontEnumBug) {
				var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);
				for (var k = 0; k < dontEnums.length; ++k) {
					if (!(skipConstructor && dontEnums[k] === 'constructor') && has.call(object, dontEnums[k])) {
						theKeys.push(dontEnums[k]);
					}
				}
			}
			return theKeys;
		};
	}
	implementation$a = keysShim;
	return implementation$a;
}

var slice = Array.prototype.slice;
var isArgs = isArguments$1;
var origKeys = Object.keys;
var keysShim = origKeys ? function keys(o) { return origKeys(o); } : requireImplementation$1();
var originalKeys = Object.keys;
keysShim.shim = function shimObjectKeys() {
	if (Object.keys) {
		var keysWorksWithArguments = (function () {
			var args = Object.keys(arguments);
			return args && args.length === arguments.length;
		}(1, 2));
		if (!keysWorksWithArguments) {
			Object.keys = function keys(object) {
				if (isArgs(object)) {
					return originalKeys(slice.call(object));
				}
				return originalKeys(object);
			};
		}
	} else {
		Object.keys = keysShim;
	}
	return Object.keys || keysShim;
};
var objectKeys$2 = keysShim;

var objectKeys$1 = objectKeys$2;
var hasSymbols$2 = shams$1();
var callBound$8 = callBound$b;
var toObject = Object;
var $push = callBound$8('Array.prototype.push');
var $propIsEnumerable = callBound$8('Object.prototype.propertyIsEnumerable');
var originalGetSymbols = hasSymbols$2 ? Object.getOwnPropertySymbols : null;
var implementation$9 = function assign(target, source1) {
	if (target == null) { throw new TypeError('target must be an object'); }
	var to = toObject(target);
	if (arguments.length === 1) {
		return to;
	}
	for (var s = 1; s < arguments.length; ++s) {
		var from = toObject(arguments[s]);
		var keys = objectKeys$1(from);
		var getSymbols = hasSymbols$2 && (Object.getOwnPropertySymbols || originalGetSymbols);
		if (getSymbols) {
			var syms = getSymbols(from);
			for (var j = 0; j < syms.length; ++j) {
				var key = syms[j];
				if ($propIsEnumerable(from, key)) {
					$push(keys, key);
				}
			}
		}
		for (var i = 0; i < keys.length; ++i) {
			var nextKey = keys[i];
			if ($propIsEnumerable(from, nextKey)) {
				var propValue = from[nextKey];
				to[nextKey] = propValue;
			}
		}
	}
	return to;
};

var implementation$8 = implementation$9;
var lacksProperEnumerationOrder = function () {
	if (!Object.assign) {
		return false;
	}
	var str = 'abcdefghijklmnopqrst';
	var letters = str.split('');
	var map = {};
	for (var i = 0; i < letters.length; ++i) {
		map[letters[i]] = letters[i];
	}
	var obj = Object.assign({}, map);
	var actual = '';
	for (var k in obj) {
		actual += k;
	}
	return str !== actual;
};
var assignHasPendingExceptions = function () {
	if (!Object.assign || !Object.preventExtensions) {
		return false;
	}
	var thrower = Object.preventExtensions({ 1: 2 });
	try {
		Object.assign(thrower, 'xy');
	} catch (e) {
		return thrower[1] === 'y';
	}
	return false;
};
var polyfill$5 = function getPolyfill() {
	if (!Object.assign) {
		return implementation$8;
	}
	if (lacksProperEnumerationOrder()) {
		return implementation$8;
	}
	if (assignHasPendingExceptions()) {
		return implementation$8;
	}
	return Object.assign;
};

var numberIsNaN = function (value) {
	return value !== value;
};
var implementation$7 = function is(a, b) {
	if (a === 0 && b === 0) {
		return 1 / a === 1 / b;
	}
	if (a === b) {
		return true;
	}
	if (numberIsNaN(a) && numberIsNaN(b)) {
		return true;
	}
	return false;
};

var implementation$6 = implementation$7;
var polyfill$4 = function getPolyfill() {
	return typeof Object.is === 'function' ? Object.is : implementation$6;
};

var keys = objectKeys$2;
var hasSymbols$1 = typeof Symbol === 'function' && typeof Symbol('foo') === 'symbol';
var toStr$5 = Object.prototype.toString;
var concat = Array.prototype.concat;
var defineDataProperty = defineDataProperty$1;
var isFunction = function (fn) {
	return typeof fn === 'function' && toStr$5.call(fn) === '[object Function]';
};
var supportsDescriptors$2 = hasPropertyDescriptors_1();
var defineProperty$1 = function (object, name, value, predicate) {
	if (name in object) {
		if (predicate === true) {
			if (object[name] === value) {
				return;
			}
		} else if (!isFunction(predicate) || !predicate()) {
			return;
		}
	}
	if (supportsDescriptors$2) {
		defineDataProperty(object, name, value, true);
	} else {
		defineDataProperty(object, name, value);
	}
};
var defineProperties$1 = function (object, map) {
	var predicates = arguments.length > 2 ? arguments[2] : {};
	var props = keys(map);
	if (hasSymbols$1) {
		props = concat.call(props, Object.getOwnPropertySymbols(map));
	}
	for (var i = 0; i < props.length; i += 1) {
		defineProperty$1(object, props[i], map[props[i]], predicates[props[i]]);
	}
};
defineProperties$1.supportsDescriptors = !!supportsDescriptors$2;
var defineProperties_1 = defineProperties$1;

var getPolyfill$5 = polyfill$4;
var define$4 = defineProperties_1;
var shim$6 = function shimObjectIs() {
	var polyfill = getPolyfill$5();
	define$4(Object, { is: polyfill }, {
		is: function testObjectIs() {
			return Object.is !== polyfill;
		}
	});
	return polyfill;
};

var define$3 = defineProperties_1;
var callBind$3 = callBindExports;
var implementation$5 = implementation$7;
var getPolyfill$4 = polyfill$4;
var shim$5 = shim$6;
var polyfill$3 = callBind$3(getPolyfill$4(), Object);
define$3(polyfill$3, {
	getPolyfill: getPolyfill$4,
	implementation: implementation$5,
	shim: shim$5
});
var objectIs = polyfill$3;

var implementation$4;
var hasRequiredImplementation;

function requireImplementation () {
	if (hasRequiredImplementation) return implementation$4;
	hasRequiredImplementation = 1;
	implementation$4 = function isNaN(value) {
		return value !== value;
	};
	return implementation$4;
}

var polyfill$2;
var hasRequiredPolyfill;

function requirePolyfill () {
	if (hasRequiredPolyfill) return polyfill$2;
	hasRequiredPolyfill = 1;
	var implementation = requireImplementation();
	polyfill$2 = function getPolyfill() {
		if (Number.isNaN && Number.isNaN(NaN) && !Number.isNaN('a')) {
			return Number.isNaN;
		}
		return implementation;
	};
	return polyfill$2;
}

var shim$4;
var hasRequiredShim;

function requireShim () {
	if (hasRequiredShim) return shim$4;
	hasRequiredShim = 1;
	var define = defineProperties_1;
	var getPolyfill = requirePolyfill();
	shim$4 = function shimNumberIsNaN() {
		var polyfill = getPolyfill();
		define(Number, { isNaN: polyfill }, {
			isNaN: function testIsNaN() {
				return Number.isNaN !== polyfill;
			}
		});
		return polyfill;
	};
	return shim$4;
}

var isNan;
var hasRequiredIsNan;

function requireIsNan () {
	if (hasRequiredIsNan) return isNan;
	hasRequiredIsNan = 1;
	var callBind = callBindExports;
	var define = defineProperties_1;
	var implementation = requireImplementation();
	var getPolyfill = requirePolyfill();
	var shim = requireShim();
	var polyfill = callBind(getPolyfill(), Number);
	define(polyfill, {
		getPolyfill: getPolyfill,
		implementation: implementation,
		shim: shim
	});
	isNan = polyfill;
	return isNan;
}

var comparisons;
var hasRequiredComparisons;

function requireComparisons () {
	if (hasRequiredComparisons) return comparisons;
	hasRequiredComparisons = 1;
	function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
	function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
	function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
	function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
	function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
	function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
	function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
	var regexFlagsSupported = /a/g.flags !== undefined;
	var arrayFromSet = function arrayFromSet(set) {
	  var array = [];
	  set.forEach(function (value) {
	    return array.push(value);
	  });
	  return array;
	};
	var arrayFromMap = function arrayFromMap(map) {
	  var array = [];
	  map.forEach(function (value, key) {
	    return array.push([key, value]);
	  });
	  return array;
	};
	var objectIs$1 = Object.is ? Object.is : objectIs;
	var objectGetOwnPropertySymbols = Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols : function () {
	  return [];
	};
	var numberIsNaN = Number.isNaN ? Number.isNaN : requireIsNan();
	function uncurryThis(f) {
	  return f.call.bind(f);
	}
	var hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);
	var propertyIsEnumerable = uncurryThis(Object.prototype.propertyIsEnumerable);
	var objectToString = uncurryThis(Object.prototype.toString);
	var _require$types = util.types,
	  isAnyArrayBuffer = _require$types.isAnyArrayBuffer,
	  isArrayBufferView = _require$types.isArrayBufferView,
	  isDate = _require$types.isDate,
	  isMap = _require$types.isMap,
	  isRegExp = _require$types.isRegExp,
	  isSet = _require$types.isSet,
	  isNativeError = _require$types.isNativeError,
	  isBoxedPrimitive = _require$types.isBoxedPrimitive,
	  isNumberObject = _require$types.isNumberObject,
	  isStringObject = _require$types.isStringObject,
	  isBooleanObject = _require$types.isBooleanObject,
	  isBigIntObject = _require$types.isBigIntObject,
	  isSymbolObject = _require$types.isSymbolObject,
	  isFloat32Array = _require$types.isFloat32Array,
	  isFloat64Array = _require$types.isFloat64Array;
	function isNonIndex(key) {
	  if (key.length === 0 || key.length > 10) return true;
	  for (var i = 0; i < key.length; i++) {
	    var code = key.charCodeAt(i);
	    if (code < 48 || code > 57) return true;
	  }
	  return key.length === 10 && key >= Math.pow(2, 32);
	}
	function getOwnNonIndexProperties(value) {
	  return Object.keys(value).filter(isNonIndex).concat(objectGetOwnPropertySymbols(value).filter(Object.prototype.propertyIsEnumerable.bind(value)));
	}
	/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */
	function compare(a, b) {
	  if (a === b) {
	    return 0;
	  }
	  var x = a.length;
	  var y = b.length;
	  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
	    if (a[i] !== b[i]) {
	      x = a[i];
	      y = b[i];
	      break;
	    }
	  }
	  if (x < y) {
	    return -1;
	  }
	  if (y < x) {
	    return 1;
	  }
	  return 0;
	}
	var kStrict = true;
	var kLoose = false;
	var kNoIterator = 0;
	var kIsArray = 1;
	var kIsSet = 2;
	var kIsMap = 3;
	function areSimilarRegExps(a, b) {
	  return regexFlagsSupported ? a.source === b.source && a.flags === b.flags : RegExp.prototype.toString.call(a) === RegExp.prototype.toString.call(b);
	}
	function areSimilarFloatArrays(a, b) {
	  if (a.byteLength !== b.byteLength) {
	    return false;
	  }
	  for (var offset = 0; offset < a.byteLength; offset++) {
	    if (a[offset] !== b[offset]) {
	      return false;
	    }
	  }
	  return true;
	}
	function areSimilarTypedArrays(a, b) {
	  if (a.byteLength !== b.byteLength) {
	    return false;
	  }
	  return compare(new Uint8Array(a.buffer, a.byteOffset, a.byteLength), new Uint8Array(b.buffer, b.byteOffset, b.byteLength)) === 0;
	}
	function areEqualArrayBuffers(buf1, buf2) {
	  return buf1.byteLength === buf2.byteLength && compare(new Uint8Array(buf1), new Uint8Array(buf2)) === 0;
	}
	function isEqualBoxedPrimitive(val1, val2) {
	  if (isNumberObject(val1)) {
	    return isNumberObject(val2) && objectIs$1(Number.prototype.valueOf.call(val1), Number.prototype.valueOf.call(val2));
	  }
	  if (isStringObject(val1)) {
	    return isStringObject(val2) && String.prototype.valueOf.call(val1) === String.prototype.valueOf.call(val2);
	  }
	  if (isBooleanObject(val1)) {
	    return isBooleanObject(val2) && Boolean.prototype.valueOf.call(val1) === Boolean.prototype.valueOf.call(val2);
	  }
	  if (isBigIntObject(val1)) {
	    return isBigIntObject(val2) && BigInt.prototype.valueOf.call(val1) === BigInt.prototype.valueOf.call(val2);
	  }
	  return isSymbolObject(val2) && Symbol.prototype.valueOf.call(val1) === Symbol.prototype.valueOf.call(val2);
	}
	function innerDeepEqual(val1, val2, strict, memos) {
	  if (val1 === val2) {
	    if (val1 !== 0) return true;
	    return strict ? objectIs$1(val1, val2) : true;
	  }
	  if (strict) {
	    if (_typeof(val1) !== 'object') {
	      return typeof val1 === 'number' && numberIsNaN(val1) && numberIsNaN(val2);
	    }
	    if (_typeof(val2) !== 'object' || val1 === null || val2 === null) {
	      return false;
	    }
	    if (Object.getPrototypeOf(val1) !== Object.getPrototypeOf(val2)) {
	      return false;
	    }
	  } else {
	    if (val1 === null || _typeof(val1) !== 'object') {
	      if (val2 === null || _typeof(val2) !== 'object') {
	        return val1 == val2;
	      }
	      return false;
	    }
	    if (val2 === null || _typeof(val2) !== 'object') {
	      return false;
	    }
	  }
	  var val1Tag = objectToString(val1);
	  var val2Tag = objectToString(val2);
	  if (val1Tag !== val2Tag) {
	    return false;
	  }
	  if (Array.isArray(val1)) {
	    if (val1.length !== val2.length) {
	      return false;
	    }
	    var keys1 = getOwnNonIndexProperties(val1);
	    var keys2 = getOwnNonIndexProperties(val2);
	    if (keys1.length !== keys2.length) {
	      return false;
	    }
	    return keyCheck(val1, val2, strict, memos, kIsArray, keys1);
	  }
	  if (val1Tag === '[object Object]') {
	    if (!isMap(val1) && isMap(val2) || !isSet(val1) && isSet(val2)) {
	      return false;
	    }
	  }
	  if (isDate(val1)) {
	    if (!isDate(val2) || Date.prototype.getTime.call(val1) !== Date.prototype.getTime.call(val2)) {
	      return false;
	    }
	  } else if (isRegExp(val1)) {
	    if (!isRegExp(val2) || !areSimilarRegExps(val1, val2)) {
	      return false;
	    }
	  } else if (isNativeError(val1) || val1 instanceof Error) {
	    if (val1.message !== val2.message || val1.name !== val2.name) {
	      return false;
	    }
	  } else if (isArrayBufferView(val1)) {
	    if (!strict && (isFloat32Array(val1) || isFloat64Array(val1))) {
	      if (!areSimilarFloatArrays(val1, val2)) {
	        return false;
	      }
	    } else if (!areSimilarTypedArrays(val1, val2)) {
	      return false;
	    }
	    var _keys = getOwnNonIndexProperties(val1);
	    var _keys2 = getOwnNonIndexProperties(val2);
	    if (_keys.length !== _keys2.length) {
	      return false;
	    }
	    return keyCheck(val1, val2, strict, memos, kNoIterator, _keys);
	  } else if (isSet(val1)) {
	    if (!isSet(val2) || val1.size !== val2.size) {
	      return false;
	    }
	    return keyCheck(val1, val2, strict, memos, kIsSet);
	  } else if (isMap(val1)) {
	    if (!isMap(val2) || val1.size !== val2.size) {
	      return false;
	    }
	    return keyCheck(val1, val2, strict, memos, kIsMap);
	  } else if (isAnyArrayBuffer(val1)) {
	    if (!areEqualArrayBuffers(val1, val2)) {
	      return false;
	    }
	  } else if (isBoxedPrimitive(val1) && !isEqualBoxedPrimitive(val1, val2)) {
	    return false;
	  }
	  return keyCheck(val1, val2, strict, memos, kNoIterator);
	}
	function getEnumerables(val, keys) {
	  return keys.filter(function (k) {
	    return propertyIsEnumerable(val, k);
	  });
	}
	function keyCheck(val1, val2, strict, memos, iterationType, aKeys) {
	  if (arguments.length === 5) {
	    aKeys = Object.keys(val1);
	    var bKeys = Object.keys(val2);
	    if (aKeys.length !== bKeys.length) {
	      return false;
	    }
	  }
	  var i = 0;
	  for (; i < aKeys.length; i++) {
	    if (!hasOwnProperty(val2, aKeys[i])) {
	      return false;
	    }
	  }
	  if (strict && arguments.length === 5) {
	    var symbolKeysA = objectGetOwnPropertySymbols(val1);
	    if (symbolKeysA.length !== 0) {
	      var count = 0;
	      for (i = 0; i < symbolKeysA.length; i++) {
	        var key = symbolKeysA[i];
	        if (propertyIsEnumerable(val1, key)) {
	          if (!propertyIsEnumerable(val2, key)) {
	            return false;
	          }
	          aKeys.push(key);
	          count++;
	        } else if (propertyIsEnumerable(val2, key)) {
	          return false;
	        }
	      }
	      var symbolKeysB = objectGetOwnPropertySymbols(val2);
	      if (symbolKeysA.length !== symbolKeysB.length && getEnumerables(val2, symbolKeysB).length !== count) {
	        return false;
	      }
	    } else {
	      var _symbolKeysB = objectGetOwnPropertySymbols(val2);
	      if (_symbolKeysB.length !== 0 && getEnumerables(val2, _symbolKeysB).length !== 0) {
	        return false;
	      }
	    }
	  }
	  if (aKeys.length === 0 && (iterationType === kNoIterator || iterationType === kIsArray && val1.length === 0 || val1.size === 0)) {
	    return true;
	  }
	  if (memos === undefined) {
	    memos = {
	      val1: new Map(),
	      val2: new Map(),
	      position: 0
	    };
	  } else {
	    var val2MemoA = memos.val1.get(val1);
	    if (val2MemoA !== undefined) {
	      var val2MemoB = memos.val2.get(val2);
	      if (val2MemoB !== undefined) {
	        return val2MemoA === val2MemoB;
	      }
	    }
	    memos.position++;
	  }
	  memos.val1.set(val1, memos.position);
	  memos.val2.set(val2, memos.position);
	  var areEq = objEquiv(val1, val2, strict, aKeys, memos, iterationType);
	  memos.val1.delete(val1);
	  memos.val2.delete(val2);
	  return areEq;
	}
	function setHasEqualElement(set, val1, strict, memo) {
	  var setValues = arrayFromSet(set);
	  for (var i = 0; i < setValues.length; i++) {
	    var val2 = setValues[i];
	    if (innerDeepEqual(val1, val2, strict, memo)) {
	      set.delete(val2);
	      return true;
	    }
	  }
	  return false;
	}
	function findLooseMatchingPrimitives(prim) {
	  switch (_typeof(prim)) {
	    case 'undefined':
	      return null;
	    case 'object':
	      return undefined;
	    case 'symbol':
	      return false;
	    case 'string':
	      prim = +prim;
	    case 'number':
	      if (numberIsNaN(prim)) {
	        return false;
	      }
	  }
	  return true;
	}
	function setMightHaveLoosePrim(a, b, prim) {
	  var altValue = findLooseMatchingPrimitives(prim);
	  if (altValue != null) return altValue;
	  return b.has(altValue) && !a.has(altValue);
	}
	function mapMightHaveLoosePrim(a, b, prim, item, memo) {
	  var altValue = findLooseMatchingPrimitives(prim);
	  if (altValue != null) {
	    return altValue;
	  }
	  var curB = b.get(altValue);
	  if (curB === undefined && !b.has(altValue) || !innerDeepEqual(item, curB, false, memo)) {
	    return false;
	  }
	  return !a.has(altValue) && innerDeepEqual(item, curB, false, memo);
	}
	function setEquiv(a, b, strict, memo) {
	  var set = null;
	  var aValues = arrayFromSet(a);
	  for (var i = 0; i < aValues.length; i++) {
	    var val = aValues[i];
	    if (_typeof(val) === 'object' && val !== null) {
	      if (set === null) {
	        set = new Set();
	      }
	      set.add(val);
	    } else if (!b.has(val)) {
	      if (strict) return false;
	      if (!setMightHaveLoosePrim(a, b, val)) {
	        return false;
	      }
	      if (set === null) {
	        set = new Set();
	      }
	      set.add(val);
	    }
	  }
	  if (set !== null) {
	    var bValues = arrayFromSet(b);
	    for (var _i = 0; _i < bValues.length; _i++) {
	      var _val = bValues[_i];
	      if (_typeof(_val) === 'object' && _val !== null) {
	        if (!setHasEqualElement(set, _val, strict, memo)) return false;
	      } else if (!strict && !a.has(_val) && !setHasEqualElement(set, _val, strict, memo)) {
	        return false;
	      }
	    }
	    return set.size === 0;
	  }
	  return true;
	}
	function mapHasEqualEntry(set, map, key1, item1, strict, memo) {
	  var setValues = arrayFromSet(set);
	  for (var i = 0; i < setValues.length; i++) {
	    var key2 = setValues[i];
	    if (innerDeepEqual(key1, key2, strict, memo) && innerDeepEqual(item1, map.get(key2), strict, memo)) {
	      set.delete(key2);
	      return true;
	    }
	  }
	  return false;
	}
	function mapEquiv(a, b, strict, memo) {
	  var set = null;
	  var aEntries = arrayFromMap(a);
	  for (var i = 0; i < aEntries.length; i++) {
	    var _aEntries$i = _slicedToArray(aEntries[i], 2),
	      key = _aEntries$i[0],
	      item1 = _aEntries$i[1];
	    if (_typeof(key) === 'object' && key !== null) {
	      if (set === null) {
	        set = new Set();
	      }
	      set.add(key);
	    } else {
	      var item2 = b.get(key);
	      if (item2 === undefined && !b.has(key) || !innerDeepEqual(item1, item2, strict, memo)) {
	        if (strict) return false;
	        if (!mapMightHaveLoosePrim(a, b, key, item1, memo)) return false;
	        if (set === null) {
	          set = new Set();
	        }
	        set.add(key);
	      }
	    }
	  }
	  if (set !== null) {
	    var bEntries = arrayFromMap(b);
	    for (var _i2 = 0; _i2 < bEntries.length; _i2++) {
	      var _bEntries$_i = _slicedToArray(bEntries[_i2], 2),
	        _key = _bEntries$_i[0],
	        item = _bEntries$_i[1];
	      if (_typeof(_key) === 'object' && _key !== null) {
	        if (!mapHasEqualEntry(set, a, _key, item, strict, memo)) return false;
	      } else if (!strict && (!a.has(_key) || !innerDeepEqual(a.get(_key), item, false, memo)) && !mapHasEqualEntry(set, a, _key, item, false, memo)) {
	        return false;
	      }
	    }
	    return set.size === 0;
	  }
	  return true;
	}
	function objEquiv(a, b, strict, keys, memos, iterationType) {
	  var i = 0;
	  if (iterationType === kIsSet) {
	    if (!setEquiv(a, b, strict, memos)) {
	      return false;
	    }
	  } else if (iterationType === kIsMap) {
	    if (!mapEquiv(a, b, strict, memos)) {
	      return false;
	    }
	  } else if (iterationType === kIsArray) {
	    for (; i < a.length; i++) {
	      if (hasOwnProperty(a, i)) {
	        if (!hasOwnProperty(b, i) || !innerDeepEqual(a[i], b[i], strict, memos)) {
	          return false;
	        }
	      } else if (hasOwnProperty(b, i)) {
	        return false;
	      } else {
	        var keysA = Object.keys(a);
	        for (; i < keysA.length; i++) {
	          var key = keysA[i];
	          if (!hasOwnProperty(b, key) || !innerDeepEqual(a[key], b[key], strict, memos)) {
	            return false;
	          }
	        }
	        if (keysA.length !== Object.keys(b).length) {
	          return false;
	        }
	        return true;
	      }
	    }
	  }
	  for (i = 0; i < keys.length; i++) {
	    var _key2 = keys[i];
	    if (!innerDeepEqual(a[_key2], b[_key2], strict, memos)) {
	      return false;
	    }
	  }
	  return true;
	}
	function isDeepEqual(val1, val2) {
	  return innerDeepEqual(val1, val2, kLoose);
	}
	function isDeepStrictEqual(val1, val2) {
	  return innerDeepEqual(val1, val2, kStrict);
	}
	comparisons = {
	  isDeepEqual: isDeepEqual,
	  isDeepStrictEqual: isDeepStrictEqual
	};
	return comparisons;
}

var hasRequiredAssert;

function requireAssert () {
	if (hasRequiredAssert) return assert.exports;
	hasRequiredAssert = 1;
	function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
	function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
	function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
	function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
	function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	var _require = requireErrors(),
	  _require$codes = _require.codes,
	  ERR_AMBIGUOUS_ARGUMENT = _require$codes.ERR_AMBIGUOUS_ARGUMENT,
	  ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
	  ERR_INVALID_ARG_VALUE = _require$codes.ERR_INVALID_ARG_VALUE,
	  ERR_INVALID_RETURN_VALUE = _require$codes.ERR_INVALID_RETURN_VALUE,
	  ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS;
	var AssertionError = requireAssertion_error();
	var _require2 = util,
	  inspect = _require2.inspect;
	var _require$types = util.types,
	  isPromise = _require$types.isPromise,
	  isRegExp = _require$types.isRegExp;
	var objectAssign = polyfill$5();
	var objectIs = polyfill$4();
	var RegExpPrototypeTest = callBound$b('RegExp.prototype.test');
	var isDeepEqual;
	var isDeepStrictEqual;
	function lazyLoadComparison() {
	  var comparison = requireComparisons();
	  isDeepEqual = comparison.isDeepEqual;
	  isDeepStrictEqual = comparison.isDeepStrictEqual;
	}
	var warned = false;
	var assert$1 = assert.exports = ok;
	var NO_EXCEPTION_SENTINEL = {};
	function innerFail(obj) {
	  if (obj.message instanceof Error) throw obj.message;
	  throw new AssertionError(obj);
	}
	function fail(actual, expected, message, operator, stackStartFn) {
	  var argsLen = arguments.length;
	  var internalMessage;
	  if (argsLen === 0) {
	    internalMessage = 'Failed';
	  } else if (argsLen === 1) {
	    message = actual;
	    actual = undefined;
	  } else {
	    if (warned === false) {
	      warned = true;
	      var warn = process$1.emitWarning ? process$1.emitWarning : console.warn.bind(console);
	      warn('assert.fail() with more than one argument is deprecated. ' + 'Please use assert.strictEqual() instead or only pass a message.', 'DeprecationWarning', 'DEP0094');
	    }
	    if (argsLen === 2) operator = '!=';
	  }
	  if (message instanceof Error) throw message;
	  var errArgs = {
	    actual: actual,
	    expected: expected,
	    operator: operator === undefined ? 'fail' : operator,
	    stackStartFn: stackStartFn || fail
	  };
	  if (message !== undefined) {
	    errArgs.message = message;
	  }
	  var err = new AssertionError(errArgs);
	  if (internalMessage) {
	    err.message = internalMessage;
	    err.generatedMessage = true;
	  }
	  throw err;
	}
	assert$1.fail = fail;
	assert$1.AssertionError = AssertionError;
	function innerOk(fn, argLen, value, message) {
	  if (!value) {
	    var generatedMessage = false;
	    if (argLen === 0) {
	      generatedMessage = true;
	      message = 'No value argument passed to `assert.ok()`';
	    } else if (message instanceof Error) {
	      throw message;
	    }
	    var err = new AssertionError({
	      actual: value,
	      expected: true,
	      message: message,
	      operator: '==',
	      stackStartFn: fn
	    });
	    err.generatedMessage = generatedMessage;
	    throw err;
	  }
	}
	function ok() {
	  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	    args[_key] = arguments[_key];
	  }
	  innerOk.apply(void 0, [ok, args.length].concat(args));
	}
	assert$1.ok = ok;
	assert$1.equal = function equal(actual, expected, message) {
	  if (arguments.length < 2) {
	    throw new ERR_MISSING_ARGS('actual', 'expected');
	  }
	  if (actual != expected) {
	    innerFail({
	      actual: actual,
	      expected: expected,
	      message: message,
	      operator: '==',
	      stackStartFn: equal
	    });
	  }
	};
	assert$1.notEqual = function notEqual(actual, expected, message) {
	  if (arguments.length < 2) {
	    throw new ERR_MISSING_ARGS('actual', 'expected');
	  }
	  if (actual == expected) {
	    innerFail({
	      actual: actual,
	      expected: expected,
	      message: message,
	      operator: '!=',
	      stackStartFn: notEqual
	    });
	  }
	};
	assert$1.deepEqual = function deepEqual(actual, expected, message) {
	  if (arguments.length < 2) {
	    throw new ERR_MISSING_ARGS('actual', 'expected');
	  }
	  if (isDeepEqual === undefined) lazyLoadComparison();
	  if (!isDeepEqual(actual, expected)) {
	    innerFail({
	      actual: actual,
	      expected: expected,
	      message: message,
	      operator: 'deepEqual',
	      stackStartFn: deepEqual
	    });
	  }
	};
	assert$1.notDeepEqual = function notDeepEqual(actual, expected, message) {
	  if (arguments.length < 2) {
	    throw new ERR_MISSING_ARGS('actual', 'expected');
	  }
	  if (isDeepEqual === undefined) lazyLoadComparison();
	  if (isDeepEqual(actual, expected)) {
	    innerFail({
	      actual: actual,
	      expected: expected,
	      message: message,
	      operator: 'notDeepEqual',
	      stackStartFn: notDeepEqual
	    });
	  }
	};
	assert$1.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
	  if (arguments.length < 2) {
	    throw new ERR_MISSING_ARGS('actual', 'expected');
	  }
	  if (isDeepEqual === undefined) lazyLoadComparison();
	  if (!isDeepStrictEqual(actual, expected)) {
	    innerFail({
	      actual: actual,
	      expected: expected,
	      message: message,
	      operator: 'deepStrictEqual',
	      stackStartFn: deepStrictEqual
	    });
	  }
	};
	assert$1.notDeepStrictEqual = notDeepStrictEqual;
	function notDeepStrictEqual(actual, expected, message) {
	  if (arguments.length < 2) {
	    throw new ERR_MISSING_ARGS('actual', 'expected');
	  }
	  if (isDeepEqual === undefined) lazyLoadComparison();
	  if (isDeepStrictEqual(actual, expected)) {
	    innerFail({
	      actual: actual,
	      expected: expected,
	      message: message,
	      operator: 'notDeepStrictEqual',
	      stackStartFn: notDeepStrictEqual
	    });
	  }
	}
	assert$1.strictEqual = function strictEqual(actual, expected, message) {
	  if (arguments.length < 2) {
	    throw new ERR_MISSING_ARGS('actual', 'expected');
	  }
	  if (!objectIs(actual, expected)) {
	    innerFail({
	      actual: actual,
	      expected: expected,
	      message: message,
	      operator: 'strictEqual',
	      stackStartFn: strictEqual
	    });
	  }
	};
	assert$1.notStrictEqual = function notStrictEqual(actual, expected, message) {
	  if (arguments.length < 2) {
	    throw new ERR_MISSING_ARGS('actual', 'expected');
	  }
	  if (objectIs(actual, expected)) {
	    innerFail({
	      actual: actual,
	      expected: expected,
	      message: message,
	      operator: 'notStrictEqual',
	      stackStartFn: notStrictEqual
	    });
	  }
	};
	var Comparison = _createClass(function Comparison(obj, keys, actual) {
	  var _this = this;
	  _classCallCheck(this, Comparison);
	  keys.forEach(function (key) {
	    if (key in obj) {
	      if (actual !== undefined && typeof actual[key] === 'string' && isRegExp(obj[key]) && RegExpPrototypeTest(obj[key], actual[key])) {
	        _this[key] = actual[key];
	      } else {
	        _this[key] = obj[key];
	      }
	    }
	  });
	});
	function compareExceptionKey(actual, expected, key, message, keys, fn) {
	  if (!(key in actual) || !isDeepStrictEqual(actual[key], expected[key])) {
	    if (!message) {
	      var a = new Comparison(actual, keys);
	      var b = new Comparison(expected, keys, actual);
	      var err = new AssertionError({
	        actual: a,
	        expected: b,
	        operator: 'deepStrictEqual',
	        stackStartFn: fn
	      });
	      err.actual = actual;
	      err.expected = expected;
	      err.operator = fn.name;
	      throw err;
	    }
	    innerFail({
	      actual: actual,
	      expected: expected,
	      message: message,
	      operator: fn.name,
	      stackStartFn: fn
	    });
	  }
	}
	function expectedException(actual, expected, msg, fn) {
	  if (typeof expected !== 'function') {
	    if (isRegExp(expected)) return RegExpPrototypeTest(expected, actual);
	    if (arguments.length === 2) {
	      throw new ERR_INVALID_ARG_TYPE('expected', ['Function', 'RegExp'], expected);
	    }
	    if (_typeof(actual) !== 'object' || actual === null) {
	      var err = new AssertionError({
	        actual: actual,
	        expected: expected,
	        message: msg,
	        operator: 'deepStrictEqual',
	        stackStartFn: fn
	      });
	      err.operator = fn.name;
	      throw err;
	    }
	    var keys = Object.keys(expected);
	    if (expected instanceof Error) {
	      keys.push('name', 'message');
	    } else if (keys.length === 0) {
	      throw new ERR_INVALID_ARG_VALUE('error', expected, 'may not be an empty object');
	    }
	    if (isDeepEqual === undefined) lazyLoadComparison();
	    keys.forEach(function (key) {
	      if (typeof actual[key] === 'string' && isRegExp(expected[key]) && RegExpPrototypeTest(expected[key], actual[key])) {
	        return;
	      }
	      compareExceptionKey(actual, expected, key, msg, keys, fn);
	    });
	    return true;
	  }
	  if (expected.prototype !== undefined && actual instanceof expected) {
	    return true;
	  }
	  if (Error.isPrototypeOf(expected)) {
	    return false;
	  }
	  return expected.call({}, actual) === true;
	}
	function getActual(fn) {
	  if (typeof fn !== 'function') {
	    throw new ERR_INVALID_ARG_TYPE('fn', 'Function', fn);
	  }
	  try {
	    fn();
	  } catch (e) {
	    return e;
	  }
	  return NO_EXCEPTION_SENTINEL;
	}
	function checkIsPromise(obj) {
	  return isPromise(obj) || obj !== null && _typeof(obj) === 'object' && typeof obj.then === 'function' && typeof obj.catch === 'function';
	}
	function waitForActual(promiseFn) {
	  return Promise.resolve().then(function () {
	    var resultPromise;
	    if (typeof promiseFn === 'function') {
	      resultPromise = promiseFn();
	      if (!checkIsPromise(resultPromise)) {
	        throw new ERR_INVALID_RETURN_VALUE('instance of Promise', 'promiseFn', resultPromise);
	      }
	    } else if (checkIsPromise(promiseFn)) {
	      resultPromise = promiseFn;
	    } else {
	      throw new ERR_INVALID_ARG_TYPE('promiseFn', ['Function', 'Promise'], promiseFn);
	    }
	    return Promise.resolve().then(function () {
	      return resultPromise;
	    }).then(function () {
	      return NO_EXCEPTION_SENTINEL;
	    }).catch(function (e) {
	      return e;
	    });
	  });
	}
	function expectsError(stackStartFn, actual, error, message) {
	  if (typeof error === 'string') {
	    if (arguments.length === 4) {
	      throw new ERR_INVALID_ARG_TYPE('error', ['Object', 'Error', 'Function', 'RegExp'], error);
	    }
	    if (_typeof(actual) === 'object' && actual !== null) {
	      if (actual.message === error) {
	        throw new ERR_AMBIGUOUS_ARGUMENT('error/message', "The error message \"".concat(actual.message, "\" is identical to the message."));
	      }
	    } else if (actual === error) {
	      throw new ERR_AMBIGUOUS_ARGUMENT('error/message', "The error \"".concat(actual, "\" is identical to the message."));
	    }
	    message = error;
	    error = undefined;
	  } else if (error != null && _typeof(error) !== 'object' && typeof error !== 'function') {
	    throw new ERR_INVALID_ARG_TYPE('error', ['Object', 'Error', 'Function', 'RegExp'], error);
	  }
	  if (actual === NO_EXCEPTION_SENTINEL) {
	    var details = '';
	    if (error && error.name) {
	      details += " (".concat(error.name, ")");
	    }
	    details += message ? ": ".concat(message) : '.';
	    var fnType = stackStartFn.name === 'rejects' ? 'rejection' : 'exception';
	    innerFail({
	      actual: undefined,
	      expected: error,
	      operator: stackStartFn.name,
	      message: "Missing expected ".concat(fnType).concat(details),
	      stackStartFn: stackStartFn
	    });
	  }
	  if (error && !expectedException(actual, error, message, stackStartFn)) {
	    throw actual;
	  }
	}
	function expectsNoError(stackStartFn, actual, error, message) {
	  if (actual === NO_EXCEPTION_SENTINEL) return;
	  if (typeof error === 'string') {
	    message = error;
	    error = undefined;
	  }
	  if (!error || expectedException(actual, error)) {
	    var details = message ? ": ".concat(message) : '.';
	    var fnType = stackStartFn.name === 'doesNotReject' ? 'rejection' : 'exception';
	    innerFail({
	      actual: actual,
	      expected: error,
	      operator: stackStartFn.name,
	      message: "Got unwanted ".concat(fnType).concat(details, "\n") + "Actual message: \"".concat(actual && actual.message, "\""),
	      stackStartFn: stackStartFn
	    });
	  }
	  throw actual;
	}
	assert$1.throws = function throws(promiseFn) {
	  for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
	    args[_key2 - 1] = arguments[_key2];
	  }
	  expectsError.apply(void 0, [throws, getActual(promiseFn)].concat(args));
	};
	assert$1.rejects = function rejects(promiseFn) {
	  for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
	    args[_key3 - 1] = arguments[_key3];
	  }
	  return waitForActual(promiseFn).then(function (result) {
	    return expectsError.apply(void 0, [rejects, result].concat(args));
	  });
	};
	assert$1.doesNotThrow = function doesNotThrow(fn) {
	  for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
	    args[_key4 - 1] = arguments[_key4];
	  }
	  expectsNoError.apply(void 0, [doesNotThrow, getActual(fn)].concat(args));
	};
	assert$1.doesNotReject = function doesNotReject(fn) {
	  for (var _len5 = arguments.length, args = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
	    args[_key5 - 1] = arguments[_key5];
	  }
	  return waitForActual(fn).then(function (result) {
	    return expectsNoError.apply(void 0, [doesNotReject, result].concat(args));
	  });
	};
	assert$1.ifError = function ifError(err) {
	  if (err !== null && err !== undefined) {
	    var message = 'ifError got unwanted exception: ';
	    if (_typeof(err) === 'object' && typeof err.message === 'string') {
	      if (err.message.length === 0 && err.constructor) {
	        message += err.constructor.name;
	      } else {
	        message += err.message;
	      }
	    } else {
	      message += inspect(err);
	    }
	    var newErr = new AssertionError({
	      actual: err,
	      expected: null,
	      operator: 'ifError',
	      message: message,
	      stackStartFn: ifError
	    });
	    var origStack = err.stack;
	    if (typeof origStack === 'string') {
	      var tmp2 = origStack.split('\n');
	      tmp2.shift();
	      var tmp1 = newErr.stack.split('\n');
	      for (var i = 0; i < tmp2.length; i++) {
	        var pos = tmp1.indexOf(tmp2[i]);
	        if (pos !== -1) {
	          tmp1 = tmp1.slice(0, pos);
	          break;
	        }
	      }
	      newErr.stack = "".concat(tmp1.join('\n'), "\n").concat(tmp2.join('\n'));
	    }
	    throw newErr;
	  }
	};
	function internalMatch(string, regexp, message, fn, fnName) {
	  if (!isRegExp(regexp)) {
	    throw new ERR_INVALID_ARG_TYPE('regexp', 'RegExp', regexp);
	  }
	  var match = fnName === 'match';
	  if (typeof string !== 'string' || RegExpPrototypeTest(regexp, string) !== match) {
	    if (message instanceof Error) {
	      throw message;
	    }
	    var generatedMessage = !message;
	    message = message || (typeof string !== 'string' ? 'The "string" argument must be of type string. Received type ' + "".concat(_typeof(string), " (").concat(inspect(string), ")") : (match ? 'The input did not match the regular expression ' : 'The input was expected to not match the regular expression ') + "".concat(inspect(regexp), ". Input:\n\n").concat(inspect(string), "\n"));
	    var err = new AssertionError({
	      actual: string,
	      expected: regexp,
	      message: message,
	      operator: fnName,
	      stackStartFn: fn
	    });
	    err.generatedMessage = generatedMessage;
	    throw err;
	  }
	}
	assert$1.match = function match(string, regexp, message) {
	  internalMatch(string, regexp, message, match, 'match');
	};
	assert$1.doesNotMatch = function doesNotMatch(string, regexp, message) {
	  internalMatch(string, regexp, message, doesNotMatch, 'doesNotMatch');
	};
	function strict() {
	  for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
	    args[_key6] = arguments[_key6];
	  }
	  innerOk.apply(void 0, [strict, args.length].concat(args));
	}
	assert$1.strict = objectAssign(strict, assert$1, {
	  equal: assert$1.strictEqual,
	  deepEqual: assert$1.deepStrictEqual,
	  notEqual: assert$1.notStrictEqual,
	  notDeepEqual: assert$1.notDeepStrictEqual
	});
	assert$1.strict.strict = assert$1.strict;
	return assert.exports;
}

function ZStream() {
  this.input = null;
  this.next_in = 0;
  this.avail_in = 0;
  this.total_in = 0;
  this.output = null;
  this.next_out = 0;
  this.avail_out = 0;
  this.total_out = 0;
  this.msg = '';
  this.state = null;
  this.data_type = 2;
  this.adler = 0;
}
var zstream = ZStream;

var deflate$1 = {};

var common = {};

(function (exports) {
	var TYPED_OK =  (typeof Uint8Array !== 'undefined') &&
	                (typeof Uint16Array !== 'undefined') &&
	                (typeof Int32Array !== 'undefined');
	function _has(obj, key) {
	  return Object.prototype.hasOwnProperty.call(obj, key);
	}
	exports.assign = function (obj ) {
	  var sources = Array.prototype.slice.call(arguments, 1);
	  while (sources.length) {
	    var source = sources.shift();
	    if (!source) { continue; }
	    if (typeof source !== 'object') {
	      throw new TypeError(source + 'must be non-object');
	    }
	    for (var p in source) {
	      if (_has(source, p)) {
	        obj[p] = source[p];
	      }
	    }
	  }
	  return obj;
	};
	exports.shrinkBuf = function (buf, size) {
	  if (buf.length === size) { return buf; }
	  if (buf.subarray) { return buf.subarray(0, size); }
	  buf.length = size;
	  return buf;
	};
	var fnTyped = {
	  arraySet: function (dest, src, src_offs, len, dest_offs) {
	    if (src.subarray && dest.subarray) {
	      dest.set(src.subarray(src_offs, src_offs + len), dest_offs);
	      return;
	    }
	    for (var i = 0; i < len; i++) {
	      dest[dest_offs + i] = src[src_offs + i];
	    }
	  },
	  flattenChunks: function (chunks) {
	    var i, l, len, pos, chunk, result;
	    len = 0;
	    for (i = 0, l = chunks.length; i < l; i++) {
	      len += chunks[i].length;
	    }
	    result = new Uint8Array(len);
	    pos = 0;
	    for (i = 0, l = chunks.length; i < l; i++) {
	      chunk = chunks[i];
	      result.set(chunk, pos);
	      pos += chunk.length;
	    }
	    return result;
	  }
	};
	var fnUntyped = {
	  arraySet: function (dest, src, src_offs, len, dest_offs) {
	    for (var i = 0; i < len; i++) {
	      dest[dest_offs + i] = src[src_offs + i];
	    }
	  },
	  flattenChunks: function (chunks) {
	    return [].concat.apply([], chunks);
	  }
	};
	exports.setTyped = function (on) {
	  if (on) {
	    exports.Buf8  = Uint8Array;
	    exports.Buf16 = Uint16Array;
	    exports.Buf32 = Int32Array;
	    exports.assign(exports, fnTyped);
	  } else {
	    exports.Buf8  = Array;
	    exports.Buf16 = Array;
	    exports.Buf32 = Array;
	    exports.assign(exports, fnUntyped);
	  }
	};
	exports.setTyped(TYPED_OK); 
} (common));

var trees$1 = {};

var utils$b = common;
var Z_FIXED$1               = 4;
var Z_BINARY              = 0;
var Z_TEXT                = 1;
var Z_UNKNOWN$1             = 2;
function zero$1(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }
var STORED_BLOCK = 0;
var STATIC_TREES = 1;
var DYN_TREES    = 2;
var MIN_MATCH$1    = 3;
var MAX_MATCH$1    = 258;
var LENGTH_CODES$1  = 29;
var LITERALS$1      = 256;
var L_CODES$1       = LITERALS$1 + 1 + LENGTH_CODES$1;
var D_CODES$1       = 30;
var BL_CODES$1      = 19;
var HEAP_SIZE$1     = 2 * L_CODES$1 + 1;
var MAX_BITS$1      = 15;
var Buf_size      = 16;
var MAX_BL_BITS = 7;
var END_BLOCK   = 256;
var REP_3_6     = 16;
var REPZ_3_10   = 17;
var REPZ_11_138 = 18;
var extra_lbits =
  [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0];
var extra_dbits =
  [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];
var extra_blbits =
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7];
var bl_order =
  [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
var DIST_CODE_LEN = 512;
var static_ltree  = new Array((L_CODES$1 + 2) * 2);
zero$1(static_ltree);
var static_dtree  = new Array(D_CODES$1 * 2);
zero$1(static_dtree);
var _dist_code    = new Array(DIST_CODE_LEN);
zero$1(_dist_code);
var _length_code  = new Array(MAX_MATCH$1 - MIN_MATCH$1 + 1);
zero$1(_length_code);
var base_length   = new Array(LENGTH_CODES$1);
zero$1(base_length);
var base_dist     = new Array(D_CODES$1);
zero$1(base_dist);
function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {
  this.static_tree  = static_tree;
  this.extra_bits   = extra_bits;
  this.extra_base   = extra_base;
  this.elems        = elems;
  this.max_length   = max_length;
  this.has_stree    = static_tree && static_tree.length;
}
var static_l_desc;
var static_d_desc;
var static_bl_desc;
function TreeDesc(dyn_tree, stat_desc) {
  this.dyn_tree = dyn_tree;
  this.max_code = 0;
  this.stat_desc = stat_desc;
}
function d_code(dist) {
  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
}
function put_short(s, w) {
  s.pending_buf[s.pending++] = (w) & 0xff;
  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;
}
function send_bits(s, value, length) {
  if (s.bi_valid > (Buf_size - length)) {
    s.bi_buf |= (value << s.bi_valid) & 0xffff;
    put_short(s, s.bi_buf);
    s.bi_buf = value >> (Buf_size - s.bi_valid);
    s.bi_valid += length - Buf_size;
  } else {
    s.bi_buf |= (value << s.bi_valid) & 0xffff;
    s.bi_valid += length;
  }
}
function send_code(s, c, tree) {
  send_bits(s, tree[c * 2], tree[c * 2 + 1]);
}
function bi_reverse(code, len) {
  var res = 0;
  do {
    res |= code & 1;
    code >>>= 1;
    res <<= 1;
  } while (--len > 0);
  return res >>> 1;
}
function bi_flush(s) {
  if (s.bi_valid === 16) {
    put_short(s, s.bi_buf);
    s.bi_buf = 0;
    s.bi_valid = 0;
  } else if (s.bi_valid >= 8) {
    s.pending_buf[s.pending++] = s.bi_buf & 0xff;
    s.bi_buf >>= 8;
    s.bi_valid -= 8;
  }
}
function gen_bitlen(s, desc)
{
  var tree            = desc.dyn_tree;
  var max_code        = desc.max_code;
  var stree           = desc.stat_desc.static_tree;
  var has_stree       = desc.stat_desc.has_stree;
  var extra           = desc.stat_desc.extra_bits;
  var base            = desc.stat_desc.extra_base;
  var max_length      = desc.stat_desc.max_length;
  var h;
  var n, m;
  var bits;
  var xbits;
  var f;
  var overflow = 0;
  for (bits = 0; bits <= MAX_BITS$1; bits++) {
    s.bl_count[bits] = 0;
  }
  tree[s.heap[s.heap_max] * 2 + 1] = 0;
  for (h = s.heap_max + 1; h < HEAP_SIZE$1; h++) {
    n = s.heap[h];
    bits = tree[tree[n * 2 + 1] * 2 + 1] + 1;
    if (bits > max_length) {
      bits = max_length;
      overflow++;
    }
    tree[n * 2 + 1] = bits;
    if (n > max_code) { continue; }
    s.bl_count[bits]++;
    xbits = 0;
    if (n >= base) {
      xbits = extra[n - base];
    }
    f = tree[n * 2];
    s.opt_len += f * (bits + xbits);
    if (has_stree) {
      s.static_len += f * (stree[n * 2 + 1] + xbits);
    }
  }
  if (overflow === 0) { return; }
  do {
    bits = max_length - 1;
    while (s.bl_count[bits] === 0) { bits--; }
    s.bl_count[bits]--;
    s.bl_count[bits + 1] += 2;
    s.bl_count[max_length]--;
    overflow -= 2;
  } while (overflow > 0);
  for (bits = max_length; bits !== 0; bits--) {
    n = s.bl_count[bits];
    while (n !== 0) {
      m = s.heap[--h];
      if (m > max_code) { continue; }
      if (tree[m * 2 + 1] !== bits) {
        s.opt_len += (bits - tree[m * 2 + 1]) * tree[m * 2];
        tree[m * 2 + 1] = bits;
      }
      n--;
    }
  }
}
function gen_codes(tree, max_code, bl_count)
{
  var next_code = new Array(MAX_BITS$1 + 1);
  var code = 0;
  var bits;
  var n;
  for (bits = 1; bits <= MAX_BITS$1; bits++) {
    next_code[bits] = code = (code + bl_count[bits - 1]) << 1;
  }
  for (n = 0;  n <= max_code; n++) {
    var len = tree[n * 2 + 1];
    if (len === 0) { continue; }
    tree[n * 2] = bi_reverse(next_code[len]++, len);
  }
}
function tr_static_init() {
  var n;
  var bits;
  var length;
  var code;
  var dist;
  var bl_count = new Array(MAX_BITS$1 + 1);
  length = 0;
  for (code = 0; code < LENGTH_CODES$1 - 1; code++) {
    base_length[code] = length;
    for (n = 0; n < (1 << extra_lbits[code]); n++) {
      _length_code[length++] = code;
    }
  }
  _length_code[length - 1] = code;
  dist = 0;
  for (code = 0; code < 16; code++) {
    base_dist[code] = dist;
    for (n = 0; n < (1 << extra_dbits[code]); n++) {
      _dist_code[dist++] = code;
    }
  }
  dist >>= 7;
  for (; code < D_CODES$1; code++) {
    base_dist[code] = dist << 7;
    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {
      _dist_code[256 + dist++] = code;
    }
  }
  for (bits = 0; bits <= MAX_BITS$1; bits++) {
    bl_count[bits] = 0;
  }
  n = 0;
  while (n <= 143) {
    static_ltree[n * 2 + 1] = 8;
    n++;
    bl_count[8]++;
  }
  while (n <= 255) {
    static_ltree[n * 2 + 1] = 9;
    n++;
    bl_count[9]++;
  }
  while (n <= 279) {
    static_ltree[n * 2 + 1] = 7;
    n++;
    bl_count[7]++;
  }
  while (n <= 287) {
    static_ltree[n * 2 + 1] = 8;
    n++;
    bl_count[8]++;
  }
  gen_codes(static_ltree, L_CODES$1 + 1, bl_count);
  for (n = 0; n < D_CODES$1; n++) {
    static_dtree[n * 2 + 1] = 5;
    static_dtree[n * 2] = bi_reverse(n, 5);
  }
  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS$1 + 1, L_CODES$1, MAX_BITS$1);
  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES$1, MAX_BITS$1);
  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES$1, MAX_BL_BITS);
}
function init_block(s) {
  var n;
  for (n = 0; n < L_CODES$1;  n++) { s.dyn_ltree[n * 2] = 0; }
  for (n = 0; n < D_CODES$1;  n++) { s.dyn_dtree[n * 2] = 0; }
  for (n = 0; n < BL_CODES$1; n++) { s.bl_tree[n * 2] = 0; }
  s.dyn_ltree[END_BLOCK * 2] = 1;
  s.opt_len = s.static_len = 0;
  s.last_lit = s.matches = 0;
}
function bi_windup(s)
{
  if (s.bi_valid > 8) {
    put_short(s, s.bi_buf);
  } else if (s.bi_valid > 0) {
    s.pending_buf[s.pending++] = s.bi_buf;
  }
  s.bi_buf = 0;
  s.bi_valid = 0;
}
function copy_block(s, buf, len, header)
{
  bi_windup(s);
  if (header) {
    put_short(s, len);
    put_short(s, ~len);
  }
  utils$b.arraySet(s.pending_buf, s.window, buf, len, s.pending);
  s.pending += len;
}
function smaller(tree, n, m, depth) {
  var _n2 = n * 2;
  var _m2 = m * 2;
  return (tree[_n2] < tree[_m2] ||
         (tree[_n2] === tree[_m2] && depth[n] <= depth[m]));
}
function pqdownheap(s, tree, k)
{
  var v = s.heap[k];
  var j = k << 1;
  while (j <= s.heap_len) {
    if (j < s.heap_len &&
      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {
      j++;
    }
    if (smaller(tree, v, s.heap[j], s.depth)) { break; }
    s.heap[k] = s.heap[j];
    k = j;
    j <<= 1;
  }
  s.heap[k] = v;
}
function compress_block(s, ltree, dtree)
{
  var dist;
  var lc;
  var lx = 0;
  var code;
  var extra;
  if (s.last_lit !== 0) {
    do {
      dist = (s.pending_buf[s.d_buf + lx * 2] << 8) | (s.pending_buf[s.d_buf + lx * 2 + 1]);
      lc = s.pending_buf[s.l_buf + lx];
      lx++;
      if (dist === 0) {
        send_code(s, lc, ltree);
      } else {
        code = _length_code[lc];
        send_code(s, code + LITERALS$1 + 1, ltree);
        extra = extra_lbits[code];
        if (extra !== 0) {
          lc -= base_length[code];
          send_bits(s, lc, extra);
        }
        dist--;
        code = d_code(dist);
        send_code(s, code, dtree);
        extra = extra_dbits[code];
        if (extra !== 0) {
          dist -= base_dist[code];
          send_bits(s, dist, extra);
        }
      }
    } while (lx < s.last_lit);
  }
  send_code(s, END_BLOCK, ltree);
}
function build_tree(s, desc)
{
  var tree     = desc.dyn_tree;
  var stree    = desc.stat_desc.static_tree;
  var has_stree = desc.stat_desc.has_stree;
  var elems    = desc.stat_desc.elems;
  var n, m;
  var max_code = -1;
  var node;
  s.heap_len = 0;
  s.heap_max = HEAP_SIZE$1;
  for (n = 0; n < elems; n++) {
    if (tree[n * 2] !== 0) {
      s.heap[++s.heap_len] = max_code = n;
      s.depth[n] = 0;
    } else {
      tree[n * 2 + 1] = 0;
    }
  }
  while (s.heap_len < 2) {
    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);
    tree[node * 2] = 1;
    s.depth[node] = 0;
    s.opt_len--;
    if (has_stree) {
      s.static_len -= stree[node * 2 + 1];
    }
  }
  desc.max_code = max_code;
  for (n = (s.heap_len >> 1); n >= 1; n--) { pqdownheap(s, tree, n); }
  node = elems;
  do {
    n = s.heap[1];
    s.heap[1] = s.heap[s.heap_len--];
    pqdownheap(s, tree, 1);
    m = s.heap[1];
    s.heap[--s.heap_max] = n;
    s.heap[--s.heap_max] = m;
    tree[node * 2] = tree[n * 2] + tree[m * 2];
    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
    tree[n * 2 + 1] = tree[m * 2 + 1] = node;
    s.heap[1] = node++;
    pqdownheap(s, tree, 1);
  } while (s.heap_len >= 2);
  s.heap[--s.heap_max] = s.heap[1];
  gen_bitlen(s, desc);
  gen_codes(tree, max_code, s.bl_count);
}
function scan_tree(s, tree, max_code)
{
  var n;
  var prevlen = -1;
  var curlen;
  var nextlen = tree[0 * 2 + 1];
  var count = 0;
  var max_count = 7;
  var min_count = 4;
  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }
  tree[(max_code + 1) * 2 + 1] = 0xffff;
  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1];
    if (++count < max_count && curlen === nextlen) {
      continue;
    } else if (count < min_count) {
      s.bl_tree[curlen * 2] += count;
    } else if (curlen !== 0) {
      if (curlen !== prevlen) { s.bl_tree[curlen * 2]++; }
      s.bl_tree[REP_3_6 * 2]++;
    } else if (count <= 10) {
      s.bl_tree[REPZ_3_10 * 2]++;
    } else {
      s.bl_tree[REPZ_11_138 * 2]++;
    }
    count = 0;
    prevlen = curlen;
    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;
    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;
    } else {
      max_count = 7;
      min_count = 4;
    }
  }
}
function send_tree(s, tree, max_code)
{
  var n;
  var prevlen = -1;
  var curlen;
  var nextlen = tree[0 * 2 + 1];
  var count = 0;
  var max_count = 7;
  var min_count = 4;
  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }
  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1];
    if (++count < max_count && curlen === nextlen) {
      continue;
    } else if (count < min_count) {
      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);
    } else if (curlen !== 0) {
      if (curlen !== prevlen) {
        send_code(s, curlen, s.bl_tree);
        count--;
      }
      send_code(s, REP_3_6, s.bl_tree);
      send_bits(s, count - 3, 2);
    } else if (count <= 10) {
      send_code(s, REPZ_3_10, s.bl_tree);
      send_bits(s, count - 3, 3);
    } else {
      send_code(s, REPZ_11_138, s.bl_tree);
      send_bits(s, count - 11, 7);
    }
    count = 0;
    prevlen = curlen;
    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;
    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;
    } else {
      max_count = 7;
      min_count = 4;
    }
  }
}
function build_bl_tree(s) {
  var max_blindex;
  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);
  build_tree(s, s.bl_desc);
  for (max_blindex = BL_CODES$1 - 1; max_blindex >= 3; max_blindex--) {
    if (s.bl_tree[bl_order[max_blindex] * 2 + 1] !== 0) {
      break;
    }
  }
  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
  return max_blindex;
}
function send_all_trees(s, lcodes, dcodes, blcodes)
{
  var rank;
  send_bits(s, lcodes - 257, 5);
  send_bits(s, dcodes - 1,   5);
  send_bits(s, blcodes - 4,  4);
  for (rank = 0; rank < blcodes; rank++) {
    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1], 3);
  }
  send_tree(s, s.dyn_ltree, lcodes - 1);
  send_tree(s, s.dyn_dtree, dcodes - 1);
}
function detect_data_type(s) {
  var black_mask = 0xf3ffc07f;
  var n;
  for (n = 0; n <= 31; n++, black_mask >>>= 1) {
    if ((black_mask & 1) && (s.dyn_ltree[n * 2] !== 0)) {
      return Z_BINARY;
    }
  }
  if (s.dyn_ltree[9 * 2] !== 0 || s.dyn_ltree[10 * 2] !== 0 ||
      s.dyn_ltree[13 * 2] !== 0) {
    return Z_TEXT;
  }
  for (n = 32; n < LITERALS$1; n++) {
    if (s.dyn_ltree[n * 2] !== 0) {
      return Z_TEXT;
    }
  }
  return Z_BINARY;
}
var static_init_done = false;
function _tr_init(s)
{
  if (!static_init_done) {
    tr_static_init();
    static_init_done = true;
  }
  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);
  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);
  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);
  s.bi_buf = 0;
  s.bi_valid = 0;
  init_block(s);
}
function _tr_stored_block(s, buf, stored_len, last)
{
  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);
  copy_block(s, buf, stored_len, true);
}
function _tr_align(s) {
  send_bits(s, STATIC_TREES << 1, 3);
  send_code(s, END_BLOCK, static_ltree);
  bi_flush(s);
}
function _tr_flush_block(s, buf, stored_len, last)
{
  var opt_lenb, static_lenb;
  var max_blindex = 0;
  if (s.level > 0) {
    if (s.strm.data_type === Z_UNKNOWN$1) {
      s.strm.data_type = detect_data_type(s);
    }
    build_tree(s, s.l_desc);
    build_tree(s, s.d_desc);
    max_blindex = build_bl_tree(s);
    opt_lenb = (s.opt_len + 3 + 7) >>> 3;
    static_lenb = (s.static_len + 3 + 7) >>> 3;
    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }
  } else {
    opt_lenb = static_lenb = stored_len + 5;
  }
  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {
    _tr_stored_block(s, buf, stored_len, last);
  } else if (s.strategy === Z_FIXED$1 || static_lenb === opt_lenb) {
    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
    compress_block(s, static_ltree, static_dtree);
  } else {
    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);
    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
    compress_block(s, s.dyn_ltree, s.dyn_dtree);
  }
  init_block(s);
  if (last) {
    bi_windup(s);
  }
}
function _tr_tally(s, dist, lc)
{
  s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;
  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;
  s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;
  s.last_lit++;
  if (dist === 0) {
    s.dyn_ltree[lc * 2]++;
  } else {
    s.matches++;
    dist--;
    s.dyn_ltree[(_length_code[lc] + LITERALS$1 + 1) * 2]++;
    s.dyn_dtree[d_code(dist) * 2]++;
  }
  return (s.last_lit === s.lit_bufsize - 1);
}
trees$1._tr_init  = _tr_init;
trees$1._tr_stored_block = _tr_stored_block;
trees$1._tr_flush_block  = _tr_flush_block;
trees$1._tr_tally = _tr_tally;
trees$1._tr_align = _tr_align;

function adler32$2(adler, buf, len, pos) {
  var s1 = (adler & 0xffff) |0,
      s2 = ((adler >>> 16) & 0xffff) |0,
      n = 0;
  while (len !== 0) {
    n = len > 2000 ? 2000 : len;
    len -= n;
    do {
      s1 = (s1 + buf[pos++]) |0;
      s2 = (s2 + s1) |0;
    } while (--n);
    s1 %= 65521;
    s2 %= 65521;
  }
  return (s1 | (s2 << 16)) |0;
}
var adler32_1 = adler32$2;

function makeTable() {
  var c, table = [];
  for (var n = 0; n < 256; n++) {
    c = n;
    for (var k = 0; k < 8; k++) {
      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
    }
    table[n] = c;
  }
  return table;
}
var crcTable = makeTable();
function crc32$2(crc, buf, len, pos) {
  var t = crcTable,
      end = pos + len;
  crc ^= -1;
  for (var i = pos; i < end; i++) {
    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];
  }
  return (crc ^ (-1));
}
var crc32_1 = crc32$2;

var messages = {
  2:      'need dictionary',
  1:      'stream end',
  0:      '',
  '-1':   'file error',
  '-2':   'stream error',
  '-3':   'data error',
  '-4':   'insufficient memory',
  '-5':   'buffer error',
  '-6':   'incompatible version'
};

var utils$a   = common;
var trees   = trees$1;
var adler32$1 = adler32_1;
var crc32$1   = crc32_1;
var msg     = messages;
var Z_NO_FLUSH      = 0;
var Z_PARTIAL_FLUSH = 1;
var Z_FULL_FLUSH    = 3;
var Z_FINISH$1        = 4;
var Z_BLOCK$1         = 5;
var Z_OK$1            = 0;
var Z_STREAM_END$1    = 1;
var Z_STREAM_ERROR$1  = -2;
var Z_DATA_ERROR$1    = -3;
var Z_BUF_ERROR$1     = -5;
var Z_DEFAULT_COMPRESSION = -1;
var Z_FILTERED            = 1;
var Z_HUFFMAN_ONLY        = 2;
var Z_RLE                 = 3;
var Z_FIXED               = 4;
var Z_DEFAULT_STRATEGY    = 0;
var Z_UNKNOWN             = 2;
var Z_DEFLATED$1  = 8;
var MAX_MEM_LEVEL = 9;
var MAX_WBITS$1 = 15;
var DEF_MEM_LEVEL = 8;
var LENGTH_CODES  = 29;
var LITERALS      = 256;
var L_CODES       = LITERALS + 1 + LENGTH_CODES;
var D_CODES       = 30;
var BL_CODES      = 19;
var HEAP_SIZE     = 2 * L_CODES + 1;
var MAX_BITS  = 15;
var MIN_MATCH = 3;
var MAX_MATCH = 258;
var MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);
var PRESET_DICT = 0x20;
var INIT_STATE = 42;
var EXTRA_STATE = 69;
var NAME_STATE = 73;
var COMMENT_STATE = 91;
var HCRC_STATE = 103;
var BUSY_STATE = 113;
var FINISH_STATE = 666;
var BS_NEED_MORE      = 1;
var BS_BLOCK_DONE     = 2;
var BS_FINISH_STARTED = 3;
var BS_FINISH_DONE    = 4;
var OS_CODE = 0x03;
function err(strm, errorCode) {
  strm.msg = msg[errorCode];
  return errorCode;
}
function rank(f) {
  return ((f) << 1) - ((f) > 4 ? 9 : 0);
}
function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }
function flush_pending(strm) {
  var s = strm.state;
  var len = s.pending;
  if (len > strm.avail_out) {
    len = strm.avail_out;
  }
  if (len === 0) { return; }
  utils$a.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);
  strm.next_out += len;
  s.pending_out += len;
  strm.total_out += len;
  strm.avail_out -= len;
  s.pending -= len;
  if (s.pending === 0) {
    s.pending_out = 0;
  }
}
function flush_block_only(s, last) {
  trees._tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);
  s.block_start = s.strstart;
  flush_pending(s.strm);
}
function put_byte(s, b) {
  s.pending_buf[s.pending++] = b;
}
function putShortMSB(s, b) {
  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;
  s.pending_buf[s.pending++] = b & 0xff;
}
function read_buf(strm, buf, start, size) {
  var len = strm.avail_in;
  if (len > size) { len = size; }
  if (len === 0) { return 0; }
  strm.avail_in -= len;
  utils$a.arraySet(buf, strm.input, strm.next_in, len, start);
  if (strm.state.wrap === 1) {
    strm.adler = adler32$1(strm.adler, buf, len, start);
  }
  else if (strm.state.wrap === 2) {
    strm.adler = crc32$1(strm.adler, buf, len, start);
  }
  strm.next_in += len;
  strm.total_in += len;
  return len;
}
function longest_match(s, cur_match) {
  var chain_length = s.max_chain_length;
  var scan = s.strstart;
  var match;
  var len;
  var best_len = s.prev_length;
  var nice_match = s.nice_match;
  var limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?
      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0;
  var _win = s.window;
  var wmask = s.w_mask;
  var prev  = s.prev;
  var strend = s.strstart + MAX_MATCH;
  var scan_end1  = _win[scan + best_len - 1];
  var scan_end   = _win[scan + best_len];
  if (s.prev_length >= s.good_match) {
    chain_length >>= 2;
  }
  if (nice_match > s.lookahead) { nice_match = s.lookahead; }
  do {
    match = cur_match;
    if (_win[match + best_len]     !== scan_end  ||
        _win[match + best_len - 1] !== scan_end1 ||
        _win[match]                !== _win[scan] ||
        _win[++match]              !== _win[scan + 1]) {
      continue;
    }
    scan += 2;
    match++;
    do {
    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             scan < strend);
    len = MAX_MATCH - (strend - scan);
    scan = strend - MAX_MATCH;
    if (len > best_len) {
      s.match_start = cur_match;
      best_len = len;
      if (len >= nice_match) {
        break;
      }
      scan_end1  = _win[scan + best_len - 1];
      scan_end   = _win[scan + best_len];
    }
  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);
  if (best_len <= s.lookahead) {
    return best_len;
  }
  return s.lookahead;
}
function fill_window(s) {
  var _w_size = s.w_size;
  var p, n, m, more, str;
  do {
    more = s.window_size - s.lookahead - s.strstart;
    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {
      utils$a.arraySet(s.window, s.window, _w_size, _w_size, 0);
      s.match_start -= _w_size;
      s.strstart -= _w_size;
      s.block_start -= _w_size;
      n = s.hash_size;
      p = n;
      do {
        m = s.head[--p];
        s.head[p] = (m >= _w_size ? m - _w_size : 0);
      } while (--n);
      n = _w_size;
      p = n;
      do {
        m = s.prev[--p];
        s.prev[p] = (m >= _w_size ? m - _w_size : 0);
      } while (--n);
      more += _w_size;
    }
    if (s.strm.avail_in === 0) {
      break;
    }
    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
    s.lookahead += n;
    if (s.lookahead + s.insert >= MIN_MATCH) {
      str = s.strstart - s.insert;
      s.ins_h = s.window[str];
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + 1]) & s.hash_mask;
      while (s.insert) {
        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;
        s.prev[str & s.w_mask] = s.head[s.ins_h];
        s.head[s.ins_h] = str;
        str++;
        s.insert--;
        if (s.lookahead + s.insert < MIN_MATCH) {
          break;
        }
      }
    }
  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);
}
function deflate_stored(s, flush) {
  var max_block_size = 0xffff;
  if (max_block_size > s.pending_buf_size - 5) {
    max_block_size = s.pending_buf_size - 5;
  }
  for (;;) {
    if (s.lookahead <= 1) {
      fill_window(s);
      if (s.lookahead === 0 && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) {
        break;
      }
    }
    s.strstart += s.lookahead;
    s.lookahead = 0;
    var max_start = s.block_start + max_block_size;
    if (s.strstart === 0 || s.strstart >= max_start) {
      s.lookahead = s.strstart - max_start;
      s.strstart = max_start;
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    }
    if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH$1) {
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    return BS_FINISH_DONE;
  }
  if (s.strstart > s.block_start) {
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
  }
  return BS_NEED_MORE;
}
function deflate_fast(s, flush) {
  var hash_head;
  var bflush;
  for (;;) {
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) {
        break;
      }
    }
    hash_head = 0;
    if (s.lookahead >= MIN_MATCH) {
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
    }
    if (hash_head !== 0 && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {
      s.match_length = longest_match(s, hash_head);
    }
    if (s.match_length >= MIN_MATCH) {
      bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);
      s.lookahead -= s.match_length;
      if (s.match_length <= s.max_lazy_match && s.lookahead >= MIN_MATCH) {
        s.match_length--;
        do {
          s.strstart++;
          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
        } while (--s.match_length !== 0);
        s.strstart++;
      } else
      {
        s.strstart += s.match_length;
        s.match_length = 0;
        s.ins_h = s.window[s.strstart];
        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + 1]) & s.hash_mask;
      }
    } else {
      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    }
  }
  s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);
  if (flush === Z_FINISH$1) {
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
  }
  return BS_BLOCK_DONE;
}
function deflate_slow(s, flush) {
  var hash_head;
  var bflush;
  var max_insert;
  for (;;) {
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) { break; }
    }
    hash_head = 0;
    if (s.lookahead >= MIN_MATCH) {
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
    }
    s.prev_length = s.match_length;
    s.prev_match = s.match_start;
    s.match_length = MIN_MATCH - 1;
    if (hash_head !== 0 && s.prev_length < s.max_lazy_match &&
        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)) {
      s.match_length = longest_match(s, hash_head);
      if (s.match_length <= 5 &&
         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096))) {
        s.match_length = MIN_MATCH - 1;
      }
    }
    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {
      max_insert = s.strstart + s.lookahead - MIN_MATCH;
      bflush = trees._tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);
      s.lookahead -= s.prev_length - 1;
      s.prev_length -= 2;
      do {
        if (++s.strstart <= max_insert) {
          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
        }
      } while (--s.prev_length !== 0);
      s.match_available = 0;
      s.match_length = MIN_MATCH - 1;
      s.strstart++;
      if (bflush) {
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
      }
    } else if (s.match_available) {
      bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);
      if (bflush) {
        flush_block_only(s, false);
      }
      s.strstart++;
      s.lookahead--;
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    } else {
      s.match_available = 1;
      s.strstart++;
      s.lookahead--;
    }
  }
  if (s.match_available) {
    bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);
    s.match_available = 0;
  }
  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
  if (flush === Z_FINISH$1) {
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
  }
  return BS_BLOCK_DONE;
}
function deflate_rle(s, flush) {
  var bflush;
  var prev;
  var scan, strend;
  var _win = s.window;
  for (;;) {
    if (s.lookahead <= MAX_MATCH) {
      fill_window(s);
      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) { break; }
    }
    s.match_length = 0;
    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {
      scan = s.strstart - 1;
      prev = _win[scan];
      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
        strend = s.strstart + MAX_MATCH;
        do {
        } while (prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 scan < strend);
        s.match_length = MAX_MATCH - (strend - scan);
        if (s.match_length > s.lookahead) {
          s.match_length = s.lookahead;
        }
      }
    }
    if (s.match_length >= MIN_MATCH) {
      bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);
      s.lookahead -= s.match_length;
      s.strstart += s.match_length;
      s.match_length = 0;
    } else {
      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH$1) {
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
  }
  return BS_BLOCK_DONE;
}
function deflate_huff(s, flush) {
  var bflush;
  for (;;) {
    if (s.lookahead === 0) {
      fill_window(s);
      if (s.lookahead === 0) {
        if (flush === Z_NO_FLUSH) {
          return BS_NEED_MORE;
        }
        break;
      }
    }
    s.match_length = 0;
    bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
    s.lookahead--;
    s.strstart++;
    if (bflush) {
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH$1) {
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
  }
  return BS_BLOCK_DONE;
}
function Config(good_length, max_lazy, nice_length, max_chain, func) {
  this.good_length = good_length;
  this.max_lazy = max_lazy;
  this.nice_length = nice_length;
  this.max_chain = max_chain;
  this.func = func;
}
var configuration_table;
configuration_table = [
  new Config(0, 0, 0, 0, deflate_stored),
  new Config(4, 4, 8, 4, deflate_fast),
  new Config(4, 5, 16, 8, deflate_fast),
  new Config(4, 6, 32, 32, deflate_fast),
  new Config(4, 4, 16, 16, deflate_slow),
  new Config(8, 16, 32, 32, deflate_slow),
  new Config(8, 16, 128, 128, deflate_slow),
  new Config(8, 32, 128, 256, deflate_slow),
  new Config(32, 128, 258, 1024, deflate_slow),
  new Config(32, 258, 258, 4096, deflate_slow)
];
function lm_init(s) {
  s.window_size = 2 * s.w_size;
  zero(s.head);
  s.max_lazy_match = configuration_table[s.level].max_lazy;
  s.good_match = configuration_table[s.level].good_length;
  s.nice_match = configuration_table[s.level].nice_length;
  s.max_chain_length = configuration_table[s.level].max_chain;
  s.strstart = 0;
  s.block_start = 0;
  s.lookahead = 0;
  s.insert = 0;
  s.match_length = s.prev_length = MIN_MATCH - 1;
  s.match_available = 0;
  s.ins_h = 0;
}
function DeflateState() {
  this.strm = null;
  this.status = 0;
  this.pending_buf = null;
  this.pending_buf_size = 0;
  this.pending_out = 0;
  this.pending = 0;
  this.wrap = 0;
  this.gzhead = null;
  this.gzindex = 0;
  this.method = Z_DEFLATED$1;
  this.last_flush = -1;
  this.w_size = 0;
  this.w_bits = 0;
  this.w_mask = 0;
  this.window = null;
  this.window_size = 0;
  this.prev = null;
  this.head = null;
  this.ins_h = 0;
  this.hash_size = 0;
  this.hash_bits = 0;
  this.hash_mask = 0;
  this.hash_shift = 0;
  this.block_start = 0;
  this.match_length = 0;
  this.prev_match = 0;
  this.match_available = 0;
  this.strstart = 0;
  this.match_start = 0;
  this.lookahead = 0;
  this.prev_length = 0;
  this.max_chain_length = 0;
  this.max_lazy_match = 0;
  this.level = 0;
  this.strategy = 0;
  this.good_match = 0;
  this.nice_match = 0;
  this.dyn_ltree  = new utils$a.Buf16(HEAP_SIZE * 2);
  this.dyn_dtree  = new utils$a.Buf16((2 * D_CODES + 1) * 2);
  this.bl_tree    = new utils$a.Buf16((2 * BL_CODES + 1) * 2);
  zero(this.dyn_ltree);
  zero(this.dyn_dtree);
  zero(this.bl_tree);
  this.l_desc   = null;
  this.d_desc   = null;
  this.bl_desc  = null;
  this.bl_count = new utils$a.Buf16(MAX_BITS + 1);
  this.heap = new utils$a.Buf16(2 * L_CODES + 1);
  zero(this.heap);
  this.heap_len = 0;
  this.heap_max = 0;
  this.depth = new utils$a.Buf16(2 * L_CODES + 1);
  zero(this.depth);
  this.l_buf = 0;
  this.lit_bufsize = 0;
  this.last_lit = 0;
  this.d_buf = 0;
  this.opt_len = 0;
  this.static_len = 0;
  this.matches = 0;
  this.insert = 0;
  this.bi_buf = 0;
  this.bi_valid = 0;
}
function deflateResetKeep(strm) {
  var s;
  if (!strm || !strm.state) {
    return err(strm, Z_STREAM_ERROR$1);
  }
  strm.total_in = strm.total_out = 0;
  strm.data_type = Z_UNKNOWN;
  s = strm.state;
  s.pending = 0;
  s.pending_out = 0;
  if (s.wrap < 0) {
    s.wrap = -s.wrap;
  }
  s.status = (s.wrap ? INIT_STATE : BUSY_STATE);
  strm.adler = (s.wrap === 2) ?
    0
  :
    1;
  s.last_flush = Z_NO_FLUSH;
  trees._tr_init(s);
  return Z_OK$1;
}
function deflateReset(strm) {
  var ret = deflateResetKeep(strm);
  if (ret === Z_OK$1) {
    lm_init(strm.state);
  }
  return ret;
}
function deflateSetHeader(strm, head) {
  if (!strm || !strm.state) { return Z_STREAM_ERROR$1; }
  if (strm.state.wrap !== 2) { return Z_STREAM_ERROR$1; }
  strm.state.gzhead = head;
  return Z_OK$1;
}
function deflateInit2(strm, level, method, windowBits, memLevel, strategy) {
  if (!strm) {
    return Z_STREAM_ERROR$1;
  }
  var wrap = 1;
  if (level === Z_DEFAULT_COMPRESSION) {
    level = 6;
  }
  if (windowBits < 0) {
    wrap = 0;
    windowBits = -windowBits;
  }
  else if (windowBits > 15) {
    wrap = 2;
    windowBits -= 16;
  }
  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED$1 ||
    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
    strategy < 0 || strategy > Z_FIXED) {
    return err(strm, Z_STREAM_ERROR$1);
  }
  if (windowBits === 8) {
    windowBits = 9;
  }
  var s = new DeflateState();
  strm.state = s;
  s.strm = strm;
  s.wrap = wrap;
  s.gzhead = null;
  s.w_bits = windowBits;
  s.w_size = 1 << s.w_bits;
  s.w_mask = s.w_size - 1;
  s.hash_bits = memLevel + 7;
  s.hash_size = 1 << s.hash_bits;
  s.hash_mask = s.hash_size - 1;
  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);
  s.window = new utils$a.Buf8(s.w_size * 2);
  s.head = new utils$a.Buf16(s.hash_size);
  s.prev = new utils$a.Buf16(s.w_size);
  s.lit_bufsize = 1 << (memLevel + 6);
  s.pending_buf_size = s.lit_bufsize * 4;
  s.pending_buf = new utils$a.Buf8(s.pending_buf_size);
  s.d_buf = 1 * s.lit_bufsize;
  s.l_buf = (1 + 2) * s.lit_bufsize;
  s.level = level;
  s.strategy = strategy;
  s.method = method;
  return deflateReset(strm);
}
function deflateInit(strm, level) {
  return deflateInit2(strm, level, Z_DEFLATED$1, MAX_WBITS$1, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);
}
function deflate(strm, flush) {
  var old_flush, s;
  var beg, val;
  if (!strm || !strm.state ||
    flush > Z_BLOCK$1 || flush < 0) {
    return strm ? err(strm, Z_STREAM_ERROR$1) : Z_STREAM_ERROR$1;
  }
  s = strm.state;
  if (!strm.output ||
      (!strm.input && strm.avail_in !== 0) ||
      (s.status === FINISH_STATE && flush !== Z_FINISH$1)) {
    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR$1 : Z_STREAM_ERROR$1);
  }
  s.strm = strm;
  old_flush = s.last_flush;
  s.last_flush = flush;
  if (s.status === INIT_STATE) {
    if (s.wrap === 2) {
      strm.adler = 0;
      put_byte(s, 31);
      put_byte(s, 139);
      put_byte(s, 8);
      if (!s.gzhead) {
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, s.level === 9 ? 2 :
                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                     4 : 0));
        put_byte(s, OS_CODE);
        s.status = BUSY_STATE;
      }
      else {
        put_byte(s, (s.gzhead.text ? 1 : 0) +
                    (s.gzhead.hcrc ? 2 : 0) +
                    (!s.gzhead.extra ? 0 : 4) +
                    (!s.gzhead.name ? 0 : 8) +
                    (!s.gzhead.comment ? 0 : 16)
        );
        put_byte(s, s.gzhead.time & 0xff);
        put_byte(s, (s.gzhead.time >> 8) & 0xff);
        put_byte(s, (s.gzhead.time >> 16) & 0xff);
        put_byte(s, (s.gzhead.time >> 24) & 0xff);
        put_byte(s, s.level === 9 ? 2 :
                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                     4 : 0));
        put_byte(s, s.gzhead.os & 0xff);
        if (s.gzhead.extra && s.gzhead.extra.length) {
          put_byte(s, s.gzhead.extra.length & 0xff);
          put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);
        }
        if (s.gzhead.hcrc) {
          strm.adler = crc32$1(strm.adler, s.pending_buf, s.pending, 0);
        }
        s.gzindex = 0;
        s.status = EXTRA_STATE;
      }
    }
    else
    {
      var header = (Z_DEFLATED$1 + ((s.w_bits - 8) << 4)) << 8;
      var level_flags = -1;
      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
        level_flags = 0;
      } else if (s.level < 6) {
        level_flags = 1;
      } else if (s.level === 6) {
        level_flags = 2;
      } else {
        level_flags = 3;
      }
      header |= (level_flags << 6);
      if (s.strstart !== 0) { header |= PRESET_DICT; }
      header += 31 - (header % 31);
      s.status = BUSY_STATE;
      putShortMSB(s, header);
      if (s.strstart !== 0) {
        putShortMSB(s, strm.adler >>> 16);
        putShortMSB(s, strm.adler & 0xffff);
      }
      strm.adler = 1;
    }
  }
  if (s.status === EXTRA_STATE) {
    if (s.gzhead.extra) {
      beg = s.pending;
      while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32$1(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            break;
          }
        }
        put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);
        s.gzindex++;
      }
      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32$1(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (s.gzindex === s.gzhead.extra.length) {
        s.gzindex = 0;
        s.status = NAME_STATE;
      }
    }
    else {
      s.status = NAME_STATE;
    }
  }
  if (s.status === NAME_STATE) {
    if (s.gzhead.name) {
      beg = s.pending;
      do {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32$1(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            val = 1;
            break;
          }
        }
        if (s.gzindex < s.gzhead.name.length) {
          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);
      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32$1(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (val === 0) {
        s.gzindex = 0;
        s.status = COMMENT_STATE;
      }
    }
    else {
      s.status = COMMENT_STATE;
    }
  }
  if (s.status === COMMENT_STATE) {
    if (s.gzhead.comment) {
      beg = s.pending;
      do {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32$1(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            val = 1;
            break;
          }
        }
        if (s.gzindex < s.gzhead.comment.length) {
          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);
      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32$1(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (val === 0) {
        s.status = HCRC_STATE;
      }
    }
    else {
      s.status = HCRC_STATE;
    }
  }
  if (s.status === HCRC_STATE) {
    if (s.gzhead.hcrc) {
      if (s.pending + 2 > s.pending_buf_size) {
        flush_pending(strm);
      }
      if (s.pending + 2 <= s.pending_buf_size) {
        put_byte(s, strm.adler & 0xff);
        put_byte(s, (strm.adler >> 8) & 0xff);
        strm.adler = 0;
        s.status = BUSY_STATE;
      }
    }
    else {
      s.status = BUSY_STATE;
    }
  }
  if (s.pending !== 0) {
    flush_pending(strm);
    if (strm.avail_out === 0) {
      s.last_flush = -1;
      return Z_OK$1;
    }
  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&
    flush !== Z_FINISH$1) {
    return err(strm, Z_BUF_ERROR$1);
  }
  if (s.status === FINISH_STATE && strm.avail_in !== 0) {
    return err(strm, Z_BUF_ERROR$1);
  }
  if (strm.avail_in !== 0 || s.lookahead !== 0 ||
    (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {
    var bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :
      (s.strategy === Z_RLE ? deflate_rle(s, flush) :
        configuration_table[s.level].func(s, flush));
    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
      s.status = FINISH_STATE;
    }
    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
      if (strm.avail_out === 0) {
        s.last_flush = -1;
      }
      return Z_OK$1;
    }
    if (bstate === BS_BLOCK_DONE) {
      if (flush === Z_PARTIAL_FLUSH) {
        trees._tr_align(s);
      }
      else if (flush !== Z_BLOCK$1) {
        trees._tr_stored_block(s, 0, 0, false);
        if (flush === Z_FULL_FLUSH) {
          zero(s.head);
          if (s.lookahead === 0) {
            s.strstart = 0;
            s.block_start = 0;
            s.insert = 0;
          }
        }
      }
      flush_pending(strm);
      if (strm.avail_out === 0) {
        s.last_flush = -1;
        return Z_OK$1;
      }
    }
  }
  if (flush !== Z_FINISH$1) { return Z_OK$1; }
  if (s.wrap <= 0) { return Z_STREAM_END$1; }
  if (s.wrap === 2) {
    put_byte(s, strm.adler & 0xff);
    put_byte(s, (strm.adler >> 8) & 0xff);
    put_byte(s, (strm.adler >> 16) & 0xff);
    put_byte(s, (strm.adler >> 24) & 0xff);
    put_byte(s, strm.total_in & 0xff);
    put_byte(s, (strm.total_in >> 8) & 0xff);
    put_byte(s, (strm.total_in >> 16) & 0xff);
    put_byte(s, (strm.total_in >> 24) & 0xff);
  }
  else
  {
    putShortMSB(s, strm.adler >>> 16);
    putShortMSB(s, strm.adler & 0xffff);
  }
  flush_pending(strm);
  if (s.wrap > 0) { s.wrap = -s.wrap; }
  return s.pending !== 0 ? Z_OK$1 : Z_STREAM_END$1;
}
function deflateEnd(strm) {
  var status;
  if (!strm || !strm.state) {
    return Z_STREAM_ERROR$1;
  }
  status = strm.state.status;
  if (status !== INIT_STATE &&
    status !== EXTRA_STATE &&
    status !== NAME_STATE &&
    status !== COMMENT_STATE &&
    status !== HCRC_STATE &&
    status !== BUSY_STATE &&
    status !== FINISH_STATE
  ) {
    return err(strm, Z_STREAM_ERROR$1);
  }
  strm.state = null;
  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR$1) : Z_OK$1;
}
function deflateSetDictionary(strm, dictionary) {
  var dictLength = dictionary.length;
  var s;
  var str, n;
  var wrap;
  var avail;
  var next;
  var input;
  var tmpDict;
  if (!strm || !strm.state) {
    return Z_STREAM_ERROR$1;
  }
  s = strm.state;
  wrap = s.wrap;
  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {
    return Z_STREAM_ERROR$1;
  }
  if (wrap === 1) {
    strm.adler = adler32$1(strm.adler, dictionary, dictLength, 0);
  }
  s.wrap = 0;
  if (dictLength >= s.w_size) {
    if (wrap === 0) {
      zero(s.head);
      s.strstart = 0;
      s.block_start = 0;
      s.insert = 0;
    }
    tmpDict = new utils$a.Buf8(s.w_size);
    utils$a.arraySet(tmpDict, dictionary, dictLength - s.w_size, s.w_size, 0);
    dictionary = tmpDict;
    dictLength = s.w_size;
  }
  avail = strm.avail_in;
  next = strm.next_in;
  input = strm.input;
  strm.avail_in = dictLength;
  strm.next_in = 0;
  strm.input = dictionary;
  fill_window(s);
  while (s.lookahead >= MIN_MATCH) {
    str = s.strstart;
    n = s.lookahead - (MIN_MATCH - 1);
    do {
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;
      s.prev[str & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = str;
      str++;
    } while (--n);
    s.strstart = str;
    s.lookahead = MIN_MATCH - 1;
    fill_window(s);
  }
  s.strstart += s.lookahead;
  s.block_start = s.strstart;
  s.insert = s.lookahead;
  s.lookahead = 0;
  s.match_length = s.prev_length = MIN_MATCH - 1;
  s.match_available = 0;
  strm.next_in = next;
  strm.input = input;
  strm.avail_in = avail;
  s.wrap = wrap;
  return Z_OK$1;
}
deflate$1.deflateInit = deflateInit;
deflate$1.deflateInit2 = deflateInit2;
deflate$1.deflateReset = deflateReset;
deflate$1.deflateResetKeep = deflateResetKeep;
deflate$1.deflateSetHeader = deflateSetHeader;
deflate$1.deflate = deflate;
deflate$1.deflateEnd = deflateEnd;
deflate$1.deflateSetDictionary = deflateSetDictionary;
deflate$1.deflateInfo = 'pako deflate (from Nodeca project)';

var inflate$2 = {};

var BAD$1 = 30;
var TYPE$1 = 12;
var inffast = function inflate_fast(strm, start) {
  var state;
  var _in;
  var last;
  var _out;
  var beg;
  var end;
  var dmax;
  var wsize;
  var whave;
  var wnext;
  var s_window;
  var hold;
  var bits;
  var lcode;
  var dcode;
  var lmask;
  var dmask;
  var here;
  var op;
  var len;
  var dist;
  var from;
  var from_source;
  var input, output;
  state = strm.state;
  _in = strm.next_in;
  input = strm.input;
  last = _in + (strm.avail_in - 5);
  _out = strm.next_out;
  output = strm.output;
  beg = _out - (start - strm.avail_out);
  end = _out + (strm.avail_out - 257);
  dmax = state.dmax;
  wsize = state.wsize;
  whave = state.whave;
  wnext = state.wnext;
  s_window = state.window;
  hold = state.hold;
  bits = state.bits;
  lcode = state.lencode;
  dcode = state.distcode;
  lmask = (1 << state.lenbits) - 1;
  dmask = (1 << state.distbits) - 1;
  top:
  do {
    if (bits < 15) {
      hold += input[_in++] << bits;
      bits += 8;
      hold += input[_in++] << bits;
      bits += 8;
    }
    here = lcode[hold & lmask];
    dolen:
    for (;;) {
      op = here >>> 24;
      hold >>>= op;
      bits -= op;
      op = (here >>> 16) & 0xff;
      if (op === 0) {
        output[_out++] = here & 0xffff;
      }
      else if (op & 16) {
        len = here & 0xffff;
        op &= 15;
        if (op) {
          if (bits < op) {
            hold += input[_in++] << bits;
            bits += 8;
          }
          len += hold & ((1 << op) - 1);
          hold >>>= op;
          bits -= op;
        }
        if (bits < 15) {
          hold += input[_in++] << bits;
          bits += 8;
          hold += input[_in++] << bits;
          bits += 8;
        }
        here = dcode[hold & dmask];
        dodist:
        for (;;) {
          op = here >>> 24;
          hold >>>= op;
          bits -= op;
          op = (here >>> 16) & 0xff;
          if (op & 16) {
            dist = here & 0xffff;
            op &= 15;
            if (bits < op) {
              hold += input[_in++] << bits;
              bits += 8;
              if (bits < op) {
                hold += input[_in++] << bits;
                bits += 8;
              }
            }
            dist += hold & ((1 << op) - 1);
            if (dist > dmax) {
              strm.msg = 'invalid distance too far back';
              state.mode = BAD$1;
              break top;
            }
            hold >>>= op;
            bits -= op;
            op = _out - beg;
            if (dist > op) {
              op = dist - op;
              if (op > whave) {
                if (state.sane) {
                  strm.msg = 'invalid distance too far back';
                  state.mode = BAD$1;
                  break top;
                }
              }
              from = 0;
              from_source = s_window;
              if (wnext === 0) {
                from += wsize - op;
                if (op < len) {
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = _out - dist;
                  from_source = output;
                }
              }
              else if (wnext < op) {
                from += wsize + wnext - op;
                op -= wnext;
                if (op < len) {
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = 0;
                  if (wnext < len) {
                    op = wnext;
                    len -= op;
                    do {
                      output[_out++] = s_window[from++];
                    } while (--op);
                    from = _out - dist;
                    from_source = output;
                  }
                }
              }
              else {
                from += wnext - op;
                if (op < len) {
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = _out - dist;
                  from_source = output;
                }
              }
              while (len > 2) {
                output[_out++] = from_source[from++];
                output[_out++] = from_source[from++];
                output[_out++] = from_source[from++];
                len -= 3;
              }
              if (len) {
                output[_out++] = from_source[from++];
                if (len > 1) {
                  output[_out++] = from_source[from++];
                }
              }
            }
            else {
              from = _out - dist;
              do {
                output[_out++] = output[from++];
                output[_out++] = output[from++];
                output[_out++] = output[from++];
                len -= 3;
              } while (len > 2);
              if (len) {
                output[_out++] = output[from++];
                if (len > 1) {
                  output[_out++] = output[from++];
                }
              }
            }
          }
          else if ((op & 64) === 0) {
            here = dcode[(here & 0xffff) + (hold & ((1 << op) - 1))];
            continue dodist;
          }
          else {
            strm.msg = 'invalid distance code';
            state.mode = BAD$1;
            break top;
          }
          break;
        }
      }
      else if ((op & 64) === 0) {
        here = lcode[(here & 0xffff) + (hold & ((1 << op) - 1))];
        continue dolen;
      }
      else if (op & 32) {
        state.mode = TYPE$1;
        break top;
      }
      else {
        strm.msg = 'invalid literal/length code';
        state.mode = BAD$1;
        break top;
      }
      break;
    }
  } while (_in < last && _out < end);
  len = bits >> 3;
  _in -= len;
  bits -= len << 3;
  hold &= (1 << bits) - 1;
  strm.next_in = _in;
  strm.next_out = _out;
  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));
  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));
  state.hold = hold;
  state.bits = bits;
  return;
};

var utils$9 = common;
var MAXBITS = 15;
var ENOUGH_LENS$1 = 852;
var ENOUGH_DISTS$1 = 592;
var CODES$1 = 0;
var LENS$1 = 1;
var DISTS$1 = 2;
var lbase = [
  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0
];
var lext = [
  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,
  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78
];
var dbase = [
  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
  8193, 12289, 16385, 24577, 0, 0
];
var dext = [
  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,
  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,
  28, 28, 29, 29, 64, 64
];
var inftrees = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts)
{
  var bits = opts.bits;
  var len = 0;
  var sym = 0;
  var min = 0, max = 0;
  var root = 0;
  var curr = 0;
  var drop = 0;
  var left = 0;
  var used = 0;
  var huff = 0;
  var incr;
  var fill;
  var low;
  var mask;
  var next;
  var base = null;
  var base_index = 0;
  var end;
  var count = new utils$9.Buf16(MAXBITS + 1);
  var offs = new utils$9.Buf16(MAXBITS + 1);
  var extra = null;
  var extra_index = 0;
  var here_bits, here_op, here_val;
  for (len = 0; len <= MAXBITS; len++) {
    count[len] = 0;
  }
  for (sym = 0; sym < codes; sym++) {
    count[lens[lens_index + sym]]++;
  }
  root = bits;
  for (max = MAXBITS; max >= 1; max--) {
    if (count[max] !== 0) { break; }
  }
  if (root > max) {
    root = max;
  }
  if (max === 0) {
    table[table_index++] = (1 << 24) | (64 << 16) | 0;
    table[table_index++] = (1 << 24) | (64 << 16) | 0;
    opts.bits = 1;
    return 0;
  }
  for (min = 1; min < max; min++) {
    if (count[min] !== 0) { break; }
  }
  if (root < min) {
    root = min;
  }
  left = 1;
  for (len = 1; len <= MAXBITS; len++) {
    left <<= 1;
    left -= count[len];
    if (left < 0) {
      return -1;
    }
  }
  if (left > 0 && (type === CODES$1 || max !== 1)) {
    return -1;
  }
  offs[1] = 0;
  for (len = 1; len < MAXBITS; len++) {
    offs[len + 1] = offs[len] + count[len];
  }
  for (sym = 0; sym < codes; sym++) {
    if (lens[lens_index + sym] !== 0) {
      work[offs[lens[lens_index + sym]]++] = sym;
    }
  }
  if (type === CODES$1) {
    base = extra = work;
    end = 19;
  } else if (type === LENS$1) {
    base = lbase;
    base_index -= 257;
    extra = lext;
    extra_index -= 257;
    end = 256;
  } else {
    base = dbase;
    extra = dext;
    end = -1;
  }
  huff = 0;
  sym = 0;
  len = min;
  next = table_index;
  curr = root;
  drop = 0;
  low = -1;
  used = 1 << root;
  mask = used - 1;
  if ((type === LENS$1 && used > ENOUGH_LENS$1) ||
    (type === DISTS$1 && used > ENOUGH_DISTS$1)) {
    return 1;
  }
  for (;;) {
    here_bits = len - drop;
    if (work[sym] < end) {
      here_op = 0;
      here_val = work[sym];
    }
    else if (work[sym] > end) {
      here_op = extra[extra_index + work[sym]];
      here_val = base[base_index + work[sym]];
    }
    else {
      here_op = 32 + 64;
      here_val = 0;
    }
    incr = 1 << (len - drop);
    fill = 1 << curr;
    min = fill;
    do {
      fill -= incr;
      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;
    } while (fill !== 0);
    incr = 1 << (len - 1);
    while (huff & incr) {
      incr >>= 1;
    }
    if (incr !== 0) {
      huff &= incr - 1;
      huff += incr;
    } else {
      huff = 0;
    }
    sym++;
    if (--count[len] === 0) {
      if (len === max) { break; }
      len = lens[lens_index + work[sym]];
    }
    if (len > root && (huff & mask) !== low) {
      if (drop === 0) {
        drop = root;
      }
      next += min;
      curr = len - drop;
      left = 1 << curr;
      while (curr + drop < max) {
        left -= count[curr + drop];
        if (left <= 0) { break; }
        curr++;
        left <<= 1;
      }
      used += 1 << curr;
      if ((type === LENS$1 && used > ENOUGH_LENS$1) ||
        (type === DISTS$1 && used > ENOUGH_DISTS$1)) {
        return 1;
      }
      low = huff & mask;
      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;
    }
  }
  if (huff !== 0) {
    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;
  }
  opts.bits = root;
  return 0;
};

var utils$8         = common;
var adler32       = adler32_1;
var crc32         = crc32_1;
var inflate_fast  = inffast;
var inflate_table = inftrees;
var CODES = 0;
var LENS = 1;
var DISTS = 2;
var Z_FINISH        = 4;
var Z_BLOCK         = 5;
var Z_TREES         = 6;
var Z_OK            = 0;
var Z_STREAM_END    = 1;
var Z_NEED_DICT     = 2;
var Z_STREAM_ERROR  = -2;
var Z_DATA_ERROR    = -3;
var Z_MEM_ERROR     = -4;
var Z_BUF_ERROR     = -5;
var Z_DEFLATED  = 8;
var    HEAD = 1;
var    FLAGS = 2;
var    TIME = 3;
var    OS = 4;
var    EXLEN = 5;
var    EXTRA = 6;
var    NAME = 7;
var    COMMENT = 8;
var    HCRC = 9;
var    DICTID = 10;
var    DICT = 11;
var        TYPE = 12;
var        TYPEDO = 13;
var        STORED = 14;
var        COPY_ = 15;
var        COPY = 16;
var        TABLE = 17;
var        LENLENS = 18;
var        CODELENS = 19;
var            LEN_ = 20;
var            LEN = 21;
var            LENEXT = 22;
var            DIST = 23;
var            DISTEXT = 24;
var            MATCH = 25;
var            LIT = 26;
var    CHECK = 27;
var    LENGTH = 28;
var    DONE = 29;
var    BAD = 30;
var    MEM = 31;
var    SYNC = 32;
var ENOUGH_LENS = 852;
var ENOUGH_DISTS = 592;
var MAX_WBITS = 15;
var DEF_WBITS = MAX_WBITS;
function zswap32(q) {
  return  (((q >>> 24) & 0xff) +
          ((q >>> 8) & 0xff00) +
          ((q & 0xff00) << 8) +
          ((q & 0xff) << 24));
}
function InflateState() {
  this.mode = 0;
  this.last = false;
  this.wrap = 0;
  this.havedict = false;
  this.flags = 0;
  this.dmax = 0;
  this.check = 0;
  this.total = 0;
  this.head = null;
  this.wbits = 0;
  this.wsize = 0;
  this.whave = 0;
  this.wnext = 0;
  this.window = null;
  this.hold = 0;
  this.bits = 0;
  this.length = 0;
  this.offset = 0;
  this.extra = 0;
  this.lencode = null;
  this.distcode = null;
  this.lenbits = 0;
  this.distbits = 0;
  this.ncode = 0;
  this.nlen = 0;
  this.ndist = 0;
  this.have = 0;
  this.next = null;
  this.lens = new utils$8.Buf16(320);
  this.work = new utils$8.Buf16(288);
  this.lendyn = null;
  this.distdyn = null;
  this.sane = 0;
  this.back = 0;
  this.was = 0;
}
function inflateResetKeep(strm) {
  var state;
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  strm.total_in = strm.total_out = state.total = 0;
  strm.msg = '';
  if (state.wrap) {
    strm.adler = state.wrap & 1;
  }
  state.mode = HEAD;
  state.last = 0;
  state.havedict = 0;
  state.dmax = 32768;
  state.head = null;
  state.hold = 0;
  state.bits = 0;
  state.lencode = state.lendyn = new utils$8.Buf32(ENOUGH_LENS);
  state.distcode = state.distdyn = new utils$8.Buf32(ENOUGH_DISTS);
  state.sane = 1;
  state.back = -1;
  return Z_OK;
}
function inflateReset(strm) {
  var state;
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  state.wsize = 0;
  state.whave = 0;
  state.wnext = 0;
  return inflateResetKeep(strm);
}
function inflateReset2(strm, windowBits) {
  var wrap;
  var state;
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  if (windowBits < 0) {
    wrap = 0;
    windowBits = -windowBits;
  }
  else {
    wrap = (windowBits >> 4) + 1;
    if (windowBits < 48) {
      windowBits &= 15;
    }
  }
  if (windowBits && (windowBits < 8 || windowBits > 15)) {
    return Z_STREAM_ERROR;
  }
  if (state.window !== null && state.wbits !== windowBits) {
    state.window = null;
  }
  state.wrap = wrap;
  state.wbits = windowBits;
  return inflateReset(strm);
}
function inflateInit2(strm, windowBits) {
  var ret;
  var state;
  if (!strm) { return Z_STREAM_ERROR; }
  state = new InflateState();
  strm.state = state;
  state.window = null;
  ret = inflateReset2(strm, windowBits);
  if (ret !== Z_OK) {
    strm.state = null;
  }
  return ret;
}
function inflateInit(strm) {
  return inflateInit2(strm, DEF_WBITS);
}
var virgin = true;
var lenfix, distfix;
function fixedtables(state) {
  if (virgin) {
    var sym;
    lenfix = new utils$8.Buf32(512);
    distfix = new utils$8.Buf32(32);
    sym = 0;
    while (sym < 144) { state.lens[sym++] = 8; }
    while (sym < 256) { state.lens[sym++] = 9; }
    while (sym < 280) { state.lens[sym++] = 7; }
    while (sym < 288) { state.lens[sym++] = 8; }
    inflate_table(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });
    sym = 0;
    while (sym < 32) { state.lens[sym++] = 5; }
    inflate_table(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });
    virgin = false;
  }
  state.lencode = lenfix;
  state.lenbits = 9;
  state.distcode = distfix;
  state.distbits = 5;
}
function updatewindow(strm, src, end, copy) {
  var dist;
  var state = strm.state;
  if (state.window === null) {
    state.wsize = 1 << state.wbits;
    state.wnext = 0;
    state.whave = 0;
    state.window = new utils$8.Buf8(state.wsize);
  }
  if (copy >= state.wsize) {
    utils$8.arraySet(state.window, src, end - state.wsize, state.wsize, 0);
    state.wnext = 0;
    state.whave = state.wsize;
  }
  else {
    dist = state.wsize - state.wnext;
    if (dist > copy) {
      dist = copy;
    }
    utils$8.arraySet(state.window, src, end - copy, dist, state.wnext);
    copy -= dist;
    if (copy) {
      utils$8.arraySet(state.window, src, end - copy, copy, 0);
      state.wnext = copy;
      state.whave = state.wsize;
    }
    else {
      state.wnext += dist;
      if (state.wnext === state.wsize) { state.wnext = 0; }
      if (state.whave < state.wsize) { state.whave += dist; }
    }
  }
  return 0;
}
function inflate$1(strm, flush) {
  var state;
  var input, output;
  var next;
  var put;
  var have, left;
  var hold;
  var bits;
  var _in, _out;
  var copy;
  var from;
  var from_source;
  var here = 0;
  var here_bits, here_op, here_val;
  var last_bits, last_op, last_val;
  var len;
  var ret;
  var hbuf = new utils$8.Buf8(4);
  var opts;
  var n;
  var order =
    [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];
  if (!strm || !strm.state || !strm.output ||
      (!strm.input && strm.avail_in !== 0)) {
    return Z_STREAM_ERROR;
  }
  state = strm.state;
  if (state.mode === TYPE) { state.mode = TYPEDO; }
  put = strm.next_out;
  output = strm.output;
  left = strm.avail_out;
  next = strm.next_in;
  input = strm.input;
  have = strm.avail_in;
  hold = state.hold;
  bits = state.bits;
  _in = have;
  _out = left;
  ret = Z_OK;
  inf_leave:
  for (;;) {
    switch (state.mode) {
      case HEAD:
        if (state.wrap === 0) {
          state.mode = TYPEDO;
          break;
        }
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        if ((state.wrap & 2) && hold === 0x8b1f) {
          state.check = 0;
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32(state.check, hbuf, 2, 0);
          hold = 0;
          bits = 0;
          state.mode = FLAGS;
          break;
        }
        state.flags = 0;
        if (state.head) {
          state.head.done = false;
        }
        if (!(state.wrap & 1) ||
          (((hold & 0xff) << 8) + (hold >> 8)) % 31) {
          strm.msg = 'incorrect header check';
          state.mode = BAD;
          break;
        }
        if ((hold & 0x0f) !== Z_DEFLATED) {
          strm.msg = 'unknown compression method';
          state.mode = BAD;
          break;
        }
        hold >>>= 4;
        bits -= 4;
        len = (hold & 0x0f) + 8;
        if (state.wbits === 0) {
          state.wbits = len;
        }
        else if (len > state.wbits) {
          strm.msg = 'invalid window size';
          state.mode = BAD;
          break;
        }
        state.dmax = 1 << len;
        strm.adler = state.check = 1;
        state.mode = hold & 0x200 ? DICTID : TYPE;
        hold = 0;
        bits = 0;
        break;
      case FLAGS:
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        state.flags = hold;
        if ((state.flags & 0xff) !== Z_DEFLATED) {
          strm.msg = 'unknown compression method';
          state.mode = BAD;
          break;
        }
        if (state.flags & 0xe000) {
          strm.msg = 'unknown header flags set';
          state.mode = BAD;
          break;
        }
        if (state.head) {
          state.head.text = ((hold >> 8) & 1);
        }
        if (state.flags & 0x0200) {
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32(state.check, hbuf, 2, 0);
        }
        hold = 0;
        bits = 0;
        state.mode = TIME;
      case TIME:
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        if (state.head) {
          state.head.time = hold;
        }
        if (state.flags & 0x0200) {
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          hbuf[2] = (hold >>> 16) & 0xff;
          hbuf[3] = (hold >>> 24) & 0xff;
          state.check = crc32(state.check, hbuf, 4, 0);
        }
        hold = 0;
        bits = 0;
        state.mode = OS;
      case OS:
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        if (state.head) {
          state.head.xflags = (hold & 0xff);
          state.head.os = (hold >> 8);
        }
        if (state.flags & 0x0200) {
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32(state.check, hbuf, 2, 0);
        }
        hold = 0;
        bits = 0;
        state.mode = EXLEN;
      case EXLEN:
        if (state.flags & 0x0400) {
          while (bits < 16) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          state.length = hold;
          if (state.head) {
            state.head.extra_len = hold;
          }
          if (state.flags & 0x0200) {
            hbuf[0] = hold & 0xff;
            hbuf[1] = (hold >>> 8) & 0xff;
            state.check = crc32(state.check, hbuf, 2, 0);
          }
          hold = 0;
          bits = 0;
        }
        else if (state.head) {
          state.head.extra = null;
        }
        state.mode = EXTRA;
      case EXTRA:
        if (state.flags & 0x0400) {
          copy = state.length;
          if (copy > have) { copy = have; }
          if (copy) {
            if (state.head) {
              len = state.head.extra_len - state.length;
              if (!state.head.extra) {
                state.head.extra = new Array(state.head.extra_len);
              }
              utils$8.arraySet(
                state.head.extra,
                input,
                next,
                copy,
                len
              );
            }
            if (state.flags & 0x0200) {
              state.check = crc32(state.check, input, copy, next);
            }
            have -= copy;
            next += copy;
            state.length -= copy;
          }
          if (state.length) { break inf_leave; }
        }
        state.length = 0;
        state.mode = NAME;
      case NAME:
        if (state.flags & 0x0800) {
          if (have === 0) { break inf_leave; }
          copy = 0;
          do {
            len = input[next + copy++];
            if (state.head && len &&
                (state.length < 65536 )) {
              state.head.name += String.fromCharCode(len);
            }
          } while (len && copy < have);
          if (state.flags & 0x0200) {
            state.check = crc32(state.check, input, copy, next);
          }
          have -= copy;
          next += copy;
          if (len) { break inf_leave; }
        }
        else if (state.head) {
          state.head.name = null;
        }
        state.length = 0;
        state.mode = COMMENT;
      case COMMENT:
        if (state.flags & 0x1000) {
          if (have === 0) { break inf_leave; }
          copy = 0;
          do {
            len = input[next + copy++];
            if (state.head && len &&
                (state.length < 65536 )) {
              state.head.comment += String.fromCharCode(len);
            }
          } while (len && copy < have);
          if (state.flags & 0x0200) {
            state.check = crc32(state.check, input, copy, next);
          }
          have -= copy;
          next += copy;
          if (len) { break inf_leave; }
        }
        else if (state.head) {
          state.head.comment = null;
        }
        state.mode = HCRC;
      case HCRC:
        if (state.flags & 0x0200) {
          while (bits < 16) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          if (hold !== (state.check & 0xffff)) {
            strm.msg = 'header crc mismatch';
            state.mode = BAD;
            break;
          }
          hold = 0;
          bits = 0;
        }
        if (state.head) {
          state.head.hcrc = ((state.flags >> 9) & 1);
          state.head.done = true;
        }
        strm.adler = state.check = 0;
        state.mode = TYPE;
        break;
      case DICTID:
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        strm.adler = state.check = zswap32(hold);
        hold = 0;
        bits = 0;
        state.mode = DICT;
      case DICT:
        if (state.havedict === 0) {
          strm.next_out = put;
          strm.avail_out = left;
          strm.next_in = next;
          strm.avail_in = have;
          state.hold = hold;
          state.bits = bits;
          return Z_NEED_DICT;
        }
        strm.adler = state.check = 1;
        state.mode = TYPE;
      case TYPE:
        if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }
      case TYPEDO:
        if (state.last) {
          hold >>>= bits & 7;
          bits -= bits & 7;
          state.mode = CHECK;
          break;
        }
        while (bits < 3) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        state.last = (hold & 0x01);
        hold >>>= 1;
        bits -= 1;
        switch ((hold & 0x03)) {
          case 0:
            state.mode = STORED;
            break;
          case 1:
            fixedtables(state);
            state.mode = LEN_;
            if (flush === Z_TREES) {
              hold >>>= 2;
              bits -= 2;
              break inf_leave;
            }
            break;
          case 2:
            state.mode = TABLE;
            break;
          case 3:
            strm.msg = 'invalid block type';
            state.mode = BAD;
        }
        hold >>>= 2;
        bits -= 2;
        break;
      case STORED:
        hold >>>= bits & 7;
        bits -= bits & 7;
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {
          strm.msg = 'invalid stored block lengths';
          state.mode = BAD;
          break;
        }
        state.length = hold & 0xffff;
        hold = 0;
        bits = 0;
        state.mode = COPY_;
        if (flush === Z_TREES) { break inf_leave; }
      case COPY_:
        state.mode = COPY;
      case COPY:
        copy = state.length;
        if (copy) {
          if (copy > have) { copy = have; }
          if (copy > left) { copy = left; }
          if (copy === 0) { break inf_leave; }
          utils$8.arraySet(output, input, next, copy, put);
          have -= copy;
          next += copy;
          left -= copy;
          put += copy;
          state.length -= copy;
          break;
        }
        state.mode = TYPE;
        break;
      case TABLE:
        while (bits < 14) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        state.nlen = (hold & 0x1f) + 257;
        hold >>>= 5;
        bits -= 5;
        state.ndist = (hold & 0x1f) + 1;
        hold >>>= 5;
        bits -= 5;
        state.ncode = (hold & 0x0f) + 4;
        hold >>>= 4;
        bits -= 4;
        if (state.nlen > 286 || state.ndist > 30) {
          strm.msg = 'too many length or distance symbols';
          state.mode = BAD;
          break;
        }
        state.have = 0;
        state.mode = LENLENS;
      case LENLENS:
        while (state.have < state.ncode) {
          while (bits < 3) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          state.lens[order[state.have++]] = (hold & 0x07);
          hold >>>= 3;
          bits -= 3;
        }
        while (state.have < 19) {
          state.lens[order[state.have++]] = 0;
        }
        state.lencode = state.lendyn;
        state.lenbits = 7;
        opts = { bits: state.lenbits };
        ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
        state.lenbits = opts.bits;
        if (ret) {
          strm.msg = 'invalid code lengths set';
          state.mode = BAD;
          break;
        }
        state.have = 0;
        state.mode = CODELENS;
      case CODELENS:
        while (state.have < state.nlen + state.ndist) {
          for (;;) {
            here = state.lencode[hold & ((1 << state.lenbits) - 1)];
            here_bits = here >>> 24;
            here_op = (here >>> 16) & 0xff;
            here_val = here & 0xffff;
            if ((here_bits) <= bits) { break; }
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          if (here_val < 16) {
            hold >>>= here_bits;
            bits -= here_bits;
            state.lens[state.have++] = here_val;
          }
          else {
            if (here_val === 16) {
              n = here_bits + 2;
              while (bits < n) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              hold >>>= here_bits;
              bits -= here_bits;
              if (state.have === 0) {
                strm.msg = 'invalid bit length repeat';
                state.mode = BAD;
                break;
              }
              len = state.lens[state.have - 1];
              copy = 3 + (hold & 0x03);
              hold >>>= 2;
              bits -= 2;
            }
            else if (here_val === 17) {
              n = here_bits + 3;
              while (bits < n) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              hold >>>= here_bits;
              bits -= here_bits;
              len = 0;
              copy = 3 + (hold & 0x07);
              hold >>>= 3;
              bits -= 3;
            }
            else {
              n = here_bits + 7;
              while (bits < n) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              hold >>>= here_bits;
              bits -= here_bits;
              len = 0;
              copy = 11 + (hold & 0x7f);
              hold >>>= 7;
              bits -= 7;
            }
            if (state.have + copy > state.nlen + state.ndist) {
              strm.msg = 'invalid bit length repeat';
              state.mode = BAD;
              break;
            }
            while (copy--) {
              state.lens[state.have++] = len;
            }
          }
        }
        if (state.mode === BAD) { break; }
        if (state.lens[256] === 0) {
          strm.msg = 'invalid code -- missing end-of-block';
          state.mode = BAD;
          break;
        }
        state.lenbits = 9;
        opts = { bits: state.lenbits };
        ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
        state.lenbits = opts.bits;
        if (ret) {
          strm.msg = 'invalid literal/lengths set';
          state.mode = BAD;
          break;
        }
        state.distbits = 6;
        state.distcode = state.distdyn;
        opts = { bits: state.distbits };
        ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
        state.distbits = opts.bits;
        if (ret) {
          strm.msg = 'invalid distances set';
          state.mode = BAD;
          break;
        }
        state.mode = LEN_;
        if (flush === Z_TREES) { break inf_leave; }
      case LEN_:
        state.mode = LEN;
      case LEN:
        if (have >= 6 && left >= 258) {
          strm.next_out = put;
          strm.avail_out = left;
          strm.next_in = next;
          strm.avail_in = have;
          state.hold = hold;
          state.bits = bits;
          inflate_fast(strm, _out);
          put = strm.next_out;
          output = strm.output;
          left = strm.avail_out;
          next = strm.next_in;
          input = strm.input;
          have = strm.avail_in;
          hold = state.hold;
          bits = state.bits;
          if (state.mode === TYPE) {
            state.back = -1;
          }
          break;
        }
        state.back = 0;
        for (;;) {
          here = state.lencode[hold & ((1 << state.lenbits) - 1)];
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;
          if (here_bits <= bits) { break; }
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        if (here_op && (here_op & 0xf0) === 0) {
          last_bits = here_bits;
          last_op = here_op;
          last_val = here_val;
          for (;;) {
            here = state.lencode[last_val +
                    ((hold & ((1 << (last_bits + last_op)) - 1)) >> last_bits)];
            here_bits = here >>> 24;
            here_op = (here >>> 16) & 0xff;
            here_val = here & 0xffff;
            if ((last_bits + here_bits) <= bits) { break; }
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          hold >>>= last_bits;
          bits -= last_bits;
          state.back += last_bits;
        }
        hold >>>= here_bits;
        bits -= here_bits;
        state.back += here_bits;
        state.length = here_val;
        if (here_op === 0) {
          state.mode = LIT;
          break;
        }
        if (here_op & 32) {
          state.back = -1;
          state.mode = TYPE;
          break;
        }
        if (here_op & 64) {
          strm.msg = 'invalid literal/length code';
          state.mode = BAD;
          break;
        }
        state.extra = here_op & 15;
        state.mode = LENEXT;
      case LENEXT:
        if (state.extra) {
          n = state.extra;
          while (bits < n) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          state.length += hold & ((1 << state.extra) - 1);
          hold >>>= state.extra;
          bits -= state.extra;
          state.back += state.extra;
        }
        state.was = state.length;
        state.mode = DIST;
      case DIST:
        for (;;) {
          here = state.distcode[hold & ((1 << state.distbits) - 1)];
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;
          if ((here_bits) <= bits) { break; }
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        if ((here_op & 0xf0) === 0) {
          last_bits = here_bits;
          last_op = here_op;
          last_val = here_val;
          for (;;) {
            here = state.distcode[last_val +
                    ((hold & ((1 << (last_bits + last_op)) - 1)) >> last_bits)];
            here_bits = here >>> 24;
            here_op = (here >>> 16) & 0xff;
            here_val = here & 0xffff;
            if ((last_bits + here_bits) <= bits) { break; }
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          hold >>>= last_bits;
          bits -= last_bits;
          state.back += last_bits;
        }
        hold >>>= here_bits;
        bits -= here_bits;
        state.back += here_bits;
        if (here_op & 64) {
          strm.msg = 'invalid distance code';
          state.mode = BAD;
          break;
        }
        state.offset = here_val;
        state.extra = (here_op) & 15;
        state.mode = DISTEXT;
      case DISTEXT:
        if (state.extra) {
          n = state.extra;
          while (bits < n) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          state.offset += hold & ((1 << state.extra) - 1);
          hold >>>= state.extra;
          bits -= state.extra;
          state.back += state.extra;
        }
        if (state.offset > state.dmax) {
          strm.msg = 'invalid distance too far back';
          state.mode = BAD;
          break;
        }
        state.mode = MATCH;
      case MATCH:
        if (left === 0) { break inf_leave; }
        copy = _out - left;
        if (state.offset > copy) {
          copy = state.offset - copy;
          if (copy > state.whave) {
            if (state.sane) {
              strm.msg = 'invalid distance too far back';
              state.mode = BAD;
              break;
            }
          }
          if (copy > state.wnext) {
            copy -= state.wnext;
            from = state.wsize - copy;
          }
          else {
            from = state.wnext - copy;
          }
          if (copy > state.length) { copy = state.length; }
          from_source = state.window;
        }
        else {
          from_source = output;
          from = put - state.offset;
          copy = state.length;
        }
        if (copy > left) { copy = left; }
        left -= copy;
        state.length -= copy;
        do {
          output[put++] = from_source[from++];
        } while (--copy);
        if (state.length === 0) { state.mode = LEN; }
        break;
      case LIT:
        if (left === 0) { break inf_leave; }
        output[put++] = state.length;
        left--;
        state.mode = LEN;
        break;
      case CHECK:
        if (state.wrap) {
          while (bits < 32) {
            if (have === 0) { break inf_leave; }
            have--;
            hold |= input[next++] << bits;
            bits += 8;
          }
          _out -= left;
          strm.total_out += _out;
          state.total += _out;
          if (_out) {
            strm.adler = state.check =
                (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));
          }
          _out = left;
          if ((state.flags ? hold : zswap32(hold)) !== state.check) {
            strm.msg = 'incorrect data check';
            state.mode = BAD;
            break;
          }
          hold = 0;
          bits = 0;
        }
        state.mode = LENGTH;
      case LENGTH:
        if (state.wrap && state.flags) {
          while (bits < 32) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          if (hold !== (state.total & 0xffffffff)) {
            strm.msg = 'incorrect length check';
            state.mode = BAD;
            break;
          }
          hold = 0;
          bits = 0;
        }
        state.mode = DONE;
      case DONE:
        ret = Z_STREAM_END;
        break inf_leave;
      case BAD:
        ret = Z_DATA_ERROR;
        break inf_leave;
      case MEM:
        return Z_MEM_ERROR;
      case SYNC:
      default:
        return Z_STREAM_ERROR;
    }
  }
  strm.next_out = put;
  strm.avail_out = left;
  strm.next_in = next;
  strm.avail_in = have;
  state.hold = hold;
  state.bits = bits;
  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&
                      (state.mode < CHECK || flush !== Z_FINISH))) {
    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) ;
  }
  _in -= strm.avail_in;
  _out -= strm.avail_out;
  strm.total_in += _in;
  strm.total_out += _out;
  state.total += _out;
  if (state.wrap && _out) {
    strm.adler = state.check =
      (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));
  }
  strm.data_type = state.bits + (state.last ? 64 : 0) +
                    (state.mode === TYPE ? 128 : 0) +
                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
  if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {
    ret = Z_BUF_ERROR;
  }
  return ret;
}
function inflateEnd(strm) {
  if (!strm || !strm.state ) {
    return Z_STREAM_ERROR;
  }
  var state = strm.state;
  if (state.window) {
    state.window = null;
  }
  strm.state = null;
  return Z_OK;
}
function inflateGetHeader(strm, head) {
  var state;
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }
  state.head = head;
  head.done = false;
  return Z_OK;
}
function inflateSetDictionary(strm, dictionary) {
  var dictLength = dictionary.length;
  var state;
  var dictid;
  var ret;
  if (!strm  || !strm.state ) { return Z_STREAM_ERROR; }
  state = strm.state;
  if (state.wrap !== 0 && state.mode !== DICT) {
    return Z_STREAM_ERROR;
  }
  if (state.mode === DICT) {
    dictid = 1;
    dictid = adler32(dictid, dictionary, dictLength, 0);
    if (dictid !== state.check) {
      return Z_DATA_ERROR;
    }
  }
  ret = updatewindow(strm, dictionary, dictLength, dictLength);
  if (ret) {
    state.mode = MEM;
    return Z_MEM_ERROR;
  }
  state.havedict = 1;
  return Z_OK;
}
inflate$2.inflateReset = inflateReset;
inflate$2.inflateReset2 = inflateReset2;
inflate$2.inflateResetKeep = inflateResetKeep;
inflate$2.inflateInit = inflateInit;
inflate$2.inflateInit2 = inflateInit2;
inflate$2.inflate = inflate$1;
inflate$2.inflateEnd = inflateEnd;
inflate$2.inflateGetHeader = inflateGetHeader;
inflate$2.inflateSetDictionary = inflateSetDictionary;
inflate$2.inflateInfo = 'pako inflate (from Nodeca project)';

var constants = {
  Z_NO_FLUSH:         0,
  Z_PARTIAL_FLUSH:    1,
  Z_SYNC_FLUSH:       2,
  Z_FULL_FLUSH:       3,
  Z_FINISH:           4,
  Z_BLOCK:            5,
  Z_TREES:            6,
  Z_OK:               0,
  Z_STREAM_END:       1,
  Z_NEED_DICT:        2,
  Z_ERRNO:           -1,
  Z_STREAM_ERROR:    -2,
  Z_DATA_ERROR:      -3,
  Z_BUF_ERROR:       -5,
  Z_NO_COMPRESSION:         0,
  Z_BEST_SPEED:             1,
  Z_BEST_COMPRESSION:       9,
  Z_DEFAULT_COMPRESSION:   -1,
  Z_FILTERED:               1,
  Z_HUFFMAN_ONLY:           2,
  Z_RLE:                    3,
  Z_FIXED:                  4,
  Z_DEFAULT_STRATEGY:       0,
  Z_BINARY:                 0,
  Z_TEXT:                   1,
  Z_UNKNOWN:                2,
  Z_DEFLATED:               8
};

(function (exports) {
	var assert = requireAssert();
	var Zstream = zstream;
	var zlib_deflate = deflate$1;
	var zlib_inflate = inflate$2;
	var constants$1 = constants;
	for (var key in constants$1) {
	  exports[key] = constants$1[key];
	}
	exports.NONE = 0;
	exports.DEFLATE = 1;
	exports.INFLATE = 2;
	exports.GZIP = 3;
	exports.GUNZIP = 4;
	exports.DEFLATERAW = 5;
	exports.INFLATERAW = 6;
	exports.UNZIP = 7;
	var GZIP_HEADER_ID1 = 0x1f;
	var GZIP_HEADER_ID2 = 0x8b;
	function Zlib(mode) {
	  if (typeof mode !== 'number' || mode < exports.DEFLATE || mode > exports.UNZIP) {
	    throw new TypeError('Bad argument');
	  }
	  this.dictionary = null;
	  this.err = 0;
	  this.flush = 0;
	  this.init_done = false;
	  this.level = 0;
	  this.memLevel = 0;
	  this.mode = mode;
	  this.strategy = 0;
	  this.windowBits = 0;
	  this.write_in_progress = false;
	  this.pending_close = false;
	  this.gzip_id_bytes_read = 0;
	}
	Zlib.prototype.close = function () {
	  if (this.write_in_progress) {
	    this.pending_close = true;
	    return;
	  }
	  this.pending_close = false;
	  assert(this.init_done, 'close before init');
	  assert(this.mode <= exports.UNZIP);
	  if (this.mode === exports.DEFLATE || this.mode === exports.GZIP || this.mode === exports.DEFLATERAW) {
	    zlib_deflate.deflateEnd(this.strm);
	  } else if (this.mode === exports.INFLATE || this.mode === exports.GUNZIP || this.mode === exports.INFLATERAW || this.mode === exports.UNZIP) {
	    zlib_inflate.inflateEnd(this.strm);
	  }
	  this.mode = exports.NONE;
	  this.dictionary = null;
	};
	Zlib.prototype.write = function (flush, input, in_off, in_len, out, out_off, out_len) {
	  return this._write(true, flush, input, in_off, in_len, out, out_off, out_len);
	};
	Zlib.prototype.writeSync = function (flush, input, in_off, in_len, out, out_off, out_len) {
	  return this._write(false, flush, input, in_off, in_len, out, out_off, out_len);
	};
	Zlib.prototype._write = function (async, flush, input, in_off, in_len, out, out_off, out_len) {
	  assert.equal(arguments.length, 8);
	  assert(this.init_done, 'write before init');
	  assert(this.mode !== exports.NONE, 'already finalized');
	  assert.equal(false, this.write_in_progress, 'write already in progress');
	  assert.equal(false, this.pending_close, 'close is pending');
	  this.write_in_progress = true;
	  assert.equal(false, flush === undefined, 'must provide flush value');
	  this.write_in_progress = true;
	  if (flush !== exports.Z_NO_FLUSH && flush !== exports.Z_PARTIAL_FLUSH && flush !== exports.Z_SYNC_FLUSH && flush !== exports.Z_FULL_FLUSH && flush !== exports.Z_FINISH && flush !== exports.Z_BLOCK) {
	    throw new Error('Invalid flush value');
	  }
	  if (input == null) {
	    input = buffer.Buffer.alloc(0);
	    in_len = 0;
	    in_off = 0;
	  }
	  this.strm.avail_in = in_len;
	  this.strm.input = input;
	  this.strm.next_in = in_off;
	  this.strm.avail_out = out_len;
	  this.strm.output = out;
	  this.strm.next_out = out_off;
	  this.flush = flush;
	  if (!async) {
	    this._process();
	    if (this._checkError()) {
	      return this._afterSync();
	    }
	    return;
	  }
	  var self = this;
	  process$1.nextTick(function () {
	    self._process();
	    self._after();
	  });
	  return this;
	};
	Zlib.prototype._afterSync = function () {
	  var avail_out = this.strm.avail_out;
	  var avail_in = this.strm.avail_in;
	  this.write_in_progress = false;
	  return [avail_in, avail_out];
	};
	Zlib.prototype._process = function () {
	  var next_expected_header_byte = null;
	  switch (this.mode) {
	    case exports.DEFLATE:
	    case exports.GZIP:
	    case exports.DEFLATERAW:
	      this.err = zlib_deflate.deflate(this.strm, this.flush);
	      break;
	    case exports.UNZIP:
	      if (this.strm.avail_in > 0) {
	        next_expected_header_byte = this.strm.next_in;
	      }
	      switch (this.gzip_id_bytes_read) {
	        case 0:
	          if (next_expected_header_byte === null) {
	            break;
	          }
	          if (this.strm.input[next_expected_header_byte] === GZIP_HEADER_ID1) {
	            this.gzip_id_bytes_read = 1;
	            next_expected_header_byte++;
	            if (this.strm.avail_in === 1) {
	              break;
	            }
	          } else {
	            this.mode = exports.INFLATE;
	            break;
	          }
	        case 1:
	          if (next_expected_header_byte === null) {
	            break;
	          }
	          if (this.strm.input[next_expected_header_byte] === GZIP_HEADER_ID2) {
	            this.gzip_id_bytes_read = 2;
	            this.mode = exports.GUNZIP;
	          } else {
	            this.mode = exports.INFLATE;
	          }
	          break;
	        default:
	          throw new Error('invalid number of gzip magic number bytes read');
	      }
	    case exports.INFLATE:
	    case exports.GUNZIP:
	    case exports.INFLATERAW:
	      this.err = zlib_inflate.inflate(this.strm, this.flush
	      );if (this.err === exports.Z_NEED_DICT && this.dictionary) {
	        this.err = zlib_inflate.inflateSetDictionary(this.strm, this.dictionary);
	        if (this.err === exports.Z_OK) {
	          this.err = zlib_inflate.inflate(this.strm, this.flush);
	        } else if (this.err === exports.Z_DATA_ERROR) {
	          this.err = exports.Z_NEED_DICT;
	        }
	      }
	      while (this.strm.avail_in > 0 && this.mode === exports.GUNZIP && this.err === exports.Z_STREAM_END && this.strm.next_in[0] !== 0x00) {
	        this.reset();
	        this.err = zlib_inflate.inflate(this.strm, this.flush);
	      }
	      break;
	    default:
	      throw new Error('Unknown mode ' + this.mode);
	  }
	};
	Zlib.prototype._checkError = function () {
	  switch (this.err) {
	    case exports.Z_OK:
	    case exports.Z_BUF_ERROR:
	      if (this.strm.avail_out !== 0 && this.flush === exports.Z_FINISH) {
	        this._error('unexpected end of file');
	        return false;
	      }
	      break;
	    case exports.Z_STREAM_END:
	      break;
	    case exports.Z_NEED_DICT:
	      if (this.dictionary == null) {
	        this._error('Missing dictionary');
	      } else {
	        this._error('Bad dictionary');
	      }
	      return false;
	    default:
	      this._error('Zlib error');
	      return false;
	  }
	  return true;
	};
	Zlib.prototype._after = function () {
	  if (!this._checkError()) {
	    return;
	  }
	  var avail_out = this.strm.avail_out;
	  var avail_in = this.strm.avail_in;
	  this.write_in_progress = false;
	  this.callback(avail_in, avail_out);
	  if (this.pending_close) {
	    this.close();
	  }
	};
	Zlib.prototype._error = function (message) {
	  if (this.strm.msg) {
	    message = this.strm.msg;
	  }
	  this.onerror(message, this.err
	  );this.write_in_progress = false;
	  if (this.pending_close) {
	    this.close();
	  }
	};
	Zlib.prototype.init = function (windowBits, level, memLevel, strategy, dictionary) {
	  assert(arguments.length === 4 || arguments.length === 5, 'init(windowBits, level, memLevel, strategy, [dictionary])');
	  assert(windowBits >= 8 && windowBits <= 15, 'invalid windowBits');
	  assert(level >= -1 && level <= 9, 'invalid compression level');
	  assert(memLevel >= 1 && memLevel <= 9, 'invalid memlevel');
	  assert(strategy === exports.Z_FILTERED || strategy === exports.Z_HUFFMAN_ONLY || strategy === exports.Z_RLE || strategy === exports.Z_FIXED || strategy === exports.Z_DEFAULT_STRATEGY, 'invalid strategy');
	  this._init(level, windowBits, memLevel, strategy, dictionary);
	  this._setDictionary();
	};
	Zlib.prototype.params = function () {
	  throw new Error('deflateParams Not supported');
	};
	Zlib.prototype.reset = function () {
	  this._reset();
	  this._setDictionary();
	};
	Zlib.prototype._init = function (level, windowBits, memLevel, strategy, dictionary) {
	  this.level = level;
	  this.windowBits = windowBits;
	  this.memLevel = memLevel;
	  this.strategy = strategy;
	  this.flush = exports.Z_NO_FLUSH;
	  this.err = exports.Z_OK;
	  if (this.mode === exports.GZIP || this.mode === exports.GUNZIP) {
	    this.windowBits += 16;
	  }
	  if (this.mode === exports.UNZIP) {
	    this.windowBits += 32;
	  }
	  if (this.mode === exports.DEFLATERAW || this.mode === exports.INFLATERAW) {
	    this.windowBits = -1 * this.windowBits;
	  }
	  this.strm = new Zstream();
	  switch (this.mode) {
	    case exports.DEFLATE:
	    case exports.GZIP:
	    case exports.DEFLATERAW:
	      this.err = zlib_deflate.deflateInit2(this.strm, this.level, exports.Z_DEFLATED, this.windowBits, this.memLevel, this.strategy);
	      break;
	    case exports.INFLATE:
	    case exports.GUNZIP:
	    case exports.INFLATERAW:
	    case exports.UNZIP:
	      this.err = zlib_inflate.inflateInit2(this.strm, this.windowBits);
	      break;
	    default:
	      throw new Error('Unknown mode ' + this.mode);
	  }
	  if (this.err !== exports.Z_OK) {
	    this._error('Init error');
	  }
	  this.dictionary = dictionary;
	  this.write_in_progress = false;
	  this.init_done = true;
	};
	Zlib.prototype._setDictionary = function () {
	  if (this.dictionary == null) {
	    return;
	  }
	  this.err = exports.Z_OK;
	  switch (this.mode) {
	    case exports.DEFLATE:
	    case exports.DEFLATERAW:
	      this.err = zlib_deflate.deflateSetDictionary(this.strm, this.dictionary);
	      break;
	  }
	  if (this.err !== exports.Z_OK) {
	    this._error('Failed to set dictionary');
	  }
	};
	Zlib.prototype._reset = function () {
	  this.err = exports.Z_OK;
	  switch (this.mode) {
	    case exports.DEFLATE:
	    case exports.DEFLATERAW:
	    case exports.GZIP:
	      this.err = zlib_deflate.deflateReset(this.strm);
	      break;
	    case exports.INFLATE:
	    case exports.INFLATERAW:
	    case exports.GUNZIP:
	      this.err = zlib_inflate.inflateReset(this.strm);
	      break;
	  }
	  if (this.err !== exports.Z_OK) {
	    this._error('Failed to reset stream');
	  }
	};
	exports.Zlib = Zlib; 
} (binding));

(function (exports) {
	var Buffer = buffer.Buffer;
	var Transform = requireStreamBrowserify().Transform;
	var binding$1 = binding;
	var util$1 = util;
	var assert = requireAssert().ok;
	var kMaxLength = buffer.kMaxLength;
	var kRangeErrorMessage = 'Cannot create final Buffer. It would be larger ' + 'than 0x' + kMaxLength.toString(16) + ' bytes';
	binding$1.Z_MIN_WINDOWBITS = 8;
	binding$1.Z_MAX_WINDOWBITS = 15;
	binding$1.Z_DEFAULT_WINDOWBITS = 15;
	binding$1.Z_MIN_CHUNK = 64;
	binding$1.Z_MAX_CHUNK = Infinity;
	binding$1.Z_DEFAULT_CHUNK = 16 * 1024;
	binding$1.Z_MIN_MEMLEVEL = 1;
	binding$1.Z_MAX_MEMLEVEL = 9;
	binding$1.Z_DEFAULT_MEMLEVEL = 8;
	binding$1.Z_MIN_LEVEL = -1;
	binding$1.Z_MAX_LEVEL = 9;
	binding$1.Z_DEFAULT_LEVEL = binding$1.Z_DEFAULT_COMPRESSION;
	var bkeys = Object.keys(binding$1);
	for (var bk = 0; bk < bkeys.length; bk++) {
	  var bkey = bkeys[bk];
	  if (bkey.match(/^Z/)) {
	    Object.defineProperty(exports, bkey, {
	      enumerable: true, value: binding$1[bkey], writable: false
	    });
	  }
	}
	var codes = {
	  Z_OK: binding$1.Z_OK,
	  Z_STREAM_END: binding$1.Z_STREAM_END,
	  Z_NEED_DICT: binding$1.Z_NEED_DICT,
	  Z_ERRNO: binding$1.Z_ERRNO,
	  Z_STREAM_ERROR: binding$1.Z_STREAM_ERROR,
	  Z_DATA_ERROR: binding$1.Z_DATA_ERROR,
	  Z_MEM_ERROR: binding$1.Z_MEM_ERROR,
	  Z_BUF_ERROR: binding$1.Z_BUF_ERROR,
	  Z_VERSION_ERROR: binding$1.Z_VERSION_ERROR
	};
	var ckeys = Object.keys(codes);
	for (var ck = 0; ck < ckeys.length; ck++) {
	  var ckey = ckeys[ck];
	  codes[codes[ckey]] = ckey;
	}
	Object.defineProperty(exports, 'codes', {
	  enumerable: true, value: Object.freeze(codes), writable: false
	});
	exports.Deflate = Deflate;
	exports.Inflate = Inflate;
	exports.Gzip = Gzip;
	exports.Gunzip = Gunzip;
	exports.DeflateRaw = DeflateRaw;
	exports.InflateRaw = InflateRaw;
	exports.Unzip = Unzip;
	exports.createDeflate = function (o) {
	  return new Deflate(o);
	};
	exports.createInflate = function (o) {
	  return new Inflate(o);
	};
	exports.createDeflateRaw = function (o) {
	  return new DeflateRaw(o);
	};
	exports.createInflateRaw = function (o) {
	  return new InflateRaw(o);
	};
	exports.createGzip = function (o) {
	  return new Gzip(o);
	};
	exports.createGunzip = function (o) {
	  return new Gunzip(o);
	};
	exports.createUnzip = function (o) {
	  return new Unzip(o);
	};
	exports.deflate = function (buffer, opts, callback) {
	  if (typeof opts === 'function') {
	    callback = opts;
	    opts = {};
	  }
	  return zlibBuffer(new Deflate(opts), buffer, callback);
	};
	exports.deflateSync = function (buffer, opts) {
	  return zlibBufferSync(new Deflate(opts), buffer);
	};
	exports.gzip = function (buffer, opts, callback) {
	  if (typeof opts === 'function') {
	    callback = opts;
	    opts = {};
	  }
	  return zlibBuffer(new Gzip(opts), buffer, callback);
	};
	exports.gzipSync = function (buffer, opts) {
	  return zlibBufferSync(new Gzip(opts), buffer);
	};
	exports.deflateRaw = function (buffer, opts, callback) {
	  if (typeof opts === 'function') {
	    callback = opts;
	    opts = {};
	  }
	  return zlibBuffer(new DeflateRaw(opts), buffer, callback);
	};
	exports.deflateRawSync = function (buffer, opts) {
	  return zlibBufferSync(new DeflateRaw(opts), buffer);
	};
	exports.unzip = function (buffer, opts, callback) {
	  if (typeof opts === 'function') {
	    callback = opts;
	    opts = {};
	  }
	  return zlibBuffer(new Unzip(opts), buffer, callback);
	};
	exports.unzipSync = function (buffer, opts) {
	  return zlibBufferSync(new Unzip(opts), buffer);
	};
	exports.inflate = function (buffer, opts, callback) {
	  if (typeof opts === 'function') {
	    callback = opts;
	    opts = {};
	  }
	  return zlibBuffer(new Inflate(opts), buffer, callback);
	};
	exports.inflateSync = function (buffer, opts) {
	  return zlibBufferSync(new Inflate(opts), buffer);
	};
	exports.gunzip = function (buffer, opts, callback) {
	  if (typeof opts === 'function') {
	    callback = opts;
	    opts = {};
	  }
	  return zlibBuffer(new Gunzip(opts), buffer, callback);
	};
	exports.gunzipSync = function (buffer, opts) {
	  return zlibBufferSync(new Gunzip(opts), buffer);
	};
	exports.inflateRaw = function (buffer, opts, callback) {
	  if (typeof opts === 'function') {
	    callback = opts;
	    opts = {};
	  }
	  return zlibBuffer(new InflateRaw(opts), buffer, callback);
	};
	exports.inflateRawSync = function (buffer, opts) {
	  return zlibBufferSync(new InflateRaw(opts), buffer);
	};
	function zlibBuffer(engine, buffer, callback) {
	  var buffers = [];
	  var nread = 0;
	  engine.on('error', onError);
	  engine.on('end', onEnd);
	  engine.end(buffer);
	  flow();
	  function flow() {
	    var chunk;
	    while (null !== (chunk = engine.read())) {
	      buffers.push(chunk);
	      nread += chunk.length;
	    }
	    engine.once('readable', flow);
	  }
	  function onError(err) {
	    engine.removeListener('end', onEnd);
	    engine.removeListener('readable', flow);
	    callback(err);
	  }
	  function onEnd() {
	    var buf;
	    var err = null;
	    if (nread >= kMaxLength) {
	      err = new RangeError(kRangeErrorMessage);
	    } else {
	      buf = Buffer.concat(buffers, nread);
	    }
	    buffers = [];
	    engine.close();
	    callback(err, buf);
	  }
	}
	function zlibBufferSync(engine, buffer) {
	  if (typeof buffer === 'string') buffer = Buffer.from(buffer);
	  if (!Buffer.isBuffer(buffer)) throw new TypeError('Not a string or buffer');
	  var flushFlag = engine._finishFlushFlag;
	  return engine._processChunk(buffer, flushFlag);
	}
	function Deflate(opts) {
	  if (!(this instanceof Deflate)) return new Deflate(opts);
	  Zlib.call(this, opts, binding$1.DEFLATE);
	}
	function Inflate(opts) {
	  if (!(this instanceof Inflate)) return new Inflate(opts);
	  Zlib.call(this, opts, binding$1.INFLATE);
	}
	function Gzip(opts) {
	  if (!(this instanceof Gzip)) return new Gzip(opts);
	  Zlib.call(this, opts, binding$1.GZIP);
	}
	function Gunzip(opts) {
	  if (!(this instanceof Gunzip)) return new Gunzip(opts);
	  Zlib.call(this, opts, binding$1.GUNZIP);
	}
	function DeflateRaw(opts) {
	  if (!(this instanceof DeflateRaw)) return new DeflateRaw(opts);
	  Zlib.call(this, opts, binding$1.DEFLATERAW);
	}
	function InflateRaw(opts) {
	  if (!(this instanceof InflateRaw)) return new InflateRaw(opts);
	  Zlib.call(this, opts, binding$1.INFLATERAW);
	}
	function Unzip(opts) {
	  if (!(this instanceof Unzip)) return new Unzip(opts);
	  Zlib.call(this, opts, binding$1.UNZIP);
	}
	function isValidFlushFlag(flag) {
	  return flag === binding$1.Z_NO_FLUSH || flag === binding$1.Z_PARTIAL_FLUSH || flag === binding$1.Z_SYNC_FLUSH || flag === binding$1.Z_FULL_FLUSH || flag === binding$1.Z_FINISH || flag === binding$1.Z_BLOCK;
	}
	function Zlib(opts, mode) {
	  var _this = this;
	  this._opts = opts = opts || {};
	  this._chunkSize = opts.chunkSize || exports.Z_DEFAULT_CHUNK;
	  Transform.call(this, opts);
	  if (opts.flush && !isValidFlushFlag(opts.flush)) {
	    throw new Error('Invalid flush flag: ' + opts.flush);
	  }
	  if (opts.finishFlush && !isValidFlushFlag(opts.finishFlush)) {
	    throw new Error('Invalid flush flag: ' + opts.finishFlush);
	  }
	  this._flushFlag = opts.flush || binding$1.Z_NO_FLUSH;
	  this._finishFlushFlag = typeof opts.finishFlush !== 'undefined' ? opts.finishFlush : binding$1.Z_FINISH;
	  if (opts.chunkSize) {
	    if (opts.chunkSize < exports.Z_MIN_CHUNK || opts.chunkSize > exports.Z_MAX_CHUNK) {
	      throw new Error('Invalid chunk size: ' + opts.chunkSize);
	    }
	  }
	  if (opts.windowBits) {
	    if (opts.windowBits < exports.Z_MIN_WINDOWBITS || opts.windowBits > exports.Z_MAX_WINDOWBITS) {
	      throw new Error('Invalid windowBits: ' + opts.windowBits);
	    }
	  }
	  if (opts.level) {
	    if (opts.level < exports.Z_MIN_LEVEL || opts.level > exports.Z_MAX_LEVEL) {
	      throw new Error('Invalid compression level: ' + opts.level);
	    }
	  }
	  if (opts.memLevel) {
	    if (opts.memLevel < exports.Z_MIN_MEMLEVEL || opts.memLevel > exports.Z_MAX_MEMLEVEL) {
	      throw new Error('Invalid memLevel: ' + opts.memLevel);
	    }
	  }
	  if (opts.strategy) {
	    if (opts.strategy != exports.Z_FILTERED && opts.strategy != exports.Z_HUFFMAN_ONLY && opts.strategy != exports.Z_RLE && opts.strategy != exports.Z_FIXED && opts.strategy != exports.Z_DEFAULT_STRATEGY) {
	      throw new Error('Invalid strategy: ' + opts.strategy);
	    }
	  }
	  if (opts.dictionary) {
	    if (!Buffer.isBuffer(opts.dictionary)) {
	      throw new Error('Invalid dictionary: it should be a Buffer instance');
	    }
	  }
	  this._handle = new binding$1.Zlib(mode);
	  var self = this;
	  this._hadError = false;
	  this._handle.onerror = function (message, errno) {
	    _close(self);
	    self._hadError = true;
	    var error = new Error(message);
	    error.errno = errno;
	    error.code = exports.codes[errno];
	    self.emit('error', error);
	  };
	  var level = exports.Z_DEFAULT_COMPRESSION;
	  if (typeof opts.level === 'number') level = opts.level;
	  var strategy = exports.Z_DEFAULT_STRATEGY;
	  if (typeof opts.strategy === 'number') strategy = opts.strategy;
	  this._handle.init(opts.windowBits || exports.Z_DEFAULT_WINDOWBITS, level, opts.memLevel || exports.Z_DEFAULT_MEMLEVEL, strategy, opts.dictionary);
	  this._buffer = Buffer.allocUnsafe(this._chunkSize);
	  this._offset = 0;
	  this._level = level;
	  this._strategy = strategy;
	  this.once('end', this.close);
	  Object.defineProperty(this, '_closed', {
	    get: function () {
	      return !_this._handle;
	    },
	    configurable: true,
	    enumerable: true
	  });
	}
	util$1.inherits(Zlib, Transform);
	Zlib.prototype.params = function (level, strategy, callback) {
	  if (level < exports.Z_MIN_LEVEL || level > exports.Z_MAX_LEVEL) {
	    throw new RangeError('Invalid compression level: ' + level);
	  }
	  if (strategy != exports.Z_FILTERED && strategy != exports.Z_HUFFMAN_ONLY && strategy != exports.Z_RLE && strategy != exports.Z_FIXED && strategy != exports.Z_DEFAULT_STRATEGY) {
	    throw new TypeError('Invalid strategy: ' + strategy);
	  }
	  if (this._level !== level || this._strategy !== strategy) {
	    var self = this;
	    this.flush(binding$1.Z_SYNC_FLUSH, function () {
	      assert(self._handle, 'zlib binding closed');
	      self._handle.params(level, strategy);
	      if (!self._hadError) {
	        self._level = level;
	        self._strategy = strategy;
	        if (callback) callback();
	      }
	    });
	  } else {
	    process$1.nextTick(callback);
	  }
	};
	Zlib.prototype.reset = function () {
	  assert(this._handle, 'zlib binding closed');
	  return this._handle.reset();
	};
	Zlib.prototype._flush = function (callback) {
	  this._transform(Buffer.alloc(0), '', callback);
	};
	Zlib.prototype.flush = function (kind, callback) {
	  var _this2 = this;
	  var ws = this._writableState;
	  if (typeof kind === 'function' || kind === undefined && !callback) {
	    callback = kind;
	    kind = binding$1.Z_FULL_FLUSH;
	  }
	  if (ws.ended) {
	    if (callback) process$1.nextTick(callback);
	  } else if (ws.ending) {
	    if (callback) this.once('end', callback);
	  } else if (ws.needDrain) {
	    if (callback) {
	      this.once('drain', function () {
	        return _this2.flush(kind, callback);
	      });
	    }
	  } else {
	    this._flushFlag = kind;
	    this.write(Buffer.alloc(0), '', callback);
	  }
	};
	Zlib.prototype.close = function (callback) {
	  _close(this, callback);
	  process$1.nextTick(emitCloseNT, this);
	};
	function _close(engine, callback) {
	  if (callback) process$1.nextTick(callback);
	  if (!engine._handle) return;
	  engine._handle.close();
	  engine._handle = null;
	}
	function emitCloseNT(self) {
	  self.emit('close');
	}
	Zlib.prototype._transform = function (chunk, encoding, cb) {
	  var flushFlag;
	  var ws = this._writableState;
	  var ending = ws.ending || ws.ended;
	  var last = ending && (!chunk || ws.length === chunk.length);
	  if (chunk !== null && !Buffer.isBuffer(chunk)) return cb(new Error('invalid input'));
	  if (!this._handle) return cb(new Error('zlib binding closed'));
	  if (last) flushFlag = this._finishFlushFlag;else {
	    flushFlag = this._flushFlag;
	    if (chunk.length >= ws.length) {
	      this._flushFlag = this._opts.flush || binding$1.Z_NO_FLUSH;
	    }
	  }
	  this._processChunk(chunk, flushFlag, cb);
	};
	Zlib.prototype._processChunk = function (chunk, flushFlag, cb) {
	  var availInBefore = chunk && chunk.length;
	  var availOutBefore = this._chunkSize - this._offset;
	  var inOff = 0;
	  var self = this;
	  var async = typeof cb === 'function';
	  if (!async) {
	    var buffers = [];
	    var nread = 0;
	    var error;
	    this.on('error', function (er) {
	      error = er;
	    });
	    assert(this._handle, 'zlib binding closed');
	    do {
	      var res = this._handle.writeSync(flushFlag, chunk,
	      inOff,
	      availInBefore,
	      this._buffer,
	      this._offset,
	      availOutBefore);
	    } while (!this._hadError && callback(res[0], res[1]));
	    if (this._hadError) {
	      throw error;
	    }
	    if (nread >= kMaxLength) {
	      _close(this);
	      throw new RangeError(kRangeErrorMessage);
	    }
	    var buf = Buffer.concat(buffers, nread);
	    _close(this);
	    return buf;
	  }
	  assert(this._handle, 'zlib binding closed');
	  var req = this._handle.write(flushFlag, chunk,
	  inOff,
	  availInBefore,
	  this._buffer,
	  this._offset,
	  availOutBefore);
	  req.buffer = chunk;
	  req.callback = callback;
	  function callback(availInAfter, availOutAfter) {
	    if (this) {
	      this.buffer = null;
	      this.callback = null;
	    }
	    if (self._hadError) return;
	    var have = availOutBefore - availOutAfter;
	    assert(have >= 0, 'have should not go down');
	    if (have > 0) {
	      var out = self._buffer.slice(self._offset, self._offset + have);
	      self._offset += have;
	      if (async) {
	        self.push(out);
	      } else {
	        buffers.push(out);
	        nread += out.length;
	      }
	    }
	    if (availOutAfter === 0 || self._offset >= self._chunkSize) {
	      availOutBefore = self._chunkSize;
	      self._offset = 0;
	      self._buffer = Buffer.allocUnsafe(self._chunkSize);
	    }
	    if (availOutAfter === 0) {
	      inOff += availInBefore - availInAfter;
	      availInBefore = availInAfter;
	      if (!async) return true;
	      var newReq = self._handle.write(flushFlag, chunk, inOff, availInBefore, self._buffer, self._offset, self._chunkSize);
	      newReq.callback = callback;
	      newReq.buffer = chunk;
	      return;
	    }
	    if (!async) return false;
	    cb();
	  }
	};
	util$1.inherits(Deflate, Zlib);
	util$1.inherits(Inflate, Zlib);
	util$1.inherits(Gzip, Zlib);
	util$1.inherits(Gunzip, Zlib);
	util$1.inherits(DeflateRaw, Zlib);
	util$1.inherits(InflateRaw, Zlib);
	util$1.inherits(Unzip, Zlib); 
} (lib));

var zlib$1 = /*@__PURE__*/getDefaultExportFromCjs$1(lib);

var cryptoJs = {exports: {}};

function commonjsRequire$1(path) {
	throw new Error('Could not dynamically require "' + path + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
}

var core = {exports: {}};

var hasRequiredCore;

function requireCore () {
	if (hasRequiredCore) return core.exports;
	hasRequiredCore = 1;
	(function (module, exports) {
(function (root, factory) {
			{
				module.exports = factory();
			}
		}(commonjsGlobal$1, function () {
			var CryptoJS = CryptoJS || (function (Math, undefined$1) {
			    var crypto;
			    if (typeof window !== 'undefined' && window.crypto) {
			        crypto = window.crypto;
			    }
			    if (typeof self !== 'undefined' && self.crypto) {
			        crypto = self.crypto;
			    }
			    if (typeof globalThis !== 'undefined' && globalThis.crypto) {
			        crypto = globalThis.crypto;
			    }
			    if (!crypto && typeof window !== 'undefined' && window.msCrypto) {
			        crypto = window.msCrypto;
			    }
			    if (!crypto && typeof commonjsGlobal$1 !== 'undefined' && commonjsGlobal$1.crypto) {
			        crypto = commonjsGlobal$1.crypto;
			    }
			    if (!crypto && typeof commonjsRequire$1 === 'function') {
			        try {
			            crypto = require('crypto');
			        } catch (err) {}
			    }
			    var cryptoSecureRandomInt = function () {
			        if (crypto) {
			            if (typeof crypto.getRandomValues === 'function') {
			                try {
			                    return crypto.getRandomValues(new Uint32Array(1))[0];
			                } catch (err) {}
			            }
			            if (typeof crypto.randomBytes === 'function') {
			                try {
			                    return crypto.randomBytes(4).readInt32LE();
			                } catch (err) {}
			            }
			        }
			        throw new Error('Native crypto module could not be used to get secure random number.');
			    };
			    var create = Object.create || (function () {
			        function F() {}
			        return function (obj) {
			            var subtype;
			            F.prototype = obj;
			            subtype = new F();
			            F.prototype = null;
			            return subtype;
			        };
			    }());
			    var C = {};
			    var C_lib = C.lib = {};
			    var Base = C_lib.Base = (function () {
			        return {
			            extend: function (overrides) {
			                var subtype = create(this);
			                if (overrides) {
			                    subtype.mixIn(overrides);
			                }
			                if (!subtype.hasOwnProperty('init') || this.init === subtype.init) {
			                    subtype.init = function () {
			                        subtype.$super.init.apply(this, arguments);
			                    };
			                }
			                subtype.init.prototype = subtype;
			                subtype.$super = this;
			                return subtype;
			            },
			            create: function () {
			                var instance = this.extend();
			                instance.init.apply(instance, arguments);
			                return instance;
			            },
			            init: function () {
			            },
			            mixIn: function (properties) {
			                for (var propertyName in properties) {
			                    if (properties.hasOwnProperty(propertyName)) {
			                        this[propertyName] = properties[propertyName];
			                    }
			                }
			                if (properties.hasOwnProperty('toString')) {
			                    this.toString = properties.toString;
			                }
			            },
			            clone: function () {
			                return this.init.prototype.extend(this);
			            }
			        };
			    }());
			    var WordArray = C_lib.WordArray = Base.extend({
			        init: function (words, sigBytes) {
			            words = this.words = words || [];
			            if (sigBytes != undefined$1) {
			                this.sigBytes = sigBytes;
			            } else {
			                this.sigBytes = words.length * 4;
			            }
			        },
			        toString: function (encoder) {
			            return (encoder || Hex).stringify(this);
			        },
			        concat: function (wordArray) {
			            var thisWords = this.words;
			            var thatWords = wordArray.words;
			            var thisSigBytes = this.sigBytes;
			            var thatSigBytes = wordArray.sigBytes;
			            this.clamp();
			            if (thisSigBytes % 4) {
			                for (var i = 0; i < thatSigBytes; i++) {
			                    var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
			                    thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);
			                }
			            } else {
			                for (var j = 0; j < thatSigBytes; j += 4) {
			                    thisWords[(thisSigBytes + j) >>> 2] = thatWords[j >>> 2];
			                }
			            }
			            this.sigBytes += thatSigBytes;
			            return this;
			        },
			        clamp: function () {
			            var words = this.words;
			            var sigBytes = this.sigBytes;
			            words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);
			            words.length = Math.ceil(sigBytes / 4);
			        },
			        clone: function () {
			            var clone = Base.clone.call(this);
			            clone.words = this.words.slice(0);
			            return clone;
			        },
			        random: function (nBytes) {
			            var words = [];
			            for (var i = 0; i < nBytes; i += 4) {
			                words.push(cryptoSecureRandomInt());
			            }
			            return new WordArray.init(words, nBytes);
			        }
			    });
			    var C_enc = C.enc = {};
			    var Hex = C_enc.Hex = {
			        stringify: function (wordArray) {
			            var words = wordArray.words;
			            var sigBytes = wordArray.sigBytes;
			            var hexChars = [];
			            for (var i = 0; i < sigBytes; i++) {
			                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
			                hexChars.push((bite >>> 4).toString(16));
			                hexChars.push((bite & 0x0f).toString(16));
			            }
			            return hexChars.join('');
			        },
			        parse: function (hexStr) {
			            var hexStrLength = hexStr.length;
			            var words = [];
			            for (var i = 0; i < hexStrLength; i += 2) {
			                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);
			            }
			            return new WordArray.init(words, hexStrLength / 2);
			        }
			    };
			    var Latin1 = C_enc.Latin1 = {
			        stringify: function (wordArray) {
			            var words = wordArray.words;
			            var sigBytes = wordArray.sigBytes;
			            var latin1Chars = [];
			            for (var i = 0; i < sigBytes; i++) {
			                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
			                latin1Chars.push(String.fromCharCode(bite));
			            }
			            return latin1Chars.join('');
			        },
			        parse: function (latin1Str) {
			            var latin1StrLength = latin1Str.length;
			            var words = [];
			            for (var i = 0; i < latin1StrLength; i++) {
			                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);
			            }
			            return new WordArray.init(words, latin1StrLength);
			        }
			    };
			    var Utf8 = C_enc.Utf8 = {
			        stringify: function (wordArray) {
			            try {
			                return decodeURIComponent(escape(Latin1.stringify(wordArray)));
			            } catch (e) {
			                throw new Error('Malformed UTF-8 data');
			            }
			        },
			        parse: function (utf8Str) {
			            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
			        }
			    };
			    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
			        reset: function () {
			            this._data = new WordArray.init();
			            this._nDataBytes = 0;
			        },
			        _append: function (data) {
			            if (typeof data == 'string') {
			                data = Utf8.parse(data);
			            }
			            this._data.concat(data);
			            this._nDataBytes += data.sigBytes;
			        },
			        _process: function (doFlush) {
			            var processedWords;
			            var data = this._data;
			            var dataWords = data.words;
			            var dataSigBytes = data.sigBytes;
			            var blockSize = this.blockSize;
			            var blockSizeBytes = blockSize * 4;
			            var nBlocksReady = dataSigBytes / blockSizeBytes;
			            if (doFlush) {
			                nBlocksReady = Math.ceil(nBlocksReady);
			            } else {
			                nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);
			            }
			            var nWordsReady = nBlocksReady * blockSize;
			            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);
			            if (nWordsReady) {
			                for (var offset = 0; offset < nWordsReady; offset += blockSize) {
			                    this._doProcessBlock(dataWords, offset);
			                }
			                processedWords = dataWords.splice(0, nWordsReady);
			                data.sigBytes -= nBytesReady;
			            }
			            return new WordArray.init(processedWords, nBytesReady);
			        },
			        clone: function () {
			            var clone = Base.clone.call(this);
			            clone._data = this._data.clone();
			            return clone;
			        },
			        _minBufferSize: 0
			    });
			    C_lib.Hasher = BufferedBlockAlgorithm.extend({
			        cfg: Base.extend(),
			        init: function (cfg) {
			            this.cfg = this.cfg.extend(cfg);
			            this.reset();
			        },
			        reset: function () {
			            BufferedBlockAlgorithm.reset.call(this);
			            this._doReset();
			        },
			        update: function (messageUpdate) {
			            this._append(messageUpdate);
			            this._process();
			            return this;
			        },
			        finalize: function (messageUpdate) {
			            if (messageUpdate) {
			                this._append(messageUpdate);
			            }
			            var hash = this._doFinalize();
			            return hash;
			        },
			        blockSize: 512/32,
			        _createHelper: function (hasher) {
			            return function (message, cfg) {
			                return new hasher.init(cfg).finalize(message);
			            };
			        },
			        _createHmacHelper: function (hasher) {
			            return function (message, key) {
			                return new C_algo.HMAC.init(hasher, key).finalize(message);
			            };
			        }
			    });
			    var C_algo = C.algo = {};
			    return C;
			}(Math));
			return CryptoJS;
		})); 
	} (core));
	return core.exports;
}

var x64Core = {exports: {}};

var hasRequiredX64Core;

function requireX64Core () {
	if (hasRequiredX64Core) return x64Core.exports;
	hasRequiredX64Core = 1;
	(function (module, exports) {
(function (root, factory) {
			{
				module.exports = factory(requireCore());
			}
		}(commonjsGlobal$1, function (CryptoJS) {
			(function (undefined$1) {
			    var C = CryptoJS;
			    var C_lib = C.lib;
			    var Base = C_lib.Base;
			    var X32WordArray = C_lib.WordArray;
			    var C_x64 = C.x64 = {};
			    C_x64.Word = Base.extend({
			        init: function (high, low) {
			            this.high = high;
			            this.low = low;
			        }
			    });
			    C_x64.WordArray = Base.extend({
			        init: function (words, sigBytes) {
			            words = this.words = words || [];
			            if (sigBytes != undefined$1) {
			                this.sigBytes = sigBytes;
			            } else {
			                this.sigBytes = words.length * 8;
			            }
			        },
			        toX32: function () {
			            var x64Words = this.words;
			            var x64WordsLength = x64Words.length;
			            var x32Words = [];
			            for (var i = 0; i < x64WordsLength; i++) {
			                var x64Word = x64Words[i];
			                x32Words.push(x64Word.high);
			                x32Words.push(x64Word.low);
			            }
			            return X32WordArray.create(x32Words, this.sigBytes);
			        },
			        clone: function () {
			            var clone = Base.clone.call(this);
			            var words = clone.words = this.words.slice(0);
			            var wordsLength = words.length;
			            for (var i = 0; i < wordsLength; i++) {
			                words[i] = words[i].clone();
			            }
			            return clone;
			        }
			    });
			}());
			return CryptoJS;
		})); 
	} (x64Core));
	return x64Core.exports;
}

var libTypedarrays = {exports: {}};

var hasRequiredLibTypedarrays;

function requireLibTypedarrays () {
	if (hasRequiredLibTypedarrays) return libTypedarrays.exports;
	hasRequiredLibTypedarrays = 1;
	(function (module, exports) {
(function (root, factory) {
			{
				module.exports = factory(requireCore());
			}
		}(commonjsGlobal$1, function (CryptoJS) {
			(function () {
			    if (typeof ArrayBuffer != 'function') {
			        return;
			    }
			    var C = CryptoJS;
			    var C_lib = C.lib;
			    var WordArray = C_lib.WordArray;
			    var superInit = WordArray.init;
			    var subInit = WordArray.init = function (typedArray) {
			        if (typedArray instanceof ArrayBuffer) {
			            typedArray = new Uint8Array(typedArray);
			        }
			        if (
			            typedArray instanceof Int8Array ||
			            (typeof Uint8ClampedArray !== "undefined" && typedArray instanceof Uint8ClampedArray) ||
			            typedArray instanceof Int16Array ||
			            typedArray instanceof Uint16Array ||
			            typedArray instanceof Int32Array ||
			            typedArray instanceof Uint32Array ||
			            typedArray instanceof Float32Array ||
			            typedArray instanceof Float64Array
			        ) {
			            typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);
			        }
			        if (typedArray instanceof Uint8Array) {
			            var typedArrayByteLength = typedArray.byteLength;
			            var words = [];
			            for (var i = 0; i < typedArrayByteLength; i++) {
			                words[i >>> 2] |= typedArray[i] << (24 - (i % 4) * 8);
			            }
			            superInit.call(this, words, typedArrayByteLength);
			        } else {
			            superInit.apply(this, arguments);
			        }
			    };
			    subInit.prototype = WordArray;
			}());
			return CryptoJS.lib.WordArray;
		})); 
	} (libTypedarrays));
	return libTypedarrays.exports;
}

var encUtf16 = {exports: {}};

var hasRequiredEncUtf16;

function requireEncUtf16 () {
	if (hasRequiredEncUtf16) return encUtf16.exports;
	hasRequiredEncUtf16 = 1;
	(function (module, exports) {
(function (root, factory) {
			{
				module.exports = factory(requireCore());
			}
		}(commonjsGlobal$1, function (CryptoJS) {
			(function () {
			    var C = CryptoJS;
			    var C_lib = C.lib;
			    var WordArray = C_lib.WordArray;
			    var C_enc = C.enc;
			    C_enc.Utf16 = C_enc.Utf16BE = {
			        stringify: function (wordArray) {
			            var words = wordArray.words;
			            var sigBytes = wordArray.sigBytes;
			            var utf16Chars = [];
			            for (var i = 0; i < sigBytes; i += 2) {
			                var codePoint = (words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff;
			                utf16Chars.push(String.fromCharCode(codePoint));
			            }
			            return utf16Chars.join('');
			        },
			        parse: function (utf16Str) {
			            var utf16StrLength = utf16Str.length;
			            var words = [];
			            for (var i = 0; i < utf16StrLength; i++) {
			                words[i >>> 1] |= utf16Str.charCodeAt(i) << (16 - (i % 2) * 16);
			            }
			            return WordArray.create(words, utf16StrLength * 2);
			        }
			    };
			    C_enc.Utf16LE = {
			        stringify: function (wordArray) {
			            var words = wordArray.words;
			            var sigBytes = wordArray.sigBytes;
			            var utf16Chars = [];
			            for (var i = 0; i < sigBytes; i += 2) {
			                var codePoint = swapEndian((words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff);
			                utf16Chars.push(String.fromCharCode(codePoint));
			            }
			            return utf16Chars.join('');
			        },
			        parse: function (utf16Str) {
			            var utf16StrLength = utf16Str.length;
			            var words = [];
			            for (var i = 0; i < utf16StrLength; i++) {
			                words[i >>> 1] |= swapEndian(utf16Str.charCodeAt(i) << (16 - (i % 2) * 16));
			            }
			            return WordArray.create(words, utf16StrLength * 2);
			        }
			    };
			    function swapEndian(word) {
			        return ((word << 8) & 0xff00ff00) | ((word >>> 8) & 0x00ff00ff);
			    }
			}());
			return CryptoJS.enc.Utf16;
		})); 
	} (encUtf16));
	return encUtf16.exports;
}

var encBase64 = {exports: {}};

var hasRequiredEncBase64;

function requireEncBase64 () {
	if (hasRequiredEncBase64) return encBase64.exports;
	hasRequiredEncBase64 = 1;
	(function (module, exports) {
(function (root, factory) {
			{
				module.exports = factory(requireCore());
			}
		}(commonjsGlobal$1, function (CryptoJS) {
			(function () {
			    var C = CryptoJS;
			    var C_lib = C.lib;
			    var WordArray = C_lib.WordArray;
			    var C_enc = C.enc;
			    C_enc.Base64 = {
			        stringify: function (wordArray) {
			            var words = wordArray.words;
			            var sigBytes = wordArray.sigBytes;
			            var map = this._map;
			            wordArray.clamp();
			            var base64Chars = [];
			            for (var i = 0; i < sigBytes; i += 3) {
			                var byte1 = (words[i >>> 2]       >>> (24 - (i % 4) * 8))       & 0xff;
			                var byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;
			                var byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;
			                var triplet = (byte1 << 16) | (byte2 << 8) | byte3;
			                for (var j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j++) {
			                    base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));
			                }
			            }
			            var paddingChar = map.charAt(64);
			            if (paddingChar) {
			                while (base64Chars.length % 4) {
			                    base64Chars.push(paddingChar);
			                }
			            }
			            return base64Chars.join('');
			        },
			        parse: function (base64Str) {
			            var base64StrLength = base64Str.length;
			            var map = this._map;
			            var reverseMap = this._reverseMap;
			            if (!reverseMap) {
			                    reverseMap = this._reverseMap = [];
			                    for (var j = 0; j < map.length; j++) {
			                        reverseMap[map.charCodeAt(j)] = j;
			                    }
			            }
			            var paddingChar = map.charAt(64);
			            if (paddingChar) {
			                var paddingIndex = base64Str.indexOf(paddingChar);
			                if (paddingIndex !== -1) {
			                    base64StrLength = paddingIndex;
			                }
			            }
			            return parseLoop(base64Str, base64StrLength, reverseMap);
			        },
			        _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='
			    };
			    function parseLoop(base64Str, base64StrLength, reverseMap) {
			      var words = [];
			      var nBytes = 0;
			      for (var i = 0; i < base64StrLength; i++) {
			          if (i % 4) {
			              var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << ((i % 4) * 2);
			              var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> (6 - (i % 4) * 2);
			              var bitsCombined = bits1 | bits2;
			              words[nBytes >>> 2] |= bitsCombined << (24 - (nBytes % 4) * 8);
			              nBytes++;
			          }
			      }
			      return WordArray.create(words, nBytes);
			    }
			}());
			return CryptoJS.enc.Base64;
		})); 
	} (encBase64));
	return encBase64.exports;
}

var encBase64url = {exports: {}};

var hasRequiredEncBase64url;

function requireEncBase64url () {
	if (hasRequiredEncBase64url) return encBase64url.exports;
	hasRequiredEncBase64url = 1;
	(function (module, exports) {
(function (root, factory) {
			{
				module.exports = factory(requireCore());
			}
		}(commonjsGlobal$1, function (CryptoJS) {
			(function () {
			    var C = CryptoJS;
			    var C_lib = C.lib;
			    var WordArray = C_lib.WordArray;
			    var C_enc = C.enc;
			    C_enc.Base64url = {
			        stringify: function (wordArray, urlSafe) {
			            if (urlSafe === undefined) {
			                urlSafe = true;
			            }
			            var words = wordArray.words;
			            var sigBytes = wordArray.sigBytes;
			            var map = urlSafe ? this._safe_map : this._map;
			            wordArray.clamp();
			            var base64Chars = [];
			            for (var i = 0; i < sigBytes; i += 3) {
			                var byte1 = (words[i >>> 2]       >>> (24 - (i % 4) * 8))       & 0xff;
			                var byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;
			                var byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;
			                var triplet = (byte1 << 16) | (byte2 << 8) | byte3;
			                for (var j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j++) {
			                    base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));
			                }
			            }
			            var paddingChar = map.charAt(64);
			            if (paddingChar) {
			                while (base64Chars.length % 4) {
			                    base64Chars.push(paddingChar);
			                }
			            }
			            return base64Chars.join('');
			        },
			        parse: function (base64Str, urlSafe) {
			            if (urlSafe === undefined) {
			                urlSafe = true;
			            }
			            var base64StrLength = base64Str.length;
			            var map = urlSafe ? this._safe_map : this._map;
			            var reverseMap = this._reverseMap;
			            if (!reverseMap) {
			                reverseMap = this._reverseMap = [];
			                for (var j = 0; j < map.length; j++) {
			                    reverseMap[map.charCodeAt(j)] = j;
			                }
			            }
			            var paddingChar = map.charAt(64);
			            if (paddingChar) {
			                var paddingIndex = base64Str.indexOf(paddingChar);
			                if (paddingIndex !== -1) {
			                    base64StrLength = paddingIndex;
			                }
			            }
			            return parseLoop(base64Str, base64StrLength, reverseMap);
			        },
			        _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',
			        _safe_map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',
			    };
			    function parseLoop(base64Str, base64StrLength, reverseMap) {
			        var words = [];
			        var nBytes = 0;
			        for (var i = 0; i < base64StrLength; i++) {
			            if (i % 4) {
			                var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << ((i % 4) * 2);
			                var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> (6 - (i % 4) * 2);
			                var bitsCombined = bits1 | bits2;
			                words[nBytes >>> 2] |= bitsCombined << (24 - (nBytes % 4) * 8);
			                nBytes++;
			            }
			        }
			        return WordArray.create(words, nBytes);
			    }
			}());
			return CryptoJS.enc.Base64url;
		})); 
	} (encBase64url));
	return encBase64url.exports;
}

var md5 = {exports: {}};

var hasRequiredMd5;

function requireMd5 () {
	if (hasRequiredMd5) return md5.exports;
	hasRequiredMd5 = 1;
	(function (module, exports) {
(function (root, factory) {
			{
				module.exports = factory(requireCore());
			}
		}(commonjsGlobal$1, function (CryptoJS) {
			(function (Math) {
			    var C = CryptoJS;
			    var C_lib = C.lib;
			    var WordArray = C_lib.WordArray;
			    var Hasher = C_lib.Hasher;
			    var C_algo = C.algo;
			    var T = [];
			    (function () {
			        for (var i = 0; i < 64; i++) {
			            T[i] = (Math.abs(Math.sin(i + 1)) * 0x100000000) | 0;
			        }
			    }());
			    var MD5 = C_algo.MD5 = Hasher.extend({
			        _doReset: function () {
			            this._hash = new WordArray.init([
			                0x67452301, 0xefcdab89,
			                0x98badcfe, 0x10325476
			            ]);
			        },
			        _doProcessBlock: function (M, offset) {
			            for (var i = 0; i < 16; i++) {
			                var offset_i = offset + i;
			                var M_offset_i = M[offset_i];
			                M[offset_i] = (
			                    (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |
			                    (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)
			                );
			            }
			            var H = this._hash.words;
			            var M_offset_0  = M[offset + 0];
			            var M_offset_1  = M[offset + 1];
			            var M_offset_2  = M[offset + 2];
			            var M_offset_3  = M[offset + 3];
			            var M_offset_4  = M[offset + 4];
			            var M_offset_5  = M[offset + 5];
			            var M_offset_6  = M[offset + 6];
			            var M_offset_7  = M[offset + 7];
			            var M_offset_8  = M[offset + 8];
			            var M_offset_9  = M[offset + 9];
			            var M_offset_10 = M[offset + 10];
			            var M_offset_11 = M[offset + 11];
			            var M_offset_12 = M[offset + 12];
			            var M_offset_13 = M[offset + 13];
			            var M_offset_14 = M[offset + 14];
			            var M_offset_15 = M[offset + 15];
			            var a = H[0];
			            var b = H[1];
			            var c = H[2];
			            var d = H[3];
			            a = FF(a, b, c, d, M_offset_0,  7,  T[0]);
			            d = FF(d, a, b, c, M_offset_1,  12, T[1]);
			            c = FF(c, d, a, b, M_offset_2,  17, T[2]);
			            b = FF(b, c, d, a, M_offset_3,  22, T[3]);
			            a = FF(a, b, c, d, M_offset_4,  7,  T[4]);
			            d = FF(d, a, b, c, M_offset_5,  12, T[5]);
			            c = FF(c, d, a, b, M_offset_6,  17, T[6]);
			            b = FF(b, c, d, a, M_offset_7,  22, T[7]);
			            a = FF(a, b, c, d, M_offset_8,  7,  T[8]);
			            d = FF(d, a, b, c, M_offset_9,  12, T[9]);
			            c = FF(c, d, a, b, M_offset_10, 17, T[10]);
			            b = FF(b, c, d, a, M_offset_11, 22, T[11]);
			            a = FF(a, b, c, d, M_offset_12, 7,  T[12]);
			            d = FF(d, a, b, c, M_offset_13, 12, T[13]);
			            c = FF(c, d, a, b, M_offset_14, 17, T[14]);
			            b = FF(b, c, d, a, M_offset_15, 22, T[15]);
			            a = GG(a, b, c, d, M_offset_1,  5,  T[16]);
			            d = GG(d, a, b, c, M_offset_6,  9,  T[17]);
			            c = GG(c, d, a, b, M_offset_11, 14, T[18]);
			            b = GG(b, c, d, a, M_offset_0,  20, T[19]);
			            a = GG(a, b, c, d, M_offset_5,  5,  T[20]);
			            d = GG(d, a, b, c, M_offset_10, 9,  T[21]);
			            c = GG(c, d, a, b, M_offset_15, 14, T[22]);
			            b = GG(b, c, d, a, M_offset_4,  20, T[23]);
			            a = GG(a, b, c, d, M_offset_9,  5,  T[24]);
			            d = GG(d, a, b, c, M_offset_14, 9,  T[25]);
			            c = GG(c, d, a, b, M_offset_3,  14, T[26]);
			            b = GG(b, c, d, a, M_offset_8,  20, T[27]);
			            a = GG(a, b, c, d, M_offset_13, 5,  T[28]);
			            d = GG(d, a, b, c, M_offset_2,  9,  T[29]);
			            c = GG(c, d, a, b, M_offset_7,  14, T[30]);
			            b = GG(b, c, d, a, M_offset_12, 20, T[31]);
			            a = HH(a, b, c, d, M_offset_5,  4,  T[32]);
			            d = HH(d, a, b, c, M_offset_8,  11, T[33]);
			            c = HH(c, d, a, b, M_offset_11, 16, T[34]);
			            b = HH(b, c, d, a, M_offset_14, 23, T[35]);
			            a = HH(a, b, c, d, M_offset_1,  4,  T[36]);
			            d = HH(d, a, b, c, M_offset_4,  11, T[37]);
			            c = HH(c, d, a, b, M_offset_7,  16, T[38]);
			            b = HH(b, c, d, a, M_offset_10, 23, T[39]);
			            a = HH(a, b, c, d, M_offset_13, 4,  T[40]);
			            d = HH(d, a, b, c, M_offset_0,  11, T[41]);
			            c = HH(c, d, a, b, M_offset_3,  16, T[42]);
			            b = HH(b, c, d, a, M_offset_6,  23, T[43]);
			            a = HH(a, b, c, d, M_offset_9,  4,  T[44]);
			            d = HH(d, a, b, c, M_offset_12, 11, T[45]);
			            c = HH(c, d, a, b, M_offset_15, 16, T[46]);
			            b = HH(b, c, d, a, M_offset_2,  23, T[47]);
			            a = II(a, b, c, d, M_offset_0,  6,  T[48]);
			            d = II(d, a, b, c, M_offset_7,  10, T[49]);
			            c = II(c, d, a, b, M_offset_14, 15, T[50]);
			            b = II(b, c, d, a, M_offset_5,  21, T[51]);
			            a = II(a, b, c, d, M_offset_12, 6,  T[52]);
			            d = II(d, a, b, c, M_offset_3,  10, T[53]);
			            c = II(c, d, a, b, M_offset_10, 15, T[54]);
			            b = II(b, c, d, a, M_offset_1,  21, T[55]);
			            a = II(a, b, c, d, M_offset_8,  6,  T[56]);
			            d = II(d, a, b, c, M_offset_15, 10, T[57]);
			            c = II(c, d, a, b, M_offset_6,  15, T[58]);
			            b = II(b, c, d, a, M_offset_13, 21, T[59]);
			            a = II(a, b, c, d, M_offset_4,  6,  T[60]);
			            d = II(d, a, b, c, M_offset_11, 10, T[61]);
			            c = II(c, d, a, b, M_offset_2,  15, T[62]);
			            b = II(b, c, d, a, M_offset_9,  21, T[63]);
			            H[0] = (H[0] + a) | 0;
			            H[1] = (H[1] + b) | 0;
			            H[2] = (H[2] + c) | 0;
			            H[3] = (H[3] + d) | 0;
			        },
			        _doFinalize: function () {
			            var data = this._data;
			            var dataWords = data.words;
			            var nBitsTotal = this._nDataBytes * 8;
			            var nBitsLeft = data.sigBytes * 8;
			            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
			            var nBitsTotalH = Math.floor(nBitsTotal / 0x100000000);
			            var nBitsTotalL = nBitsTotal;
			            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = (
			                (((nBitsTotalH << 8)  | (nBitsTotalH >>> 24)) & 0x00ff00ff) |
			                (((nBitsTotalH << 24) | (nBitsTotalH >>> 8))  & 0xff00ff00)
			            );
			            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
			                (((nBitsTotalL << 8)  | (nBitsTotalL >>> 24)) & 0x00ff00ff) |
			                (((nBitsTotalL << 24) | (nBitsTotalL >>> 8))  & 0xff00ff00)
			            );
			            data.sigBytes = (dataWords.length + 1) * 4;
			            this._process();
			            var hash = this._hash;
			            var H = hash.words;
			            for (var i = 0; i < 4; i++) {
			                var H_i = H[i];
			                H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |
			                       (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);
			            }
			            return hash;
			        },
			        clone: function () {
			            var clone = Hasher.clone.call(this);
			            clone._hash = this._hash.clone();
			            return clone;
			        }
			    });
			    function FF(a, b, c, d, x, s, t) {
			        var n = a + ((b & c) | (~b & d)) + x + t;
			        return ((n << s) | (n >>> (32 - s))) + b;
			    }
			    function GG(a, b, c, d, x, s, t) {
			        var n = a + ((b & d) | (c & ~d)) + x + t;
			        return ((n << s) | (n >>> (32 - s))) + b;
			    }
			    function HH(a, b, c, d, x, s, t) {
			        var n = a + (b ^ c ^ d) + x + t;
			        return ((n << s) | (n >>> (32 - s))) + b;
			    }
			    function II(a, b, c, d, x, s, t) {
			        var n = a + (c ^ (b | ~d)) + x + t;
			        return ((n << s) | (n >>> (32 - s))) + b;
			    }
			    C.MD5 = Hasher._createHelper(MD5);
			    C.HmacMD5 = Hasher._createHmacHelper(MD5);
			}(Math));
			return CryptoJS.MD5;
		})); 
	} (md5));
	return md5.exports;
}

var sha1 = {exports: {}};

var hasRequiredSha1;

function requireSha1 () {
	if (hasRequiredSha1) return sha1.exports;
	hasRequiredSha1 = 1;
	(function (module, exports) {
(function (root, factory) {
			{
				module.exports = factory(requireCore());
			}
		}(commonjsGlobal$1, function (CryptoJS) {
			(function () {
			    var C = CryptoJS;
			    var C_lib = C.lib;
			    var WordArray = C_lib.WordArray;
			    var Hasher = C_lib.Hasher;
			    var C_algo = C.algo;
			    var W = [];
			    var SHA1 = C_algo.SHA1 = Hasher.extend({
			        _doReset: function () {
			            this._hash = new WordArray.init([
			                0x67452301, 0xefcdab89,
			                0x98badcfe, 0x10325476,
			                0xc3d2e1f0
			            ]);
			        },
			        _doProcessBlock: function (M, offset) {
			            var H = this._hash.words;
			            var a = H[0];
			            var b = H[1];
			            var c = H[2];
			            var d = H[3];
			            var e = H[4];
			            for (var i = 0; i < 80; i++) {
			                if (i < 16) {
			                    W[i] = M[offset + i] | 0;
			                } else {
			                    var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
			                    W[i] = (n << 1) | (n >>> 31);
			                }
			                var t = ((a << 5) | (a >>> 27)) + e + W[i];
			                if (i < 20) {
			                    t += ((b & c) | (~b & d)) + 0x5a827999;
			                } else if (i < 40) {
			                    t += (b ^ c ^ d) + 0x6ed9eba1;
			                } else if (i < 60) {
			                    t += ((b & c) | (b & d) | (c & d)) - 0x70e44324;
			                } else  {
			                    t += (b ^ c ^ d) - 0x359d3e2a;
			                }
			                e = d;
			                d = c;
			                c = (b << 30) | (b >>> 2);
			                b = a;
			                a = t;
			            }
			            H[0] = (H[0] + a) | 0;
			            H[1] = (H[1] + b) | 0;
			            H[2] = (H[2] + c) | 0;
			            H[3] = (H[3] + d) | 0;
			            H[4] = (H[4] + e) | 0;
			        },
			        _doFinalize: function () {
			            var data = this._data;
			            var dataWords = data.words;
			            var nBitsTotal = this._nDataBytes * 8;
			            var nBitsLeft = data.sigBytes * 8;
			            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
			            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);
			            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;
			            data.sigBytes = dataWords.length * 4;
			            this._process();
			            return this._hash;
			        },
			        clone: function () {
			            var clone = Hasher.clone.call(this);
			            clone._hash = this._hash.clone();
			            return clone;
			        }
			    });
			    C.SHA1 = Hasher._createHelper(SHA1);
			    C.HmacSHA1 = Hasher._createHmacHelper(SHA1);
			}());
			return CryptoJS.SHA1;
		})); 
	} (sha1));
	return sha1.exports;
}

var sha256 = {exports: {}};

var hasRequiredSha256;

function requireSha256 () {
	if (hasRequiredSha256) return sha256.exports;
	hasRequiredSha256 = 1;
	(function (module, exports) {
(function (root, factory) {
			{
				module.exports = factory(requireCore());
			}
		}(commonjsGlobal$1, function (CryptoJS) {
			(function (Math) {
			    var C = CryptoJS;
			    var C_lib = C.lib;
			    var WordArray = C_lib.WordArray;
			    var Hasher = C_lib.Hasher;
			    var C_algo = C.algo;
			    var H = [];
			    var K = [];
			    (function () {
			        function isPrime(n) {
			            var sqrtN = Math.sqrt(n);
			            for (var factor = 2; factor <= sqrtN; factor++) {
			                if (!(n % factor)) {
			                    return false;
			                }
			            }
			            return true;
			        }
			        function getFractionalBits(n) {
			            return ((n - (n | 0)) * 0x100000000) | 0;
			        }
			        var n = 2;
			        var nPrime = 0;
			        while (nPrime < 64) {
			            if (isPrime(n)) {
			                if (nPrime < 8) {
			                    H[nPrime] = getFractionalBits(Math.pow(n, 1 / 2));
			                }
			                K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3));
			                nPrime++;
			            }
			            n++;
			        }
			    }());
			    var W = [];
			    var SHA256 = C_algo.SHA256 = Hasher.extend({
			        _doReset: function () {
			            this._hash = new WordArray.init(H.slice(0));
			        },
			        _doProcessBlock: function (M, offset) {
			            var H = this._hash.words;
			            var a = H[0];
			            var b = H[1];
			            var c = H[2];
			            var d = H[3];
			            var e = H[4];
			            var f = H[5];
			            var g = H[6];
			            var h = H[7];
			            for (var i = 0; i < 64; i++) {
			                if (i < 16) {
			                    W[i] = M[offset + i] | 0;
			                } else {
			                    var gamma0x = W[i - 15];
			                    var gamma0  = ((gamma0x << 25) | (gamma0x >>> 7))  ^
			                                  ((gamma0x << 14) | (gamma0x >>> 18)) ^
			                                   (gamma0x >>> 3);
			                    var gamma1x = W[i - 2];
			                    var gamma1  = ((gamma1x << 15) | (gamma1x >>> 17)) ^
			                                  ((gamma1x << 13) | (gamma1x >>> 19)) ^
			                                   (gamma1x >>> 10);
			                    W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];
			                }
			                var ch  = (e & f) ^ (~e & g);
			                var maj = (a & b) ^ (a & c) ^ (b & c);
			                var sigma0 = ((a << 30) | (a >>> 2)) ^ ((a << 19) | (a >>> 13)) ^ ((a << 10) | (a >>> 22));
			                var sigma1 = ((e << 26) | (e >>> 6)) ^ ((e << 21) | (e >>> 11)) ^ ((e << 7)  | (e >>> 25));
			                var t1 = h + sigma1 + ch + K[i] + W[i];
			                var t2 = sigma0 + maj;
			                h = g;
			                g = f;
			                f = e;
			                e = (d + t1) | 0;
			                d = c;
			                c = b;
			                b = a;
			                a = (t1 + t2) | 0;
			            }
			            H[0] = (H[0] + a) | 0;
			            H[1] = (H[1] + b) | 0;
			            H[2] = (H[2] + c) | 0;
			            H[3] = (H[3] + d) | 0;
			            H[4] = (H[4] + e) | 0;
			            H[5] = (H[5] + f) | 0;
			            H[6] = (H[6] + g) | 0;
			            H[7] = (H[7] + h) | 0;
			        },
			        _doFinalize: function () {
			            var data = this._data;
			            var dataWords = data.words;
			            var nBitsTotal = this._nDataBytes * 8;
			            var nBitsLeft = data.sigBytes * 8;
			            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
			            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);
			            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;
			            data.sigBytes = dataWords.length * 4;
			            this._process();
			            return this._hash;
			        },
			        clone: function () {
			            var clone = Hasher.clone.call(this);
			            clone._hash = this._hash.clone();
			            return clone;
			        }
			    });
			    C.SHA256 = Hasher._createHelper(SHA256);
			    C.HmacSHA256 = Hasher._createHmacHelper(SHA256);
			}(Math));
			return CryptoJS.SHA256;
		})); 
	} (sha256));
	return sha256.exports;
}

var sha224 = {exports: {}};

var hasRequiredSha224;

function requireSha224 () {
	if (hasRequiredSha224) return sha224.exports;
	hasRequiredSha224 = 1;
	(function (module, exports) {
(function (root, factory, undef) {
			{
				module.exports = factory(requireCore(), requireSha256());
			}
		}(commonjsGlobal$1, function (CryptoJS) {
			(function () {
			    var C = CryptoJS;
			    var C_lib = C.lib;
			    var WordArray = C_lib.WordArray;
			    var C_algo = C.algo;
			    var SHA256 = C_algo.SHA256;
			    var SHA224 = C_algo.SHA224 = SHA256.extend({
			        _doReset: function () {
			            this._hash = new WordArray.init([
			                0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
			                0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4
			            ]);
			        },
			        _doFinalize: function () {
			            var hash = SHA256._doFinalize.call(this);
			            hash.sigBytes -= 4;
			            return hash;
			        }
			    });
			    C.SHA224 = SHA256._createHelper(SHA224);
			    C.HmacSHA224 = SHA256._createHmacHelper(SHA224);
			}());
			return CryptoJS.SHA224;
		})); 
	} (sha224));
	return sha224.exports;
}

var sha512 = {exports: {}};

var hasRequiredSha512;

function requireSha512 () {
	if (hasRequiredSha512) return sha512.exports;
	hasRequiredSha512 = 1;
	(function (module, exports) {
(function (root, factory, undef) {
			{
				module.exports = factory(requireCore(), requireX64Core());
			}
		}(commonjsGlobal$1, function (CryptoJS) {
			(function () {
			    var C = CryptoJS;
			    var C_lib = C.lib;
			    var Hasher = C_lib.Hasher;
			    var C_x64 = C.x64;
			    var X64Word = C_x64.Word;
			    var X64WordArray = C_x64.WordArray;
			    var C_algo = C.algo;
			    function X64Word_create() {
			        return X64Word.create.apply(X64Word, arguments);
			    }
			    var K = [
			        X64Word_create(0x428a2f98, 0xd728ae22), X64Word_create(0x71374491, 0x23ef65cd),
			        X64Word_create(0xb5c0fbcf, 0xec4d3b2f), X64Word_create(0xe9b5dba5, 0x8189dbbc),
			        X64Word_create(0x3956c25b, 0xf348b538), X64Word_create(0x59f111f1, 0xb605d019),
			        X64Word_create(0x923f82a4, 0xaf194f9b), X64Word_create(0xab1c5ed5, 0xda6d8118),
			        X64Word_create(0xd807aa98, 0xa3030242), X64Word_create(0x12835b01, 0x45706fbe),
			        X64Word_create(0x243185be, 0x4ee4b28c), X64Word_create(0x550c7dc3, 0xd5ffb4e2),
			        X64Word_create(0x72be5d74, 0xf27b896f), X64Word_create(0x80deb1fe, 0x3b1696b1),
			        X64Word_create(0x9bdc06a7, 0x25c71235), X64Word_create(0xc19bf174, 0xcf692694),
			        X64Word_create(0xe49b69c1, 0x9ef14ad2), X64Word_create(0xefbe4786, 0x384f25e3),
			        X64Word_create(0x0fc19dc6, 0x8b8cd5b5), X64Word_create(0x240ca1cc, 0x77ac9c65),
			        X64Word_create(0x2de92c6f, 0x592b0275), X64Word_create(0x4a7484aa, 0x6ea6e483),
			        X64Word_create(0x5cb0a9dc, 0xbd41fbd4), X64Word_create(0x76f988da, 0x831153b5),
			        X64Word_create(0x983e5152, 0xee66dfab), X64Word_create(0xa831c66d, 0x2db43210),
			        X64Word_create(0xb00327c8, 0x98fb213f), X64Word_create(0xbf597fc7, 0xbeef0ee4),
			        X64Word_create(0xc6e00bf3, 0x3da88fc2), X64Word_create(0xd5a79147, 0x930aa725),
			        X64Word_create(0x06ca6351, 0xe003826f), X64Word_create(0x14292967, 0x0a0e6e70),
			        X64Word_create(0x27b70a85, 0x46d22ffc), X64Word_create(0x2e1b2138, 0x5c26c926),
			        X64Word_create(0x4d2c6dfc, 0x5ac42aed), X64Word_create(0x53380d13, 0x9d95b3df),
			        X64Word_create(0x650a7354, 0x8baf63de), X64Word_create(0x766a0abb, 0x3c77b2a8),
			        X64Word_create(0x81c2c92e, 0x47edaee6), X64Word_create(0x92722c85, 0x1482353b),
			        X64Word_create(0xa2bfe8a1, 0x4cf10364), X64Word_create(0xa81a664b, 0xbc423001),
			        X64Word_create(0xc24b8b70, 0xd0f89791), X64Word_create(0xc76c51a3, 0x0654be30),
			        X64Word_create(0xd192e819, 0xd6ef5218), X64Word_create(0xd6990624, 0x5565a910),
			        X64Word_create(0xf40e3585, 0x5771202a), X64Word_create(0x106aa070, 0x32bbd1b8),
			        X64Word_create(0x19a4c116, 0xb8d2d0c8), X64Word_create(0x1e376c08, 0x5141ab53),
			        X64Word_create(0x2748774c, 0xdf8eeb99), X64Word_create(0x34b0bcb5, 0xe19b48a8),
			        X64Word_create(0x391c0cb3, 0xc5c95a63), X64Word_create(0x4ed8aa4a, 0xe3418acb),
			        X64Word_create(0x5b9cca4f, 0x7763e373), X64Word_create(0x682e6ff3, 0xd6b2b8a3),
			        X64Word_create(0x748f82ee, 0x5defb2fc), X64Word_create(0x78a5636f, 0x43172f60),
			        X64Word_create(0x84c87814, 0xa1f0ab72), X64Word_create(0x8cc70208, 0x1a6439ec),
			        X64Word_create(0x90befffa, 0x23631e28), X64Word_create(0xa4506ceb, 0xde82bde9),
			        X64Word_create(0xbef9a3f7, 0xb2c67915), X64Word_create(0xc67178f2, 0xe372532b),
			        X64Word_create(0xca273ece, 0xea26619c), X64Word_create(0xd186b8c7, 0x21c0c207),
			        X64Word_create(0xeada7dd6, 0xcde0eb1e), X64Word_create(0xf57d4f7f, 0xee6ed178),
			        X64Word_create(0x06f067aa, 0x72176fba), X64Word_create(0x0a637dc5, 0xa2c898a6),
			        X64Word_create(0x113f9804, 0xbef90dae), X64Word_create(0x1b710b35, 0x131c471b),
			        X64Word_create(0x28db77f5, 0x23047d84), X64Word_create(0x32caab7b, 0x40c72493),
			        X64Word_create(0x3c9ebe0a, 0x15c9bebc), X64Word_create(0x431d67c4, 0x9c100d4c),
			        X64Word_create(0x4cc5d4be, 0xcb3e42b6), X64Word_create(0x597f299c, 0xfc657e2a),
			        X64Word_create(0x5fcb6fab, 0x3ad6faec), X64Word_create(0x6c44198c, 0x4a475817)
			    ];
			    var W = [];
			    (function () {
			        for (var i = 0; i < 80; i++) {
			            W[i] = X64Word_create();
			        }
			    }());
			    var SHA512 = C_algo.SHA512 = Hasher.extend({
			        _doReset: function () {
			            this._hash = new X64WordArray.init([
			                new X64Word.init(0x6a09e667, 0xf3bcc908), new X64Word.init(0xbb67ae85, 0x84caa73b),
			                new X64Word.init(0x3c6ef372, 0xfe94f82b), new X64Word.init(0xa54ff53a, 0x5f1d36f1),
			                new X64Word.init(0x510e527f, 0xade682d1), new X64Word.init(0x9b05688c, 0x2b3e6c1f),
			                new X64Word.init(0x1f83d9ab, 0xfb41bd6b), new X64Word.init(0x5be0cd19, 0x137e2179)
			            ]);
			        },
			        _doProcessBlock: function (M, offset) {
			            var H = this._hash.words;
			            var H0 = H[0];
			            var H1 = H[1];
			            var H2 = H[2];
			            var H3 = H[3];
			            var H4 = H[4];
			            var H5 = H[5];
			            var H6 = H[6];
			            var H7 = H[7];
			            var H0h = H0.high;
			            var H0l = H0.low;
			            var H1h = H1.high;
			            var H1l = H1.low;
			            var H2h = H2.high;
			            var H2l = H2.low;
			            var H3h = H3.high;
			            var H3l = H3.low;
			            var H4h = H4.high;
			            var H4l = H4.low;
			            var H5h = H5.high;
			            var H5l = H5.low;
			            var H6h = H6.high;
			            var H6l = H6.low;
			            var H7h = H7.high;
			            var H7l = H7.low;
			            var ah = H0h;
			            var al = H0l;
			            var bh = H1h;
			            var bl = H1l;
			            var ch = H2h;
			            var cl = H2l;
			            var dh = H3h;
			            var dl = H3l;
			            var eh = H4h;
			            var el = H4l;
			            var fh = H5h;
			            var fl = H5l;
			            var gh = H6h;
			            var gl = H6l;
			            var hh = H7h;
			            var hl = H7l;
			            for (var i = 0; i < 80; i++) {
			                var Wil;
			                var Wih;
			                var Wi = W[i];
			                if (i < 16) {
			                    Wih = Wi.high = M[offset + i * 2]     | 0;
			                    Wil = Wi.low  = M[offset + i * 2 + 1] | 0;
			                } else {
			                    var gamma0x  = W[i - 15];
			                    var gamma0xh = gamma0x.high;
			                    var gamma0xl = gamma0x.low;
			                    var gamma0h  = ((gamma0xh >>> 1) | (gamma0xl << 31)) ^ ((gamma0xh >>> 8) | (gamma0xl << 24)) ^ (gamma0xh >>> 7);
			                    var gamma0l  = ((gamma0xl >>> 1) | (gamma0xh << 31)) ^ ((gamma0xl >>> 8) | (gamma0xh << 24)) ^ ((gamma0xl >>> 7) | (gamma0xh << 25));
			                    var gamma1x  = W[i - 2];
			                    var gamma1xh = gamma1x.high;
			                    var gamma1xl = gamma1x.low;
			                    var gamma1h  = ((gamma1xh >>> 19) | (gamma1xl << 13)) ^ ((gamma1xh << 3) | (gamma1xl >>> 29)) ^ (gamma1xh >>> 6);
			                    var gamma1l  = ((gamma1xl >>> 19) | (gamma1xh << 13)) ^ ((gamma1xl << 3) | (gamma1xh >>> 29)) ^ ((gamma1xl >>> 6) | (gamma1xh << 26));
			                    var Wi7  = W[i - 7];
			                    var Wi7h = Wi7.high;
			                    var Wi7l = Wi7.low;
			                    var Wi16  = W[i - 16];
			                    var Wi16h = Wi16.high;
			                    var Wi16l = Wi16.low;
			                    Wil = gamma0l + Wi7l;
			                    Wih = gamma0h + Wi7h + ((Wil >>> 0) < (gamma0l >>> 0) ? 1 : 0);
			                    Wil = Wil + gamma1l;
			                    Wih = Wih + gamma1h + ((Wil >>> 0) < (gamma1l >>> 0) ? 1 : 0);
			                    Wil = Wil + Wi16l;
			                    Wih = Wih + Wi16h + ((Wil >>> 0) < (Wi16l >>> 0) ? 1 : 0);
			                    Wi.high = Wih;
			                    Wi.low  = Wil;
			                }
			                var chh  = (eh & fh) ^ (~eh & gh);
			                var chl  = (el & fl) ^ (~el & gl);
			                var majh = (ah & bh) ^ (ah & ch) ^ (bh & ch);
			                var majl = (al & bl) ^ (al & cl) ^ (bl & cl);
			                var sigma0h = ((ah >>> 28) | (al << 4))  ^ ((ah << 30)  | (al >>> 2)) ^ ((ah << 25) | (al >>> 7));
			                var sigma0l = ((al >>> 28) | (ah << 4))  ^ ((al << 30)  | (ah >>> 2)) ^ ((al << 25) | (ah >>> 7));
			                var sigma1h = ((eh >>> 14) | (el << 18)) ^ ((eh >>> 18) | (el << 14)) ^ ((eh << 23) | (el >>> 9));
			                var sigma1l = ((el >>> 14) | (eh << 18)) ^ ((el >>> 18) | (eh << 14)) ^ ((el << 23) | (eh >>> 9));
			                var Ki  = K[i];
			                var Kih = Ki.high;
			                var Kil = Ki.low;
			                var t1l = hl + sigma1l;
			                var t1h = hh + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0);
			                var t1l = t1l + chl;
			                var t1h = t1h + chh + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0);
			                var t1l = t1l + Kil;
			                var t1h = t1h + Kih + ((t1l >>> 0) < (Kil >>> 0) ? 1 : 0);
			                var t1l = t1l + Wil;
			                var t1h = t1h + Wih + ((t1l >>> 0) < (Wil >>> 0) ? 1 : 0);
			                var t2l = sigma0l + majl;
			                var t2h = sigma0h + majh + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0);
			                hh = gh;
			                hl = gl;
			                gh = fh;
			                gl = fl;
			                fh = eh;
			                fl = el;
			                el = (dl + t1l) | 0;
			                eh = (dh + t1h + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0;
			                dh = ch;
			                dl = cl;
			                ch = bh;
			                cl = bl;
			                bh = ah;
			                bl = al;
			                al = (t1l + t2l) | 0;
			                ah = (t1h + t2h + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0;
			            }
			            H0l = H0.low  = (H0l + al);
			            H0.high = (H0h + ah + ((H0l >>> 0) < (al >>> 0) ? 1 : 0));
			            H1l = H1.low  = (H1l + bl);
			            H1.high = (H1h + bh + ((H1l >>> 0) < (bl >>> 0) ? 1 : 0));
			            H2l = H2.low  = (H2l + cl);
			            H2.high = (H2h + ch + ((H2l >>> 0) < (cl >>> 0) ? 1 : 0));
			            H3l = H3.low  = (H3l + dl);
			            H3.high = (H3h + dh + ((H3l >>> 0) < (dl >>> 0) ? 1 : 0));
			            H4l = H4.low  = (H4l + el);
			            H4.high = (H4h + eh + ((H4l >>> 0) < (el >>> 0) ? 1 : 0));
			            H5l = H5.low  = (H5l + fl);
			            H5.high = (H5h + fh + ((H5l >>> 0) < (fl >>> 0) ? 1 : 0));
			            H6l = H6.low  = (H6l + gl);
			            H6.high = (H6h + gh + ((H6l >>> 0) < (gl >>> 0) ? 1 : 0));
			            H7l = H7.low  = (H7l + hl);
			            H7.high = (H7h + hh + ((H7l >>> 0) < (hl >>> 0) ? 1 : 0));
			        },
			        _doFinalize: function () {
			            var data = this._data;
			            var dataWords = data.words;
			            var nBitsTotal = this._nDataBytes * 8;
			            var nBitsLeft = data.sigBytes * 8;
			            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
			            dataWords[(((nBitsLeft + 128) >>> 10) << 5) + 30] = Math.floor(nBitsTotal / 0x100000000);
			            dataWords[(((nBitsLeft + 128) >>> 10) << 5) + 31] = nBitsTotal;
			            data.sigBytes = dataWords.length * 4;
			            this._process();
			            var hash = this._hash.toX32();
			            return hash;
			        },
			        clone: function () {
			            var clone = Hasher.clone.call(this);
			            clone._hash = this._hash.clone();
			            return clone;
			        },
			        blockSize: 1024/32
			    });
			    C.SHA512 = Hasher._createHelper(SHA512);
			    C.HmacSHA512 = Hasher._createHmacHelper(SHA512);
			}());
			return CryptoJS.SHA512;
		})); 
	} (sha512));
	return sha512.exports;
}

var sha384 = {exports: {}};

var hasRequiredSha384;

function requireSha384 () {
	if (hasRequiredSha384) return sha384.exports;
	hasRequiredSha384 = 1;
	(function (module, exports) {
(function (root, factory, undef) {
			{
				module.exports = factory(requireCore(), requireX64Core(), requireSha512());
			}
		}(commonjsGlobal$1, function (CryptoJS) {
			(function () {
			    var C = CryptoJS;
			    var C_x64 = C.x64;
			    var X64Word = C_x64.Word;
			    var X64WordArray = C_x64.WordArray;
			    var C_algo = C.algo;
			    var SHA512 = C_algo.SHA512;
			    var SHA384 = C_algo.SHA384 = SHA512.extend({
			        _doReset: function () {
			            this._hash = new X64WordArray.init([
			                new X64Word.init(0xcbbb9d5d, 0xc1059ed8), new X64Word.init(0x629a292a, 0x367cd507),
			                new X64Word.init(0x9159015a, 0x3070dd17), new X64Word.init(0x152fecd8, 0xf70e5939),
			                new X64Word.init(0x67332667, 0xffc00b31), new X64Word.init(0x8eb44a87, 0x68581511),
			                new X64Word.init(0xdb0c2e0d, 0x64f98fa7), new X64Word.init(0x47b5481d, 0xbefa4fa4)
			            ]);
			        },
			        _doFinalize: function () {
			            var hash = SHA512._doFinalize.call(this);
			            hash.sigBytes -= 16;
			            return hash;
			        }
			    });
			    C.SHA384 = SHA512._createHelper(SHA384);
			    C.HmacSHA384 = SHA512._createHmacHelper(SHA384);
			}());
			return CryptoJS.SHA384;
		})); 
	} (sha384));
	return sha384.exports;
}

var sha3 = {exports: {}};

var hasRequiredSha3;

function requireSha3 () {
	if (hasRequiredSha3) return sha3.exports;
	hasRequiredSha3 = 1;
	(function (module, exports) {
(function (root, factory, undef) {
			{
				module.exports = factory(requireCore(), requireX64Core());
			}
		}(commonjsGlobal$1, function (CryptoJS) {
			(function (Math) {
			    var C = CryptoJS;
			    var C_lib = C.lib;
			    var WordArray = C_lib.WordArray;
			    var Hasher = C_lib.Hasher;
			    var C_x64 = C.x64;
			    var X64Word = C_x64.Word;
			    var C_algo = C.algo;
			    var RHO_OFFSETS = [];
			    var PI_INDEXES  = [];
			    var ROUND_CONSTANTS = [];
			    (function () {
			        var x = 1, y = 0;
			        for (var t = 0; t < 24; t++) {
			            RHO_OFFSETS[x + 5 * y] = ((t + 1) * (t + 2) / 2) % 64;
			            var newX = y % 5;
			            var newY = (2 * x + 3 * y) % 5;
			            x = newX;
			            y = newY;
			        }
			        for (var x = 0; x < 5; x++) {
			            for (var y = 0; y < 5; y++) {
			                PI_INDEXES[x + 5 * y] = y + ((2 * x + 3 * y) % 5) * 5;
			            }
			        }
			        var LFSR = 0x01;
			        for (var i = 0; i < 24; i++) {
			            var roundConstantMsw = 0;
			            var roundConstantLsw = 0;
			            for (var j = 0; j < 7; j++) {
			                if (LFSR & 0x01) {
			                    var bitPosition = (1 << j) - 1;
			                    if (bitPosition < 32) {
			                        roundConstantLsw ^= 1 << bitPosition;
			                    } else  {
			                        roundConstantMsw ^= 1 << (bitPosition - 32);
			                    }
			                }
			                if (LFSR & 0x80) {
			                    LFSR = (LFSR << 1) ^ 0x71;
			                } else {
			                    LFSR <<= 1;
			                }
			            }
			            ROUND_CONSTANTS[i] = X64Word.create(roundConstantMsw, roundConstantLsw);
			        }
			    }());
			    var T = [];
			    (function () {
			        for (var i = 0; i < 25; i++) {
			            T[i] = X64Word.create();
			        }
			    }());
			    var SHA3 = C_algo.SHA3 = Hasher.extend({
			        cfg: Hasher.cfg.extend({
			            outputLength: 512
			        }),
			        _doReset: function () {
			            var state = this._state = [];
			            for (var i = 0; i < 25; i++) {
			                state[i] = new X64Word.init();
			            }
			            this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;
			        },
			        _doProcessBlock: function (M, offset) {
			            var state = this._state;
			            var nBlockSizeLanes = this.blockSize / 2;
			            for (var i = 0; i < nBlockSizeLanes; i++) {
			                var M2i  = M[offset + 2 * i];
			                var M2i1 = M[offset + 2 * i + 1];
			                M2i = (
			                    (((M2i << 8)  | (M2i >>> 24)) & 0x00ff00ff) |
			                    (((M2i << 24) | (M2i >>> 8))  & 0xff00ff00)
			                );
			                M2i1 = (
			                    (((M2i1 << 8)  | (M2i1 >>> 24)) & 0x00ff00ff) |
			                    (((M2i1 << 24) | (M2i1 >>> 8))  & 0xff00ff00)
			                );
			                var lane = state[i];
			                lane.high ^= M2i1;
			                lane.low  ^= M2i;
			            }
			            for (var round = 0; round < 24; round++) {
			                for (var x = 0; x < 5; x++) {
			                    var tMsw = 0, tLsw = 0;
			                    for (var y = 0; y < 5; y++) {
			                        var lane = state[x + 5 * y];
			                        tMsw ^= lane.high;
			                        tLsw ^= lane.low;
			                    }
			                    var Tx = T[x];
			                    Tx.high = tMsw;
			                    Tx.low  = tLsw;
			                }
			                for (var x = 0; x < 5; x++) {
			                    var Tx4 = T[(x + 4) % 5];
			                    var Tx1 = T[(x + 1) % 5];
			                    var Tx1Msw = Tx1.high;
			                    var Tx1Lsw = Tx1.low;
			                    var tMsw = Tx4.high ^ ((Tx1Msw << 1) | (Tx1Lsw >>> 31));
			                    var tLsw = Tx4.low  ^ ((Tx1Lsw << 1) | (Tx1Msw >>> 31));
			                    for (var y = 0; y < 5; y++) {
			                        var lane = state[x + 5 * y];
			                        lane.high ^= tMsw;
			                        lane.low  ^= tLsw;
			                    }
			                }
			                for (var laneIndex = 1; laneIndex < 25; laneIndex++) {
			                    var tMsw;
			                    var tLsw;
			                    var lane = state[laneIndex];
			                    var laneMsw = lane.high;
			                    var laneLsw = lane.low;
			                    var rhoOffset = RHO_OFFSETS[laneIndex];
			                    if (rhoOffset < 32) {
			                        tMsw = (laneMsw << rhoOffset) | (laneLsw >>> (32 - rhoOffset));
			                        tLsw = (laneLsw << rhoOffset) | (laneMsw >>> (32 - rhoOffset));
			                    } else  {
			                        tMsw = (laneLsw << (rhoOffset - 32)) | (laneMsw >>> (64 - rhoOffset));
			                        tLsw = (laneMsw << (rhoOffset - 32)) | (laneLsw >>> (64 - rhoOffset));
			                    }
			                    var TPiLane = T[PI_INDEXES[laneIndex]];
			                    TPiLane.high = tMsw;
			                    TPiLane.low  = tLsw;
			                }
			                var T0 = T[0];
			                var state0 = state[0];
			                T0.high = state0.high;
			                T0.low  = state0.low;
			                for (var x = 0; x < 5; x++) {
			                    for (var y = 0; y < 5; y++) {
			                        var laneIndex = x + 5 * y;
			                        var lane = state[laneIndex];
			                        var TLane = T[laneIndex];
			                        var Tx1Lane = T[((x + 1) % 5) + 5 * y];
			                        var Tx2Lane = T[((x + 2) % 5) + 5 * y];
			                        lane.high = TLane.high ^ (~Tx1Lane.high & Tx2Lane.high);
			                        lane.low  = TLane.low  ^ (~Tx1Lane.low  & Tx2Lane.low);
			                    }
			                }
			                var lane = state[0];
			                var roundConstant = ROUND_CONSTANTS[round];
			                lane.high ^= roundConstant.high;
			                lane.low  ^= roundConstant.low;
			            }
			        },
			        _doFinalize: function () {
			            var data = this._data;
			            var dataWords = data.words;
			            this._nDataBytes * 8;
			            var nBitsLeft = data.sigBytes * 8;
			            var blockSizeBits = this.blockSize * 32;
			            dataWords[nBitsLeft >>> 5] |= 0x1 << (24 - nBitsLeft % 32);
			            dataWords[((Math.ceil((nBitsLeft + 1) / blockSizeBits) * blockSizeBits) >>> 5) - 1] |= 0x80;
			            data.sigBytes = dataWords.length * 4;
			            this._process();
			            var state = this._state;
			            var outputLengthBytes = this.cfg.outputLength / 8;
			            var outputLengthLanes = outputLengthBytes / 8;
			            var hashWords = [];
			            for (var i = 0; i < outputLengthLanes; i++) {
			                var lane = state[i];
			                var laneMsw = lane.high;
			                var laneLsw = lane.low;
			                laneMsw = (
			                    (((laneMsw << 8)  | (laneMsw >>> 24)) & 0x00ff00ff) |
			                    (((laneMsw << 24) | (laneMsw >>> 8))  & 0xff00ff00)
			                );
			                laneLsw = (
			                    (((laneLsw << 8)  | (laneLsw >>> 24)) & 0x00ff00ff) |
			                    (((laneLsw << 24) | (laneLsw >>> 8))  & 0xff00ff00)
			                );
			                hashWords.push(laneLsw);
			                hashWords.push(laneMsw);
			            }
			            return new WordArray.init(hashWords, outputLengthBytes);
			        },
			        clone: function () {
			            var clone = Hasher.clone.call(this);
			            var state = clone._state = this._state.slice(0);
			            for (var i = 0; i < 25; i++) {
			                state[i] = state[i].clone();
			            }
			            return clone;
			        }
			    });
			    C.SHA3 = Hasher._createHelper(SHA3);
			    C.HmacSHA3 = Hasher._createHmacHelper(SHA3);
			}(Math));
			return CryptoJS.SHA3;
		})); 
	} (sha3));
	return sha3.exports;
}

var ripemd160 = {exports: {}};

var hasRequiredRipemd160;

function requireRipemd160 () {
	if (hasRequiredRipemd160) return ripemd160.exports;
	hasRequiredRipemd160 = 1;
	(function (module, exports) {
(function (root, factory) {
			{
				module.exports = factory(requireCore());
			}
		}(commonjsGlobal$1, function (CryptoJS) {
			/** @preserve
			(c) 2012 by Cédric Mesnil. All rights reserved.
			Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
			    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
			    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
			THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
			*/
			(function (Math) {
			    var C = CryptoJS;
			    var C_lib = C.lib;
			    var WordArray = C_lib.WordArray;
			    var Hasher = C_lib.Hasher;
			    var C_algo = C.algo;
			    var _zl = WordArray.create([
			        0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,
			        7,  4, 13,  1, 10,  6, 15,  3, 12,  0,  9,  5,  2, 14, 11,  8,
			        3, 10, 14,  4,  9, 15,  8,  1,  2,  7,  0,  6, 13, 11,  5, 12,
			        1,  9, 11, 10,  0,  8, 12,  4, 13,  3,  7, 15, 14,  5,  6,  2,
			        4,  0,  5,  9,  7, 12,  2, 10, 14,  1,  3,  8, 11,  6, 15, 13]);
			    var _zr = WordArray.create([
			        5, 14,  7,  0,  9,  2, 11,  4, 13,  6, 15,  8,  1, 10,  3, 12,
			        6, 11,  3,  7,  0, 13,  5, 10, 14, 15,  8, 12,  4,  9,  1,  2,
			        15,  5,  1,  3,  7, 14,  6,  9, 11,  8, 12,  2, 10,  0,  4, 13,
			        8,  6,  4,  1,  3, 11, 15,  0,  5, 12,  2, 13,  9,  7, 10, 14,
			        12, 15, 10,  4,  1,  5,  8,  7,  6,  2, 13, 14,  0,  3,  9, 11]);
			    var _sl = WordArray.create([
			         11, 14, 15, 12,  5,  8,  7,  9, 11, 13, 14, 15,  6,  7,  9,  8,
			        7, 6,   8, 13, 11,  9,  7, 15,  7, 12, 15,  9, 11,  7, 13, 12,
			        11, 13,  6,  7, 14,  9, 13, 15, 14,  8, 13,  6,  5, 12,  7,  5,
			          11, 12, 14, 15, 14, 15,  9,  8,  9, 14,  5,  6,  8,  6,  5, 12,
			        9, 15,  5, 11,  6,  8, 13, 12,  5, 12, 13, 14, 11,  8,  5,  6 ]);
			    var _sr = WordArray.create([
			        8,  9,  9, 11, 13, 15, 15,  5,  7,  7,  8, 11, 14, 14, 12,  6,
			        9, 13, 15,  7, 12,  8,  9, 11,  7,  7, 12,  7,  6, 15, 13, 11,
			        9,  7, 15, 11,  8,  6,  6, 14, 12, 13,  5, 14, 13, 13,  7,  5,
			        15,  5,  8, 11, 14, 14,  6, 14,  6,  9, 12,  9, 12,  5, 15,  8,
			        8,  5, 12,  9, 12,  5, 14,  6,  8, 13,  6,  5, 15, 13, 11, 11 ]);
			    var _hl =  WordArray.create([ 0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E]);
			    var _hr =  WordArray.create([ 0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000]);
			    var RIPEMD160 = C_algo.RIPEMD160 = Hasher.extend({
			        _doReset: function () {
			            this._hash  = WordArray.create([0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0]);
			        },
			        _doProcessBlock: function (M, offset) {
			            for (var i = 0; i < 16; i++) {
			                var offset_i = offset + i;
			                var M_offset_i = M[offset_i];
			                M[offset_i] = (
			                    (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |
			                    (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)
			                );
			            }
			            var H  = this._hash.words;
			            var hl = _hl.words;
			            var hr = _hr.words;
			            var zl = _zl.words;
			            var zr = _zr.words;
			            var sl = _sl.words;
			            var sr = _sr.words;
			            var al, bl, cl, dl, el;
			            var ar, br, cr, dr, er;
			            ar = al = H[0];
			            br = bl = H[1];
			            cr = cl = H[2];
			            dr = dl = H[3];
			            er = el = H[4];
			            var t;
			            for (var i = 0; i < 80; i += 1) {
			                t = (al +  M[offset+zl[i]])|0;
			                if (i<16){
				            t +=  f1(bl,cl,dl) + hl[0];
			                } else if (i<32) {
				            t +=  f2(bl,cl,dl) + hl[1];
			                } else if (i<48) {
				            t +=  f3(bl,cl,dl) + hl[2];
			                } else if (i<64) {
				            t +=  f4(bl,cl,dl) + hl[3];
			                } else {
				            t +=  f5(bl,cl,dl) + hl[4];
			                }
			                t = t|0;
			                t =  rotl(t,sl[i]);
			                t = (t+el)|0;
			                al = el;
			                el = dl;
			                dl = rotl(cl, 10);
			                cl = bl;
			                bl = t;
			                t = (ar + M[offset+zr[i]])|0;
			                if (i<16){
				            t +=  f5(br,cr,dr) + hr[0];
			                } else if (i<32) {
				            t +=  f4(br,cr,dr) + hr[1];
			                } else if (i<48) {
				            t +=  f3(br,cr,dr) + hr[2];
			                } else if (i<64) {
				            t +=  f2(br,cr,dr) + hr[3];
			                } else {
				            t +=  f1(br,cr,dr) + hr[4];
			                }
			                t = t|0;
			                t =  rotl(t,sr[i]) ;
			                t = (t+er)|0;
			                ar = er;
			                er = dr;
			                dr = rotl(cr, 10);
			                cr = br;
			                br = t;
			            }
			            t    = (H[1] + cl + dr)|0;
			            H[1] = (H[2] + dl + er)|0;
			            H[2] = (H[3] + el + ar)|0;
			            H[3] = (H[4] + al + br)|0;
			            H[4] = (H[0] + bl + cr)|0;
			            H[0] =  t;
			        },
			        _doFinalize: function () {
			            var data = this._data;
			            var dataWords = data.words;
			            var nBitsTotal = this._nDataBytes * 8;
			            var nBitsLeft = data.sigBytes * 8;
			            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
			            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
			                (((nBitsTotal << 8)  | (nBitsTotal >>> 24)) & 0x00ff00ff) |
			                (((nBitsTotal << 24) | (nBitsTotal >>> 8))  & 0xff00ff00)
			            );
			            data.sigBytes = (dataWords.length + 1) * 4;
			            this._process();
			            var hash = this._hash;
			            var H = hash.words;
			            for (var i = 0; i < 5; i++) {
			                var H_i = H[i];
			                H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |
			                       (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);
			            }
			            return hash;
			        },
			        clone: function () {
			            var clone = Hasher.clone.call(this);
			            clone._hash = this._hash.clone();
			            return clone;
			        }
			    });
			    function f1(x, y, z) {
			        return ((x) ^ (y) ^ (z));
			    }
			    function f2(x, y, z) {
			        return (((x)&(y)) | ((~x)&(z)));
			    }
			    function f3(x, y, z) {
			        return (((x) | (~(y))) ^ (z));
			    }
			    function f4(x, y, z) {
			        return (((x) & (z)) | ((y)&(~(z))));
			    }
			    function f5(x, y, z) {
			        return ((x) ^ ((y) |(~(z))));
			    }
			    function rotl(x,n) {
			        return (x<<n) | (x>>>(32-n));
			    }
			    C.RIPEMD160 = Hasher._createHelper(RIPEMD160);
			    C.HmacRIPEMD160 = Hasher._createHmacHelper(RIPEMD160);
			}());
			return CryptoJS.RIPEMD160;
		})); 
	} (ripemd160));
	return ripemd160.exports;
}

var hmac = {exports: {}};

var hasRequiredHmac;

function requireHmac () {
	if (hasRequiredHmac) return hmac.exports;
	hasRequiredHmac = 1;
	(function (module, exports) {
(function (root, factory) {
			{
				module.exports = factory(requireCore());
			}
		}(commonjsGlobal$1, function (CryptoJS) {
			(function () {
			    var C = CryptoJS;
			    var C_lib = C.lib;
			    var Base = C_lib.Base;
			    var C_enc = C.enc;
			    var Utf8 = C_enc.Utf8;
			    var C_algo = C.algo;
			    C_algo.HMAC = Base.extend({
			        init: function (hasher, key) {
			            hasher = this._hasher = new hasher.init();
			            if (typeof key == 'string') {
			                key = Utf8.parse(key);
			            }
			            var hasherBlockSize = hasher.blockSize;
			            var hasherBlockSizeBytes = hasherBlockSize * 4;
			            if (key.sigBytes > hasherBlockSizeBytes) {
			                key = hasher.finalize(key);
			            }
			            key.clamp();
			            var oKey = this._oKey = key.clone();
			            var iKey = this._iKey = key.clone();
			            var oKeyWords = oKey.words;
			            var iKeyWords = iKey.words;
			            for (var i = 0; i < hasherBlockSize; i++) {
			                oKeyWords[i] ^= 0x5c5c5c5c;
			                iKeyWords[i] ^= 0x36363636;
			            }
			            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;
			            this.reset();
			        },
			        reset: function () {
			            var hasher = this._hasher;
			            hasher.reset();
			            hasher.update(this._iKey);
			        },
			        update: function (messageUpdate) {
			            this._hasher.update(messageUpdate);
			            return this;
			        },
			        finalize: function (messageUpdate) {
			            var hasher = this._hasher;
			            var innerHash = hasher.finalize(messageUpdate);
			            hasher.reset();
			            var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));
			            return hmac;
			        }
			    });
			}());
		})); 
	} (hmac));
	return hmac.exports;
}

var pbkdf2 = {exports: {}};

var hasRequiredPbkdf2;

function requirePbkdf2 () {
	if (hasRequiredPbkdf2) return pbkdf2.exports;
	hasRequiredPbkdf2 = 1;
	(function (module, exports) {
(function (root, factory, undef) {
			{
				module.exports = factory(requireCore(), requireSha256(), requireHmac());
			}
		}(commonjsGlobal$1, function (CryptoJS) {
			(function () {
			    var C = CryptoJS;
			    var C_lib = C.lib;
			    var Base = C_lib.Base;
			    var WordArray = C_lib.WordArray;
			    var C_algo = C.algo;
			    var SHA256 = C_algo.SHA256;
			    var HMAC = C_algo.HMAC;
			    var PBKDF2 = C_algo.PBKDF2 = Base.extend({
			        cfg: Base.extend({
			            keySize: 128/32,
			            hasher: SHA256,
			            iterations: 250000
			        }),
			        init: function (cfg) {
			            this.cfg = this.cfg.extend(cfg);
			        },
			        compute: function (password, salt) {
			            var cfg = this.cfg;
			            var hmac = HMAC.create(cfg.hasher, password);
			            var derivedKey = WordArray.create();
			            var blockIndex = WordArray.create([0x00000001]);
			            var derivedKeyWords = derivedKey.words;
			            var blockIndexWords = blockIndex.words;
			            var keySize = cfg.keySize;
			            var iterations = cfg.iterations;
			            while (derivedKeyWords.length < keySize) {
			                var block = hmac.update(salt).finalize(blockIndex);
			                hmac.reset();
			                var blockWords = block.words;
			                var blockWordsLength = blockWords.length;
			                var intermediate = block;
			                for (var i = 1; i < iterations; i++) {
			                    intermediate = hmac.finalize(intermediate);
			                    hmac.reset();
			                    var intermediateWords = intermediate.words;
			                    for (var j = 0; j < blockWordsLength; j++) {
			                        blockWords[j] ^= intermediateWords[j];
			                    }
			                }
			                derivedKey.concat(block);
			                blockIndexWords[0]++;
			            }
			            derivedKey.sigBytes = keySize * 4;
			            return derivedKey;
			        }
			    });
			    C.PBKDF2 = function (password, salt, cfg) {
			        return PBKDF2.create(cfg).compute(password, salt);
			    };
			}());
			return CryptoJS.PBKDF2;
		})); 
	} (pbkdf2));
	return pbkdf2.exports;
}

var evpkdf = {exports: {}};

var hasRequiredEvpkdf;

function requireEvpkdf () {
	if (hasRequiredEvpkdf) return evpkdf.exports;
	hasRequiredEvpkdf = 1;
	(function (module, exports) {
(function (root, factory, undef) {
			{
				module.exports = factory(requireCore(), requireSha1(), requireHmac());
			}
		}(commonjsGlobal$1, function (CryptoJS) {
			(function () {
			    var C = CryptoJS;
			    var C_lib = C.lib;
			    var Base = C_lib.Base;
			    var WordArray = C_lib.WordArray;
			    var C_algo = C.algo;
			    var MD5 = C_algo.MD5;
			    var EvpKDF = C_algo.EvpKDF = Base.extend({
			        cfg: Base.extend({
			            keySize: 128/32,
			            hasher: MD5,
			            iterations: 1
			        }),
			        init: function (cfg) {
			            this.cfg = this.cfg.extend(cfg);
			        },
			        compute: function (password, salt) {
			            var block;
			            var cfg = this.cfg;
			            var hasher = cfg.hasher.create();
			            var derivedKey = WordArray.create();
			            var derivedKeyWords = derivedKey.words;
			            var keySize = cfg.keySize;
			            var iterations = cfg.iterations;
			            while (derivedKeyWords.length < keySize) {
			                if (block) {
			                    hasher.update(block);
			                }
			                block = hasher.update(password).finalize(salt);
			                hasher.reset();
			                for (var i = 1; i < iterations; i++) {
			                    block = hasher.finalize(block);
			                    hasher.reset();
			                }
			                derivedKey.concat(block);
			            }
			            derivedKey.sigBytes = keySize * 4;
			            return derivedKey;
			        }
			    });
			    C.EvpKDF = function (password, salt, cfg) {
			        return EvpKDF.create(cfg).compute(password, salt);
			    };
			}());
			return CryptoJS.EvpKDF;
		})); 
	} (evpkdf));
	return evpkdf.exports;
}

var cipherCore = {exports: {}};

var hasRequiredCipherCore;

function requireCipherCore () {
	if (hasRequiredCipherCore) return cipherCore.exports;
	hasRequiredCipherCore = 1;
	(function (module, exports) {
(function (root, factory, undef) {
			{
				module.exports = factory(requireCore(), requireEvpkdf());
			}
		}(commonjsGlobal$1, function (CryptoJS) {
			CryptoJS.lib.Cipher || (function (undefined$1) {
			    var C = CryptoJS;
			    var C_lib = C.lib;
			    var Base = C_lib.Base;
			    var WordArray = C_lib.WordArray;
			    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;
			    var C_enc = C.enc;
			    C_enc.Utf8;
			    var Base64 = C_enc.Base64;
			    var C_algo = C.algo;
			    var EvpKDF = C_algo.EvpKDF;
			    var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({
			        cfg: Base.extend(),
			        createEncryptor: function (key, cfg) {
			            return this.create(this._ENC_XFORM_MODE, key, cfg);
			        },
			        createDecryptor: function (key, cfg) {
			            return this.create(this._DEC_XFORM_MODE, key, cfg);
			        },
			        init: function (xformMode, key, cfg) {
			            this.cfg = this.cfg.extend(cfg);
			            this._xformMode = xformMode;
			            this._key = key;
			            this.reset();
			        },
			        reset: function () {
			            BufferedBlockAlgorithm.reset.call(this);
			            this._doReset();
			        },
			        process: function (dataUpdate) {
			            this._append(dataUpdate);
			            return this._process();
			        },
			        finalize: function (dataUpdate) {
			            if (dataUpdate) {
			                this._append(dataUpdate);
			            }
			            var finalProcessedData = this._doFinalize();
			            return finalProcessedData;
			        },
			        keySize: 128/32,
			        ivSize: 128/32,
			        _ENC_XFORM_MODE: 1,
			        _DEC_XFORM_MODE: 2,
			        _createHelper: (function () {
			            function selectCipherStrategy(key) {
			                if (typeof key == 'string') {
			                    return PasswordBasedCipher;
			                } else {
			                    return SerializableCipher;
			                }
			            }
			            return function (cipher) {
			                return {
			                    encrypt: function (message, key, cfg) {
			                        return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);
			                    },
			                    decrypt: function (ciphertext, key, cfg) {
			                        return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);
			                    }
			                };
			            };
			        }())
			    });
			    C_lib.StreamCipher = Cipher.extend({
			        _doFinalize: function () {
			            var finalProcessedBlocks = this._process(!!'flush');
			            return finalProcessedBlocks;
			        },
			        blockSize: 1
			    });
			    var C_mode = C.mode = {};
			    var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({
			        createEncryptor: function (cipher, iv) {
			            return this.Encryptor.create(cipher, iv);
			        },
			        createDecryptor: function (cipher, iv) {
			            return this.Decryptor.create(cipher, iv);
			        },
			        init: function (cipher, iv) {
			            this._cipher = cipher;
			            this._iv = iv;
			        }
			    });
			    var CBC = C_mode.CBC = (function () {
			        var CBC = BlockCipherMode.extend();
			        CBC.Encryptor = CBC.extend({
			            processBlock: function (words, offset) {
			                var cipher = this._cipher;
			                var blockSize = cipher.blockSize;
			                xorBlock.call(this, words, offset, blockSize);
			                cipher.encryptBlock(words, offset);
			                this._prevBlock = words.slice(offset, offset + blockSize);
			            }
			        });
			        CBC.Decryptor = CBC.extend({
			            processBlock: function (words, offset) {
			                var cipher = this._cipher;
			                var blockSize = cipher.blockSize;
			                var thisBlock = words.slice(offset, offset + blockSize);
			                cipher.decryptBlock(words, offset);
			                xorBlock.call(this, words, offset, blockSize);
			                this._prevBlock = thisBlock;
			            }
			        });
			        function xorBlock(words, offset, blockSize) {
			            var block;
			            var iv = this._iv;
			            if (iv) {
			                block = iv;
			                this._iv = undefined$1;
			            } else {
			                block = this._prevBlock;
			            }
			            for (var i = 0; i < blockSize; i++) {
			                words[offset + i] ^= block[i];
			            }
			        }
			        return CBC;
			    }());
			    var C_pad = C.pad = {};
			    var Pkcs7 = C_pad.Pkcs7 = {
			        pad: function (data, blockSize) {
			            var blockSizeBytes = blockSize * 4;
			            var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;
			            var paddingWord = (nPaddingBytes << 24) | (nPaddingBytes << 16) | (nPaddingBytes << 8) | nPaddingBytes;
			            var paddingWords = [];
			            for (var i = 0; i < nPaddingBytes; i += 4) {
			                paddingWords.push(paddingWord);
			            }
			            var padding = WordArray.create(paddingWords, nPaddingBytes);
			            data.concat(padding);
			        },
			        unpad: function (data) {
			            var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;
			            data.sigBytes -= nPaddingBytes;
			        }
			    };
			    C_lib.BlockCipher = Cipher.extend({
			        cfg: Cipher.cfg.extend({
			            mode: CBC,
			            padding: Pkcs7
			        }),
			        reset: function () {
			            var modeCreator;
			            Cipher.reset.call(this);
			            var cfg = this.cfg;
			            var iv = cfg.iv;
			            var mode = cfg.mode;
			            if (this._xformMode == this._ENC_XFORM_MODE) {
			                modeCreator = mode.createEncryptor;
			            } else  {
			                modeCreator = mode.createDecryptor;
			                this._minBufferSize = 1;
			            }
			            if (this._mode && this._mode.__creator == modeCreator) {
			                this._mode.init(this, iv && iv.words);
			            } else {
			                this._mode = modeCreator.call(mode, this, iv && iv.words);
			                this._mode.__creator = modeCreator;
			            }
			        },
			        _doProcessBlock: function (words, offset) {
			            this._mode.processBlock(words, offset);
			        },
			        _doFinalize: function () {
			            var finalProcessedBlocks;
			            var padding = this.cfg.padding;
			            if (this._xformMode == this._ENC_XFORM_MODE) {
			                padding.pad(this._data, this.blockSize);
			                finalProcessedBlocks = this._process(!!'flush');
			            } else  {
			                finalProcessedBlocks = this._process(!!'flush');
			                padding.unpad(finalProcessedBlocks);
			            }
			            return finalProcessedBlocks;
			        },
			        blockSize: 128/32
			    });
			    var CipherParams = C_lib.CipherParams = Base.extend({
			        init: function (cipherParams) {
			            this.mixIn(cipherParams);
			        },
			        toString: function (formatter) {
			            return (formatter || this.formatter).stringify(this);
			        }
			    });
			    var C_format = C.format = {};
			    var OpenSSLFormatter = C_format.OpenSSL = {
			        stringify: function (cipherParams) {
			            var wordArray;
			            var ciphertext = cipherParams.ciphertext;
			            var salt = cipherParams.salt;
			            if (salt) {
			                wordArray = WordArray.create([0x53616c74, 0x65645f5f]).concat(salt).concat(ciphertext);
			            } else {
			                wordArray = ciphertext;
			            }
			            return wordArray.toString(Base64);
			        },
			        parse: function (openSSLStr) {
			            var salt;
			            var ciphertext = Base64.parse(openSSLStr);
			            var ciphertextWords = ciphertext.words;
			            if (ciphertextWords[0] == 0x53616c74 && ciphertextWords[1] == 0x65645f5f) {
			                salt = WordArray.create(ciphertextWords.slice(2, 4));
			                ciphertextWords.splice(0, 4);
			                ciphertext.sigBytes -= 16;
			            }
			            return CipherParams.create({ ciphertext: ciphertext, salt: salt });
			        }
			    };
			    var SerializableCipher = C_lib.SerializableCipher = Base.extend({
			        cfg: Base.extend({
			            format: OpenSSLFormatter
			        }),
			        encrypt: function (cipher, message, key, cfg) {
			            cfg = this.cfg.extend(cfg);
			            var encryptor = cipher.createEncryptor(key, cfg);
			            var ciphertext = encryptor.finalize(message);
			            var cipherCfg = encryptor.cfg;
			            return CipherParams.create({
			                ciphertext: ciphertext,
			                key: key,
			                iv: cipherCfg.iv,
			                algorithm: cipher,
			                mode: cipherCfg.mode,
			                padding: cipherCfg.padding,
			                blockSize: cipher.blockSize,
			                formatter: cfg.format
			            });
			        },
			        decrypt: function (cipher, ciphertext, key, cfg) {
			            cfg = this.cfg.extend(cfg);
			            ciphertext = this._parse(ciphertext, cfg.format);
			            var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);
			            return plaintext;
			        },
			        _parse: function (ciphertext, format) {
			            if (typeof ciphertext == 'string') {
			                return format.parse(ciphertext, this);
			            } else {
			                return ciphertext;
			            }
			        }
			    });
			    var C_kdf = C.kdf = {};
			    var OpenSSLKdf = C_kdf.OpenSSL = {
			        execute: function (password, keySize, ivSize, salt, hasher) {
			            if (!salt) {
			                salt = WordArray.random(64/8);
			            }
			            if (!hasher) {
			                var key = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);
			            } else {
			                var key = EvpKDF.create({ keySize: keySize + ivSize, hasher: hasher }).compute(password, salt);
			            }
			            var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);
			            key.sigBytes = keySize * 4;
			            return CipherParams.create({ key: key, iv: iv, salt: salt });
			        }
			    };
			    var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({
			        cfg: SerializableCipher.cfg.extend({
			            kdf: OpenSSLKdf
			        }),
			        encrypt: function (cipher, message, password, cfg) {
			            cfg = this.cfg.extend(cfg);
			            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, cfg.salt, cfg.hasher);
			            cfg.iv = derivedParams.iv;
			            var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);
			            ciphertext.mixIn(derivedParams);
			            return ciphertext;
			        },
			        decrypt: function (cipher, ciphertext, password, cfg) {
			            cfg = this.cfg.extend(cfg);
			            ciphertext = this._parse(ciphertext, cfg.format);
			            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt, cfg.hasher);
			            cfg.iv = derivedParams.iv;
			            var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);
			            return plaintext;
			        }
			    });
			}());
		})); 
	} (cipherCore));
	return cipherCore.exports;
}

var modeCfb = {exports: {}};

var hasRequiredModeCfb;

function requireModeCfb () {
	if (hasRequiredModeCfb) return modeCfb.exports;
	hasRequiredModeCfb = 1;
	(function (module, exports) {
(function (root, factory, undef) {
			{
				module.exports = factory(requireCore(), requireCipherCore());
			}
		}(commonjsGlobal$1, function (CryptoJS) {
			CryptoJS.mode.CFB = (function () {
			    var CFB = CryptoJS.lib.BlockCipherMode.extend();
			    CFB.Encryptor = CFB.extend({
			        processBlock: function (words, offset) {
			            var cipher = this._cipher;
			            var blockSize = cipher.blockSize;
			            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);
			            this._prevBlock = words.slice(offset, offset + blockSize);
			        }
			    });
			    CFB.Decryptor = CFB.extend({
			        processBlock: function (words, offset) {
			            var cipher = this._cipher;
			            var blockSize = cipher.blockSize;
			            var thisBlock = words.slice(offset, offset + blockSize);
			            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);
			            this._prevBlock = thisBlock;
			        }
			    });
			    function generateKeystreamAndEncrypt(words, offset, blockSize, cipher) {
			        var keystream;
			        var iv = this._iv;
			        if (iv) {
			            keystream = iv.slice(0);
			            this._iv = undefined;
			        } else {
			            keystream = this._prevBlock;
			        }
			        cipher.encryptBlock(keystream, 0);
			        for (var i = 0; i < blockSize; i++) {
			            words[offset + i] ^= keystream[i];
			        }
			    }
			    return CFB;
			}());
			return CryptoJS.mode.CFB;
		})); 
	} (modeCfb));
	return modeCfb.exports;
}

var modeCtr = {exports: {}};

var hasRequiredModeCtr;

function requireModeCtr () {
	if (hasRequiredModeCtr) return modeCtr.exports;
	hasRequiredModeCtr = 1;
	(function (module, exports) {
(function (root, factory, undef) {
			{
				module.exports = factory(requireCore(), requireCipherCore());
			}
		}(commonjsGlobal$1, function (CryptoJS) {
			CryptoJS.mode.CTR = (function () {
			    var CTR = CryptoJS.lib.BlockCipherMode.extend();
			    var Encryptor = CTR.Encryptor = CTR.extend({
			        processBlock: function (words, offset) {
			            var cipher = this._cipher;
			            var blockSize = cipher.blockSize;
			            var iv = this._iv;
			            var counter = this._counter;
			            if (iv) {
			                counter = this._counter = iv.slice(0);
			                this._iv = undefined;
			            }
			            var keystream = counter.slice(0);
			            cipher.encryptBlock(keystream, 0);
			            counter[blockSize - 1] = (counter[blockSize - 1] + 1) | 0;
			            for (var i = 0; i < blockSize; i++) {
			                words[offset + i] ^= keystream[i];
			            }
			        }
			    });
			    CTR.Decryptor = Encryptor;
			    return CTR;
			}());
			return CryptoJS.mode.CTR;
		})); 
	} (modeCtr));
	return modeCtr.exports;
}

var modeCtrGladman = {exports: {}};

var hasRequiredModeCtrGladman;

function requireModeCtrGladman () {
	if (hasRequiredModeCtrGladman) return modeCtrGladman.exports;
	hasRequiredModeCtrGladman = 1;
	(function (module, exports) {
(function (root, factory, undef) {
			{
				module.exports = factory(requireCore(), requireCipherCore());
			}
		}(commonjsGlobal$1, function (CryptoJS) {
			/** @preserve
			 * Counter block mode compatible with  Dr Brian Gladman fileenc.c
			 * derived from CryptoJS.mode.CTR
			 * Jan Hruby jhruby.web@gmail.com
			 */
			CryptoJS.mode.CTRGladman = (function () {
			    var CTRGladman = CryptoJS.lib.BlockCipherMode.extend();
				function incWord(word)
				{
					if (((word >> 24) & 0xff) === 0xff) {
					var b1 = (word >> 16)&0xff;
					var b2 = (word >> 8)&0xff;
					var b3 = word & 0xff;
					if (b1 === 0xff)
					{
					b1 = 0;
					if (b2 === 0xff)
					{
						b2 = 0;
						if (b3 === 0xff)
						{
							b3 = 0;
						}
						else
						{
							++b3;
						}
					}
					else
					{
						++b2;
					}
					}
					else
					{
					++b1;
					}
					word = 0;
					word += (b1 << 16);
					word += (b2 << 8);
					word += b3;
					}
					else
					{
					word += (0x01 << 24);
					}
					return word;
				}
				function incCounter(counter)
				{
					if ((counter[0] = incWord(counter[0])) === 0)
					{
						counter[1] = incWord(counter[1]);
					}
					return counter;
				}
			    var Encryptor = CTRGladman.Encryptor = CTRGladman.extend({
			        processBlock: function (words, offset) {
			            var cipher = this._cipher;
			            var blockSize = cipher.blockSize;
			            var iv = this._iv;
			            var counter = this._counter;
			            if (iv) {
			                counter = this._counter = iv.slice(0);
			                this._iv = undefined;
			            }
						incCounter(counter);
						var keystream = counter.slice(0);
			            cipher.encryptBlock(keystream, 0);
			            for (var i = 0; i < blockSize; i++) {
			                words[offset + i] ^= keystream[i];
			            }
			        }
			    });
			    CTRGladman.Decryptor = Encryptor;
			    return CTRGladman;
			}());
			return CryptoJS.mode.CTRGladman;
		})); 
	} (modeCtrGladman));
	return modeCtrGladman.exports;
}

var modeOfb = {exports: {}};

var hasRequiredModeOfb;

function requireModeOfb () {
	if (hasRequiredModeOfb) return modeOfb.exports;
	hasRequiredModeOfb = 1;
	(function (module, exports) {
(function (root, factory, undef) {
			{
				module.exports = factory(requireCore(), requireCipherCore());
			}
		}(commonjsGlobal$1, function (CryptoJS) {
			CryptoJS.mode.OFB = (function () {
			    var OFB = CryptoJS.lib.BlockCipherMode.extend();
			    var Encryptor = OFB.Encryptor = OFB.extend({
			        processBlock: function (words, offset) {
			            var cipher = this._cipher;
			            var blockSize = cipher.blockSize;
			            var iv = this._iv;
			            var keystream = this._keystream;
			            if (iv) {
			                keystream = this._keystream = iv.slice(0);
			                this._iv = undefined;
			            }
			            cipher.encryptBlock(keystream, 0);
			            for (var i = 0; i < blockSize; i++) {
			                words[offset + i] ^= keystream[i];
			            }
			        }
			    });
			    OFB.Decryptor = Encryptor;
			    return OFB;
			}());
			return CryptoJS.mode.OFB;
		})); 
	} (modeOfb));
	return modeOfb.exports;
}

var modeEcb = {exports: {}};

var hasRequiredModeEcb;

function requireModeEcb () {
	if (hasRequiredModeEcb) return modeEcb.exports;
	hasRequiredModeEcb = 1;
	(function (module, exports) {
(function (root, factory, undef) {
			{
				module.exports = factory(requireCore(), requireCipherCore());
			}
		}(commonjsGlobal$1, function (CryptoJS) {
			CryptoJS.mode.ECB = (function () {
			    var ECB = CryptoJS.lib.BlockCipherMode.extend();
			    ECB.Encryptor = ECB.extend({
			        processBlock: function (words, offset) {
			            this._cipher.encryptBlock(words, offset);
			        }
			    });
			    ECB.Decryptor = ECB.extend({
			        processBlock: function (words, offset) {
			            this._cipher.decryptBlock(words, offset);
			        }
			    });
			    return ECB;
			}());
			return CryptoJS.mode.ECB;
		})); 
	} (modeEcb));
	return modeEcb.exports;
}

var padAnsix923 = {exports: {}};

var hasRequiredPadAnsix923;

function requirePadAnsix923 () {
	if (hasRequiredPadAnsix923) return padAnsix923.exports;
	hasRequiredPadAnsix923 = 1;
	(function (module, exports) {
(function (root, factory, undef) {
			{
				module.exports = factory(requireCore(), requireCipherCore());
			}
		}(commonjsGlobal$1, function (CryptoJS) {
			CryptoJS.pad.AnsiX923 = {
			    pad: function (data, blockSize) {
			        var dataSigBytes = data.sigBytes;
			        var blockSizeBytes = blockSize * 4;
			        var nPaddingBytes = blockSizeBytes - dataSigBytes % blockSizeBytes;
			        var lastBytePos = dataSigBytes + nPaddingBytes - 1;
			        data.clamp();
			        data.words[lastBytePos >>> 2] |= nPaddingBytes << (24 - (lastBytePos % 4) * 8);
			        data.sigBytes += nPaddingBytes;
			    },
			    unpad: function (data) {
			        var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;
			        data.sigBytes -= nPaddingBytes;
			    }
			};
			return CryptoJS.pad.Ansix923;
		})); 
	} (padAnsix923));
	return padAnsix923.exports;
}

var padIso10126 = {exports: {}};

var hasRequiredPadIso10126;

function requirePadIso10126 () {
	if (hasRequiredPadIso10126) return padIso10126.exports;
	hasRequiredPadIso10126 = 1;
	(function (module, exports) {
(function (root, factory, undef) {
			{
				module.exports = factory(requireCore(), requireCipherCore());
			}
		}(commonjsGlobal$1, function (CryptoJS) {
			CryptoJS.pad.Iso10126 = {
			    pad: function (data, blockSize) {
			        var blockSizeBytes = blockSize * 4;
			        var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;
			        data.concat(CryptoJS.lib.WordArray.random(nPaddingBytes - 1)).
			             concat(CryptoJS.lib.WordArray.create([nPaddingBytes << 24], 1));
			    },
			    unpad: function (data) {
			        var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;
			        data.sigBytes -= nPaddingBytes;
			    }
			};
			return CryptoJS.pad.Iso10126;
		})); 
	} (padIso10126));
	return padIso10126.exports;
}

var padIso97971 = {exports: {}};

var hasRequiredPadIso97971;

function requirePadIso97971 () {
	if (hasRequiredPadIso97971) return padIso97971.exports;
	hasRequiredPadIso97971 = 1;
	(function (module, exports) {
(function (root, factory, undef) {
			{
				module.exports = factory(requireCore(), requireCipherCore());
			}
		}(commonjsGlobal$1, function (CryptoJS) {
			CryptoJS.pad.Iso97971 = {
			    pad: function (data, blockSize) {
			        data.concat(CryptoJS.lib.WordArray.create([0x80000000], 1));
			        CryptoJS.pad.ZeroPadding.pad(data, blockSize);
			    },
			    unpad: function (data) {
			        CryptoJS.pad.ZeroPadding.unpad(data);
			        data.sigBytes--;
			    }
			};
			return CryptoJS.pad.Iso97971;
		})); 
	} (padIso97971));
	return padIso97971.exports;
}

var padZeropadding = {exports: {}};

var hasRequiredPadZeropadding;

function requirePadZeropadding () {
	if (hasRequiredPadZeropadding) return padZeropadding.exports;
	hasRequiredPadZeropadding = 1;
	(function (module, exports) {
(function (root, factory, undef) {
			{
				module.exports = factory(requireCore(), requireCipherCore());
			}
		}(commonjsGlobal$1, function (CryptoJS) {
			CryptoJS.pad.ZeroPadding = {
			    pad: function (data, blockSize) {
			        var blockSizeBytes = blockSize * 4;
			        data.clamp();
			        data.sigBytes += blockSizeBytes - ((data.sigBytes % blockSizeBytes) || blockSizeBytes);
			    },
			    unpad: function (data) {
			        var dataWords = data.words;
			        var i = data.sigBytes - 1;
			        for (var i = data.sigBytes - 1; i >= 0; i--) {
			            if (((dataWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff)) {
			                data.sigBytes = i + 1;
			                break;
			            }
			        }
			    }
			};
			return CryptoJS.pad.ZeroPadding;
		})); 
	} (padZeropadding));
	return padZeropadding.exports;
}

var padNopadding = {exports: {}};

var hasRequiredPadNopadding;

function requirePadNopadding () {
	if (hasRequiredPadNopadding) return padNopadding.exports;
	hasRequiredPadNopadding = 1;
	(function (module, exports) {
(function (root, factory, undef) {
			{
				module.exports = factory(requireCore(), requireCipherCore());
			}
		}(commonjsGlobal$1, function (CryptoJS) {
			CryptoJS.pad.NoPadding = {
			    pad: function () {
			    },
			    unpad: function () {
			    }
			};
			return CryptoJS.pad.NoPadding;
		})); 
	} (padNopadding));
	return padNopadding.exports;
}

var formatHex = {exports: {}};

var hasRequiredFormatHex;

function requireFormatHex () {
	if (hasRequiredFormatHex) return formatHex.exports;
	hasRequiredFormatHex = 1;
	(function (module, exports) {
(function (root, factory, undef) {
			{
				module.exports = factory(requireCore(), requireCipherCore());
			}
		}(commonjsGlobal$1, function (CryptoJS) {
			(function (undefined$1) {
			    var C = CryptoJS;
			    var C_lib = C.lib;
			    var CipherParams = C_lib.CipherParams;
			    var C_enc = C.enc;
			    var Hex = C_enc.Hex;
			    var C_format = C.format;
			    C_format.Hex = {
			        stringify: function (cipherParams) {
			            return cipherParams.ciphertext.toString(Hex);
			        },
			        parse: function (input) {
			            var ciphertext = Hex.parse(input);
			            return CipherParams.create({ ciphertext: ciphertext });
			        }
			    };
			}());
			return CryptoJS.format.Hex;
		})); 
	} (formatHex));
	return formatHex.exports;
}

var aes = {exports: {}};

var hasRequiredAes;

function requireAes () {
	if (hasRequiredAes) return aes.exports;
	hasRequiredAes = 1;
	(function (module, exports) {
(function (root, factory, undef) {
			{
				module.exports = factory(requireCore(), requireEncBase64(), requireMd5(), requireEvpkdf(), requireCipherCore());
			}
		}(commonjsGlobal$1, function (CryptoJS) {
			(function () {
			    var C = CryptoJS;
			    var C_lib = C.lib;
			    var BlockCipher = C_lib.BlockCipher;
			    var C_algo = C.algo;
			    var SBOX = [];
			    var INV_SBOX = [];
			    var SUB_MIX_0 = [];
			    var SUB_MIX_1 = [];
			    var SUB_MIX_2 = [];
			    var SUB_MIX_3 = [];
			    var INV_SUB_MIX_0 = [];
			    var INV_SUB_MIX_1 = [];
			    var INV_SUB_MIX_2 = [];
			    var INV_SUB_MIX_3 = [];
			    (function () {
			        var d = [];
			        for (var i = 0; i < 256; i++) {
			            if (i < 128) {
			                d[i] = i << 1;
			            } else {
			                d[i] = (i << 1) ^ 0x11b;
			            }
			        }
			        var x = 0;
			        var xi = 0;
			        for (var i = 0; i < 256; i++) {
			            var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4);
			            sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63;
			            SBOX[x] = sx;
			            INV_SBOX[sx] = x;
			            var x2 = d[x];
			            var x4 = d[x2];
			            var x8 = d[x4];
			            var t = (d[sx] * 0x101) ^ (sx * 0x1010100);
			            SUB_MIX_0[x] = (t << 24) | (t >>> 8);
			            SUB_MIX_1[x] = (t << 16) | (t >>> 16);
			            SUB_MIX_2[x] = (t << 8)  | (t >>> 24);
			            SUB_MIX_3[x] = t;
			            var t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100);
			            INV_SUB_MIX_0[sx] = (t << 24) | (t >>> 8);
			            INV_SUB_MIX_1[sx] = (t << 16) | (t >>> 16);
			            INV_SUB_MIX_2[sx] = (t << 8)  | (t >>> 24);
			            INV_SUB_MIX_3[sx] = t;
			            if (!x) {
			                x = xi = 1;
			            } else {
			                x = x2 ^ d[d[d[x8 ^ x2]]];
			                xi ^= d[d[xi]];
			            }
			        }
			    }());
			    var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];
			    var AES = C_algo.AES = BlockCipher.extend({
			        _doReset: function () {
			            var t;
			            if (this._nRounds && this._keyPriorReset === this._key) {
			                return;
			            }
			            var key = this._keyPriorReset = this._key;
			            var keyWords = key.words;
			            var keySize = key.sigBytes / 4;
			            var nRounds = this._nRounds = keySize + 6;
			            var ksRows = (nRounds + 1) * 4;
			            var keySchedule = this._keySchedule = [];
			            for (var ksRow = 0; ksRow < ksRows; ksRow++) {
			                if (ksRow < keySize) {
			                    keySchedule[ksRow] = keyWords[ksRow];
			                } else {
			                    t = keySchedule[ksRow - 1];
			                    if (!(ksRow % keySize)) {
			                        t = (t << 8) | (t >>> 24);
			                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];
			                        t ^= RCON[(ksRow / keySize) | 0] << 24;
			                    } else if (keySize > 6 && ksRow % keySize == 4) {
			                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];
			                    }
			                    keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;
			                }
			            }
			            var invKeySchedule = this._invKeySchedule = [];
			            for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {
			                var ksRow = ksRows - invKsRow;
			                if (invKsRow % 4) {
			                    var t = keySchedule[ksRow];
			                } else {
			                    var t = keySchedule[ksRow - 4];
			                }
			                if (invKsRow < 4 || ksRow <= 4) {
			                    invKeySchedule[invKsRow] = t;
			                } else {
			                    invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[(t >>> 16) & 0xff]] ^
			                                               INV_SUB_MIX_2[SBOX[(t >>> 8) & 0xff]] ^ INV_SUB_MIX_3[SBOX[t & 0xff]];
			                }
			            }
			        },
			        encryptBlock: function (M, offset) {
			            this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);
			        },
			        decryptBlock: function (M, offset) {
			            var t = M[offset + 1];
			            M[offset + 1] = M[offset + 3];
			            M[offset + 3] = t;
			            this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);
			            var t = M[offset + 1];
			            M[offset + 1] = M[offset + 3];
			            M[offset + 3] = t;
			        },
			        _doCryptBlock: function (M, offset, keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX) {
			            var nRounds = this._nRounds;
			            var s0 = M[offset]     ^ keySchedule[0];
			            var s1 = M[offset + 1] ^ keySchedule[1];
			            var s2 = M[offset + 2] ^ keySchedule[2];
			            var s3 = M[offset + 3] ^ keySchedule[3];
			            var ksRow = 4;
			            for (var round = 1; round < nRounds; round++) {
			                var t0 = SUB_MIX_0[s0 >>> 24] ^ SUB_MIX_1[(s1 >>> 16) & 0xff] ^ SUB_MIX_2[(s2 >>> 8) & 0xff] ^ SUB_MIX_3[s3 & 0xff] ^ keySchedule[ksRow++];
			                var t1 = SUB_MIX_0[s1 >>> 24] ^ SUB_MIX_1[(s2 >>> 16) & 0xff] ^ SUB_MIX_2[(s3 >>> 8) & 0xff] ^ SUB_MIX_3[s0 & 0xff] ^ keySchedule[ksRow++];
			                var t2 = SUB_MIX_0[s2 >>> 24] ^ SUB_MIX_1[(s3 >>> 16) & 0xff] ^ SUB_MIX_2[(s0 >>> 8) & 0xff] ^ SUB_MIX_3[s1 & 0xff] ^ keySchedule[ksRow++];
			                var t3 = SUB_MIX_0[s3 >>> 24] ^ SUB_MIX_1[(s0 >>> 16) & 0xff] ^ SUB_MIX_2[(s1 >>> 8) & 0xff] ^ SUB_MIX_3[s2 & 0xff] ^ keySchedule[ksRow++];
			                s0 = t0;
			                s1 = t1;
			                s2 = t2;
			                s3 = t3;
			            }
			            var t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];
			            var t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];
			            var t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];
			            var t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];
			            M[offset]     = t0;
			            M[offset + 1] = t1;
			            M[offset + 2] = t2;
			            M[offset + 3] = t3;
			        },
			        keySize: 256/32
			    });
			    C.AES = BlockCipher._createHelper(AES);
			}());
			return CryptoJS.AES;
		})); 
	} (aes));
	return aes.exports;
}

var tripledes = {exports: {}};

var hasRequiredTripledes;

function requireTripledes () {
	if (hasRequiredTripledes) return tripledes.exports;
	hasRequiredTripledes = 1;
	(function (module, exports) {
(function (root, factory, undef) {
			{
				module.exports = factory(requireCore(), requireEncBase64(), requireMd5(), requireEvpkdf(), requireCipherCore());
			}
		}(commonjsGlobal$1, function (CryptoJS) {
			(function () {
			    var C = CryptoJS;
			    var C_lib = C.lib;
			    var WordArray = C_lib.WordArray;
			    var BlockCipher = C_lib.BlockCipher;
			    var C_algo = C.algo;
			    var PC1 = [
			        57, 49, 41, 33, 25, 17, 9,  1,
			        58, 50, 42, 34, 26, 18, 10, 2,
			        59, 51, 43, 35, 27, 19, 11, 3,
			        60, 52, 44, 36, 63, 55, 47, 39,
			        31, 23, 15, 7,  62, 54, 46, 38,
			        30, 22, 14, 6,  61, 53, 45, 37,
			        29, 21, 13, 5,  28, 20, 12, 4
			    ];
			    var PC2 = [
			        14, 17, 11, 24, 1,  5,
			        3,  28, 15, 6,  21, 10,
			        23, 19, 12, 4,  26, 8,
			        16, 7,  27, 20, 13, 2,
			        41, 52, 31, 37, 47, 55,
			        30, 40, 51, 45, 33, 48,
			        44, 49, 39, 56, 34, 53,
			        46, 42, 50, 36, 29, 32
			    ];
			    var BIT_SHIFTS = [1,  2,  4,  6,  8,  10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28];
			    var SBOX_P = [
			        {
			            0x0: 0x808200,
			            0x10000000: 0x8000,
			            0x20000000: 0x808002,
			            0x30000000: 0x2,
			            0x40000000: 0x200,
			            0x50000000: 0x808202,
			            0x60000000: 0x800202,
			            0x70000000: 0x800000,
			            0x80000000: 0x202,
			            0x90000000: 0x800200,
			            0xa0000000: 0x8200,
			            0xb0000000: 0x808000,
			            0xc0000000: 0x8002,
			            0xd0000000: 0x800002,
			            0xe0000000: 0x0,
			            0xf0000000: 0x8202,
			            0x8000000: 0x0,
			            0x18000000: 0x808202,
			            0x28000000: 0x8202,
			            0x38000000: 0x8000,
			            0x48000000: 0x808200,
			            0x58000000: 0x200,
			            0x68000000: 0x808002,
			            0x78000000: 0x2,
			            0x88000000: 0x800200,
			            0x98000000: 0x8200,
			            0xa8000000: 0x808000,
			            0xb8000000: 0x800202,
			            0xc8000000: 0x800002,
			            0xd8000000: 0x8002,
			            0xe8000000: 0x202,
			            0xf8000000: 0x800000,
			            0x1: 0x8000,
			            0x10000001: 0x2,
			            0x20000001: 0x808200,
			            0x30000001: 0x800000,
			            0x40000001: 0x808002,
			            0x50000001: 0x8200,
			            0x60000001: 0x200,
			            0x70000001: 0x800202,
			            0x80000001: 0x808202,
			            0x90000001: 0x808000,
			            0xa0000001: 0x800002,
			            0xb0000001: 0x8202,
			            0xc0000001: 0x202,
			            0xd0000001: 0x800200,
			            0xe0000001: 0x8002,
			            0xf0000001: 0x0,
			            0x8000001: 0x808202,
			            0x18000001: 0x808000,
			            0x28000001: 0x800000,
			            0x38000001: 0x200,
			            0x48000001: 0x8000,
			            0x58000001: 0x800002,
			            0x68000001: 0x2,
			            0x78000001: 0x8202,
			            0x88000001: 0x8002,
			            0x98000001: 0x800202,
			            0xa8000001: 0x202,
			            0xb8000001: 0x808200,
			            0xc8000001: 0x800200,
			            0xd8000001: 0x0,
			            0xe8000001: 0x8200,
			            0xf8000001: 0x808002
			        },
			        {
			            0x0: 0x40084010,
			            0x1000000: 0x4000,
			            0x2000000: 0x80000,
			            0x3000000: 0x40080010,
			            0x4000000: 0x40000010,
			            0x5000000: 0x40084000,
			            0x6000000: 0x40004000,
			            0x7000000: 0x10,
			            0x8000000: 0x84000,
			            0x9000000: 0x40004010,
			            0xa000000: 0x40000000,
			            0xb000000: 0x84010,
			            0xc000000: 0x80010,
			            0xd000000: 0x0,
			            0xe000000: 0x4010,
			            0xf000000: 0x40080000,
			            0x800000: 0x40004000,
			            0x1800000: 0x84010,
			            0x2800000: 0x10,
			            0x3800000: 0x40004010,
			            0x4800000: 0x40084010,
			            0x5800000: 0x40000000,
			            0x6800000: 0x80000,
			            0x7800000: 0x40080010,
			            0x8800000: 0x80010,
			            0x9800000: 0x0,
			            0xa800000: 0x4000,
			            0xb800000: 0x40080000,
			            0xc800000: 0x40000010,
			            0xd800000: 0x84000,
			            0xe800000: 0x40084000,
			            0xf800000: 0x4010,
			            0x10000000: 0x0,
			            0x11000000: 0x40080010,
			            0x12000000: 0x40004010,
			            0x13000000: 0x40084000,
			            0x14000000: 0x40080000,
			            0x15000000: 0x10,
			            0x16000000: 0x84010,
			            0x17000000: 0x4000,
			            0x18000000: 0x4010,
			            0x19000000: 0x80000,
			            0x1a000000: 0x80010,
			            0x1b000000: 0x40000010,
			            0x1c000000: 0x84000,
			            0x1d000000: 0x40004000,
			            0x1e000000: 0x40000000,
			            0x1f000000: 0x40084010,
			            0x10800000: 0x84010,
			            0x11800000: 0x80000,
			            0x12800000: 0x40080000,
			            0x13800000: 0x4000,
			            0x14800000: 0x40004000,
			            0x15800000: 0x40084010,
			            0x16800000: 0x10,
			            0x17800000: 0x40000000,
			            0x18800000: 0x40084000,
			            0x19800000: 0x40000010,
			            0x1a800000: 0x40004010,
			            0x1b800000: 0x80010,
			            0x1c800000: 0x0,
			            0x1d800000: 0x4010,
			            0x1e800000: 0x40080010,
			            0x1f800000: 0x84000
			        },
			        {
			            0x0: 0x104,
			            0x100000: 0x0,
			            0x200000: 0x4000100,
			            0x300000: 0x10104,
			            0x400000: 0x10004,
			            0x500000: 0x4000004,
			            0x600000: 0x4010104,
			            0x700000: 0x4010000,
			            0x800000: 0x4000000,
			            0x900000: 0x4010100,
			            0xa00000: 0x10100,
			            0xb00000: 0x4010004,
			            0xc00000: 0x4000104,
			            0xd00000: 0x10000,
			            0xe00000: 0x4,
			            0xf00000: 0x100,
			            0x80000: 0x4010100,
			            0x180000: 0x4010004,
			            0x280000: 0x0,
			            0x380000: 0x4000100,
			            0x480000: 0x4000004,
			            0x580000: 0x10000,
			            0x680000: 0x10004,
			            0x780000: 0x104,
			            0x880000: 0x4,
			            0x980000: 0x100,
			            0xa80000: 0x4010000,
			            0xb80000: 0x10104,
			            0xc80000: 0x10100,
			            0xd80000: 0x4000104,
			            0xe80000: 0x4010104,
			            0xf80000: 0x4000000,
			            0x1000000: 0x4010100,
			            0x1100000: 0x10004,
			            0x1200000: 0x10000,
			            0x1300000: 0x4000100,
			            0x1400000: 0x100,
			            0x1500000: 0x4010104,
			            0x1600000: 0x4000004,
			            0x1700000: 0x0,
			            0x1800000: 0x4000104,
			            0x1900000: 0x4000000,
			            0x1a00000: 0x4,
			            0x1b00000: 0x10100,
			            0x1c00000: 0x4010000,
			            0x1d00000: 0x104,
			            0x1e00000: 0x10104,
			            0x1f00000: 0x4010004,
			            0x1080000: 0x4000000,
			            0x1180000: 0x104,
			            0x1280000: 0x4010100,
			            0x1380000: 0x0,
			            0x1480000: 0x10004,
			            0x1580000: 0x4000100,
			            0x1680000: 0x100,
			            0x1780000: 0x4010004,
			            0x1880000: 0x10000,
			            0x1980000: 0x4010104,
			            0x1a80000: 0x10104,
			            0x1b80000: 0x4000004,
			            0x1c80000: 0x4000104,
			            0x1d80000: 0x4010000,
			            0x1e80000: 0x4,
			            0x1f80000: 0x10100
			        },
			        {
			            0x0: 0x80401000,
			            0x10000: 0x80001040,
			            0x20000: 0x401040,
			            0x30000: 0x80400000,
			            0x40000: 0x0,
			            0x50000: 0x401000,
			            0x60000: 0x80000040,
			            0x70000: 0x400040,
			            0x80000: 0x80000000,
			            0x90000: 0x400000,
			            0xa0000: 0x40,
			            0xb0000: 0x80001000,
			            0xc0000: 0x80400040,
			            0xd0000: 0x1040,
			            0xe0000: 0x1000,
			            0xf0000: 0x80401040,
			            0x8000: 0x80001040,
			            0x18000: 0x40,
			            0x28000: 0x80400040,
			            0x38000: 0x80001000,
			            0x48000: 0x401000,
			            0x58000: 0x80401040,
			            0x68000: 0x0,
			            0x78000: 0x80400000,
			            0x88000: 0x1000,
			            0x98000: 0x80401000,
			            0xa8000: 0x400000,
			            0xb8000: 0x1040,
			            0xc8000: 0x80000000,
			            0xd8000: 0x400040,
			            0xe8000: 0x401040,
			            0xf8000: 0x80000040,
			            0x100000: 0x400040,
			            0x110000: 0x401000,
			            0x120000: 0x80000040,
			            0x130000: 0x0,
			            0x140000: 0x1040,
			            0x150000: 0x80400040,
			            0x160000: 0x80401000,
			            0x170000: 0x80001040,
			            0x180000: 0x80401040,
			            0x190000: 0x80000000,
			            0x1a0000: 0x80400000,
			            0x1b0000: 0x401040,
			            0x1c0000: 0x80001000,
			            0x1d0000: 0x400000,
			            0x1e0000: 0x40,
			            0x1f0000: 0x1000,
			            0x108000: 0x80400000,
			            0x118000: 0x80401040,
			            0x128000: 0x0,
			            0x138000: 0x401000,
			            0x148000: 0x400040,
			            0x158000: 0x80000000,
			            0x168000: 0x80001040,
			            0x178000: 0x40,
			            0x188000: 0x80000040,
			            0x198000: 0x1000,
			            0x1a8000: 0x80001000,
			            0x1b8000: 0x80400040,
			            0x1c8000: 0x1040,
			            0x1d8000: 0x80401000,
			            0x1e8000: 0x400000,
			            0x1f8000: 0x401040
			        },
			        {
			            0x0: 0x80,
			            0x1000: 0x1040000,
			            0x2000: 0x40000,
			            0x3000: 0x20000000,
			            0x4000: 0x20040080,
			            0x5000: 0x1000080,
			            0x6000: 0x21000080,
			            0x7000: 0x40080,
			            0x8000: 0x1000000,
			            0x9000: 0x20040000,
			            0xa000: 0x20000080,
			            0xb000: 0x21040080,
			            0xc000: 0x21040000,
			            0xd000: 0x0,
			            0xe000: 0x1040080,
			            0xf000: 0x21000000,
			            0x800: 0x1040080,
			            0x1800: 0x21000080,
			            0x2800: 0x80,
			            0x3800: 0x1040000,
			            0x4800: 0x40000,
			            0x5800: 0x20040080,
			            0x6800: 0x21040000,
			            0x7800: 0x20000000,
			            0x8800: 0x20040000,
			            0x9800: 0x0,
			            0xa800: 0x21040080,
			            0xb800: 0x1000080,
			            0xc800: 0x20000080,
			            0xd800: 0x21000000,
			            0xe800: 0x1000000,
			            0xf800: 0x40080,
			            0x10000: 0x40000,
			            0x11000: 0x80,
			            0x12000: 0x20000000,
			            0x13000: 0x21000080,
			            0x14000: 0x1000080,
			            0x15000: 0x21040000,
			            0x16000: 0x20040080,
			            0x17000: 0x1000000,
			            0x18000: 0x21040080,
			            0x19000: 0x21000000,
			            0x1a000: 0x1040000,
			            0x1b000: 0x20040000,
			            0x1c000: 0x40080,
			            0x1d000: 0x20000080,
			            0x1e000: 0x0,
			            0x1f000: 0x1040080,
			            0x10800: 0x21000080,
			            0x11800: 0x1000000,
			            0x12800: 0x1040000,
			            0x13800: 0x20040080,
			            0x14800: 0x20000000,
			            0x15800: 0x1040080,
			            0x16800: 0x80,
			            0x17800: 0x21040000,
			            0x18800: 0x40080,
			            0x19800: 0x21040080,
			            0x1a800: 0x0,
			            0x1b800: 0x21000000,
			            0x1c800: 0x1000080,
			            0x1d800: 0x40000,
			            0x1e800: 0x20040000,
			            0x1f800: 0x20000080
			        },
			        {
			            0x0: 0x10000008,
			            0x100: 0x2000,
			            0x200: 0x10200000,
			            0x300: 0x10202008,
			            0x400: 0x10002000,
			            0x500: 0x200000,
			            0x600: 0x200008,
			            0x700: 0x10000000,
			            0x800: 0x0,
			            0x900: 0x10002008,
			            0xa00: 0x202000,
			            0xb00: 0x8,
			            0xc00: 0x10200008,
			            0xd00: 0x202008,
			            0xe00: 0x2008,
			            0xf00: 0x10202000,
			            0x80: 0x10200000,
			            0x180: 0x10202008,
			            0x280: 0x8,
			            0x380: 0x200000,
			            0x480: 0x202008,
			            0x580: 0x10000008,
			            0x680: 0x10002000,
			            0x780: 0x2008,
			            0x880: 0x200008,
			            0x980: 0x2000,
			            0xa80: 0x10002008,
			            0xb80: 0x10200008,
			            0xc80: 0x0,
			            0xd80: 0x10202000,
			            0xe80: 0x202000,
			            0xf80: 0x10000000,
			            0x1000: 0x10002000,
			            0x1100: 0x10200008,
			            0x1200: 0x10202008,
			            0x1300: 0x2008,
			            0x1400: 0x200000,
			            0x1500: 0x10000000,
			            0x1600: 0x10000008,
			            0x1700: 0x202000,
			            0x1800: 0x202008,
			            0x1900: 0x0,
			            0x1a00: 0x8,
			            0x1b00: 0x10200000,
			            0x1c00: 0x2000,
			            0x1d00: 0x10002008,
			            0x1e00: 0x10202000,
			            0x1f00: 0x200008,
			            0x1080: 0x8,
			            0x1180: 0x202000,
			            0x1280: 0x200000,
			            0x1380: 0x10000008,
			            0x1480: 0x10002000,
			            0x1580: 0x2008,
			            0x1680: 0x10202008,
			            0x1780: 0x10200000,
			            0x1880: 0x10202000,
			            0x1980: 0x10200008,
			            0x1a80: 0x2000,
			            0x1b80: 0x202008,
			            0x1c80: 0x200008,
			            0x1d80: 0x0,
			            0x1e80: 0x10000000,
			            0x1f80: 0x10002008
			        },
			        {
			            0x0: 0x100000,
			            0x10: 0x2000401,
			            0x20: 0x400,
			            0x30: 0x100401,
			            0x40: 0x2100401,
			            0x50: 0x0,
			            0x60: 0x1,
			            0x70: 0x2100001,
			            0x80: 0x2000400,
			            0x90: 0x100001,
			            0xa0: 0x2000001,
			            0xb0: 0x2100400,
			            0xc0: 0x2100000,
			            0xd0: 0x401,
			            0xe0: 0x100400,
			            0xf0: 0x2000000,
			            0x8: 0x2100001,
			            0x18: 0x0,
			            0x28: 0x2000401,
			            0x38: 0x2100400,
			            0x48: 0x100000,
			            0x58: 0x2000001,
			            0x68: 0x2000000,
			            0x78: 0x401,
			            0x88: 0x100401,
			            0x98: 0x2000400,
			            0xa8: 0x2100000,
			            0xb8: 0x100001,
			            0xc8: 0x400,
			            0xd8: 0x2100401,
			            0xe8: 0x1,
			            0xf8: 0x100400,
			            0x100: 0x2000000,
			            0x110: 0x100000,
			            0x120: 0x2000401,
			            0x130: 0x2100001,
			            0x140: 0x100001,
			            0x150: 0x2000400,
			            0x160: 0x2100400,
			            0x170: 0x100401,
			            0x180: 0x401,
			            0x190: 0x2100401,
			            0x1a0: 0x100400,
			            0x1b0: 0x1,
			            0x1c0: 0x0,
			            0x1d0: 0x2100000,
			            0x1e0: 0x2000001,
			            0x1f0: 0x400,
			            0x108: 0x100400,
			            0x118: 0x2000401,
			            0x128: 0x2100001,
			            0x138: 0x1,
			            0x148: 0x2000000,
			            0x158: 0x100000,
			            0x168: 0x401,
			            0x178: 0x2100400,
			            0x188: 0x2000001,
			            0x198: 0x2100000,
			            0x1a8: 0x0,
			            0x1b8: 0x2100401,
			            0x1c8: 0x100401,
			            0x1d8: 0x400,
			            0x1e8: 0x2000400,
			            0x1f8: 0x100001
			        },
			        {
			            0x0: 0x8000820,
			            0x1: 0x20000,
			            0x2: 0x8000000,
			            0x3: 0x20,
			            0x4: 0x20020,
			            0x5: 0x8020820,
			            0x6: 0x8020800,
			            0x7: 0x800,
			            0x8: 0x8020000,
			            0x9: 0x8000800,
			            0xa: 0x20800,
			            0xb: 0x8020020,
			            0xc: 0x820,
			            0xd: 0x0,
			            0xe: 0x8000020,
			            0xf: 0x20820,
			            0x80000000: 0x800,
			            0x80000001: 0x8020820,
			            0x80000002: 0x8000820,
			            0x80000003: 0x8000000,
			            0x80000004: 0x8020000,
			            0x80000005: 0x20800,
			            0x80000006: 0x20820,
			            0x80000007: 0x20,
			            0x80000008: 0x8000020,
			            0x80000009: 0x820,
			            0x8000000a: 0x20020,
			            0x8000000b: 0x8020800,
			            0x8000000c: 0x0,
			            0x8000000d: 0x8020020,
			            0x8000000e: 0x8000800,
			            0x8000000f: 0x20000,
			            0x10: 0x20820,
			            0x11: 0x8020800,
			            0x12: 0x20,
			            0x13: 0x800,
			            0x14: 0x8000800,
			            0x15: 0x8000020,
			            0x16: 0x8020020,
			            0x17: 0x20000,
			            0x18: 0x0,
			            0x19: 0x20020,
			            0x1a: 0x8020000,
			            0x1b: 0x8000820,
			            0x1c: 0x8020820,
			            0x1d: 0x20800,
			            0x1e: 0x820,
			            0x1f: 0x8000000,
			            0x80000010: 0x20000,
			            0x80000011: 0x800,
			            0x80000012: 0x8020020,
			            0x80000013: 0x20820,
			            0x80000014: 0x20,
			            0x80000015: 0x8020000,
			            0x80000016: 0x8000000,
			            0x80000017: 0x8000820,
			            0x80000018: 0x8020820,
			            0x80000019: 0x8000020,
			            0x8000001a: 0x8000800,
			            0x8000001b: 0x0,
			            0x8000001c: 0x20800,
			            0x8000001d: 0x820,
			            0x8000001e: 0x20020,
			            0x8000001f: 0x8020800
			        }
			    ];
			    var SBOX_MASK = [
			        0xf8000001, 0x1f800000, 0x01f80000, 0x001f8000,
			        0x0001f800, 0x00001f80, 0x000001f8, 0x8000001f
			    ];
			    var DES = C_algo.DES = BlockCipher.extend({
			        _doReset: function () {
			            var key = this._key;
			            var keyWords = key.words;
			            var keyBits = [];
			            for (var i = 0; i < 56; i++) {
			                var keyBitPos = PC1[i] - 1;
			                keyBits[i] = (keyWords[keyBitPos >>> 5] >>> (31 - keyBitPos % 32)) & 1;
			            }
			            var subKeys = this._subKeys = [];
			            for (var nSubKey = 0; nSubKey < 16; nSubKey++) {
			                var subKey = subKeys[nSubKey] = [];
			                var bitShift = BIT_SHIFTS[nSubKey];
			                for (var i = 0; i < 24; i++) {
			                    subKey[(i / 6) | 0] |= keyBits[((PC2[i] - 1) + bitShift) % 28] << (31 - i % 6);
			                    subKey[4 + ((i / 6) | 0)] |= keyBits[28 + (((PC2[i + 24] - 1) + bitShift) % 28)] << (31 - i % 6);
			                }
			                subKey[0] = (subKey[0] << 1) | (subKey[0] >>> 31);
			                for (var i = 1; i < 7; i++) {
			                    subKey[i] = subKey[i] >>> ((i - 1) * 4 + 3);
			                }
			                subKey[7] = (subKey[7] << 5) | (subKey[7] >>> 27);
			            }
			            var invSubKeys = this._invSubKeys = [];
			            for (var i = 0; i < 16; i++) {
			                invSubKeys[i] = subKeys[15 - i];
			            }
			        },
			        encryptBlock: function (M, offset) {
			            this._doCryptBlock(M, offset, this._subKeys);
			        },
			        decryptBlock: function (M, offset) {
			            this._doCryptBlock(M, offset, this._invSubKeys);
			        },
			        _doCryptBlock: function (M, offset, subKeys) {
			            this._lBlock = M[offset];
			            this._rBlock = M[offset + 1];
			            exchangeLR.call(this, 4,  0x0f0f0f0f);
			            exchangeLR.call(this, 16, 0x0000ffff);
			            exchangeRL.call(this, 2,  0x33333333);
			            exchangeRL.call(this, 8,  0x00ff00ff);
			            exchangeLR.call(this, 1,  0x55555555);
			            for (var round = 0; round < 16; round++) {
			                var subKey = subKeys[round];
			                var lBlock = this._lBlock;
			                var rBlock = this._rBlock;
			                var f = 0;
			                for (var i = 0; i < 8; i++) {
			                    f |= SBOX_P[i][((rBlock ^ subKey[i]) & SBOX_MASK[i]) >>> 0];
			                }
			                this._lBlock = rBlock;
			                this._rBlock = lBlock ^ f;
			            }
			            var t = this._lBlock;
			            this._lBlock = this._rBlock;
			            this._rBlock = t;
			            exchangeLR.call(this, 1,  0x55555555);
			            exchangeRL.call(this, 8,  0x00ff00ff);
			            exchangeRL.call(this, 2,  0x33333333);
			            exchangeLR.call(this, 16, 0x0000ffff);
			            exchangeLR.call(this, 4,  0x0f0f0f0f);
			            M[offset] = this._lBlock;
			            M[offset + 1] = this._rBlock;
			        },
			        keySize: 64/32,
			        ivSize: 64/32,
			        blockSize: 64/32
			    });
			    function exchangeLR(offset, mask) {
			        var t = ((this._lBlock >>> offset) ^ this._rBlock) & mask;
			        this._rBlock ^= t;
			        this._lBlock ^= t << offset;
			    }
			    function exchangeRL(offset, mask) {
			        var t = ((this._rBlock >>> offset) ^ this._lBlock) & mask;
			        this._lBlock ^= t;
			        this._rBlock ^= t << offset;
			    }
			    C.DES = BlockCipher._createHelper(DES);
			    var TripleDES = C_algo.TripleDES = BlockCipher.extend({
			        _doReset: function () {
			            var key = this._key;
			            var keyWords = key.words;
			            if (keyWords.length !== 2 && keyWords.length !== 4 && keyWords.length < 6) {
			                throw new Error('Invalid key length - 3DES requires the key length to be 64, 128, 192 or >192.');
			            }
			            var key1 = keyWords.slice(0, 2);
			            var key2 = keyWords.length < 4 ? keyWords.slice(0, 2) : keyWords.slice(2, 4);
			            var key3 = keyWords.length < 6 ? keyWords.slice(0, 2) : keyWords.slice(4, 6);
			            this._des1 = DES.createEncryptor(WordArray.create(key1));
			            this._des2 = DES.createEncryptor(WordArray.create(key2));
			            this._des3 = DES.createEncryptor(WordArray.create(key3));
			        },
			        encryptBlock: function (M, offset) {
			            this._des1.encryptBlock(M, offset);
			            this._des2.decryptBlock(M, offset);
			            this._des3.encryptBlock(M, offset);
			        },
			        decryptBlock: function (M, offset) {
			            this._des3.decryptBlock(M, offset);
			            this._des2.encryptBlock(M, offset);
			            this._des1.decryptBlock(M, offset);
			        },
			        keySize: 192/32,
			        ivSize: 64/32,
			        blockSize: 64/32
			    });
			    C.TripleDES = BlockCipher._createHelper(TripleDES);
			}());
			return CryptoJS.TripleDES;
		})); 
	} (tripledes));
	return tripledes.exports;
}

var rc4 = {exports: {}};

var hasRequiredRc4;

function requireRc4 () {
	if (hasRequiredRc4) return rc4.exports;
	hasRequiredRc4 = 1;
	(function (module, exports) {
(function (root, factory, undef) {
			{
				module.exports = factory(requireCore(), requireEncBase64(), requireMd5(), requireEvpkdf(), requireCipherCore());
			}
		}(commonjsGlobal$1, function (CryptoJS) {
			(function () {
			    var C = CryptoJS;
			    var C_lib = C.lib;
			    var StreamCipher = C_lib.StreamCipher;
			    var C_algo = C.algo;
			    var RC4 = C_algo.RC4 = StreamCipher.extend({
			        _doReset: function () {
			            var key = this._key;
			            var keyWords = key.words;
			            var keySigBytes = key.sigBytes;
			            var S = this._S = [];
			            for (var i = 0; i < 256; i++) {
			                S[i] = i;
			            }
			            for (var i = 0, j = 0; i < 256; i++) {
			                var keyByteIndex = i % keySigBytes;
			                var keyByte = (keyWords[keyByteIndex >>> 2] >>> (24 - (keyByteIndex % 4) * 8)) & 0xff;
			                j = (j + S[i] + keyByte) % 256;
			                var t = S[i];
			                S[i] = S[j];
			                S[j] = t;
			            }
			            this._i = this._j = 0;
			        },
			        _doProcessBlock: function (M, offset) {
			            M[offset] ^= generateKeystreamWord.call(this);
			        },
			        keySize: 256/32,
			        ivSize: 0
			    });
			    function generateKeystreamWord() {
			        var S = this._S;
			        var i = this._i;
			        var j = this._j;
			        var keystreamWord = 0;
			        for (var n = 0; n < 4; n++) {
			            i = (i + 1) % 256;
			            j = (j + S[i]) % 256;
			            var t = S[i];
			            S[i] = S[j];
			            S[j] = t;
			            keystreamWord |= S[(S[i] + S[j]) % 256] << (24 - n * 8);
			        }
			        this._i = i;
			        this._j = j;
			        return keystreamWord;
			    }
			    C.RC4 = StreamCipher._createHelper(RC4);
			    var RC4Drop = C_algo.RC4Drop = RC4.extend({
			        cfg: RC4.cfg.extend({
			            drop: 192
			        }),
			        _doReset: function () {
			            RC4._doReset.call(this);
			            for (var i = this.cfg.drop; i > 0; i--) {
			                generateKeystreamWord.call(this);
			            }
			        }
			    });
			    C.RC4Drop = StreamCipher._createHelper(RC4Drop);
			}());
			return CryptoJS.RC4;
		})); 
	} (rc4));
	return rc4.exports;
}

var rabbit = {exports: {}};

var hasRequiredRabbit;

function requireRabbit () {
	if (hasRequiredRabbit) return rabbit.exports;
	hasRequiredRabbit = 1;
	(function (module, exports) {
(function (root, factory, undef) {
			{
				module.exports = factory(requireCore(), requireEncBase64(), requireMd5(), requireEvpkdf(), requireCipherCore());
			}
		}(commonjsGlobal$1, function (CryptoJS) {
			(function () {
			    var C = CryptoJS;
			    var C_lib = C.lib;
			    var StreamCipher = C_lib.StreamCipher;
			    var C_algo = C.algo;
			    var S  = [];
			    var C_ = [];
			    var G  = [];
			    var Rabbit = C_algo.Rabbit = StreamCipher.extend({
			        _doReset: function () {
			            var K = this._key.words;
			            var iv = this.cfg.iv;
			            for (var i = 0; i < 4; i++) {
			                K[i] = (((K[i] << 8)  | (K[i] >>> 24)) & 0x00ff00ff) |
			                       (((K[i] << 24) | (K[i] >>> 8))  & 0xff00ff00);
			            }
			            var X = this._X = [
			                K[0], (K[3] << 16) | (K[2] >>> 16),
			                K[1], (K[0] << 16) | (K[3] >>> 16),
			                K[2], (K[1] << 16) | (K[0] >>> 16),
			                K[3], (K[2] << 16) | (K[1] >>> 16)
			            ];
			            var C = this._C = [
			                (K[2] << 16) | (K[2] >>> 16), (K[0] & 0xffff0000) | (K[1] & 0x0000ffff),
			                (K[3] << 16) | (K[3] >>> 16), (K[1] & 0xffff0000) | (K[2] & 0x0000ffff),
			                (K[0] << 16) | (K[0] >>> 16), (K[2] & 0xffff0000) | (K[3] & 0x0000ffff),
			                (K[1] << 16) | (K[1] >>> 16), (K[3] & 0xffff0000) | (K[0] & 0x0000ffff)
			            ];
			            this._b = 0;
			            for (var i = 0; i < 4; i++) {
			                nextState.call(this);
			            }
			            for (var i = 0; i < 8; i++) {
			                C[i] ^= X[(i + 4) & 7];
			            }
			            if (iv) {
			                var IV = iv.words;
			                var IV_0 = IV[0];
			                var IV_1 = IV[1];
			                var i0 = (((IV_0 << 8) | (IV_0 >>> 24)) & 0x00ff00ff) | (((IV_0 << 24) | (IV_0 >>> 8)) & 0xff00ff00);
			                var i2 = (((IV_1 << 8) | (IV_1 >>> 24)) & 0x00ff00ff) | (((IV_1 << 24) | (IV_1 >>> 8)) & 0xff00ff00);
			                var i1 = (i0 >>> 16) | (i2 & 0xffff0000);
			                var i3 = (i2 << 16)  | (i0 & 0x0000ffff);
			                C[0] ^= i0;
			                C[1] ^= i1;
			                C[2] ^= i2;
			                C[3] ^= i3;
			                C[4] ^= i0;
			                C[5] ^= i1;
			                C[6] ^= i2;
			                C[7] ^= i3;
			                for (var i = 0; i < 4; i++) {
			                    nextState.call(this);
			                }
			            }
			        },
			        _doProcessBlock: function (M, offset) {
			            var X = this._X;
			            nextState.call(this);
			            S[0] = X[0] ^ (X[5] >>> 16) ^ (X[3] << 16);
			            S[1] = X[2] ^ (X[7] >>> 16) ^ (X[5] << 16);
			            S[2] = X[4] ^ (X[1] >>> 16) ^ (X[7] << 16);
			            S[3] = X[6] ^ (X[3] >>> 16) ^ (X[1] << 16);
			            for (var i = 0; i < 4; i++) {
			                S[i] = (((S[i] << 8)  | (S[i] >>> 24)) & 0x00ff00ff) |
			                       (((S[i] << 24) | (S[i] >>> 8))  & 0xff00ff00);
			                M[offset + i] ^= S[i];
			            }
			        },
			        blockSize: 128/32,
			        ivSize: 64/32
			    });
			    function nextState() {
			        var X = this._X;
			        var C = this._C;
			        for (var i = 0; i < 8; i++) {
			            C_[i] = C[i];
			        }
			        C[0] = (C[0] + 0x4d34d34d + this._b) | 0;
			        C[1] = (C[1] + 0xd34d34d3 + ((C[0] >>> 0) < (C_[0] >>> 0) ? 1 : 0)) | 0;
			        C[2] = (C[2] + 0x34d34d34 + ((C[1] >>> 0) < (C_[1] >>> 0) ? 1 : 0)) | 0;
			        C[3] = (C[3] + 0x4d34d34d + ((C[2] >>> 0) < (C_[2] >>> 0) ? 1 : 0)) | 0;
			        C[4] = (C[4] + 0xd34d34d3 + ((C[3] >>> 0) < (C_[3] >>> 0) ? 1 : 0)) | 0;
			        C[5] = (C[5] + 0x34d34d34 + ((C[4] >>> 0) < (C_[4] >>> 0) ? 1 : 0)) | 0;
			        C[6] = (C[6] + 0x4d34d34d + ((C[5] >>> 0) < (C_[5] >>> 0) ? 1 : 0)) | 0;
			        C[7] = (C[7] + 0xd34d34d3 + ((C[6] >>> 0) < (C_[6] >>> 0) ? 1 : 0)) | 0;
			        this._b = (C[7] >>> 0) < (C_[7] >>> 0) ? 1 : 0;
			        for (var i = 0; i < 8; i++) {
			            var gx = X[i] + C[i];
			            var ga = gx & 0xffff;
			            var gb = gx >>> 16;
			            var gh = ((((ga * ga) >>> 17) + ga * gb) >>> 15) + gb * gb;
			            var gl = (((gx & 0xffff0000) * gx) | 0) + (((gx & 0x0000ffff) * gx) | 0);
			            G[i] = gh ^ gl;
			        }
			        X[0] = (G[0] + ((G[7] << 16) | (G[7] >>> 16)) + ((G[6] << 16) | (G[6] >>> 16))) | 0;
			        X[1] = (G[1] + ((G[0] << 8)  | (G[0] >>> 24)) + G[7]) | 0;
			        X[2] = (G[2] + ((G[1] << 16) | (G[1] >>> 16)) + ((G[0] << 16) | (G[0] >>> 16))) | 0;
			        X[3] = (G[3] + ((G[2] << 8)  | (G[2] >>> 24)) + G[1]) | 0;
			        X[4] = (G[4] + ((G[3] << 16) | (G[3] >>> 16)) + ((G[2] << 16) | (G[2] >>> 16))) | 0;
			        X[5] = (G[5] + ((G[4] << 8)  | (G[4] >>> 24)) + G[3]) | 0;
			        X[6] = (G[6] + ((G[5] << 16) | (G[5] >>> 16)) + ((G[4] << 16) | (G[4] >>> 16))) | 0;
			        X[7] = (G[7] + ((G[6] << 8)  | (G[6] >>> 24)) + G[5]) | 0;
			    }
			    C.Rabbit = StreamCipher._createHelper(Rabbit);
			}());
			return CryptoJS.Rabbit;
		})); 
	} (rabbit));
	return rabbit.exports;
}

var rabbitLegacy = {exports: {}};

var hasRequiredRabbitLegacy;

function requireRabbitLegacy () {
	if (hasRequiredRabbitLegacy) return rabbitLegacy.exports;
	hasRequiredRabbitLegacy = 1;
	(function (module, exports) {
(function (root, factory, undef) {
			{
				module.exports = factory(requireCore(), requireEncBase64(), requireMd5(), requireEvpkdf(), requireCipherCore());
			}
		}(commonjsGlobal$1, function (CryptoJS) {
			(function () {
			    var C = CryptoJS;
			    var C_lib = C.lib;
			    var StreamCipher = C_lib.StreamCipher;
			    var C_algo = C.algo;
			    var S  = [];
			    var C_ = [];
			    var G  = [];
			    var RabbitLegacy = C_algo.RabbitLegacy = StreamCipher.extend({
			        _doReset: function () {
			            var K = this._key.words;
			            var iv = this.cfg.iv;
			            var X = this._X = [
			                K[0], (K[3] << 16) | (K[2] >>> 16),
			                K[1], (K[0] << 16) | (K[3] >>> 16),
			                K[2], (K[1] << 16) | (K[0] >>> 16),
			                K[3], (K[2] << 16) | (K[1] >>> 16)
			            ];
			            var C = this._C = [
			                (K[2] << 16) | (K[2] >>> 16), (K[0] & 0xffff0000) | (K[1] & 0x0000ffff),
			                (K[3] << 16) | (K[3] >>> 16), (K[1] & 0xffff0000) | (K[2] & 0x0000ffff),
			                (K[0] << 16) | (K[0] >>> 16), (K[2] & 0xffff0000) | (K[3] & 0x0000ffff),
			                (K[1] << 16) | (K[1] >>> 16), (K[3] & 0xffff0000) | (K[0] & 0x0000ffff)
			            ];
			            this._b = 0;
			            for (var i = 0; i < 4; i++) {
			                nextState.call(this);
			            }
			            for (var i = 0; i < 8; i++) {
			                C[i] ^= X[(i + 4) & 7];
			            }
			            if (iv) {
			                var IV = iv.words;
			                var IV_0 = IV[0];
			                var IV_1 = IV[1];
			                var i0 = (((IV_0 << 8) | (IV_0 >>> 24)) & 0x00ff00ff) | (((IV_0 << 24) | (IV_0 >>> 8)) & 0xff00ff00);
			                var i2 = (((IV_1 << 8) | (IV_1 >>> 24)) & 0x00ff00ff) | (((IV_1 << 24) | (IV_1 >>> 8)) & 0xff00ff00);
			                var i1 = (i0 >>> 16) | (i2 & 0xffff0000);
			                var i3 = (i2 << 16)  | (i0 & 0x0000ffff);
			                C[0] ^= i0;
			                C[1] ^= i1;
			                C[2] ^= i2;
			                C[3] ^= i3;
			                C[4] ^= i0;
			                C[5] ^= i1;
			                C[6] ^= i2;
			                C[7] ^= i3;
			                for (var i = 0; i < 4; i++) {
			                    nextState.call(this);
			                }
			            }
			        },
			        _doProcessBlock: function (M, offset) {
			            var X = this._X;
			            nextState.call(this);
			            S[0] = X[0] ^ (X[5] >>> 16) ^ (X[3] << 16);
			            S[1] = X[2] ^ (X[7] >>> 16) ^ (X[5] << 16);
			            S[2] = X[4] ^ (X[1] >>> 16) ^ (X[7] << 16);
			            S[3] = X[6] ^ (X[3] >>> 16) ^ (X[1] << 16);
			            for (var i = 0; i < 4; i++) {
			                S[i] = (((S[i] << 8)  | (S[i] >>> 24)) & 0x00ff00ff) |
			                       (((S[i] << 24) | (S[i] >>> 8))  & 0xff00ff00);
			                M[offset + i] ^= S[i];
			            }
			        },
			        blockSize: 128/32,
			        ivSize: 64/32
			    });
			    function nextState() {
			        var X = this._X;
			        var C = this._C;
			        for (var i = 0; i < 8; i++) {
			            C_[i] = C[i];
			        }
			        C[0] = (C[0] + 0x4d34d34d + this._b) | 0;
			        C[1] = (C[1] + 0xd34d34d3 + ((C[0] >>> 0) < (C_[0] >>> 0) ? 1 : 0)) | 0;
			        C[2] = (C[2] + 0x34d34d34 + ((C[1] >>> 0) < (C_[1] >>> 0) ? 1 : 0)) | 0;
			        C[3] = (C[3] + 0x4d34d34d + ((C[2] >>> 0) < (C_[2] >>> 0) ? 1 : 0)) | 0;
			        C[4] = (C[4] + 0xd34d34d3 + ((C[3] >>> 0) < (C_[3] >>> 0) ? 1 : 0)) | 0;
			        C[5] = (C[5] + 0x34d34d34 + ((C[4] >>> 0) < (C_[4] >>> 0) ? 1 : 0)) | 0;
			        C[6] = (C[6] + 0x4d34d34d + ((C[5] >>> 0) < (C_[5] >>> 0) ? 1 : 0)) | 0;
			        C[7] = (C[7] + 0xd34d34d3 + ((C[6] >>> 0) < (C_[6] >>> 0) ? 1 : 0)) | 0;
			        this._b = (C[7] >>> 0) < (C_[7] >>> 0) ? 1 : 0;
			        for (var i = 0; i < 8; i++) {
			            var gx = X[i] + C[i];
			            var ga = gx & 0xffff;
			            var gb = gx >>> 16;
			            var gh = ((((ga * ga) >>> 17) + ga * gb) >>> 15) + gb * gb;
			            var gl = (((gx & 0xffff0000) * gx) | 0) + (((gx & 0x0000ffff) * gx) | 0);
			            G[i] = gh ^ gl;
			        }
			        X[0] = (G[0] + ((G[7] << 16) | (G[7] >>> 16)) + ((G[6] << 16) | (G[6] >>> 16))) | 0;
			        X[1] = (G[1] + ((G[0] << 8)  | (G[0] >>> 24)) + G[7]) | 0;
			        X[2] = (G[2] + ((G[1] << 16) | (G[1] >>> 16)) + ((G[0] << 16) | (G[0] >>> 16))) | 0;
			        X[3] = (G[3] + ((G[2] << 8)  | (G[2] >>> 24)) + G[1]) | 0;
			        X[4] = (G[4] + ((G[3] << 16) | (G[3] >>> 16)) + ((G[2] << 16) | (G[2] >>> 16))) | 0;
			        X[5] = (G[5] + ((G[4] << 8)  | (G[4] >>> 24)) + G[3]) | 0;
			        X[6] = (G[6] + ((G[5] << 16) | (G[5] >>> 16)) + ((G[4] << 16) | (G[4] >>> 16))) | 0;
			        X[7] = (G[7] + ((G[6] << 8)  | (G[6] >>> 24)) + G[5]) | 0;
			    }
			    C.RabbitLegacy = StreamCipher._createHelper(RabbitLegacy);
			}());
			return CryptoJS.RabbitLegacy;
		})); 
	} (rabbitLegacy));
	return rabbitLegacy.exports;
}

var blowfish = {exports: {}};

var hasRequiredBlowfish;

function requireBlowfish () {
	if (hasRequiredBlowfish) return blowfish.exports;
	hasRequiredBlowfish = 1;
	(function (module, exports) {
(function (root, factory, undef) {
			{
				module.exports = factory(requireCore(), requireEncBase64(), requireMd5(), requireEvpkdf(), requireCipherCore());
			}
		}(commonjsGlobal$1, function (CryptoJS) {
			(function () {
			    var C = CryptoJS;
			    var C_lib = C.lib;
			    var BlockCipher = C_lib.BlockCipher;
			    var C_algo = C.algo;
			    const N = 16;
			    const ORIG_P = [
			        0x243F6A88, 0x85A308D3, 0x13198A2E, 0x03707344,
			        0xA4093822, 0x299F31D0, 0x082EFA98, 0xEC4E6C89,
			        0x452821E6, 0x38D01377, 0xBE5466CF, 0x34E90C6C,
			        0xC0AC29B7, 0xC97C50DD, 0x3F84D5B5, 0xB5470917,
			        0x9216D5D9, 0x8979FB1B
			    ];
			    const ORIG_S = [
			        [   0xD1310BA6, 0x98DFB5AC, 0x2FFD72DB, 0xD01ADFB7,
			            0xB8E1AFED, 0x6A267E96, 0xBA7C9045, 0xF12C7F99,
			            0x24A19947, 0xB3916CF7, 0x0801F2E2, 0x858EFC16,
			            0x636920D8, 0x71574E69, 0xA458FEA3, 0xF4933D7E,
			            0x0D95748F, 0x728EB658, 0x718BCD58, 0x82154AEE,
			            0x7B54A41D, 0xC25A59B5, 0x9C30D539, 0x2AF26013,
			            0xC5D1B023, 0x286085F0, 0xCA417918, 0xB8DB38EF,
			            0x8E79DCB0, 0x603A180E, 0x6C9E0E8B, 0xB01E8A3E,
			            0xD71577C1, 0xBD314B27, 0x78AF2FDA, 0x55605C60,
			            0xE65525F3, 0xAA55AB94, 0x57489862, 0x63E81440,
			            0x55CA396A, 0x2AAB10B6, 0xB4CC5C34, 0x1141E8CE,
			            0xA15486AF, 0x7C72E993, 0xB3EE1411, 0x636FBC2A,
			            0x2BA9C55D, 0x741831F6, 0xCE5C3E16, 0x9B87931E,
			            0xAFD6BA33, 0x6C24CF5C, 0x7A325381, 0x28958677,
			            0x3B8F4898, 0x6B4BB9AF, 0xC4BFE81B, 0x66282193,
			            0x61D809CC, 0xFB21A991, 0x487CAC60, 0x5DEC8032,
			            0xEF845D5D, 0xE98575B1, 0xDC262302, 0xEB651B88,
			            0x23893E81, 0xD396ACC5, 0x0F6D6FF3, 0x83F44239,
			            0x2E0B4482, 0xA4842004, 0x69C8F04A, 0x9E1F9B5E,
			            0x21C66842, 0xF6E96C9A, 0x670C9C61, 0xABD388F0,
			            0x6A51A0D2, 0xD8542F68, 0x960FA728, 0xAB5133A3,
			            0x6EEF0B6C, 0x137A3BE4, 0xBA3BF050, 0x7EFB2A98,
			            0xA1F1651D, 0x39AF0176, 0x66CA593E, 0x82430E88,
			            0x8CEE8619, 0x456F9FB4, 0x7D84A5C3, 0x3B8B5EBE,
			            0xE06F75D8, 0x85C12073, 0x401A449F, 0x56C16AA6,
			            0x4ED3AA62, 0x363F7706, 0x1BFEDF72, 0x429B023D,
			            0x37D0D724, 0xD00A1248, 0xDB0FEAD3, 0x49F1C09B,
			            0x075372C9, 0x80991B7B, 0x25D479D8, 0xF6E8DEF7,
			            0xE3FE501A, 0xB6794C3B, 0x976CE0BD, 0x04C006BA,
			            0xC1A94FB6, 0x409F60C4, 0x5E5C9EC2, 0x196A2463,
			            0x68FB6FAF, 0x3E6C53B5, 0x1339B2EB, 0x3B52EC6F,
			            0x6DFC511F, 0x9B30952C, 0xCC814544, 0xAF5EBD09,
			            0xBEE3D004, 0xDE334AFD, 0x660F2807, 0x192E4BB3,
			            0xC0CBA857, 0x45C8740F, 0xD20B5F39, 0xB9D3FBDB,
			            0x5579C0BD, 0x1A60320A, 0xD6A100C6, 0x402C7279,
			            0x679F25FE, 0xFB1FA3CC, 0x8EA5E9F8, 0xDB3222F8,
			            0x3C7516DF, 0xFD616B15, 0x2F501EC8, 0xAD0552AB,
			            0x323DB5FA, 0xFD238760, 0x53317B48, 0x3E00DF82,
			            0x9E5C57BB, 0xCA6F8CA0, 0x1A87562E, 0xDF1769DB,
			            0xD542A8F6, 0x287EFFC3, 0xAC6732C6, 0x8C4F5573,
			            0x695B27B0, 0xBBCA58C8, 0xE1FFA35D, 0xB8F011A0,
			            0x10FA3D98, 0xFD2183B8, 0x4AFCB56C, 0x2DD1D35B,
			            0x9A53E479, 0xB6F84565, 0xD28E49BC, 0x4BFB9790,
			            0xE1DDF2DA, 0xA4CB7E33, 0x62FB1341, 0xCEE4C6E8,
			            0xEF20CADA, 0x36774C01, 0xD07E9EFE, 0x2BF11FB4,
			            0x95DBDA4D, 0xAE909198, 0xEAAD8E71, 0x6B93D5A0,
			            0xD08ED1D0, 0xAFC725E0, 0x8E3C5B2F, 0x8E7594B7,
			            0x8FF6E2FB, 0xF2122B64, 0x8888B812, 0x900DF01C,
			            0x4FAD5EA0, 0x688FC31C, 0xD1CFF191, 0xB3A8C1AD,
			            0x2F2F2218, 0xBE0E1777, 0xEA752DFE, 0x8B021FA1,
			            0xE5A0CC0F, 0xB56F74E8, 0x18ACF3D6, 0xCE89E299,
			            0xB4A84FE0, 0xFD13E0B7, 0x7CC43B81, 0xD2ADA8D9,
			            0x165FA266, 0x80957705, 0x93CC7314, 0x211A1477,
			            0xE6AD2065, 0x77B5FA86, 0xC75442F5, 0xFB9D35CF,
			            0xEBCDAF0C, 0x7B3E89A0, 0xD6411BD3, 0xAE1E7E49,
			            0x00250E2D, 0x2071B35E, 0x226800BB, 0x57B8E0AF,
			            0x2464369B, 0xF009B91E, 0x5563911D, 0x59DFA6AA,
			            0x78C14389, 0xD95A537F, 0x207D5BA2, 0x02E5B9C5,
			            0x83260376, 0x6295CFA9, 0x11C81968, 0x4E734A41,
			            0xB3472DCA, 0x7B14A94A, 0x1B510052, 0x9A532915,
			            0xD60F573F, 0xBC9BC6E4, 0x2B60A476, 0x81E67400,
			            0x08BA6FB5, 0x571BE91F, 0xF296EC6B, 0x2A0DD915,
			            0xB6636521, 0xE7B9F9B6, 0xFF34052E, 0xC5855664,
			            0x53B02D5D, 0xA99F8FA1, 0x08BA4799, 0x6E85076A   ],
			        [   0x4B7A70E9, 0xB5B32944, 0xDB75092E, 0xC4192623,
			            0xAD6EA6B0, 0x49A7DF7D, 0x9CEE60B8, 0x8FEDB266,
			            0xECAA8C71, 0x699A17FF, 0x5664526C, 0xC2B19EE1,
			            0x193602A5, 0x75094C29, 0xA0591340, 0xE4183A3E,
			            0x3F54989A, 0x5B429D65, 0x6B8FE4D6, 0x99F73FD6,
			            0xA1D29C07, 0xEFE830F5, 0x4D2D38E6, 0xF0255DC1,
			            0x4CDD2086, 0x8470EB26, 0x6382E9C6, 0x021ECC5E,
			            0x09686B3F, 0x3EBAEFC9, 0x3C971814, 0x6B6A70A1,
			            0x687F3584, 0x52A0E286, 0xB79C5305, 0xAA500737,
			            0x3E07841C, 0x7FDEAE5C, 0x8E7D44EC, 0x5716F2B8,
			            0xB03ADA37, 0xF0500C0D, 0xF01C1F04, 0x0200B3FF,
			            0xAE0CF51A, 0x3CB574B2, 0x25837A58, 0xDC0921BD,
			            0xD19113F9, 0x7CA92FF6, 0x94324773, 0x22F54701,
			            0x3AE5E581, 0x37C2DADC, 0xC8B57634, 0x9AF3DDA7,
			            0xA9446146, 0x0FD0030E, 0xECC8C73E, 0xA4751E41,
			            0xE238CD99, 0x3BEA0E2F, 0x3280BBA1, 0x183EB331,
			            0x4E548B38, 0x4F6DB908, 0x6F420D03, 0xF60A04BF,
			            0x2CB81290, 0x24977C79, 0x5679B072, 0xBCAF89AF,
			            0xDE9A771F, 0xD9930810, 0xB38BAE12, 0xDCCF3F2E,
			            0x5512721F, 0x2E6B7124, 0x501ADDE6, 0x9F84CD87,
			            0x7A584718, 0x7408DA17, 0xBC9F9ABC, 0xE94B7D8C,
			            0xEC7AEC3A, 0xDB851DFA, 0x63094366, 0xC464C3D2,
			            0xEF1C1847, 0x3215D908, 0xDD433B37, 0x24C2BA16,
			            0x12A14D43, 0x2A65C451, 0x50940002, 0x133AE4DD,
			            0x71DFF89E, 0x10314E55, 0x81AC77D6, 0x5F11199B,
			            0x043556F1, 0xD7A3C76B, 0x3C11183B, 0x5924A509,
			            0xF28FE6ED, 0x97F1FBFA, 0x9EBABF2C, 0x1E153C6E,
			            0x86E34570, 0xEAE96FB1, 0x860E5E0A, 0x5A3E2AB3,
			            0x771FE71C, 0x4E3D06FA, 0x2965DCB9, 0x99E71D0F,
			            0x803E89D6, 0x5266C825, 0x2E4CC978, 0x9C10B36A,
			            0xC6150EBA, 0x94E2EA78, 0xA5FC3C53, 0x1E0A2DF4,
			            0xF2F74EA7, 0x361D2B3D, 0x1939260F, 0x19C27960,
			            0x5223A708, 0xF71312B6, 0xEBADFE6E, 0xEAC31F66,
			            0xE3BC4595, 0xA67BC883, 0xB17F37D1, 0x018CFF28,
			            0xC332DDEF, 0xBE6C5AA5, 0x65582185, 0x68AB9802,
			            0xEECEA50F, 0xDB2F953B, 0x2AEF7DAD, 0x5B6E2F84,
			            0x1521B628, 0x29076170, 0xECDD4775, 0x619F1510,
			            0x13CCA830, 0xEB61BD96, 0x0334FE1E, 0xAA0363CF,
			            0xB5735C90, 0x4C70A239, 0xD59E9E0B, 0xCBAADE14,
			            0xEECC86BC, 0x60622CA7, 0x9CAB5CAB, 0xB2F3846E,
			            0x648B1EAF, 0x19BDF0CA, 0xA02369B9, 0x655ABB50,
			            0x40685A32, 0x3C2AB4B3, 0x319EE9D5, 0xC021B8F7,
			            0x9B540B19, 0x875FA099, 0x95F7997E, 0x623D7DA8,
			            0xF837889A, 0x97E32D77, 0x11ED935F, 0x16681281,
			            0x0E358829, 0xC7E61FD6, 0x96DEDFA1, 0x7858BA99,
			            0x57F584A5, 0x1B227263, 0x9B83C3FF, 0x1AC24696,
			            0xCDB30AEB, 0x532E3054, 0x8FD948E4, 0x6DBC3128,
			            0x58EBF2EF, 0x34C6FFEA, 0xFE28ED61, 0xEE7C3C73,
			            0x5D4A14D9, 0xE864B7E3, 0x42105D14, 0x203E13E0,
			            0x45EEE2B6, 0xA3AAABEA, 0xDB6C4F15, 0xFACB4FD0,
			            0xC742F442, 0xEF6ABBB5, 0x654F3B1D, 0x41CD2105,
			            0xD81E799E, 0x86854DC7, 0xE44B476A, 0x3D816250,
			            0xCF62A1F2, 0x5B8D2646, 0xFC8883A0, 0xC1C7B6A3,
			            0x7F1524C3, 0x69CB7492, 0x47848A0B, 0x5692B285,
			            0x095BBF00, 0xAD19489D, 0x1462B174, 0x23820E00,
			            0x58428D2A, 0x0C55F5EA, 0x1DADF43E, 0x233F7061,
			            0x3372F092, 0x8D937E41, 0xD65FECF1, 0x6C223BDB,
			            0x7CDE3759, 0xCBEE7460, 0x4085F2A7, 0xCE77326E,
			            0xA6078084, 0x19F8509E, 0xE8EFD855, 0x61D99735,
			            0xA969A7AA, 0xC50C06C2, 0x5A04ABFC, 0x800BCADC,
			            0x9E447A2E, 0xC3453484, 0xFDD56705, 0x0E1E9EC9,
			            0xDB73DBD3, 0x105588CD, 0x675FDA79, 0xE3674340,
			            0xC5C43465, 0x713E38D8, 0x3D28F89E, 0xF16DFF20,
			            0x153E21E7, 0x8FB03D4A, 0xE6E39F2B, 0xDB83ADF7   ],
			        [   0xE93D5A68, 0x948140F7, 0xF64C261C, 0x94692934,
			            0x411520F7, 0x7602D4F7, 0xBCF46B2E, 0xD4A20068,
			            0xD4082471, 0x3320F46A, 0x43B7D4B7, 0x500061AF,
			            0x1E39F62E, 0x97244546, 0x14214F74, 0xBF8B8840,
			            0x4D95FC1D, 0x96B591AF, 0x70F4DDD3, 0x66A02F45,
			            0xBFBC09EC, 0x03BD9785, 0x7FAC6DD0, 0x31CB8504,
			            0x96EB27B3, 0x55FD3941, 0xDA2547E6, 0xABCA0A9A,
			            0x28507825, 0x530429F4, 0x0A2C86DA, 0xE9B66DFB,
			            0x68DC1462, 0xD7486900, 0x680EC0A4, 0x27A18DEE,
			            0x4F3FFEA2, 0xE887AD8C, 0xB58CE006, 0x7AF4D6B6,
			            0xAACE1E7C, 0xD3375FEC, 0xCE78A399, 0x406B2A42,
			            0x20FE9E35, 0xD9F385B9, 0xEE39D7AB, 0x3B124E8B,
			            0x1DC9FAF7, 0x4B6D1856, 0x26A36631, 0xEAE397B2,
			            0x3A6EFA74, 0xDD5B4332, 0x6841E7F7, 0xCA7820FB,
			            0xFB0AF54E, 0xD8FEB397, 0x454056AC, 0xBA489527,
			            0x55533A3A, 0x20838D87, 0xFE6BA9B7, 0xD096954B,
			            0x55A867BC, 0xA1159A58, 0xCCA92963, 0x99E1DB33,
			            0xA62A4A56, 0x3F3125F9, 0x5EF47E1C, 0x9029317C,
			            0xFDF8E802, 0x04272F70, 0x80BB155C, 0x05282CE3,
			            0x95C11548, 0xE4C66D22, 0x48C1133F, 0xC70F86DC,
			            0x07F9C9EE, 0x41041F0F, 0x404779A4, 0x5D886E17,
			            0x325F51EB, 0xD59BC0D1, 0xF2BCC18F, 0x41113564,
			            0x257B7834, 0x602A9C60, 0xDFF8E8A3, 0x1F636C1B,
			            0x0E12B4C2, 0x02E1329E, 0xAF664FD1, 0xCAD18115,
			            0x6B2395E0, 0x333E92E1, 0x3B240B62, 0xEEBEB922,
			            0x85B2A20E, 0xE6BA0D99, 0xDE720C8C, 0x2DA2F728,
			            0xD0127845, 0x95B794FD, 0x647D0862, 0xE7CCF5F0,
			            0x5449A36F, 0x877D48FA, 0xC39DFD27, 0xF33E8D1E,
			            0x0A476341, 0x992EFF74, 0x3A6F6EAB, 0xF4F8FD37,
			            0xA812DC60, 0xA1EBDDF8, 0x991BE14C, 0xDB6E6B0D,
			            0xC67B5510, 0x6D672C37, 0x2765D43B, 0xDCD0E804,
			            0xF1290DC7, 0xCC00FFA3, 0xB5390F92, 0x690FED0B,
			            0x667B9FFB, 0xCEDB7D9C, 0xA091CF0B, 0xD9155EA3,
			            0xBB132F88, 0x515BAD24, 0x7B9479BF, 0x763BD6EB,
			            0x37392EB3, 0xCC115979, 0x8026E297, 0xF42E312D,
			            0x6842ADA7, 0xC66A2B3B, 0x12754CCC, 0x782EF11C,
			            0x6A124237, 0xB79251E7, 0x06A1BBE6, 0x4BFB6350,
			            0x1A6B1018, 0x11CAEDFA, 0x3D25BDD8, 0xE2E1C3C9,
			            0x44421659, 0x0A121386, 0xD90CEC6E, 0xD5ABEA2A,
			            0x64AF674E, 0xDA86A85F, 0xBEBFE988, 0x64E4C3FE,
			            0x9DBC8057, 0xF0F7C086, 0x60787BF8, 0x6003604D,
			            0xD1FD8346, 0xF6381FB0, 0x7745AE04, 0xD736FCCC,
			            0x83426B33, 0xF01EAB71, 0xB0804187, 0x3C005E5F,
			            0x77A057BE, 0xBDE8AE24, 0x55464299, 0xBF582E61,
			            0x4E58F48F, 0xF2DDFDA2, 0xF474EF38, 0x8789BDC2,
			            0x5366F9C3, 0xC8B38E74, 0xB475F255, 0x46FCD9B9,
			            0x7AEB2661, 0x8B1DDF84, 0x846A0E79, 0x915F95E2,
			            0x466E598E, 0x20B45770, 0x8CD55591, 0xC902DE4C,
			            0xB90BACE1, 0xBB8205D0, 0x11A86248, 0x7574A99E,
			            0xB77F19B6, 0xE0A9DC09, 0x662D09A1, 0xC4324633,
			            0xE85A1F02, 0x09F0BE8C, 0x4A99A025, 0x1D6EFE10,
			            0x1AB93D1D, 0x0BA5A4DF, 0xA186F20F, 0x2868F169,
			            0xDCB7DA83, 0x573906FE, 0xA1E2CE9B, 0x4FCD7F52,
			            0x50115E01, 0xA70683FA, 0xA002B5C4, 0x0DE6D027,
			            0x9AF88C27, 0x773F8641, 0xC3604C06, 0x61A806B5,
			            0xF0177A28, 0xC0F586E0, 0x006058AA, 0x30DC7D62,
			            0x11E69ED7, 0x2338EA63, 0x53C2DD94, 0xC2C21634,
			            0xBBCBEE56, 0x90BCB6DE, 0xEBFC7DA1, 0xCE591D76,
			            0x6F05E409, 0x4B7C0188, 0x39720A3D, 0x7C927C24,
			            0x86E3725F, 0x724D9DB9, 0x1AC15BB4, 0xD39EB8FC,
			            0xED545578, 0x08FCA5B5, 0xD83D7CD3, 0x4DAD0FC4,
			            0x1E50EF5E, 0xB161E6F8, 0xA28514D9, 0x6C51133C,
			            0x6FD5C7E7, 0x56E14EC4, 0x362ABFCE, 0xDDC6C837,
			            0xD79A3234, 0x92638212, 0x670EFA8E, 0x406000E0  ],
			        [   0x3A39CE37, 0xD3FAF5CF, 0xABC27737, 0x5AC52D1B,
			            0x5CB0679E, 0x4FA33742, 0xD3822740, 0x99BC9BBE,
			            0xD5118E9D, 0xBF0F7315, 0xD62D1C7E, 0xC700C47B,
			            0xB78C1B6B, 0x21A19045, 0xB26EB1BE, 0x6A366EB4,
			            0x5748AB2F, 0xBC946E79, 0xC6A376D2, 0x6549C2C8,
			            0x530FF8EE, 0x468DDE7D, 0xD5730A1D, 0x4CD04DC6,
			            0x2939BBDB, 0xA9BA4650, 0xAC9526E8, 0xBE5EE304,
			            0xA1FAD5F0, 0x6A2D519A, 0x63EF8CE2, 0x9A86EE22,
			            0xC089C2B8, 0x43242EF6, 0xA51E03AA, 0x9CF2D0A4,
			            0x83C061BA, 0x9BE96A4D, 0x8FE51550, 0xBA645BD6,
			            0x2826A2F9, 0xA73A3AE1, 0x4BA99586, 0xEF5562E9,
			            0xC72FEFD3, 0xF752F7DA, 0x3F046F69, 0x77FA0A59,
			            0x80E4A915, 0x87B08601, 0x9B09E6AD, 0x3B3EE593,
			            0xE990FD5A, 0x9E34D797, 0x2CF0B7D9, 0x022B8B51,
			            0x96D5AC3A, 0x017DA67D, 0xD1CF3ED6, 0x7C7D2D28,
			            0x1F9F25CF, 0xADF2B89B, 0x5AD6B472, 0x5A88F54C,
			            0xE029AC71, 0xE019A5E6, 0x47B0ACFD, 0xED93FA9B,
			            0xE8D3C48D, 0x283B57CC, 0xF8D56629, 0x79132E28,
			            0x785F0191, 0xED756055, 0xF7960E44, 0xE3D35E8C,
			            0x15056DD4, 0x88F46DBA, 0x03A16125, 0x0564F0BD,
			            0xC3EB9E15, 0x3C9057A2, 0x97271AEC, 0xA93A072A,
			            0x1B3F6D9B, 0x1E6321F5, 0xF59C66FB, 0x26DCF319,
			            0x7533D928, 0xB155FDF5, 0x03563482, 0x8ABA3CBB,
			            0x28517711, 0xC20AD9F8, 0xABCC5167, 0xCCAD925F,
			            0x4DE81751, 0x3830DC8E, 0x379D5862, 0x9320F991,
			            0xEA7A90C2, 0xFB3E7BCE, 0x5121CE64, 0x774FBE32,
			            0xA8B6E37E, 0xC3293D46, 0x48DE5369, 0x6413E680,
			            0xA2AE0810, 0xDD6DB224, 0x69852DFD, 0x09072166,
			            0xB39A460A, 0x6445C0DD, 0x586CDECF, 0x1C20C8AE,
			            0x5BBEF7DD, 0x1B588D40, 0xCCD2017F, 0x6BB4E3BB,
			            0xDDA26A7E, 0x3A59FF45, 0x3E350A44, 0xBCB4CDD5,
			            0x72EACEA8, 0xFA6484BB, 0x8D6612AE, 0xBF3C6F47,
			            0xD29BE463, 0x542F5D9E, 0xAEC2771B, 0xF64E6370,
			            0x740E0D8D, 0xE75B1357, 0xF8721671, 0xAF537D5D,
			            0x4040CB08, 0x4EB4E2CC, 0x34D2466A, 0x0115AF84,
			            0xE1B00428, 0x95983A1D, 0x06B89FB4, 0xCE6EA048,
			            0x6F3F3B82, 0x3520AB82, 0x011A1D4B, 0x277227F8,
			            0x611560B1, 0xE7933FDC, 0xBB3A792B, 0x344525BD,
			            0xA08839E1, 0x51CE794B, 0x2F32C9B7, 0xA01FBAC9,
			            0xE01CC87E, 0xBCC7D1F6, 0xCF0111C3, 0xA1E8AAC7,
			            0x1A908749, 0xD44FBD9A, 0xD0DADECB, 0xD50ADA38,
			            0x0339C32A, 0xC6913667, 0x8DF9317C, 0xE0B12B4F,
			            0xF79E59B7, 0x43F5BB3A, 0xF2D519FF, 0x27D9459C,
			            0xBF97222C, 0x15E6FC2A, 0x0F91FC71, 0x9B941525,
			            0xFAE59361, 0xCEB69CEB, 0xC2A86459, 0x12BAA8D1,
			            0xB6C1075E, 0xE3056A0C, 0x10D25065, 0xCB03A442,
			            0xE0EC6E0E, 0x1698DB3B, 0x4C98A0BE, 0x3278E964,
			            0x9F1F9532, 0xE0D392DF, 0xD3A0342B, 0x8971F21E,
			            0x1B0A7441, 0x4BA3348C, 0xC5BE7120, 0xC37632D8,
			            0xDF359F8D, 0x9B992F2E, 0xE60B6F47, 0x0FE3F11D,
			            0xE54CDA54, 0x1EDAD891, 0xCE6279CF, 0xCD3E7E6F,
			            0x1618B166, 0xFD2C1D05, 0x848FD2C5, 0xF6FB2299,
			            0xF523F357, 0xA6327623, 0x93A83531, 0x56CCCD02,
			            0xACF08162, 0x5A75EBB5, 0x6E163697, 0x88D273CC,
			            0xDE966292, 0x81B949D0, 0x4C50901B, 0x71C65614,
			            0xE6C6C7BD, 0x327A140A, 0x45E1D006, 0xC3F27B9A,
			            0xC9AA53FD, 0x62A80F00, 0xBB25BFE2, 0x35BDD2F6,
			            0x71126905, 0xB2040222, 0xB6CBCF7C, 0xCD769C2B,
			            0x53113EC0, 0x1640E3D3, 0x38ABBD60, 0x2547ADF0,
			            0xBA38209C, 0xF746CE76, 0x77AFA1C5, 0x20756060,
			            0x85CBFE4E, 0x8AE88DD8, 0x7AAAF9B0, 0x4CF9AA7E,
			            0x1948C25C, 0x02FB8A8C, 0x01C36AE4, 0xD6EBE1F9,
			            0x90D4F869, 0xA65CDEA0, 0x3F09252D, 0xC208E69F,
			            0xB74E6132, 0xCE77E25B, 0x578FDFE3, 0x3AC372E6  ]
			    ];
			    var BLOWFISH_CTX = {
			        pbox: [],
			        sbox: []
			    };
			    function F(ctx, x){
			        let a = (x >> 24) & 0xFF;
			        let b = (x >> 16) & 0xFF;
			        let c = (x >> 8) & 0xFF;
			        let d = x & 0xFF;
			        let y = ctx.sbox[0][a] + ctx.sbox[1][b];
			        y = y ^ ctx.sbox[2][c];
			        y = y + ctx.sbox[3][d];
			        return y;
			    }
			    function BlowFish_Encrypt(ctx, left, right){
			        let Xl = left;
			        let Xr = right;
			        let temp;
			        for(let i = 0; i < N; ++i){
			            Xl = Xl ^ ctx.pbox[i];
			            Xr = F(ctx, Xl) ^ Xr;
			            temp = Xl;
			            Xl = Xr;
			            Xr = temp;
			        }
			        temp = Xl;
			        Xl = Xr;
			        Xr = temp;
			        Xr = Xr ^ ctx.pbox[N];
			        Xl = Xl ^ ctx.pbox[N + 1];
			        return {left: Xl, right: Xr};
			    }
			    function BlowFish_Decrypt(ctx, left, right){
			        let Xl = left;
			        let Xr = right;
			        let temp;
			        for(let i = N + 1; i > 1; --i){
			            Xl = Xl ^ ctx.pbox[i];
			            Xr = F(ctx, Xl) ^ Xr;
			            temp = Xl;
			            Xl = Xr;
			            Xr = temp;
			        }
			        temp = Xl;
			        Xl = Xr;
			        Xr = temp;
			        Xr = Xr ^ ctx.pbox[1];
			        Xl = Xl ^ ctx.pbox[0];
			        return {left: Xl, right: Xr};
			    }
			    function BlowFishInit(ctx, key, keysize)
			    {
			        for(let Row = 0; Row < 4; Row++)
			        {
			            ctx.sbox[Row] = [];
			            for(let Col = 0; Col < 256; Col++)
			            {
			                ctx.sbox[Row][Col] = ORIG_S[Row][Col];
			            }
			        }
			        let keyIndex = 0;
			        for(let index = 0; index < N + 2; index++)
			        {
			            ctx.pbox[index] = ORIG_P[index] ^ key[keyIndex];
			            keyIndex++;
			            if(keyIndex >= keysize)
			            {
			                keyIndex = 0;
			            }
			        }
			        let Data1 = 0;
			        let Data2 = 0;
			        let res = 0;
			        for(let i = 0; i < N + 2; i += 2)
			        {
			            res = BlowFish_Encrypt(ctx, Data1, Data2);
			            Data1 = res.left;
			            Data2 = res.right;
			            ctx.pbox[i] = Data1;
			            ctx.pbox[i + 1] = Data2;
			        }
			        for(let i = 0; i < 4; i++)
			        {
			            for(let j = 0; j < 256; j += 2)
			            {
			                res = BlowFish_Encrypt(ctx, Data1, Data2);
			                Data1 = res.left;
			                Data2 = res.right;
			                ctx.sbox[i][j] = Data1;
			                ctx.sbox[i][j + 1] = Data2;
			            }
			        }
			        return true;
			    }
			    var Blowfish = C_algo.Blowfish = BlockCipher.extend({
			        _doReset: function () {
			            if (this._keyPriorReset === this._key) {
			                return;
			            }
			            var key = this._keyPriorReset = this._key;
			            var keyWords = key.words;
			            var keySize = key.sigBytes / 4;
			            BlowFishInit(BLOWFISH_CTX, keyWords, keySize);
			        },
			        encryptBlock: function (M, offset) {
			            var res = BlowFish_Encrypt(BLOWFISH_CTX, M[offset], M[offset + 1]);
			            M[offset] = res.left;
			            M[offset + 1] = res.right;
			        },
			        decryptBlock: function (M, offset) {
			            var res = BlowFish_Decrypt(BLOWFISH_CTX, M[offset], M[offset + 1]);
			            M[offset] = res.left;
			            M[offset + 1] = res.right;
			        },
			        blockSize: 64/32,
			        keySize: 128/32,
			        ivSize: 64/32
			    });
			    C.Blowfish = BlockCipher._createHelper(Blowfish);
			}());
			return CryptoJS.Blowfish;
		})); 
	} (blowfish));
	return blowfish.exports;
}

(function (module, exports) {
(function (root, factory, undef) {
		{
			module.exports = factory(requireCore(), requireX64Core(), requireLibTypedarrays(), requireEncUtf16(), requireEncBase64(), requireEncBase64url(), requireMd5(), requireSha1(), requireSha256(), requireSha224(), requireSha512(), requireSha384(), requireSha3(), requireRipemd160(), requireHmac(), requirePbkdf2(), requireEvpkdf(), requireCipherCore(), requireModeCfb(), requireModeCtr(), requireModeCtrGladman(), requireModeOfb(), requireModeEcb(), requirePadAnsix923(), requirePadIso10126(), requirePadIso97971(), requirePadZeropadding(), requirePadNopadding(), requireFormatHex(), requireAes(), requireTripledes(), requireRc4(), requireRabbit(), requireRabbitLegacy(), requireBlowfish());
		}
	}(commonjsGlobal$1, function (CryptoJS) {
		return CryptoJS;
	})); 
} (cryptoJs));

var cryptoJsExports = cryptoJs.exports;
var CryptoJS = /*@__PURE__*/getDefaultExportFromCjs$1(cryptoJsExports);

var restructure = {};

let iconv$1;
try { iconv$1 = require('iconv-lite'); } catch (error) {}
let DecodeStream$2 = class DecodeStream {
  constructor(buffer) {
    this.buffer = buffer;
    this.pos = 0;
    this.length = this.buffer.length;
  }
  readString(length, encoding = 'ascii') {
    switch (encoding) {
      case 'utf16le': case 'ucs2': case 'utf8': case 'ascii':
        return this.buffer.toString(encoding, this.pos, (this.pos += length));
      case 'utf16be':
        var buf = buffer.Buffer.from(this.readBuffer(length));
        for (let i = 0, end = buf.length - 1; i < end; i += 2) {
          const byte = buf[i];
          buf[i] = buf[i + 1];
          buf[i + 1] = byte;
        }
        return buf.toString('utf16le');
      default:
        buf = this.readBuffer(length);
        if (iconv$1) {
          try {
            return iconv$1.decode(buf, encoding);
          } catch (error1) {}
        }
        return buf;
    }
  }
  readBuffer(length) {
    return this.buffer.slice(this.pos, (this.pos += length));
  }
  readUInt24BE() {
    return (this.readUInt16BE() << 8) + this.readUInt8();
  }
  readUInt24LE() {
    return this.readUInt16LE() + (this.readUInt8() << 16);
  }
  readInt24BE() {
    return (this.readInt16BE() << 8) + this.readUInt8();
  }
  readInt24LE() {
    return this.readUInt16LE() + (this.readInt8() << 16);
  }
};
DecodeStream$2.TYPES = {
  UInt8: 1,
  UInt16: 2,
  UInt24: 3,
  UInt32: 4,
  Int8: 1,
  Int16: 2,
  Int24: 3,
  Int32: 4,
  Float: 4,
  Double: 8
};
for (let key in buffer.Buffer.prototype) {
  if (key.slice(0, 4) === 'read') {
    const bytes = DecodeStream$2.TYPES[key.replace(/read|[BL]E/g, '')];
    DecodeStream$2.prototype[key] = function() {
      const ret = this.buffer[key](this.pos);
      this.pos += bytes;
      return ret;
    };
  }
}
var DecodeStream_1 = DecodeStream$2;

let iconv;
const stream = requireStreamBrowserify();
const DecodeStream$1 = DecodeStream_1;
try { iconv = require('iconv-lite'); } catch (error) {}
class EncodeStream extends stream.Readable {
  constructor(bufferSize =  65536) {
    super(...arguments);
    this.buffer = buffer.Buffer.alloc(bufferSize);
    this.bufferOffset = 0;
    this.pos = 0;
  }
  _read() {}
  ensure(bytes) {
    if ((this.bufferOffset + bytes) > this.buffer.length) {
      return this.flush();
    }
  }
  flush() {
    if (this.bufferOffset > 0) {
      this.push(buffer.Buffer.from(this.buffer.slice(0, this.bufferOffset)));
      return this.bufferOffset = 0;
    }
  }
  writeBuffer(buffer) {
    this.flush();
    this.push(buffer);
    return this.pos += buffer.length;
  }
  writeString(string, encoding = 'ascii') {
    switch (encoding) {
      case 'utf16le': case 'ucs2': case 'utf8': case 'ascii':
        return this.writeBuffer(buffer.Buffer.from(string, encoding));
      case 'utf16be':
        var buf = buffer.Buffer.from(string, 'utf16le');
        for (let i = 0, end = buf.length - 1; i < end; i += 2) {
          const byte = buf[i];
          buf[i] = buf[i + 1];
          buf[i + 1] = byte;
        }
        return this.writeBuffer(buf);
      default:
        if (iconv) {
          return this.writeBuffer(iconv.encode(string, encoding));
        } else {
          throw new Error('Install iconv-lite to enable additional string encodings.');
        }
    }
  }
  writeUInt24BE(val) {
    this.ensure(3);
    this.buffer[this.bufferOffset++] = (val >>> 16) & 0xff;
    this.buffer[this.bufferOffset++] = (val >>> 8)  & 0xff;
    this.buffer[this.bufferOffset++] = val & 0xff;
    return this.pos += 3;
  }
  writeUInt24LE(val) {
    this.ensure(3);
    this.buffer[this.bufferOffset++] = val & 0xff;
    this.buffer[this.bufferOffset++] = (val >>> 8) & 0xff;
    this.buffer[this.bufferOffset++] = (val >>> 16) & 0xff;
    return this.pos += 3;
  }
  writeInt24BE(val) {
    if (val >= 0) {
      return this.writeUInt24BE(val);
    } else {
      return this.writeUInt24BE(val + 0xffffff + 1);
    }
  }
  writeInt24LE(val) {
    if (val >= 0) {
      return this.writeUInt24LE(val);
    } else {
      return this.writeUInt24LE(val + 0xffffff + 1);
    }
  }
  fill(val, length) {
    if (length < this.buffer.length) {
      this.ensure(length);
      this.buffer.fill(val, this.bufferOffset, this.bufferOffset + length);
      this.bufferOffset += length;
      return this.pos += length;
    } else {
      const buf = buffer.Buffer.alloc(length);
      buf.fill(val);
      return this.writeBuffer(buf);
    }
  }
  end() {
    this.flush();
    return this.push(null);
  }
}
for (let key in buffer.Buffer.prototype) {
  if (key.slice(0, 5) === 'write') {
    const bytes = +DecodeStream$1.TYPES[key.replace(/write|[BL]E/g, '')];
    EncodeStream.prototype[key] = function(value) {
      this.ensure(bytes);
      this.buffer[key](value, this.bufferOffset);
      this.bufferOffset += bytes;
      return this.pos += bytes;
    };
  }
}
var EncodeStream_1 = EncodeStream;

var _Number = {};

const DecodeStream = DecodeStream_1;
let NumberT$5 = class NumberT {
  constructor(type, endian = 'BE') {
    this.type = type;
    this.endian = endian;
    this.fn = this.type;
    if (this.type[this.type.length - 1] !== '8') {
      this.fn += this.endian;
    }
  }
  size() {
    return DecodeStream.TYPES[this.type];
  }
  decode(stream) {
    return stream[`read${this.fn}`]();
  }
  encode(stream, val) {
    return stream[`write${this.fn}`](val);
  }
};
_Number.Number = NumberT$5;
_Number.uint8 = new NumberT$5('UInt8');
_Number.uint16be = (_Number.uint16 = new NumberT$5('UInt16', 'BE'));
_Number.uint16le = new NumberT$5('UInt16', 'LE');
_Number.uint24be = (_Number.uint24 = new NumberT$5('UInt24', 'BE'));
_Number.uint24le = new NumberT$5('UInt24', 'LE');
_Number.uint32be = (_Number.uint32 = new NumberT$5('UInt32', 'BE'));
_Number.uint32le = new NumberT$5('UInt32', 'LE');
_Number.int8 = new NumberT$5('Int8');
_Number.int16be = (_Number.int16 = new NumberT$5('Int16', 'BE'));
_Number.int16le = new NumberT$5('Int16', 'LE');
_Number.int24be = (_Number.int24 = new NumberT$5('Int24', 'BE'));
_Number.int24le = new NumberT$5('Int24', 'LE');
_Number.int32be = (_Number.int32 = new NumberT$5('Int32', 'BE'));
_Number.int32le = new NumberT$5('Int32', 'LE');
_Number.floatbe = (_Number.float = new NumberT$5('Float', 'BE'));
_Number.floatle = new NumberT$5('Float', 'LE');
_Number.doublebe = (_Number.double = new NumberT$5('Double', 'BE'));
_Number.doublele = new NumberT$5('Double', 'LE');
class Fixed extends NumberT$5 {
  constructor(size, endian, fracBits = size >> 1) {
    super(`Int${size}`, endian);
    this._point = 1 << fracBits;
  }
  decode(stream) {
    return super.decode(stream) / this._point;
  }
  encode(stream, val) {
    return super.encode(stream, (val * this._point) | 0);
  }
}
_Number.Fixed = Fixed;
_Number.fixed16be = (_Number.fixed16 = new Fixed(16, 'BE'));
_Number.fixed16le = new Fixed(16, 'LE');
_Number.fixed32be = (_Number.fixed32 =new Fixed(32, 'BE'));
_Number.fixed32le = new Fixed(32, 'LE');

var utils$7 = {};

const {Number:NumberT$4} = _Number;
var resolveLength = utils$7.resolveLength = function(length, stream, parent) {
  let res;
  if (typeof length === 'number') {
    res = length;
  } else if (typeof length === 'function') {
    res = length.call(parent, parent);
  } else if (parent && (typeof length === 'string')) {
    res = parent[length];
  } else if (stream && length instanceof NumberT$4) {
    res = length.decode(stream);
  }
  if (isNaN(res)) {
    throw new Error('Not a fixed size');
  }
  return res;
};
class PropertyDescriptor {
  constructor(opts = {}) {
    this.enumerable = true;
    this.configurable = true;
    for (let key in opts) {
      const val = opts[key];
      this[key] = val;
    }
  }
}
var PropertyDescriptor_1 = utils$7.PropertyDescriptor = PropertyDescriptor;

const {Number:NumberT$3} = _Number;
const utils$6 = utils$7;
let ArrayT$1 = class ArrayT {
  constructor(type, length, lengthType = 'count') {
    this.type = type;
    this.length = length;
    this.lengthType = lengthType;
  }
  decode(stream, parent) {
    let length;
    const { pos } = stream;
    const res = [];
    let ctx = parent;
    if (this.length != null) {
      length = utils$6.resolveLength(this.length, stream, parent);
    }
    if (this.length instanceof NumberT$3) {
      Object.defineProperties(res, {
        parent:         { value: parent },
        _startOffset:   { value: pos },
        _currentOffset: { value: 0, writable: true },
        _length:        { value: length }
      });
      ctx = res;
    }
    if ((length == null) || (this.lengthType === 'bytes')) {
      const target = (length != null) ?
        stream.pos + length
      : (parent != null ? parent._length : undefined) ?
        parent._startOffset + parent._length
      :
        stream.length;
      while (stream.pos < target) {
        res.push(this.type.decode(stream, ctx));
      }
    } else {
      for (let i = 0, end = length; i < end; i++) {
        res.push(this.type.decode(stream, ctx));
      }
    }
    return res;
  }
  size(array, ctx) {
    if (!array) {
      return this.type.size(null, ctx) * utils$6.resolveLength(this.length, null, ctx);
    }
    let size = 0;
    if (this.length instanceof NumberT$3) {
      size += this.length.size();
      ctx = {parent: ctx};
    }
    for (let item of array) {
      size += this.type.size(item, ctx);
    }
    return size;
  }
  encode(stream, array, parent) {
    let ctx = parent;
    if (this.length instanceof NumberT$3) {
      ctx = {
        pointers: [],
        startOffset: stream.pos,
        parent
      };
      ctx.pointerOffset = stream.pos + this.size(array, ctx);
      this.length.encode(stream, array.length);
    }
    for (let item of array) {
      this.type.encode(stream, item, ctx);
    }
    if (this.length instanceof NumberT$3) {
      let i = 0;
      while (i < ctx.pointers.length) {
        const ptr = ctx.pointers[i++];
        ptr.type.encode(stream, ptr.val);
      }
    }
  }
};
var _Array = ArrayT$1;

const ArrayT = _Array;
const {Number:NumberT$2} = _Number;
const utils$5 = utils$7;
const {inspect: inspect$1} = util;
class LazyArrayT extends ArrayT {
  decode(stream, parent) {
    const { pos } = stream;
    const length = utils$5.resolveLength(this.length, stream, parent);
    if (this.length instanceof NumberT$2) {
      parent = {
        parent,
        _startOffset: pos,
        _currentOffset: 0,
        _length: length
      };
    }
    const res = new LazyArray(this.type, length, stream, parent);
    stream.pos += length * this.type.size(null, parent);
    return res;
  }
  size(val, ctx) {
    if (val instanceof LazyArray) {
      val = val.toArray();
    }
    return super.size(val, ctx);
  }
  encode(stream, val, ctx) {
    if (val instanceof LazyArray) {
      val = val.toArray();
    }
    return super.encode(stream, val, ctx);
  }
}
class LazyArray {
  constructor(type, length, stream, ctx) {
    this.type = type;
    this.length = length;
    this.stream = stream;
    this.ctx = ctx;
    this.base = this.stream.pos;
    this.items = [];
  }
  get(index) {
    if ((index < 0) || (index >= this.length)) {
      return undefined;
    }
    if (this.items[index] == null) {
      const { pos } = this.stream;
      this.stream.pos = this.base + (this.type.size(null, this.ctx) * index);
      this.items[index] = this.type.decode(this.stream, this.ctx);
      this.stream.pos = pos;
    }
    return this.items[index];
  }
  toArray() {
    const result = [];
    for (let i = 0, end = this.length; i < end; i++) {
      result.push(this.get(i));
    }
    return result;
  }
  inspect() {
    return inspect$1(this.toArray());
  }
}
var LazyArray_1 = LazyArrayT;

class Bitfield {
  constructor(type, flags = []) {
    this.type = type;
    this.flags = flags;
  }
  decode(stream) {
    const val = this.type.decode(stream);
    const res = {};
    for (let i = 0; i < this.flags.length; i++) {
      const flag = this.flags[i];
      if (flag != null) {
        res[flag] = !!(val & (1 << i));
      }
    }
    return res;
  }
  size() {
    return this.type.size();
  }
  encode(stream, keys) {
    let val = 0;
    for (let i = 0; i < this.flags.length; i++) {
      const flag = this.flags[i];
      if (flag != null) {
        if (keys[flag]) { val |= (1 << i); }
      }
    }
    return this.type.encode(stream, val);
  }
}
var Bitfield_1 = Bitfield;

class BooleanT {
  constructor(type) {
    this.type = type;
  }
  decode(stream, parent) {
    return !!this.type.decode(stream, parent);
  }
  size(val, parent) {
    return this.type.size(val, parent);
  }
  encode(stream, val, parent) {
    return this.type.encode(stream, +val, parent);
  }
}
var _Boolean = BooleanT;

const utils$4 = utils$7;
const {Number:NumberT$1} = _Number;
class BufferT {
  constructor(length) {
    this.length = length;
  }
  decode(stream, parent) {
    const length = utils$4.resolveLength(this.length, stream, parent);
    return stream.readBuffer(length);
  }
  size(val, parent) {
    if (!val) {
      return utils$4.resolveLength(this.length, null, parent);
    }
    return val.length;
  }
  encode(stream, buf, parent) {
    if (this.length instanceof NumberT$1) {
      this.length.encode(stream, buf.length);
    }
    return stream.writeBuffer(buf);
  }
}
var Buffer = BufferT;

class Enum {
  constructor(type, options = []) {
    this.type = type;
    this.options = options;
  }
  decode(stream) {
    const index = this.type.decode(stream);
    return this.options[index] || index;
  }
  size() {
    return this.type.size();
  }
  encode(stream, val) {
    const index = this.options.indexOf(val);
    if (index === -1) {
      throw new Error(`Unknown option in enum: ${val}`);
    }
    return this.type.encode(stream, index);
  }
}
var Enum_1 = Enum;

class Optional {
  constructor(type, condition = true) {
    this.type = type;
    this.condition = condition;
  }
  decode(stream, parent) {
    let { condition } = this;
    if (typeof condition === 'function') {
      condition = condition.call(parent, parent);
    }
    if (condition) {
      return this.type.decode(stream, parent);
    }
  }
  size(val, parent) {
    let { condition } = this;
    if (typeof condition === 'function') {
      condition = condition.call(parent, parent);
    }
    if (condition) {
      return this.type.size(val, parent);
    } else {
      return 0;
    }
  }
  encode(stream, val, parent) {
    let { condition } = this;
    if (typeof condition === 'function') {
      condition = condition.call(parent, parent);
    }
    if (condition) {
      return this.type.encode(stream, val, parent);
    }
  }
}
var Optional_1 = Optional;

const utils$3 = utils$7;
class Reserved {
  constructor(type, count = 1) {
    this.type = type;
    this.count = count;
  }
  decode(stream, parent) {
    stream.pos += this.size(null, parent);
    return undefined;
  }
  size(data, parent) {
    const count = utils$3.resolveLength(this.count, null, parent);
    return this.type.size() * count;
  }
  encode(stream, val, parent) {
    return stream.fill(0, this.size(val, parent));
  }
}
var Reserved_1 = Reserved;

const {Number:NumberT} = _Number;
const utils$2 = utils$7;
class StringT {
  constructor(length, encoding = 'ascii') {
    this.length = length;
    this.encoding = encoding;
  }
  decode(stream, parent) {
    let length, pos;
    if (this.length != null) {
      length = utils$2.resolveLength(this.length, stream, parent);
    } else {
      let buffer;
      ({buffer, length, pos} = stream);
      while ((pos < length) && (buffer[pos] !== 0x00)) {
        ++pos;
      }
      length = pos - stream.pos;
    }
    let { encoding } = this;
    if (typeof encoding === 'function') {
      encoding = encoding.call(parent, parent) || 'ascii';
    }
    const string = stream.readString(length, encoding);
    if ((this.length == null) && (stream.pos < stream.length)) {
      stream.pos++;
    }
    return string;
  }
  size(val, parent) {
    if (!val) {
      return utils$2.resolveLength(this.length, null, parent);
    }
    let { encoding } = this;
    if (typeof encoding === 'function') {
      encoding = encoding.call(parent != null ? parent.val : undefined, parent != null ? parent.val : undefined) || 'ascii';
    }
    if (encoding === 'utf16be') {
      encoding = 'utf16le';
    }
    let size = buffer.Buffer.byteLength(val, encoding);
    if (this.length instanceof NumberT) {
      size += this.length.size();
    }
    if ((this.length == null)) {
      size++;
    }
    return size;
  }
  encode(stream, val, parent) {
    let { encoding } = this;
    if (typeof encoding === 'function') {
      encoding = encoding.call(parent != null ? parent.val : undefined, parent != null ? parent.val : undefined) || 'ascii';
    }
    if (this.length instanceof NumberT) {
      this.length.encode(stream, buffer.Buffer.byteLength(val, encoding));
    }
    stream.writeString(val, encoding);
    if ((this.length == null)) {
      return stream.writeUInt8(0x00);
    }
  }
}
var _String = StringT;

const utils$1 = utils$7;
let Struct$1 = class Struct {
  constructor(fields = {}) {
    this.fields = fields;
  }
  decode(stream, parent, length = 0) {
    const res = this._setup(stream, parent, length);
    this._parseFields(stream, res, this.fields);
    if (this.process != null) {
      this.process.call(res, stream);
    }
    return res;
  }
  _setup(stream, parent, length) {
    const res = {};
    Object.defineProperties(res, {
      parent:         { value: parent },
      _startOffset:   { value: stream.pos },
      _currentOffset: { value: 0, writable: true },
      _length:        { value: length }
    });
    return res;
  }
  _parseFields(stream, res, fields) {
    for (let key in fields) {
      var val;
      const type = fields[key];
      if (typeof type === 'function') {
        val = type.call(res, res);
      } else {
        val = type.decode(stream, res);
      }
      if (val !== undefined) {
        if (val instanceof utils$1.PropertyDescriptor) {
          Object.defineProperty(res, key, val);
        } else {
          res[key] = val;
        }
      }
      res._currentOffset = stream.pos - res._startOffset;
    }
  }
  size(val, parent, includePointers) {
    if (val == null) { val = {}; }
    if (includePointers == null) { includePointers = true; }
    const ctx = {
      parent,
      val,
      pointerSize: 0
    };
    let size = 0;
    for (let key in this.fields) {
      const type = this.fields[key];
      if (type.size != null) {
        size += type.size(val[key], ctx);
      }
    }
    if (includePointers) {
      size += ctx.pointerSize;
    }
    return size;
  }
  encode(stream, val, parent) {
    let type;
    if (this.preEncode != null) {
      this.preEncode.call(val, stream);
    }
    const ctx = {
      pointers: [],
      startOffset: stream.pos,
      parent,
      val,
      pointerSize: 0
    };
    ctx.pointerOffset = stream.pos + this.size(val, ctx, false);
    for (let key in this.fields) {
      type = this.fields[key];
      if (type.encode != null) {
        type.encode(stream, val[key], ctx);
      }
    }
    let i = 0;
    while (i < ctx.pointers.length) {
      const ptr = ctx.pointers[i++];
      ptr.type.encode(stream, ptr.val, ptr.parent);
    }
  }
};
var Struct_1 = Struct$1;

const Struct = Struct_1;
const getPath = (object, pathArray) => {
  return pathArray.reduce((prevObj, key) => prevObj && prevObj[key], object);
};
class VersionedStruct extends Struct {
  constructor(type, versions = {}) {
    super();
    this.type = type;
    this.versions = versions;
    if (typeof type === 'string') {
      this.versionPath = type.split('.');
    }
  }
  decode(stream, parent, length = 0) {
    const res = this._setup(stream, parent, length);
    if (typeof this.type === 'string') {
      res.version = getPath(parent, this.versionPath);
    } else {
      res.version = this.type.decode(stream);
    }
    if (this.versions.header) {
      this._parseFields(stream, res, this.versions.header);
    }
    const fields = this.versions[res.version];
    if ((fields == null)) {
      throw new Error(`Unknown version ${res.version}`);
    }
    if (fields instanceof VersionedStruct) {
      return fields.decode(stream, parent);
    }
    this._parseFields(stream, res, fields);
    if (this.process != null) {
      this.process.call(res, stream);
    }
    return res;
  }
  size(val, parent, includePointers = true) {
    let key, type;
    if (!val) {
      throw new Error('Not a fixed size');
    }
    const ctx = {
      parent,
      val,
      pointerSize: 0
    };
    let size = 0;
    if (typeof this.type !== 'string') {
      size += this.type.size(val.version, ctx);
    }
    if (this.versions.header) {
      for (key in this.versions.header) {
        type = this.versions.header[key];
        if (type.size != null) {
          size += type.size(val[key], ctx);
        }
      }
    }
    const fields = this.versions[val.version];
    if ((fields == null)) {
      throw new Error(`Unknown version ${val.version}`);
    }
    for (key in fields) {
      type = fields[key];
      if (type.size != null) {
        size += type.size(val[key], ctx);
      }
    }
    if (includePointers) {
      size += ctx.pointerSize;
    }
    return size;
  }
  encode(stream, val, parent) {
    let key, type;
    if (this.preEncode != null) {
      this.preEncode.call(val, stream);
    }
    const ctx = {
      pointers: [],
      startOffset: stream.pos,
      parent,
      val,
      pointerSize: 0
    };
    ctx.pointerOffset = stream.pos + this.size(val, ctx, false);
    if (typeof this.type !== 'string') {
      this.type.encode(stream, val.version);
    }
    if (this.versions.header) {
      for (key in this.versions.header) {
        type = this.versions.header[key];
        if (type.encode != null) {
          type.encode(stream, val[key], ctx);
        }
      }
    }
    const fields = this.versions[val.version];
    for (key in fields) {
      type = fields[key];
      if (type.encode != null) {
        type.encode(stream, val[key], ctx);
      }
    }
    let i = 0;
    while (i < ctx.pointers.length) {
      const ptr = ctx.pointers[i++];
      ptr.type.encode(stream, ptr.val, ptr.parent);
    }
  }
}
var VersionedStruct_1 = VersionedStruct;

var Pointer$1 = {};

const utils = utils$7;
class Pointer {
  constructor(offsetType, type, options = {}) {
    this.offsetType = offsetType;
    this.type = type;
    this.options = options;
    if (this.type === 'void') { this.type = null; }
    if (this.options.type == null) { this.options.type = 'local'; }
    if (this.options.allowNull == null) { this.options.allowNull = true; }
    if (this.options.nullValue == null) { this.options.nullValue = 0; }
    if (this.options.lazy == null) { this.options.lazy = false; }
    if (this.options.relativeTo) {
      if (typeof this.options.relativeTo !== 'function') {
        throw new Error('relativeTo option must be a function');
      }
      this.relativeToGetter = options.relativeTo;
    }
  }
  decode(stream, ctx) {
    const offset = this.offsetType.decode(stream, ctx);
    if ((offset === this.options.nullValue) && this.options.allowNull) {
      return null;
    }
    let relative;
    switch (this.options.type) {
      case 'local':     relative = ctx._startOffset; break;
      case 'immediate': relative = stream.pos - this.offsetType.size(); break;
      case 'parent':    relative = ctx.parent._startOffset; break;
      default:
        var c = ctx;
        while (c.parent) {
          c = c.parent;
        }
        relative = c._startOffset || 0;
    }
    if (this.options.relativeTo) {
      relative += this.relativeToGetter(ctx);
    }
    const ptr = offset + relative;
    if (this.type != null) {
      let val = null;
      const decodeValue = () => {
        if (val != null) { return val; }
        const { pos } = stream;
        stream.pos = ptr;
        val = this.type.decode(stream, ctx);
        stream.pos = pos;
        return val;
      };
      if (this.options.lazy) {
        return new utils.PropertyDescriptor({
          get: decodeValue});
      }
      return decodeValue();
    } else {
      return ptr;
    }
  }
  size(val, ctx) {
    const parent = ctx;
    switch (this.options.type) {
      case 'local': case 'immediate':
        break;
      case 'parent':
        ctx = ctx.parent;
        break;
      default:
        while (ctx.parent) {
          ctx = ctx.parent;
        }
    }
    let { type } = this;
    if (type == null) {
      if (!(val instanceof VoidPointer)) {
        throw new Error("Must be a VoidPointer");
      }
      ({ type } = val);
      val = val.value;
    }
    if (val && ctx) {
      ctx.pointerSize += type.size(val, parent);
    }
    return this.offsetType.size();
  }
  encode(stream, val, ctx) {
    let relative;
    const parent = ctx;
    if ((val == null)) {
      this.offsetType.encode(stream, this.options.nullValue);
      return;
    }
    switch (this.options.type) {
      case 'local':
        relative = ctx.startOffset;
        break;
      case 'immediate':
        relative = stream.pos + this.offsetType.size(val, parent);
        break;
      case 'parent':
        ctx = ctx.parent;
        relative = ctx.startOffset;
        break;
      default:
        relative = 0;
        while (ctx.parent) {
          ctx = ctx.parent;
        }
    }
    if (this.options.relativeTo) {
      relative += this.relativeToGetter(parent.val);
    }
    this.offsetType.encode(stream, ctx.pointerOffset - relative);
    let { type } = this;
    if (type == null) {
      if (!(val instanceof VoidPointer)) {
        throw new Error("Must be a VoidPointer");
      }
      ({ type } = val);
      val = val.value;
    }
    ctx.pointers.push({
      type,
      val,
      parent
    });
    return ctx.pointerOffset += type.size(val, parent);
  }
}
class VoidPointer {
  constructor(type, value) {
    this.type = type;
    this.value = value;
  }
}
Pointer$1.Pointer = Pointer;
Pointer$1.VoidPointer = VoidPointer;

(function (exports) {
	exports.EncodeStream    = EncodeStream_1;
	exports.DecodeStream    = DecodeStream_1;
	exports.Array           = _Array;
	exports.LazyArray       = LazyArray_1;
	exports.Bitfield        = Bitfield_1;
	exports.Boolean         = _Boolean;
	exports.Buffer          = Buffer;
	exports.Enum            = Enum_1;
	exports.Optional        = Optional_1;
	exports.Reserved        = Reserved_1;
	exports.String          = _String;
	exports.Struct          = Struct_1;
	exports.VersionedStruct = VersionedStruct_1;
	const utils             = utils$7;
	const NumberT           = _Number;
	const Pointer           = Pointer$1;
	Object.assign(exports, utils, NumberT, Pointer); 
} (restructure));

var $5OpyM$restructure = /*@__PURE__*/getDefaultExportFromCjs$1(restructure);

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object['ke' + 'ys'](descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;
  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }
  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator ? (decorator(target, property, desc) || desc) : desc;
  }, desc);
  var hasAccessor = Object.prototype.hasOwnProperty.call(desc, 'get') || Object.prototype.hasOwnProperty.call(desc, 'set');
  if (context && desc.initializer !== void 0 && !hasAccessor) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }
  if (hasAccessor) {
    delete desc.writable;
    delete desc.initializer;
    delete desc.value;
  }
  if (desc.initializer === void 0) {
    Object['define' + 'Property'](target, property, desc);
    desc = null;
  }
  return desc;
}

var define$2 = defineProperties_1;
var getPolyfill$3 = polyfill$5;
var shim$3 = function shimAssign() {
	var polyfill = getPolyfill$3();
	define$2(
		Object,
		{ assign: polyfill },
		{ assign: function () { return Object.assign !== polyfill; } }
	);
	return polyfill;
};

var defineProperties = defineProperties_1;
var callBind$2 = callBindExports;
var implementation$3 = implementation$9;
var getPolyfill$2 = polyfill$5;
var shim$2 = shim$3;
var polyfill$1 = callBind$2.apply(getPolyfill$2());
var bound = function assign(target, source1) {
	return polyfill$1(Object, arguments);
};
defineProperties(bound, {
	getPolyfill: getPolyfill$2,
	implementation: implementation$3,
	shim: shim$2
});
var object_assign = bound;

var functionsHaveNames = function functionsHaveNames() {
	return typeof function f() {}.name === 'string';
};
var gOPD$2 = Object.getOwnPropertyDescriptor;
if (gOPD$2) {
	try {
		gOPD$2([], 'length');
	} catch (e) {
		gOPD$2 = null;
	}
}
functionsHaveNames.functionsHaveConfigurableNames = function functionsHaveConfigurableNames() {
	if (!functionsHaveNames() || !gOPD$2) {
		return false;
	}
	var desc = gOPD$2(function () {}, 'name');
	return !!desc && !!desc.configurable;
};
var $bind = Function.prototype.bind;
functionsHaveNames.boundFunctionsHaveNames = function boundFunctionsHaveNames() {
	return functionsHaveNames() && typeof $bind === 'function' && function f() {}.bind().name !== '';
};
var functionsHaveNames_1 = functionsHaveNames;

var define$1 = defineDataProperty$1;
var hasDescriptors = hasPropertyDescriptors_1();
var functionsHaveConfigurableNames = functionsHaveNames_1.functionsHaveConfigurableNames();
var $TypeError$2 = type;
var setFunctionName$1 = function setFunctionName(fn, name) {
	if (typeof fn !== 'function') {
		throw new $TypeError$2('`fn` is not a function');
	}
	var loose = arguments.length > 2 && !!arguments[2];
	if (!loose || functionsHaveConfigurableNames) {
		if (hasDescriptors) {
			define$1( (fn), 'name', name, true, true);
		} else {
			define$1( (fn), 'name', name);
		}
	}
	return fn;
};

var setFunctionName = setFunctionName$1;
var $TypeError$1 = type;
var $Object = Object;
var implementation$2 = setFunctionName(function flags() {
	if (this == null || this !== $Object(this)) {
		throw new $TypeError$1('RegExp.prototype.flags getter called on non-object');
	}
	var result = '';
	if (this.hasIndices) {
		result += 'd';
	}
	if (this.global) {
		result += 'g';
	}
	if (this.ignoreCase) {
		result += 'i';
	}
	if (this.multiline) {
		result += 'm';
	}
	if (this.dotAll) {
		result += 's';
	}
	if (this.unicode) {
		result += 'u';
	}
	if (this.unicodeSets) {
		result += 'v';
	}
	if (this.sticky) {
		result += 'y';
	}
	return result;
}, 'get flags', true);

var implementation$1 = implementation$2;
var supportsDescriptors$1 = defineProperties_1.supportsDescriptors;
var $gOPD = Object.getOwnPropertyDescriptor;
var polyfill = function getPolyfill() {
	if (supportsDescriptors$1 && (/a/mig).flags === 'gim') {
		var descriptor = $gOPD(RegExp.prototype, 'flags');
		if (
			descriptor
			&& typeof descriptor.get === 'function'
			&& typeof RegExp.prototype.dotAll === 'boolean'
			&& typeof RegExp.prototype.hasIndices === 'boolean'
		) {
			var calls = '';
			var o = {};
			Object.defineProperty(o, 'hasIndices', {
				get: function () {
					calls += 'd';
				}
			});
			Object.defineProperty(o, 'sticky', {
				get: function () {
					calls += 'y';
				}
			});
			if (calls === 'dy') {
				return descriptor.get;
			}
		}
	}
	return implementation$1;
};

var supportsDescriptors = defineProperties_1.supportsDescriptors;
var getPolyfill$1 = polyfill;
var gOPD$1 = Object.getOwnPropertyDescriptor;
var defineProperty = Object.defineProperty;
var TypeErr = TypeError;
var getProto = Object.getPrototypeOf;
var regex = /a/;
var shim$1 = function shimFlags() {
	if (!supportsDescriptors || !getProto) {
		throw new TypeErr('RegExp.prototype.flags requires a true ES5 environment that supports property descriptors');
	}
	var polyfill = getPolyfill$1();
	var proto = getProto(regex);
	var descriptor = gOPD$1(proto, 'flags');
	if (!descriptor || descriptor.get !== polyfill) {
		defineProperty(proto, 'flags', {
			configurable: true,
			enumerable: false,
			get: polyfill
		});
	}
	return polyfill;
};

var define = defineProperties_1;
var callBind$1 = callBindExports;
var implementation = implementation$2;
var getPolyfill = polyfill;
var shim = shim$1;
var flagsBound = callBind$1(getPolyfill());
define(flagsBound, {
	getPolyfill: getPolyfill,
	implementation: implementation,
	shim: shim
});
var regexp_prototype_flags = flagsBound;

var $iterator = Symbol.iterator;
var node = function getIterator(iterable) {
	if (iterable != null && typeof iterable[$iterator] !== 'undefined') {
		return iterable[$iterator]();
	}
};

var util_inspect = util.inspect;

var hasMap = typeof Map === 'function' && Map.prototype;
var mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, 'size') : null;
var mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === 'function' ? mapSizeDescriptor.get : null;
var mapForEach = hasMap && Map.prototype.forEach;
var hasSet = typeof Set === 'function' && Set.prototype;
var setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, 'size') : null;
var setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === 'function' ? setSizeDescriptor.get : null;
var setForEach = hasSet && Set.prototype.forEach;
var hasWeakMap = typeof WeakMap === 'function' && WeakMap.prototype;
var weakMapHas = hasWeakMap ? WeakMap.prototype.has : null;
var hasWeakSet = typeof WeakSet === 'function' && WeakSet.prototype;
var weakSetHas = hasWeakSet ? WeakSet.prototype.has : null;
var hasWeakRef = typeof WeakRef === 'function' && WeakRef.prototype;
var weakRefDeref = hasWeakRef ? WeakRef.prototype.deref : null;
var booleanValueOf = Boolean.prototype.valueOf;
var objectToString = Object.prototype.toString;
var functionToString = Function.prototype.toString;
var $match = String.prototype.match;
var $slice = String.prototype.slice;
var $replace = String.prototype.replace;
var $toUpperCase = String.prototype.toUpperCase;
var $toLowerCase = String.prototype.toLowerCase;
var $test = RegExp.prototype.test;
var $concat = Array.prototype.concat;
var $join = Array.prototype.join;
var $arrSlice = Array.prototype.slice;
var $floor = Math.floor;
var bigIntValueOf$1 = typeof BigInt === 'function' ? BigInt.prototype.valueOf : null;
var gOPS = Object.getOwnPropertySymbols;
var symToString = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? Symbol.prototype.toString : null;
var hasShammedSymbols = typeof Symbol === 'function' && typeof Symbol.iterator === 'object';
var toStringTag = typeof Symbol === 'function' && Symbol.toStringTag && (typeof Symbol.toStringTag === hasShammedSymbols ? 'object' : 'symbol')
    ? Symbol.toStringTag
    : null;
var isEnumerable = Object.prototype.propertyIsEnumerable;
var gPO$1 = (typeof Reflect === 'function' ? Reflect.getPrototypeOf : Object.getPrototypeOf) || (
    [].__proto__ === Array.prototype
        ? function (O) {
            return O.__proto__;
        }
        : null
);
function addNumericSeparator(num, str) {
    if (
        num === Infinity
        || num === -Infinity
        || num !== num
        || (num && num > -1000 && num < 1000)
        || $test.call(/e/, str)
    ) {
        return str;
    }
    var sepRegex = /[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;
    if (typeof num === 'number') {
        var int = num < 0 ? -$floor(-num) : $floor(num);
        if (int !== num) {
            var intStr = String(int);
            var dec = $slice.call(str, intStr.length + 1);
            return $replace.call(intStr, sepRegex, '$&_') + '.' + $replace.call($replace.call(dec, /([0-9]{3})/g, '$&_'), /_$/, '');
        }
    }
    return $replace.call(str, sepRegex, '$&_');
}
var utilInspect = util_inspect;
var inspectCustom = utilInspect.custom;
var inspectSymbol = isSymbol$2(inspectCustom) ? inspectCustom : null;
var objectInspect = function inspect_(obj, options, depth, seen) {
    var opts = options || {};
    if (has$1(opts, 'quoteStyle') && (opts.quoteStyle !== 'single' && opts.quoteStyle !== 'double')) {
        throw new TypeError('option "quoteStyle" must be "single" or "double"');
    }
    if (
        has$1(opts, 'maxStringLength') && (typeof opts.maxStringLength === 'number'
            ? opts.maxStringLength < 0 && opts.maxStringLength !== Infinity
            : opts.maxStringLength !== null
        )
    ) {
        throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');
    }
    var customInspect = has$1(opts, 'customInspect') ? opts.customInspect : true;
    if (typeof customInspect !== 'boolean' && customInspect !== 'symbol') {
        throw new TypeError('option "customInspect", if provided, must be `true`, `false`, or `\'symbol\'`');
    }
    if (
        has$1(opts, 'indent')
        && opts.indent !== null
        && opts.indent !== '\t'
        && !(parseInt(opts.indent, 10) === opts.indent && opts.indent > 0)
    ) {
        throw new TypeError('option "indent" must be "\\t", an integer > 0, or `null`');
    }
    if (has$1(opts, 'numericSeparator') && typeof opts.numericSeparator !== 'boolean') {
        throw new TypeError('option "numericSeparator", if provided, must be `true` or `false`');
    }
    var numericSeparator = opts.numericSeparator;
    if (typeof obj === 'undefined') {
        return 'undefined';
    }
    if (obj === null) {
        return 'null';
    }
    if (typeof obj === 'boolean') {
        return obj ? 'true' : 'false';
    }
    if (typeof obj === 'string') {
        return inspectString(obj, opts);
    }
    if (typeof obj === 'number') {
        if (obj === 0) {
            return Infinity / obj > 0 ? '0' : '-0';
        }
        var str = String(obj);
        return numericSeparator ? addNumericSeparator(obj, str) : str;
    }
    if (typeof obj === 'bigint') {
        var bigIntStr = String(obj) + 'n';
        return numericSeparator ? addNumericSeparator(obj, bigIntStr) : bigIntStr;
    }
    var maxDepth = typeof opts.depth === 'undefined' ? 5 : opts.depth;
    if (typeof depth === 'undefined') { depth = 0; }
    if (depth >= maxDepth && maxDepth > 0 && typeof obj === 'object') {
        return isArray$1(obj) ? '[Array]' : '[Object]';
    }
    var indent = getIndent(opts, depth);
    if (typeof seen === 'undefined') {
        seen = [];
    } else if (indexOf(seen, obj) >= 0) {
        return '[Circular]';
    }
    function inspect(value, from, noIndent) {
        if (from) {
            seen = $arrSlice.call(seen);
            seen.push(from);
        }
        if (noIndent) {
            var newOpts = {
                depth: opts.depth
            };
            if (has$1(opts, 'quoteStyle')) {
                newOpts.quoteStyle = opts.quoteStyle;
            }
            return inspect_(value, newOpts, depth + 1, seen);
        }
        return inspect_(value, opts, depth + 1, seen);
    }
    if (typeof obj === 'function' && !isRegExp(obj)) {
        var name = nameOf(obj);
        var keys = arrObjKeys(obj, inspect);
        return '[Function' + (name ? ': ' + name : ' (anonymous)') + ']' + (keys.length > 0 ? ' { ' + $join.call(keys, ', ') + ' }' : '');
    }
    if (isSymbol$2(obj)) {
        var symString = hasShammedSymbols ? $replace.call(String(obj), /^(Symbol\(.*\))_[^)]*$/, '$1') : symToString.call(obj);
        return typeof obj === 'object' && !hasShammedSymbols ? markBoxed(symString) : symString;
    }
    if (isElement(obj)) {
        var s = '<' + $toLowerCase.call(String(obj.nodeName));
        var attrs = obj.attributes || [];
        for (var i = 0; i < attrs.length; i++) {
            s += ' ' + attrs[i].name + '=' + wrapQuotes(quote(attrs[i].value), 'double', opts);
        }
        s += '>';
        if (obj.childNodes && obj.childNodes.length) { s += '...'; }
        s += '</' + $toLowerCase.call(String(obj.nodeName)) + '>';
        return s;
    }
    if (isArray$1(obj)) {
        if (obj.length === 0) { return '[]'; }
        var xs = arrObjKeys(obj, inspect);
        if (indent && !singleLineValues(xs)) {
            return '[' + indentedJoin(xs, indent) + ']';
        }
        return '[ ' + $join.call(xs, ', ') + ' ]';
    }
    if (isError(obj)) {
        var parts = arrObjKeys(obj, inspect);
        if (!('cause' in Error.prototype) && 'cause' in obj && !isEnumerable.call(obj, 'cause')) {
            return '{ [' + String(obj) + '] ' + $join.call($concat.call('[cause]: ' + inspect(obj.cause), parts), ', ') + ' }';
        }
        if (parts.length === 0) { return '[' + String(obj) + ']'; }
        return '{ [' + String(obj) + '] ' + $join.call(parts, ', ') + ' }';
    }
    if (typeof obj === 'object' && customInspect) {
        if (inspectSymbol && typeof obj[inspectSymbol] === 'function' && utilInspect) {
            return utilInspect(obj, { depth: maxDepth - depth });
        } else if (customInspect !== 'symbol' && typeof obj.inspect === 'function') {
            return obj.inspect();
        }
    }
    if (isMap$2(obj)) {
        var mapParts = [];
        if (mapForEach) {
            mapForEach.call(obj, function (value, key) {
                mapParts.push(inspect(key, obj, true) + ' => ' + inspect(value, obj));
            });
        }
        return collectionOf('Map', mapSize.call(obj), mapParts, indent);
    }
    if (isSet$2(obj)) {
        var setParts = [];
        if (setForEach) {
            setForEach.call(obj, function (value) {
                setParts.push(inspect(value, obj));
            });
        }
        return collectionOf('Set', setSize.call(obj), setParts, indent);
    }
    if (isWeakMap$1(obj)) {
        return weakCollectionOf('WeakMap');
    }
    if (isWeakSet$1(obj)) {
        return weakCollectionOf('WeakSet');
    }
    if (isWeakRef(obj)) {
        return weakCollectionOf('WeakRef');
    }
    if (isNumber$1(obj)) {
        return markBoxed(inspect(Number(obj)));
    }
    if (isBigInt$1(obj)) {
        return markBoxed(inspect(bigIntValueOf$1.call(obj)));
    }
    if (isBoolean$1(obj)) {
        return markBoxed(booleanValueOf.call(obj));
    }
    if (isString$2(obj)) {
        return markBoxed(inspect(String(obj)));
    }
    if (typeof window !== 'undefined' && obj === window) {
        return '{ [object Window] }';
    }
    if (obj === commonjsGlobal$1) {
        return '{ [object globalThis] }';
    }
    if (!isDate$1(obj) && !isRegExp(obj)) {
        var ys = arrObjKeys(obj, inspect);
        var isPlainObject = gPO$1 ? gPO$1(obj) === Object.prototype : obj instanceof Object || obj.constructor === Object;
        var protoTag = obj instanceof Object ? '' : 'null prototype';
        var stringTag = !isPlainObject && toStringTag && Object(obj) === obj && toStringTag in obj ? $slice.call(toStr$4(obj), 8, -1) : protoTag ? 'Object' : '';
        var constructorTag = isPlainObject || typeof obj.constructor !== 'function' ? '' : obj.constructor.name ? obj.constructor.name + ' ' : '';
        var tag = constructorTag + (stringTag || protoTag ? '[' + $join.call($concat.call([], stringTag || [], protoTag || []), ': ') + '] ' : '');
        if (ys.length === 0) { return tag + '{}'; }
        if (indent) {
            return tag + '{' + indentedJoin(ys, indent) + '}';
        }
        return tag + '{ ' + $join.call(ys, ', ') + ' }';
    }
    return String(obj);
};
function wrapQuotes(s, defaultStyle, opts) {
    var quoteChar = (opts.quoteStyle || defaultStyle) === 'double' ? '"' : "'";
    return quoteChar + s + quoteChar;
}
function quote(s) {
    return $replace.call(String(s), /"/g, '&quot;');
}
function isArray$1(obj) { return toStr$4(obj) === '[object Array]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
function isDate$1(obj) { return toStr$4(obj) === '[object Date]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
function isRegExp(obj) { return toStr$4(obj) === '[object RegExp]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
function isError(obj) { return toStr$4(obj) === '[object Error]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
function isString$2(obj) { return toStr$4(obj) === '[object String]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
function isNumber$1(obj) { return toStr$4(obj) === '[object Number]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
function isBoolean$1(obj) { return toStr$4(obj) === '[object Boolean]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
function isSymbol$2(obj) {
    if (hasShammedSymbols) {
        return obj && typeof obj === 'object' && obj instanceof Symbol;
    }
    if (typeof obj === 'symbol') {
        return true;
    }
    if (!obj || typeof obj !== 'object' || !symToString) {
        return false;
    }
    try {
        symToString.call(obj);
        return true;
    } catch (e) {}
    return false;
}
function isBigInt$1(obj) {
    if (!obj || typeof obj !== 'object' || !bigIntValueOf$1) {
        return false;
    }
    try {
        bigIntValueOf$1.call(obj);
        return true;
    } catch (e) {}
    return false;
}
var hasOwn = Object.prototype.hasOwnProperty || function (key) { return key in this; };
function has$1(obj, key) {
    return hasOwn.call(obj, key);
}
function toStr$4(obj) {
    return objectToString.call(obj);
}
function nameOf(f) {
    if (f.name) { return f.name; }
    var m = $match.call(functionToString.call(f), /^function\s*([\w$]+)/);
    if (m) { return m[1]; }
    return null;
}
function indexOf(xs, x) {
    if (xs.indexOf) { return xs.indexOf(x); }
    for (var i = 0, l = xs.length; i < l; i++) {
        if (xs[i] === x) { return i; }
    }
    return -1;
}
function isMap$2(x) {
    if (!mapSize || !x || typeof x !== 'object') {
        return false;
    }
    try {
        mapSize.call(x);
        try {
            setSize.call(x);
        } catch (s) {
            return true;
        }
        return x instanceof Map;
    } catch (e) {}
    return false;
}
function isWeakMap$1(x) {
    if (!weakMapHas || !x || typeof x !== 'object') {
        return false;
    }
    try {
        weakMapHas.call(x, weakMapHas);
        try {
            weakSetHas.call(x, weakSetHas);
        } catch (s) {
            return true;
        }
        return x instanceof WeakMap;
    } catch (e) {}
    return false;
}
function isWeakRef(x) {
    if (!weakRefDeref || !x || typeof x !== 'object') {
        return false;
    }
    try {
        weakRefDeref.call(x);
        return true;
    } catch (e) {}
    return false;
}
function isSet$2(x) {
    if (!setSize || !x || typeof x !== 'object') {
        return false;
    }
    try {
        setSize.call(x);
        try {
            mapSize.call(x);
        } catch (m) {
            return true;
        }
        return x instanceof Set;
    } catch (e) {}
    return false;
}
function isWeakSet$1(x) {
    if (!weakSetHas || !x || typeof x !== 'object') {
        return false;
    }
    try {
        weakSetHas.call(x, weakSetHas);
        try {
            weakMapHas.call(x, weakMapHas);
        } catch (s) {
            return true;
        }
        return x instanceof WeakSet;
    } catch (e) {}
    return false;
}
function isElement(x) {
    if (!x || typeof x !== 'object') { return false; }
    if (typeof HTMLElement !== 'undefined' && x instanceof HTMLElement) {
        return true;
    }
    return typeof x.nodeName === 'string' && typeof x.getAttribute === 'function';
}
function inspectString(str, opts) {
    if (str.length > opts.maxStringLength) {
        var remaining = str.length - opts.maxStringLength;
        var trailer = '... ' + remaining + ' more character' + (remaining > 1 ? 's' : '');
        return inspectString($slice.call(str, 0, opts.maxStringLength), opts) + trailer;
    }
    var s = $replace.call($replace.call(str, /(['\\])/g, '\\$1'), /[\x00-\x1f]/g, lowbyte);
    return wrapQuotes(s, 'single', opts);
}
function lowbyte(c) {
    var n = c.charCodeAt(0);
    var x = {
        8: 'b',
        9: 't',
        10: 'n',
        12: 'f',
        13: 'r'
    }[n];
    if (x) { return '\\' + x; }
    return '\\x' + (n < 0x10 ? '0' : '') + $toUpperCase.call(n.toString(16));
}
function markBoxed(str) {
    return 'Object(' + str + ')';
}
function weakCollectionOf(type) {
    return type + ' { ? }';
}
function collectionOf(type, size, entries, indent) {
    var joinedEntries = indent ? indentedJoin(entries, indent) : $join.call(entries, ', ');
    return type + ' (' + size + ') {' + joinedEntries + '}';
}
function singleLineValues(xs) {
    for (var i = 0; i < xs.length; i++) {
        if (indexOf(xs[i], '\n') >= 0) {
            return false;
        }
    }
    return true;
}
function getIndent(opts, depth) {
    var baseIndent;
    if (opts.indent === '\t') {
        baseIndent = '\t';
    } else if (typeof opts.indent === 'number' && opts.indent > 0) {
        baseIndent = $join.call(Array(opts.indent + 1), ' ');
    } else {
        return null;
    }
    return {
        base: baseIndent,
        prev: $join.call(Array(depth + 1), baseIndent)
    };
}
function indentedJoin(xs, indent) {
    if (xs.length === 0) { return ''; }
    var lineJoiner = '\n' + indent.prev + indent.base;
    return lineJoiner + $join.call(xs, ',' + lineJoiner) + '\n' + indent.prev;
}
function arrObjKeys(obj, inspect) {
    var isArr = isArray$1(obj);
    var xs = [];
    if (isArr) {
        xs.length = obj.length;
        for (var i = 0; i < obj.length; i++) {
            xs[i] = has$1(obj, i) ? inspect(obj[i], obj) : '';
        }
    }
    var syms = typeof gOPS === 'function' ? gOPS(obj) : [];
    var symMap;
    if (hasShammedSymbols) {
        symMap = {};
        for (var k = 0; k < syms.length; k++) {
            symMap['$' + syms[k]] = syms[k];
        }
    }
    for (var key in obj) {
        if (!has$1(obj, key)) { continue; }
        if (isArr && String(Number(key)) === key && key < obj.length) { continue; }
        if (hasShammedSymbols && symMap['$' + key] instanceof Symbol) {
            continue;
        } else if ($test.call(/[^\w$]/, key)) {
            xs.push(inspect(key, obj) + ': ' + inspect(obj[key], obj));
        } else {
            xs.push(key + ': ' + inspect(obj[key], obj));
        }
    }
    if (typeof gOPS === 'function') {
        for (var j = 0; j < syms.length; j++) {
            if (isEnumerable.call(obj, syms[j])) {
                xs.push('[' + inspect(syms[j]) + ']: ' + inspect(obj[syms[j]], obj));
            }
        }
    }
    return xs;
}

var GetIntrinsic$3 = getIntrinsic;
var callBound$7 = callBound$b;
var inspect = objectInspect;
var $TypeError = type;
var $WeakMap$1 = GetIntrinsic$3('%WeakMap%', true);
var $Map$2 = GetIntrinsic$3('%Map%', true);
var $weakMapGet = callBound$7('WeakMap.prototype.get', true);
var $weakMapSet = callBound$7('WeakMap.prototype.set', true);
var $weakMapHas = callBound$7('WeakMap.prototype.has', true);
var $mapGet$1 = callBound$7('Map.prototype.get', true);
var $mapSet = callBound$7('Map.prototype.set', true);
var $mapHas$5 = callBound$7('Map.prototype.has', true);
var listGetNode = function (list, key) {
	for (var prev = list, curr; (curr = prev.next) !== null; prev = curr) {
		if (curr.key === key) {
			prev.next = curr.next;
			curr.next = list.next;
			list.next = curr;
			return curr;
		}
	}
};
var listGet = function (objects, key) {
	var node = listGetNode(objects, key);
	return node && node.value;
};
var listSet = function (objects, key, value) {
	var node = listGetNode(objects, key);
	if (node) {
		node.value = value;
	} else {
		objects.next = {
			key: key,
			next: objects.next,
			value: value
		};
	}
};
var listHas = function (objects, key) {
	return !!listGetNode(objects, key);
};
var sideChannel = function getSideChannel() {
	var $wm;
	var $m;
	var $o;
	var channel = {
		assert: function (key) {
			if (!channel.has(key)) {
				throw new $TypeError('Side channel does not contain ' + inspect(key));
			}
		},
		get: function (key) {
			if ($WeakMap$1 && key && (typeof key === 'object' || typeof key === 'function')) {
				if ($wm) {
					return $weakMapGet($wm, key);
				}
			} else if ($Map$2) {
				if ($m) {
					return $mapGet$1($m, key);
				}
			} else {
				if ($o) {
					return listGet($o, key);
				}
			}
		},
		has: function (key) {
			if ($WeakMap$1 && key && (typeof key === 'object' || typeof key === 'function')) {
				if ($wm) {
					return $weakMapHas($wm, key);
				}
			} else if ($Map$2) {
				if ($m) {
					return $mapHas$5($m, key);
				}
			} else {
				if ($o) {
					return listHas($o, key);
				}
			}
			return false;
		},
		set: function (key, value) {
			if ($WeakMap$1 && key && (typeof key === 'object' || typeof key === 'function')) {
				if (!$wm) {
					$wm = new $WeakMap$1();
				}
				$weakMapSet($wm, key, value);
			} else if ($Map$2) {
				if (!$m) {
					$m = new $Map$2();
				}
				$mapSet($m, key, value);
			} else {
				if (!$o) {
					$o = { key: {}, next: null };
				}
				listSet($o, key, value);
			}
		}
	};
	return channel;
};

var toString = {}.toString;
var isarray = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

var callBind = callBindExports;
var callBound$6 = callBound$b;
var GetIntrinsic$2 = getIntrinsic;
var $ArrayBuffer = GetIntrinsic$2('%ArrayBuffer%', true);
var $byteLength$2 = callBound$6('ArrayBuffer.prototype.byteLength', true);
var $toString$2 = callBound$6('Object.prototype.toString');
var abSlice = !!$ArrayBuffer && !$byteLength$2 && new $ArrayBuffer(0).slice;
var $abSlice = !!abSlice && callBind(abSlice);
var isArrayBuffer$2 = $byteLength$2 || $abSlice
	? function isArrayBuffer(obj) {
		if (!obj || typeof obj !== 'object') {
			return false;
		}
		try {
			if ($byteLength$2) {
				$byteLength$2(obj);
			} else {
				$abSlice(obj, 0);
			}
			return true;
		} catch (e) {
			return false;
		}
	}
	: $ArrayBuffer
		? function isArrayBuffer(obj) {
			return $toString$2(obj) === '[object ArrayBuffer]';
		}
		: function isArrayBuffer(obj) {
			return false;
		};

var getDay = Date.prototype.getDay;
var tryDateObject = function tryDateGetDayCall(value) {
	try {
		getDay.call(value);
		return true;
	} catch (e) {
		return false;
	}
};
var toStr$3 = Object.prototype.toString;
var dateClass = '[object Date]';
var hasToStringTag$4 = shams();
var isDateObject = function isDateObject(value) {
	if (typeof value !== 'object' || value === null) {
		return false;
	}
	return hasToStringTag$4 ? tryDateObject(value) : toStr$3.call(value) === dateClass;
};

var callBound$5 = callBound$b;
var hasToStringTag$3 = shams();
var has;
var $exec;
var isRegexMarker;
var badStringifier;
if (hasToStringTag$3) {
	has = callBound$5('Object.prototype.hasOwnProperty');
	$exec = callBound$5('RegExp.prototype.exec');
	isRegexMarker = {};
	var throwRegexMarker = function () {
		throw isRegexMarker;
	};
	badStringifier = {
		toString: throwRegexMarker,
		valueOf: throwRegexMarker
	};
	if (typeof Symbol.toPrimitive === 'symbol') {
		badStringifier[Symbol.toPrimitive] = throwRegexMarker;
	}
}
var $toString$1 = callBound$5('Object.prototype.toString');
var gOPD = Object.getOwnPropertyDescriptor;
var regexClass = '[object RegExp]';
var isRegex$1 = hasToStringTag$3
	? function isRegex(value) {
		if (!value || typeof value !== 'object') {
			return false;
		}
		var descriptor = gOPD(value, 'lastIndex');
		var hasLastIndexDataProperty = descriptor && has(descriptor, 'value');
		if (!hasLastIndexDataProperty) {
			return false;
		}
		try {
			$exec(value, badStringifier);
		} catch (e) {
			return e === isRegexMarker;
		}
	}
	: function isRegex(value) {
		if (!value || (typeof value !== 'object' && typeof value !== 'function')) {
			return false;
		}
		return $toString$1(value) === regexClass;
	};

var callBound$4 = callBound$b;
var $byteLength$1 = callBound$4('SharedArrayBuffer.prototype.byteLength', true);
var isSharedArrayBuffer$1 = $byteLength$1
	? function isSharedArrayBuffer(obj) {
		if (!obj || typeof obj !== 'object') {
			return false;
		}
		try {
			$byteLength$1(obj);
			return true;
		} catch (e) {
			return false;
		}
	}
	: function isSharedArrayBuffer(obj) {
		return false;
	};

var strValue = String.prototype.valueOf;
var tryStringObject = function tryStringObject(value) {
	try {
		strValue.call(value);
		return true;
	} catch (e) {
		return false;
	}
};
var toStr$2 = Object.prototype.toString;
var strClass = '[object String]';
var hasToStringTag$2 = shams();
var isString$1 = function isString(value) {
	if (typeof value === 'string') {
		return true;
	}
	if (typeof value !== 'object') {
		return false;
	}
	return hasToStringTag$2 ? tryStringObject(value) : toStr$2.call(value) === strClass;
};

var numToStr = Number.prototype.toString;
var tryNumberObject = function tryNumberObject(value) {
	try {
		numToStr.call(value);
		return true;
	} catch (e) {
		return false;
	}
};
var toStr$1 = Object.prototype.toString;
var numClass = '[object Number]';
var hasToStringTag$1 = shams();
var isNumberObject = function isNumberObject(value) {
	if (typeof value === 'number') {
		return true;
	}
	if (typeof value !== 'object') {
		return false;
	}
	return hasToStringTag$1 ? tryNumberObject(value) : toStr$1.call(value) === numClass;
};

var callBound$3 = callBound$b;
var $boolToStr = callBound$3('Boolean.prototype.toString');
var $toString = callBound$3('Object.prototype.toString');
var tryBooleanObject = function booleanBrandCheck(value) {
	try {
		$boolToStr(value);
		return true;
	} catch (e) {
		return false;
	}
};
var boolClass = '[object Boolean]';
var hasToStringTag = shams();
var isBooleanObject = function isBoolean(value) {
	if (typeof value === 'boolean') {
		return true;
	}
	if (value === null || typeof value !== 'object') {
		return false;
	}
	return hasToStringTag && Symbol.toStringTag in value ? tryBooleanObject(value) : $toString(value) === boolClass;
};

var isSymbol$1 = {exports: {}};

var toStr = Object.prototype.toString;
var hasSymbols = hasSymbols$4();
if (hasSymbols) {
	var symToStr = Symbol.prototype.toString;
	var symStringRegex = /^Symbol\(.*\)$/;
	var isSymbolObject = function isRealSymbolObject(value) {
		if (typeof value.valueOf() !== 'symbol') {
			return false;
		}
		return symStringRegex.test(symToStr.call(value));
	};
	isSymbol$1.exports = function isSymbol(value) {
		if (typeof value === 'symbol') {
			return true;
		}
		if (toStr.call(value) !== '[object Symbol]') {
			return false;
		}
		try {
			return isSymbolObject(value);
		} catch (e) {
			return false;
		}
	};
} else {
	isSymbol$1.exports = function isSymbol(value) {
		return false ;
	};
}

var isSymbolExports = isSymbol$1.exports;

var isBigint = {exports: {}};

var $BigInt = typeof BigInt !== 'undefined' && BigInt;
var hasBigints = function hasNativeBigInts() {
	return typeof $BigInt === 'function'
		&& typeof BigInt === 'function'
		&& typeof $BigInt(42) === 'bigint'
		&& typeof BigInt(42) === 'bigint';
};

var hasBigInts = hasBigints();
if (hasBigInts) {
	var bigIntValueOf = BigInt.prototype.valueOf;
	var tryBigInt = function tryBigIntObject(value) {
		try {
			bigIntValueOf.call(value);
			return true;
		} catch (e) {
		}
		return false;
	};
	isBigint.exports = function isBigInt(value) {
		if (
			value === null
			|| typeof value === 'undefined'
			|| typeof value === 'boolean'
			|| typeof value === 'string'
			|| typeof value === 'number'
			|| typeof value === 'symbol'
			|| typeof value === 'function'
		) {
			return false;
		}
		if (typeof value === 'bigint') {
			return true;
		}
		return tryBigInt(value);
	};
} else {
	isBigint.exports = function isBigInt(value) {
		return false ;
	};
}

var isBigintExports = isBigint.exports;

var isString = isString$1;
var isNumber = isNumberObject;
var isBoolean = isBooleanObject;
var isSymbol = isSymbolExports;
var isBigInt = isBigintExports;
var whichBoxedPrimitive$1 = function whichBoxedPrimitive(value) {
	if (value == null || (typeof value !== 'object' && typeof value !== 'function')) {
		return null;
	}
	if (isString(value)) {
		return 'String';
	}
	if (isNumber(value)) {
		return 'Number';
	}
	if (isBoolean(value)) {
		return 'Boolean';
	}
	if (isSymbol(value)) {
		return 'Symbol';
	}
	if (isBigInt(value)) {
		return 'BigInt';
	}
};

var $Map$1 = typeof Map === 'function' && Map.prototype ? Map : null;
var $Set$2 = typeof Set === 'function' && Set.prototype ? Set : null;
var exported$2;
if (!$Map$1) {
	exported$2 = function isMap(x) {
		return false;
	};
}
var $mapHas$4 = $Map$1 ? Map.prototype.has : null;
var $setHas$4 = $Set$2 ? Set.prototype.has : null;
if (!exported$2 && !$mapHas$4) {
	exported$2 = function isMap(x) {
		return false;
	};
}
var isMap$1 = exported$2 || function isMap(x) {
	if (!x || typeof x !== 'object') {
		return false;
	}
	try {
		$mapHas$4.call(x);
		if ($setHas$4) {
			try {
				$setHas$4.call(x);
			} catch (e) {
				return true;
			}
		}
		return x instanceof $Map$1;
	} catch (e) {}
	return false;
};

var $Map = typeof Map === 'function' && Map.prototype ? Map : null;
var $Set$1 = typeof Set === 'function' && Set.prototype ? Set : null;
var exported$1;
if (!$Set$1) {
	exported$1 = function isSet(x) {
		return false;
	};
}
var $mapHas$3 = $Map ? Map.prototype.has : null;
var $setHas$3 = $Set$1 ? Set.prototype.has : null;
if (!exported$1 && !$setHas$3) {
	exported$1 = function isSet(x) {
		return false;
	};
}
var isSet$1 = exported$1 || function isSet(x) {
	if (!x || typeof x !== 'object') {
		return false;
	}
	try {
		$setHas$3.call(x);
		if ($mapHas$3) {
			try {
				$mapHas$3.call(x);
			} catch (e) {
				return true;
			}
		}
		return x instanceof $Set$1;
	} catch (e) {}
	return false;
};

var $WeakMap = typeof WeakMap === 'function' && WeakMap.prototype ? WeakMap : null;
var $WeakSet$1 = typeof WeakSet === 'function' && WeakSet.prototype ? WeakSet : null;
var exported;
if (!$WeakMap) {
	exported = function isWeakMap(x) {
		return false;
	};
}
var $mapHas$2 = $WeakMap ? $WeakMap.prototype.has : null;
var $setHas$2 = $WeakSet$1 ? $WeakSet$1.prototype.has : null;
if (!exported && !$mapHas$2) {
	exported = function isWeakMap(x) {
		return false;
	};
}
var isWeakmap = exported || function isWeakMap(x) {
	if (!x || typeof x !== 'object') {
		return false;
	}
	try {
		$mapHas$2.call(x, $mapHas$2);
		if ($setHas$2) {
			try {
				$setHas$2.call(x, $setHas$2);
			} catch (e) {
				return true;
			}
		}
		return x instanceof $WeakMap;
	} catch (e) {}
	return false;
};

var isWeakset = {exports: {}};

var GetIntrinsic$1 = getIntrinsic;
var callBound$2 = callBound$b;
var $WeakSet = GetIntrinsic$1('%WeakSet%', true);
var $setHas$1 = callBound$2('WeakSet.prototype.has', true);
if ($setHas$1) {
	var $mapHas$1 = callBound$2('WeakMap.prototype.has', true);
	isWeakset.exports = function isWeakSet(x) {
		if (!x || typeof x !== 'object') {
			return false;
		}
		try {
			$setHas$1(x, $setHas$1);
			if ($mapHas$1) {
				try {
					$mapHas$1(x, $mapHas$1);
				} catch (e) {
					return true;
				}
			}
			return x instanceof $WeakSet;
		} catch (e) {}
		return false;
	};
} else {
	isWeakset.exports = function isWeakSet(x) {
		return false;
	};
}

var isWeaksetExports = isWeakset.exports;

var isMap = isMap$1;
var isSet = isSet$1;
var isWeakMap = isWeakmap;
var isWeakSet = isWeaksetExports;
var whichCollection$1 = function whichCollection(value) {
	if (value && typeof value === 'object') {
		if (isMap(value)) {
			return 'Map';
		}
		if (isSet(value)) {
			return 'Set';
		}
		if (isWeakMap(value)) {
			return 'WeakMap';
		}
		if (isWeakSet(value)) {
			return 'WeakSet';
		}
	}
	return false;
};

var callBound$1 = callBound$b;
var $byteLength = callBound$1('ArrayBuffer.prototype.byteLength', true);
var isArrayBuffer$1 = isArrayBuffer$2;
var arrayBufferByteLength = function byteLength(ab) {
	if (!isArrayBuffer$1(ab)) {
		return NaN;
	}
	return $byteLength ? $byteLength(ab) : ab.byteLength;
};

var assign = object_assign;
var callBound = callBound$b;
var flags = regexp_prototype_flags;
var GetIntrinsic = getIntrinsic;
var getIterator = node;
var getSideChannel = sideChannel;
var is = objectIs;
var isArguments = isArguments$2;
var isArray = isarray;
var isArrayBuffer = isArrayBuffer$2;
var isDate = isDateObject;
var isRegex = isRegex$1;
var isSharedArrayBuffer = isSharedArrayBuffer$1;
var objectKeys = objectKeys$2;
var whichBoxedPrimitive = whichBoxedPrimitive$1;
var whichCollection = whichCollection$1;
var whichTypedArray = whichTypedArray$2;
var byteLength = arrayBufferByteLength;
var sabByteLength = callBound('SharedArrayBuffer.prototype.byteLength', true);
var $getTime = callBound('Date.prototype.getTime');
var gPO = Object.getPrototypeOf;
var $objToString = callBound('Object.prototype.toString');
var $Set = GetIntrinsic('%Set%', true);
var $mapHas = callBound('Map.prototype.has', true);
var $mapGet = callBound('Map.prototype.get', true);
var $mapSize = callBound('Map.prototype.size', true);
var $setAdd = callBound('Set.prototype.add', true);
var $setDelete = callBound('Set.prototype.delete', true);
var $setHas = callBound('Set.prototype.has', true);
var $setSize = callBound('Set.prototype.size', true);
function setHasEqualElement(set, val1, opts, channel) {
  var i = getIterator(set);
  var result;
  while ((result = i.next()) && !result.done) {
    if (internalDeepEqual(val1, result.value, opts, channel)) {
      $setDelete(set, result.value);
      return true;
    }
  }
  return false;
}
function findLooseMatchingPrimitives(prim) {
  if (typeof prim === 'undefined') {
    return null;
  }
  if (typeof prim === 'object') {
    return void 0;
  }
  if (typeof prim === 'symbol') {
    return false;
  }
  if (typeof prim === 'string' || typeof prim === 'number') {
    return +prim === +prim;
  }
  return true;
}
function mapMightHaveLoosePrim(a, b, prim, item, opts, channel) {
  var altValue = findLooseMatchingPrimitives(prim);
  if (altValue != null) {
    return altValue;
  }
  var curB = $mapGet(b, altValue);
  var looseOpts = assign({}, opts, { strict: false });
  if (
    (typeof curB === 'undefined' && !$mapHas(b, altValue))
    || !internalDeepEqual(item, curB, looseOpts, channel)
  ) {
    return false;
  }
  return !$mapHas(a, altValue) && internalDeepEqual(item, curB, looseOpts, channel);
}
function setMightHaveLoosePrim(a, b, prim) {
  var altValue = findLooseMatchingPrimitives(prim);
  if (altValue != null) {
    return altValue;
  }
  return $setHas(b, altValue) && !$setHas(a, altValue);
}
function mapHasEqualEntry(set, map, key1, item1, opts, channel) {
  var i = getIterator(set);
  var result;
  var key2;
  while ((result = i.next()) && !result.done) {
    key2 = result.value;
    if (
      internalDeepEqual(key1, key2, opts, channel)
      && internalDeepEqual(item1, $mapGet(map, key2), opts, channel)
    ) {
      $setDelete(set, key2);
      return true;
    }
  }
  return false;
}
function internalDeepEqual(actual, expected, options, channel) {
  var opts = options || {};
  if (opts.strict ? is(actual, expected) : actual === expected) {
    return true;
  }
  var actualBoxed = whichBoxedPrimitive(actual);
  var expectedBoxed = whichBoxedPrimitive(expected);
  if (actualBoxed !== expectedBoxed) {
    return false;
  }
  if (!actual || !expected || (typeof actual !== 'object' && typeof expected !== 'object')) {
    return opts.strict ? is(actual, expected) : actual == expected;
  }
  var hasActual = channel.has(actual);
  var hasExpected = channel.has(expected);
  var sentinel;
  if (hasActual && hasExpected) {
    if (channel.get(actual) === channel.get(expected)) {
      return true;
    }
  } else {
    sentinel = {};
  }
  if (!hasActual) { channel.set(actual, sentinel); }
  if (!hasExpected) { channel.set(expected, sentinel); }
  return objEquiv(actual, expected, opts, channel);
}
function isBuffer(x) {
  if (!x || typeof x !== 'object' || typeof x.length !== 'number') {
    return false;
  }
  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {
    return false;
  }
  if (x.length > 0 && typeof x[0] !== 'number') {
    return false;
  }
  return !!(x.constructor && x.constructor.isBuffer && x.constructor.isBuffer(x));
}
function setEquiv(a, b, opts, channel) {
  if ($setSize(a) !== $setSize(b)) {
    return false;
  }
  var iA = getIterator(a);
  var iB = getIterator(b);
  var resultA;
  var resultB;
  var set;
  while ((resultA = iA.next()) && !resultA.done) {
    if (resultA.value && typeof resultA.value === 'object') {
      if (!set) { set = new $Set(); }
      $setAdd(set, resultA.value);
    } else if (!$setHas(b, resultA.value)) {
      if (opts.strict) { return false; }
      if (!setMightHaveLoosePrim(a, b, resultA.value)) {
        return false;
      }
      if (!set) { set = new $Set(); }
      $setAdd(set, resultA.value);
    }
  }
  if (set) {
    while ((resultB = iB.next()) && !resultB.done) {
      if (resultB.value && typeof resultB.value === 'object') {
        if (!setHasEqualElement(set, resultB.value, opts.strict, channel)) {
          return false;
        }
      } else if (
        !opts.strict
        && !$setHas(a, resultB.value)
        && !setHasEqualElement(set, resultB.value, opts.strict, channel)
      ) {
        return false;
      }
    }
    return $setSize(set) === 0;
  }
  return true;
}
function mapEquiv(a, b, opts, channel) {
  if ($mapSize(a) !== $mapSize(b)) {
    return false;
  }
  var iA = getIterator(a);
  var iB = getIterator(b);
  var resultA;
  var resultB;
  var set;
  var key;
  var item1;
  var item2;
  while ((resultA = iA.next()) && !resultA.done) {
    key = resultA.value[0];
    item1 = resultA.value[1];
    if (key && typeof key === 'object') {
      if (!set) { set = new $Set(); }
      $setAdd(set, key);
    } else {
      item2 = $mapGet(b, key);
      if ((typeof item2 === 'undefined' && !$mapHas(b, key)) || !internalDeepEqual(item1, item2, opts, channel)) {
        if (opts.strict) {
          return false;
        }
        if (!mapMightHaveLoosePrim(a, b, key, item1, opts, channel)) {
          return false;
        }
        if (!set) { set = new $Set(); }
        $setAdd(set, key);
      }
    }
  }
  if (set) {
    while ((resultB = iB.next()) && !resultB.done) {
      key = resultB.value[0];
      item2 = resultB.value[1];
      if (key && typeof key === 'object') {
        if (!mapHasEqualEntry(set, a, key, item2, opts, channel)) {
          return false;
        }
      } else if (
        !opts.strict
        && (!a.has(key) || !internalDeepEqual($mapGet(a, key), item2, opts, channel))
        && !mapHasEqualEntry(set, a, key, item2, assign({}, opts, { strict: false }), channel)
      ) {
        return false;
      }
    }
    return $setSize(set) === 0;
  }
  return true;
}
function objEquiv(a, b, opts, channel) {
  var i, key;
  if (typeof a !== typeof b) { return false; }
  if (a == null || b == null) { return false; }
  if ($objToString(a) !== $objToString(b)) { return false; }
  if (isArguments(a) !== isArguments(b)) { return false; }
  var aIsArray = isArray(a);
  var bIsArray = isArray(b);
  if (aIsArray !== bIsArray) { return false; }
  var aIsError = a instanceof Error;
  var bIsError = b instanceof Error;
  if (aIsError !== bIsError) { return false; }
  if (aIsError || bIsError) {
    if (a.name !== b.name || a.message !== b.message) { return false; }
  }
  var aIsRegex = isRegex(a);
  var bIsRegex = isRegex(b);
  if (aIsRegex !== bIsRegex) { return false; }
  if ((aIsRegex || bIsRegex) && (a.source !== b.source || flags(a) !== flags(b))) {
    return false;
  }
  var aIsDate = isDate(a);
  var bIsDate = isDate(b);
  if (aIsDate !== bIsDate) { return false; }
  if (aIsDate || bIsDate) {
    if ($getTime(a) !== $getTime(b)) { return false; }
  }
  if (opts.strict && gPO && gPO(a) !== gPO(b)) { return false; }
  var aWhich = whichTypedArray(a);
  var bWhich = whichTypedArray(b);
  if (aWhich !== bWhich) {
    return false;
  }
  if (aWhich || bWhich) {
    if (a.length !== b.length) { return false; }
    for (i = 0; i < a.length; i++) {
      if (a[i] !== b[i]) { return false; }
    }
    return true;
  }
  var aIsBuffer = isBuffer(a);
  var bIsBuffer = isBuffer(b);
  if (aIsBuffer !== bIsBuffer) { return false; }
  if (aIsBuffer || bIsBuffer) {
    if (a.length !== b.length) { return false; }
    for (i = 0; i < a.length; i++) {
      if (a[i] !== b[i]) { return false; }
    }
    return true;
  }
  var aIsArrayBuffer = isArrayBuffer(a);
  var bIsArrayBuffer = isArrayBuffer(b);
  if (aIsArrayBuffer !== bIsArrayBuffer) { return false; }
  if (aIsArrayBuffer || bIsArrayBuffer) {
    if (byteLength(a) !== byteLength(b)) { return false; }
    return typeof Uint8Array === 'function' && internalDeepEqual(new Uint8Array(a), new Uint8Array(b), opts, channel);
  }
  var aIsSAB = isSharedArrayBuffer(a);
  var bIsSAB = isSharedArrayBuffer(b);
  if (aIsSAB !== bIsSAB) { return false; }
  if (aIsSAB || bIsSAB) {
    if (sabByteLength(a) !== sabByteLength(b)) { return false; }
    return typeof Uint8Array === 'function' && internalDeepEqual(new Uint8Array(a), new Uint8Array(b), opts, channel);
  }
  if (typeof a !== typeof b) { return false; }
  var ka = objectKeys(a);
  var kb = objectKeys(b);
  if (ka.length !== kb.length) { return false; }
  ka.sort();
  kb.sort();
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] != kb[i]) { return false; }
  }
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!internalDeepEqual(a[key], b[key], opts, channel)) { return false; }
  }
  var aCollection = whichCollection(a);
  var bCollection = whichCollection(b);
  if (aCollection !== bCollection) {
    return false;
  }
  if (aCollection === 'Set' || bCollection === 'Set') {
    return setEquiv(a, b, opts, channel);
  }
  if (aCollection === 'Map') {
    return mapEquiv(a, b, opts, channel);
  }
  return true;
}
var deepEqual = function deepEqual(a, b, opts) {
  return internalDeepEqual(a, b, opts, getSideChannel());
};

var $5OpyM$deepequal = /*@__PURE__*/getDefaultExportFromCjs$1(deepEqual);

var iconvLite = {exports: {}};

// iconv-lite is an optional dependency.
// This is a hack to make that work with Node native ESM by creating a CJS module
// that can be imported from ESM. This also works in bundlers which support try..catch
// blocks to mark optional dependencies.
try {
  iconvLite.exports = require('iconv-lite');
} catch (err) { }

var iconvLiteExports = iconvLite.exports;
var $5OpyM$iconvlitecjs = /*@__PURE__*/getDefaultExportFromCjs$1(iconvLiteExports);

var TINF_OK = 0;
var TINF_DATA_ERROR = -3;
function Tree() {
  this.table = new Uint16Array(16);
  this.trans = new Uint16Array(288);
}
function Data(source, dest) {
  this.source = source;
  this.sourceIndex = 0;
  this.tag = 0;
  this.bitcount = 0;
  this.dest = dest;
  this.destLen = 0;
  this.ltree = new Tree();
  this.dtree = new Tree();
}
var sltree = new Tree();
var sdtree = new Tree();
var length_bits = new Uint8Array(30);
var length_base = new Uint16Array(30);
var dist_bits = new Uint8Array(30);
var dist_base = new Uint16Array(30);
var clcidx = new Uint8Array([
  16, 17, 18, 0, 8, 7, 9, 6,
  10, 5, 11, 4, 12, 3, 13, 2,
  14, 1, 15
]);
var code_tree = new Tree();
var lengths = new Uint8Array(288 + 32);
function tinf_build_bits_base(bits, base, delta, first) {
  var i, sum;
  for (i = 0; i < delta; ++i) bits[i] = 0;
  for (i = 0; i < 30 - delta; ++i) bits[i + delta] = i / delta | 0;
  for (sum = first, i = 0; i < 30; ++i) {
    base[i] = sum;
    sum += 1 << bits[i];
  }
}
function tinf_build_fixed_trees(lt, dt) {
  var i;
  for (i = 0; i < 7; ++i) lt.table[i] = 0;
  lt.table[7] = 24;
  lt.table[8] = 152;
  lt.table[9] = 112;
  for (i = 0; i < 24; ++i) lt.trans[i] = 256 + i;
  for (i = 0; i < 144; ++i) lt.trans[24 + i] = i;
  for (i = 0; i < 8; ++i) lt.trans[24 + 144 + i] = 280 + i;
  for (i = 0; i < 112; ++i) lt.trans[24 + 144 + 8 + i] = 144 + i;
  for (i = 0; i < 5; ++i) dt.table[i] = 0;
  dt.table[5] = 32;
  for (i = 0; i < 32; ++i) dt.trans[i] = i;
}
var offs = new Uint16Array(16);
function tinf_build_tree(t, lengths, off, num) {
  var i, sum;
  for (i = 0; i < 16; ++i) t.table[i] = 0;
  for (i = 0; i < num; ++i) t.table[lengths[off + i]]++;
  t.table[0] = 0;
  for (sum = 0, i = 0; i < 16; ++i) {
    offs[i] = sum;
    sum += t.table[i];
  }
  for (i = 0; i < num; ++i) {
    if (lengths[off + i]) t.trans[offs[lengths[off + i]]++] = i;
  }
}
function tinf_getbit(d) {
  if (!d.bitcount--) {
    d.tag = d.source[d.sourceIndex++];
    d.bitcount = 7;
  }
  var bit = d.tag & 1;
  d.tag >>>= 1;
  return bit;
}
function tinf_read_bits(d, num, base) {
  if (!num)
    return base;
  while (d.bitcount < 24) {
    d.tag |= d.source[d.sourceIndex++] << d.bitcount;
    d.bitcount += 8;
  }
  var val = d.tag & (0xffff >>> (16 - num));
  d.tag >>>= num;
  d.bitcount -= num;
  return val + base;
}
function tinf_decode_symbol(d, t) {
  while (d.bitcount < 24) {
    d.tag |= d.source[d.sourceIndex++] << d.bitcount;
    d.bitcount += 8;
  }
  var sum = 0, cur = 0, len = 0;
  var tag = d.tag;
  do {
    cur = 2 * cur + (tag & 1);
    tag >>>= 1;
    ++len;
    sum += t.table[len];
    cur -= t.table[len];
  } while (cur >= 0);
  d.tag = tag;
  d.bitcount -= len;
  return t.trans[sum + cur];
}
function tinf_decode_trees(d, lt, dt) {
  var hlit, hdist, hclen;
  var i, num, length;
  hlit = tinf_read_bits(d, 5, 257);
  hdist = tinf_read_bits(d, 5, 1);
  hclen = tinf_read_bits(d, 4, 4);
  for (i = 0; i < 19; ++i) lengths[i] = 0;
  for (i = 0; i < hclen; ++i) {
    var clen = tinf_read_bits(d, 3, 0);
    lengths[clcidx[i]] = clen;
  }
  tinf_build_tree(code_tree, lengths, 0, 19);
  for (num = 0; num < hlit + hdist;) {
    var sym = tinf_decode_symbol(d, code_tree);
    switch (sym) {
      case 16:
        var prev = lengths[num - 1];
        for (length = tinf_read_bits(d, 2, 3); length; --length) {
          lengths[num++] = prev;
        }
        break;
      case 17:
        for (length = tinf_read_bits(d, 3, 3); length; --length) {
          lengths[num++] = 0;
        }
        break;
      case 18:
        for (length = tinf_read_bits(d, 7, 11); length; --length) {
          lengths[num++] = 0;
        }
        break;
      default:
        lengths[num++] = sym;
        break;
    }
  }
  tinf_build_tree(lt, lengths, 0, hlit);
  tinf_build_tree(dt, lengths, hlit, hdist);
}
function tinf_inflate_block_data(d, lt, dt) {
  while (1) {
    var sym = tinf_decode_symbol(d, lt);
    if (sym === 256) {
      return TINF_OK;
    }
    if (sym < 256) {
      d.dest[d.destLen++] = sym;
    } else {
      var length, dist, offs;
      var i;
      sym -= 257;
      length = tinf_read_bits(d, length_bits[sym], length_base[sym]);
      dist = tinf_decode_symbol(d, dt);
      offs = d.destLen - tinf_read_bits(d, dist_bits[dist], dist_base[dist]);
      for (i = offs; i < offs + length; ++i) {
        d.dest[d.destLen++] = d.dest[i];
      }
    }
  }
}
function tinf_inflate_uncompressed_block(d) {
  var length, invlength;
  var i;
  while (d.bitcount > 8) {
    d.sourceIndex--;
    d.bitcount -= 8;
  }
  length = d.source[d.sourceIndex + 1];
  length = 256 * length + d.source[d.sourceIndex];
  invlength = d.source[d.sourceIndex + 3];
  invlength = 256 * invlength + d.source[d.sourceIndex + 2];
  if (length !== (~invlength & 0x0000ffff))
    return TINF_DATA_ERROR;
  d.sourceIndex += 4;
  for (i = length; i; --i)
    d.dest[d.destLen++] = d.source[d.sourceIndex++];
  d.bitcount = 0;
  return TINF_OK;
}
function tinf_uncompress(source, dest) {
  var d = new Data(source, dest);
  var bfinal, btype, res;
  do {
    bfinal = tinf_getbit(d);
    btype = tinf_read_bits(d, 2, 0);
    switch (btype) {
      case 0:
        res = tinf_inflate_uncompressed_block(d);
        break;
      case 1:
        res = tinf_inflate_block_data(d, sltree, sdtree);
        break;
      case 2:
        tinf_decode_trees(d, d.ltree, d.dtree);
        res = tinf_inflate_block_data(d, d.ltree, d.dtree);
        break;
      default:
        res = TINF_DATA_ERROR;
    }
    if (res !== TINF_OK)
      throw new Error('Data error');
  } while (!bfinal);
  if (d.destLen < d.dest.length) {
    if (typeof d.dest.slice === 'function')
      return d.dest.slice(0, d.destLen);
    else
      return d.dest.subarray(0, d.destLen);
  }
  return d.dest;
}
tinf_build_fixed_trees(sltree, sdtree);
tinf_build_bits_base(length_bits, length_base, 4, 3);
tinf_build_bits_base(dist_bits, dist_base, 2, 1);
length_bits[28] = 0;
length_base[28] = 258;
var tinyInflate = tinf_uncompress;

var $5OpyM$tinyinflate = /*@__PURE__*/getDefaultExportFromCjs$1(tinyInflate);

const isBigEndian = (new Uint8Array(new Uint32Array([0x12345678]).buffer)[0] === 0x12);
const swap = (b, n, m) => {
  let i = b[n];
  b[n] = b[m];
  b[m] = i;
};
const swap32 = array => {
  const len = array.length;
  for (let i = 0; i < len; i += 4) {
    swap(array, i, i + 3);
    swap(array, i + 1, i + 2);
  }
};
const swap32LE$1 = array => {
  if (isBigEndian) {
    swap32(array);
  }
};
var swap_1 = {
  swap32LE: swap32LE$1
};

const inflate = tinyInflate;
const { swap32LE } = swap_1;
const SHIFT_1 = 6 + 5;
const SHIFT_2 = 5;
const SHIFT_1_2 = SHIFT_1 - SHIFT_2;
const OMITTED_BMP_INDEX_1_LENGTH = 0x10000 >> SHIFT_1;
const INDEX_2_BLOCK_LENGTH = 1 << SHIFT_1_2;
const INDEX_2_MASK = INDEX_2_BLOCK_LENGTH - 1;
const INDEX_SHIFT = 2;
const DATA_BLOCK_LENGTH = 1 << SHIFT_2;
const DATA_MASK = DATA_BLOCK_LENGTH - 1;
const LSCP_INDEX_2_OFFSET = 0x10000 >> SHIFT_2;
const LSCP_INDEX_2_LENGTH = 0x400 >> SHIFT_2;
const INDEX_2_BMP_LENGTH = LSCP_INDEX_2_OFFSET + LSCP_INDEX_2_LENGTH;
const UTF8_2B_INDEX_2_OFFSET = INDEX_2_BMP_LENGTH;
const UTF8_2B_INDEX_2_LENGTH = 0x800 >> 6;
const INDEX_1_OFFSET = UTF8_2B_INDEX_2_OFFSET + UTF8_2B_INDEX_2_LENGTH;
const DATA_GRANULARITY = 1 << INDEX_SHIFT;
class UnicodeTrie {
  constructor(data) {
    const isBuffer = (typeof data.readUInt32BE === 'function') && (typeof data.slice === 'function');
    if (isBuffer || data instanceof Uint8Array) {
      let uncompressedLength;
      if (isBuffer) {
        this.highStart = data.readUInt32LE(0);
        this.errorValue = data.readUInt32LE(4);
        uncompressedLength = data.readUInt32LE(8);
        data = data.slice(12);
      } else {
        const view = new DataView(data.buffer);
        this.highStart = view.getUint32(0, true);
        this.errorValue = view.getUint32(4, true);
        uncompressedLength = view.getUint32(8, true);
        data = data.subarray(12);
      }
      data = inflate(data, new Uint8Array(uncompressedLength));
      data = inflate(data, new Uint8Array(uncompressedLength));
      swap32LE(data);
      this.data = new Uint32Array(data.buffer);
    } else {
      ({ data: this.data, highStart: this.highStart, errorValue: this.errorValue } = data);
    }
  }
  get(codePoint) {
    let index;
    if ((codePoint < 0) || (codePoint > 0x10ffff)) {
      return this.errorValue;
    }
    if ((codePoint < 0xd800) || ((codePoint > 0xdbff) && (codePoint <= 0xffff))) {
      index = (this.data[codePoint >> SHIFT_2] << INDEX_SHIFT) + (codePoint & DATA_MASK);
      return this.data[index];
    }
    if (codePoint <= 0xffff) {
      index = (this.data[LSCP_INDEX_2_OFFSET + ((codePoint - 0xd800) >> SHIFT_2)] << INDEX_SHIFT) + (codePoint & DATA_MASK);
      return this.data[index];
    }
    if (codePoint < this.highStart) {
      index = this.data[(INDEX_1_OFFSET - OMITTED_BMP_INDEX_1_LENGTH) + (codePoint >> SHIFT_1)];
      index = this.data[index + ((codePoint >> SHIFT_2) & INDEX_2_MASK)];
      index = (index << INDEX_SHIFT) + (codePoint & DATA_MASK);
      return this.data[index];
    }
    return this.data[this.data.length - DATA_GRANULARITY];
  }
}
var unicodeTrie = UnicodeTrie;

var $hJqJp$unicodetrie = /*@__PURE__*/getDefaultExportFromCjs$1(unicodeTrie);

function $parcel$interopDefault$1(a) {
  return a && a.__esModule ? a.default : a;
}
var $f4087201da764553$exports = {};
$f4087201da764553$exports = JSON.parse('{"categories":["Cc","Zs","Po","Sc","Ps","Pe","Sm","Pd","Nd","Lu","Sk","Pc","Ll","So","Lo","Pi","Cf","No","Pf","Lt","Lm","Mn","Me","Mc","Nl","Zl","Zp","Cs","Co"],"combiningClasses":["Not_Reordered","Above","Above_Right","Below","Attached_Above_Right","Attached_Below","Overlay","Iota_Subscript","Double_Below","Double_Above","Below_Right","Above_Left","CCC10","CCC11","CCC12","CCC13","CCC14","CCC15","CCC16","CCC17","CCC18","CCC19","CCC20","CCC21","CCC22","CCC23","CCC24","CCC25","CCC30","CCC31","CCC32","CCC27","CCC28","CCC29","CCC33","CCC34","CCC35","CCC36","Nukta","Virama","CCC84","CCC91","CCC103","CCC107","CCC118","CCC122","CCC129","CCC130","CCC132","Attached_Above","Below_Left","Left","Kana_Voicing","CCC26","Right"],"scripts":["Common","Latin","Bopomofo","Inherited","Greek","Coptic","Cyrillic","Armenian","Hebrew","Arabic","Syriac","Thaana","Nko","Samaritan","Mandaic","Devanagari","Bengali","Gurmukhi","Gujarati","Oriya","Tamil","Telugu","Kannada","Malayalam","Sinhala","Thai","Lao","Tibetan","Myanmar","Georgian","Hangul","Ethiopic","Cherokee","Canadian_Aboriginal","Ogham","Runic","Tagalog","Hanunoo","Buhid","Tagbanwa","Khmer","Mongolian","Limbu","Tai_Le","New_Tai_Lue","Buginese","Tai_Tham","Balinese","Sundanese","Batak","Lepcha","Ol_Chiki","Braille","Glagolitic","Tifinagh","Han","Hiragana","Katakana","Yi","Lisu","Vai","Bamum","Syloti_Nagri","Phags_Pa","Saurashtra","Kayah_Li","Rejang","Javanese","Cham","Tai_Viet","Meetei_Mayek","null","Linear_B","Lycian","Carian","Old_Italic","Gothic","Old_Permic","Ugaritic","Old_Persian","Deseret","Shavian","Osmanya","Osage","Elbasan","Caucasian_Albanian","Linear_A","Cypriot","Imperial_Aramaic","Palmyrene","Nabataean","Hatran","Phoenician","Lydian","Meroitic_Hieroglyphs","Meroitic_Cursive","Kharoshthi","Old_South_Arabian","Old_North_Arabian","Manichaean","Avestan","Inscriptional_Parthian","Inscriptional_Pahlavi","Psalter_Pahlavi","Old_Turkic","Old_Hungarian","Hanifi_Rohingya","Old_Sogdian","Sogdian","Elymaic","Brahmi","Kaithi","Sora_Sompeng","Chakma","Mahajani","Sharada","Khojki","Multani","Khudawadi","Grantha","Newa","Tirhuta","Siddham","Modi","Takri","Ahom","Dogra","Warang_Citi","Nandinagari","Zanabazar_Square","Soyombo","Pau_Cin_Hau","Bhaiksuki","Marchen","Masaram_Gondi","Gunjala_Gondi","Makasar","Cuneiform","Egyptian_Hieroglyphs","Anatolian_Hieroglyphs","Mro","Bassa_Vah","Pahawh_Hmong","Medefaidrin","Miao","Tangut","Nushu","Duployan","SignWriting","Nyiakeng_Puachue_Hmong","Wancho","Mende_Kikakui","Adlam"],"eaw":["N","Na","A","W","H","F"]}');
const $747425b437e121da$var$trie = new ($hJqJp$unicodetrie)((base64Js).toByteArray("AAARAAAAAADwfAEAZXl5ONRt+/5bPVFZimRfKoTQJNm37CGE7Iw0j3UsTWKsoyI7kwyyTiEUzSD7NiEzhWYijH0wMVkHE4Mx49fzfo+3nuP4/fdZjvv+XNd5n/d9nef1WZvmKhTxiZndzDQBSEYQqxqKwnsKvGQucFh+6t6cJ792ePQBZv5S9yXSwkyjf/P4T7mTNnIAv1dOVhMlR9lflbUL9JeJguqsjvG9NTj/wLb566VAURnLo2vvRi89S3gW/33ihh2eXpDn40BIW7REl/7coRKIhAFlAiOtbLDTt6mMb4GzMF1gNnvX/sBxtbsAIjfztCNcQjcNDtLThRvuXu5M5g/CBjaLBE4lJm4qy/oZD97+IJryApcXfgWYlkvWbhfXgujOJKVu8B+ozqTLbxyJ5kNiR75CxDqfBM9eOlDMmGeoZ0iQbbS5VUplIwI+ZNXEKQVJxlwqjhOY7w3XwPesbLK5JZE+Tt4X8q8km0dzInsPPzbscrjBMVjF5mOHSeRdJVgKUjLTHiHqXSPkep8N/zFk8167KLp75f6RndkvzdfB6Uz3MmqvRArzdCbs1/iRZjYPLLF3U8Qs+H+Rb8iK51a6NIV2V9+07uJsTGFWpPz8J++7iRu2B6eAKlK/kujrLthwaD/7a6J5w90TusnH1JMAc+gNrql4aspOUG/RrsxUKmPzhHgP4Bleru+6Vfc/MBjgXVx7who94nPn7MPFrnwQP7g0k0Dq0h2GSKO6fTZ8nLodN1SiOUj/5EL/Xo1DBvRm0wmrh3x6phcJ20/9CuMr5h8WPqXMSasLoLHoufTmE7mzYrs6B0dY7KjuCogKqsvxnxAwXWvd9Puc9PnE8DOHT2INHxRlIyVHrqZahtfV2E/A2PDdtA3ewlRHMtFIBKO/T4IozWTQZ+mb+gdKuk/ZHrqloucKdsOSJmlWTSntWjcxVMjUmroXLM10I6TwDLnBq4LP69TxgVeyGsd8yHvhF8ydPlrNRSNs9EP7WmeuSE7Lu10JbOuQcJw/63sDp68wB9iwP5AO+mBpV0R5VDDeyQUFCel1G+4KHBgEVFS0YK+m2sXLWLuGTlkVAd97WwKKdacjWElRCuDRauf33l/yVcDF6sVPKeTes99FC1NpNWcpieGSV/IbO8PCTy5pbUR1U8lxzf4T+y6fZMxOz3LshkQLeeDSd0WmUrQgajmbktrxsb2AZ0ACw2Vgni+gV/m+KvCRWLg08Clx7uhql+v9XySGcjjOHlsp8vBw/e8HS7dtiqF6T/XcSXuaMW66GF1g4q9YyBadHqy3Y5jin1c7yZos6BBr6dsomSHxiUHanYtcYQwnMMZhRhOnaYJeyJzaRuukyCUh48+e/BUvk/aEfDp8ag+jD64BHxNnQ5v/E7WRk7eLjGV13I3oqy45YNONi/1op1oDr7rPjkhPsTXgUpQtGDPlIs55KhQaic9kSGs/UrZ2QKQOflB8MTEQxRF9pullToWO7Eplan6mcMRFnUu2441yxi23x+KqKlr7RWWsi9ZXMWlr8vfP3llk1m2PRj0yudccxBuoa7VfIgRmnFPGX6Pm1WIfMm/Rm4n/xTn8IGqA0GWuqgu48pEUO0U9nN+ZdIvFpPb7VDPphIfRZxznlHeVFebkd9l+raXy9BpTMcIUIvBfgHEb6ndGo8VUkxpief14KjzFOcaANfgvFpvyY8lE8lE4raHizLpluPzMks1hx/e1Hok5yV0p7qQH7GaYeMzzZTFvRpv6k6iaJ4yNqzBvN8J7B430h2wFm1IBPcqbou33G7/NWPgopl4Mllla6e24L3TOTVNkza2zv3QKuDWTeDpClCEYgTQ+5vEBSQZs/rMF50+sm4jofTgWLqgX1x3TkrDEVaRqfY/xZizFZ3Y8/DFEFD31VSfBQ5raEB6nHnZh6ddehtclQJ8fBrldyIh99LNnV32HzKEej04hk6SYjdauCa4aYW0ru/QxvQRGzLKOAQszf3ixJypTW3WWL6BLSF2EMCMIw7OUvWBC6A/gDc2D1jvBapMCc7ztx6jYczwTKsRLL6dMNXb83HS8kdD0pTMMj161zbVHkU0mhSHo9SlBDDXdN6hDvRGizmohtIyR3ot8tF5iUG4GLNcXeGvBudSFrHu+bVZb9jirNVG+rQPI51A7Hu8/b0UeaIaZ4UgDO68PkYx3PE2HWpKapJ764Kxt5TFYpywMy4DLQqVRy11I7SOLhxUFmqiEK52NaijWArIfCg6qG8q5eSiwRCJb1R7GDJG74TrYgx/lVq7w9++Kh929xSJEaoSse5fUOQg9nMAnIZv+7fwVRcNv3gOHI46Vb5jYUC66PYHO6lS+TOmvEQjuYmx4RkffYGxqZIp/DPWNHAixbRBc+XKE3JEOgs4jIwu/dSAwhydruOGF39co91aTs85JJ3Z/LpXoF43hUwJsb/M1Chzdn8HX8vLXnqWUKvRhNLpfAF4PTFqva1sBQG0J+59HyYfmQ3oa4/sxZdapVLlo/fooxSXi/dOEQWIWq8E0FkttEyTFXR2aNMPINMIzZwCNEheYTVltsdaLkMyKoEUluPNAYCM2IG3br0DLy0fVNWKHtbSKbBjfiw7Lu06gQFalC7RC9BwRMSpLYDUo9pDtDfzwUiPJKLJ2LGcSphWBadOI/iJjNqUHV7ucG8yC6+iNM9QYElqBR7ECFXrcTgWQ3eG/tCWacT9bxIkfmxPmi3vOd36KxihAJA73vWNJ+Y9oapXNscVSVqS5g15xOWND/WuUCcA9YAAg6WFbjHamrblZ5c0L6Zx1X58ZittGcfDKU697QRSqW/g+RofNRyvrWMrBn44cPvkRe2HdTu/Cq01C5/riWPHZyXPKHuSDDdW8c1XPgd6ogvLh20qEIu8c19sqr4ufyHrwh37ZN5MkvY1dsGmEz9pUBTxWrvvhNyODyX2Q1k/fbX/T/vbHNcBrmjgDtvBdtZrVtiIg5iXQuzO/DEMvRX8Mi1zymSlt92BGILeKItjoShJXE/H7xwnf0Iewb8BFieJ9MflEBCQYEDm8eZniiEPfGoaYiiEdhQxHQNr2AuRdmbL9mcl18Kumh+HEZLp6z+j35ML9zTbUwahUZCyQQOgQrGfdfQtaR/OYJ/9dYXb2TWZFMijfCA8Nov4sa5FFDUe1T68h4q08WDE7JbbDiej4utRMR9ontevxlXv6LuJTXt1YEv8bDzEt683PuSsIN0afvu0rcBu9AbXZbkOG3K3AhtqQ28N23lXm7S3Yn6KXmAhBhz+GeorJJ4XxO/b3vZk2LXp42+QvsVxGSNVpfSctIFMTR1bD9t70i6sfNF3WKz/uKDEDCpzzztwhL45lsw89H2IpWN10sXHRlhDse9KCdpP5qNNpU84cTY+aiqswqR8XZ9ea0KbVRwRuOGQU3csAtV2fSbnq47U6es6rKlWLWhg3s/B9C9g+oTyp6RtIldR51OOkP5/6nSy6itUVPcMNOp4M/hDdKOz3uK6srbdxOrc2cJgr1Sg02oBxxSky6V7JaG+ziNwlfqnjnvh2/uq1lKfbp+qpwq/D/5OI5gkFl5CejKGxfc2YVJfGqc4E0x5e9PHK2ukbHNI7/RZV6LNe65apbTGjoCaQls0txPPbmQbCQn+/upCoXRZy9yzorWJvZ0KWcbXlBxU/d5I4ERUTxMuVWhSMmF677LNN7NnLwsmKawXkCgbrpcluOl0WChR1qhtSrxGXHu251dEItYhYX3snvn1gS2uXuzdTxCJjZtjsip0iT2sDC0qMS7Bk9su2NyXjFK5/f5ZoWwofg3DtTyjaFqspnOOTSh8xK/CKUFS57guVEkw9xoQuRCwwEO9Lu9z2vYxSa9NFV8DvSxv2C4WYLYF8Nrc4DzWkzNsk81JJOlZ/LYJrGCoj4MmZpnf3AXmzxT4rtl9jsqljEyedz468SGKdBiQzyz/qWKEhFg45ZczlZZ3KGL3l6sn+3TTa3zMVMhPa1obGp/z+fvY0QXTrJTf1XAT3EtQdUfYYlmWZyvPZ/6rWwU7UOQei7pVE0osgN94Iy+T1+omE6z4Rh2O20FjgBeK2y1mcoFiMDOJvuZPn5Moy9fmFH3wyfKvn4+TwfLvt/lHTTVnvrtoUWRBiQXhiNM8nE6ZoWeux/Z0b2unRcdUzdDpmL7CAgd1ToRXwgmHTZOgiGtVT+xr1QH9ObebRTT4NzL+XSpLuuWp62GqQvJVTPoZOeJCb6gIwd9XHMftQ+Kc08IKKdKQANSJ1a2gve3JdRhO0+tNiYzWAZfd7isoeBu67W7xuK8WX7nhJURld98Inb0t/dWOSau/kDvV4DJo/cImw9AO2Gvq0F2n0M7yIZKL8amMbjYld+qFls7hq8Acvq97K2PrCaomuUiesu7qNanGupEl6J/iem8lyr/NMnsTr6o41PO0yhQh3hPFN0wJP7S830je9iTBLzUNgYH+gUZpROo3rN2qgCI+6GewpX8w8CH+ro6QrWiStqmcMzVa3vEel+3/dDxMp0rDv1Q6wTMS3K64zTT6RWzK1y643im25Ja7X2ePCV2mTswd/4jshZPo4bLnerqIosq/hy2bKUAmVn9n4oun1+a0DIZ56UhVwmZHdUNpLa8gmPvxS1eNvCF1T0wo1wKPdCJi0qOrWz7oYRTzgTtkzEzZn308XSLwUog4OWGKJzCn/3FfF9iA32dZHSv30pRCM3KBY9WZoRhtdK/ChHk6DEQBsfV6tN2o1Cn0mLtPBfnkS+qy1L2xfFe9TQPtDE1Be44RTl82E9hPT2rS2+93LFbzhQQO3C/hD2jRFH3BWWbasAfuMhRJFcTri73eE835y016s22DjoFJ862WvLj69fu2TgSF3RHia9D5DSitlQAXYCnbdqjPkR287Lh6dCHDapos+eFDvcZPP2edPmTFxznJE/EBLoQQ0Qmn9EkZOyJmHxMbvKYb8o21ZHmv5YLqgsEPk9gWZwYQY9wLqGXuax/8QlV5qDaPbq9pLPT1yp+zOWKmraEy1OUJI7zdEcEmvBpbdwLrDCgEb2xX8S/nxZgjK4bRi+pbOmbh8bEeoPvU/L9ndx9kntlDALbdAvp0O8ZC3zSUnFg4cePsw7jxewWvL7HRSBLUn6J7vTH9uld5N76JFPgBCdXGF221oEJk++XfRwXplLSyrVO7HFWBEs99nTazKveW3HpbD4dH/YmdAl+lwbSt8BQWyTG7jAsACI7bPPUU9hI9XUHWqQOuezHzUjnx5Qqs6T1qNHfTTHleDtmqK7flA9a0gz2nycIpz1FHBuWxKNtUeTdqP29Fb3tv+tl5JyBqXoR+vCsdzZwZUhf6Lu8bvkB9yQP4x7GGegB0ym0Lpl03Q7e+C0cDsm9GSDepCDji7nUslLyYyluPfvLyKaDSX4xpR+nVYQjQQn5F8KbY1gbIVLiK1J3mW90zTyR1bqApX2BlWh7KG8LAY9/S9nWC0XXh9pZZo6xuir12T43rkaGfQssbQyIslA7uJnSHOV22NhlNtUo0czxPAsXhh8tIQYaTM4l/yAlZlydTcXhlG22Gs/n3BxKBd/3ZjYwg3NaUurVXhNB+afVnFfNr9TbC9ksNdvwpNfeHanyJ8M6GrIVfLlYAPv0ILe4dn0Z+BJSbJkN7eZY/c6+6ttDYcIDeUKIDXqUSE42Xdh5nRbuaObozjht0HJ5H1e+em+NJi/+8kQlyjCbJpPckwThZeIF9/u7lrVIKNeJLCN/TpPAeXxvd31/CUDWHK9MuP1V1TJgngzi4V0qzS3SW3Qy5UiGHqg02wQa5tsEl9s/X9nNMosgLlUgZSfCBj1DiypLfhr9/r0nR0XY2tmhDOcUS4E7cqa4EJBhzqvpbZa35Q5Iz5EqmhYiOGDAYk606Tv74+KGfPjKVuP15rIzgW0I7/niOu9el/sn2bRye0gV+GrePDRDMHjwO1lEdeXH8N+UTO3IoN18kpI3tPxz+fY+n2MGMSGFHAx/83tKeJOl+2i+f1O9v6FfEDBbqrw+lpM8Anav7zHNr7hE78nXUtPNodMbCnITWA7Ma/IHlZ50F9hWge/wzOvSbtqFVFtkS8Of2nssjZwbSFdU+VO8z6tCEc9UA9ACxT5zIUeSrkBB/v1krOpm7bVMrGxEKfI6LcnpB4D8bvn2hDKGqKrJaVAJuDaBEY3F7eXyqnFWlOoFV/8ZLspZiZd7orXLhd4mhHQgbuKbHjJWUzrnm0Dxw/LJLzXCkh7slMxKo8uxZIWZfdKHlfI7uj3LP6ARAuWdF7ZmZ7daOKqKGbz5LxOggTgS39oEioYmrqkCeUDvbxkBYKeHhcLmMN8dMF01ZMb32IpL/cH8R7VHQSI5I0YfL14g9d7P/6cjB1JXXxbozEDbsrPdmL8ph7QW10jio+v7YsqHKQ6xrBbOVtxU0/nFfzUGZwIBLwyUvg49ii+54nv9FyECBpURnQK4Ox6N7lw5fsjdd5l/2SwBcAHMJoyjO1Pifye2dagaOwCVMqdJWAo77pvBe0zdJcTWu5fdzPNfV2p1pc7/JKQ8zhKkwsOELUDhXygPJ5oR8Vpk2lsCen3D3QOQp2zdrSZHjVBstDF/wWO98rrkQ6/7zt/Drip7OHIug1lomNdmRaHRrjmqeodn22sesQQPgzimPOMqC60a5+i/UYh51uZm+ijWkkaI2xjrBO2558DZNZMiuDQlaVAvBy2wLn/bR3FrNzfnO/9oDztYqxZrr7JMIhqmrochbqmQnKowxW29bpqTaJu7kW1VotC72QkYX8OoDDdMDwV1kJRk3mufgJBzf+iwFRJ7XWQwO5ujVglgFgHtycWiMLx5N+6XU+TulLabWjOzoao03fniUW0xvIJNPbk7CQlFZd/RCOPvgQbLjh5ITE8NVJeKt3HGr6JTnFdIzcVOlEtwqbIIX0IM7saC+4N5047MTJ9+Wn11EhyEPIlwsHE5utCeXRjQzlrR+R1Cf/qDzcNbqLXdk3J7gQ39VUrrEkS/VMWjjg+t2oYrqB0tUZClcUF6+LBC3EQ7KnGIwm/qjZX4GKPtjTX1zQKV6nPAb2t/Rza5IqKRf8i2DFEhV/YSifX0YwsiF6TQnp48Gr65TFq0zUe6LGjiY7fq0LSGKL1VnC6ESI2yxvt3XqBx53B3gSlGFeJcPbUbonW1E9E9m4NfuwPh+t5QjRxX34lvBPVxwQd7aeTd+r9dw5CiP1pt8wMZoMdni7GapYdo6KPgeQKcmlFfq4UYhvV0IBgeiR3RnTMBaqDqpZrTRyLdsp4l0IXZTdErfH0sN3dqBG5vRIx3VgCYcHmmkqJ8Hyu3s9K9uBD1d8cZUEx3qYcF5vsqeRpF1GOg8emeWM2OmBlWPdZ6qAXwm3nENFyh+kvXk132PfWAlN0kb7yh4fz2T7VWUY/hEXX5DvxGABC03XRpyOG8t/u3Gh5tZdpsSV9AWaxJN7zwhVglgII1gV28tUViyqn4UMdIh5t+Ea2zo7PO48oba0TwQbiSZOH4YhD578kPF3reuaP7LujPMsjHmaDuId9XEaZBCJhbXJbRg5VCk3KJpryH/+8S3wdhR47pdFcmpZG2p0Bpjp/VbvalgIZMllYX5L31aMPdt1J7r/7wbixt0Mnz2ZvNGTARHPVD+2O1D8SGpWXlVnP2ekgon55YiinADDynyaXtZDXueVqbuTi8z8cHHK325pgqM+mWZwzHeEreMvhZopAScXM14SJHpGwZyRljMlDvcMm9FZ/1e9+r/puOnpXOtc9Iu2fmgBfEP9cGW1Fzb1rGlfJ08pACtq1ZW18bf2cevebzVeHbaA50G9qoUp39JWdPHbYkPCRXjt4gzlq3Cxge28Mky8MoS/+On72kc+ZI2xBtgJytpAQHQ1zrEddMIVyR5urX6yBNu8v5lKC8eLdGKTJtbgIZ3ZyTzSfWmx9f+cvcJe8yM39K/djkp2aUTE/9m2Lj5jg7b8vdRAer7DO3SyLNHs1CAm5x5iAdh2yGJYivArZbCBNY88Tw+w+C1Tbt7wK3zl2rzTHo/D8/gb3c3mYrnEIEipYqPUcdWjnTsSw471O3EUN7Gtg4NOAs9PJrxm03VuZKa5xwXAYCjt7Gs01Km6T2DhOYUMoFcCSu7Hk1p3yP1eG+M3v3Q5luAze6WwBnZIYO0TCucPWK+UJ36KoJ8Y+vpavhLO8g5ed704IjlQdfemrMu//EvPYXTQSGIPPfiagJS9nMqP5IvkxN9pvuJz7h8carPXTKMq8jnTeL0STan6dnLTAqwIswcIwWDR2KwbGddAVN8SYWRB7kfBfBRkSXzvHlIF8D6jo64kUzYk5o/n8oLjKqat0rdXvQ86MkwQGMnnlcasqPPT2+mVtUGb32KuH6cyZQenrRG11TArcAl27+nvOMBDe++EKHf4YdyGf7mznzOz33cFFGEcv329p4qG2hoaQ8ULiMyVz6ENcxhoqGnFIdupcn7GICQWuw3yO3W8S33mzCcMYJ8ywc7U7rmaQf/W5K63Gr4bVTpXOyOp4tbaPyIaatBNpXqlmQUTSZXjxPr19+73PSaT+QnI35YsWn6WpfJjRtK8vlJZoTSgjaRU39AGCkWOZtifJrnefCrqwTKDFmuWUCukEsYcRrMzCoit28wYpP7kSVjMD8WJYQiNc2blMjuqYegmf6SsfC1jqz8XzghMlOX+gn/MKZmgljszrmehEa4V98VreJDxYvHr3j7IeJB9/sBZV41BWT/AZAjuC5XorlIPnZgBAniBEhanp0/0+qZmEWDpu8ige1hUPIyTo6T6gDEcFhWSoduNh8YSu65KgMOGBw7VlNYzNIgwHtq9KP2yyTVysqX5v12sf7D+vQUdR2dRDvCV40rIInXSLWT/yrC6ExOQxBJwIDbeZcl3z1yR5Rj3l8IGpxspapnvBL+fwupA3b6fkFceID9wgiM1ILB0cHVdvo/R4xg8yqKXT8efl0GnGX1/27FUYeUW2L/GNRGGWVGp3i91oaJkb4rybENHre9a2P5viz/yqk8ngWUUS+Kv+fu+9BLFnfLiLXOFcIeBJLhnayCiuDRSqcx0Qu68gVsGYc6EHD500Fkt+gpDj6gvr884n8wZ5o6q7xtL5wA0beXQnffWYkZrs2NGIRgQbsc5NB302SVx+R4ROvmgZaR8wBcji128BMfJ9kcvJ4DC+bQ57kRmv5yxgU4ngZfn0/JNZ8JBwxjTqS+s9kjJFG1unGUGLwMiIuXUD9EFhNIJuyCEAmVZSIGKH4G6v1gRR1LyzQKH2ZqiI1DnHMoDEZspbDjTeaFIAbSvjSq3A+n46y9hhVM8wIpnARSXyzmOD96d9UXvFroSPgGw1dq2vdEqDq9fJN1EbL2WulNmHkFDvxSO9ZT/RX/Bw2gA/BrF90XrJACereVfbV/YXaKfp77Nmx5NjEIUlxojsy7iN7nBHSZigfsbFyVOX1ZTeCCxvqnRSExP4lk5ZeYlRu9caaa743TWNdchRIhEWwadsBIe245C8clpaZ4zrPsk+OwXzxWCvRRumyNSLW5KWaSJyJU95cwheK76gr7228spZ3hmTtLyrfM2QRFqZFMR8/Q6yWfVgwTdfX2Ry4w3+eAO/5VT5nFb5NlzXPvBEAWrNZ6Q3jbH0RF4vcbp+fDngf/ywpoyNQtjrfvcq93AVb1RDWRghvyqgI2BkMr1rwYi8gizZ0G9GmPpMeqPerAQ0dJbzx+KAFM4IBq6iSLpZHUroeyfd9o5o+4fR2EtsZBoJORQEA4SW0CmeXSnblx2e9QkCHIodyqV6+g5ETEpZsLqnd/Na60EKPX/tQpPEcO+COIBPcQdszDzSiHGyQFPly/7KciUh1u+mFfxTCHGv9nn2WqndGgeGjQ/kr02qmTBX7Hc1qiEvgiSz1Tz/sy7Es29wvn6FrDGPP7asXlhOaiHxOctPvTptFA1kHFUk8bME7SsTSnGbFbUrssxrq70LhoSh5OwvQna+w84XdXhZb2sloJ4ZsCg3j+PrjJL08/JBi5zGd6ud/ZxhmcGKLOXPcNunQq5ESW92iJvfsuRrNYtawWwSmNhPYoFj2QqWNF0ffLpGt/ad24RJ8vkb5sXkpyKXmvFG5Vcdzf/44k3PBL/ojJ52+kWGzOArnyp5f969oV3J2c4Li27Nkova9VwRNVKqN0V+gV+mTHitgkXV30aWd3A1RSildEleiNPA+5cp+3+T7X+xfHiRZXQ1s4FA9TxIcnveQs9JSZ5r5qNmgqlW4zMtZ6rYNvgmyVcywKtu8ZxnSbS5vXlBV+NXdIfi3+xzrnJ0TkFL+Un8v1PWOC2PPFCjVPq7qTH7mOpzOYj/b4h0ceT+eHgr97Jqhb1ziVfeANzfN8bFUhPKBi7hJBCukQnB0aGjFTYLJPXL26lQ2b80xrOD5cFWgA8hz3St0e69kwNnD3+nX3gy12FjrjO+ddRvvvfyV3SWbXcxqNHfmsb9u1TV+wHTb9B07/L2sB8WUHJ9eeNomDyysEWZ0deqEhH/oWI2oiEh526gvAK1Nx2kIhNvkYR+tPYHEa9j+nd1VBpQP1uzSjIDO+fDDB7uy029rRjDC5Sk6aKczyz1D5uA9Lu+Rrrapl8JXNL3VRllNQH2K1ZFxOpX8LprttfqQ56MbPM0IttUheXWD/mROOeFqGUbL+kUOVlXLTFX/525g4faLEFO4qWWdmOXMNvVjpIVTWt650HfQjX9oT3Dg5Au6+v1/Ci78La6ZOngYCFPT1AUwxQuZ0yt5xKdNXLaDTISMTeCj16XTryhM36K2mfGRIgot71voWs8tTpL/f1rvcwv3LSDf+/G8THCT7NpfHWcW+lsF/ol8q9Bi6MezNTqp0rpp/kJRiVfNrX/w27cRRTu8RIIqtUblBMkxy4jwAVqCjUJkiPBj2cAoVloG8B2/N5deLdMhDb7xs5nhd3dubJhuj8WbaFRyu1L678DHhhA+rMimNo4C1kGpp0tD/qnCfCFHejpf0LJX43OTr578PY0tnIIrlWyNYyuR/ie6j2xNb1OV6u0dOX/1Dtcd7+ya9W+rY2LmnyQMtk8SMLTon8RAdwOaN2tNg5zVnDKlmVeOxPV2vhHIo9QEPV7jc3f+zVDquiNg1OaHX3cZXJDRY5MJpo+VanAcmqp4oasYLG+wrXUL5vJU0kqk2hGEskhP+Jjigrz1l6QnEwp6n8PMVeJp70Ii6ppeaK9GhF6fJE00ceLyxv08tKiPat4QdxZFgSbQknnEiCLD8Qc1rjazVKM3r3gXnnMeONgdz/yFV1q+haaN+wnF3Fn4uYCI9XsKOuVwDD0LsCO/f0gj5cmxCFcr7sclIcefWjvore+3aSU474cyqDVxH7w1RX3CHsaqsMRX17ZLgjsDXws3kLm2XJdM3Ku383UXqaHqsywzPhx7NFir0Fqjym/w6cxD2U9ypa3dx7Z12w/fi3Jps8sqJ8f8Ah8aZAvkHXvIRyrsxK7rrFaNNdNvjI8+3Emri195DCNa858anj2Qdny6Czshkn4N2+1m+k5S8sunX3Ja7I+JutRzg1mc2e9Yc0Zv9PZn1SwhxIdU9sXwZRTd/J5FoUm0e+PYREeHg3oc2YYzGf2xfJxXExt4pT3RfDRHvMXLUmoXOy63xv5pLuhOEax0dRgSywZ/GH+YBXFgCeTU0hZ8SPEFsn8punp1Kurd1KgXxUZ+la3R5+4ePGR4ZF5UQtOa83+Vj8zh80dfzbhxWCeoJnQ4dkZJM4drzknZOOKx2n3WrvJnzFIS8p0xeic+M3ZRVXIp10tV2DyYKwRxLzulPwzHcLlYTxl4PF7v8l106Azr+6wBFejbq/3P72C/0j78cepY9990/d4eAurn2lqdGKLU8FffnMw7cY7pVeXJRMU73Oxwi2g2vh/+4gX8dvbjfojn/eLVhhYl8GthwCQ50KcZq4z2JeW5eeOnJWFQEnVxDoG459TaC4zXybECEoJ0V5q1tXrQbDMtUxeTV6Pdt1/zJuc7TJoV/9YZFWxUtCf6Ou3Vd/vR/vG0138hJQrHkNeoep5dLe+6umcSquKvMaFpm3EZHDBOvCi0XYyIFHMgX7Cqp3JVXlxJFwQfHSaIUEbI2u1lBVUdlNw4Qa9UsLPEK94Qiln3pyKxQVCeNlx8yd7EegVNQBkFLabKvnietYVB4IPZ1fSor82arbgYec8aSdFMaIluYTYuNx32SxfrjKUdPGq+UNp5YpydoEG3xVLixtmHO9zXxKAnHnPuH2fPGrjx0GcuCDEU+yXUtXh6nfUL+cykws1gJ5vkfYFaFBr9PdCXvVf35OJQxzUMmWjv0W6uGJK11uAGDqSpOwCf6rouSIjPVgw57cJCOQ4b9tkI/Y5WNon9Swe72aZryKo8d+HyHBEdWJKrkary0LIGczA4Irq353Wc0Zga3om7UQiAGCvIl8GGyaqz5zH+1gMP5phWUCpKtttWIyicz09vXg76GxkmiGSMQ06Z9X8BUwqOtauDbPIf4rpK/yYoeAHxJ9soXS9VDe1Aw+awOOxaN8foLrif0TXBvQ55dtRtulRq9emFDBxlQcqKCaD8NeTSE7FOHvcjf/+oKbbtRqz9gbofoc2EzQ3pL6W5JdfJzAWmOk8oeoECe90lVMruwl/ltM015P/zIPazqvdvFmLNVHMIZrwiQ2tIKtGh6PDVH+85ew3caqVt2BsDv5rOcu3G9srQWd7NmgtzCRUXLYknYRSwtH9oUtkqyN3CfP20xQ1faXQl4MEmjQehWR6GmGnkdpYNQYeIG408yAX7uCZmYUic9juOfb+Re28+OVOB+scYK4DaPcBe+5wmji9gymtkMpKo4UKqCz7yxzuN8VIlx9yNozpRJpNaWHtaZVEqP45n2JemTlYBSmNIK1FuSYAUQ1yBLnKxevrjayd+h2i8PjdB3YY6b0nr3JuOXGpPMyh4V2dslpR3DFEvgpsBLqhqLDOWP4yEvIL6f21PpA7/8B"));
const $747425b437e121da$var$log2 = Math.log2 || ((n)=>Math.log(n) / Math.LN2);
const $747425b437e121da$var$bits = (n)=>$747425b437e121da$var$log2(n) + 1 | 0;
const $747425b437e121da$var$CATEGORY_BITS = $747425b437e121da$var$bits((($parcel$interopDefault$1($f4087201da764553$exports))).categories.length - 1);
const $747425b437e121da$var$COMBINING_BITS = $747425b437e121da$var$bits((($parcel$interopDefault$1($f4087201da764553$exports))).combiningClasses.length - 1);
const $747425b437e121da$var$SCRIPT_BITS = $747425b437e121da$var$bits((($parcel$interopDefault$1($f4087201da764553$exports))).scripts.length - 1);
const $747425b437e121da$var$EAW_BITS = $747425b437e121da$var$bits((($parcel$interopDefault$1($f4087201da764553$exports))).eaw.length - 1);
const $747425b437e121da$var$NUMBER_BITS = 10;
const $747425b437e121da$var$CATEGORY_SHIFT = $747425b437e121da$var$COMBINING_BITS + $747425b437e121da$var$SCRIPT_BITS + $747425b437e121da$var$EAW_BITS + $747425b437e121da$var$NUMBER_BITS;
const $747425b437e121da$var$COMBINING_SHIFT = $747425b437e121da$var$SCRIPT_BITS + $747425b437e121da$var$EAW_BITS + $747425b437e121da$var$NUMBER_BITS;
const $747425b437e121da$var$SCRIPT_SHIFT = $747425b437e121da$var$EAW_BITS + $747425b437e121da$var$NUMBER_BITS;
const $747425b437e121da$var$EAW_SHIFT = $747425b437e121da$var$NUMBER_BITS;
const $747425b437e121da$var$CATEGORY_MASK = (1 << $747425b437e121da$var$CATEGORY_BITS) - 1;
const $747425b437e121da$var$COMBINING_MASK = (1 << $747425b437e121da$var$COMBINING_BITS) - 1;
const $747425b437e121da$var$SCRIPT_MASK = (1 << $747425b437e121da$var$SCRIPT_BITS) - 1;
const $747425b437e121da$var$EAW_MASK = (1 << $747425b437e121da$var$EAW_BITS) - 1;
const $747425b437e121da$var$NUMBER_MASK = (1 << $747425b437e121da$var$NUMBER_BITS) - 1;
function $747425b437e121da$export$410364bbb673ddbc(codePoint) {
    const val = $747425b437e121da$var$trie.get(codePoint);
    return (($parcel$interopDefault$1($f4087201da764553$exports))).categories[val >> $747425b437e121da$var$CATEGORY_SHIFT & $747425b437e121da$var$CATEGORY_MASK];
}
function $747425b437e121da$export$c03b919c6651ed55(codePoint) {
    const val = $747425b437e121da$var$trie.get(codePoint);
    return (($parcel$interopDefault$1($f4087201da764553$exports))).combiningClasses[val >> $747425b437e121da$var$COMBINING_SHIFT & $747425b437e121da$var$COMBINING_MASK];
}
function $747425b437e121da$export$941569448d136665(codePoint) {
    const val = $747425b437e121da$var$trie.get(codePoint);
    return (($parcel$interopDefault$1($f4087201da764553$exports))).scripts[val >> $747425b437e121da$var$SCRIPT_SHIFT & $747425b437e121da$var$SCRIPT_MASK];
}
function $747425b437e121da$export$92f6187db8ca6d26(codePoint) {
    const val = $747425b437e121da$var$trie.get(codePoint);
    return (($parcel$interopDefault$1($f4087201da764553$exports))).eaw[val >> $747425b437e121da$var$EAW_SHIFT & $747425b437e121da$var$EAW_MASK];
}
function $747425b437e121da$export$7d1258ebb7625a0d(codePoint) {
    let val = $747425b437e121da$var$trie.get(codePoint);
    let num = val & $747425b437e121da$var$NUMBER_MASK;
    if (num === 0) return null;
    else if (num <= 50) return num - 1;
    else if (num < 0x1e0) {
        const numerator = (num >> 4) - 12;
        const denominator = (num & 0xf) + 1;
        return numerator / denominator;
    } else if (num < 0x300) {
        val = (num >> 5) - 14;
        let exp = (num & 0x1f) + 2;
        while(exp > 0){
            val *= 10;
            exp--;
        }
        return val;
    } else {
        val = (num >> 2) - 0xbf;
        let exp = (num & 3) + 1;
        while(exp > 0){
            val *= 60;
            exp--;
        }
        return val;
    }
}
function $747425b437e121da$export$52c8ea63abd07594(codePoint) {
    const category = $747425b437e121da$export$410364bbb673ddbc(codePoint);
    return category === "Lu" || category === "Ll" || category === "Lt" || category === "Lm" || category === "Lo" || category === "Nl";
}
function $747425b437e121da$export$727d9dbc4fbb948f(codePoint) {
    return $747425b437e121da$export$410364bbb673ddbc(codePoint) === "Nd";
}
function $747425b437e121da$export$a5b49f4dc6a07d2c(codePoint) {
    const category = $747425b437e121da$export$410364bbb673ddbc(codePoint);
    return category === "Pc" || category === "Pd" || category === "Pe" || category === "Pf" || category === "Pi" || category === "Po" || category === "Ps";
}
function $747425b437e121da$export$7b6804e8df61fcf5(codePoint) {
    return $747425b437e121da$export$410364bbb673ddbc(codePoint) === "Ll";
}
function $747425b437e121da$export$aebd617640818cda(codePoint) {
    return $747425b437e121da$export$410364bbb673ddbc(codePoint) === "Lu";
}
function $747425b437e121da$export$de8b4ee23b2cf823(codePoint) {
    return $747425b437e121da$export$410364bbb673ddbc(codePoint) === "Lt";
}
function $747425b437e121da$export$3c52dd84024ae72c(codePoint) {
    const category = $747425b437e121da$export$410364bbb673ddbc(codePoint);
    return category === "Zs" || category === "Zl" || category === "Zp";
}
function $747425b437e121da$export$a11bdcffe109e74b(codePoint) {
    const category = $747425b437e121da$export$410364bbb673ddbc(codePoint);
    return category === "Nd" || category === "No" || category === "Nl" || category === "Lu" || category === "Ll" || category === "Lt" || category === "Lm" || category === "Lo" || category === "Me" || category === "Mc";
}
function $747425b437e121da$export$e33ad6871e762338(codePoint) {
    const category = $747425b437e121da$export$410364bbb673ddbc(codePoint);
    return category === "Mn" || category === "Me" || category === "Mc";
}
var
$747425b437e121da$export$2e2bcd8739ae039 = {
    getCategory: $747425b437e121da$export$410364bbb673ddbc,
    getCombiningClass: $747425b437e121da$export$c03b919c6651ed55,
    getScript: $747425b437e121da$export$941569448d136665,
    getEastAsianWidth: $747425b437e121da$export$92f6187db8ca6d26,
    getNumericValue: $747425b437e121da$export$7d1258ebb7625a0d,
    isAlphabetic: $747425b437e121da$export$52c8ea63abd07594,
    isDigit: $747425b437e121da$export$727d9dbc4fbb948f,
    isPunctuation: $747425b437e121da$export$a5b49f4dc6a07d2c,
    isLowerCase: $747425b437e121da$export$7b6804e8df61fcf5,
    isUpperCase: $747425b437e121da$export$aebd617640818cda,
    isTitleCase: $747425b437e121da$export$de8b4ee23b2cf823,
    isWhiteSpace: $747425b437e121da$export$3c52dd84024ae72c,
    isBaseForm: $747425b437e121da$export$a11bdcffe109e74b,
    isMark: $747425b437e121da$export$e33ad6871e762338
};

var INITIAL_STATE = 1;
var FAIL_STATE = 0;
class StateMachine {
  constructor(dfa) {
    this.stateTable = dfa.stateTable;
    this.accepting = dfa.accepting;
    this.tags = dfa.tags;
  }
  match(str) {
    var self = this;
    return {
      *[Symbol.iterator]() {
        var state = INITIAL_STATE;
        var startRun = null;
        var lastAccepting = null;
        var lastState = null;
        for (var p = 0; p < str.length; p++) {
          var c = str[p];
          lastState = state;
          state = self.stateTable[state][c];
          if (state === FAIL_STATE) {
            if (startRun != null && lastAccepting != null && lastAccepting >= startRun) {
              yield [startRun, lastAccepting, self.tags[lastState]];
            }
            state = self.stateTable[INITIAL_STATE][c];
            startRun = null;
          }
          if (state !== FAIL_STATE && startRun == null) {
            startRun = p;
          }
          if (self.accepting[state]) {
            lastAccepting = p;
          }
          if (state === FAIL_STATE) {
            state = INITIAL_STATE;
          }
        }
        if (startRun != null && lastAccepting != null && lastAccepting >= startRun) {
          yield [startRun, lastAccepting, self.tags[state]];
        }
      }
    };
  }
  apply(str, actions) {
    for (var [start, end, tags] of this.match(str)) {
      for (var tag of tags) {
        if (typeof actions[tag] === 'function') {
          actions[tag](start, end, str.slice(start, end + 1));
        }
      }
    }
  }
}
var dfa = StateMachine;

var $5OpyM$dfa = /*@__PURE__*/getDefaultExportFromCjs$1(dfa);

var clone = {exports: {}};

(function (module) {
	var clone = (function() {
	function _instanceof(obj, type) {
	  return type != null && obj instanceof type;
	}
	var nativeMap;
	try {
	  nativeMap = Map;
	} catch(_) {
	  nativeMap = function() {};
	}
	var nativeSet;
	try {
	  nativeSet = Set;
	} catch(_) {
	  nativeSet = function() {};
	}
	var nativePromise;
	try {
	  nativePromise = Promise;
	} catch(_) {
	  nativePromise = function() {};
	}
	function clone(parent, circular, depth, prototype, includeNonEnumerable) {
	  if (typeof circular === 'object') {
	    depth = circular.depth;
	    prototype = circular.prototype;
	    includeNonEnumerable = circular.includeNonEnumerable;
	    circular = circular.circular;
	  }
	  var allParents = [];
	  var allChildren = [];
	  var useBuffer = typeof buffer.Buffer != 'undefined';
	  if (typeof circular == 'undefined')
	    circular = true;
	  if (typeof depth == 'undefined')
	    depth = Infinity;
	  function _clone(parent, depth) {
	    if (parent === null)
	      return null;
	    if (depth === 0)
	      return parent;
	    var child;
	    var proto;
	    if (typeof parent != 'object') {
	      return parent;
	    }
	    if (_instanceof(parent, nativeMap)) {
	      child = new nativeMap();
	    } else if (_instanceof(parent, nativeSet)) {
	      child = new nativeSet();
	    } else if (_instanceof(parent, nativePromise)) {
	      child = new nativePromise(function (resolve, reject) {
	        parent.then(function(value) {
	          resolve(_clone(value, depth - 1));
	        }, function(err) {
	          reject(_clone(err, depth - 1));
	        });
	      });
	    } else if (clone.__isArray(parent)) {
	      child = [];
	    } else if (clone.__isRegExp(parent)) {
	      child = new RegExp(parent.source, __getRegExpFlags(parent));
	      if (parent.lastIndex) child.lastIndex = parent.lastIndex;
	    } else if (clone.__isDate(parent)) {
	      child = new Date(parent.getTime());
	    } else if (useBuffer && buffer.Buffer.isBuffer(parent)) {
	      if (buffer.Buffer.allocUnsafe) {
	        child = buffer.Buffer.allocUnsafe(parent.length);
	      } else {
	        child = new buffer.Buffer(parent.length);
	      }
	      parent.copy(child);
	      return child;
	    } else if (_instanceof(parent, Error)) {
	      child = Object.create(parent);
	    } else {
	      if (typeof prototype == 'undefined') {
	        proto = Object.getPrototypeOf(parent);
	        child = Object.create(proto);
	      }
	      else {
	        child = Object.create(prototype);
	        proto = prototype;
	      }
	    }
	    if (circular) {
	      var index = allParents.indexOf(parent);
	      if (index != -1) {
	        return allChildren[index];
	      }
	      allParents.push(parent);
	      allChildren.push(child);
	    }
	    if (_instanceof(parent, nativeMap)) {
	      parent.forEach(function(value, key) {
	        var keyChild = _clone(key, depth - 1);
	        var valueChild = _clone(value, depth - 1);
	        child.set(keyChild, valueChild);
	      });
	    }
	    if (_instanceof(parent, nativeSet)) {
	      parent.forEach(function(value) {
	        var entryChild = _clone(value, depth - 1);
	        child.add(entryChild);
	      });
	    }
	    for (var i in parent) {
	      var attrs;
	      if (proto) {
	        attrs = Object.getOwnPropertyDescriptor(proto, i);
	      }
	      if (attrs && attrs.set == null) {
	        continue;
	      }
	      child[i] = _clone(parent[i], depth - 1);
	    }
	    if (Object.getOwnPropertySymbols) {
	      var symbols = Object.getOwnPropertySymbols(parent);
	      for (var i = 0; i < symbols.length; i++) {
	        var symbol = symbols[i];
	        var descriptor = Object.getOwnPropertyDescriptor(parent, symbol);
	        if (descriptor && !descriptor.enumerable && !includeNonEnumerable) {
	          continue;
	        }
	        child[symbol] = _clone(parent[symbol], depth - 1);
	        if (!descriptor.enumerable) {
	          Object.defineProperty(child, symbol, {
	            enumerable: false
	          });
	        }
	      }
	    }
	    if (includeNonEnumerable) {
	      var allPropertyNames = Object.getOwnPropertyNames(parent);
	      for (var i = 0; i < allPropertyNames.length; i++) {
	        var propertyName = allPropertyNames[i];
	        var descriptor = Object.getOwnPropertyDescriptor(parent, propertyName);
	        if (descriptor && descriptor.enumerable) {
	          continue;
	        }
	        child[propertyName] = _clone(parent[propertyName], depth - 1);
	        Object.defineProperty(child, propertyName, {
	          enumerable: false
	        });
	      }
	    }
	    return child;
	  }
	  return _clone(parent, depth);
	}
	clone.clonePrototype = function clonePrototype(parent) {
	  if (parent === null)
	    return null;
	  var c = function () {};
	  c.prototype = parent;
	  return new c();
	};
	function __objToStr(o) {
	  return Object.prototype.toString.call(o);
	}
	clone.__objToStr = __objToStr;
	function __isDate(o) {
	  return typeof o === 'object' && __objToStr(o) === '[object Date]';
	}
	clone.__isDate = __isDate;
	function __isArray(o) {
	  return typeof o === 'object' && __objToStr(o) === '[object Array]';
	}
	clone.__isArray = __isArray;
	function __isRegExp(o) {
	  return typeof o === 'object' && __objToStr(o) === '[object RegExp]';
	}
	clone.__isRegExp = __isRegExp;
	function __getRegExpFlags(re) {
	  var flags = '';
	  if (re.global) flags += 'g';
	  if (re.ignoreCase) flags += 'i';
	  if (re.multiline) flags += 'm';
	  return flags;
	}
	clone.__getRegExpFlags = __getRegExpFlags;
	return clone;
	})();
	if (module.exports) {
	  module.exports = clone;
	} 
} (clone));

var cloneExports = clone.exports;
var $5OpyM$clone = /*@__PURE__*/getDefaultExportFromCjs$1(cloneExports);

var decode = {};

var streams = {};

function BrotliInput$1(buffer) {
  this.buffer = buffer;
  this.pos = 0;
}
BrotliInput$1.prototype.read = function(buf, i, count) {
  if (this.pos + count > this.buffer.length) {
    count = this.buffer.length - this.pos;
  }
  for (var p = 0; p < count; p++)
    buf[i + p] = this.buffer[this.pos + p];
  this.pos += count;
  return count;
};
streams.BrotliInput = BrotliInput$1;
function BrotliOutput$1(buf) {
  this.buffer = buf;
  this.pos = 0;
}
BrotliOutput$1.prototype.write = function(buf, count) {
  if (this.pos + count > this.buffer.length)
    throw new Error('Output buffer is not large enough');
  this.buffer.set(buf.subarray(0, count), this.pos);
  this.pos += count;
  return count;
};
streams.BrotliOutput = BrotliOutput$1;

var BROTLI_READ_SIZE = 4096;
var BROTLI_IBUF_SIZE =  (2 * BROTLI_READ_SIZE + 32);
var BROTLI_IBUF_MASK =  (2 * BROTLI_READ_SIZE - 1);
var kBitMask = new Uint32Array([
  0, 1, 3, 7, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095, 8191, 16383, 32767,
  65535, 131071, 262143, 524287, 1048575, 2097151, 4194303, 8388607, 16777215
]);
function BrotliBitReader$1(input) {
  this.buf_ = new Uint8Array(BROTLI_IBUF_SIZE);
  this.input_ = input;
  this.reset();
}
BrotliBitReader$1.READ_SIZE = BROTLI_READ_SIZE;
BrotliBitReader$1.IBUF_MASK = BROTLI_IBUF_MASK;
BrotliBitReader$1.prototype.reset = function() {
  this.buf_ptr_ = 0;
  this.val_ = 0;
  this.pos_ = 0;
  this.bit_pos_ = 0;
  this.bit_end_pos_ = 0;
  this.eos_ = 0;
  this.readMoreInput();
  for (var i = 0; i < 4; i++) {
    this.val_ |= this.buf_[this.pos_] << (8 * i);
    ++this.pos_;
  }
  return this.bit_end_pos_ > 0;
};
BrotliBitReader$1.prototype.readMoreInput = function() {
  if (this.bit_end_pos_ > 256) {
    return;
  } else if (this.eos_) {
    if (this.bit_pos_ > this.bit_end_pos_)
      throw new Error('Unexpected end of input ' + this.bit_pos_ + ' ' + this.bit_end_pos_);
  } else {
    var dst = this.buf_ptr_;
    var bytes_read = this.input_.read(this.buf_, dst, BROTLI_READ_SIZE);
    if (bytes_read < 0) {
      throw new Error('Unexpected end of input');
    }
    if (bytes_read < BROTLI_READ_SIZE) {
      this.eos_ = 1;
      for (var p = 0; p < 32; p++)
        this.buf_[dst + bytes_read + p] = 0;
    }
    if (dst === 0) {
      for (var p = 0; p < 32; p++)
        this.buf_[(BROTLI_READ_SIZE << 1) + p] = this.buf_[p];
      this.buf_ptr_ = BROTLI_READ_SIZE;
    } else {
      this.buf_ptr_ = 0;
    }
    this.bit_end_pos_ += bytes_read << 3;
  }
};
BrotliBitReader$1.prototype.fillBitWindow = function() {
  while (this.bit_pos_ >= 8) {
    this.val_ >>>= 8;
    this.val_ |= this.buf_[this.pos_ & BROTLI_IBUF_MASK] << 24;
    ++this.pos_;
    this.bit_pos_ = this.bit_pos_ - 8 >>> 0;
    this.bit_end_pos_ = this.bit_end_pos_ - 8 >>> 0;
  }
};
BrotliBitReader$1.prototype.readBits = function(n_bits) {
  if (32 - this.bit_pos_ < n_bits) {
    this.fillBitWindow();
  }
  var val = ((this.val_ >>> this.bit_pos_) & kBitMask[n_bits]);
  this.bit_pos_ += n_bits;
  return val;
};
var bit_reader = BrotliBitReader$1;

var dictionary = {};

var dictionaryData = {};

(function (exports) {
	exports.dictionary = new Uint8Array([
	  0x74, 0x69, 0x6d, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x66, 0x65, 0x6c,
	  0x65, 0x66, 0x74, 0x62, 0x61, 0x63, 0x6b, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x61,
	  0x74, 0x61, 0x73, 0x68, 0x6f, 0x77, 0x6f, 0x6e, 0x6c, 0x79, 0x73, 0x69, 0x74,
	  0x65, 0x63, 0x69, 0x74, 0x79, 0x6f, 0x70, 0x65, 0x6e, 0x6a, 0x75, 0x73, 0x74,
	  0x6c, 0x69, 0x6b, 0x65, 0x66, 0x72, 0x65, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x74,
	  0x65, 0x78, 0x74, 0x79, 0x65, 0x61, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x62, 0x6f,
	  0x64, 0x79, 0x6c, 0x6f, 0x76, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x62, 0x6f, 0x6f,
	  0x6b, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x76, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	  0x68, 0x65, 0x6c, 0x70, 0x68, 0x6f, 0x6d, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6d,
	  0x6f, 0x72, 0x65, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x6f, 0x6e, 0x67, 0x74, 0x68,
	  0x65, 0x6d, 0x76, 0x69, 0x65, 0x77, 0x66, 0x69, 0x6e, 0x64, 0x70, 0x61, 0x67,
	  0x65, 0x64, 0x61, 0x79, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x68, 0x65, 0x61, 0x64,
	  0x74, 0x65, 0x72, 0x6d, 0x65, 0x61, 0x63, 0x68, 0x61, 0x72, 0x65, 0x61, 0x66,
	  0x72, 0x6f, 0x6d, 0x74, 0x72, 0x75, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x61, 0x62,
	  0x6c, 0x65, 0x75, 0x70, 0x6f, 0x6e, 0x68, 0x69, 0x67, 0x68, 0x64, 0x61, 0x74,
	  0x65, 0x6c, 0x61, 0x6e, 0x64, 0x6e, 0x65, 0x77, 0x73, 0x65, 0x76, 0x65, 0x6e,
	  0x6e, 0x65, 0x78, 0x74, 0x63, 0x61, 0x73, 0x65, 0x62, 0x6f, 0x74, 0x68, 0x70,
	  0x6f, 0x73, 0x74, 0x75, 0x73, 0x65, 0x64, 0x6d, 0x61, 0x64, 0x65, 0x68, 0x61,
	  0x6e, 0x64, 0x68, 0x65, 0x72, 0x65, 0x77, 0x68, 0x61, 0x74, 0x6e, 0x61, 0x6d,
	  0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x62, 0x6c, 0x6f, 0x67, 0x73, 0x69, 0x7a, 0x65,
	  0x62, 0x61, 0x73, 0x65, 0x68, 0x65, 0x6c, 0x64, 0x6d, 0x61, 0x6b, 0x65, 0x6d,
	  0x61, 0x69, 0x6e, 0x75, 0x73, 0x65, 0x72, 0x27, 0x29, 0x20, 0x2b, 0x68, 0x6f,
	  0x6c, 0x64, 0x65, 0x6e, 0x64, 0x73, 0x77, 0x69, 0x74, 0x68, 0x4e, 0x65, 0x77,
	  0x73, 0x72, 0x65, 0x61, 0x64, 0x77, 0x65, 0x72, 0x65, 0x73, 0x69, 0x67, 0x6e,
	  0x74, 0x61, 0x6b, 0x65, 0x68, 0x61, 0x76, 0x65, 0x67, 0x61, 0x6d, 0x65, 0x73,
	  0x65, 0x65, 0x6e, 0x63, 0x61, 0x6c, 0x6c, 0x70, 0x61, 0x74, 0x68, 0x77, 0x65,
	  0x6c, 0x6c, 0x70, 0x6c, 0x75, 0x73, 0x6d, 0x65, 0x6e, 0x75, 0x66, 0x69, 0x6c,
	  0x6d, 0x70, 0x61, 0x72, 0x74, 0x6a, 0x6f, 0x69, 0x6e, 0x74, 0x68, 0x69, 0x73,
	  0x6c, 0x69, 0x73, 0x74, 0x67, 0x6f, 0x6f, 0x64, 0x6e, 0x65, 0x65, 0x64, 0x77,
	  0x61, 0x79, 0x73, 0x77, 0x65, 0x73, 0x74, 0x6a, 0x6f, 0x62, 0x73, 0x6d, 0x69,
	  0x6e, 0x64, 0x61, 0x6c, 0x73, 0x6f, 0x6c, 0x6f, 0x67, 0x6f, 0x72, 0x69, 0x63,
	  0x68, 0x75, 0x73, 0x65, 0x73, 0x6c, 0x61, 0x73, 0x74, 0x74, 0x65, 0x61, 0x6d,
	  0x61, 0x72, 0x6d, 0x79, 0x66, 0x6f, 0x6f, 0x64, 0x6b, 0x69, 0x6e, 0x67, 0x77,
	  0x69, 0x6c, 0x6c, 0x65, 0x61, 0x73, 0x74, 0x77, 0x61, 0x72, 0x64, 0x62, 0x65,
	  0x73, 0x74, 0x66, 0x69, 0x72, 0x65, 0x50, 0x61, 0x67, 0x65, 0x6b, 0x6e, 0x6f,
	  0x77, 0x61, 0x77, 0x61, 0x79, 0x2e, 0x70, 0x6e, 0x67, 0x6d, 0x6f, 0x76, 0x65,
	  0x74, 0x68, 0x61, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x67, 0x69, 0x76, 0x65, 0x73,
	  0x65, 0x6c, 0x66, 0x6e, 0x6f, 0x74, 0x65, 0x6d, 0x75, 0x63, 0x68, 0x66, 0x65,
	  0x65, 0x64, 0x6d, 0x61, 0x6e, 0x79, 0x72, 0x6f, 0x63, 0x6b, 0x69, 0x63, 0x6f,
	  0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x6c, 0x6f, 0x6f, 0x6b, 0x68, 0x69, 0x64, 0x65,
	  0x64, 0x69, 0x65, 0x64, 0x48, 0x6f, 0x6d, 0x65, 0x72, 0x75, 0x6c, 0x65, 0x68,
	  0x6f, 0x73, 0x74, 0x61, 0x6a, 0x61, 0x78, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x6c,
	  0x75, 0x62, 0x6c, 0x61, 0x77, 0x73, 0x6c, 0x65, 0x73, 0x73, 0x68, 0x61, 0x6c,
	  0x66, 0x73, 0x6f, 0x6d, 0x65, 0x73, 0x75, 0x63, 0x68, 0x7a, 0x6f, 0x6e, 0x65,
	  0x31, 0x30, 0x30, 0x25, 0x6f, 0x6e, 0x65, 0x73, 0x63, 0x61, 0x72, 0x65, 0x54,
	  0x69, 0x6d, 0x65, 0x72, 0x61, 0x63, 0x65, 0x62, 0x6c, 0x75, 0x65, 0x66, 0x6f,
	  0x75, 0x72, 0x77, 0x65, 0x65, 0x6b, 0x66, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x70,
	  0x65, 0x67, 0x61, 0x76, 0x65, 0x68, 0x61, 0x72, 0x64, 0x6c, 0x6f, 0x73, 0x74,
	  0x77, 0x68, 0x65, 0x6e, 0x70, 0x61, 0x72, 0x6b, 0x6b, 0x65, 0x70, 0x74, 0x70,
	  0x61, 0x73, 0x73, 0x73, 0x68, 0x69, 0x70, 0x72, 0x6f, 0x6f, 0x6d, 0x48, 0x54,
	  0x4d, 0x4c, 0x70, 0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x64, 0x6f, 0x6e,
	  0x65, 0x73, 0x61, 0x76, 0x65, 0x6b, 0x65, 0x65, 0x70, 0x66, 0x6c, 0x61, 0x67,
	  0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x6f, 0x6c, 0x64, 0x66, 0x69, 0x76, 0x65, 0x74,
	  0x6f, 0x6f, 0x6b, 0x72, 0x61, 0x74, 0x65, 0x74, 0x6f, 0x77, 0x6e, 0x6a, 0x75,
	  0x6d, 0x70, 0x74, 0x68, 0x75, 0x73, 0x64, 0x61, 0x72, 0x6b, 0x63, 0x61, 0x72,
	  0x64, 0x66, 0x69, 0x6c, 0x65, 0x66, 0x65, 0x61, 0x72, 0x73, 0x74, 0x61, 0x79,
	  0x6b, 0x69, 0x6c, 0x6c, 0x74, 0x68, 0x61, 0x74, 0x66, 0x61, 0x6c, 0x6c, 0x61,
	  0x75, 0x74, 0x6f, 0x65, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x74, 0x61,
	  0x6c, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x64, 0x65, 0x65,
	  0x70, 0x6d, 0x6f, 0x64, 0x65, 0x72, 0x65, 0x73, 0x74, 0x74, 0x75, 0x72, 0x6e,
	  0x62, 0x6f, 0x72, 0x6e, 0x62, 0x61, 0x6e, 0x64, 0x66, 0x65, 0x6c, 0x6c, 0x72,
	  0x6f, 0x73, 0x65, 0x75, 0x72, 0x6c, 0x28, 0x73, 0x6b, 0x69, 0x6e, 0x72, 0x6f,
	  0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x65, 0x61, 0x63, 0x74, 0x73, 0x61, 0x67, 0x65,
	  0x73, 0x6d, 0x65, 0x65, 0x74, 0x67, 0x6f, 0x6c, 0x64, 0x2e, 0x6a, 0x70, 0x67,
	  0x69, 0x74, 0x65, 0x6d, 0x76, 0x61, 0x72, 0x79, 0x66, 0x65, 0x6c, 0x74, 0x74,
	  0x68, 0x65, 0x6e, 0x73, 0x65, 0x6e, 0x64, 0x64, 0x72, 0x6f, 0x70, 0x56, 0x69,
	  0x65, 0x77, 0x63, 0x6f, 0x70, 0x79, 0x31, 0x2e, 0x30, 0x22, 0x3c, 0x2f, 0x61,
	  0x3e, 0x73, 0x74, 0x6f, 0x70, 0x65, 0x6c, 0x73, 0x65, 0x6c, 0x69, 0x65, 0x73,
	  0x74, 0x6f, 0x75, 0x72, 0x70, 0x61, 0x63, 0x6b, 0x2e, 0x67, 0x69, 0x66, 0x70,
	  0x61, 0x73, 0x74, 0x63, 0x73, 0x73, 0x3f, 0x67, 0x72, 0x61, 0x79, 0x6d, 0x65,
	  0x61, 0x6e, 0x26, 0x67, 0x74, 0x3b, 0x72, 0x69, 0x64, 0x65, 0x73, 0x68, 0x6f,
	  0x74, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x61, 0x69, 0x64, 0x72, 0x6f, 0x61, 0x64,
	  0x76, 0x61, 0x72, 0x20, 0x66, 0x65, 0x65, 0x6c, 0x6a, 0x6f, 0x68, 0x6e, 0x72,
	  0x69, 0x63, 0x6b, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x61, 0x73, 0x74, 0x27, 0x55,
	  0x41, 0x2d, 0x64, 0x65, 0x61, 0x64, 0x3c, 0x2f, 0x62, 0x3e, 0x70, 0x6f, 0x6f,
	  0x72, 0x62, 0x69, 0x6c, 0x6c, 0x74, 0x79, 0x70, 0x65, 0x55, 0x2e, 0x53, 0x2e,
	  0x77, 0x6f, 0x6f, 0x64, 0x6d, 0x75, 0x73, 0x74, 0x32, 0x70, 0x78, 0x3b, 0x49,
	  0x6e, 0x66, 0x6f, 0x72, 0x61, 0x6e, 0x6b, 0x77, 0x69, 0x64, 0x65, 0x77, 0x61,
	  0x6e, 0x74, 0x77, 0x61, 0x6c, 0x6c, 0x6c, 0x65, 0x61, 0x64, 0x5b, 0x30, 0x5d,
	  0x3b, 0x70, 0x61, 0x75, 0x6c, 0x77, 0x61, 0x76, 0x65, 0x73, 0x75, 0x72, 0x65,
	  0x24, 0x28, 0x27, 0x23, 0x77, 0x61, 0x69, 0x74, 0x6d, 0x61, 0x73, 0x73, 0x61,
	  0x72, 0x6d, 0x73, 0x67, 0x6f, 0x65, 0x73, 0x67, 0x61, 0x69, 0x6e, 0x6c, 0x61,
	  0x6e, 0x67, 0x70, 0x61, 0x69, 0x64, 0x21, 0x2d, 0x2d, 0x20, 0x6c, 0x6f, 0x63,
	  0x6b, 0x75, 0x6e, 0x69, 0x74, 0x72, 0x6f, 0x6f, 0x74, 0x77, 0x61, 0x6c, 0x6b,
	  0x66, 0x69, 0x72, 0x6d, 0x77, 0x69, 0x66, 0x65, 0x78, 0x6d, 0x6c, 0x22, 0x73,
	  0x6f, 0x6e, 0x67, 0x74, 0x65, 0x73, 0x74, 0x32, 0x30, 0x70, 0x78, 0x6b, 0x69,
	  0x6e, 0x64, 0x72, 0x6f, 0x77, 0x73, 0x74, 0x6f, 0x6f, 0x6c, 0x66, 0x6f, 0x6e,
	  0x74, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x61, 0x66, 0x65, 0x73, 0x74, 0x61, 0x72,
	  0x6d, 0x61, 0x70, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x72, 0x61, 0x69, 0x6e, 0x66,
	  0x6c, 0x6f, 0x77, 0x62, 0x61, 0x62, 0x79, 0x73, 0x70, 0x61, 0x6e, 0x73, 0x61,
	  0x79, 0x73, 0x34, 0x70, 0x78, 0x3b, 0x36, 0x70, 0x78, 0x3b, 0x61, 0x72, 0x74,
	  0x73, 0x66, 0x6f, 0x6f, 0x74, 0x72, 0x65, 0x61, 0x6c, 0x77, 0x69, 0x6b, 0x69,
	  0x68, 0x65, 0x61, 0x74, 0x73, 0x74, 0x65, 0x70, 0x74, 0x72, 0x69, 0x70, 0x6f,
	  0x72, 0x67, 0x2f, 0x6c, 0x61, 0x6b, 0x65, 0x77, 0x65, 0x61, 0x6b, 0x74, 0x6f,
	  0x6c, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x63, 0x61, 0x73, 0x74, 0x66, 0x61, 0x6e,
	  0x73, 0x62, 0x61, 0x6e, 0x6b, 0x76, 0x65, 0x72, 0x79, 0x72, 0x75, 0x6e, 0x73,
	  0x6a, 0x75, 0x6c, 0x79, 0x74, 0x61, 0x73, 0x6b, 0x31, 0x70, 0x78, 0x3b, 0x67,
	  0x6f, 0x61, 0x6c, 0x67, 0x72, 0x65, 0x77, 0x73, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	  0x67, 0x65, 0x69, 0x64, 0x3d, 0x22, 0x73, 0x65, 0x74, 0x73, 0x35, 0x70, 0x78,
	  0x3b, 0x2e, 0x6a, 0x73, 0x3f, 0x34, 0x30, 0x70, 0x78, 0x69, 0x66, 0x20, 0x28,
	  0x73, 0x6f, 0x6f, 0x6e, 0x73, 0x65, 0x61, 0x74, 0x6e, 0x6f, 0x6e, 0x65, 0x74,
	  0x75, 0x62, 0x65, 0x7a, 0x65, 0x72, 0x6f, 0x73, 0x65, 0x6e, 0x74, 0x72, 0x65,
	  0x65, 0x64, 0x66, 0x61, 0x63, 0x74, 0x69, 0x6e, 0x74, 0x6f, 0x67, 0x69, 0x66,
	  0x74, 0x68, 0x61, 0x72, 0x6d, 0x31, 0x38, 0x70, 0x78, 0x63, 0x61, 0x6d, 0x65,
	  0x68, 0x69, 0x6c, 0x6c, 0x62, 0x6f, 0x6c, 0x64, 0x7a, 0x6f, 0x6f, 0x6d, 0x76,
	  0x6f, 0x69, 0x64, 0x65, 0x61, 0x73, 0x79, 0x72, 0x69, 0x6e, 0x67, 0x66, 0x69,
	  0x6c, 0x6c, 0x70, 0x65, 0x61, 0x6b, 0x69, 0x6e, 0x69, 0x74, 0x63, 0x6f, 0x73,
	  0x74, 0x33, 0x70, 0x78, 0x3b, 0x6a, 0x61, 0x63, 0x6b, 0x74, 0x61, 0x67, 0x73,
	  0x62, 0x69, 0x74, 0x73, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x69, 0x74, 0x6b,
	  0x6e, 0x65, 0x77, 0x6e, 0x65, 0x61, 0x72, 0x3c, 0x21, 0x2d, 0x2d, 0x67, 0x72,
	  0x6f, 0x77, 0x4a, 0x53, 0x4f, 0x4e, 0x64, 0x75, 0x74, 0x79, 0x4e, 0x61, 0x6d,
	  0x65, 0x73, 0x61, 0x6c, 0x65, 0x79, 0x6f, 0x75, 0x20, 0x6c, 0x6f, 0x74, 0x73,
	  0x70, 0x61, 0x69, 0x6e, 0x6a, 0x61, 0x7a, 0x7a, 0x63, 0x6f, 0x6c, 0x64, 0x65,
	  0x79, 0x65, 0x73, 0x66, 0x69, 0x73, 0x68, 0x77, 0x77, 0x77, 0x2e, 0x72, 0x69,
	  0x73, 0x6b, 0x74, 0x61, 0x62, 0x73, 0x70, 0x72, 0x65, 0x76, 0x31, 0x30, 0x70,
	  0x78, 0x72, 0x69, 0x73, 0x65, 0x32, 0x35, 0x70, 0x78, 0x42, 0x6c, 0x75, 0x65,
	  0x64, 0x69, 0x6e, 0x67, 0x33, 0x30, 0x30, 0x2c, 0x62, 0x61, 0x6c, 0x6c, 0x66,
	  0x6f, 0x72, 0x64, 0x65, 0x61, 0x72, 0x6e, 0x77, 0x69, 0x6c, 0x64, 0x62, 0x6f,
	  0x78, 0x2e, 0x66, 0x61, 0x69, 0x72, 0x6c, 0x61, 0x63, 0x6b, 0x76, 0x65, 0x72,
	  0x73, 0x70, 0x61, 0x69, 0x72, 0x6a, 0x75, 0x6e, 0x65, 0x74, 0x65, 0x63, 0x68,
	  0x69, 0x66, 0x28, 0x21, 0x70, 0x69, 0x63, 0x6b, 0x65, 0x76, 0x69, 0x6c, 0x24,
	  0x28, 0x22, 0x23, 0x77, 0x61, 0x72, 0x6d, 0x6c, 0x6f, 0x72, 0x64, 0x64, 0x6f,
	  0x65, 0x73, 0x70, 0x75, 0x6c, 0x6c, 0x2c, 0x30, 0x30, 0x30, 0x69, 0x64, 0x65,
	  0x61, 0x64, 0x72, 0x61, 0x77, 0x68, 0x75, 0x67, 0x65, 0x73, 0x70, 0x6f, 0x74,
	  0x66, 0x75, 0x6e, 0x64, 0x62, 0x75, 0x72, 0x6e, 0x68, 0x72, 0x65, 0x66, 0x63,
	  0x65, 0x6c, 0x6c, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x68, 0x6f,
	  0x75, 0x72, 0x6c, 0x6f, 0x73, 0x73, 0x66, 0x75, 0x65, 0x6c, 0x31, 0x32, 0x70,
	  0x78, 0x73, 0x75, 0x69, 0x74, 0x64, 0x65, 0x61, 0x6c, 0x52, 0x53, 0x53, 0x22,
	  0x61, 0x67, 0x65, 0x64, 0x67, 0x72, 0x65, 0x79, 0x47, 0x45, 0x54, 0x22, 0x65,
	  0x61, 0x73, 0x65, 0x61, 0x69, 0x6d, 0x73, 0x67, 0x69, 0x72, 0x6c, 0x61, 0x69,
	  0x64, 0x73, 0x38, 0x70, 0x78, 0x3b, 0x6e, 0x61, 0x76, 0x79, 0x67, 0x72, 0x69,
	  0x64, 0x74, 0x69, 0x70, 0x73, 0x23, 0x39, 0x39, 0x39, 0x77, 0x61, 0x72, 0x73,
	  0x6c, 0x61, 0x64, 0x79, 0x63, 0x61, 0x72, 0x73, 0x29, 0x3b, 0x20, 0x7d, 0x70,
	  0x68, 0x70, 0x3f, 0x68, 0x65, 0x6c, 0x6c, 0x74, 0x61, 0x6c, 0x6c, 0x77, 0x68,
	  0x6f, 0x6d, 0x7a, 0x68, 0x3a, 0xe5, 0x2a, 0x2f, 0x0d, 0x0a, 0x20, 0x31, 0x30,
	  0x30, 0x68, 0x61, 0x6c, 0x6c, 0x2e, 0x0a, 0x0a, 0x41, 0x37, 0x70, 0x78, 0x3b,
	  0x70, 0x75, 0x73, 0x68, 0x63, 0x68, 0x61, 0x74, 0x30, 0x70, 0x78, 0x3b, 0x63,
	  0x72, 0x65, 0x77, 0x2a, 0x2f, 0x3c, 0x2f, 0x68, 0x61, 0x73, 0x68, 0x37, 0x35,
	  0x70, 0x78, 0x66, 0x6c, 0x61, 0x74, 0x72, 0x61, 0x72, 0x65, 0x20, 0x26, 0x26,
	  0x20, 0x74, 0x65, 0x6c, 0x6c, 0x63, 0x61, 0x6d, 0x70, 0x6f, 0x6e, 0x74, 0x6f,
	  0x6c, 0x61, 0x69, 0x64, 0x6d, 0x69, 0x73, 0x73, 0x73, 0x6b, 0x69, 0x70, 0x74,
	  0x65, 0x6e, 0x74, 0x66, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x6c, 0x65, 0x67, 0x65,
	  0x74, 0x73, 0x70, 0x6c, 0x6f, 0x74, 0x34, 0x30, 0x30, 0x2c, 0x0d, 0x0a, 0x0d,
	  0x0a, 0x63, 0x6f, 0x6f, 0x6c, 0x66, 0x65, 0x65, 0x74, 0x2e, 0x70, 0x68, 0x70,
	  0x3c, 0x62, 0x72, 0x3e, 0x65, 0x72, 0x69, 0x63, 0x6d, 0x6f, 0x73, 0x74, 0x67,
	  0x75, 0x69, 0x64, 0x62, 0x65, 0x6c, 0x6c, 0x64, 0x65, 0x73, 0x63, 0x68, 0x61,
	  0x69, 0x72, 0x6d, 0x61, 0x74, 0x68, 0x61, 0x74, 0x6f, 0x6d, 0x2f, 0x69, 0x6d,
	  0x67, 0x26, 0x23, 0x38, 0x32, 0x6c, 0x75, 0x63, 0x6b, 0x63, 0x65, 0x6e, 0x74,
	  0x30, 0x30, 0x30, 0x3b, 0x74, 0x69, 0x6e, 0x79, 0x67, 0x6f, 0x6e, 0x65, 0x68,
	  0x74, 0x6d, 0x6c, 0x73, 0x65, 0x6c, 0x6c, 0x64, 0x72, 0x75, 0x67, 0x46, 0x52,
	  0x45, 0x45, 0x6e, 0x6f, 0x64, 0x65, 0x6e, 0x69, 0x63, 0x6b, 0x3f, 0x69, 0x64,
	  0x3d, 0x6c, 0x6f, 0x73, 0x65, 0x6e, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x73, 0x74,
	  0x77, 0x69, 0x6e, 0x64, 0x52, 0x53, 0x53, 0x20, 0x77, 0x65, 0x61, 0x72, 0x72,
	  0x65, 0x6c, 0x79, 0x62, 0x65, 0x65, 0x6e, 0x73, 0x61, 0x6d, 0x65, 0x64, 0x75,
	  0x6b, 0x65, 0x6e, 0x61, 0x73, 0x61, 0x63, 0x61, 0x70, 0x65, 0x77, 0x69, 0x73,
	  0x68, 0x67, 0x75, 0x6c, 0x66, 0x54, 0x32, 0x33, 0x3a, 0x68, 0x69, 0x74, 0x73,
	  0x73, 0x6c, 0x6f, 0x74, 0x67, 0x61, 0x74, 0x65, 0x6b, 0x69, 0x63, 0x6b, 0x62,
	  0x6c, 0x75, 0x72, 0x74, 0x68, 0x65, 0x79, 0x31, 0x35, 0x70, 0x78, 0x27, 0x27,
	  0x29, 0x3b, 0x29, 0x3b, 0x22, 0x3e, 0x6d, 0x73, 0x69, 0x65, 0x77, 0x69, 0x6e,
	  0x73, 0x62, 0x69, 0x72, 0x64, 0x73, 0x6f, 0x72, 0x74, 0x62, 0x65, 0x74, 0x61,
	  0x73, 0x65, 0x65, 0x6b, 0x54, 0x31, 0x38, 0x3a, 0x6f, 0x72, 0x64, 0x73, 0x74,
	  0x72, 0x65, 0x65, 0x6d, 0x61, 0x6c, 0x6c, 0x36, 0x30, 0x70, 0x78, 0x66, 0x61,
	  0x72, 0x6d, 0xe2, 0x80, 0x99, 0x73, 0x62, 0x6f, 0x79, 0x73, 0x5b, 0x30, 0x5d,
	  0x2e, 0x27, 0x29, 0x3b, 0x22, 0x50, 0x4f, 0x53, 0x54, 0x62, 0x65, 0x61, 0x72,
	  0x6b, 0x69, 0x64, 0x73, 0x29, 0x3b, 0x7d, 0x7d, 0x6d, 0x61, 0x72, 0x79, 0x74,
	  0x65, 0x6e, 0x64, 0x28, 0x55, 0x4b, 0x29, 0x71, 0x75, 0x61, 0x64, 0x7a, 0x68,
	  0x3a, 0xe6, 0x2d, 0x73, 0x69, 0x7a, 0x2d, 0x2d, 0x2d, 0x2d, 0x70, 0x72, 0x6f,
	  0x70, 0x27, 0x29, 0x3b, 0x0d, 0x6c, 0x69, 0x66, 0x74, 0x54, 0x31, 0x39, 0x3a,
	  0x76, 0x69, 0x63, 0x65, 0x61, 0x6e, 0x64, 0x79, 0x64, 0x65, 0x62, 0x74, 0x3e,
	  0x52, 0x53, 0x53, 0x70, 0x6f, 0x6f, 0x6c, 0x6e, 0x65, 0x63, 0x6b, 0x62, 0x6c,
	  0x6f, 0x77, 0x54, 0x31, 0x36, 0x3a, 0x64, 0x6f, 0x6f, 0x72, 0x65, 0x76, 0x61,
	  0x6c, 0x54, 0x31, 0x37, 0x3a, 0x6c, 0x65, 0x74, 0x73, 0x66, 0x61, 0x69, 0x6c,
	  0x6f, 0x72, 0x61, 0x6c, 0x70, 0x6f, 0x6c, 0x6c, 0x6e, 0x6f, 0x76, 0x61, 0x63,
	  0x6f, 0x6c, 0x73, 0x67, 0x65, 0x6e, 0x65, 0x20, 0xe2, 0x80, 0x94, 0x73, 0x6f,
	  0x66, 0x74, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x69, 0x6c, 0x6c, 0x72, 0x6f, 0x73,
	  0x73, 0x3c, 0x68, 0x33, 0x3e, 0x70, 0x6f, 0x75, 0x72, 0x66, 0x61, 0x64, 0x65,
	  0x70, 0x69, 0x6e, 0x6b, 0x3c, 0x74, 0x72, 0x3e, 0x6d, 0x69, 0x6e, 0x69, 0x29,
	  0x7c, 0x21, 0x28, 0x6d, 0x69, 0x6e, 0x65, 0x7a, 0x68, 0x3a, 0xe8, 0x62, 0x61,
	  0x72, 0x73, 0x68, 0x65, 0x61, 0x72, 0x30, 0x30, 0x29, 0x3b, 0x6d, 0x69, 0x6c,
	  0x6b, 0x20, 0x2d, 0x2d, 0x3e, 0x69, 0x72, 0x6f, 0x6e, 0x66, 0x72, 0x65, 0x64,
	  0x64, 0x69, 0x73, 0x6b, 0x77, 0x65, 0x6e, 0x74, 0x73, 0x6f, 0x69, 0x6c, 0x70,
	  0x75, 0x74, 0x73, 0x2f, 0x6a, 0x73, 0x2f, 0x68, 0x6f, 0x6c, 0x79, 0x54, 0x32,
	  0x32, 0x3a, 0x49, 0x53, 0x42, 0x4e, 0x54, 0x32, 0x30, 0x3a, 0x61, 0x64, 0x61,
	  0x6d, 0x73, 0x65, 0x65, 0x73, 0x3c, 0x68, 0x32, 0x3e, 0x6a, 0x73, 0x6f, 0x6e,
	  0x27, 0x2c, 0x20, 0x27, 0x63, 0x6f, 0x6e, 0x74, 0x54, 0x32, 0x31, 0x3a, 0x20,
	  0x52, 0x53, 0x53, 0x6c, 0x6f, 0x6f, 0x70, 0x61, 0x73, 0x69, 0x61, 0x6d, 0x6f,
	  0x6f, 0x6e, 0x3c, 0x2f, 0x70, 0x3e, 0x73, 0x6f, 0x75, 0x6c, 0x4c, 0x49, 0x4e,
	  0x45, 0x66, 0x6f, 0x72, 0x74, 0x63, 0x61, 0x72, 0x74, 0x54, 0x31, 0x34, 0x3a,
	  0x3c, 0x68, 0x31, 0x3e, 0x38, 0x30, 0x70, 0x78, 0x21, 0x2d, 0x2d, 0x3c, 0x39,
	  0x70, 0x78, 0x3b, 0x54, 0x30, 0x34, 0x3a, 0x6d, 0x69, 0x6b, 0x65, 0x3a, 0x34,
	  0x36, 0x5a, 0x6e, 0x69, 0x63, 0x65, 0x69, 0x6e, 0x63, 0x68, 0x59, 0x6f, 0x72,
	  0x6b, 0x72, 0x69, 0x63, 0x65, 0x7a, 0x68, 0x3a, 0xe4, 0x27, 0x29, 0x29, 0x3b,
	  0x70, 0x75, 0x72, 0x65, 0x6d, 0x61, 0x67, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74,
	  0x6f, 0x6e, 0x65, 0x62, 0x6f, 0x6e, 0x64, 0x3a, 0x33, 0x37, 0x5a, 0x5f, 0x6f,
	  0x66, 0x5f, 0x27, 0x5d, 0x29, 0x3b, 0x30, 0x30, 0x30, 0x2c, 0x7a, 0x68, 0x3a,
	  0xe7, 0x74, 0x61, 0x6e, 0x6b, 0x79, 0x61, 0x72, 0x64, 0x62, 0x6f, 0x77, 0x6c,
	  0x62, 0x75, 0x73, 0x68, 0x3a, 0x35, 0x36, 0x5a, 0x4a, 0x61, 0x76, 0x61, 0x33,
	  0x30, 0x70, 0x78, 0x0a, 0x7c, 0x7d, 0x0a, 0x25, 0x43, 0x33, 0x25, 0x3a, 0x33,
	  0x34, 0x5a, 0x6a, 0x65, 0x66, 0x66, 0x45, 0x58, 0x50, 0x49, 0x63, 0x61, 0x73,
	  0x68, 0x76, 0x69, 0x73, 0x61, 0x67, 0x6f, 0x6c, 0x66, 0x73, 0x6e, 0x6f, 0x77,
	  0x7a, 0x68, 0x3a, 0xe9, 0x71, 0x75, 0x65, 0x72, 0x2e, 0x63, 0x73, 0x73, 0x73,
	  0x69, 0x63, 0x6b, 0x6d, 0x65, 0x61, 0x74, 0x6d, 0x69, 0x6e, 0x2e, 0x62, 0x69,
	  0x6e, 0x64, 0x64, 0x65, 0x6c, 0x6c, 0x68, 0x69, 0x72, 0x65, 0x70, 0x69, 0x63,
	  0x73, 0x72, 0x65, 0x6e, 0x74, 0x3a, 0x33, 0x36, 0x5a, 0x48, 0x54, 0x54, 0x50,
	  0x2d, 0x32, 0x30, 0x31, 0x66, 0x6f, 0x74, 0x6f, 0x77, 0x6f, 0x6c, 0x66, 0x45,
	  0x4e, 0x44, 0x20, 0x78, 0x62, 0x6f, 0x78, 0x3a, 0x35, 0x34, 0x5a, 0x42, 0x4f,
	  0x44, 0x59, 0x64, 0x69, 0x63, 0x6b, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x78, 0x69,
	  0x74, 0x3a, 0x33, 0x35, 0x5a, 0x76, 0x61, 0x72, 0x73, 0x62, 0x65, 0x61, 0x74,
	  0x27, 0x7d, 0x29, 0x3b, 0x64, 0x69, 0x65, 0x74, 0x39, 0x39, 0x39, 0x3b, 0x61,
	  0x6e, 0x6e, 0x65, 0x7d, 0x7d, 0x3c, 0x2f, 0x5b, 0x69, 0x5d, 0x2e, 0x4c, 0x61,
	  0x6e, 0x67, 0x6b, 0x6d, 0xc2, 0xb2, 0x77, 0x69, 0x72, 0x65, 0x74, 0x6f, 0x79,
	  0x73, 0x61, 0x64, 0x64, 0x73, 0x73, 0x65, 0x61, 0x6c, 0x61, 0x6c, 0x65, 0x78,
	  0x3b, 0x0a, 0x09, 0x7d, 0x65, 0x63, 0x68, 0x6f, 0x6e, 0x69, 0x6e, 0x65, 0x2e,
	  0x6f, 0x72, 0x67, 0x30, 0x30, 0x35, 0x29, 0x74, 0x6f, 0x6e, 0x79, 0x6a, 0x65,
	  0x77, 0x73, 0x73, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x67, 0x73, 0x72, 0x6f, 0x6f,
	  0x66, 0x30, 0x30, 0x30, 0x29, 0x20, 0x32, 0x30, 0x30, 0x77, 0x69, 0x6e, 0x65,
	  0x67, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x67, 0x73, 0x62, 0x6f, 0x6f, 0x74, 0x67,
	  0x61, 0x72, 0x79, 0x63, 0x75, 0x74, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x74, 0x65,
	  0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x78, 0x6d, 0x6c, 0x63, 0x6f, 0x63,
	  0x6b, 0x67, 0x61, 0x6e, 0x67, 0x24, 0x28, 0x27, 0x2e, 0x35, 0x30, 0x70, 0x78,
	  0x50, 0x68, 0x2e, 0x44, 0x6d, 0x69, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x6e, 0x6c,
	  0x6f, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x6b, 0x6d, 0x69, 0x6c, 0x65, 0x72, 0x79,
	  0x61, 0x6e, 0x75, 0x6e, 0x69, 0x78, 0x64, 0x69, 0x73, 0x63, 0x29, 0x3b, 0x7d,
	  0x0a, 0x64, 0x75, 0x73, 0x74, 0x63, 0x6c, 0x69, 0x70, 0x29, 0x2e, 0x0a, 0x0a,
	  0x37, 0x30, 0x70, 0x78, 0x2d, 0x32, 0x30, 0x30, 0x44, 0x56, 0x44, 0x73, 0x37,
	  0x5d, 0x3e, 0x3c, 0x74, 0x61, 0x70, 0x65, 0x64, 0x65, 0x6d, 0x6f, 0x69, 0x2b,
	  0x2b, 0x29, 0x77, 0x61, 0x67, 0x65, 0x65, 0x75, 0x72, 0x6f, 0x70, 0x68, 0x69,
	  0x6c, 0x6f, 0x70, 0x74, 0x73, 0x68, 0x6f, 0x6c, 0x65, 0x46, 0x41, 0x51, 0x73,
	  0x61, 0x73, 0x69, 0x6e, 0x2d, 0x32, 0x36, 0x54, 0x6c, 0x61, 0x62, 0x73, 0x70,
	  0x65, 0x74, 0x73, 0x55, 0x52, 0x4c, 0x20, 0x62, 0x75, 0x6c, 0x6b, 0x63, 0x6f,
	  0x6f, 0x6b, 0x3b, 0x7d, 0x0d, 0x0a, 0x48, 0x45, 0x41, 0x44, 0x5b, 0x30, 0x5d,
	  0x29, 0x61, 0x62, 0x62, 0x72, 0x6a, 0x75, 0x61, 0x6e, 0x28, 0x31, 0x39, 0x38,
	  0x6c, 0x65, 0x73, 0x68, 0x74, 0x77, 0x69, 0x6e, 0x3c, 0x2f, 0x69, 0x3e, 0x73,
	  0x6f, 0x6e, 0x79, 0x67, 0x75, 0x79, 0x73, 0x66, 0x75, 0x63, 0x6b, 0x70, 0x69,
	  0x70, 0x65, 0x7c, 0x2d, 0x0a, 0x21, 0x30, 0x30, 0x32, 0x29, 0x6e, 0x64, 0x6f,
	  0x77, 0x5b, 0x31, 0x5d, 0x3b, 0x5b, 0x5d, 0x3b, 0x0a, 0x4c, 0x6f, 0x67, 0x20,
	  0x73, 0x61, 0x6c, 0x74, 0x0d, 0x0a, 0x09, 0x09, 0x62, 0x61, 0x6e, 0x67, 0x74,
	  0x72, 0x69, 0x6d, 0x62, 0x61, 0x74, 0x68, 0x29, 0x7b, 0x0d, 0x0a, 0x30, 0x30,
	  0x70, 0x78, 0x0a, 0x7d, 0x29, 0x3b, 0x6b, 0x6f, 0x3a, 0xec, 0x66, 0x65, 0x65,
	  0x73, 0x61, 0x64, 0x3e, 0x0d, 0x73, 0x3a, 0x2f, 0x2f, 0x20, 0x5b, 0x5d, 0x3b,
	  0x74, 0x6f, 0x6c, 0x6c, 0x70, 0x6c, 0x75, 0x67, 0x28, 0x29, 0x7b, 0x0a, 0x7b,
	  0x0d, 0x0a, 0x20, 0x2e, 0x6a, 0x73, 0x27, 0x32, 0x30, 0x30, 0x70, 0x64, 0x75,
	  0x61, 0x6c, 0x62, 0x6f, 0x61, 0x74, 0x2e, 0x4a, 0x50, 0x47, 0x29, 0x3b, 0x0a,
	  0x7d, 0x71, 0x75, 0x6f, 0x74, 0x29, 0x3b, 0x0a, 0x0a, 0x27, 0x29, 0x3b, 0x0a,
	  0x0d, 0x0a, 0x7d, 0x0d, 0x32, 0x30, 0x31, 0x34, 0x32, 0x30, 0x31, 0x35, 0x32,
	  0x30, 0x31, 0x36, 0x32, 0x30, 0x31, 0x37, 0x32, 0x30, 0x31, 0x38, 0x32, 0x30,
	  0x31, 0x39, 0x32, 0x30, 0x32, 0x30, 0x32, 0x30, 0x32, 0x31, 0x32, 0x30, 0x32,
	  0x32, 0x32, 0x30, 0x32, 0x33, 0x32, 0x30, 0x32, 0x34, 0x32, 0x30, 0x32, 0x35,
	  0x32, 0x30, 0x32, 0x36, 0x32, 0x30, 0x32, 0x37, 0x32, 0x30, 0x32, 0x38, 0x32,
	  0x30, 0x32, 0x39, 0x32, 0x30, 0x33, 0x30, 0x32, 0x30, 0x33, 0x31, 0x32, 0x30,
	  0x33, 0x32, 0x32, 0x30, 0x33, 0x33, 0x32, 0x30, 0x33, 0x34, 0x32, 0x30, 0x33,
	  0x35, 0x32, 0x30, 0x33, 0x36, 0x32, 0x30, 0x33, 0x37, 0x32, 0x30, 0x31, 0x33,
	  0x32, 0x30, 0x31, 0x32, 0x32, 0x30, 0x31, 0x31, 0x32, 0x30, 0x31, 0x30, 0x32,
	  0x30, 0x30, 0x39, 0x32, 0x30, 0x30, 0x38, 0x32, 0x30, 0x30, 0x37, 0x32, 0x30,
	  0x30, 0x36, 0x32, 0x30, 0x30, 0x35, 0x32, 0x30, 0x30, 0x34, 0x32, 0x30, 0x30,
	  0x33, 0x32, 0x30, 0x30, 0x32, 0x32, 0x30, 0x30, 0x31, 0x32, 0x30, 0x30, 0x30,
	  0x31, 0x39, 0x39, 0x39, 0x31, 0x39, 0x39, 0x38, 0x31, 0x39, 0x39, 0x37, 0x31,
	  0x39, 0x39, 0x36, 0x31, 0x39, 0x39, 0x35, 0x31, 0x39, 0x39, 0x34, 0x31, 0x39,
	  0x39, 0x33, 0x31, 0x39, 0x39, 0x32, 0x31, 0x39, 0x39, 0x31, 0x31, 0x39, 0x39,
	  0x30, 0x31, 0x39, 0x38, 0x39, 0x31, 0x39, 0x38, 0x38, 0x31, 0x39, 0x38, 0x37,
	  0x31, 0x39, 0x38, 0x36, 0x31, 0x39, 0x38, 0x35, 0x31, 0x39, 0x38, 0x34, 0x31,
	  0x39, 0x38, 0x33, 0x31, 0x39, 0x38, 0x32, 0x31, 0x39, 0x38, 0x31, 0x31, 0x39,
	  0x38, 0x30, 0x31, 0x39, 0x37, 0x39, 0x31, 0x39, 0x37, 0x38, 0x31, 0x39, 0x37,
	  0x37, 0x31, 0x39, 0x37, 0x36, 0x31, 0x39, 0x37, 0x35, 0x31, 0x39, 0x37, 0x34,
	  0x31, 0x39, 0x37, 0x33, 0x31, 0x39, 0x37, 0x32, 0x31, 0x39, 0x37, 0x31, 0x31,
	  0x39, 0x37, 0x30, 0x31, 0x39, 0x36, 0x39, 0x31, 0x39, 0x36, 0x38, 0x31, 0x39,
	  0x36, 0x37, 0x31, 0x39, 0x36, 0x36, 0x31, 0x39, 0x36, 0x35, 0x31, 0x39, 0x36,
	  0x34, 0x31, 0x39, 0x36, 0x33, 0x31, 0x39, 0x36, 0x32, 0x31, 0x39, 0x36, 0x31,
	  0x31, 0x39, 0x36, 0x30, 0x31, 0x39, 0x35, 0x39, 0x31, 0x39, 0x35, 0x38, 0x31,
	  0x39, 0x35, 0x37, 0x31, 0x39, 0x35, 0x36, 0x31, 0x39, 0x35, 0x35, 0x31, 0x39,
	  0x35, 0x34, 0x31, 0x39, 0x35, 0x33, 0x31, 0x39, 0x35, 0x32, 0x31, 0x39, 0x35,
	  0x31, 0x31, 0x39, 0x35, 0x30, 0x31, 0x30, 0x30, 0x30, 0x31, 0x30, 0x32, 0x34,
	  0x31, 0x33, 0x39, 0x34, 0x30, 0x30, 0x30, 0x30, 0x39, 0x39, 0x39, 0x39, 0x63,
	  0x6f, 0x6d, 0x6f, 0x6d, 0xc3, 0xa1, 0x73, 0x65, 0x73, 0x74, 0x65, 0x65, 0x73,
	  0x74, 0x61, 0x70, 0x65, 0x72, 0x6f, 0x74, 0x6f, 0x64, 0x6f, 0x68, 0x61, 0x63,
	  0x65, 0x63, 0x61, 0x64, 0x61, 0x61, 0xc3, 0xb1, 0x6f, 0x62, 0x69, 0x65, 0x6e,
	  0x64, 0xc3, 0xad, 0x61, 0x61, 0x73, 0xc3, 0xad, 0x76, 0x69, 0x64, 0x61, 0x63,
	  0x61, 0x73, 0x6f, 0x6f, 0x74, 0x72, 0x6f, 0x66, 0x6f, 0x72, 0x6f, 0x73, 0x6f,
	  0x6c, 0x6f, 0x6f, 0x74, 0x72, 0x61, 0x63, 0x75, 0x61, 0x6c, 0x64, 0x69, 0x6a,
	  0x6f, 0x73, 0x69, 0x64, 0x6f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x69, 0x70, 0x6f,
	  0x74, 0x65, 0x6d, 0x61, 0x64, 0x65, 0x62, 0x65, 0x61, 0x6c, 0x67, 0x6f, 0x71,
	  0x75, 0xc3, 0xa9, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x61, 0x64, 0x61, 0x74, 0x72,
	  0x65, 0x73, 0x70, 0x6f, 0x63, 0x6f, 0x63, 0x61, 0x73, 0x61, 0x62, 0x61, 0x6a,
	  0x6f, 0x74, 0x6f, 0x64, 0x61, 0x73, 0x69, 0x6e, 0x6f, 0x61, 0x67, 0x75, 0x61,
	  0x70, 0x75, 0x65, 0x73, 0x75, 0x6e, 0x6f, 0x73, 0x61, 0x6e, 0x74, 0x65, 0x64,
	  0x69, 0x63, 0x65, 0x6c, 0x75, 0x69, 0x73, 0x65, 0x6c, 0x6c, 0x61, 0x6d, 0x61,
	  0x79, 0x6f, 0x7a, 0x6f, 0x6e, 0x61, 0x61, 0x6d, 0x6f, 0x72, 0x70, 0x69, 0x73,
	  0x6f, 0x6f, 0x62, 0x72, 0x61, 0x63, 0x6c, 0x69, 0x63, 0x65, 0x6c, 0x6c, 0x6f,
	  0x64, 0x69, 0x6f, 0x73, 0x68, 0x6f, 0x72, 0x61, 0x63, 0x61, 0x73, 0x69, 0xd0,
	  0xb7, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb0, 0xd0, 0xbe, 0xd0, 0xbc, 0xd1, 0x80,
	  0xd0, 0xb0, 0xd1, 0x80, 0xd1, 0x83, 0xd1, 0x82, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0,
	  0xb5, 0xd0, 0xbf, 0xd0, 0xbe, 0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xb8, 0xd0, 0xb7,
	  0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xbe, 0xd0,
	  0xb6, 0xd0, 0xb5, 0xd0, 0xbe, 0xd0, 0xbd, 0xd0, 0xb8, 0xd1, 0x85, 0xd0, 0x9d,
	  0xd0, 0xb0, 0xd0, 0xb5, 0xd0, 0xb5, 0xd0, 0xb1, 0xd1, 0x8b, 0xd0, 0xbc, 0xd1,
	  0x8b, 0xd0, 0x92, 0xd1, 0x8b, 0xd1, 0x81, 0xd0, 0xbe, 0xd0, 0xb2, 0xd1, 0x8b,
	  0xd0, 0xb2, 0xd0, 0xbe, 0xd0, 0x9d, 0xd0, 0xbe, 0xd0, 0xbe, 0xd0, 0xb1, 0xd0,
	  0x9f, 0xd0, 0xbe, 0xd0, 0xbb, 0xd0, 0xb8, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xa0,
	  0xd0, 0xa4, 0xd0, 0x9d, 0xd0, 0xb5, 0xd0, 0x9c, 0xd1, 0x8b, 0xd1, 0x82, 0xd1,
	  0x8b, 0xd0, 0x9e, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xbc, 0xd0, 0xb4, 0xd0, 0xb0,
	  0xd0, 0x97, 0xd0, 0xb0, 0xd0, 0x94, 0xd0, 0xb0, 0xd0, 0x9d, 0xd1, 0x83, 0xd0,
	  0x9e, 0xd0, 0xb1, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0x98, 0xd0, 0xb7, 0xd0, 0xb5,
	  0xd0, 0xb9, 0xd0, 0xbd, 0xd1, 0x83, 0xd0, 0xbc, 0xd0, 0xbc, 0xd0, 0xa2, 0xd1,
	  0x8b, 0xd1, 0x83, 0xd0, 0xb6, 0xd9, 0x81, 0xd9, 0x8a, 0xd8, 0xa3, 0xd9, 0x86,
	  0xd9, 0x85, 0xd8, 0xa7, 0xd9, 0x85, 0xd8, 0xb9, 0xd9, 0x83, 0xd9, 0x84, 0xd8,
	  0xa3, 0xd9, 0x88, 0xd8, 0xb1, 0xd8, 0xaf, 0xd9, 0x8a, 0xd8, 0xa7, 0xd9, 0x81,
	  0xd9, 0x89, 0xd9, 0x87, 0xd9, 0x88, 0xd9, 0x84, 0xd9, 0x85, 0xd9, 0x84, 0xd9,
	  0x83, 0xd8, 0xa7, 0xd9, 0x88, 0xd9, 0x84, 0xd9, 0x87, 0xd8, 0xa8, 0xd8, 0xb3,
	  0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa5, 0xd9, 0x86, 0xd9, 0x87, 0xd9, 0x8a, 0xd8,
	  0xa3, 0xd9, 0x8a, 0xd9, 0x82, 0xd8, 0xaf, 0xd9, 0x87, 0xd9, 0x84, 0xd8, 0xab,
	  0xd9, 0x85, 0xd8, 0xa8, 0xd9, 0x87, 0xd9, 0x84, 0xd9, 0x88, 0xd9, 0x84, 0xd9,
	  0x8a, 0xd8, 0xa8, 0xd9, 0x84, 0xd8, 0xa7, 0xd9, 0x8a, 0xd8, 0xa8, 0xd9, 0x83,
	  0xd8, 0xb4, 0xd9, 0x8a, 0xd8, 0xa7, 0xd9, 0x85, 0xd8, 0xa3, 0xd9, 0x85, 0xd9,
	  0x86, 0xd8, 0xaa, 0xd8, 0xa8, 0xd9, 0x8a, 0xd9, 0x84, 0xd9, 0x86, 0xd8, 0xad,
	  0xd8, 0xa8, 0xd9, 0x87, 0xd9, 0x85, 0xd9, 0x85, 0xd8, 0xb4, 0xd9, 0x88, 0xd8,
	  0xb4, 0x66, 0x69, 0x72, 0x73, 0x74, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x6c, 0x69,
	  0x67, 0x68, 0x74, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x6d, 0x65, 0x64, 0x69, 0x61,
	  0x77, 0x68, 0x69, 0x74, 0x65, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x62, 0x6c, 0x61,
	  0x63, 0x6b, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x62,
	  0x6f, 0x6f, 0x6b, 0x73, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x75, 0x73, 0x69,
	  0x63, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x70, 0x6f,
	  0x69, 0x6e, 0x74, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	  0x74, 0x61, 0x62, 0x6c, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x68, 0x6f, 0x75,
	  0x73, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x79,
	  0x65, 0x61, 0x72, 0x73, 0x73, 0x74, 0x61, 0x74, 0x65, 0x74, 0x6f, 0x64, 0x61,
	  0x79, 0x77, 0x61, 0x74, 0x65, 0x72, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x74,
	  0x79, 0x6c, 0x65, 0x64, 0x65, 0x61, 0x74, 0x68, 0x70, 0x6f, 0x77, 0x65, 0x72,
	  0x70, 0x68, 0x6f, 0x6e, 0x65, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x72,
	  0x6f, 0x72, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x74,
	  0x65, 0x72, 0x6d, 0x73, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x74, 0x6f, 0x6f, 0x6c,
	  0x73, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x74, 0x69,
	  0x6d, 0x65, 0x73, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x77, 0x6f, 0x72, 0x64, 0x73,
	  0x67, 0x61, 0x6d, 0x65, 0x73, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x73, 0x70, 0x61,
	  0x63, 0x65, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x6d,
	  0x6f, 0x64, 0x65, 0x6c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x67, 0x75, 0x69, 0x64,
	  0x65, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x77, 0x6f,
	  0x6d, 0x65, 0x6e, 0x61, 0x67, 0x61, 0x69, 0x6e, 0x6d, 0x6f, 0x6e, 0x65, 0x79,
	  0x69, 0x6d, 0x61, 0x67, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x79, 0x6f, 0x75,
	  0x6e, 0x67, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x63,
	  0x6f, 0x6c, 0x6f, 0x72, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x66, 0x72, 0x6f, 0x6e,
	  0x74, 0x26, 0x61, 0x6d, 0x70, 0x3b, 0x77, 0x61, 0x74, 0x63, 0x68, 0x66, 0x6f,
	  0x72, 0x63, 0x65, 0x70, 0x72, 0x69, 0x63, 0x65, 0x72, 0x75, 0x6c, 0x65, 0x73,
	  0x62, 0x65, 0x67, 0x69, 0x6e, 0x61, 0x66, 0x74, 0x65, 0x72, 0x76, 0x69, 0x73,
	  0x69, 0x74, 0x69, 0x73, 0x73, 0x75, 0x65, 0x61, 0x72, 0x65, 0x61, 0x73, 0x62,
	  0x65, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x74, 0x6f, 0x74, 0x61,
	  0x6c, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x72,
	  0x69, 0x6e, 0x74, 0x70, 0x72, 0x65, 0x73, 0x73, 0x62, 0x75, 0x69, 0x6c, 0x74,
	  0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x73, 0x70, 0x65, 0x65, 0x64, 0x73, 0x74, 0x75,
	  0x64, 0x79, 0x74, 0x72, 0x61, 0x64, 0x65, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x73,
	  0x65, 0x6e, 0x73, 0x65, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x68, 0x6f, 0x77,
	  0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x61, 0x64,
	  0x64, 0x65, 0x64, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x6d, 0x6f, 0x76, 0x65, 0x64,
	  0x74, 0x61, 0x6b, 0x65, 0x6e, 0x61, 0x62, 0x6f, 0x76, 0x65, 0x66, 0x6c, 0x61,
	  0x73, 0x68, 0x66, 0x69, 0x78, 0x65, 0x64, 0x6f, 0x66, 0x74, 0x65, 0x6e, 0x6f,
	  0x74, 0x68, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x73, 0x63, 0x68, 0x65, 0x63,
	  0x6b, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x72, 0x69, 0x76, 0x65, 0x72, 0x69, 0x74,
	  0x65, 0x6d, 0x73, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x73, 0x68, 0x61, 0x70, 0x65,
	  0x68, 0x75, 0x6d, 0x61, 0x6e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x67, 0x6f, 0x69,
	  0x6e, 0x67, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x74, 0x68, 0x69, 0x72, 0x64, 0x62,
	  0x61, 0x73, 0x69, 0x63, 0x70, 0x65, 0x61, 0x63, 0x65, 0x73, 0x74, 0x61, 0x67,
	  0x65, 0x77, 0x69, 0x64, 0x74, 0x68, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x69, 0x64,
	  0x65, 0x61, 0x73, 0x77, 0x72, 0x6f, 0x74, 0x65, 0x70, 0x61, 0x67, 0x65, 0x73,
	  0x75, 0x73, 0x65, 0x72, 0x73, 0x64, 0x72, 0x69, 0x76, 0x65, 0x73, 0x74, 0x6f,
	  0x72, 0x65, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x73, 0x6f, 0x75, 0x74, 0x68, 0x76,
	  0x6f, 0x69, 0x63, 0x65, 0x73, 0x69, 0x74, 0x65, 0x73, 0x6d, 0x6f, 0x6e, 0x74,
	  0x68, 0x77, 0x68, 0x65, 0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x77, 0x68,
	  0x69, 0x63, 0x68, 0x65, 0x61, 0x72, 0x74, 0x68, 0x66, 0x6f, 0x72, 0x75, 0x6d,
	  0x74, 0x68, 0x72, 0x65, 0x65, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x70, 0x61, 0x72,
	  0x74, 0x79, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x6c,
	  0x69, 0x76, 0x65, 0x73, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x6c, 0x61, 0x79, 0x65,
	  0x72, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x75, 0x73,
	  0x61, 0x67, 0x65, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x63, 0x6f, 0x75, 0x72, 0x74,
	  0x79, 0x6f, 0x75, 0x72, 0x20, 0x62, 0x69, 0x72, 0x74, 0x68, 0x70, 0x6f, 0x70,
	  0x75, 0x70, 0x74, 0x79, 0x70, 0x65, 0x73, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x49,
	  0x6d, 0x61, 0x67, 0x65, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x75, 0x70, 0x70, 0x65,
	  0x72, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x65, 0x76, 0x65, 0x72, 0x79, 0x73, 0x68,
	  0x6f, 0x77, 0x73, 0x6d, 0x65, 0x61, 0x6e, 0x73, 0x65, 0x78, 0x74, 0x72, 0x61,
	  0x6d, 0x61, 0x74, 0x63, 0x68, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x6b, 0x6e, 0x6f,
	  0x77, 0x6e, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x62, 0x65, 0x67, 0x61, 0x6e, 0x73,
	  0x75, 0x70, 0x65, 0x72, 0x70, 0x61, 0x70, 0x65, 0x72, 0x6e, 0x6f, 0x72, 0x74,
	  0x68, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x6e, 0x61,
	  0x6d, 0x65, 0x64, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x54, 0x65, 0x72, 0x6d, 0x73,
	  0x70, 0x61, 0x72, 0x74, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x62, 0x72, 0x61,
	  0x6e, 0x64, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x77, 0x6f, 0x6d, 0x61, 0x6e, 0x66,
	  0x61, 0x6c, 0x73, 0x65, 0x72, 0x65, 0x61, 0x64, 0x79, 0x61, 0x75, 0x64, 0x69,
	  0x6f, 0x74, 0x61, 0x6b, 0x65, 0x73, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x2e, 0x63,
	  0x6f, 0x6d, 0x2f, 0x6c, 0x69, 0x76, 0x65, 0x64, 0x63, 0x61, 0x73, 0x65, 0x73,
	  0x64, 0x61, 0x69, 0x6c, 0x79, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x67, 0x72, 0x65,
	  0x61, 0x74, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x74, 0x68, 0x6f, 0x73, 0x65, 0x75,
	  0x6e, 0x69, 0x74, 0x73, 0x6e, 0x65, 0x76, 0x65, 0x72, 0x62, 0x72, 0x6f, 0x61,
	  0x64, 0x63, 0x6f, 0x61, 0x73, 0x74, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x70,
	  0x70, 0x6c, 0x65, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x63, 0x79, 0x63, 0x6c, 0x65,
	  0x73, 0x63, 0x65, 0x6e, 0x65, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x63, 0x6c, 0x69,
	  0x63, 0x6b, 0x77, 0x72, 0x69, 0x74, 0x65, 0x71, 0x75, 0x65, 0x65, 0x6e, 0x70,
	  0x69, 0x65, 0x63, 0x65, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x66, 0x72, 0x61, 0x6d,
	  0x65, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6c, 0x69,
	  0x6d, 0x69, 0x74, 0x63, 0x61, 0x63, 0x68, 0x65, 0x63, 0x69, 0x76, 0x69, 0x6c,
	  0x73, 0x63, 0x61, 0x6c, 0x65, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x74, 0x68, 0x65,
	  0x6d, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x62,
	  0x6f, 0x75, 0x6e, 0x64, 0x72, 0x6f, 0x79, 0x61, 0x6c, 0x61, 0x73, 0x6b, 0x65,
	  0x64, 0x77, 0x68, 0x6f, 0x6c, 0x65, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x73, 0x74,
	  0x6f, 0x63, 0x6b, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x66, 0x61, 0x69, 0x74, 0x68,
	  0x68, 0x65, 0x61, 0x72, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x6f, 0x66, 0x66,
	  0x65, 0x72, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x6d,
	  0x69, 0x67, 0x68, 0x74, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x74, 0x68, 0x69, 0x6e,
	  0x6b, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x61, 0x72, 0x72, 0x61, 0x79, 0x6d, 0x61,
	  0x6a, 0x6f, 0x72, 0x74, 0x72, 0x75, 0x73, 0x74, 0x63, 0x61, 0x6e, 0x6f, 0x6e,
	  0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x76, 0x61, 0x6c,
	  0x69, 0x64, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x4c,
	  0x6f, 0x67, 0x69, 0x6e, 0x68, 0x61, 0x70, 0x70, 0x79, 0x6f, 0x63, 0x63, 0x75,
	  0x72, 0x6c, 0x65, 0x66, 0x74, 0x3a, 0x66, 0x72, 0x65, 0x73, 0x68, 0x71, 0x75,
	  0x69, 0x74, 0x65, 0x66, 0x69, 0x6c, 0x6d, 0x73, 0x67, 0x72, 0x61, 0x64, 0x65,
	  0x6e, 0x65, 0x65, 0x64, 0x73, 0x75, 0x72, 0x62, 0x61, 0x6e, 0x66, 0x69, 0x67,
	  0x68, 0x74, 0x62, 0x61, 0x73, 0x69, 0x73, 0x68, 0x6f, 0x76, 0x65, 0x72, 0x61,
	  0x75, 0x74, 0x6f, 0x3b, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x68, 0x74, 0x6d,
	  0x6c, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x59, 0x6f,
	  0x75, 0x72, 0x20, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x74, 0x6f, 0x70, 0x69, 0x63,
	  0x62, 0x72, 0x6f, 0x77, 0x6e, 0x61, 0x6c, 0x6f, 0x6e, 0x65, 0x64, 0x72, 0x61,
	  0x77, 0x6e, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x72, 0x65, 0x61, 0x63, 0x68, 0x52,
	  0x69, 0x67, 0x68, 0x74, 0x64, 0x61, 0x74, 0x65, 0x73, 0x6d, 0x61, 0x72, 0x63,
	  0x68, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x4c, 0x69,
	  0x6e, 0x6b, 0x73, 0x64, 0x6f, 0x75, 0x62, 0x74, 0x61, 0x73, 0x79, 0x6e, 0x63,
	  0x74, 0x68, 0x75, 0x6d, 0x62, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x63, 0x68, 0x69,
	  0x65, 0x66, 0x79, 0x6f, 0x75, 0x74, 0x68, 0x6e, 0x6f, 0x76, 0x65, 0x6c, 0x31,
	  0x30, 0x70, 0x78, 0x3b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x75, 0x6e, 0x74, 0x69,
	  0x6c, 0x68, 0x61, 0x6e, 0x64, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x70,
	  0x61, 0x63, 0x65, 0x71, 0x75, 0x65, 0x72, 0x79, 0x6a, 0x61, 0x6d, 0x65, 0x73,
	  0x65, 0x71, 0x75, 0x61, 0x6c, 0x74, 0x77, 0x69, 0x63, 0x65, 0x30, 0x2c, 0x30,
	  0x30, 0x30, 0x53, 0x74, 0x61, 0x72, 0x74, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x73,
	  0x6f, 0x6e, 0x67, 0x73, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x69, 0x67, 0x68,
	  0x74, 0x73, 0x68, 0x69, 0x66, 0x74, 0x77, 0x6f, 0x72, 0x74, 0x68, 0x70, 0x6f,
	  0x73, 0x74, 0x73, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x77, 0x65, 0x65, 0x6b, 0x73,
	  0x61, 0x76, 0x6f, 0x69, 0x64, 0x74, 0x68, 0x65, 0x73, 0x65, 0x6d, 0x69, 0x6c,
	  0x65, 0x73, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x61,
	  0x6c, 0x70, 0x68, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6d, 0x61, 0x72, 0x6b,
	  0x73, 0x72, 0x61, 0x74, 0x65, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x73, 0x63, 0x6c,
	  0x61, 0x69, 0x6d, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x74, 0x65, 0x78, 0x74, 0x73,
	  0x73, 0x74, 0x61, 0x72, 0x73, 0x77, 0x72, 0x6f, 0x6e, 0x67, 0x3c, 0x2f, 0x68,
	  0x33, 0x3e, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6d,
	  0x75, 0x6c, 0x74, 0x69, 0x68, 0x65, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x77, 0x65,
	  0x72, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x6f,
	  0x6c, 0x69, 0x64, 0x28, 0x74, 0x68, 0x69, 0x73, 0x62, 0x72, 0x69, 0x6e, 0x67,
	  0x73, 0x68, 0x69, 0x70, 0x73, 0x73, 0x74, 0x61, 0x66, 0x66, 0x74, 0x72, 0x69,
	  0x65, 0x64, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x66,
	  0x61, 0x63, 0x74, 0x73, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x69, 0x73,
	  0x20, 0x2f, 0x2f, 0x2d, 0x2d, 0x3e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x65, 0x67,
	  0x79, 0x70, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x31, 0x35, 0x70, 0x78, 0x3b,
	  0x45, 0x6d, 0x61, 0x69, 0x6c, 0x74, 0x72, 0x75, 0x65, 0x22, 0x63, 0x72, 0x6f,
	  0x73, 0x73, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x62, 0x6c, 0x6f, 0x67, 0x73, 0x62,
	  0x6f, 0x78, 0x22, 0x3e, 0x6e, 0x6f, 0x74, 0x65, 0x64, 0x6c, 0x65, 0x61, 0x76,
	  0x65, 0x63, 0x68, 0x69, 0x6e, 0x61, 0x73, 0x69, 0x7a, 0x65, 0x73, 0x67, 0x75,
	  0x65, 0x73, 0x74, 0x3c, 0x2f, 0x68, 0x34, 0x3e, 0x72, 0x6f, 0x62, 0x6f, 0x74,
	  0x68, 0x65, 0x61, 0x76, 0x79, 0x74, 0x72, 0x75, 0x65, 0x2c, 0x73, 0x65, 0x76,
	  0x65, 0x6e, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x63, 0x72, 0x69, 0x6d, 0x65, 0x73,
	  0x69, 0x67, 0x6e, 0x73, 0x61, 0x77, 0x61, 0x72, 0x65, 0x64, 0x61, 0x6e, 0x63,
	  0x65, 0x70, 0x68, 0x61, 0x73, 0x65, 0x3e, 0x3c, 0x21, 0x2d, 0x2d, 0x65, 0x6e,
	  0x5f, 0x55, 0x53, 0x26, 0x23, 0x33, 0x39, 0x3b, 0x32, 0x30, 0x30, 0x70, 0x78,
	  0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x6a,
	  0x6f, 0x79, 0x61, 0x6a, 0x61, 0x78, 0x2e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	  0x6d, 0x69, 0x74, 0x68, 0x55, 0x2e, 0x53, 0x2e, 0x20, 0x68, 0x6f, 0x6c, 0x64,
	  0x73, 0x70, 0x65, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x64, 0x69, 0x61, 0x6e, 0x61,
	  0x76, 0x22, 0x3e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x63, 0x6f, 0x72, 0x65,
	  0x63, 0x6f, 0x6d, 0x65, 0x73, 0x64, 0x6f, 0x69, 0x6e, 0x67, 0x70, 0x72, 0x69,
	  0x6f, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x31, 0x39, 0x39, 0x30, 0x73, 0x72,
	  0x6f, 0x6d, 0x61, 0x6e, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x6a, 0x61, 0x70, 0x61,
	  0x6e, 0x66, 0x61, 0x6c, 0x6c, 0x73, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x6f, 0x77,
	  0x6e, 0x65, 0x72, 0x61, 0x67, 0x72, 0x65, 0x65, 0x3c, 0x2f, 0x68, 0x32, 0x3e,
	  0x61, 0x62, 0x75, 0x73, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x6f, 0x70, 0x65,
	  0x72, 0x61, 0x22, 0x2d, 0x2f, 0x2f, 0x57, 0x63, 0x61, 0x72, 0x64, 0x73, 0x68,
	  0x69, 0x6c, 0x6c, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x50, 0x68, 0x6f, 0x74,
	  0x6f, 0x74, 0x72, 0x75, 0x74, 0x68, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x2e, 0x70,
	  0x68, 0x70, 0x3f, 0x73, 0x61, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x6c,
	  0x6c, 0x6f, 0x75, 0x69, 0x73, 0x6d, 0x65, 0x61, 0x6e, 0x74, 0x70, 0x72, 0x6f,
	  0x6f, 0x66, 0x62, 0x72, 0x69, 0x65, 0x66, 0x72, 0x6f, 0x77, 0x22, 0x3e, 0x67,
	  0x65, 0x6e, 0x72, 0x65, 0x74, 0x72, 0x75, 0x63, 0x6b, 0x6c, 0x6f, 0x6f, 0x6b,
	  0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x6e,
	  0x65, 0x74, 0x2f, 0x2d, 0x2d, 0x3e, 0x0a, 0x3c, 0x74, 0x72, 0x79, 0x20, 0x7b,
	  0x0a, 0x76, 0x61, 0x72, 0x20, 0x6d, 0x61, 0x6b, 0x65, 0x73, 0x63, 0x6f, 0x73,
	  0x74, 0x73, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x61, 0x64, 0x75, 0x6c, 0x74, 0x71,
	  0x75, 0x65, 0x73, 0x74, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x6c, 0x61, 0x62, 0x6f,
	  0x72, 0x68, 0x65, 0x6c, 0x70, 0x73, 0x63, 0x61, 0x75, 0x73, 0x65, 0x6d, 0x61,
	  0x67, 0x69, 0x63, 0x6d, 0x6f, 0x74, 0x6f, 0x72, 0x74, 0x68, 0x65, 0x69, 0x72,
	  0x32, 0x35, 0x30, 0x70, 0x78, 0x6c, 0x65, 0x61, 0x73, 0x74, 0x73, 0x74, 0x65,
	  0x70, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x63, 0x6f, 0x75, 0x6c, 0x64, 0x67,
	  0x6c, 0x61, 0x73, 0x73, 0x73, 0x69, 0x64, 0x65, 0x73, 0x66, 0x75, 0x6e, 0x64,
	  0x73, 0x68, 0x6f, 0x74, 0x65, 0x6c, 0x61, 0x77, 0x61, 0x72, 0x64, 0x6d, 0x6f,
	  0x75, 0x74, 0x68, 0x6d, 0x6f, 0x76, 0x65, 0x73, 0x70, 0x61, 0x72, 0x69, 0x73,
	  0x67, 0x69, 0x76, 0x65, 0x73, 0x64, 0x75, 0x74, 0x63, 0x68, 0x74, 0x65, 0x78,
	  0x61, 0x73, 0x66, 0x72, 0x75, 0x69, 0x74, 0x6e, 0x75, 0x6c, 0x6c, 0x2c, 0x7c,
	  0x7c, 0x5b, 0x5d, 0x3b, 0x74, 0x6f, 0x70, 0x22, 0x3e, 0x0a, 0x3c, 0x21, 0x2d,
	  0x2d, 0x50, 0x4f, 0x53, 0x54, 0x22, 0x6f, 0x63, 0x65, 0x61, 0x6e, 0x3c, 0x62,
	  0x72, 0x2f, 0x3e, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x73, 0x70, 0x65, 0x61, 0x6b,
	  0x64, 0x65, 0x70, 0x74, 0x68, 0x20, 0x73, 0x69, 0x7a, 0x65, 0x62, 0x61, 0x6e,
	  0x6b, 0x73, 0x63, 0x61, 0x74, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x32,
	  0x30, 0x70, 0x78, 0x3b, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x64, 0x65, 0x61, 0x6c,
	  0x73, 0x77, 0x6f, 0x75, 0x6c, 0x64, 0x35, 0x30, 0x70, 0x78, 0x3b, 0x75, 0x72,
	  0x6c, 0x3d, 0x22, 0x70, 0x61, 0x72, 0x6b, 0x73, 0x6d, 0x6f, 0x75, 0x73, 0x65,
	  0x4d, 0x6f, 0x73, 0x74, 0x20, 0x2e, 0x2e, 0x2e, 0x3c, 0x2f, 0x61, 0x6d, 0x6f,
	  0x6e, 0x67, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x62, 0x6f, 0x64, 0x79, 0x20, 0x6e,
	  0x6f, 0x6e, 0x65, 0x3b, 0x62, 0x61, 0x73, 0x65, 0x64, 0x63, 0x61, 0x72, 0x72,
	  0x79, 0x64, 0x72, 0x61, 0x66, 0x74, 0x72, 0x65, 0x66, 0x65, 0x72, 0x70, 0x61,
	  0x67, 0x65, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x2e, 0x6d, 0x65, 0x74, 0x65, 0x72,
	  0x64, 0x65, 0x6c, 0x61, 0x79, 0x64, 0x72, 0x65, 0x61, 0x6d, 0x70, 0x72, 0x6f,
	  0x76, 0x65, 0x6a, 0x6f, 0x69, 0x6e, 0x74, 0x3c, 0x2f, 0x74, 0x72, 0x3e, 0x64,
	  0x72, 0x75, 0x67, 0x73, 0x3c, 0x21, 0x2d, 0x2d, 0x20, 0x61, 0x70, 0x72, 0x69,
	  0x6c, 0x69, 0x64, 0x65, 0x61, 0x6c, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x65, 0x78,
	  0x61, 0x63, 0x74, 0x66, 0x6f, 0x72, 0x74, 0x68, 0x63, 0x6f, 0x64, 0x65, 0x73,
	  0x6c, 0x6f, 0x67, 0x69, 0x63, 0x56, 0x69, 0x65, 0x77, 0x20, 0x73, 0x65, 0x65,
	  0x6d, 0x73, 0x62, 0x6c, 0x61, 0x6e, 0x6b, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x20,
	  0x28, 0x32, 0x30, 0x30, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x6e,
	  0x6b, 0x67, 0x6f, 0x61, 0x6c, 0x73, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x67, 0x72,
	  0x65, 0x65, 0x6b, 0x68, 0x6f, 0x6d, 0x65, 0x73, 0x72, 0x69, 0x6e, 0x67, 0x73,
	  0x72, 0x61, 0x74, 0x65, 0x64, 0x33, 0x30, 0x70, 0x78, 0x3b, 0x77, 0x68, 0x6f,
	  0x73, 0x65, 0x70, 0x61, 0x72, 0x73, 0x65, 0x28, 0x29, 0x3b, 0x22, 0x20, 0x42,
	  0x6c, 0x6f, 0x63, 0x6b, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x6a, 0x6f, 0x6e, 0x65,
	  0x73, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x27, 0x29, 0x3b, 0x22, 0x3e, 0x29, 0x3b,
	  0x69, 0x66, 0x28, 0x2d, 0x6c, 0x65, 0x66, 0x74, 0x64, 0x61, 0x76, 0x69, 0x64,
	  0x68, 0x6f, 0x72, 0x73, 0x65, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x72, 0x61, 0x69,
	  0x73, 0x65, 0x62, 0x6f, 0x78, 0x65, 0x73, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65,
	  0x6d, 0x65, 0x6e, 0x74, 0x3c, 0x2f, 0x65, 0x6d, 0x3e, 0x62, 0x61, 0x72, 0x22,
	  0x3e, 0x2e, 0x73, 0x72, 0x63, 0x3d, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x61, 0x6c,
	  0x74, 0x3d, 0x22, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x68, 0x65, 0x6e, 0x72, 0x79,
	  0x32, 0x34, 0x70, 0x78, 0x3b, 0x73, 0x65, 0x74, 0x75, 0x70, 0x69, 0x74, 0x61,
	  0x6c, 0x79, 0x73, 0x68, 0x61, 0x72, 0x70, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x74,
	  0x61, 0x73, 0x74, 0x65, 0x77, 0x61, 0x6e, 0x74, 0x73, 0x74, 0x68, 0x69, 0x73,
	  0x2e, 0x72, 0x65, 0x73, 0x65, 0x74, 0x77, 0x68, 0x65, 0x65, 0x6c, 0x67, 0x69,
	  0x72, 0x6c, 0x73, 0x2f, 0x63, 0x73, 0x73, 0x2f, 0x31, 0x30, 0x30, 0x25, 0x3b,
	  0x63, 0x6c, 0x75, 0x62, 0x73, 0x73, 0x74, 0x75, 0x66, 0x66, 0x62, 0x69, 0x62,
	  0x6c, 0x65, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x20, 0x31, 0x30, 0x30, 0x30, 0x6b,
	  0x6f, 0x72, 0x65, 0x61, 0x7d, 0x29, 0x3b, 0x0d, 0x0a, 0x62, 0x61, 0x6e, 0x64,
	  0x73, 0x71, 0x75, 0x65, 0x75, 0x65, 0x3d, 0x20, 0x7b, 0x7d, 0x3b, 0x38, 0x30,
	  0x70, 0x78, 0x3b, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x7b, 0x0d, 0x0a, 0x09, 0x09,
	  0x61, 0x68, 0x65, 0x61, 0x64, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x72, 0x69,
	  0x73, 0x68, 0x6c, 0x69, 0x6b, 0x65, 0x20, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x73,
	  0x74, 0x61, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x6d, 0x22, 0x79, 0x61, 0x68, 0x6f,
	  0x6f, 0x29, 0x5b, 0x30, 0x5d, 0x3b, 0x41, 0x62, 0x6f, 0x75, 0x74, 0x66, 0x69,
	  0x6e, 0x64, 0x73, 0x3c, 0x2f, 0x68, 0x31, 0x3e, 0x64, 0x65, 0x62, 0x75, 0x67,
	  0x74, 0x61, 0x73, 0x6b, 0x73, 0x55, 0x52, 0x4c, 0x20, 0x3d, 0x63, 0x65, 0x6c,
	  0x6c, 0x73, 0x7d, 0x29, 0x28, 0x29, 0x3b, 0x31, 0x32, 0x70, 0x78, 0x3b, 0x70,
	  0x72, 0x69, 0x6d, 0x65, 0x74, 0x65, 0x6c, 0x6c, 0x73, 0x74, 0x75, 0x72, 0x6e,
	  0x73, 0x30, 0x78, 0x36, 0x30, 0x30, 0x2e, 0x6a, 0x70, 0x67, 0x22, 0x73, 0x70,
	  0x61, 0x69, 0x6e, 0x62, 0x65, 0x61, 0x63, 0x68, 0x74, 0x61, 0x78, 0x65, 0x73,
	  0x6d, 0x69, 0x63, 0x72, 0x6f, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x2d, 0x2d, 0x3e,
	  0x3c, 0x2f, 0x67, 0x69, 0x66, 0x74, 0x73, 0x73, 0x74, 0x65, 0x76, 0x65, 0x2d,
	  0x6c, 0x69, 0x6e, 0x6b, 0x62, 0x6f, 0x64, 0x79, 0x2e, 0x7d, 0x29, 0x3b, 0x0a,
	  0x09, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x28, 0x31, 0x39, 0x39, 0x46, 0x41,
	  0x51, 0x3c, 0x2f, 0x72, 0x6f, 0x67, 0x65, 0x72, 0x66, 0x72, 0x61, 0x6e, 0x6b,
	  0x43, 0x6c, 0x61, 0x73, 0x73, 0x32, 0x38, 0x70, 0x78, 0x3b, 0x66, 0x65, 0x65,
	  0x64, 0x73, 0x3c, 0x68, 0x31, 0x3e, 0x3c, 0x73, 0x63, 0x6f, 0x74, 0x74, 0x74,
	  0x65, 0x73, 0x74, 0x73, 0x32, 0x32, 0x70, 0x78, 0x3b, 0x64, 0x72, 0x69, 0x6e,
	  0x6b, 0x29, 0x20, 0x7c, 0x7c, 0x20, 0x6c, 0x65, 0x77, 0x69, 0x73, 0x73, 0x68,
	  0x61, 0x6c, 0x6c, 0x23, 0x30, 0x33, 0x39, 0x3b, 0x20, 0x66, 0x6f, 0x72, 0x20,
	  0x6c, 0x6f, 0x76, 0x65, 0x64, 0x77, 0x61, 0x73, 0x74, 0x65, 0x30, 0x30, 0x70,
	  0x78, 0x3b, 0x6a, 0x61, 0x3a, 0xe3, 0x82, 0x73, 0x69, 0x6d, 0x6f, 0x6e, 0x3c,
	  0x66, 0x6f, 0x6e, 0x74, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x6d, 0x65, 0x65, 0x74,
	  0x73, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x68, 0x65, 0x61, 0x70, 0x74, 0x69,
	  0x67, 0x68, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x29, 0x20, 0x21, 0x3d, 0x20,
	  0x64, 0x72, 0x65, 0x73, 0x73, 0x63, 0x6c, 0x69, 0x70, 0x73, 0x72, 0x6f, 0x6f,
	  0x6d, 0x73, 0x6f, 0x6e, 0x6b, 0x65, 0x79, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x6d,
	  0x61, 0x69, 0x6e, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x70, 0x6c, 0x61, 0x74,
	  0x65, 0x66, 0x75, 0x6e, 0x6e, 0x79, 0x74, 0x72, 0x65, 0x65, 0x73, 0x63, 0x6f,
	  0x6d, 0x2f, 0x22, 0x31, 0x2e, 0x6a, 0x70, 0x67, 0x77, 0x6d, 0x6f, 0x64, 0x65,
	  0x70, 0x61, 0x72, 0x61, 0x6d, 0x53, 0x54, 0x41, 0x52, 0x54, 0x6c, 0x65, 0x66,
	  0x74, 0x20, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x2c, 0x20, 0x32, 0x30, 0x31, 0x29,
	  0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x76, 0x69, 0x72, 0x75,
	  0x73, 0x63, 0x68, 0x61, 0x69, 0x72, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x77, 0x6f,
	  0x72, 0x73, 0x74, 0x50, 0x61, 0x67, 0x65, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	  0x70, 0x61, 0x74, 0x63, 0x68, 0x3c, 0x21, 0x2d, 0x2d, 0x0a, 0x6f, 0x2d, 0x63,
	  0x61, 0x63, 0x66, 0x69, 0x72, 0x6d, 0x73, 0x74, 0x6f, 0x75, 0x72, 0x73, 0x2c,
	  0x30, 0x30, 0x30, 0x20, 0x61, 0x73, 0x69, 0x61, 0x6e, 0x69, 0x2b, 0x2b, 0x29,
	  0x7b, 0x61, 0x64, 0x6f, 0x62, 0x65, 0x27, 0x29, 0x5b, 0x30, 0x5d, 0x69, 0x64,
	  0x3d, 0x31, 0x30, 0x62, 0x6f, 0x74, 0x68, 0x3b, 0x6d, 0x65, 0x6e, 0x75, 0x20,
	  0x2e, 0x32, 0x2e, 0x6d, 0x69, 0x2e, 0x70, 0x6e, 0x67, 0x22, 0x6b, 0x65, 0x76,
	  0x69, 0x6e, 0x63, 0x6f, 0x61, 0x63, 0x68, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x62,
	  0x72, 0x75, 0x63, 0x65, 0x32, 0x2e, 0x6a, 0x70, 0x67, 0x55, 0x52, 0x4c, 0x29,
	  0x2b, 0x2e, 0x6a, 0x70, 0x67, 0x7c, 0x73, 0x75, 0x69, 0x74, 0x65, 0x73, 0x6c,
	  0x69, 0x63, 0x65, 0x68, 0x61, 0x72, 0x72, 0x79, 0x31, 0x32, 0x30, 0x22, 0x20,
	  0x73, 0x77, 0x65, 0x65, 0x74, 0x74, 0x72, 0x3e, 0x0d, 0x0a, 0x6e, 0x61, 0x6d,
	  0x65, 0x3d, 0x64, 0x69, 0x65, 0x67, 0x6f, 0x70, 0x61, 0x67, 0x65, 0x20, 0x73,
	  0x77, 0x69, 0x73, 0x73, 0x2d, 0x2d, 0x3e, 0x0a, 0x0a, 0x23, 0x66, 0x66, 0x66,
	  0x3b, 0x22, 0x3e, 0x4c, 0x6f, 0x67, 0x2e, 0x63, 0x6f, 0x6d, 0x22, 0x74, 0x72,
	  0x65, 0x61, 0x74, 0x73, 0x68, 0x65, 0x65, 0x74, 0x29, 0x20, 0x26, 0x26, 0x20,
	  0x31, 0x34, 0x70, 0x78, 0x3b, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x6e, 0x74, 0x65,
	  0x6e, 0x74, 0x66, 0x69, 0x6c, 0x65, 0x64, 0x6a, 0x61, 0x3a, 0xe3, 0x83, 0x69,
	  0x64, 0x3d, 0x22, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x77, 0x6f, 0x72, 0x73,
	  0x65, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x2d, 0x62, 0x6f, 0x78, 0x2d, 0x64, 0x65,
	  0x6c, 0x74, 0x61, 0x0a, 0x26, 0x6c, 0x74, 0x3b, 0x62, 0x65, 0x61, 0x72, 0x73,
	  0x3a, 0x34, 0x38, 0x5a, 0x3c, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x72, 0x75, 0x72,
	  0x61, 0x6c, 0x3c, 0x2f, 0x61, 0x3e, 0x20, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x62,
	  0x61, 0x6b, 0x65, 0x72, 0x73, 0x68, 0x6f, 0x70, 0x73, 0x3d, 0x20, 0x22, 0x22,
	  0x3b, 0x70, 0x68, 0x70, 0x22, 0x3e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x31, 0x33,
	  0x70, 0x78, 0x3b, 0x62, 0x72, 0x69, 0x61, 0x6e, 0x68, 0x65, 0x6c, 0x6c, 0x6f,
	  0x73, 0x69, 0x7a, 0x65, 0x3d, 0x6f, 0x3d, 0x25, 0x32, 0x46, 0x20, 0x6a, 0x6f,
	  0x69, 0x6e, 0x6d, 0x61, 0x79, 0x62, 0x65, 0x3c, 0x69, 0x6d, 0x67, 0x20, 0x69,
	  0x6d, 0x67, 0x22, 0x3e, 0x2c, 0x20, 0x66, 0x6a, 0x73, 0x69, 0x6d, 0x67, 0x22,
	  0x20, 0x22, 0x29, 0x5b, 0x30, 0x5d, 0x4d, 0x54, 0x6f, 0x70, 0x42, 0x54, 0x79,
	  0x70, 0x65, 0x22, 0x6e, 0x65, 0x77, 0x6c, 0x79, 0x44, 0x61, 0x6e, 0x73, 0x6b,
	  0x63, 0x7a, 0x65, 0x63, 0x68, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x6b, 0x6e, 0x6f,
	  0x77, 0x73, 0x3c, 0x2f, 0x68, 0x35, 0x3e, 0x66, 0x61, 0x71, 0x22, 0x3e, 0x7a,
	  0x68, 0x2d, 0x63, 0x6e, 0x31, 0x30, 0x29, 0x3b, 0x0a, 0x2d, 0x31, 0x22, 0x29,
	  0x3b, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x62, 0x6c, 0x75, 0x65, 0x73, 0x74, 0x72,
	  0x75, 0x6c, 0x79, 0x64, 0x61, 0x76, 0x69, 0x73, 0x2e, 0x6a, 0x73, 0x27, 0x3b,
	  0x3e, 0x0d, 0x0a, 0x3c, 0x21, 0x73, 0x74, 0x65, 0x65, 0x6c, 0x20, 0x79, 0x6f,
	  0x75, 0x20, 0x68, 0x32, 0x3e, 0x0d, 0x0a, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6a,
	  0x65, 0x73, 0x75, 0x73, 0x31, 0x30, 0x30, 0x25, 0x20, 0x6d, 0x65, 0x6e, 0x75,
	  0x2e, 0x0d, 0x0a, 0x09, 0x0d, 0x0a, 0x77, 0x61, 0x6c, 0x65, 0x73, 0x72, 0x69,
	  0x73, 0x6b, 0x73, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x64, 0x64, 0x69, 0x6e, 0x67,
	  0x62, 0x2d, 0x6c, 0x69, 0x6b, 0x74, 0x65, 0x61, 0x63, 0x68, 0x67, 0x69, 0x66,
	  0x22, 0x20, 0x76, 0x65, 0x67, 0x61, 0x73, 0x64, 0x61, 0x6e, 0x73, 0x6b, 0x65,
	  0x65, 0x73, 0x74, 0x69, 0x73, 0x68, 0x71, 0x69, 0x70, 0x73, 0x75, 0x6f, 0x6d,
	  0x69, 0x73, 0x6f, 0x62, 0x72, 0x65, 0x64, 0x65, 0x73, 0x64, 0x65, 0x65, 0x6e,
	  0x74, 0x72, 0x65, 0x74, 0x6f, 0x64, 0x6f, 0x73, 0x70, 0x75, 0x65, 0x64, 0x65,
	  0x61, 0xc3, 0xb1, 0x6f, 0x73, 0x65, 0x73, 0x74, 0xc3, 0xa1, 0x74, 0x69, 0x65,
	  0x6e, 0x65, 0x68, 0x61, 0x73, 0x74, 0x61, 0x6f, 0x74, 0x72, 0x6f, 0x73, 0x70,
	  0x61, 0x72, 0x74, 0x65, 0x64, 0x6f, 0x6e, 0x64, 0x65, 0x6e, 0x75, 0x65, 0x76,
	  0x6f, 0x68, 0x61, 0x63, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6d, 0x69,
	  0x73, 0x6d, 0x6f, 0x6d, 0x65, 0x6a, 0x6f, 0x72, 0x6d, 0x75, 0x6e, 0x64, 0x6f,
	  0x61, 0x71, 0x75, 0xc3, 0xad, 0x64, 0xc3, 0xad, 0x61, 0x73, 0x73, 0xc3, 0xb3,
	  0x6c, 0x6f, 0x61, 0x79, 0x75, 0x64, 0x61, 0x66, 0x65, 0x63, 0x68, 0x61, 0x74,
	  0x6f, 0x64, 0x61, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x6f, 0x6d, 0x65, 0x6e, 0x6f,
	  0x73, 0x64, 0x61, 0x74, 0x6f, 0x73, 0x6f, 0x74, 0x72, 0x61, 0x73, 0x73, 0x69,
	  0x74, 0x69, 0x6f, 0x6d, 0x75, 0x63, 0x68, 0x6f, 0x61, 0x68, 0x6f, 0x72, 0x61,
	  0x6c, 0x75, 0x67, 0x61, 0x72, 0x6d, 0x61, 0x79, 0x6f, 0x72, 0x65, 0x73, 0x74,
	  0x6f, 0x73, 0x68, 0x6f, 0x72, 0x61, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x61,
	  0x6e, 0x74, 0x65, 0x73, 0x66, 0x6f, 0x74, 0x6f, 0x73, 0x65, 0x73, 0x74, 0x61,
	  0x73, 0x70, 0x61, 0xc3, 0xad, 0x73, 0x6e, 0x75, 0x65, 0x76, 0x61, 0x73, 0x61,
	  0x6c, 0x75, 0x64, 0x66, 0x6f, 0x72, 0x6f, 0x73, 0x6d, 0x65, 0x64, 0x69, 0x6f,
	  0x71, 0x75, 0x69, 0x65, 0x6e, 0x6d, 0x65, 0x73, 0x65, 0x73, 0x70, 0x6f, 0x64,
	  0x65, 0x72, 0x63, 0x68, 0x69, 0x6c, 0x65, 0x73, 0x65, 0x72, 0xc3, 0xa1, 0x76,
	  0x65, 0x63, 0x65, 0x73, 0x64, 0x65, 0x63, 0x69, 0x72, 0x6a, 0x6f, 0x73, 0xc3,
	  0xa9, 0x65, 0x73, 0x74, 0x61, 0x72, 0x76, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x72,
	  0x75, 0x70, 0x6f, 0x68, 0x65, 0x63, 0x68, 0x6f, 0x65, 0x6c, 0x6c, 0x6f, 0x73,
	  0x74, 0x65, 0x6e, 0x67, 0x6f, 0x61, 0x6d, 0x69, 0x67, 0x6f, 0x63, 0x6f, 0x73,
	  0x61, 0x73, 0x6e, 0x69, 0x76, 0x65, 0x6c, 0x67, 0x65, 0x6e, 0x74, 0x65, 0x6d,
	  0x69, 0x73, 0x6d, 0x61, 0x61, 0x69, 0x72, 0x65, 0x73, 0x6a, 0x75, 0x6c, 0x69,
	  0x6f, 0x74, 0x65, 0x6d, 0x61, 0x73, 0x68, 0x61, 0x63, 0x69, 0x61, 0x66, 0x61,
	  0x76, 0x6f, 0x72, 0x6a, 0x75, 0x6e, 0x69, 0x6f, 0x6c, 0x69, 0x62, 0x72, 0x65,
	  0x70, 0x75, 0x6e, 0x74, 0x6f, 0x62, 0x75, 0x65, 0x6e, 0x6f, 0x61, 0x75, 0x74,
	  0x6f, 0x72, 0x61, 0x62, 0x72, 0x69, 0x6c, 0x62, 0x75, 0x65, 0x6e, 0x61, 0x74,
	  0x65, 0x78, 0x74, 0x6f, 0x6d, 0x61, 0x72, 0x7a, 0x6f, 0x73, 0x61, 0x62, 0x65,
	  0x72, 0x6c, 0x69, 0x73, 0x74, 0x61, 0x6c, 0x75, 0x65, 0x67, 0x6f, 0x63, 0xc3,
	  0xb3, 0x6d, 0x6f, 0x65, 0x6e, 0x65, 0x72, 0x6f, 0x6a, 0x75, 0x65, 0x67, 0x6f,
	  0x70, 0x65, 0x72, 0xc3, 0xba, 0x68, 0x61, 0x62, 0x65, 0x72, 0x65, 0x73, 0x74,
	  0x6f, 0x79, 0x6e, 0x75, 0x6e, 0x63, 0x61, 0x6d, 0x75, 0x6a, 0x65, 0x72, 0x76,
	  0x61, 0x6c, 0x6f, 0x72, 0x66, 0x75, 0x65, 0x72, 0x61, 0x6c, 0x69, 0x62, 0x72,
	  0x6f, 0x67, 0x75, 0x73, 0x74, 0x61, 0x69, 0x67, 0x75, 0x61, 0x6c, 0x76, 0x6f,
	  0x74, 0x6f, 0x73, 0x63, 0x61, 0x73, 0x6f, 0x73, 0x67, 0x75, 0xc3, 0xad, 0x61,
	  0x70, 0x75, 0x65, 0x64, 0x6f, 0x73, 0x6f, 0x6d, 0x6f, 0x73, 0x61, 0x76, 0x69,
	  0x73, 0x6f, 0x75, 0x73, 0x74, 0x65, 0x64, 0x64, 0x65, 0x62, 0x65, 0x6e, 0x6e,
	  0x6f, 0x63, 0x68, 0x65, 0x62, 0x75, 0x73, 0x63, 0x61, 0x66, 0x61, 0x6c, 0x74,
	  0x61, 0x65, 0x75, 0x72, 0x6f, 0x73, 0x73, 0x65, 0x72, 0x69, 0x65, 0x64, 0x69,
	  0x63, 0x68, 0x6f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x63, 0x6c, 0x61, 0x76, 0x65,
	  0x63, 0x61, 0x73, 0x61, 0x73, 0x6c, 0x65, 0xc3, 0xb3, 0x6e, 0x70, 0x6c, 0x61,
	  0x7a, 0x6f, 0x6c, 0x61, 0x72, 0x67, 0x6f, 0x6f, 0x62, 0x72, 0x61, 0x73, 0x76,
	  0x69, 0x73, 0x74, 0x61, 0x61, 0x70, 0x6f, 0x79, 0x6f, 0x6a, 0x75, 0x6e, 0x74,
	  0x6f, 0x74, 0x72, 0x61, 0x74, 0x61, 0x76, 0x69, 0x73, 0x74, 0x6f, 0x63, 0x72,
	  0x65, 0x61, 0x72, 0x63, 0x61, 0x6d, 0x70, 0x6f, 0x68, 0x65, 0x6d, 0x6f, 0x73,
	  0x63, 0x69, 0x6e, 0x63, 0x6f, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x70, 0x69, 0x73,
	  0x6f, 0x73, 0x6f, 0x72, 0x64, 0x65, 0x6e, 0x68, 0x61, 0x63, 0x65, 0x6e, 0xc3,
	  0xa1, 0x72, 0x65, 0x61, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x64, 0x72,
	  0x6f, 0x63, 0x65, 0x72, 0x63, 0x61, 0x70, 0x75, 0x65, 0x64, 0x61, 0x70, 0x61,
	  0x70, 0x65, 0x6c, 0x6d, 0x65, 0x6e, 0x6f, 0x72, 0xc3, 0xba, 0x74, 0x69, 0x6c,
	  0x63, 0x6c, 0x61, 0x72, 0x6f, 0x6a, 0x6f, 0x72, 0x67, 0x65, 0x63, 0x61, 0x6c,
	  0x6c, 0x65, 0x70, 0x6f, 0x6e, 0x65, 0x72, 0x74, 0x61, 0x72, 0x64, 0x65, 0x6e,
	  0x61, 0x64, 0x69, 0x65, 0x6d, 0x61, 0x72, 0x63, 0x61, 0x73, 0x69, 0x67, 0x75,
	  0x65, 0x65, 0x6c, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6c, 0x6f, 0x63, 0x6f,
	  0x63, 0x68, 0x65, 0x6d, 0x6f, 0x74, 0x6f, 0x73, 0x6d, 0x61, 0x64, 0x72, 0x65,
	  0x63, 0x6c, 0x61, 0x73, 0x65, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x69, 0xc3,
	  0xb1, 0x6f, 0x71, 0x75, 0x65, 0x64, 0x61, 0x70, 0x61, 0x73, 0x61, 0x72, 0x62,
	  0x61, 0x6e, 0x63, 0x6f, 0x68, 0x69, 0x6a, 0x6f, 0x73, 0x76, 0x69, 0x61, 0x6a,
	  0x65, 0x70, 0x61, 0x62, 0x6c, 0x6f, 0xc3, 0xa9, 0x73, 0x74, 0x65, 0x76, 0x69,
	  0x65, 0x6e, 0x65, 0x72, 0x65, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x6a, 0x61, 0x72,
	  0x66, 0x6f, 0x6e, 0x64, 0x6f, 0x63, 0x61, 0x6e, 0x61, 0x6c, 0x6e, 0x6f, 0x72,
	  0x74, 0x65, 0x6c, 0x65, 0x74, 0x72, 0x61, 0x63, 0x61, 0x75, 0x73, 0x61, 0x74,
	  0x6f, 0x6d, 0x61, 0x72, 0x6d, 0x61, 0x6e, 0x6f, 0x73, 0x6c, 0x75, 0x6e, 0x65,
	  0x73, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x76, 0x69, 0x6c, 0x6c, 0x61, 0x76, 0x65,
	  0x6e, 0x64, 0x6f, 0x70, 0x65, 0x73, 0x61, 0x72, 0x74, 0x69, 0x70, 0x6f, 0x73,
	  0x74, 0x65, 0x6e, 0x67, 0x61, 0x6d, 0x61, 0x72, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	  0x76, 0x61, 0x70, 0x61, 0x64, 0x72, 0x65, 0x75, 0x6e, 0x69, 0x64, 0x6f, 0x76,
	  0x61, 0x6d, 0x6f, 0x73, 0x7a, 0x6f, 0x6e, 0x61, 0x73, 0x61, 0x6d, 0x62, 0x6f,
	  0x73, 0x62, 0x61, 0x6e, 0x64, 0x61, 0x6d, 0x61, 0x72, 0x69, 0x61, 0x61, 0x62,
	  0x75, 0x73, 0x6f, 0x6d, 0x75, 0x63, 0x68, 0x61, 0x73, 0x75, 0x62, 0x69, 0x72,
	  0x72, 0x69, 0x6f, 0x6a, 0x61, 0x76, 0x69, 0x76, 0x69, 0x72, 0x67, 0x72, 0x61,
	  0x64, 0x6f, 0x63, 0x68, 0x69, 0x63, 0x61, 0x61, 0x6c, 0x6c, 0xc3, 0xad, 0x6a,
	  0x6f, 0x76, 0x65, 0x6e, 0x64, 0x69, 0x63, 0x68, 0x61, 0x65, 0x73, 0x74, 0x61,
	  0x6e, 0x74, 0x61, 0x6c, 0x65, 0x73, 0x73, 0x61, 0x6c, 0x69, 0x72, 0x73, 0x75,
	  0x65, 0x6c, 0x6f, 0x70, 0x65, 0x73, 0x6f, 0x73, 0x66, 0x69, 0x6e, 0x65, 0x73,
	  0x6c, 0x6c, 0x61, 0x6d, 0x61, 0x62, 0x75, 0x73, 0x63, 0x6f, 0xc3, 0xa9, 0x73,
	  0x74, 0x61, 0x6c, 0x6c, 0x65, 0x67, 0x61, 0x6e, 0x65, 0x67, 0x72, 0x6f, 0x70,
	  0x6c, 0x61, 0x7a, 0x61, 0x68, 0x75, 0x6d, 0x6f, 0x72, 0x70, 0x61, 0x67, 0x61,
	  0x72, 0x6a, 0x75, 0x6e, 0x74, 0x61, 0x64, 0x6f, 0x62, 0x6c, 0x65, 0x69, 0x73,
	  0x6c, 0x61, 0x73, 0x62, 0x6f, 0x6c, 0x73, 0x61, 0x62, 0x61, 0xc3, 0xb1, 0x6f,
	  0x68, 0x61, 0x62, 0x6c, 0x61, 0x6c, 0x75, 0x63, 0x68, 0x61, 0xc3, 0x81, 0x72,
	  0x65, 0x61, 0x64, 0x69, 0x63, 0x65, 0x6e, 0x6a, 0x75, 0x67, 0x61, 0x72, 0x6e,
	  0x6f, 0x74, 0x61, 0x73, 0x76, 0x61, 0x6c, 0x6c, 0x65, 0x61, 0x6c, 0x6c, 0xc3,
	  0xa1, 0x63, 0x61, 0x72, 0x67, 0x61, 0x64, 0x6f, 0x6c, 0x6f, 0x72, 0x61, 0x62,
	  0x61, 0x6a, 0x6f, 0x65, 0x73, 0x74, 0xc3, 0xa9, 0x67, 0x75, 0x73, 0x74, 0x6f,
	  0x6d, 0x65, 0x6e, 0x74, 0x65, 0x6d, 0x61, 0x72, 0x69, 0x6f, 0x66, 0x69, 0x72,
	  0x6d, 0x61, 0x63, 0x6f, 0x73, 0x74, 0x6f, 0x66, 0x69, 0x63, 0x68, 0x61, 0x70,
	  0x6c, 0x61, 0x74, 0x61, 0x68, 0x6f, 0x67, 0x61, 0x72, 0x61, 0x72, 0x74, 0x65,
	  0x73, 0x6c, 0x65, 0x79, 0x65, 0x73, 0x61, 0x71, 0x75, 0x65, 0x6c, 0x6d, 0x75,
	  0x73, 0x65, 0x6f, 0x62, 0x61, 0x73, 0x65, 0x73, 0x70, 0x6f, 0x63, 0x6f, 0x73,
	  0x6d, 0x69, 0x74, 0x61, 0x64, 0x63, 0x69, 0x65, 0x6c, 0x6f, 0x63, 0x68, 0x69,
	  0x63, 0x6f, 0x6d, 0x69, 0x65, 0x64, 0x6f, 0x67, 0x61, 0x6e, 0x61, 0x72, 0x73,
	  0x61, 0x6e, 0x74, 0x6f, 0x65, 0x74, 0x61, 0x70, 0x61, 0x64, 0x65, 0x62, 0x65,
	  0x73, 0x70, 0x6c, 0x61, 0x79, 0x61, 0x72, 0x65, 0x64, 0x65, 0x73, 0x73, 0x69,
	  0x65, 0x74, 0x65, 0x63, 0x6f, 0x72, 0x74, 0x65, 0x63, 0x6f, 0x72, 0x65, 0x61,
	  0x64, 0x75, 0x64, 0x61, 0x73, 0x64, 0x65, 0x73, 0x65, 0x6f, 0x76, 0x69, 0x65,
	  0x6a, 0x6f, 0x64, 0x65, 0x73, 0x65, 0x61, 0x61, 0x67, 0x75, 0x61, 0x73, 0x26,
	  0x71, 0x75, 0x6f, 0x74, 0x3b, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x63, 0x6f,
	  0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x76, 0x65,
	  0x6e, 0x74, 0x73, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x73, 0x79, 0x73, 0x74,
	  0x65, 0x6d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x61, 0x6e, 0x6e, 0x65,
	  0x72, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c,
	  0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x6d,
	  0x65, 0x64, 0x69, 0x75, 0x6d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x75,
	  0x6d, 0x62, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x65, 0x73,
	  0x75, 0x6c, 0x74, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x73, 0x63, 0x72, 0x65,
	  0x65, 0x6e, 0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x6e, 0x6f, 0x72, 0x6d, 0x61,
	  0x6c, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73,
	  0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73,
	  0x70, 0x72, 0x69, 0x6e, 0x67, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x6d, 0x6f,
	  0x62, 0x69, 0x6c, 0x65, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x70, 0x68, 0x6f,
	  0x74, 0x6f, 0x73, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x72, 0x65, 0x67, 0x69,
	  0x6f, 0x6e, 0x69, 0x74, 0x73, 0x65, 0x6c, 0x66, 0x73, 0x6f, 0x63, 0x69, 0x61,
	  0x6c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	  0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x74,
	  0x69, 0x74, 0x6c, 0x65, 0x3e, 0x65, 0x69, 0x74, 0x68, 0x65, 0x72, 0x6c, 0x65,
	  0x6e, 0x67, 0x74, 0x68, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x66, 0x72, 0x69,
	  0x65, 0x6e, 0x64, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x61, 0x75, 0x74, 0x68,
	  0x6f, 0x72, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x65, 0x76, 0x69, 0x65,
	  0x77, 0x73, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	  0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x65,
	  0x78, 0x70, 0x61, 0x6e, 0x64, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x66, 0x6f,
	  0x72, 0x6d, 0x61, 0x74, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x70, 0x6f, 0x69,
	  0x6e, 0x74, 0x73, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x70, 0x65, 0x72, 0x73,
	  0x6f, 0x6e, 0x6c, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x73, 0x69, 0x67,
	  0x6e, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x73,
	  0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x70,
	  0x65, 0x6f, 0x70, 0x6c, 0x65, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x6e, 0x61,
	  0x74, 0x75, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x66, 0x69, 0x67,
	  0x75, 0x72, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x63, 0x75, 0x73, 0x74,
	  0x6f, 0x6d, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x6c, 0x65, 0x74, 0x74, 0x65,
	  0x72, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74,
	  0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x75,
	  0x70, 0x6c, 0x6f, 0x61, 0x64, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x6d, 0x65,
	  0x74, 0x68, 0x6f, 0x64, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x73, 0x63, 0x68,
	  0x6f, 0x6f, 0x6c, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x73, 0x68, 0x61, 0x64,
	  0x6f, 0x77, 0x64, 0x65, 0x62, 0x61, 0x74, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x65,
	  0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x73,
	  0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x63,
	  0x68, 0x72, 0x6f, 0x6d, 0x65, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6e, 0x6f,
	  0x74, 0x69, 0x63, 0x65, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x64,
	  0x69, 0x6e, 0x67, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x72, 0x65, 0x70, 0x6f,
	  0x72, 0x74, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x71, 0x75, 0x61, 0x72,
	  0x65, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73,
	  0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x6d, 0x6f, 0x76, 0x69, 0x6e, 0x67, 0x6c,
	  0x61, 0x74, 0x65, 0x73, 0x74, 0x77, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x46, 0x72,
	  0x61, 0x6e, 0x63, 0x65, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x73, 0x74, 0x72,
	  0x6f, 0x6e, 0x67, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x4c, 0x6f, 0x6e, 0x64,
	  0x6f, 0x6e, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65,
	  0x64, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65,
	  0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x70,
	  0x6c, 0x61, 0x63, 0x65, 0x73, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x74,
	  0x61, 0x74, 0x69, 0x63, 0x63, 0x69, 0x74, 0x69, 0x65, 0x73, 0x73, 0x74, 0x72,
	  0x65, 0x61, 0x6d, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x74, 0x74, 0x61,
	  0x63, 0x6b, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x67, 0x68,
	  0x74, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x3e,
	  0x6f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x75, 0x73, 0x65, 0x66, 0x75, 0x6c, 0x76,
	  0x61, 0x6c, 0x6c, 0x65, 0x79, 0x63, 0x61, 0x75, 0x73, 0x65, 0x73, 0x6c, 0x65,
	  0x61, 0x64, 0x65, 0x72, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x65, 0x63,
	  0x6f, 0x6e, 0x64, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x70, 0x6f, 0x72,
	  0x74, 0x73, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6e,
	  0x67, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73,
	  0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x73,
	  0x74, 0x61, 0x74, 0x65, 0x73, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x76, 0x69,
	  0x73, 0x75, 0x61, 0x6c, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x76, 0x6f, 0x6c,
	  0x75, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x6d, 0x75, 0x73, 0x65,
	  0x75, 0x6d, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e,
	  0x74, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x6d, 0x6f, 0x73, 0x74, 0x6c, 0x79,
	  0x6d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x22, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x6d,
	  0x61, 0x72, 0x6b, 0x65, 0x74, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x63, 0x68,
	  0x61, 0x6e, 0x63, 0x65, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x62, 0x65, 0x66,
	  0x6f, 0x72, 0x65, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x6d, 0x6f, 0x6d, 0x65,
	  0x6e, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x6d, 0x6f, 0x74, 0x69, 0x6f,
	  0x6e, 0x69, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x72,
	  0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x65,
	  0x78, 0x69, 0x73, 0x74, 0x73, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x45, 0x75,
	  0x72, 0x6f, 0x70, 0x65, 0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x6c, 0x65, 0x67,
	  0x61, 0x63, 0x79, 0x6d, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x65, 0x6e, 0x6f, 0x75,
	  0x67, 0x68, 0x63, 0x61, 0x72, 0x65, 0x65, 0x72, 0x61, 0x6e, 0x73, 0x77, 0x65,
	  0x72, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c,
	  0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72,
	  0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x74, 0x6f,
	  0x70, 0x69, 0x63, 0x73, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x66, 0x61, 0x74,
	  0x68, 0x65, 0x72, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x69, 0x6d, 0x70,
	  0x6c, 0x79, 0x72, 0x61, 0x69, 0x73, 0x65, 0x64, 0x65, 0x73, 0x63, 0x61, 0x70,
	  0x65, 0x63, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x63, 0x68, 0x75, 0x72, 0x63, 0x68,
	  0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x63,
	  0x6f, 0x72, 0x6e, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x6d, 0x65,
	  0x6d, 0x6f, 0x72, 0x79, 0x69, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x70, 0x6f, 0x6c,
	  0x69, 0x63, 0x65, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x4e, 0x75, 0x6d, 0x62,
	  0x65, 0x72, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x6f, 0x66, 0x66, 0x65, 0x72,
	  0x73, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x64,
	  0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x73,
	  0x69, 0x6c, 0x76, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x64, 0x65,
	  0x6c, 0x65, 0x74, 0x65, 0x62, 0x65, 0x74, 0x74, 0x65, 0x72, 0x62, 0x72, 0x6f,
	  0x77, 0x73, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x47, 0x6c, 0x6f, 0x62,
	  0x61, 0x6c, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x77, 0x69, 0x64, 0x67, 0x65,
	  0x74, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74,
	  0x6e, 0x6f, 0x77, 0x72, 0x61, 0x70, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x63,
	  0x6c, 0x61, 0x69, 0x6d, 0x73, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x73, 0x61,
	  0x66, 0x65, 0x74, 0x79, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x70, 0x69,
	  0x72, 0x69, 0x74, 0x2d, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x70, 0x72, 0x65,
	  0x61, 0x64, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x6e, 0x65, 0x65, 0x64, 0x65,
	  0x64, 0x72, 0x75, 0x73, 0x73, 0x69, 0x61, 0x70, 0x6c, 0x65, 0x61, 0x73, 0x65,
	  0x65, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x62,
	  0x72, 0x6f, 0x6b, 0x65, 0x6e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x63, 0x68,
	  0x61, 0x72, 0x67, 0x65, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x66, 0x61, 0x63,
	  0x74, 0x6f, 0x72, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2d, 0x62, 0x61, 0x73,
	  0x65, 0x64, 0x74, 0x68, 0x65, 0x6f, 0x72, 0x79, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	  0x67, 0x61, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x64,
	  0x68, 0x65, 0x6c, 0x70, 0x65, 0x64, 0x43, 0x68, 0x75, 0x72, 0x63, 0x68, 0x69,
	  0x6d, 0x70, 0x61, 0x63, 0x74, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x61, 0x6c,
	  0x77, 0x61, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x6f, 0x22, 0x20, 0x62, 0x6f, 0x74,
	  0x74, 0x6f, 0x6d, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x3e, 0x29, 0x7b, 0x76, 0x61,
	  0x72, 0x20, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x6f, 0x72, 0x61, 0x6e, 0x67,
	  0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x75, 0x73, 0x68, 0x28,
	  0x63, 0x6f, 0x75, 0x70, 0x6c, 0x65, 0x67, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x62,
	  0x72, 0x69, 0x64, 0x67, 0x65, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x52, 0x65,
	  0x76, 0x69, 0x65, 0x77, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x76, 0x69, 0x73,
	  0x69, 0x6f, 0x6e, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x69,
	  0x6e, 0x67, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x62, 0x65, 0x61, 0x75, 0x74,
	  0x79, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x66, 0x6f, 0x72, 0x67, 0x6f, 0x74,
	  0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x61,
	  0x6c, 0x6d, 0x6f, 0x73, 0x74, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x43, 0x68,
	  0x61, 0x6e, 0x67, 0x65, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x74, 0x72,
	  0x69, 0x6e, 0x67, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x6f, 0x62, 0x69,
	  0x6c, 0x65, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x73, 0x75, 0x70, 0x70, 0x6c,
	  0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73,
	  0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x26, 0x6e, 0x62, 0x73, 0x70, 0x3b, 0x63,
	  0x6f, 0x75, 0x72, 0x73, 0x65, 0x41, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x69, 0x73,
	  0x6c, 0x61, 0x6e, 0x64, 0x3c, 0x68, 0x74, 0x6d, 0x6c, 0x20, 0x63, 0x6f, 0x6f,
	  0x6b, 0x69, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x22, 0x61, 0x6d, 0x61, 0x7a,
	  0x6f, 0x6e, 0x6d, 0x6f, 0x64, 0x65, 0x72, 0x6e, 0x61, 0x64, 0x76, 0x69, 0x63,
	  0x65, 0x69, 0x6e, 0x3c, 0x2f, 0x61, 0x3e, 0x3a, 0x20, 0x54, 0x68, 0x65, 0x20,
	  0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x73, 0x42,
	  0x45, 0x47, 0x49, 0x4e, 0x20, 0x4d, 0x65, 0x78, 0x69, 0x63, 0x6f, 0x73, 0x74,
	  0x61, 0x72, 0x74, 0x73, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x68, 0x65, 0x69,
	  0x67, 0x68, 0x74, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x73, 0x6c, 0x61,
	  0x6e, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x45, 0x6d, 0x70, 0x69, 0x72,
	  0x65, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x65, 0x66, 0x66, 0x6f, 0x72, 0x74,
	  0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6e, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x6d,
	  0x61, 0x6e, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x0a,
	  0x0a, 0x4f, 0x6e, 0x65, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x6d, 0x65, 0x6e,
	  0x75, 0x22, 0x3e, 0x50, 0x68, 0x69, 0x6c, 0x69, 0x70, 0x61, 0x77, 0x61, 0x72,
	  0x64, 0x73, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x69, 0x6d, 0x70, 0x6f, 0x72,
	  0x74, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x72, 0x65, 0x67, 0x61, 0x72, 0x64,
	  0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	  0x70, 0x6f, 0x72, 0x74, 0x73, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65, 0x77, 0x65,
	  0x65, 0x6b, 0x6c, 0x79, 0x20, 0x28, 0x65, 0x2e, 0x67, 0x2e, 0x62, 0x65, 0x68,
	  0x69, 0x6e, 0x64, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x6c, 0x6f, 0x67, 0x67,
	  0x65, 0x64, 0x75, 0x6e, 0x69, 0x74, 0x65, 0x64, 0x3c, 0x2f, 0x62, 0x3e, 0x3c,
	  0x2f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x73, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x73,
	  0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x69,
	  0x73, 0x73, 0x75, 0x65, 0x64, 0x33, 0x30, 0x30, 0x70, 0x78, 0x7c, 0x63, 0x61,
	  0x6e, 0x61, 0x64, 0x61, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x73, 0x63, 0x68,
	  0x65, 0x6d, 0x65, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x42, 0x72, 0x61, 0x7a,
	  0x69, 0x6c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x6c, 0x6f, 0x67, 0x6f, 0x22,
	  0x3e, 0x62, 0x65, 0x79, 0x6f, 0x6e, 0x64, 0x2d, 0x73, 0x63, 0x61, 0x6c, 0x65,
	  0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x6d,
	  0x61, 0x72, 0x69, 0x6e, 0x65, 0x46, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x63, 0x61,
	  0x6d, 0x65, 0x72, 0x61, 0x3c, 0x2f, 0x68, 0x31, 0x3e, 0x0a, 0x5f, 0x66, 0x6f,
	  0x72, 0x6d, 0x22, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x73, 0x74, 0x72, 0x65,
	  0x73, 0x73, 0x22, 0x20, 0x2f, 0x3e, 0x0d, 0x0a, 0x2e, 0x67, 0x69, 0x66, 0x22,
	  0x20, 0x6f, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72,
	  0x4f, 0x78, 0x66, 0x6f, 0x72, 0x64, 0x73, 0x69, 0x73, 0x74, 0x65, 0x72, 0x73,
	  0x75, 0x72, 0x76, 0x69, 0x76, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x66, 0x65,
	  0x6d, 0x61, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x73, 0x69, 0x7a,
	  0x65, 0x3d, 0x22, 0x61, 0x70, 0x70, 0x65, 0x61, 0x6c, 0x74, 0x65, 0x78, 0x74,
	  0x22, 0x3e, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x74, 0x68, 0x61, 0x6e, 0x6b,
	  0x73, 0x68, 0x69, 0x67, 0x68, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x64,
	  0x61, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x61, 0x6e, 0x79, 0x6f, 0x6e, 0x65, 0x41,
	  0x66, 0x72, 0x69, 0x63, 0x61, 0x61, 0x67, 0x72, 0x65, 0x65, 0x64, 0x72, 0x65,
	  0x63, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x3c, 0x62, 0x72,
	  0x20, 0x2f, 0x3e, 0x77, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x70, 0x72, 0x69, 0x63,
	  0x65, 0x73, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x7c, 0x7c, 0x20, 0x7b, 0x7d,
	  0x3b, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0x3e, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	  0x73, 0x75, 0x6e, 0x64, 0x61, 0x79, 0x77, 0x72, 0x61, 0x70, 0x22, 0x3e, 0x66,
	  0x61, 0x69, 0x6c, 0x65, 0x64, 0x63, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x6d, 0x69,
	  0x6e, 0x75, 0x74, 0x65, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x71, 0x75, 0x6f,
	  0x74, 0x65, 0x73, 0x31, 0x35, 0x30, 0x70, 0x78, 0x7c, 0x65, 0x73, 0x74, 0x61,
	  0x74, 0x65, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	  0x22, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x72, 0x69, 0x67, 0x68, 0x74, 0x3b,
	  0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x31,
	  0x2e, 0x68, 0x74, 0x6d, 0x6c, 0x73, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x70, 0x72,
	  0x69, 0x6e, 0x63, 0x65, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3a, 0x2e, 0x70, 0x6e,
	  0x67, 0x22, 0x20, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x41, 0x63, 0x63, 0x65,
	  0x73, 0x73, 0x70, 0x61, 0x70, 0x65, 0x72, 0x73, 0x73, 0x6f, 0x75, 0x6e, 0x64,
	  0x73, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	  0x73, 0x6c, 0x69, 0x64, 0x65, 0x72, 0x55, 0x54, 0x46, 0x2d, 0x38, 0x22, 0x26,
	  0x61, 0x6d, 0x70, 0x3b, 0x20, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x2e, 0x20,
	  0x57, 0x69, 0x74, 0x68, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x6f, 0x77, 0x6e,
	  0x65, 0x72, 0x73, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x70, 0x72, 0x6f, 0x66,
	  0x69, 0x74, 0x6a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x61, 0x6e, 0x6e, 0x75, 0x61,
	  0x6c, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x62, 0x6f, 0x75, 0x67, 0x68, 0x74,
	  0x66, 0x61, 0x6d, 0x6f, 0x75, 0x73, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x6c,
	  0x6f, 0x6e, 0x67, 0x65, 0x72, 0x69, 0x2b, 0x2b, 0x29, 0x20, 0x7b, 0x69, 0x73,
	  0x72, 0x61, 0x65, 0x6c, 0x73, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x63,
	  0x69, 0x64, 0x65, 0x68, 0x6f, 0x6d, 0x65, 0x22, 0x3e, 0x68, 0x65, 0x61, 0x64,
	  0x65, 0x72, 0x65, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x62, 0x72, 0x61, 0x6e, 0x63,
	  0x68, 0x70, 0x69, 0x65, 0x63, 0x65, 0x73, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x3b,
	  0x73, 0x74, 0x61, 0x74, 0x65, 0x64, 0x74, 0x6f, 0x70, 0x22, 0x3e, 0x3c, 0x72,
	  0x61, 0x63, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x2d, 0x2d,
	  0x26, 0x67, 0x74, 0x3b, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x73, 0x65, 0x78,
	  0x75, 0x61, 0x6c, 0x62, 0x75, 0x72, 0x65, 0x61, 0x75, 0x2e, 0x6a, 0x70, 0x67,
	  0x22, 0x20, 0x31, 0x30, 0x2c, 0x30, 0x30, 0x30, 0x6f, 0x62, 0x74, 0x61, 0x69,
	  0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	  0x2c, 0x20, 0x49, 0x6e, 0x63, 0x2e, 0x63, 0x6f, 0x6d, 0x65, 0x64, 0x79, 0x6d,
	  0x65, 0x6e, 0x75, 0x22, 0x20, 0x6c, 0x79, 0x72, 0x69, 0x63, 0x73, 0x74, 0x6f,
	  0x64, 0x61, 0x79, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x65, 0x64, 0x63, 0x6f, 0x75,
	  0x6e, 0x74, 0x79, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x2e, 0x46, 0x61, 0x6d, 0x69,
	  0x6c, 0x79, 0x6c, 0x6f, 0x6f, 0x6b, 0x65, 0x64, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	  0x74, 0x6c, 0x73, 0x65, 0x20, 0x69, 0x66, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	  0x74, 0x75, 0x72, 0x6b, 0x65, 0x79, 0x29, 0x3b, 0x76, 0x61, 0x72, 0x20, 0x66,
	  0x6f, 0x72, 0x65, 0x73, 0x74, 0x67, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x65, 0x72,
	  0x72, 0x6f, 0x72, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x7d, 0x65, 0x6c,
	  0x73, 0x65, 0x7b, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x42, 0x6c, 0x6f, 0x67,
	  0x3c, 0x2f, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	  0x2e, 0x66, 0x61, 0x73, 0x74, 0x65, 0x72, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73,
	  0x3c, 0x62, 0x6f, 0x64, 0x79, 0x20, 0x31, 0x30, 0x70, 0x78, 0x20, 0x30, 0x70,
	  0x72, 0x61, 0x67, 0x6d, 0x61, 0x66, 0x72, 0x69, 0x64, 0x61, 0x79, 0x6a, 0x75,
	  0x6e, 0x69, 0x6f, 0x72, 0x64, 0x6f, 0x6c, 0x6c, 0x61, 0x72, 0x70, 0x6c, 0x61,
	  0x63, 0x65, 0x64, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x70, 0x6c, 0x75, 0x67,
	  0x69, 0x6e, 0x35, 0x2c, 0x30, 0x30, 0x30, 0x20, 0x70, 0x61, 0x67, 0x65, 0x22,
	  0x3e, 0x62, 0x6f, 0x73, 0x74, 0x6f, 0x6e, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x28,
	  0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f,
	  0x63, 0x6f, 0x75, 0x6e, 0x74, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x73, 0x73, 0x63,
	  0x68, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2c, 0x66, 0x69, 0x6c,
	  0x6c, 0x65, 0x64, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x72, 0x65, 0x61, 0x64,
	  0x65, 0x72, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x28, 0x61, 0x70, 0x70, 0x65, 0x61,
	  0x72, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x3e,
	  0x62, 0x6f, 0x64, 0x79, 0x22, 0x3e, 0x0a, 0x2a, 0x20, 0x54, 0x68, 0x65, 0x54,
	  0x68, 0x6f, 0x75, 0x67, 0x68, 0x73, 0x65, 0x65, 0x69, 0x6e, 0x67, 0x6a, 0x65,
	  0x72, 0x73, 0x65, 0x79, 0x4e, 0x65, 0x77, 0x73, 0x3c, 0x2f, 0x76, 0x65, 0x72,
	  0x69, 0x66, 0x79, 0x65, 0x78, 0x70, 0x65, 0x72, 0x74, 0x69, 0x6e, 0x6a, 0x75,
	  0x72, 0x79, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3d, 0x43, 0x6f, 0x6f, 0x6b, 0x69,
	  0x65, 0x53, 0x54, 0x41, 0x52, 0x54, 0x20, 0x61, 0x63, 0x72, 0x6f, 0x73, 0x73,
	  0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x6e,
	  0x61, 0x74, 0x69, 0x76, 0x65, 0x70, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x6f,
	  0x78, 0x22, 0x3e, 0x0a, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20, 0x44, 0x61,
	  0x76, 0x69, 0x64, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x74, 0x61, 0x62, 0x6c,
	  0x65, 0x73, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x41, 0x70, 0x72, 0x69, 0x6c,
	  0x20, 0x72, 0x65, 0x61, 0x6c, 0x6c, 0x79, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	  0x69, 0x74, 0x65, 0x6d, 0x22, 0x3e, 0x6d, 0x6f, 0x72, 0x65, 0x22, 0x3e, 0x62,
	  0x6f, 0x61, 0x72, 0x64, 0x73, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x63, 0x61,
	  0x6d, 0x70, 0x75, 0x73, 0x66, 0x69, 0x72, 0x73, 0x74, 0x20, 0x7c, 0x7c, 0x20,
	  0x5b, 0x5d, 0x3b, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x67, 0x75, 0x69, 0x74,
	  0x61, 0x72, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x77, 0x69, 0x64, 0x74, 0x68,
	  0x3a, 0x73, 0x68, 0x6f, 0x77, 0x65, 0x64, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x20,
	  0x2e, 0x70, 0x68, 0x70, 0x22, 0x20, 0x61, 0x73, 0x73, 0x75, 0x6d, 0x65, 0x6c,
	  0x61, 0x79, 0x65, 0x72, 0x73, 0x77, 0x69, 0x6c, 0x73, 0x6f, 0x6e, 0x73, 0x74,
	  0x6f, 0x72, 0x65, 0x73, 0x72, 0x65, 0x6c, 0x69, 0x65, 0x66, 0x73, 0x77, 0x65,
	  0x64, 0x65, 0x6e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x61, 0x73, 0x69,
	  0x6c, 0x79, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e,
	  0x67, 0x0a, 0x0a, 0x57, 0x68, 0x69, 0x6c, 0x74, 0x61, 0x79, 0x6c, 0x6f, 0x72,
	  0x63, 0x6c, 0x65, 0x61, 0x72, 0x3a, 0x72, 0x65, 0x73, 0x6f, 0x72, 0x74, 0x66,
	  0x72, 0x65, 0x6e, 0x63, 0x68, 0x74, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x22, 0x29,
	  0x20, 0x2b, 0x20, 0x22, 0x3c, 0x62, 0x6f, 0x64, 0x79, 0x3e, 0x62, 0x75, 0x79,
	  0x69, 0x6e, 0x67, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x4d, 0x65, 0x6d, 0x62,
	  0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3e, 0x6f, 0x70, 0x70, 0x69, 0x6e,
	  0x67, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x35, 0x70, 0x78, 0x3b, 0x22, 0x3e,
	  0x76, 0x73, 0x70, 0x61, 0x63, 0x65, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x6d,
	  0x61, 0x6a, 0x6f, 0x72, 0x20, 0x63, 0x6f, 0x66, 0x66, 0x65, 0x65, 0x6d, 0x61,
	  0x72, 0x74, 0x69, 0x6e, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x68, 0x61, 0x70,
	  0x70, 0x65, 0x6e, 0x3c, 0x2f, 0x6e, 0x61, 0x76, 0x3e, 0x6b, 0x61, 0x6e, 0x73,
	  0x61, 0x73, 0x6c, 0x69, 0x6e, 0x6b, 0x22, 0x3e, 0x49, 0x6d, 0x61, 0x67, 0x65,
	  0x73, 0x3d, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20,
	  0x68, 0x73, 0x70, 0x61, 0x63, 0x65, 0x30, 0x26, 0x61, 0x6d, 0x70, 0x3b, 0x20,
	  0x0a, 0x0a, 0x49, 0x6e, 0x20, 0x20, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x50, 0x6f,
	  0x6c, 0x73, 0x6b, 0x69, 0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x6a, 0x6f, 0x72,
	  0x64, 0x61, 0x6e, 0x42, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x72,
	  0x74, 0x20, 0x2d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0x2e, 0x68, 0x74, 0x6d,
	  0x6c, 0x6e, 0x65, 0x77, 0x73, 0x22, 0x3e, 0x30, 0x31, 0x2e, 0x6a, 0x70, 0x67,
	  0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6d,
	  0x69, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x65, 0x6e, 0x69, 0x6f, 0x72, 0x49, 0x53,
	  0x42, 0x4e, 0x20, 0x30, 0x30, 0x2c, 0x30, 0x30, 0x30, 0x20, 0x67, 0x75, 0x69,
	  0x64, 0x65, 0x73, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x29, 0x65, 0x63, 0x74, 0x69,
	  0x6f, 0x6e, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x2e, 0x78, 0x6d, 0x6c, 0x22,
	  0x20, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2e, 0x68, 0x74, 0x6d, 0x6c,
	  0x2d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x72, 0x65, 0x67, 0x45, 0x78, 0x70, 0x3a,
	  0x68, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x76, 0x69,
	  0x72, 0x67, 0x69, 0x6e, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x73, 0x3c, 0x2f, 0x74,
	  0x72, 0x3e, 0x0d, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x0a, 0x09, 0x76, 0x61,
	  0x72, 0x20, 0x3e, 0x27, 0x29, 0x3b, 0x0a, 0x09, 0x3c, 0x2f, 0x74, 0x64, 0x3e,
	  0x0a, 0x3c, 0x2f, 0x74, 0x72, 0x3e, 0x0a, 0x62, 0x61, 0x68, 0x61, 0x73, 0x61,
	  0x62, 0x72, 0x61, 0x73, 0x69, 0x6c, 0x67, 0x61, 0x6c, 0x65, 0x67, 0x6f, 0x6d,
	  0x61, 0x67, 0x79, 0x61, 0x72, 0x70, 0x6f, 0x6c, 0x73, 0x6b, 0x69, 0x73, 0x72,
	  0x70, 0x73, 0x6b, 0x69, 0xd8, 0xb1, 0xd8, 0xaf, 0xd9, 0x88, 0xe4, 0xb8, 0xad,
	  0xe6, 0x96, 0x87, 0xe7, 0xae, 0x80, 0xe4, 0xbd, 0x93, 0xe7, 0xb9, 0x81, 0xe9,
	  0xab, 0x94, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe4, 0xb8, 0xad, 0xe5, 0x9b,
	  0xbd, 0xe6, 0x88, 0x91, 0xe4, 0xbb, 0xac, 0xe4, 0xb8, 0x80, 0xe4, 0xb8, 0xaa,
	  0xe5, 0x85, 0xac, 0xe5, 0x8f, 0xb8, 0xe7, 0xae, 0xa1, 0xe7, 0x90, 0x86, 0xe8,
	  0xae, 0xba, 0xe5, 0x9d, 0x9b, 0xe5, 0x8f, 0xaf, 0xe4, 0xbb, 0xa5, 0xe6, 0x9c,
	  0x8d, 0xe5, 0x8a, 0xa1, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0xe4, 0xb8, 0xaa,
	  0xe4, 0xba, 0xba, 0xe4, 0xba, 0xa7, 0xe5, 0x93, 0x81, 0xe8, 0x87, 0xaa, 0xe5,
	  0xb7, 0xb1, 0xe4, 0xbc, 0x81, 0xe4, 0xb8, 0x9a, 0xe6, 0x9f, 0xa5, 0xe7, 0x9c,
	  0x8b, 0xe5, 0xb7, 0xa5, 0xe4, 0xbd, 0x9c, 0xe8, 0x81, 0x94, 0xe7, 0xb3, 0xbb,
	  0xe6, 0xb2, 0xa1, 0xe6, 0x9c, 0x89, 0xe7, 0xbd, 0x91, 0xe7, 0xab, 0x99, 0xe6,
	  0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe8, 0xaf, 0x84, 0xe8, 0xae, 0xba, 0xe4, 0xb8,
	  0xad, 0xe5, 0xbf, 0x83, 0xe6, 0x96, 0x87, 0xe7, 0xab, 0xa0, 0xe7, 0x94, 0xa8,
	  0xe6, 0x88, 0xb7, 0xe9, 0xa6, 0x96, 0xe9, 0xa1, 0xb5, 0xe4, 0xbd, 0x9c, 0xe8,
	  0x80, 0x85, 0xe6, 0x8a, 0x80, 0xe6, 0x9c, 0xaf, 0xe9, 0x97, 0xae, 0xe9, 0xa2,
	  0x98, 0xe7, 0x9b, 0xb8, 0xe5, 0x85, 0xb3, 0xe4, 0xb8, 0x8b, 0xe8, 0xbd, 0xbd,
	  0xe6, 0x90, 0x9c, 0xe7, 0xb4, 0xa2, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe8,
	  0xbd, 0xaf, 0xe4, 0xbb, 0xb6, 0xe5, 0x9c, 0xa8, 0xe7, 0xba, 0xbf, 0xe4, 0xb8,
	  0xbb, 0xe9, 0xa2, 0x98, 0xe8, 0xb5, 0x84, 0xe6, 0x96, 0x99, 0xe8, 0xa7, 0x86,
	  0xe9, 0xa2, 0x91, 0xe5, 0x9b, 0x9e, 0xe5, 0xa4, 0x8d, 0xe6, 0xb3, 0xa8, 0xe5,
	  0x86, 0x8c, 0xe7, 0xbd, 0x91, 0xe7, 0xbb, 0x9c, 0xe6, 0x94, 0xb6, 0xe8, 0x97,
	  0x8f, 0xe5, 0x86, 0x85, 0xe5, 0xae, 0xb9, 0xe6, 0x8e, 0xa8, 0xe8, 0x8d, 0x90,
	  0xe5, 0xb8, 0x82, 0xe5, 0x9c, 0xba, 0xe6, 0xb6, 0x88, 0xe6, 0x81, 0xaf, 0xe7,
	  0xa9, 0xba, 0xe9, 0x97, 0xb4, 0xe5, 0x8f, 0x91, 0xe5, 0xb8, 0x83, 0xe4, 0xbb,
	  0x80, 0xe4, 0xb9, 0x88, 0xe5, 0xa5, 0xbd, 0xe5, 0x8f, 0x8b, 0xe7, 0x94, 0x9f,
	  0xe6, 0xb4, 0xbb, 0xe5, 0x9b, 0xbe, 0xe7, 0x89, 0x87, 0xe5, 0x8f, 0x91, 0xe5,
	  0xb1, 0x95, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe6, 0x89, 0x8b, 0xe6, 0x9c,
	  0xba, 0xe6, 0x96, 0xb0, 0xe9, 0x97, 0xbb, 0xe6, 0x9c, 0x80, 0xe6, 0x96, 0xb0,
	  0xe6, 0x96, 0xb9, 0xe5, 0xbc, 0x8f, 0xe5, 0x8c, 0x97, 0xe4, 0xba, 0xac, 0xe6,
	  0x8f, 0x90, 0xe4, 0xbe, 0x9b, 0xe5, 0x85, 0xb3, 0xe4, 0xba, 0x8e, 0xe6, 0x9b,
	  0xb4, 0xe5, 0xa4, 0x9a, 0xe8, 0xbf, 0x99, 0xe4, 0xb8, 0xaa, 0xe7, 0xb3, 0xbb,
	  0xe7, 0xbb, 0x9f, 0xe7, 0x9f, 0xa5, 0xe9, 0x81, 0x93, 0xe6, 0xb8, 0xb8, 0xe6,
	  0x88, 0x8f, 0xe5, 0xb9, 0xbf, 0xe5, 0x91, 0x8a, 0xe5, 0x85, 0xb6, 0xe4, 0xbb,
	  0x96, 0xe5, 0x8f, 0x91, 0xe8, 0xa1, 0xa8, 0xe5, 0xae, 0x89, 0xe5, 0x85, 0xa8,
	  0xe7, 0xac, 0xac, 0xe4, 0xb8, 0x80, 0xe4, 0xbc, 0x9a, 0xe5, 0x91, 0x98, 0xe8,
	  0xbf, 0x9b, 0xe8, 0xa1, 0x8c, 0xe7, 0x82, 0xb9, 0xe5, 0x87, 0xbb, 0xe7, 0x89,
	  0x88, 0xe6, 0x9d, 0x83, 0xe7, 0x94, 0xb5, 0xe5, 0xad, 0x90, 0xe4, 0xb8, 0x96,
	  0xe7, 0x95, 0x8c, 0xe8, 0xae, 0xbe, 0xe8, 0xae, 0xa1, 0xe5, 0x85, 0x8d, 0xe8,
	  0xb4, 0xb9, 0xe6, 0x95, 0x99, 0xe8, 0x82, 0xb2, 0xe5, 0x8a, 0xa0, 0xe5, 0x85,
	  0xa5, 0xe6, 0xb4, 0xbb, 0xe5, 0x8a, 0xa8, 0xe4, 0xbb, 0x96, 0xe4, 0xbb, 0xac,
	  0xe5, 0x95, 0x86, 0xe5, 0x93, 0x81, 0xe5, 0x8d, 0x9a, 0xe5, 0xae, 0xa2, 0xe7,
	  0x8e, 0xb0, 0xe5, 0x9c, 0xa8, 0xe4, 0xb8, 0x8a, 0xe6, 0xb5, 0xb7, 0xe5, 0xa6,
	  0x82, 0xe4, 0xbd, 0x95, 0xe5, 0xb7, 0xb2, 0xe7, 0xbb, 0x8f, 0xe7, 0x95, 0x99,
	  0xe8, 0xa8, 0x80, 0xe8, 0xaf, 0xa6, 0xe7, 0xbb, 0x86, 0xe7, 0xa4, 0xbe, 0xe5,
	  0x8c, 0xba, 0xe7, 0x99, 0xbb, 0xe5, 0xbd, 0x95, 0xe6, 0x9c, 0xac, 0xe7, 0xab,
	  0x99, 0xe9, 0x9c, 0x80, 0xe8, 0xa6, 0x81, 0xe4, 0xbb, 0xb7, 0xe6, 0xa0, 0xbc,
	  0xe6, 0x94, 0xaf, 0xe6, 0x8c, 0x81, 0xe5, 0x9b, 0xbd, 0xe9, 0x99, 0x85, 0xe9,
	  0x93, 0xbe, 0xe6, 0x8e, 0xa5, 0xe5, 0x9b, 0xbd, 0xe5, 0xae, 0xb6, 0xe5, 0xbb,
	  0xba, 0xe8, 0xae, 0xbe, 0xe6, 0x9c, 0x8b, 0xe5, 0x8f, 0x8b, 0xe9, 0x98, 0x85,
	  0xe8, 0xaf, 0xbb, 0xe6, 0xb3, 0x95, 0xe5, 0xbe, 0x8b, 0xe4, 0xbd, 0x8d, 0xe7,
	  0xbd, 0xae, 0xe7, 0xbb, 0x8f, 0xe6, 0xb5, 0x8e, 0xe9, 0x80, 0x89, 0xe6, 0x8b,
	  0xa9, 0xe8, 0xbf, 0x99, 0xe6, 0xa0, 0xb7, 0xe5, 0xbd, 0x93, 0xe5, 0x89, 0x8d,
	  0xe5, 0x88, 0x86, 0xe7, 0xb1, 0xbb, 0xe6, 0x8e, 0x92, 0xe8, 0xa1, 0x8c, 0xe5,
	  0x9b, 0xa0, 0xe4, 0xb8, 0xba, 0xe4, 0xba, 0xa4, 0xe6, 0x98, 0x93, 0xe6, 0x9c,
	  0x80, 0xe5, 0x90, 0x8e, 0xe9, 0x9f, 0xb3, 0xe4, 0xb9, 0x90, 0xe4, 0xb8, 0x8d,
	  0xe8, 0x83, 0xbd, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0xe8, 0xa1, 0x8c, 0xe4,
	  0xb8, 0x9a, 0xe7, 0xa7, 0x91, 0xe6, 0x8a, 0x80, 0xe5, 0x8f, 0xaf, 0xe8, 0x83,
	  0xbd, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe5, 0x90, 0x88, 0xe4, 0xbd, 0x9c,
	  0xe5, 0xa4, 0xa7, 0xe5, 0xae, 0xb6, 0xe7, 0xa4, 0xbe, 0xe4, 0xbc, 0x9a, 0xe7,
	  0xa0, 0x94, 0xe7, 0xa9, 0xb6, 0xe4, 0xb8, 0x93, 0xe4, 0xb8, 0x9a, 0xe5, 0x85,
	  0xa8, 0xe9, 0x83, 0xa8, 0xe9, 0xa1, 0xb9, 0xe7, 0x9b, 0xae, 0xe8, 0xbf, 0x99,
	  0xe9, 0x87, 0x8c, 0xe8, 0xbf, 0x98, 0xe6, 0x98, 0xaf, 0xe5, 0xbc, 0x80, 0xe5,
	  0xa7, 0x8b, 0xe6, 0x83, 0x85, 0xe5, 0x86, 0xb5, 0xe7, 0x94, 0xb5, 0xe8, 0x84,
	  0x91, 0xe6, 0x96, 0x87, 0xe4, 0xbb, 0xb6, 0xe5, 0x93, 0x81, 0xe7, 0x89, 0x8c,
	  0xe5, 0xb8, 0xae, 0xe5, 0x8a, 0xa9, 0xe6, 0x96, 0x87, 0xe5, 0x8c, 0x96, 0xe8,
	  0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe5, 0xa4, 0xa7, 0xe5, 0xad, 0xa6, 0xe5, 0xad,
	  0xa6, 0xe4, 0xb9, 0xa0, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0xe6, 0xb5, 0x8f,
	  0xe8, 0xa7, 0x88, 0xe6, 0x8a, 0x95, 0xe8, 0xb5, 0x84, 0xe5, 0xb7, 0xa5, 0xe7,
	  0xa8, 0x8b, 0xe8, 0xa6, 0x81, 0xe6, 0xb1, 0x82, 0xe6, 0x80, 0x8e, 0xe4, 0xb9,
	  0x88, 0xe6, 0x97, 0xb6, 0xe5, 0x80, 0x99, 0xe5, 0x8a, 0x9f, 0xe8, 0x83, 0xbd,
	  0xe4, 0xb8, 0xbb, 0xe8, 0xa6, 0x81, 0xe7, 0x9b, 0xae, 0xe5, 0x89, 0x8d, 0xe8,
	  0xb5, 0x84, 0xe8, 0xae, 0xaf, 0xe5, 0x9f, 0x8e, 0xe5, 0xb8, 0x82, 0xe6, 0x96,
	  0xb9, 0xe6, 0xb3, 0x95, 0xe7, 0x94, 0xb5, 0xe5, 0xbd, 0xb1, 0xe6, 0x8b, 0x9b,
	  0xe8, 0x81, 0x98, 0xe5, 0xa3, 0xb0, 0xe6, 0x98, 0x8e, 0xe4, 0xbb, 0xbb, 0xe4,
	  0xbd, 0x95, 0xe5, 0x81, 0xa5, 0xe5, 0xba, 0xb7, 0xe6, 0x95, 0xb0, 0xe6, 0x8d,
	  0xae, 0xe7, 0xbe, 0x8e, 0xe5, 0x9b, 0xbd, 0xe6, 0xb1, 0xbd, 0xe8, 0xbd, 0xa6,
	  0xe4, 0xbb, 0x8b, 0xe7, 0xbb, 0x8d, 0xe4, 0xbd, 0x86, 0xe6, 0x98, 0xaf, 0xe4,
	  0xba, 0xa4, 0xe6, 0xb5, 0x81, 0xe7, 0x94, 0x9f, 0xe4, 0xba, 0xa7, 0xe6, 0x89,
	  0x80, 0xe4, 0xbb, 0xa5, 0xe7, 0x94, 0xb5, 0xe8, 0xaf, 0x9d, 0xe6, 0x98, 0xbe,
	  0xe7, 0xa4, 0xba, 0xe4, 0xb8, 0x80, 0xe4, 0xba, 0x9b, 0xe5, 0x8d, 0x95, 0xe4,
	  0xbd, 0x8d, 0xe4, 0xba, 0xba, 0xe5, 0x91, 0x98, 0xe5, 0x88, 0x86, 0xe6, 0x9e,
	  0x90, 0xe5, 0x9c, 0xb0, 0xe5, 0x9b, 0xbe, 0xe6, 0x97, 0x85, 0xe6, 0xb8, 0xb8,
	  0xe5, 0xb7, 0xa5, 0xe5, 0x85, 0xb7, 0xe5, 0xad, 0xa6, 0xe7, 0x94, 0x9f, 0xe7,
	  0xb3, 0xbb, 0xe5, 0x88, 0x97, 0xe7, 0xbd, 0x91, 0xe5, 0x8f, 0x8b, 0xe5, 0xb8,
	  0x96, 0xe5, 0xad, 0x90, 0xe5, 0xaf, 0x86, 0xe7, 0xa0, 0x81, 0xe9, 0xa2, 0x91,
	  0xe9, 0x81, 0x93, 0xe6, 0x8e, 0xa7, 0xe5, 0x88, 0xb6, 0xe5, 0x9c, 0xb0, 0xe5,
	  0x8c, 0xba, 0xe5, 0x9f, 0xba, 0xe6, 0x9c, 0xac, 0xe5, 0x85, 0xa8, 0xe5, 0x9b,
	  0xbd, 0xe7, 0xbd, 0x91, 0xe4, 0xb8, 0x8a, 0xe9, 0x87, 0x8d, 0xe8, 0xa6, 0x81,
	  0xe7, 0xac, 0xac, 0xe4, 0xba, 0x8c, 0xe5, 0x96, 0x9c, 0xe6, 0xac, 0xa2, 0xe8,
	  0xbf, 0x9b, 0xe5, 0x85, 0xa5, 0xe5, 0x8f, 0x8b, 0xe6, 0x83, 0x85, 0xe8, 0xbf,
	  0x99, 0xe4, 0xba, 0x9b, 0xe8, 0x80, 0x83, 0xe8, 0xaf, 0x95, 0xe5, 0x8f, 0x91,
	  0xe7, 0x8e, 0xb0, 0xe5, 0x9f, 0xb9, 0xe8, 0xae, 0xad, 0xe4, 0xbb, 0xa5, 0xe4,
	  0xb8, 0x8a, 0xe6, 0x94, 0xbf, 0xe5, 0xba, 0x9c, 0xe6, 0x88, 0x90, 0xe4, 0xb8,
	  0xba, 0xe7, 0x8e, 0xaf, 0xe5, 0xa2, 0x83, 0xe9, 0xa6, 0x99, 0xe6, 0xb8, 0xaf,
	  0xe5, 0x90, 0x8c, 0xe6, 0x97, 0xb6, 0xe5, 0xa8, 0xb1, 0xe4, 0xb9, 0x90, 0xe5,
	  0x8f, 0x91, 0xe9, 0x80, 0x81, 0xe4, 0xb8, 0x80, 0xe5, 0xae, 0x9a, 0xe5, 0xbc,
	  0x80, 0xe5, 0x8f, 0x91, 0xe4, 0xbd, 0x9c, 0xe5, 0x93, 0x81, 0xe6, 0xa0, 0x87,
	  0xe5, 0x87, 0x86, 0xe6, 0xac, 0xa2, 0xe8, 0xbf, 0x8e, 0xe8, 0xa7, 0xa3, 0xe5,
	  0x86, 0xb3, 0xe5, 0x9c, 0xb0, 0xe6, 0x96, 0xb9, 0xe4, 0xb8, 0x80, 0xe4, 0xb8,
	  0x8b, 0xe4, 0xbb, 0xa5, 0xe5, 0x8f, 0x8a, 0xe8, 0xb4, 0xa3, 0xe4, 0xbb, 0xbb,
	  0xe6, 0x88, 0x96, 0xe8, 0x80, 0x85, 0xe5, 0xae, 0xa2, 0xe6, 0x88, 0xb7, 0xe4,
	  0xbb, 0xa3, 0xe8, 0xa1, 0xa8, 0xe7, 0xa7, 0xaf, 0xe5, 0x88, 0x86, 0xe5, 0xa5,
	  0xb3, 0xe4, 0xba, 0xba, 0xe6, 0x95, 0xb0, 0xe7, 0xa0, 0x81, 0xe9, 0x94, 0x80,
	  0xe5, 0x94, 0xae, 0xe5, 0x87, 0xba, 0xe7, 0x8e, 0xb0, 0xe7, 0xa6, 0xbb, 0xe7,
	  0xba, 0xbf, 0xe5, 0xba, 0x94, 0xe7, 0x94, 0xa8, 0xe5, 0x88, 0x97, 0xe8, 0xa1,
	  0xa8, 0xe4, 0xb8, 0x8d, 0xe5, 0x90, 0x8c, 0xe7, 0xbc, 0x96, 0xe8, 0xbe, 0x91,
	  0xe7, 0xbb, 0x9f, 0xe8, 0xae, 0xa1, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe4,
	  0xb8, 0x8d, 0xe8, 0xa6, 0x81, 0xe6, 0x9c, 0x89, 0xe5, 0x85, 0xb3, 0xe6, 0x9c,
	  0xba, 0xe6, 0x9e, 0x84, 0xe5, 0xbe, 0x88, 0xe5, 0xa4, 0x9a, 0xe6, 0x92, 0xad,
	  0xe6, 0x94, 0xbe, 0xe7, 0xbb, 0x84, 0xe7, 0xbb, 0x87, 0xe6, 0x94, 0xbf, 0xe7,
	  0xad, 0x96, 0xe7, 0x9b, 0xb4, 0xe6, 0x8e, 0xa5, 0xe8, 0x83, 0xbd, 0xe5, 0x8a,
	  0x9b, 0xe6, 0x9d, 0xa5, 0xe6, 0xba, 0x90, 0xe6, 0x99, 0x82, 0xe9, 0x96, 0x93,
	  0xe7, 0x9c, 0x8b, 0xe5, 0x88, 0xb0, 0xe7, 0x83, 0xad, 0xe9, 0x97, 0xa8, 0xe5,
	  0x85, 0xb3, 0xe9, 0x94, 0xae, 0xe4, 0xb8, 0x93, 0xe5, 0x8c, 0xba, 0xe9, 0x9d,
	  0x9e, 0xe5, 0xb8, 0xb8, 0xe8, 0x8b, 0xb1, 0xe8, 0xaf, 0xad, 0xe7, 0x99, 0xbe,
	  0xe5, 0xba, 0xa6, 0xe5, 0xb8, 0x8c, 0xe6, 0x9c, 0x9b, 0xe7, 0xbe, 0x8e, 0xe5,
	  0xa5, 0xb3, 0xe6, 0xaf, 0x94, 0xe8, 0xbe, 0x83, 0xe7, 0x9f, 0xa5, 0xe8, 0xaf,
	  0x86, 0xe8, 0xa7, 0x84, 0xe5, 0xae, 0x9a, 0xe5, 0xbb, 0xba, 0xe8, 0xae, 0xae,
	  0xe9, 0x83, 0xa8, 0xe9, 0x97, 0xa8, 0xe6, 0x84, 0x8f, 0xe8, 0xa7, 0x81, 0xe7,
	  0xb2, 0xbe, 0xe5, 0xbd, 0xa9, 0xe6, 0x97, 0xa5, 0xe6, 0x9c, 0xac, 0xe6, 0x8f,
	  0x90, 0xe9, 0xab, 0x98, 0xe5, 0x8f, 0x91, 0xe8, 0xa8, 0x80, 0xe6, 0x96, 0xb9,
	  0xe9, 0x9d, 0xa2, 0xe5, 0x9f, 0xba, 0xe9, 0x87, 0x91, 0xe5, 0xa4, 0x84, 0xe7,
	  0x90, 0x86, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe5, 0xbd, 0xb1, 0xe7, 0x89,
	  0x87, 0xe9, 0x93, 0xb6, 0xe8, 0xa1, 0x8c, 0xe8, 0xbf, 0x98, 0xe6, 0x9c, 0x89,
	  0xe5, 0x88, 0x86, 0xe4, 0xba, 0xab, 0xe7, 0x89, 0xa9, 0xe5, 0x93, 0x81, 0xe7,
	  0xbb, 0x8f, 0xe8, 0x90, 0xa5, 0xe6, 0xb7, 0xbb, 0xe5, 0x8a, 0xa0, 0xe4, 0xb8,
	  0x93, 0xe5, 0xae, 0xb6, 0xe8, 0xbf, 0x99, 0xe7, 0xa7, 0x8d, 0xe8, 0xaf, 0x9d,
	  0xe9, 0xa2, 0x98, 0xe8, 0xb5, 0xb7, 0xe6, 0x9d, 0xa5, 0xe4, 0xb8, 0x9a, 0xe5,
	  0x8a, 0xa1, 0xe5, 0x85, 0xac, 0xe5, 0x91, 0x8a, 0xe8, 0xae, 0xb0, 0xe5, 0xbd,
	  0x95, 0xe7, 0xae, 0x80, 0xe4, 0xbb, 0x8b, 0xe8, 0xb4, 0xa8, 0xe9, 0x87, 0x8f,
	  0xe7, 0x94, 0xb7, 0xe4, 0xba, 0xba, 0xe5, 0xbd, 0xb1, 0xe5, 0x93, 0x8d, 0xe5,
	  0xbc, 0x95, 0xe7, 0x94, 0xa8, 0xe6, 0x8a, 0xa5, 0xe5, 0x91, 0x8a, 0xe9, 0x83,
	  0xa8, 0xe5, 0x88, 0x86, 0xe5, 0xbf, 0xab, 0xe9, 0x80, 0x9f, 0xe5, 0x92, 0xa8,
	  0xe8, 0xaf, 0xa2, 0xe6, 0x97, 0xb6, 0xe5, 0xb0, 0x9a, 0xe6, 0xb3, 0xa8, 0xe6,
	  0x84, 0x8f, 0xe7, 0x94, 0xb3, 0xe8, 0xaf, 0xb7, 0xe5, 0xad, 0xa6, 0xe6, 0xa0,
	  0xa1, 0xe5, 0xba, 0x94, 0xe8, 0xaf, 0xa5, 0xe5, 0x8e, 0x86, 0xe5, 0x8f, 0xb2,
	  0xe5, 0x8f, 0xaa, 0xe6, 0x98, 0xaf, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe8,
	  0xb4, 0xad, 0xe4, 0xb9, 0xb0, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xe4, 0xb8,
	  0xba, 0xe4, 0xba, 0x86, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0xe8, 0xaf, 0xb4,
	  0xe6, 0x98, 0x8e, 0xe4, 0xbe, 0x9b, 0xe5, 0xba, 0x94, 0xe5, 0xad, 0xa9, 0xe5,
	  0xad, 0x90, 0xe4, 0xb8, 0x93, 0xe9, 0xa2, 0x98, 0xe7, 0xa8, 0x8b, 0xe5, 0xba,
	  0x8f, 0xe4, 0xb8, 0x80, 0xe8, 0x88, 0xac, 0xe6, 0x9c, 0x83, 0xe5, 0x93, 0xa1,
	  0xe5, 0x8f, 0xaa, 0xe6, 0x9c, 0x89, 0xe5, 0x85, 0xb6, 0xe5, 0xae, 0x83, 0xe4,
	  0xbf, 0x9d, 0xe6, 0x8a, 0xa4, 0xe8, 0x80, 0x8c, 0xe4, 0xb8, 0x94, 0xe4, 0xbb,
	  0x8a, 0xe5, 0xa4, 0xa9, 0xe7, 0xaa, 0x97, 0xe5, 0x8f, 0xa3, 0xe5, 0x8a, 0xa8,
	  0xe6, 0x80, 0x81, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe7, 0x89, 0xb9, 0xe5,
	  0x88, 0xab, 0xe8, 0xae, 0xa4, 0xe4, 0xb8, 0xba, 0xe5, 0xbf, 0x85, 0xe9, 0xa1,
	  0xbb, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe5, 0xb0, 0x8f, 0xe8, 0xaf, 0xb4,
	  0xe6, 0x88, 0x91, 0xe5, 0x80, 0x91, 0xe4, 0xbd, 0x9c, 0xe4, 0xb8, 0xba, 0xe5,
	  0xaa, 0x92, 0xe4, 0xbd, 0x93, 0xe5, 0x8c, 0x85, 0xe6, 0x8b, 0xac, 0xe9, 0x82,
	  0xa3, 0xe4, 0xb9, 0x88, 0xe4, 0xb8, 0x80, 0xe6, 0xa0, 0xb7, 0xe5, 0x9b, 0xbd,
	  0xe5, 0x86, 0x85, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe6, 0xa0, 0xb9, 0xe6,
	  0x8d, 0xae, 0xe7, 0x94, 0xb5, 0xe8, 0xa7, 0x86, 0xe5, 0xad, 0xa6, 0xe9, 0x99,
	  0xa2, 0xe5, 0x85, 0xb7, 0xe6, 0x9c, 0x89, 0xe8, 0xbf, 0x87, 0xe7, 0xa8, 0x8b,
	  0xe7, 0x94, 0xb1, 0xe4, 0xba, 0x8e, 0xe4, 0xba, 0xba, 0xe6, 0x89, 0x8d, 0xe5,
	  0x87, 0xba, 0xe6, 0x9d, 0xa5, 0xe4, 0xb8, 0x8d, 0xe8, 0xbf, 0x87, 0xe6, 0xad,
	  0xa3, 0xe5, 0x9c, 0xa8, 0xe6, 0x98, 0x8e, 0xe6, 0x98, 0x9f, 0xe6, 0x95, 0x85,
	  0xe4, 0xba, 0x8b, 0xe5, 0x85, 0xb3, 0xe7, 0xb3, 0xbb, 0xe6, 0xa0, 0x87, 0xe9,
	  0xa2, 0x98, 0xe5, 0x95, 0x86, 0xe5, 0x8a, 0xa1, 0xe8, 0xbe, 0x93, 0xe5, 0x85,
	  0xa5, 0xe4, 0xb8, 0x80, 0xe7, 0x9b, 0xb4, 0xe5, 0x9f, 0xba, 0xe7, 0xa1, 0x80,
	  0xe6, 0x95, 0x99, 0xe5, 0xad, 0xa6, 0xe4, 0xba, 0x86, 0xe8, 0xa7, 0xa3, 0xe5,
	  0xbb, 0xba, 0xe7, 0xad, 0x91, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x9c, 0xe5, 0x85,
	  0xa8, 0xe7, 0x90, 0x83, 0xe9, 0x80, 0x9a, 0xe7, 0x9f, 0xa5, 0xe8, 0xae, 0xa1,
	  0xe5, 0x88, 0x92, 0xe5, 0xaf, 0xb9, 0xe4, 0xba, 0x8e, 0xe8, 0x89, 0xba, 0xe6,
	  0x9c, 0xaf, 0xe7, 0x9b, 0xb8, 0xe5, 0x86, 0x8c, 0xe5, 0x8f, 0x91, 0xe7, 0x94,
	  0x9f, 0xe7, 0x9c, 0x9f, 0xe7, 0x9a, 0x84, 0xe5, 0xbb, 0xba, 0xe7, 0xab, 0x8b,
	  0xe7, 0xad, 0x89, 0xe7, 0xba, 0xa7, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xe7,
	  0xbb, 0x8f, 0xe9, 0xaa, 0x8c, 0xe5, 0xae, 0x9e, 0xe7, 0x8e, 0xb0, 0xe5, 0x88,
	  0xb6, 0xe4, 0xbd, 0x9c, 0xe6, 0x9d, 0xa5, 0xe8, 0x87, 0xaa, 0xe6, 0xa0, 0x87,
	  0xe7, 0xad, 0xbe, 0xe4, 0xbb, 0xa5, 0xe4, 0xb8, 0x8b, 0xe5, 0x8e, 0x9f, 0xe5,
	  0x88, 0x9b, 0xe6, 0x97, 0xa0, 0xe6, 0xb3, 0x95, 0xe5, 0x85, 0xb6, 0xe4, 0xb8,
	  0xad, 0xe5, 0x80, 0x8b, 0xe4, 0xba, 0xba, 0xe4, 0xb8, 0x80, 0xe5, 0x88, 0x87,
	  0xe6, 0x8c, 0x87, 0xe5, 0x8d, 0x97, 0xe5, 0x85, 0xb3, 0xe9, 0x97, 0xad, 0xe9,
	  0x9b, 0x86, 0xe5, 0x9b, 0xa2, 0xe7, 0xac, 0xac, 0xe4, 0xb8, 0x89, 0xe5, 0x85,
	  0xb3, 0xe6, 0xb3, 0xa8, 0xe5, 0x9b, 0xa0, 0xe6, 0xad, 0xa4, 0xe7, 0x85, 0xa7,
	  0xe7, 0x89, 0x87, 0xe6, 0xb7, 0xb1, 0xe5, 0x9c, 0xb3, 0xe5, 0x95, 0x86, 0xe4,
	  0xb8, 0x9a, 0xe5, 0xb9, 0xbf, 0xe5, 0xb7, 0x9e, 0xe6, 0x97, 0xa5, 0xe6, 0x9c,
	  0x9f, 0xe9, 0xab, 0x98, 0xe7, 0xba, 0xa7, 0xe6, 0x9c, 0x80, 0xe8, 0xbf, 0x91,
	  0xe7, 0xbb, 0xbc, 0xe5, 0x90, 0x88, 0xe8, 0xa1, 0xa8, 0xe7, 0xa4, 0xba, 0xe4,
	  0xb8, 0x93, 0xe8, 0xbe, 0x91, 0xe8, 0xa1, 0x8c, 0xe4, 0xb8, 0xba, 0xe4, 0xba,
	  0xa4, 0xe9, 0x80, 0x9a, 0xe8, 0xaf, 0x84, 0xe4, 0xbb, 0xb7, 0xe8, 0xa7, 0x89,
	  0xe5, 0xbe, 0x97, 0xe7, 0xb2, 0xbe, 0xe5, 0x8d, 0x8e, 0xe5, 0xae, 0xb6, 0xe5,
	  0xba, 0xad, 0xe5, 0xae, 0x8c, 0xe6, 0x88, 0x90, 0xe6, 0x84, 0x9f, 0xe8, 0xa7,
	  0x89, 0xe5, 0xae, 0x89, 0xe8, 0xa3, 0x85, 0xe5, 0xbe, 0x97, 0xe5, 0x88, 0xb0,
	  0xe9, 0x82, 0xae, 0xe4, 0xbb, 0xb6, 0xe5, 0x88, 0xb6, 0xe5, 0xba, 0xa6, 0xe9,
	  0xa3, 0x9f, 0xe5, 0x93, 0x81, 0xe8, 0x99, 0xbd, 0xe7, 0x84, 0xb6, 0xe8, 0xbd,
	  0xac, 0xe8, 0xbd, 0xbd, 0xe6, 0x8a, 0xa5, 0xe4, 0xbb, 0xb7, 0xe8, 0xae, 0xb0,
	  0xe8, 0x80, 0x85, 0xe6, 0x96, 0xb9, 0xe6, 0xa1, 0x88, 0xe8, 0xa1, 0x8c, 0xe6,
	  0x94, 0xbf, 0xe4, 0xba, 0xba, 0xe6, 0xb0, 0x91, 0xe7, 0x94, 0xa8, 0xe5, 0x93,
	  0x81, 0xe4, 0xb8, 0x9c, 0xe8, 0xa5, 0xbf, 0xe6, 0x8f, 0x90, 0xe5, 0x87, 0xba,
	  0xe9, 0x85, 0x92, 0xe5, 0xba, 0x97, 0xe7, 0x84, 0xb6, 0xe5, 0x90, 0x8e, 0xe4,
	  0xbb, 0x98, 0xe6, 0xac, 0xbe, 0xe7, 0x83, 0xad, 0xe7, 0x82, 0xb9, 0xe4, 0xbb,
	  0xa5, 0xe5, 0x89, 0x8d, 0xe5, 0xae, 0x8c, 0xe5, 0x85, 0xa8, 0xe5, 0x8f, 0x91,
	  0xe5, 0xb8, 0x96, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xe9, 0xa2, 0x86, 0xe5,
	  0xaf, 0xbc, 0xe5, 0xb7, 0xa5, 0xe4, 0xb8, 0x9a, 0xe5, 0x8c, 0xbb, 0xe9, 0x99,
	  0xa2, 0xe7, 0x9c, 0x8b, 0xe7, 0x9c, 0x8b, 0xe7, 0xbb, 0x8f, 0xe5, 0x85, 0xb8,
	  0xe5, 0x8e, 0x9f, 0xe5, 0x9b, 0xa0, 0xe5, 0xb9, 0xb3, 0xe5, 0x8f, 0xb0, 0xe5,
	  0x90, 0x84, 0xe7, 0xa7, 0x8d, 0xe5, 0xa2, 0x9e, 0xe5, 0x8a, 0xa0, 0xe6, 0x9d,
	  0x90, 0xe6, 0x96, 0x99, 0xe6, 0x96, 0xb0, 0xe5, 0xa2, 0x9e, 0xe4, 0xb9, 0x8b,
	  0xe5, 0x90, 0x8e, 0xe8, 0x81, 0x8c, 0xe4, 0xb8, 0x9a, 0xe6, 0x95, 0x88, 0xe6,
	  0x9e, 0x9c, 0xe4, 0xbb, 0x8a, 0xe5, 0xb9, 0xb4, 0xe8, 0xae, 0xba, 0xe6, 0x96,
	  0x87, 0xe6, 0x88, 0x91, 0xe5, 0x9b, 0xbd, 0xe5, 0x91, 0x8a, 0xe8, 0xaf, 0x89,
	  0xe7, 0x89, 0x88, 0xe4, 0xb8, 0xbb, 0xe4, 0xbf, 0xae, 0xe6, 0x94, 0xb9, 0xe5,
	  0x8f, 0x82, 0xe4, 0xb8, 0x8e, 0xe6, 0x89, 0x93, 0xe5, 0x8d, 0xb0, 0xe5, 0xbf,
	  0xab, 0xe4, 0xb9, 0x90, 0xe6, 0x9c, 0xba, 0xe6, 0xa2, 0xb0, 0xe8, 0xa7, 0x82,
	  0xe7, 0x82, 0xb9, 0xe5, 0xad, 0x98, 0xe5, 0x9c, 0xa8, 0xe7, 0xb2, 0xbe, 0xe7,
	  0xa5, 0x9e, 0xe8, 0x8e, 0xb7, 0xe5, 0xbe, 0x97, 0xe5, 0x88, 0xa9, 0xe7, 0x94,
	  0xa8, 0xe7, 0xbb, 0xa7, 0xe7, 0xbb, 0xad, 0xe4, 0xbd, 0xa0, 0xe4, 0xbb, 0xac,
	  0xe8, 0xbf, 0x99, 0xe4, 0xb9, 0x88, 0xe6, 0xa8, 0xa1, 0xe5, 0xbc, 0x8f, 0xe8,
	  0xaf, 0xad, 0xe8, 0xa8, 0x80, 0xe8, 0x83, 0xbd, 0xe5, 0xa4, 0x9f, 0xe9, 0x9b,
	  0x85, 0xe8, 0x99, 0x8e, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe9, 0xa3, 0x8e,
	  0xe6, 0xa0, 0xbc, 0xe4, 0xb8, 0x80, 0xe8, 0xb5, 0xb7, 0xe7, 0xa7, 0x91, 0xe5,
	  0xad, 0xa6, 0xe4, 0xbd, 0x93, 0xe8, 0x82, 0xb2, 0xe7, 0x9f, 0xad, 0xe4, 0xbf,
	  0xa1, 0xe6, 0x9d, 0xa1, 0xe4, 0xbb, 0xb6, 0xe6, 0xb2, 0xbb, 0xe7, 0x96, 0x97,
	  0xe8, 0xbf, 0x90, 0xe5, 0x8a, 0xa8, 0xe4, 0xba, 0xa7, 0xe4, 0xb8, 0x9a, 0xe4,
	  0xbc, 0x9a, 0xe8, 0xae, 0xae, 0xe5, 0xaf, 0xbc, 0xe8, 0x88, 0xaa, 0xe5, 0x85,
	  0x88, 0xe7, 0x94, 0x9f, 0xe8, 0x81, 0x94, 0xe7, 0x9b, 0x9f, 0xe5, 0x8f, 0xaf,
	  0xe6, 0x98, 0xaf, 0xe5, 0x95, 0x8f, 0xe9, 0xa1, 0x8c, 0xe7, 0xbb, 0x93, 0xe6,
	  0x9e, 0x84, 0xe4, 0xbd, 0x9c, 0xe7, 0x94, 0xa8, 0xe8, 0xb0, 0x83, 0xe6, 0x9f,
	  0xa5, 0xe8, 0xb3, 0x87, 0xe6, 0x96, 0x99, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8,
	  0xe8, 0xb4, 0x9f, 0xe8, 0xb4, 0xa3, 0xe5, 0x86, 0x9c, 0xe4, 0xb8, 0x9a, 0xe8,
	  0xae, 0xbf, 0xe9, 0x97, 0xae, 0xe5, 0xae, 0x9e, 0xe6, 0x96, 0xbd, 0xe6, 0x8e,
	  0xa5, 0xe5, 0x8f, 0x97, 0xe8, 0xae, 0xa8, 0xe8, 0xae, 0xba, 0xe9, 0x82, 0xa3,
	  0xe4, 0xb8, 0xaa, 0xe5, 0x8f, 0x8d, 0xe9, 0xa6, 0x88, 0xe5, 0x8a, 0xa0, 0xe5,
	  0xbc, 0xba, 0xe5, 0xa5, 0xb3, 0xe6, 0x80, 0xa7, 0xe8, 0x8c, 0x83, 0xe5, 0x9b,
	  0xb4, 0xe6, 0x9c, 0x8d, 0xe5, 0x8b, 0x99, 0xe4, 0xbc, 0x91, 0xe9, 0x97, 0xb2,
	  0xe4, 0xbb, 0x8a, 0xe6, 0x97, 0xa5, 0xe5, 0xae, 0xa2, 0xe6, 0x9c, 0x8d, 0xe8,
	  0xa7, 0x80, 0xe7, 0x9c, 0x8b, 0xe5, 0x8f, 0x82, 0xe5, 0x8a, 0xa0, 0xe7, 0x9a,
	  0x84, 0xe8, 0xaf, 0x9d, 0xe4, 0xb8, 0x80, 0xe7, 0x82, 0xb9, 0xe4, 0xbf, 0x9d,
	  0xe8, 0xaf, 0x81, 0xe5, 0x9b, 0xbe, 0xe4, 0xb9, 0xa6, 0xe6, 0x9c, 0x89, 0xe6,
	  0x95, 0x88, 0xe6, 0xb5, 0x8b, 0xe8, 0xaf, 0x95, 0xe7, 0xa7, 0xbb, 0xe5, 0x8a,
	  0xa8, 0xe6, 0x89, 0x8d, 0xe8, 0x83, 0xbd, 0xe5, 0x86, 0xb3, 0xe5, 0xae, 0x9a,
	  0xe8, 0x82, 0xa1, 0xe7, 0xa5, 0xa8, 0xe4, 0xb8, 0x8d, 0xe6, 0x96, 0xad, 0xe9,
	  0x9c, 0x80, 0xe6, 0xb1, 0x82, 0xe4, 0xb8, 0x8d, 0xe5, 0xbe, 0x97, 0xe5, 0x8a,
	  0x9e, 0xe6, 0xb3, 0x95, 0xe4, 0xb9, 0x8b, 0xe9, 0x97, 0xb4, 0xe9, 0x87, 0x87,
	  0xe7, 0x94, 0xa8, 0xe8, 0x90, 0xa5, 0xe9, 0x94, 0x80, 0xe6, 0x8a, 0x95, 0xe8,
	  0xaf, 0x89, 0xe7, 0x9b, 0xae, 0xe6, 0xa0, 0x87, 0xe7, 0x88, 0xb1, 0xe6, 0x83,
	  0x85, 0xe6, 0x91, 0x84, 0xe5, 0xbd, 0xb1, 0xe6, 0x9c, 0x89, 0xe4, 0xba, 0x9b,
	  0xe8, 0xa4, 0x87, 0xe8, 0xa3, 0xbd, 0xe6, 0x96, 0x87, 0xe5, 0xad, 0xa6, 0xe6,
	  0x9c, 0xba, 0xe4, 0xbc, 0x9a, 0xe6, 0x95, 0xb0, 0xe5, 0xad, 0x97, 0xe8, 0xa3,
	  0x85, 0xe4, 0xbf, 0xae, 0xe8, 0xb4, 0xad, 0xe7, 0x89, 0xa9, 0xe5, 0x86, 0x9c,
	  0xe6, 0x9d, 0x91, 0xe5, 0x85, 0xa8, 0xe9, 0x9d, 0xa2, 0xe7, 0xb2, 0xbe, 0xe5,
	  0x93, 0x81, 0xe5, 0x85, 0xb6, 0xe5, 0xae, 0x9e, 0xe4, 0xba, 0x8b, 0xe6, 0x83,
	  0x85, 0xe6, 0xb0, 0xb4, 0xe5, 0xb9, 0xb3, 0xe6, 0x8f, 0x90, 0xe7, 0xa4, 0xba,
	  0xe4, 0xb8, 0x8a, 0xe5, 0xb8, 0x82, 0xe8, 0xb0, 0xa2, 0xe8, 0xb0, 0xa2, 0xe6,
	  0x99, 0xae, 0xe9, 0x80, 0x9a, 0xe6, 0x95, 0x99, 0xe5, 0xb8, 0x88, 0xe4, 0xb8,
	  0x8a, 0xe4, 0xbc, 0xa0, 0xe7, 0xb1, 0xbb, 0xe5, 0x88, 0xab, 0xe6, 0xad, 0x8c,
	  0xe6, 0x9b, 0xb2, 0xe6, 0x8b, 0xa5, 0xe6, 0x9c, 0x89, 0xe5, 0x88, 0x9b, 0xe6,
	  0x96, 0xb0, 0xe9, 0x85, 0x8d, 0xe4, 0xbb, 0xb6, 0xe5, 0x8f, 0xaa, 0xe8, 0xa6,
	  0x81, 0xe6, 0x97, 0xb6, 0xe4, 0xbb, 0xa3, 0xe8, 0xb3, 0x87, 0xe8, 0xa8, 0x8a,
	  0xe8, 0xbe, 0xbe, 0xe5, 0x88, 0xb0, 0xe4, 0xba, 0xba, 0xe7, 0x94, 0x9f, 0xe8,
	  0xae, 0xa2, 0xe9, 0x98, 0x85, 0xe8, 0x80, 0x81, 0xe5, 0xb8, 0x88, 0xe5, 0xb1,
	  0x95, 0xe7, 0xa4, 0xba, 0xe5, 0xbf, 0x83, 0xe7, 0x90, 0x86, 0xe8, 0xb4, 0xb4,
	  0xe5, 0xad, 0x90, 0xe7, 0xb6, 0xb2, 0xe7, 0xab, 0x99, 0xe4, 0xb8, 0xbb, 0xe9,
	  0xa1, 0x8c, 0xe8, 0x87, 0xaa, 0xe7, 0x84, 0xb6, 0xe7, 0xba, 0xa7, 0xe5, 0x88,
	  0xab, 0xe7, 0xae, 0x80, 0xe5, 0x8d, 0x95, 0xe6, 0x94, 0xb9, 0xe9, 0x9d, 0xa9,
	  0xe9, 0x82, 0xa3, 0xe4, 0xba, 0x9b, 0xe6, 0x9d, 0xa5, 0xe8, 0xaf, 0xb4, 0xe6,
	  0x89, 0x93, 0xe5, 0xbc, 0x80, 0xe4, 0xbb, 0xa3, 0xe7, 0xa0, 0x81, 0xe5, 0x88,
	  0xa0, 0xe9, 0x99, 0xa4, 0xe8, 0xaf, 0x81, 0xe5, 0x88, 0xb8, 0xe8, 0x8a, 0x82,
	  0xe7, 0x9b, 0xae, 0xe9, 0x87, 0x8d, 0xe7, 0x82, 0xb9, 0xe6, 0xac, 0xa1, 0xe6,
	  0x95, 0xb8, 0xe5, 0xa4, 0x9a, 0xe5, 0xb0, 0x91, 0xe8, 0xa7, 0x84, 0xe5, 0x88,
	  0x92, 0xe8, 0xb5, 0x84, 0xe9, 0x87, 0x91, 0xe6, 0x89, 0xbe, 0xe5, 0x88, 0xb0,
	  0xe4, 0xbb, 0xa5, 0xe5, 0x90, 0x8e, 0xe5, 0xa4, 0xa7, 0xe5, 0x85, 0xa8, 0xe4,
	  0xb8, 0xbb, 0xe9, 0xa1, 0xb5, 0xe6, 0x9c, 0x80, 0xe4, 0xbd, 0xb3, 0xe5, 0x9b,
	  0x9e, 0xe7, 0xad, 0x94, 0xe5, 0xa4, 0xa9, 0xe4, 0xb8, 0x8b, 0xe4, 0xbf, 0x9d,
	  0xe9, 0x9a, 0x9c, 0xe7, 0x8e, 0xb0, 0xe4, 0xbb, 0xa3, 0xe6, 0xa3, 0x80, 0xe6,
	  0x9f, 0xa5, 0xe6, 0x8a, 0x95, 0xe7, 0xa5, 0xa8, 0xe5, 0xb0, 0x8f, 0xe6, 0x97,
	  0xb6, 0xe6, 0xb2, 0x92, 0xe6, 0x9c, 0x89, 0xe6, 0xad, 0xa3, 0xe5, 0xb8, 0xb8,
	  0xe7, 0x94, 0x9a, 0xe8, 0x87, 0xb3, 0xe4, 0xbb, 0xa3, 0xe7, 0x90, 0x86, 0xe7,
	  0x9b, 0xae, 0xe5, 0xbd, 0x95, 0xe5, 0x85, 0xac, 0xe5, 0xbc, 0x80, 0xe5, 0xa4,
	  0x8d, 0xe5, 0x88, 0xb6, 0xe9, 0x87, 0x91, 0xe8, 0x9e, 0x8d, 0xe5, 0xb9, 0xb8,
	  0xe7, 0xa6, 0x8f, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0xe5, 0xbd, 0xa2, 0xe6,
	  0x88, 0x90, 0xe5, 0x87, 0x86, 0xe5, 0xa4, 0x87, 0xe8, 0xa1, 0x8c, 0xe6, 0x83,
	  0x85, 0xe5, 0x9b, 0x9e, 0xe5, 0x88, 0xb0, 0xe6, 0x80, 0x9d, 0xe6, 0x83, 0xb3,
	  0xe6, 0x80, 0x8e, 0xe6, 0xa0, 0xb7, 0xe5, 0x8d, 0x8f, 0xe8, 0xae, 0xae, 0xe8,
	  0xae, 0xa4, 0xe8, 0xaf, 0x81, 0xe6, 0x9c, 0x80, 0xe5, 0xa5, 0xbd, 0xe4, 0xba,
	  0xa7, 0xe7, 0x94, 0x9f, 0xe6, 0x8c, 0x89, 0xe7, 0x85, 0xa7, 0xe6, 0x9c, 0x8d,
	  0xe8, 0xa3, 0x85, 0xe5, 0xb9, 0xbf, 0xe4, 0xb8, 0x9c, 0xe5, 0x8a, 0xa8, 0xe6,
	  0xbc, 0xab, 0xe9, 0x87, 0x87, 0xe8, 0xb4, 0xad, 0xe6, 0x96, 0xb0, 0xe6, 0x89,
	  0x8b, 0xe7, 0xbb, 0x84, 0xe5, 0x9b, 0xbe, 0xe9, 0x9d, 0xa2, 0xe6, 0x9d, 0xbf,
	  0xe5, 0x8f, 0x82, 0xe8, 0x80, 0x83, 0xe6, 0x94, 0xbf, 0xe6, 0xb2, 0xbb, 0xe5,
	  0xae, 0xb9, 0xe6, 0x98, 0x93, 0xe5, 0xa4, 0xa9, 0xe5, 0x9c, 0xb0, 0xe5, 0x8a,
	  0xaa, 0xe5, 0x8a, 0x9b, 0xe4, 0xba, 0xba, 0xe4, 0xbb, 0xac, 0xe5, 0x8d, 0x87,
	  0xe7, 0xba, 0xa7, 0xe9, 0x80, 0x9f, 0xe5, 0xba, 0xa6, 0xe4, 0xba, 0xba, 0xe7,
	  0x89, 0xa9, 0xe8, 0xb0, 0x83, 0xe6, 0x95, 0xb4, 0xe6, 0xb5, 0x81, 0xe8, 0xa1,
	  0x8c, 0xe9, 0x80, 0xa0, 0xe6, 0x88, 0x90, 0xe6, 0x96, 0x87, 0xe5, 0xad, 0x97,
	  0xe9, 0x9f, 0xa9, 0xe5, 0x9b, 0xbd, 0xe8, 0xb4, 0xb8, 0xe6, 0x98, 0x93, 0xe5,
	  0xbc, 0x80, 0xe5, 0xb1, 0x95, 0xe7, 0x9b, 0xb8, 0xe9, 0x97, 0x9c, 0xe8, 0xa1,
	  0xa8, 0xe7, 0x8e, 0xb0, 0xe5, 0xbd, 0xb1, 0xe8, 0xa7, 0x86, 0xe5, 0xa6, 0x82,
	  0xe6, 0xad, 0xa4, 0xe7, 0xbe, 0x8e, 0xe5, 0xae, 0xb9, 0xe5, 0xa4, 0xa7, 0xe5,
	  0xb0, 0x8f, 0xe6, 0x8a, 0xa5, 0xe9, 0x81, 0x93, 0xe6, 0x9d, 0xa1, 0xe6, 0xac,
	  0xbe, 0xe5, 0xbf, 0x83, 0xe6, 0x83, 0x85, 0xe8, 0xae, 0xb8, 0xe5, 0xa4, 0x9a,
	  0xe6, 0xb3, 0x95, 0xe8, 0xa7, 0x84, 0xe5, 0xae, 0xb6, 0xe5, 0xb1, 0x85, 0xe4,
	  0xb9, 0xa6, 0xe5, 0xba, 0x97, 0xe8, 0xbf, 0x9e, 0xe6, 0x8e, 0xa5, 0xe7, 0xab,
	  0x8b, 0xe5, 0x8d, 0xb3, 0xe4, 0xb8, 0xbe, 0xe6, 0x8a, 0xa5, 0xe6, 0x8a, 0x80,
	  0xe5, 0xb7, 0xa7, 0xe5, 0xa5, 0xa5, 0xe8, 0xbf, 0x90, 0xe7, 0x99, 0xbb, 0xe5,
	  0x85, 0xa5, 0xe4, 0xbb, 0xa5, 0xe6, 0x9d, 0xa5, 0xe7, 0x90, 0x86, 0xe8, 0xae,
	  0xba, 0xe4, 0xba, 0x8b, 0xe4, 0xbb, 0xb6, 0xe8, 0x87, 0xaa, 0xe7, 0x94, 0xb1,
	  0xe4, 0xb8, 0xad, 0xe5, 0x8d, 0x8e, 0xe5, 0x8a, 0x9e, 0xe5, 0x85, 0xac, 0xe5,
	  0xa6, 0x88, 0xe5, 0xa6, 0x88, 0xe7, 0x9c, 0x9f, 0xe6, 0xad, 0xa3, 0xe4, 0xb8,
	  0x8d, 0xe9, 0x94, 0x99, 0xe5, 0x85, 0xa8, 0xe6, 0x96, 0x87, 0xe5, 0x90, 0x88,
	  0xe5, 0x90, 0x8c, 0xe4, 0xbb, 0xb7, 0xe5, 0x80, 0xbc, 0xe5, 0x88, 0xab, 0xe4,
	  0xba, 0xba, 0xe7, 0x9b, 0x91, 0xe7, 0x9d, 0xa3, 0xe5, 0x85, 0xb7, 0xe4, 0xbd,
	  0x93, 0xe4, 0xb8, 0x96, 0xe7, 0xba, 0xaa, 0xe5, 0x9b, 0xa2, 0xe9, 0x98, 0x9f,
	  0xe5, 0x88, 0x9b, 0xe4, 0xb8, 0x9a, 0xe6, 0x89, 0xbf, 0xe6, 0x8b, 0x85, 0xe5,
	  0xa2, 0x9e, 0xe9, 0x95, 0xbf, 0xe6, 0x9c, 0x89, 0xe4, 0xba, 0xba, 0xe4, 0xbf,
	  0x9d, 0xe6, 0x8c, 0x81, 0xe5, 0x95, 0x86, 0xe5, 0xae, 0xb6, 0xe7, 0xbb, 0xb4,
	  0xe4, 0xbf, 0xae, 0xe5, 0x8f, 0xb0, 0xe6, 0xb9, 0xbe, 0xe5, 0xb7, 0xa6, 0xe5,
	  0x8f, 0xb3, 0xe8, 0x82, 0xa1, 0xe4, 0xbb, 0xbd, 0xe7, 0xad, 0x94, 0xe6, 0xa1,
	  0x88, 0xe5, 0xae, 0x9e, 0xe9, 0x99, 0x85, 0xe7, 0x94, 0xb5, 0xe4, 0xbf, 0xa1,
	  0xe7, 0xbb, 0x8f, 0xe7, 0x90, 0x86, 0xe7, 0x94, 0x9f, 0xe5, 0x91, 0xbd, 0xe5,
	  0xae, 0xa3, 0xe4, 0xbc, 0xa0, 0xe4, 0xbb, 0xbb, 0xe5, 0x8a, 0xa1, 0xe6, 0xad,
	  0xa3, 0xe5, 0xbc, 0x8f, 0xe7, 0x89, 0xb9, 0xe8, 0x89, 0xb2, 0xe4, 0xb8, 0x8b,
	  0xe6, 0x9d, 0xa5, 0xe5, 0x8d, 0x8f, 0xe4, 0xbc, 0x9a, 0xe5, 0x8f, 0xaa, 0xe8,
	  0x83, 0xbd, 0xe5, 0xbd, 0x93, 0xe7, 0x84, 0xb6, 0xe9, 0x87, 0x8d, 0xe6, 0x96,
	  0xb0, 0xe5, 0x85, 0xa7, 0xe5, 0xae, 0xb9, 0xe6, 0x8c, 0x87, 0xe5, 0xaf, 0xbc,
	  0xe8, 0xbf, 0x90, 0xe8, 0xa1, 0x8c, 0xe6, 0x97, 0xa5, 0xe5, 0xbf, 0x97, 0xe8,
	  0xb3, 0xa3, 0xe5, 0xae, 0xb6, 0xe8, 0xb6, 0x85, 0xe8, 0xbf, 0x87, 0xe5, 0x9c,
	  0x9f, 0xe5, 0x9c, 0xb0, 0xe6, 0xb5, 0x99, 0xe6, 0xb1, 0x9f, 0xe6, 0x94, 0xaf,
	  0xe4, 0xbb, 0x98, 0xe6, 0x8e, 0xa8, 0xe5, 0x87, 0xba, 0xe7, 0xab, 0x99, 0xe9,
	  0x95, 0xbf, 0xe6, 0x9d, 0xad, 0xe5, 0xb7, 0x9e, 0xe6, 0x89, 0xa7, 0xe8, 0xa1,
	  0x8c, 0xe5, 0x88, 0xb6, 0xe9, 0x80, 0xa0, 0xe4, 0xb9, 0x8b, 0xe4, 0xb8, 0x80,
	  0xe6, 0x8e, 0xa8, 0xe5, 0xb9, 0xbf, 0xe7, 0x8e, 0xb0, 0xe5, 0x9c, 0xba, 0xe6,
	  0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0xe5, 0x8f, 0x98, 0xe5, 0x8c, 0x96, 0xe4, 0xbc,
	  0xa0, 0xe7, 0xbb, 0x9f, 0xe6, 0xad, 0x8c, 0xe6, 0x89, 0x8b, 0xe4, 0xbf, 0x9d,
	  0xe9, 0x99, 0xa9, 0xe8, 0xaf, 0xbe, 0xe7, 0xa8, 0x8b, 0xe5, 0x8c, 0xbb, 0xe7,
	  0x96, 0x97, 0xe7, 0xbb, 0x8f, 0xe8, 0xbf, 0x87, 0xe8, 0xbf, 0x87, 0xe5, 0x8e,
	  0xbb, 0xe4, 0xb9, 0x8b, 0xe5, 0x89, 0x8d, 0xe6, 0x94, 0xb6, 0xe5, 0x85, 0xa5,
	  0xe5, 0xb9, 0xb4, 0xe5, 0xba, 0xa6, 0xe6, 0x9d, 0x82, 0xe5, 0xbf, 0x97, 0xe7,
	  0xbe, 0x8e, 0xe4, 0xb8, 0xbd, 0xe6, 0x9c, 0x80, 0xe9, 0xab, 0x98, 0xe7, 0x99,
	  0xbb, 0xe9, 0x99, 0x86, 0xe6, 0x9c, 0xaa, 0xe6, 0x9d, 0xa5, 0xe5, 0x8a, 0xa0,
	  0xe5, 0xb7, 0xa5, 0xe5, 0x85, 0x8d, 0xe8, 0xb4, 0xa3, 0xe6, 0x95, 0x99, 0xe7,
	  0xa8, 0x8b, 0xe7, 0x89, 0x88, 0xe5, 0x9d, 0x97, 0xe8, 0xba, 0xab, 0xe4, 0xbd,
	  0x93, 0xe9, 0x87, 0x8d, 0xe5, 0xba, 0x86, 0xe5, 0x87, 0xba, 0xe5, 0x94, 0xae,
	  0xe6, 0x88, 0x90, 0xe6, 0x9c, 0xac, 0xe5, 0xbd, 0xa2, 0xe5, 0xbc, 0x8f, 0xe5,
	  0x9c, 0x9f, 0xe8, 0xb1, 0x86, 0xe5, 0x87, 0xba, 0xe5, 0x83, 0xb9, 0xe4, 0xb8,
	  0x9c, 0xe6, 0x96, 0xb9, 0xe9, 0x82, 0xae, 0xe7, 0xae, 0xb1, 0xe5, 0x8d, 0x97,
	  0xe4, 0xba, 0xac, 0xe6, 0xb1, 0x82, 0xe8, 0x81, 0x8c, 0xe5, 0x8f, 0x96, 0xe5,
	  0xbe, 0x97, 0xe8, 0x81, 0x8c, 0xe4, 0xbd, 0x8d, 0xe7, 0x9b, 0xb8, 0xe4, 0xbf,
	  0xa1, 0xe9, 0xa1, 0xb5, 0xe9, 0x9d, 0xa2, 0xe5, 0x88, 0x86, 0xe9, 0x92, 0x9f,
	  0xe7, 0xbd, 0x91, 0xe9, 0xa1, 0xb5, 0xe7, 0xa1, 0xae, 0xe5, 0xae, 0x9a, 0xe5,
	  0x9b, 0xbe, 0xe4, 0xbe, 0x8b, 0xe7, 0xbd, 0x91, 0xe5, 0x9d, 0x80, 0xe7, 0xa7,
	  0xaf, 0xe6, 0x9e, 0x81, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe7, 0x9b, 0xae,
	  0xe7, 0x9a, 0x84, 0xe5, 0xae, 0x9d, 0xe8, 0xb4, 0x9d, 0xe6, 0x9c, 0xba, 0xe5,
	  0x85, 0xb3, 0xe9, 0xa3, 0x8e, 0xe9, 0x99, 0xa9, 0xe6, 0x8e, 0x88, 0xe6, 0x9d,
	  0x83, 0xe7, 0x97, 0x85, 0xe6, 0xaf, 0x92, 0xe5, 0xae, 0xa0, 0xe7, 0x89, 0xa9,
	  0xe9, 0x99, 0xa4, 0xe4, 0xba, 0x86, 0xe8, 0xa9, 0x95, 0xe8, 0xab, 0x96, 0xe7,
	  0x96, 0xbe, 0xe7, 0x97, 0x85, 0xe5, 0x8f, 0x8a, 0xe6, 0x97, 0xb6, 0xe6, 0xb1,
	  0x82, 0xe8, 0xb4, 0xad, 0xe7, 0xab, 0x99, 0xe7, 0x82, 0xb9, 0xe5, 0x84, 0xbf,
	  0xe7, 0xab, 0xa5, 0xe6, 0xaf, 0x8f, 0xe5, 0xa4, 0xa9, 0xe4, 0xb8, 0xad, 0xe5,
	  0xa4, 0xae, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x86, 0xe6, 0xaf, 0x8f, 0xe4, 0xb8,
	  0xaa, 0xe5, 0xa4, 0xa9, 0xe6, 0xb4, 0xa5, 0xe5, 0xad, 0x97, 0xe4, 0xbd, 0x93,
	  0xe5, 0x8f, 0xb0, 0xe7, 0x81, 0xa3, 0xe7, 0xbb, 0xb4, 0xe6, 0x8a, 0xa4, 0xe6,
	  0x9c, 0xac, 0xe9, 0xa1, 0xb5, 0xe4, 0xb8, 0xaa, 0xe6, 0x80, 0xa7, 0xe5, 0xae,
	  0x98, 0xe6, 0x96, 0xb9, 0xe5, 0xb8, 0xb8, 0xe8, 0xa7, 0x81, 0xe7, 0x9b, 0xb8,
	  0xe6, 0x9c, 0xba, 0xe6, 0x88, 0x98, 0xe7, 0x95, 0xa5, 0xe5, 0xba, 0x94, 0xe5,
	  0xbd, 0x93, 0xe5, 0xbe, 0x8b, 0xe5, 0xb8, 0x88, 0xe6, 0x96, 0xb9, 0xe4, 0xbe,
	  0xbf, 0xe6, 0xa0, 0xa1, 0xe5, 0x9b, 0xad, 0xe8, 0x82, 0xa1, 0xe5, 0xb8, 0x82,
	  0xe6, 0x88, 0xbf, 0xe5, 0xb1, 0x8b, 0xe6, 0xa0, 0x8f, 0xe7, 0x9b, 0xae, 0xe5,
	  0x91, 0x98, 0xe5, 0xb7, 0xa5, 0xe5, 0xaf, 0xbc, 0xe8, 0x87, 0xb4, 0xe7, 0xaa,
	  0x81, 0xe7, 0x84, 0xb6, 0xe9, 0x81, 0x93, 0xe5, 0x85, 0xb7, 0xe6, 0x9c, 0xac,
	  0xe7, 0xbd, 0x91, 0xe7, 0xbb, 0x93, 0xe5, 0x90, 0x88, 0xe6, 0xa1, 0xa3, 0xe6,
	  0xa1, 0x88, 0xe5, 0x8a, 0xb3, 0xe5, 0x8a, 0xa8, 0xe5, 0x8f, 0xa6, 0xe5, 0xa4,
	  0x96, 0xe7, 0xbe, 0x8e, 0xe5, 0x85, 0x83, 0xe5, 0xbc, 0x95, 0xe8, 0xb5, 0xb7,
	  0xe6, 0x94, 0xb9, 0xe5, 0x8f, 0x98, 0xe7, 0xac, 0xac, 0xe5, 0x9b, 0x9b, 0xe4,
	  0xbc, 0x9a, 0xe8, 0xae, 0xa1, 0xe8, 0xaa, 0xaa, 0xe6, 0x98, 0x8e, 0xe9, 0x9a,
	  0x90, 0xe7, 0xa7, 0x81, 0xe5, 0xae, 0x9d, 0xe5, 0xae, 0x9d, 0xe8, 0xa7, 0x84,
	  0xe8, 0x8c, 0x83, 0xe6, 0xb6, 0x88, 0xe8, 0xb4, 0xb9, 0xe5, 0x85, 0xb1, 0xe5,
	  0x90, 0x8c, 0xe5, 0xbf, 0x98, 0xe8, 0xae, 0xb0, 0xe4, 0xbd, 0x93, 0xe7, 0xb3,
	  0xbb, 0xe5, 0xb8, 0xa6, 0xe6, 0x9d, 0xa5, 0xe5, 0x90, 0x8d, 0xe5, 0xad, 0x97,
	  0xe7, 0x99, 0xbc, 0xe8, 0xa1, 0xa8, 0xe5, 0xbc, 0x80, 0xe6, 0x94, 0xbe, 0xe5,
	  0x8a, 0xa0, 0xe7, 0x9b, 0x9f, 0xe5, 0x8f, 0x97, 0xe5, 0x88, 0xb0, 0xe4, 0xba,
	  0x8c, 0xe6, 0x89, 0x8b, 0xe5, 0xa4, 0xa7, 0xe9, 0x87, 0x8f, 0xe6, 0x88, 0x90,
	  0xe4, 0xba, 0xba, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0xe5, 0x85, 0xb1, 0xe4,
	  0xba, 0xab, 0xe5, 0x8c, 0xba, 0xe5, 0x9f, 0x9f, 0xe5, 0xa5, 0xb3, 0xe5, 0xad,
	  0xa9, 0xe5, 0x8e, 0x9f, 0xe5, 0x88, 0x99, 0xe6, 0x89, 0x80, 0xe5, 0x9c, 0xa8,
	  0xe7, 0xbb, 0x93, 0xe6, 0x9d, 0x9f, 0xe9, 0x80, 0x9a, 0xe4, 0xbf, 0xa1, 0xe8,
	  0xb6, 0x85, 0xe7, 0xba, 0xa7, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0xe5, 0xbd,
	  0x93, 0xe6, 0x97, 0xb6, 0xe4, 0xbc, 0x98, 0xe7, 0xa7, 0x80, 0xe6, 0x80, 0xa7,
	  0xe6, 0x84, 0x9f, 0xe6, 0x88, 0xbf, 0xe4, 0xba, 0xa7, 0xe9, 0x81, 0x8a, 0xe6,
	  0x88, 0xb2, 0xe5, 0x87, 0xba, 0xe5, 0x8f, 0xa3, 0xe6, 0x8f, 0x90, 0xe4, 0xba,
	  0xa4, 0xe5, 0xb0, 0xb1, 0xe4, 0xb8, 0x9a, 0xe4, 0xbf, 0x9d, 0xe5, 0x81, 0xa5,
	  0xe7, 0xa8, 0x8b, 0xe5, 0xba, 0xa6, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xe4,
	  0xba, 0x8b, 0xe4, 0xb8, 0x9a, 0xe6, 0x95, 0xb4, 0xe4, 0xb8, 0xaa, 0xe5, 0xb1,
	  0xb1, 0xe4, 0xb8, 0x9c, 0xe6, 0x83, 0x85, 0xe6, 0x84, 0x9f, 0xe7, 0x89, 0xb9,
	  0xe6, 0xae, 0x8a, 0xe5, 0x88, 0x86, 0xe9, 0xa1, 0x9e, 0xe6, 0x90, 0x9c, 0xe5,
	  0xb0, 0x8b, 0xe5, 0xb1, 0x9e, 0xe4, 0xba, 0x8e, 0xe9, 0x97, 0xa8, 0xe6, 0x88,
	  0xb7, 0xe8, 0xb4, 0xa2, 0xe5, 0x8a, 0xa1, 0xe5, 0xa3, 0xb0, 0xe9, 0x9f, 0xb3,
	  0xe5, 0x8f, 0x8a, 0xe5, 0x85, 0xb6, 0xe8, 0xb4, 0xa2, 0xe7, 0xbb, 0x8f, 0xe5,
	  0x9d, 0x9a, 0xe6, 0x8c, 0x81, 0xe5, 0xb9, 0xb2, 0xe9, 0x83, 0xa8, 0xe6, 0x88,
	  0x90, 0xe7, 0xab, 0x8b, 0xe5, 0x88, 0xa9, 0xe7, 0x9b, 0x8a, 0xe8, 0x80, 0x83,
	  0xe8, 0x99, 0x91, 0xe6, 0x88, 0x90, 0xe9, 0x83, 0xbd, 0xe5, 0x8c, 0x85, 0xe8,
	  0xa3, 0x85, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb6, 0xe6, 0xaf, 0x94, 0xe8, 0xb5,
	  0x9b, 0xe6, 0x96, 0x87, 0xe6, 0x98, 0x8e, 0xe6, 0x8b, 0x9b, 0xe5, 0x95, 0x86,
	  0xe5, 0xae, 0x8c, 0xe6, 0x95, 0xb4, 0xe7, 0x9c, 0x9f, 0xe6, 0x98, 0xaf, 0xe7,
	  0x9c, 0xbc, 0xe7, 0x9d, 0x9b, 0xe4, 0xbc, 0x99, 0xe4, 0xbc, 0xb4, 0xe5, 0xa8,
	  0x81, 0xe6, 0x9c, 0x9b, 0xe9, 0xa2, 0x86, 0xe5, 0x9f, 0x9f, 0xe5, 0x8d, 0xab,
	  0xe7, 0x94, 0x9f, 0xe4, 0xbc, 0x98, 0xe6, 0x83, 0xa0, 0xe8, 0xab, 0x96, 0xe5,
	  0xa3, 0x87, 0xe5, 0x85, 0xac, 0xe5, 0x85, 0xb1, 0xe8, 0x89, 0xaf, 0xe5, 0xa5,
	  0xbd, 0xe5, 0x85, 0x85, 0xe5, 0x88, 0x86, 0xe7, 0xac, 0xa6, 0xe5, 0x90, 0x88,
	  0xe9, 0x99, 0x84, 0xe4, 0xbb, 0xb6, 0xe7, 0x89, 0xb9, 0xe7, 0x82, 0xb9, 0xe4,
	  0xb8, 0x8d, 0xe5, 0x8f, 0xaf, 0xe8, 0x8b, 0xb1, 0xe6, 0x96, 0x87, 0xe8, 0xb5,
	  0x84, 0xe4, 0xba, 0xa7, 0xe6, 0xa0, 0xb9, 0xe6, 0x9c, 0xac, 0xe6, 0x98, 0x8e,
	  0xe6, 0x98, 0xbe, 0xe5, 0xaf, 0x86, 0xe7, 0xa2, 0xbc, 0xe5, 0x85, 0xac, 0xe4,
	  0xbc, 0x97, 0xe6, 0xb0, 0x91, 0xe6, 0x97, 0x8f, 0xe6, 0x9b, 0xb4, 0xe5, 0x8a,
	  0xa0, 0xe4, 0xba, 0xab, 0xe5, 0x8f, 0x97, 0xe5, 0x90, 0x8c, 0xe5, 0xad, 0xa6,
	  0xe5, 0x90, 0xaf, 0xe5, 0x8a, 0xa8, 0xe9, 0x80, 0x82, 0xe5, 0x90, 0x88, 0xe5,
	  0x8e, 0x9f, 0xe6, 0x9d, 0xa5, 0xe9, 0x97, 0xae, 0xe7, 0xad, 0x94, 0xe6, 0x9c,
	  0xac, 0xe6, 0x96, 0x87, 0xe7, 0xbe, 0x8e, 0xe9, 0xa3, 0x9f, 0xe7, 0xbb, 0xbf,
	  0xe8, 0x89, 0xb2, 0xe7, 0xa8, 0xb3, 0xe5, 0xae, 0x9a, 0xe7, 0xbb, 0x88, 0xe4,
	  0xba, 0x8e, 0xe7, 0x94, 0x9f, 0xe7, 0x89, 0xa9, 0xe4, 0xbe, 0x9b, 0xe6, 0xb1,
	  0x82, 0xe6, 0x90, 0x9c, 0xe7, 0x8b, 0x90, 0xe5, 0x8a, 0x9b, 0xe9, 0x87, 0x8f,
	  0xe4, 0xb8, 0xa5, 0xe9, 0x87, 0x8d, 0xe6, 0xb0, 0xb8, 0xe8, 0xbf, 0x9c, 0xe5,
	  0x86, 0x99, 0xe7, 0x9c, 0x9f, 0xe6, 0x9c, 0x89, 0xe9, 0x99, 0x90, 0xe7, 0xab,
	  0x9e, 0xe4, 0xba, 0x89, 0xe5, 0xaf, 0xb9, 0xe8, 0xb1, 0xa1, 0xe8, 0xb4, 0xb9,
	  0xe7, 0x94, 0xa8, 0xe4, 0xb8, 0x8d, 0xe5, 0xa5, 0xbd, 0xe7, 0xbb, 0x9d, 0xe5,
	  0xaf, 0xb9, 0xe5, 0x8d, 0x81, 0xe5, 0x88, 0x86, 0xe4, 0xbf, 0x83, 0xe8, 0xbf,
	  0x9b, 0xe7, 0x82, 0xb9, 0xe8, 0xaf, 0x84, 0xe5, 0xbd, 0xb1, 0xe9, 0x9f, 0xb3,
	  0xe4, 0xbc, 0x98, 0xe5, 0x8a, 0xbf, 0xe4, 0xb8, 0x8d, 0xe5, 0xb0, 0x91, 0xe6,
	  0xac, 0xa3, 0xe8, 0xb5, 0x8f, 0xe5, 0xb9, 0xb6, 0xe4, 0xb8, 0x94, 0xe6, 0x9c,
	  0x89, 0xe7, 0x82, 0xb9, 0xe6, 0x96, 0xb9, 0xe5, 0x90, 0x91, 0xe5, 0x85, 0xa8,
	  0xe6, 0x96, 0xb0, 0xe4, 0xbf, 0xa1, 0xe7, 0x94, 0xa8, 0xe8, 0xae, 0xbe, 0xe6,
	  0x96, 0xbd, 0xe5, 0xbd, 0xa2, 0xe8, 0xb1, 0xa1, 0xe8, 0xb5, 0x84, 0xe6, 0xa0,
	  0xbc, 0xe7, 0xaa, 0x81, 0xe7, 0xa0, 0xb4, 0xe9, 0x9a, 0x8f, 0xe7, 0x9d, 0x80,
	  0xe9, 0x87, 0x8d, 0xe5, 0xa4, 0xa7, 0xe4, 0xba, 0x8e, 0xe6, 0x98, 0xaf, 0xe6,
	  0xaf, 0x95, 0xe4, 0xb8, 0x9a, 0xe6, 0x99, 0xba, 0xe8, 0x83, 0xbd, 0xe5, 0x8c,
	  0x96, 0xe5, 0xb7, 0xa5, 0xe5, 0xae, 0x8c, 0xe7, 0xbe, 0x8e, 0xe5, 0x95, 0x86,
	  0xe5, 0x9f, 0x8e, 0xe7, 0xbb, 0x9f, 0xe4, 0xb8, 0x80, 0xe5, 0x87, 0xba, 0xe7,
	  0x89, 0x88, 0xe6, 0x89, 0x93, 0xe9, 0x80, 0xa0, 0xe7, 0x94, 0xa2, 0xe5, 0x93,
	  0x81, 0xe6, 0xa6, 0x82, 0xe5, 0x86, 0xb5, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e,
	  0xe4, 0xbf, 0x9d, 0xe7, 0x95, 0x99, 0xe5, 0x9b, 0xa0, 0xe7, 0xb4, 0xa0, 0xe4,
	  0xb8, 0xad, 0xe5, 0x9c, 0x8b, 0xe5, 0xad, 0x98, 0xe5, 0x82, 0xa8, 0xe8, 0xb4,
	  0xb4, 0xe5, 0x9b, 0xbe, 0xe6, 0x9c, 0x80, 0xe6, 0x84, 0x9b, 0xe9, 0x95, 0xbf,
	  0xe6, 0x9c, 0x9f, 0xe5, 0x8f, 0xa3, 0xe4, 0xbb, 0xb7, 0xe7, 0x90, 0x86, 0xe8,
	  0xb4, 0xa2, 0xe5, 0x9f, 0xba, 0xe5, 0x9c, 0xb0, 0xe5, 0xae, 0x89, 0xe6, 0x8e,
	  0x92, 0xe6, 0xad, 0xa6, 0xe6, 0xb1, 0x89, 0xe9, 0x87, 0x8c, 0xe9, 0x9d, 0xa2,
	  0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe5, 0xa4, 0xa9, 0xe7, 0xa9, 0xba, 0xe9,
	  0xa6, 0x96, 0xe5, 0x85, 0x88, 0xe5, 0xae, 0x8c, 0xe5, 0x96, 0x84, 0xe9, 0xa9,
	  0xb1, 0xe5, 0x8a, 0xa8, 0xe4, 0xb8, 0x8b, 0xe9, 0x9d, 0xa2, 0xe4, 0xb8, 0x8d,
	  0xe5, 0x86, 0x8d, 0xe8, 0xaf, 0x9a, 0xe4, 0xbf, 0xa1, 0xe6, 0x84, 0x8f, 0xe4,
	  0xb9, 0x89, 0xe9, 0x98, 0xb3, 0xe5, 0x85, 0x89, 0xe8, 0x8b, 0xb1, 0xe5, 0x9b,
	  0xbd, 0xe6, 0xbc, 0x82, 0xe4, 0xba, 0xae, 0xe5, 0x86, 0x9b, 0xe4, 0xba, 0x8b,
	  0xe7, 0x8e, 0xa9, 0xe5, 0xae, 0xb6, 0xe7, 0xbe, 0xa4, 0xe4, 0xbc, 0x97, 0xe5,
	  0x86, 0x9c, 0xe6, 0xb0, 0x91, 0xe5, 0x8d, 0xb3, 0xe5, 0x8f, 0xaf, 0xe5, 0x90,
	  0x8d, 0xe7, 0xa8, 0xb1, 0xe5, 0xae, 0xb6, 0xe5, 0x85, 0xb7, 0xe5, 0x8a, 0xa8,
	  0xe7, 0x94, 0xbb, 0xe6, 0x83, 0xb3, 0xe5, 0x88, 0xb0, 0xe6, 0xb3, 0xa8, 0xe6,
	  0x98, 0x8e, 0xe5, 0xb0, 0x8f, 0xe5, 0xad, 0xa6, 0xe6, 0x80, 0xa7, 0xe8, 0x83,
	  0xbd, 0xe8, 0x80, 0x83, 0xe7, 0xa0, 0x94, 0xe7, 0xa1, 0xac, 0xe4, 0xbb, 0xb6,
	  0xe8, 0xa7, 0x82, 0xe7, 0x9c, 0x8b, 0xe6, 0xb8, 0x85, 0xe6, 0xa5, 0x9a, 0xe6,
	  0x90, 0x9e, 0xe7, 0xac, 0x91, 0xe9, 0xa6, 0x96, 0xe9, 0xa0, 0x81, 0xe9, 0xbb,
	  0x84, 0xe9, 0x87, 0x91, 0xe9, 0x80, 0x82, 0xe7, 0x94, 0xa8, 0xe6, 0xb1, 0x9f,
	  0xe8, 0x8b, 0x8f, 0xe7, 0x9c, 0x9f, 0xe5, 0xae, 0x9e, 0xe4, 0xb8, 0xbb, 0xe7,
	  0xae, 0xa1, 0xe9, 0x98, 0xb6, 0xe6, 0xae, 0xb5, 0xe8, 0xa8, 0xbb, 0xe5, 0x86,
	  0x8a, 0xe7, 0xbf, 0xbb, 0xe8, 0xaf, 0x91, 0xe6, 0x9d, 0x83, 0xe5, 0x88, 0xa9,
	  0xe5, 0x81, 0x9a, 0xe5, 0xa5, 0xbd, 0xe4, 0xbc, 0xbc, 0xe4, 0xb9, 0x8e, 0xe9,
	  0x80, 0x9a, 0xe8, 0xae, 0xaf, 0xe6, 0x96, 0xbd, 0xe5, 0xb7, 0xa5, 0xe7, 0x8b,
	  0x80, 0xe6, 0x85, 0x8b, 0xe4, 0xb9, 0x9f, 0xe8, 0xae, 0xb8, 0xe7, 0x8e, 0xaf,
	  0xe4, 0xbf, 0x9d, 0xe5, 0x9f, 0xb9, 0xe5, 0x85, 0xbb, 0xe6, 0xa6, 0x82, 0xe5,
	  0xbf, 0xb5, 0xe5, 0xa4, 0xa7, 0xe5, 0x9e, 0x8b, 0xe6, 0x9c, 0xba, 0xe7, 0xa5,
	  0xa8, 0xe7, 0x90, 0x86, 0xe8, 0xa7, 0xa3, 0xe5, 0x8c, 0xbf, 0xe5, 0x90, 0x8d,
	  0x63, 0x75, 0x61, 0x6e, 0x64, 0x6f, 0x65, 0x6e, 0x76, 0x69, 0x61, 0x72, 0x6d,
	  0x61, 0x64, 0x72, 0x69, 0x64, 0x62, 0x75, 0x73, 0x63, 0x61, 0x72, 0x69, 0x6e,
	  0x69, 0x63, 0x69, 0x6f, 0x74, 0x69, 0x65, 0x6d, 0x70, 0x6f, 0x70, 0x6f, 0x72,
	  0x71, 0x75, 0x65, 0x63, 0x75, 0x65, 0x6e, 0x74, 0x61, 0x65, 0x73, 0x74, 0x61,
	  0x64, 0x6f, 0x70, 0x75, 0x65, 0x64, 0x65, 0x6e, 0x6a, 0x75, 0x65, 0x67, 0x6f,
	  0x73, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x65, 0x73, 0x74, 0xc3, 0xa1, 0x6e,
	  0x6e, 0x6f, 0x6d, 0x62, 0x72, 0x65, 0x74, 0x69, 0x65, 0x6e, 0x65, 0x6e, 0x70,
	  0x65, 0x72, 0x66, 0x69, 0x6c, 0x6d, 0x61, 0x6e, 0x65, 0x72, 0x61, 0x61, 0x6d,
	  0x69, 0x67, 0x6f, 0x73, 0x63, 0x69, 0x75, 0x64, 0x61, 0x64, 0x63, 0x65, 0x6e,
	  0x74, 0x72, 0x6f, 0x61, 0x75, 0x6e, 0x71, 0x75, 0x65, 0x70, 0x75, 0x65, 0x64,
	  0x65, 0x73, 0x64, 0x65, 0x6e, 0x74, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x6d, 0x65,
	  0x72, 0x70, 0x72, 0x65, 0x63, 0x69, 0x6f, 0x73, 0x65, 0x67, 0xc3, 0xba, 0x6e,
	  0x62, 0x75, 0x65, 0x6e, 0x6f, 0x73, 0x76, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x70,
	  0x75, 0x6e, 0x74, 0x6f, 0x73, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x68, 0x61,
	  0x62, 0xc3, 0xad, 0x61, 0x61, 0x67, 0x6f, 0x73, 0x74, 0x6f, 0x6e, 0x75, 0x65,
	  0x76, 0x6f, 0x73, 0x75, 0x6e, 0x69, 0x64, 0x6f, 0x73, 0x63, 0x61, 0x72, 0x6c,
	  0x6f, 0x73, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6f, 0x6e, 0x69, 0xc3, 0xb1, 0x6f,
	  0x73, 0x6d, 0x75, 0x63, 0x68, 0x6f, 0x73, 0x61, 0x6c, 0x67, 0x75, 0x6e, 0x61,
	  0x63, 0x6f, 0x72, 0x72, 0x65, 0x6f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x6e, 0x70,
	  0x61, 0x72, 0x74, 0x69, 0x72, 0x61, 0x72, 0x72, 0x69, 0x62, 0x61, 0x6d, 0x61,
	  0x72, 0xc3, 0xad, 0x61, 0x68, 0x6f, 0x6d, 0x62, 0x72, 0x65, 0x65, 0x6d, 0x70,
	  0x6c, 0x65, 0x6f, 0x76, 0x65, 0x72, 0x64, 0x61, 0x64, 0x63, 0x61, 0x6d, 0x62,
	  0x69, 0x6f, 0x6d, 0x75, 0x63, 0x68, 0x61, 0x73, 0x66, 0x75, 0x65, 0x72, 0x6f,
	  0x6e, 0x70, 0x61, 0x73, 0x61, 0x64, 0x6f, 0x6c, 0xc3, 0xad, 0x6e, 0x65, 0x61,
	  0x70, 0x61, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x75, 0x65, 0x76, 0x61, 0x73, 0x63,
	  0x75, 0x72, 0x73, 0x6f, 0x73, 0x65, 0x73, 0x74, 0x61, 0x62, 0x61, 0x71, 0x75,
	  0x69, 0x65, 0x72, 0x6f, 0x6c, 0x69, 0x62, 0x72, 0x6f, 0x73, 0x63, 0x75, 0x61,
	  0x6e, 0x74, 0x6f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x6f, 0x6d, 0x69, 0x67, 0x75,
	  0x65, 0x6c, 0x76, 0x61, 0x72, 0x69, 0x6f, 0x73, 0x63, 0x75, 0x61, 0x74, 0x72,
	  0x6f, 0x74, 0x69, 0x65, 0x6e, 0x65, 0x73, 0x67, 0x72, 0x75, 0x70, 0x6f, 0x73,
	  0x73, 0x65, 0x72, 0xc3, 0xa1, 0x6e, 0x65, 0x75, 0x72, 0x6f, 0x70, 0x61, 0x6d,
	  0x65, 0x64, 0x69, 0x6f, 0x73, 0x66, 0x72, 0x65, 0x6e, 0x74, 0x65, 0x61, 0x63,
	  0x65, 0x72, 0x63, 0x61, 0x64, 0x65, 0x6d, 0xc3, 0xa1, 0x73, 0x6f, 0x66, 0x65,
	  0x72, 0x74, 0x61, 0x63, 0x6f, 0x63, 0x68, 0x65, 0x73, 0x6d, 0x6f, 0x64, 0x65,
	  0x6c, 0x6f, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x61, 0x6c, 0x65, 0x74, 0x72, 0x61,
	  0x73, 0x61, 0x6c, 0x67, 0xc3, 0xba, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x61,
	  0x63, 0x75, 0x61, 0x6c, 0x65, 0x73, 0x65, 0x78, 0x69, 0x73, 0x74, 0x65, 0x63,
	  0x75, 0x65, 0x72, 0x70, 0x6f, 0x73, 0x69, 0x65, 0x6e, 0x64, 0x6f, 0x70, 0x72,
	  0x65, 0x6e, 0x73, 0x61, 0x6c, 0x6c, 0x65, 0x67, 0x61, 0x72, 0x76, 0x69, 0x61,
	  0x6a, 0x65, 0x73, 0x64, 0x69, 0x6e, 0x65, 0x72, 0x6f, 0x6d, 0x75, 0x72, 0x63,
	  0x69, 0x61, 0x70, 0x6f, 0x64, 0x72, 0xc3, 0xa1, 0x70, 0x75, 0x65, 0x73, 0x74,
	  0x6f, 0x64, 0x69, 0x61, 0x72, 0x69, 0x6f, 0x70, 0x75, 0x65, 0x62, 0x6c, 0x6f,
	  0x71, 0x75, 0x69, 0x65, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x75, 0x65, 0x6c, 0x70,
	  0x72, 0x6f, 0x70, 0x69, 0x6f, 0x63, 0x72, 0x69, 0x73, 0x69, 0x73, 0x63, 0x69,
	  0x65, 0x72, 0x74, 0x6f, 0x73, 0x65, 0x67, 0x75, 0x72, 0x6f, 0x6d, 0x75, 0x65,
	  0x72, 0x74, 0x65, 0x66, 0x75, 0x65, 0x6e, 0x74, 0x65, 0x63, 0x65, 0x72, 0x72,
	  0x61, 0x72, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x65, 0x65, 0x66, 0x65, 0x63, 0x74,
	  0x6f, 0x70, 0x61, 0x72, 0x74, 0x65, 0x73, 0x6d, 0x65, 0x64, 0x69, 0x64, 0x61,
	  0x70, 0x72, 0x6f, 0x70, 0x69, 0x61, 0x6f, 0x66, 0x72, 0x65, 0x63, 0x65, 0x74,
	  0x69, 0x65, 0x72, 0x72, 0x61, 0x65, 0x2d, 0x6d, 0x61, 0x69, 0x6c, 0x76, 0x61,
	  0x72, 0x69, 0x61, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x73, 0x66, 0x75, 0x74,
	  0x75, 0x72, 0x6f, 0x6f, 0x62, 0x6a, 0x65, 0x74, 0x6f, 0x73, 0x65, 0x67, 0x75,
	  0x69, 0x72, 0x72, 0x69, 0x65, 0x73, 0x67, 0x6f, 0x6e, 0x6f, 0x72, 0x6d, 0x61,
	  0x73, 0x6d, 0x69, 0x73, 0x6d, 0x6f, 0x73, 0xc3, 0xba, 0x6e, 0x69, 0x63, 0x6f,
	  0x63, 0x61, 0x6d, 0x69, 0x6e, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x73, 0x72,
	  0x61, 0x7a, 0xc3, 0xb3, 0x6e, 0x64, 0x65, 0x62, 0x69, 0x64, 0x6f, 0x70, 0x72,
	  0x75, 0x65, 0x62, 0x61, 0x74, 0x6f, 0x6c, 0x65, 0x64, 0x6f, 0x74, 0x65, 0x6e,
	  0xc3, 0xad, 0x61, 0x6a, 0x65, 0x73, 0xc3, 0xba, 0x73, 0x65, 0x73, 0x70, 0x65,
	  0x72, 0x6f, 0x63, 0x6f, 0x63, 0x69, 0x6e, 0x61, 0x6f, 0x72, 0x69, 0x67, 0x65,
	  0x6e, 0x74, 0x69, 0x65, 0x6e, 0x64, 0x61, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x6f,
	  0x63, 0xc3, 0xa1, 0x64, 0x69, 0x7a, 0x68, 0x61, 0x62, 0x6c, 0x61, 0x72, 0x73,
	  0x65, 0x72, 0xc3, 0xad, 0x61, 0x6c, 0x61, 0x74, 0x69, 0x6e, 0x61, 0x66, 0x75,
	  0x65, 0x72, 0x7a, 0x61, 0x65, 0x73, 0x74, 0x69, 0x6c, 0x6f, 0x67, 0x75, 0x65,
	  0x72, 0x72, 0x61, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x72, 0xc3, 0xa9, 0x78, 0x69,
	  0x74, 0x6f, 0x6c, 0xc3, 0xb3, 0x70, 0x65, 0x7a, 0x61, 0x67, 0x65, 0x6e, 0x64,
	  0x61, 0x76, 0xc3, 0xad, 0x64, 0x65, 0x6f, 0x65, 0x76, 0x69, 0x74, 0x61, 0x72,
	  0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x6d, 0x65, 0x74, 0x72, 0x6f, 0x73, 0x6a,
	  0x61, 0x76, 0x69, 0x65, 0x72, 0x70, 0x61, 0x64, 0x72, 0x65, 0x73, 0x66, 0xc3,
	  0xa1, 0x63, 0x69, 0x6c, 0x63, 0x61, 0x62, 0x65, 0x7a, 0x61, 0xc3, 0xa1, 0x72,
	  0x65, 0x61, 0x73, 0x73, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x65, 0x6e, 0x76, 0xc3,
	  0xad, 0x6f, 0x6a, 0x61, 0x70, 0xc3, 0xb3, 0x6e, 0x61, 0x62, 0x75, 0x73, 0x6f,
	  0x73, 0x62, 0x69, 0x65, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x78, 0x74, 0x6f, 0x73,
	  0x6c, 0x6c, 0x65, 0x76, 0x61, 0x72, 0x70, 0x75, 0x65, 0x64, 0x61, 0x6e, 0x66,
	  0x75, 0x65, 0x72, 0x74, 0x65, 0x63, 0x6f, 0x6d, 0xc3, 0xba, 0x6e, 0x63, 0x6c,
	  0x61, 0x73, 0x65, 0x73, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x6f, 0x74, 0x65, 0x6e,
	  0x69, 0x64, 0x6f, 0x62, 0x69, 0x6c, 0x62, 0x61, 0x6f, 0x75, 0x6e, 0x69, 0x64,
	  0x61, 0x64, 0x65, 0x73, 0x74, 0xc3, 0xa1, 0x73, 0x65, 0x64, 0x69, 0x74, 0x61,
	  0x72, 0x63, 0x72, 0x65, 0x61, 0x64, 0x6f, 0xd0, 0xb4, 0xd0, 0xbb, 0xd1, 0x8f,
	  0xd1, 0x87, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xba, 0xd0, 0xb0, 0xd0, 0xba, 0xd0,
	  0xb8, 0xd0, 0xbb, 0xd0, 0xb8, 0xd1, 0x8d, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xb2,
	  0xd1, 0x81, 0xd0, 0xb5, 0xd0, 0xb5, 0xd0, 0xb3, 0xd0, 0xbe, 0xd0, 0xbf, 0xd1,
	  0x80, 0xd0, 0xb8, 0xd1, 0x82, 0xd0, 0xb0, 0xd0, 0xba, 0xd0, 0xb5, 0xd1, 0x89,
	  0xd0, 0xb5, 0xd1, 0x83, 0xd0, 0xb6, 0xd0, 0xb5, 0xd0, 0x9a, 0xd0, 0xb0, 0xd0,
	  0xba, 0xd0, 0xb1, 0xd0, 0xb5, 0xd0, 0xb7, 0xd0, 0xb1, 0xd1, 0x8b, 0xd0, 0xbb,
	  0xd0, 0xbe, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0x92, 0xd1, 0x81, 0xd0, 0xb5, 0xd0,
	  0xbf, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xad, 0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x82,
	  0xd0, 0xbe, 0xd0, 0xbc, 0xd1, 0x87, 0xd0, 0xb5, 0xd0, 0xbc, 0xd0, 0xbd, 0xd0,
	  0xb5, 0xd1, 0x82, 0xd0, 0xbb, 0xd0, 0xb5, 0xd1, 0x82, 0xd1, 0x80, 0xd0, 0xb0,
	  0xd0, 0xb7, 0xd0, 0xbe, 0xd0, 0xbd, 0xd0, 0xb0, 0xd0, 0xb3, 0xd0, 0xb4, 0xd0,
	  0xb5, 0xd0, 0xbc, 0xd0, 0xbd, 0xd0, 0xb5, 0xd0, 0x94, 0xd0, 0xbb, 0xd1, 0x8f,
	  0xd0, 0x9f, 0xd1, 0x80, 0xd0, 0xb8, 0xd0, 0xbd, 0xd0, 0xb0, 0xd1, 0x81, 0xd0,
	  0xbd, 0xd0, 0xb8, 0xd1, 0x85, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbc, 0xd0, 0xba,
	  0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xb3, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xb2, 0xd0,
	  0xbe, 0xd1, 0x82, 0xd1, 0x82, 0xd0, 0xb0, 0xd0, 0xbc, 0xd0, 0xa1, 0xd0, 0xa8,
	  0xd0, 0x90, 0xd0, 0xbc, 0xd0, 0xb0, 0xd1, 0x8f, 0xd0, 0xa7, 0xd1, 0x82, 0xd0,
	  0xbe, 0xd0, 0xb2, 0xd0, 0xb0, 0xd1, 0x81, 0xd0, 0xb2, 0xd0, 0xb0, 0xd0, 0xbc,
	  0xd0, 0xb5, 0xd0, 0xbc, 0xd1, 0x83, 0xd0, 0xa2, 0xd0, 0xb0, 0xd0, 0xba, 0xd0,
	  0xb4, 0xd0, 0xb2, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb0, 0xd0, 0xbc, 0xd1, 0x8d,
	  0xd1, 0x82, 0xd0, 0xb8, 0xd1, 0x8d, 0xd1, 0x82, 0xd1, 0x83, 0xd0, 0x92, 0xd0,
	  0xb0, 0xd0, 0xbc, 0xd1, 0x82, 0xd0, 0xb5, 0xd1, 0x85, 0xd0, 0xbf, 0xd1, 0x80,
	  0xd0, 0xbe, 0xd1, 0x82, 0xd1, 0x83, 0xd1, 0x82, 0xd0, 0xbd, 0xd0, 0xb0, 0xd0,
	  0xb4, 0xd0, 0xb4, 0xd0, 0xbd, 0xd1, 0x8f, 0xd0, 0x92, 0xd0, 0xbe, 0xd1, 0x82,
	  0xd1, 0x82, 0xd1, 0x80, 0xd0, 0xb8, 0xd0, 0xbd, 0xd0, 0xb5, 0xd0, 0xb9, 0xd0,
	  0x92, 0xd0, 0xb0, 0xd1, 0x81, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xbc, 0xd1, 0x81,
	  0xd0, 0xb0, 0xd0, 0xbc, 0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x82, 0xd1, 0x80, 0xd1,
	  0x83, 0xd0, 0xb1, 0xd0, 0x9e, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xbc, 0xd0, 0xb8,
	  0xd1, 0x80, 0xd0, 0xbd, 0xd0, 0xb5, 0xd0, 0xb5, 0xd0, 0x9e, 0xd0, 0x9e, 0xd0,
	  0x9e, 0xd0, 0xbb, 0xd0, 0xb8, 0xd1, 0x86, 0xd1, 0x8d, 0xd1, 0x82, 0xd0, 0xb0,
	  0xd0, 0x9e, 0xd0, 0xbd, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb5, 0xd0, 0xbc, 0xd0,
	  0xb4, 0xd0, 0xbe, 0xd0, 0xbc, 0xd0, 0xbc, 0xd0, 0xbe, 0xd0, 0xb9, 0xd0, 0xb4,
	  0xd0, 0xb2, 0xd0, 0xb5, 0xd0, 0xbe, 0xd0, 0xbd, 0xd0, 0xbe, 0xd1, 0x81, 0xd1,
	  0x83, 0xd0, 0xb4, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb9, 0xe0,
	  0xa5, 0x88, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5,
	  0x87, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x8b,
	  0xe0, 0xa4, 0x94, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xb0, 0xe0,
	  0xa4, 0xa8, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x8f, 0xe0, 0xa4, 0x95, 0xe0, 0xa4,
	  0x95, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xad, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0x87,
	  0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xa4, 0xe0,
	  0xa5, 0x8b, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0x86, 0xe0, 0xa4,
	  0xaa, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xb9,
	  0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0x95, 0xe0,
	  0xa4, 0xa5, 0xe0, 0xa4, 0xbe, 0x6a, 0x61, 0x67, 0x72, 0x61, 0x6e, 0xe0, 0xa4,
	  0x86, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0x9c, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0x85,
	  0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0xa6, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0x97, 0xe0,
	  0xa4, 0x88, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x97, 0xe0, 0xa4,
	  0x8f, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0x87, 0xe0, 0xa4, 0xa8,
	  0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xaf, 0xe0, 0xa5, 0x87, 0xe0,
	  0xa4, 0xa5, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xa5, 0xe0, 0xa5, 0x80, 0xe0, 0xa4,
	  0x98, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0xa6,
	  0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0x88, 0xe0, 0xa4, 0x9c, 0xe0,
	  0xa5, 0x80, 0xe0, 0xa4, 0xb5, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4,
	  0x88, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0x8f, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xb0,
	  0xe0, 0xa4, 0x89, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xae, 0xe0, 0xa5, 0x87, 0xe0,
	  0xa4, 0x95, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xb5, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4,
	  0xb2, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0xae,
	  0xe0, 0xa4, 0x88, 0xe0, 0xa4, 0xa6, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x93, 0xe0,
	  0xa4, 0xb0, 0xe0, 0xa4, 0x86, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xac, 0xe0, 0xa4,
	  0xb8, 0xe0, 0xa4, 0xad, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0xa8,
	  0xe0, 0xa4, 0x9a, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xa8, 0xe0,
	  0xa4, 0x86, 0xe0, 0xa4, 0x97, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x80, 0xe0, 0xa4,
	  0xb2, 0xe0, 0xa5, 0x80, 0xd8, 0xb9, 0xd9, 0x84, 0xd9, 0x89, 0xd8, 0xa5, 0xd9,
	  0x84, 0xd9, 0x89, 0xd9, 0x87, 0xd8, 0xb0, 0xd8, 0xa7, 0xd8, 0xa2, 0xd8, 0xae,
	  0xd8, 0xb1, 0xd8, 0xb9, 0xd8, 0xaf, 0xd8, 0xaf, 0xd8, 0xa7, 0xd9, 0x84, 0xd9,
	  0x89, 0xd9, 0x87, 0xd8, 0xb0, 0xd9, 0x87, 0xd8, 0xb5, 0xd9, 0x88, 0xd8, 0xb1,
	  0xd8, 0xba, 0xd9, 0x8a, 0xd8, 0xb1, 0xd9, 0x83, 0xd8, 0xa7, 0xd9, 0x86, 0xd9,
	  0x88, 0xd9, 0x84, 0xd8, 0xa7, 0xd8, 0xa8, 0xd9, 0x8a, 0xd9, 0x86, 0xd8, 0xb9,
	  0xd8, 0xb1, 0xd8, 0xb6, 0xd8, 0xb0, 0xd9, 0x84, 0xd9, 0x83, 0xd9, 0x87, 0xd9,
	  0x86, 0xd8, 0xa7, 0xd9, 0x8a, 0xd9, 0x88, 0xd9, 0x85, 0xd9, 0x82, 0xd8, 0xa7,
	  0xd9, 0x84, 0xd8, 0xb9, 0xd9, 0x84, 0xd9, 0x8a, 0xd8, 0xa7, 0xd9, 0x86, 0xd8,
	  0xa7, 0xd9, 0x84, 0xd9, 0x83, 0xd9, 0x86, 0xd8, 0xad, 0xd8, 0xaa, 0xd9, 0x89,
	  0xd9, 0x82, 0xd8, 0xa8, 0xd9, 0x84, 0xd9, 0x88, 0xd8, 0xad, 0xd8, 0xa9, 0xd8,
	  0xa7, 0xd8, 0xae, 0xd8, 0xb1, 0xd9, 0x81, 0xd9, 0x82, 0xd8, 0xb7, 0xd8, 0xb9,
	  0xd8, 0xa8, 0xd8, 0xaf, 0xd8, 0xb1, 0xd9, 0x83, 0xd9, 0x86, 0xd8, 0xa5, 0xd8,
	  0xb0, 0xd8, 0xa7, 0xd9, 0x83, 0xd9, 0x85, 0xd8, 0xa7, 0xd8, 0xa7, 0xd8, 0xad,
	  0xd8, 0xaf, 0xd8, 0xa5, 0xd9, 0x84, 0xd8, 0xa7, 0xd9, 0x81, 0xd9, 0x8a, 0xd9,
	  0x87, 0xd8, 0xa8, 0xd8, 0xb9, 0xd8, 0xb6, 0xd9, 0x83, 0xd9, 0x8a, 0xd9, 0x81,
	  0xd8, 0xa8, 0xd8, 0xad, 0xd8, 0xab, 0xd9, 0x88, 0xd9, 0x85, 0xd9, 0x86, 0xd9,
	  0x88, 0xd9, 0x87, 0xd9, 0x88, 0xd8, 0xa3, 0xd9, 0x86, 0xd8, 0xa7, 0xd8, 0xac,
	  0xd8, 0xaf, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x87, 0xd8, 0xa7, 0xd8, 0xb3, 0xd9,
	  0x84, 0xd9, 0x85, 0xd8, 0xb9, 0xd9, 0x86, 0xd8, 0xaf, 0xd9, 0x84, 0xd9, 0x8a,
	  0xd8, 0xb3, 0xd8, 0xb9, 0xd8, 0xa8, 0xd8, 0xb1, 0xd8, 0xb5, 0xd9, 0x84, 0xd9,
	  0x89, 0xd9, 0x85, 0xd9, 0x86, 0xd8, 0xb0, 0xd8, 0xa8, 0xd9, 0x87, 0xd8, 0xa7,
	  0xd8, 0xa3, 0xd9, 0x86, 0xd9, 0x87, 0xd9, 0x85, 0xd8, 0xab, 0xd9, 0x84, 0xd9,
	  0x83, 0xd9, 0x86, 0xd8, 0xaa, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa7, 0xd8, 0xad,
	  0xd9, 0x8a, 0xd8, 0xab, 0xd9, 0x85, 0xd8, 0xb5, 0xd8, 0xb1, 0xd8, 0xb4, 0xd8,
	  0xb1, 0xd8, 0xad, 0xd8, 0xad, 0xd9, 0x88, 0xd9, 0x84, 0xd9, 0x88, 0xd9, 0x81,
	  0xd9, 0x8a, 0xd8, 0xa7, 0xd8, 0xb0, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x83, 0xd9,
	  0x84, 0xd9, 0x85, 0xd8, 0xb1, 0xd8, 0xa9, 0xd8, 0xa7, 0xd9, 0x86, 0xd8, 0xaa,
	  0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x81, 0xd8, 0xa3, 0xd8, 0xa8, 0xd9, 0x88, 0xd8,
	  0xae, 0xd8, 0xa7, 0xd8, 0xb5, 0xd8, 0xa3, 0xd9, 0x86, 0xd8, 0xaa, 0xd8, 0xa7,
	  0xd9, 0x86, 0xd9, 0x87, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x8a, 0xd8, 0xb9, 0xd8,
	  0xb6, 0xd9, 0x88, 0xd9, 0x88, 0xd9, 0x82, 0xd8, 0xaf, 0xd8, 0xa7, 0xd8, 0xa8,
	  0xd9, 0x86, 0xd8, 0xae, 0xd9, 0x8a, 0xd8, 0xb1, 0xd8, 0xa8, 0xd9, 0x86, 0xd8,
	  0xaa, 0xd9, 0x84, 0xd9, 0x83, 0xd9, 0x85, 0xd8, 0xb4, 0xd8, 0xa7, 0xd8, 0xa1,
	  0xd9, 0x88, 0xd9, 0x87, 0xd9, 0x8a, 0xd8, 0xa7, 0xd8, 0xa8, 0xd9, 0x88, 0xd9,
	  0x82, 0xd8, 0xb5, 0xd8, 0xb5, 0xd9, 0x88, 0xd9, 0x85, 0xd8, 0xa7, 0xd8, 0xb1,
	  0xd9, 0x82, 0xd9, 0x85, 0xd8, 0xa3, 0xd8, 0xad, 0xd8, 0xaf, 0xd9, 0x86, 0xd8,
	  0xad, 0xd9, 0x86, 0xd8, 0xb9, 0xd8, 0xaf, 0xd9, 0x85, 0xd8, 0xb1, 0xd8, 0xa3,
	  0xd9, 0x8a, 0xd8, 0xa7, 0xd8, 0xad, 0xd8, 0xa9, 0xd9, 0x83, 0xd8, 0xaa, 0xd8,
	  0xa8, 0xd8, 0xaf, 0xd9, 0x88, 0xd9, 0x86, 0xd9, 0x8a, 0xd8, 0xac, 0xd8, 0xa8,
	  0xd9, 0x85, 0xd9, 0x86, 0xd9, 0x87, 0xd8, 0xaa, 0xd8, 0xad, 0xd8, 0xaa, 0xd8,
	  0xac, 0xd9, 0x87, 0xd8, 0xa9, 0xd8, 0xb3, 0xd9, 0x86, 0xd8, 0xa9, 0xd9, 0x8a,
	  0xd8, 0xaa, 0xd9, 0x85, 0xd9, 0x83, 0xd8, 0xb1, 0xd8, 0xa9, 0xd8, 0xba, 0xd8,
	  0xb2, 0xd8, 0xa9, 0xd9, 0x86, 0xd9, 0x81, 0xd8, 0xb3, 0xd8, 0xa8, 0xd9, 0x8a,
	  0xd8, 0xaa, 0xd9, 0x84, 0xd9, 0x84, 0xd9, 0x87, 0xd9, 0x84, 0xd9, 0x86, 0xd8,
	  0xa7, 0xd8, 0xaa, 0xd9, 0x84, 0xd9, 0x83, 0xd9, 0x82, 0xd9, 0x84, 0xd8, 0xa8,
	  0xd9, 0x84, 0xd9, 0x85, 0xd8, 0xa7, 0xd8, 0xb9, 0xd9, 0x86, 0xd9, 0x87, 0xd8,
	  0xa3, 0xd9, 0x88, 0xd9, 0x84, 0xd8, 0xb4, 0xd9, 0x8a, 0xd8, 0xa1, 0xd9, 0x86,
	  0xd9, 0x88, 0xd8, 0xb1, 0xd8, 0xa3, 0xd9, 0x85, 0xd8, 0xa7, 0xd9, 0x81, 0xd9,
	  0x8a, 0xd9, 0x83, 0xd8, 0xa8, 0xd9, 0x83, 0xd9, 0x84, 0xd8, 0xb0, 0xd8, 0xa7,
	  0xd8, 0xaa, 0xd8, 0xb1, 0xd8, 0xaa, 0xd8, 0xa8, 0xd8, 0xa8, 0xd8, 0xa3, 0xd9,
	  0x86, 0xd9, 0x87, 0xd9, 0x85, 0xd8, 0xb3, 0xd8, 0xa7, 0xd9, 0x86, 0xd9, 0x83,
	  0xd8, 0xa8, 0xd9, 0x8a, 0xd8, 0xb9, 0xd9, 0x81, 0xd9, 0x82, 0xd8, 0xaf, 0xd8,
	  0xad, 0xd8, 0xb3, 0xd9, 0x86, 0xd9, 0x84, 0xd9, 0x87, 0xd9, 0x85, 0xd8, 0xb4,
	  0xd8, 0xb9, 0xd8, 0xb1, 0xd8, 0xa3, 0xd9, 0x87, 0xd9, 0x84, 0xd8, 0xb4, 0xd9,
	  0x87, 0xd8, 0xb1, 0xd9, 0x82, 0xd8, 0xb7, 0xd8, 0xb1, 0xd8, 0xb7, 0xd9, 0x84,
	  0xd8, 0xa8, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x65, 0x72, 0x76,
	  0x69, 0x63, 0x65, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x68, 0x69, 0x6d,
	  0x73, 0x65, 0x6c, 0x66, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x63, 0x6f,
	  0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73,
	  0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	  0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x61, 0x73, 0x68, 0x69, 0x6f,
	  0x6e, 0x3c, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x3e, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	  0x72, 0x79, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x63, 0x72, 0x65, 0x61,
	  0x74, 0x65, 0x64, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x72, 0x65, 0x73,
	  0x75, 0x6c, 0x74, 0x73, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x72,
	  0x6f, 0x63, 0x65, 0x73, 0x73, 0x77, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x6f,
	  0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65,
	  0x77, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x65, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c,
	  0x65, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	  0x72, 0x6b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x64, 0x79, 0x6e, 0x61,
	  0x6d, 0x69, 0x63, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x70, 0x72, 0x69,
	  0x76, 0x61, 0x63, 0x79, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x53, 0x65,
	  0x72, 0x76, 0x69, 0x63, 0x65, 0x72, 0x65, 0x73, 0x70, 0x65, 0x63, 0x74, 0x64,
	  0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	  0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74,
	  0x65, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x66, 0x72, 0x69, 0x65, 0x6e,
	  0x64, 0x73, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x77, 0x6f, 0x72, 0x6b,
	  0x69, 0x6e, 0x67, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x6d, 0x69, 0x6c,
	  0x6c, 0x69, 0x6f, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x77, 0x69,
	  0x6e, 0x64, 0x6f, 0x77, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x76,
	  0x69, 0x73, 0x69, 0x74, 0x65, 0x64, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72,
	  0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	  0x74, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x66, 0x6f, 0x72, 0x77, 0x61,
	  0x72, 0x64, 0x79, 0x6f, 0x75, 0x20, 0x63, 0x61, 0x6e, 0x72, 0x65, 0x6d, 0x6f,
	  0x76, 0x65, 0x64, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x63, 0x6f, 0x6e,
	  0x74, 0x72, 0x6f, 0x6c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x63, 0x75,
	  0x72, 0x72, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x6c,
	  0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64,
	  0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x66, 0x75, 0x72, 0x74, 0x68, 0x65,
	  0x72, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x6d, 0x61, 0x63, 0x68, 0x69,
	  0x6e, 0x65, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x70, 0x72, 0x69, 0x76,
	  0x61, 0x74, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x70, 0x72, 0x6f,
	  0x67, 0x72, 0x61, 0x6d, 0x73, 0x6f, 0x63, 0x69, 0x65, 0x74, 0x79, 0x6e, 0x75,
	  0x6d, 0x62, 0x65, 0x72, 0x73, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x65,
	  0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	  0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e,
	  0x67, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x70, 0x61, 0x72, 0x74, 0x6e,
	  0x65, 0x72, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x70, 0x65, 0x72, 0x66,
	  0x65, 0x63, 0x74, 0x6d, 0x65, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x79, 0x73,
	  0x74, 0x65, 0x6d, 0x73, 0x6b, 0x65, 0x65, 0x70, 0x69, 0x6e, 0x67, 0x63, 0x75,
	  0x6c, 0x74, 0x75, 0x72, 0x65, 0x26, 0x71, 0x75, 0x6f, 0x74, 0x3b, 0x2c, 0x6a,
	  0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	  0x73, 0x75, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x26, 0x71, 0x75, 0x6f, 0x74,
	  0x3b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x72, 0x65, 0x76, 0x69, 0x65,
	  0x77, 0x73, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x6e, 0x67, 0x6c,
	  0x69, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x74, 0x68, 0x72,
	  0x6f, 0x75, 0x67, 0x68, 0x50, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x6f, 0x70,
	  0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x61,
	  0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	  0x76, 0x69, 0x6c, 0x6c, 0x61, 0x67, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x69, 0x73,
	  0x68, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x64, 0x65, 0x63, 0x6c, 0x69,
	  0x6e, 0x65, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x6d, 0x69, 0x73, 0x73,
	  0x69, 0x6f, 0x6e, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x71, 0x75, 0x61,
	  0x6c, 0x69, 0x74, 0x79, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x67, 0x65,
	  0x6e, 0x65, 0x72, 0x61, 0x6c, 0x73, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x73,
	  0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	  0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	  0x72, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x72, 0x65, 0x70, 0x6f, 0x72,
	  0x74, 0x73, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x73, 0x6d, 0x65, 0x6d, 0x62,
	  0x65, 0x72, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x64, 0x69, 0x73,
	  0x70, 0x75, 0x74, 0x65, 0x65, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x72, 0x65, 0x78,
	  0x70, 0x72, 0x65, 0x73, 0x73, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x70,
	  0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x41, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72,
	  0x6d, 0x61, 0x72, 0x72, 0x69, 0x65, 0x64, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69,
	  0x63, 0x6c, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x63, 0x68, 0x61, 0x6e, 0x67,
	  0x65, 0x64, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x76, 0x69, 0x63, 0x74,
	  0x6f, 0x72, 0x79, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x72, 0x65, 0x61,
	  0x73, 0x6f, 0x6e, 0x73, 0x73, 0x74, 0x75, 0x64, 0x69, 0x65, 0x73, 0x66, 0x65,
	  0x61, 0x74, 0x75, 0x72, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x6d,
	  0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x73,
	  0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x75, 0x73, 0x75, 0x61, 0x6c, 0x6c,
	  0x79, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x69,
	  0x6e, 0x67, 0x67, 0x72, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x6f, 0x62, 0x76, 0x69,
	  0x6f, 0x75, 0x73, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x70, 0x72, 0x65,
	  0x73, 0x65, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3c, 0x2f,
	  0x75, 0x6c, 0x3e, 0x0d, 0x0a, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x61,
	  0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e,
	  0x72, 0x65, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	  0x65, 0x61, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x64, 0x65, 0x73, 0x6b, 0x74,
	  0x6f, 0x70, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x65, 0x64, 0x70, 0x61, 0x74, 0x74,
	  0x65, 0x72, 0x6e, 0x75, 0x6e, 0x75, 0x73, 0x75, 0x61, 0x6c, 0x44, 0x69, 0x67,
	  0x69, 0x74, 0x61, 0x6c, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x57, 0x65,
	  0x62, 0x73, 0x69, 0x74, 0x65, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x63,
	  0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x64,
	  0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x64, 0x65, 0x63, 0x61, 0x64, 0x65,
	  0x73, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x20, 0x26, 0x61, 0x6d, 0x70,
	  0x3b, 0x20, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x72, 0x65, 0x6c, 0x65,
	  0x61, 0x73, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x67, 0x65, 0x74,
	  0x74, 0x69, 0x6e, 0x67, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x6e, 0x6f,
	  0x74, 0x68, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x63,
	  0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x73,
	  0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x73, 0x63, 0x69, 0x65, 0x6e, 0x63,
	  0x65, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x67,
	  0x65, 0x73, 0x45, 0x6e, 0x67, 0x6c, 0x61, 0x6e, 0x64, 0x3d, 0x31, 0x26, 0x61,
	  0x6d, 0x70, 0x3b, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x3d, 0x20,
	  0x6e, 0x65, 0x77, 0x20, 0x43, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x75, 0x70,
	  0x64, 0x61, 0x74, 0x65, 0x64, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x4e,
	  0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	  0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	  0x67, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x67, 0x65, 0x74, 0x6f, 0x6f, 0x6c, 0x62,
	  0x61, 0x72, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x62, 0x65, 0x63, 0x61,
	  0x75, 0x73, 0x65, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44, 0x65, 0x75,
	  0x74, 0x73, 0x63, 0x68, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x77, 0x6f,
	  0x72, 0x6b, 0x65, 0x72, 0x73, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x6c, 0x79, 0x62,
	  0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x65, 0x78, 0x61, 0x63, 0x74, 0x6c, 0x79,
	  0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x64, 0x69, 0x73, 0x65, 0x61, 0x73,
	  0x65, 0x53, 0x6f, 0x63, 0x69, 0x65, 0x74, 0x79, 0x77, 0x65, 0x61, 0x70, 0x6f,
	  0x6e, 0x73, 0x65, 0x78, 0x68, 0x69, 0x62, 0x69, 0x74, 0x26, 0x6c, 0x74, 0x3b,
	  0x21, 0x2d, 0x2d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x63, 0x6c, 0x61,
	  0x73, 0x73, 0x65, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x6f, 0x75,
	  0x74, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x64,
	  0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x28, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	  0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x3d,
	  0x22, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x20, 0x6b, 0x69, 0x6c, 0x6c, 0x69,
	  0x6e, 0x67, 0x73, 0x68, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x49, 0x74, 0x61, 0x6c,
	  0x69, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x68, 0x65, 0x61,
	  0x76, 0x69, 0x6c, 0x79, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x2d, 0x31,
	  0x27, 0x5d, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x43,
	  0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65,
	  0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e,
	  0x67, 0x64, 0x72, 0x61, 0x77, 0x69, 0x6e, 0x67, 0x62, 0x69, 0x6c, 0x6c, 0x69,
	  0x6f, 0x6e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x47, 0x65, 0x72, 0x6d,
	  0x61, 0x6e, 0x79, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x3c, 0x2f, 0x66,
	  0x6f, 0x72, 0x6d, 0x3e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x77, 0x68,
	  0x65, 0x74, 0x68, 0x65, 0x72, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x53,
	  0x63, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	  0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e,
	  0x73, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x73, 0x74, 0x75, 0x6e, 0x69, 0x66, 0x6f,
	  0x72, 0x6d, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x73, 0x69, 0x64, 0x65,
	  0x62, 0x61, 0x72, 0x43, 0x68, 0x69, 0x63, 0x61, 0x67, 0x6f, 0x68, 0x6f, 0x6c,
	  0x69, 0x64, 0x61, 0x79, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x70, 0x61,
	  0x73, 0x73, 0x61, 0x67, 0x65, 0x2c, 0x26, 0x71, 0x75, 0x6f, 0x74, 0x3b, 0x61,
	  0x6e, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x66, 0x65, 0x65, 0x6c, 0x69, 0x6e, 0x67,
	  0x61, 0x72, 0x72, 0x69, 0x76, 0x65, 0x64, 0x70, 0x61, 0x73, 0x73, 0x69, 0x6e,
	  0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x72, 0x6f, 0x75, 0x67, 0x68,
	  0x6c, 0x79, 0x2e, 0x0a, 0x0a, 0x54, 0x68, 0x65, 0x20, 0x62, 0x75, 0x74, 0x20,
	  0x6e, 0x6f, 0x74, 0x64, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x42, 0x72, 0x69,
	  0x74, 0x61, 0x69, 0x6e, 0x43, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x65, 0x6c, 0x61,
	  0x63, 0x6b, 0x20, 0x6f, 0x66, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49,
	  0x72, 0x65, 0x6c, 0x61, 0x6e, 0x64, 0x22, 0x20, 0x64, 0x61, 0x74, 0x61, 0x2d,
	  0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	  0x65, 0x74, 0x68, 0x61, 0x74, 0x20, 0x69, 0x73, 0x4c, 0x69, 0x62, 0x72, 0x61,
	  0x72, 0x79, 0x68, 0x75, 0x73, 0x62, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x20, 0x66,
	  0x61, 0x63, 0x74, 0x61, 0x66, 0x66, 0x61, 0x69, 0x72, 0x73, 0x43, 0x68, 0x61,
	  0x72, 0x6c, 0x65, 0x73, 0x72, 0x61, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x62, 0x72,
	  0x6f, 0x75, 0x67, 0x68, 0x74, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x6c,
	  0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x6c, 0x61, 0x6e, 0x67, 0x3d, 0x22,
	  0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72,
	  0x73, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x70, 0x72, 0x65, 0x6d, 0x69,
	  0x75, 0x6d, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x41, 0x6d, 0x65, 0x72,
	  0x69, 0x63, 0x61, 0x45, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5d, 0x26, 0x71,
	  0x75, 0x6f, 0x74, 0x3b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x6e, 0x65,
	  0x65, 0x64, 0x20, 0x74, 0x6f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3d, 0x22, 0x63,
	  0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x6c, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	  0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x65, 0x6c, 0x69, 0x65, 0x76,
	  0x65, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x2d, 0x6d, 0x6f, 0x62, 0x69,
	  0x6c, 0x65, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x77, 0x61, 0x6e, 0x74,
	  0x20, 0x74, 0x6f, 0x6b, 0x69, 0x6e, 0x64, 0x20, 0x6f, 0x66, 0x46, 0x69, 0x72,
	  0x65, 0x66, 0x6f, 0x78, 0x79, 0x6f, 0x75, 0x20, 0x61, 0x72, 0x65, 0x73, 0x69,
	  0x6d, 0x69, 0x6c, 0x61, 0x72, 0x73, 0x74, 0x75, 0x64, 0x69, 0x65, 0x64, 0x6d,
	  0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x68, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67,
	  0x72, 0x61, 0x70, 0x69, 0x64, 0x6c, 0x79, 0x63, 0x6c, 0x69, 0x6d, 0x61, 0x74,
	  0x65, 0x6b, 0x69, 0x6e, 0x67, 0x64, 0x6f, 0x6d, 0x65, 0x6d, 0x65, 0x72, 0x67,
	  0x65, 0x64, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x66, 0x6f, 0x75, 0x6e,
	  0x64, 0x65, 0x64, 0x70, 0x69, 0x6f, 0x6e, 0x65, 0x65, 0x72, 0x66, 0x6f, 0x72,
	  0x6d, 0x75, 0x6c, 0x61, 0x64, 0x79, 0x6e, 0x61, 0x73, 0x74, 0x79, 0x68, 0x6f,
	  0x77, 0x20, 0x74, 0x6f, 0x20, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x72,
	  0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79,
	  0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x62, 0x72, 0x6f, 0x74, 0x68, 0x65,
	  0x72, 0x73, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x6c, 0x61, 0x72, 0x67, 0x65,
	  0x6c, 0x79, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x26, 0x71, 0x75,
	  0x6f, 0x74, 0x3b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x64, 0x77,
	  0x61, 0x72, 0x64, 0x20, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x6f,
	  0x62, 0x65, 0x72, 0x74, 0x20, 0x65, 0x66, 0x66, 0x6f, 0x72, 0x74, 0x73, 0x50,
	  0x61, 0x63, 0x69, 0x66, 0x69, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64,
	  0x75, 0x70, 0x20, 0x77, 0x69, 0x74, 0x68, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	  0x3a, 0x77, 0x65, 0x20, 0x68, 0x61, 0x76, 0x65, 0x41, 0x6e, 0x67, 0x65, 0x6c,
	  0x65, 0x73, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x73, 0x65, 0x61,
	  0x72, 0x63, 0x68, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x61, 0x63, 0x71,
	  0x75, 0x69, 0x72, 0x65, 0x6d, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x67, 0x72,
	  0x61, 0x6e, 0x74, 0x65, 0x64, 0x3a, 0x20, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x74,
	  0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x62, 0x69, 0x67, 0x67, 0x65, 0x73, 0x74,
	  0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x64, 0x72, 0x69, 0x76, 0x69, 0x6e,
	  0x67, 0x53, 0x74, 0x75, 0x64, 0x69, 0x65, 0x73, 0x6d, 0x69, 0x6e, 0x69, 0x6d,
	  0x75, 0x6d, 0x70, 0x65, 0x72, 0x68, 0x61, 0x70, 0x73, 0x6d, 0x6f, 0x72, 0x6e,
	  0x69, 0x6e, 0x67, 0x73, 0x65, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x69, 0x73, 0x20,
	  0x75, 0x73, 0x65, 0x64, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x76, 0x61,
	  0x72, 0x69, 0x61, 0x6e, 0x74, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x3d, 0x22, 0x6d,
	  0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65,
	  0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e,
	  0x74, 0x73, 0x6f, 0x6d, 0x65, 0x6f, 0x6e, 0x65, 0x65, 0x78, 0x74, 0x72, 0x65,
	  0x6d, 0x65, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x74, 0x74,
	  0x6f, 0x6d, 0x3a, 0x65, 0x76, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x61, 0x6c, 0x6c,
	  0x20, 0x74, 0x68, 0x65, 0x73, 0x69, 0x74, 0x65, 0x6d, 0x61, 0x70, 0x65, 0x6e,
	  0x67, 0x6c, 0x69, 0x73, 0x68, 0x77, 0x61, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x20,
	  0x41, 0x75, 0x67, 0x75, 0x73, 0x74, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73,
	  0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x72,
	  0x73, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x61, 0x67, 0x61, 0x69, 0x6e,
	  0x73, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x7d, 0x29, 0x28, 0x29,
	  0x3b, 0x0d, 0x0a, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x74, 0x72, 0x6f,
	  0x75, 0x62, 0x6c, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x63, 0x6f,
	  0x6d, 0x70, 0x61, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x70,
	  0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73,
	  0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x20, 0x27, 0x27, 0x54, 0x68, 0x65,
	  0x20, 0x77, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x65, 0x78, 0x70, 0x6c, 0x6f,
	  0x72, 0x65, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x64, 0x47, 0x61, 0x6c, 0x6c,
	  0x65, 0x72, 0x79, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x61, 0x62, 0x69,
	  0x6c, 0x69, 0x74, 0x79, 0x65, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x63, 0x61,
	  0x72, 0x65, 0x65, 0x72, 0x73, 0x29, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x20, 0x63,
	  0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x20,
	  0x61, 0x6e, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x65, 0x78, 0x69, 0x73, 0x74, 0x65,
	  0x64, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x20, 0x68, 0x61, 0x6e, 0x64, 0x6c,
	  0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x65, 0x64, 0x63, 0x6f, 0x6e, 0x73,
	  0x6f, 0x6c, 0x65, 0x45, 0x61, 0x73, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x78, 0x70,
	  0x6f, 0x72, 0x74, 0x73, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x43, 0x68,
	  0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x69, 0x6c, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x6e,
	  0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74,
	  0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e,
	  0x67, 0x2e, 0x68, 0x74, 0x6d, 0x6c, 0x22, 0x3e, 0x73, 0x65, 0x74, 0x74, 0x6c,
	  0x65, 0x64, 0x77, 0x65, 0x73, 0x74, 0x65, 0x72, 0x6e, 0x63, 0x61, 0x75, 0x73,
	  0x69, 0x6e, 0x67, 0x2d, 0x77, 0x65, 0x62, 0x6b, 0x69, 0x74, 0x63, 0x6c, 0x61,
	  0x69, 0x6d, 0x65, 0x64, 0x4a, 0x75, 0x73, 0x74, 0x69, 0x63, 0x65, 0x63, 0x68,
	  0x61, 0x70, 0x74, 0x65, 0x72, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6d, 0x73, 0x54,
	  0x68, 0x6f, 0x6d, 0x61, 0x73, 0x20, 0x6d, 0x6f, 0x7a, 0x69, 0x6c, 0x6c, 0x61,
	  0x70, 0x72, 0x6f, 0x6d, 0x69, 0x73, 0x65, 0x70, 0x61, 0x72, 0x74, 0x69, 0x65,
	  0x73, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x6f, 0x75, 0x74, 0x73, 0x69,
	  0x64, 0x65, 0x3a, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x2c, 0x68, 0x75, 0x6e, 0x64,
	  0x72, 0x65, 0x64, 0x4f, 0x6c, 0x79, 0x6d, 0x70, 0x69, 0x63, 0x5f, 0x62, 0x75,
	  0x74, 0x74, 0x6f, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x73, 0x72, 0x65,
	  0x61, 0x63, 0x68, 0x65, 0x64, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x64,
	  0x65, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	  0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x61, 0x64, 0x6f, 0x70, 0x74, 0x65,
	  0x64, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x65, 0x69, 0x74, 0x68,
	  0x65, 0x72, 0x67, 0x72, 0x65, 0x61, 0x74, 0x6c, 0x79, 0x67, 0x72, 0x65, 0x61,
	  0x74, 0x65, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x69, 0x6d, 0x70,
	  0x72, 0x6f, 0x76, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x70,
	  0x65, 0x63, 0x69, 0x61, 0x6c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x77,
	  0x6f, 0x72, 0x73, 0x68, 0x69, 0x70, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	  0x74, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73,
	  0x74, 0x69, 0x6e, 0x73, 0x74, 0x65, 0x61, 0x64, 0x75, 0x74, 0x69, 0x6c, 0x69,
	  0x74, 0x79, 0x71, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x43, 0x75, 0x6c, 0x74,
	  0x75, 0x72, 0x65, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x63, 0x6c, 0x65,
	  0x61, 0x72, 0x6c, 0x79, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x42, 0x72,
	  0x6f, 0x77, 0x73, 0x65, 0x72, 0x6c, 0x69, 0x62, 0x65, 0x72, 0x61, 0x6c, 0x7d,
	  0x20, 0x63, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	  0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x68, 0x69, 0x64, 0x65, 0x28, 0x29,
	  0x3b, 0x46, 0x6c, 0x6f, 0x72, 0x69, 0x64, 0x61, 0x61, 0x6e, 0x73, 0x77, 0x65,
	  0x72, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x45, 0x6d, 0x70, 0x65,
	  0x72, 0x6f, 0x72, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x65, 0x72,
	  0x69, 0x6f, 0x75, 0x73, 0x66, 0x72, 0x65, 0x65, 0x64, 0x6f, 0x6d, 0x53, 0x65,
	  0x76, 0x65, 0x72, 0x61, 0x6c, 0x2d, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x46,
	  0x75, 0x72, 0x74, 0x68, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x20, 0x6f, 0x66, 0x20,
	  0x21, 0x3d, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x65,
	  0x64, 0x44, 0x65, 0x6e, 0x6d, 0x61, 0x72, 0x6b, 0x76, 0x6f, 0x69, 0x64, 0x28,
	  0x30, 0x29, 0x2f, 0x61, 0x6c, 0x6c, 0x2e, 0x6a, 0x73, 0x70, 0x72, 0x65, 0x76,
	  0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x65,
	  0x70, 0x68, 0x65, 0x6e, 0x0a, 0x0a, 0x57, 0x68, 0x65, 0x6e, 0x20, 0x6f, 0x62,
	  0x73, 0x65, 0x72, 0x76, 0x65, 0x3c, 0x2f, 0x68, 0x32, 0x3e, 0x0d, 0x0a, 0x4d,
	  0x6f, 0x64, 0x65, 0x72, 0x6e, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	  0x22, 0x20, 0x61, 0x6c, 0x74, 0x3d, 0x22, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72,
	  0x73, 0x2e, 0x0a, 0x0a, 0x46, 0x6f, 0x72, 0x20, 0x0a, 0x0a, 0x4d, 0x61, 0x6e,
	  0x79, 0x20, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x70, 0x6f, 0x77, 0x65,
	  0x72, 0x65, 0x64, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x66, 0x69, 0x63,
	  0x74, 0x69, 0x6f, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x20, 0x6f, 0x66, 0x6d, 0x65,
	  0x64, 0x69, 0x63, 0x61, 0x6c, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x6f,
	  0x70, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x63, 0x69, 0x6c,
	  0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x6a, 0x75, 0x73, 0x74, 0x69, 0x63,
	  0x65, 0x47, 0x65, 0x6f, 0x72, 0x67, 0x65, 0x20, 0x42, 0x65, 0x6c, 0x67, 0x69,
	  0x75, 0x6d, 0x2e, 0x2e, 0x2e, 0x3c, 0x2f, 0x61, 0x3e, 0x74, 0x77, 0x69, 0x74,
	  0x74, 0x65, 0x72, 0x6e, 0x6f, 0x74, 0x61, 0x62, 0x6c, 0x79, 0x77, 0x61, 0x69,
	  0x74, 0x69, 0x6e, 0x67, 0x77, 0x61, 0x72, 0x66, 0x61, 0x72, 0x65, 0x20, 0x4f,
	  0x74, 0x68, 0x65, 0x72, 0x20, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x70,
	  0x68, 0x72, 0x61, 0x73, 0x65, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	  0x73, 0x75, 0x72, 0x76, 0x69, 0x76, 0x65, 0x73, 0x63, 0x68, 0x6f, 0x6c, 0x61,
	  0x72, 0x3c, 0x2f, 0x70, 0x3e, 0x0d, 0x0a, 0x20, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	  0x72, 0x79, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x6c, 0x6f, 0x73, 0x73,
	  0x20, 0x6f, 0x66, 0x6a, 0x75, 0x73, 0x74, 0x20, 0x61, 0x73, 0x47, 0x65, 0x6f,
	  0x72, 0x67, 0x69, 0x61, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x3c, 0x68,
	  0x65, 0x61, 0x64, 0x3e, 0x3c, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x31,
	  0x27, 0x5d, 0x29, 0x3b, 0x0d, 0x0a, 0x69, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x73,
	  0x6e, 0x6f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72,
	  0x3a, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x63, 0x61, 0x72, 0x72, 0x69,
	  0x65, 0x64, 0x31, 0x30, 0x30, 0x2c, 0x30, 0x30, 0x30, 0x3c, 0x2f, 0x68, 0x33,
	  0x3e, 0x0a, 0x20, 0x73, 0x65, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x62, 0x65, 0x63,
	  0x6f, 0x6d, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x20, 0x77, 0x65,
	  0x64, 0x64, 0x69, 0x6e, 0x67, 0x30, 0x30, 0x2e, 0x68, 0x74, 0x6d, 0x6c, 0x6d,
	  0x6f, 0x6e, 0x61, 0x72, 0x63, 0x68, 0x6f, 0x66, 0x66, 0x20, 0x74, 0x68, 0x65,
	  0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x79,
	  0x20, 0x62, 0x69, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x6c, 0x69, 0x66, 0x65, 0x20,
	  0x6f, 0x66, 0x6f, 0x72, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x72, 0x69, 0x73, 0x65,
	  0x20, 0x6f, 0x66, 0x26, 0x72, 0x61, 0x71, 0x75, 0x6f, 0x3b, 0x70, 0x6c, 0x75,
	  0x73, 0x6f, 0x6e, 0x65, 0x68, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x28, 0x74,
	  0x68, 0x6f, 0x75, 0x67, 0x68, 0x44, 0x6f, 0x75, 0x67, 0x6c, 0x61, 0x73, 0x6a,
	  0x6f, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x73,
	  0x46, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x41, 0x6e, 0x63, 0x69, 0x65, 0x6e,
	  0x74, 0x56, 0x69, 0x65, 0x74, 0x6e, 0x61, 0x6d, 0x76, 0x65, 0x68, 0x69, 0x63,
	  0x6c, 0x65, 0x73, 0x75, 0x63, 0x68, 0x20, 0x61, 0x73, 0x63, 0x72, 0x79, 0x73,
	  0x74, 0x61, 0x6c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x3d, 0x57, 0x69, 0x6e,
	  0x64, 0x6f, 0x77, 0x73, 0x65, 0x6e, 0x6a, 0x6f, 0x79, 0x65, 0x64, 0x61, 0x20,
	  0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x61, 0x73, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x3c,
	  0x61, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e,
	  0x20, 0x41, 0x6c, 0x6c, 0x20, 0x72, 0x69, 0x68, 0x6f, 0x77, 0x20, 0x74, 0x68,
	  0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x72, 0x65, 0x74, 0x69, 0x72,
	  0x65, 0x64, 0x68, 0x6f, 0x77, 0x65, 0x76, 0x65, 0x72, 0x68, 0x69, 0x64, 0x64,
	  0x65, 0x6e, 0x3b, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x73, 0x73, 0x65, 0x65,
	  0x6b, 0x69, 0x6e, 0x67, 0x63, 0x61, 0x62, 0x69, 0x6e, 0x65, 0x74, 0x77, 0x61,
	  0x73, 0x20, 0x6e, 0x6f, 0x74, 0x6c, 0x6f, 0x6f, 0x6b, 0x20, 0x61, 0x74, 0x63,
	  0x6f, 0x6e, 0x64, 0x75, 0x63, 0x74, 0x67, 0x65, 0x74, 0x20, 0x74, 0x68, 0x65,
	  0x4a, 0x61, 0x6e, 0x75, 0x61, 0x72, 0x79, 0x68, 0x61, 0x70, 0x70, 0x65, 0x6e,
	  0x73, 0x74, 0x75, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x61, 0x3a, 0x68, 0x6f, 0x76,
	  0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x20, 0x46, 0x72, 0x65, 0x6e,
	  0x63, 0x68, 0x20, 0x6c, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x74, 0x79, 0x70,
	  0x69, 0x63, 0x61, 0x6c, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x6e,
	  0x65, 0x6d, 0x69, 0x65, 0x73, 0x65, 0x76, 0x65, 0x6e, 0x20, 0x69, 0x66, 0x67,
	  0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x64, 0x65, 0x63, 0x69, 0x64, 0x65, 0x64,
	  0x61, 0x72, 0x65, 0x20, 0x6e, 0x6f, 0x74, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63,
	  0x68, 0x62, 0x65, 0x6c, 0x69, 0x65, 0x66, 0x73, 0x2d, 0x69, 0x6d, 0x61, 0x67,
	  0x65, 0x3a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x73, 0x74, 0x61, 0x74,
	  0x69, 0x63, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x22, 0x3e, 0x63, 0x6f, 0x6e,
	  0x76, 0x65, 0x72, 0x74, 0x76, 0x69, 0x6f, 0x6c, 0x65, 0x6e, 0x74, 0x65, 0x6e,
	  0x74, 0x65, 0x72, 0x65, 0x64, 0x66, 0x69, 0x72, 0x73, 0x74, 0x22, 0x3e, 0x63,
	  0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x46, 0x69, 0x6e, 0x6c, 0x61, 0x6e, 0x64,
	  0x63, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x74, 0x73, 0x68, 0x65, 0x20, 0x77, 0x61,
	  0x73, 0x31, 0x30, 0x70, 0x78, 0x3b, 0x22, 0x3e, 0x61, 0x73, 0x20, 0x73, 0x75,
	  0x63, 0x68, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x64, 0x3c, 0x2f, 0x73, 0x70,
	  0x61, 0x6e, 0x3e, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x6c, 0x69, 0x6e,
	  0x65, 0x20, 0x6f, 0x66, 0x61, 0x20, 0x67, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x79,
	  0x73, 0x74, 0x65, 0x72, 0x79, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x66,
	  0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x64, 0x75, 0x65, 0x20, 0x74, 0x6f, 0x20,
	  0x72, 0x61, 0x69, 0x6c, 0x77, 0x61, 0x79, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x67,
	  0x65, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x64, 0x65, 0x73, 0x63, 0x65,
	  0x6e, 0x74, 0x69, 0x74, 0x20, 0x77, 0x69, 0x74, 0x68, 0x6e, 0x75, 0x63, 0x6c,
	  0x65, 0x61, 0x72, 0x4a, 0x65, 0x77, 0x69, 0x73, 0x68, 0x20, 0x70, 0x72, 0x6f,
	  0x74, 0x65, 0x73, 0x74, 0x42, 0x72, 0x69, 0x74, 0x69, 0x73, 0x68, 0x66, 0x6c,
	  0x6f, 0x77, 0x65, 0x72, 0x73, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x72,
	  0x65, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x20,
	  0x77, 0x68, 0x6f, 0x20, 0x77, 0x61, 0x73, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72,
	  0x65, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x75, 0x69, 0x63, 0x69,
	  0x64, 0x65, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x70, 0x65, 0x72, 0x69,
	  0x6f, 0x64, 0x73, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x53, 0x6f, 0x63,
	  0x69, 0x61, 0x6c, 0x20, 0x66, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x63, 0x6f,
	  0x6d, 0x62, 0x69, 0x6e, 0x65, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x77,
	  0x69, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x3c, 0x62, 0x72, 0x20, 0x2f, 0x3e, 0x3c,
	  0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4e, 0x61, 0x74, 0x75, 0x72, 0x61,
	  0x6c, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x63, 0x6f, 0x6f, 0x6b, 0x69,
	  0x65, 0x73, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x72, 0x65, 0x73, 0x6f,
	  0x6c, 0x76, 0x65, 0x53, 0x77, 0x65, 0x64, 0x69, 0x73, 0x68, 0x62, 0x72, 0x69,
	  0x65, 0x66, 0x6c, 0x79, 0x50, 0x65, 0x72, 0x73, 0x69, 0x61, 0x6e, 0x73, 0x6f,
	  0x20, 0x6d, 0x75, 0x63, 0x68, 0x43, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x79, 0x64,
	  0x65, 0x70, 0x69, 0x63, 0x74, 0x73, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73,
	  0x68, 0x6f, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	  0x73, 0x6e, 0x65, 0x78, 0x74, 0x20, 0x74, 0x6f, 0x62, 0x65, 0x61, 0x72, 0x69,
	  0x6e, 0x67, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x76, 0x69,
	  0x73, 0x65, 0x64, 0x6a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x28, 0x2d, 0x77, 0x69,
	  0x64, 0x74, 0x68, 0x3a, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x3e, 0x74, 0x6f,
	  0x6f, 0x6c, 0x74, 0x69, 0x70, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x64,
	  0x65, 0x73, 0x69, 0x67, 0x6e, 0x73, 0x54, 0x75, 0x72, 0x6b, 0x69, 0x73, 0x68,
	  0x79, 0x6f, 0x75, 0x6e, 0x67, 0x65, 0x72, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68,
	  0x28, 0x7d, 0x29, 0x28, 0x29, 0x3b, 0x0a, 0x0a, 0x62, 0x75, 0x72, 0x6e, 0x69,
	  0x6e, 0x67, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x65, 0x67, 0x72,
	  0x65, 0x65, 0x73, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x3d, 0x52, 0x69, 0x63,
	  0x68, 0x61, 0x72, 0x64, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x6c, 0x79, 0x70, 0x6c,
	  0x61, 0x73, 0x74, 0x69, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x3c,
	  0x2f, 0x74, 0x72, 0x3e, 0x0d, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3a, 0x23,
	  0x75, 0x6c, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x70, 0x6f, 0x73, 0x73, 0x65, 0x73,
	  0x73, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x70, 0x68, 0x79, 0x73, 0x69,
	  0x63, 0x73, 0x66, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x65, 0x78, 0x65, 0x63,
	  0x75, 0x74, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x6c, 0x69, 0x6e,
	  0x6b, 0x20, 0x74, 0x6f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3c, 0x62,
	  0x72, 0x20, 0x2f, 0x3e, 0x0a, 0x3a, 0x20, 0x74, 0x72, 0x75, 0x65, 0x2c, 0x63,
	  0x68, 0x61, 0x72, 0x74, 0x65, 0x72, 0x74, 0x6f, 0x75, 0x72, 0x69, 0x73, 0x6d,
	  0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x63, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x65,
	  0x64, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x3c, 0x2f, 0x68, 0x31, 0x3e,
	  0x0d, 0x0a, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x3f, 0x78, 0x6d, 0x6c,
	  0x20, 0x76, 0x65, 0x68, 0x65, 0x6c, 0x70, 0x69, 0x6e, 0x67, 0x64, 0x69, 0x61,
	  0x6d, 0x6f, 0x6e, 0x64, 0x75, 0x73, 0x65, 0x20, 0x74, 0x68, 0x65, 0x61, 0x69,
	  0x72, 0x6c, 0x69, 0x6e, 0x65, 0x65, 0x6e, 0x64, 0x20, 0x2d, 0x2d, 0x3e, 0x29,
	  0x2e, 0x61, 0x74, 0x74, 0x72, 0x28, 0x72, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	  0x68, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x23, 0x66, 0x66, 0x66, 0x66, 0x66,
	  0x66, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x56, 0x69, 0x6e, 0x63, 0x65,
	  0x6e, 0x74, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x20, 0x73, 0x72, 0x63,
	  0x3d, 0x22, 0x2f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x64, 0x65, 0x73,
	  0x70, 0x69, 0x74, 0x65, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x74, 0x65,
	  0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x20, 0x68,
	  0x65, 0x6c, 0x64, 0x20, 0x69, 0x6e, 0x4a, 0x6f, 0x73, 0x65, 0x70, 0x68, 0x20,
	  0x74, 0x68, 0x65, 0x61, 0x74, 0x72, 0x65, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74,
	  0x73, 0x3c, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3e, 0x61, 0x20, 0x6c, 0x61, 0x72,
	  0x67, 0x65, 0x64, 0x6f, 0x65, 0x73, 0x6e, 0x27, 0x74, 0x6c, 0x61, 0x74, 0x65,
	  0x72, 0x2c, 0x20, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x66, 0x61, 0x76,
	  0x69, 0x63, 0x6f, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x75,
	  0x6e, 0x67, 0x61, 0x72, 0x79, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73,
	  0x65, 0x65, 0x20, 0x74, 0x68, 0x65, 0x73, 0x6f, 0x20, 0x74, 0x68, 0x61, 0x74,
	  0x4d, 0x69, 0x63, 0x68, 0x61, 0x65, 0x6c, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	  0x73, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x2c, 0x20, 0x61, 0x6e,
	  0x64, 0x20, 0x20, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3d, 0x65, 0x26, 0x71, 0x75,
	  0x6f, 0x74, 0x3b, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x66,
	  0x74, 0x22, 0x3e, 0x0a, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x73, 0x47, 0x6f,
	  0x6c, 0x64, 0x65, 0x6e, 0x20, 0x41, 0x66, 0x66, 0x61, 0x69, 0x72, 0x73, 0x67,
	  0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x69, 0x6e, 0x67,
	  0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x69, 0x64, 0x65, 0x61, 0x20, 0x6f,
	  0x66, 0x63, 0x61, 0x73, 0x65, 0x20, 0x6f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x73,
	  0x74, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x2e, 0x73, 0x72, 0x63,
	  0x20, 0x3d, 0x20, 0x63, 0x61, 0x72, 0x74, 0x6f, 0x6f, 0x6e, 0x72, 0x65, 0x67,
	  0x69, 0x73, 0x74, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x4d, 0x75,
	  0x73, 0x6c, 0x69, 0x6d, 0x73, 0x57, 0x68, 0x61, 0x74, 0x20, 0x69, 0x73, 0x69,
	  0x6e, 0x20, 0x6d, 0x61, 0x6e, 0x79, 0x6d, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67,
	  0x72, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x65, 0x64,
	  0x2c, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x2f, 0x73, 0x68, 0x6f, 0x77,
	  0x5f, 0x61, 0x6f, 0x75, 0x74, 0x64, 0x6f, 0x6f, 0x72, 0x65, 0x73, 0x63, 0x61,
	  0x70, 0x65, 0x28, 0x41, 0x75, 0x73, 0x74, 0x72, 0x69, 0x61, 0x67, 0x65, 0x6e,
	  0x65, 0x74, 0x69, 0x63, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2c, 0x49, 0x6e,
	  0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x69, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x48,
	  0x65, 0x20, 0x61, 0x6c, 0x73, 0x6f, 0x49, 0x73, 0x6c, 0x61, 0x6e, 0x64, 0x73,
	  0x41, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x79, 0x0a, 0x09, 0x09, 0x3c, 0x21, 0x2d,
	  0x2d, 0x44, 0x61, 0x6e, 0x69, 0x65, 0x6c, 0x20, 0x62, 0x69, 0x6e, 0x64, 0x69,
	  0x6e, 0x67, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x3e, 0x69, 0x6d, 0x70, 0x6f,
	  0x73, 0x65, 0x64, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x41, 0x62, 0x72,
	  0x61, 0x68, 0x61, 0x6d, 0x28, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x7b, 0x77,
	  0x69, 0x64, 0x74, 0x68, 0x3a, 0x70, 0x75, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x29,
	  0x2e, 0x68, 0x74, 0x6d, 0x6c, 0x28, 0x7c, 0x7c, 0x20, 0x5b, 0x5d, 0x3b, 0x0a,
	  0x44, 0x41, 0x54, 0x41, 0x5b, 0x20, 0x2a, 0x6b, 0x69, 0x74, 0x63, 0x68, 0x65,
	  0x6e, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x64, 0x61, 0x63, 0x74, 0x75, 0x61,
	  0x6c, 0x20, 0x64, 0x69, 0x61, 0x6c, 0x65, 0x63, 0x74, 0x6d, 0x61, 0x69, 0x6e,
	  0x6c, 0x79, 0x20, 0x5f, 0x62, 0x6c, 0x61, 0x6e, 0x6b, 0x27, 0x69, 0x6e, 0x73,
	  0x74, 0x61, 0x6c, 0x6c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x74, 0x73, 0x69, 0x66,
	  0x28, 0x74, 0x79, 0x70, 0x65, 0x49, 0x74, 0x20, 0x61, 0x6c, 0x73, 0x6f, 0x26,
	  0x63, 0x6f, 0x70, 0x79, 0x3b, 0x20, 0x22, 0x3e, 0x54, 0x65, 0x72, 0x6d, 0x73,
	  0x62, 0x6f, 0x72, 0x6e, 0x20, 0x69, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	  0x73, 0x65, 0x61, 0x73, 0x74, 0x65, 0x72, 0x6e, 0x74, 0x61, 0x6c, 0x6b, 0x69,
	  0x6e, 0x67, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x72, 0x6e, 0x67, 0x61, 0x69, 0x6e,
	  0x65, 0x64, 0x20, 0x6f, 0x6e, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x6a, 0x75, 0x73,
	  0x74, 0x69, 0x66, 0x79, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x73, 0x66, 0x61,
	  0x63, 0x74, 0x6f, 0x72, 0x79, 0x69, 0x74, 0x73, 0x20, 0x6f, 0x77, 0x6e, 0x61,
	  0x73, 0x73, 0x61, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64,
	  0x6c, 0x61, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x68, 0x69, 0x73, 0x20, 0x6f, 0x77,
	  0x6e, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x2f, 0x22, 0x20, 0x72, 0x65, 0x6c,
	  0x3d, 0x22, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x63, 0x6f, 0x6e, 0x63,
	  0x65, 0x72, 0x74, 0x64, 0x69, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x64, 0x6f, 0x6c,
	  0x6c, 0x61, 0x72, 0x73, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x70, 0x68,
	  0x70, 0x3f, 0x69, 0x64, 0x3d, 0x61, 0x6c, 0x63, 0x6f, 0x68, 0x6f, 0x6c, 0x29,
	  0x3b, 0x7d, 0x29, 0x28, 0x29, 0x3b, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x61,
	  0x3e, 0x3c, 0x73, 0x70, 0x61, 0x6e, 0x3e, 0x76, 0x65, 0x73, 0x73, 0x65, 0x6c,
	  0x73, 0x72, 0x65, 0x76, 0x69, 0x76, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65,
	  0x73, 0x73, 0x61, 0x6d, 0x61, 0x74, 0x65, 0x75, 0x72, 0x61, 0x6e, 0x64, 0x72,
	  0x6f, 0x69, 0x64, 0x61, 0x6c, 0x6c, 0x65, 0x67, 0x65, 0x64, 0x69, 0x6c, 0x6c,
	  0x6e, 0x65, 0x73, 0x73, 0x77, 0x61, 0x6c, 0x6b, 0x69, 0x6e, 0x67, 0x63, 0x65,
	  0x6e, 0x74, 0x65, 0x72, 0x73, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x79, 0x6d,
	  0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64,
	  0x65, 0x78, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73,
	  0x65, 0x64, 0x69, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x0a, 0x09, 0x3c, 0x21, 0x2d,
	  0x2d, 0x20, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x73, 0x6c, 0x69, 0x6e, 0x6b,
	  0x69, 0x6e, 0x67, 0x4c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x20, 0x42, 0x6f, 0x6f,
	  0x6b, 0x20, 0x6f, 0x66, 0x65, 0x76, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x6d, 0x69,
	  0x6e, 0x2e, 0x6a, 0x73, 0x3f, 0x61, 0x72, 0x65, 0x20, 0x74, 0x68, 0x65, 0x6b,
	  0x6f, 0x6e, 0x74, 0x61, 0x6b, 0x74, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x27, 0x73,
	  0x2e, 0x68, 0x74, 0x6d, 0x6c, 0x22, 0x20, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	  0x3d, 0x77, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x6c, 0x20, 0x52,
	  0x69, 0x67, 0x3b, 0x0a, 0x7d, 0x29, 0x28, 0x29, 0x3b, 0x72, 0x61, 0x69, 0x73,
	  0x69, 0x6e, 0x67, 0x20, 0x41, 0x6c, 0x73, 0x6f, 0x2c, 0x20, 0x63, 0x72, 0x75,
	  0x63, 0x69, 0x61, 0x6c, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x22, 0x3e, 0x64, 0x65,
	  0x63, 0x6c, 0x61, 0x72, 0x65, 0x2d, 0x2d, 0x3e, 0x0a, 0x3c, 0x73, 0x63, 0x66,
	  0x69, 0x72, 0x65, 0x66, 0x6f, 0x78, 0x61, 0x73, 0x20, 0x6d, 0x75, 0x63, 0x68,
	  0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2c,
	  0x20, 0x73, 0x2c, 0x20, 0x62, 0x75, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20,
	  0x3d, 0x20, 0x0a, 0x0d, 0x0a, 0x3c, 0x21, 0x2d, 0x2d, 0x74, 0x6f, 0x77, 0x61,
	  0x72, 0x64, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x50, 0x72, 0x69,
	  0x76, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x50, 0x72,
	  0x65, 0x6d, 0x69, 0x65, 0x72, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x56,
	  0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73,
	  0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x65,
	  0x64, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x3b, 0x70, 0x6f, 0x76, 0x65, 0x72,
	  0x74, 0x79, 0x63, 0x68, 0x61, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x69,
	  0x6e, 0x67, 0x20, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x41, 0x6e, 0x74,
	  0x68, 0x6f, 0x6e, 0x79, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x22, 0x20, 0x52, 0x65,
	  0x6c, 0x61, 0x74, 0x65, 0x64, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x72,
	  0x65, 0x61, 0x63, 0x68, 0x65, 0x73, 0x63, 0x75, 0x74, 0x74, 0x69, 0x6e, 0x67,
	  0x67, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x6c, 0x69, 0x66, 0x65, 0x20, 0x69,
	  0x6e, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2d, 0x73, 0x68, 0x61, 0x64,
	  0x6f, 0x77, 0x4e, 0x6f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x3c, 0x2f, 0x74, 0x64,
	  0x3e, 0x0d, 0x0a, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x74, 0x61,
	  0x64, 0x69, 0x75, 0x6d, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x76, 0x61,
	  0x72, 0x79, 0x69, 0x6e, 0x67, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x73, 0x68,
	  0x65, 0x6c, 0x64, 0x20, 0x62, 0x79, 0x77, 0x68, 0x6f, 0x20, 0x61, 0x72, 0x65,
	  0x77, 0x6f, 0x72, 0x6b, 0x20, 0x69, 0x6e, 0x66, 0x61, 0x63, 0x75, 0x6c, 0x74,
	  0x79, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x77, 0x68, 0x6f, 0x20, 0x68,
	  0x61, 0x64, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x74, 0x6f, 0x77, 0x6e,
	  0x20, 0x6f, 0x66, 0x0a, 0x0a, 0x53, 0x6f, 0x6d, 0x65, 0x20, 0x27, 0x63, 0x6c,
	  0x69, 0x63, 0x6b, 0x27, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x6b, 0x65,
	  0x79, 0x77, 0x6f, 0x72, 0x64, 0x69, 0x74, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x63,
	  0x69, 0x74, 0x79, 0x20, 0x6f, 0x66, 0x28, 0x74, 0x68, 0x69, 0x73, 0x29, 0x3b,
	  0x41, 0x6e, 0x64, 0x72, 0x65, 0x77, 0x20, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65,
	  0x20, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x6f, 0x72, 0x20, 0x6d, 0x6f,
	  0x72, 0x65, 0x33, 0x30, 0x30, 0x70, 0x78, 0x3b, 0x20, 0x72, 0x65, 0x74, 0x75,
	  0x72, 0x6e, 0x3b, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3d, 0x22, 0x70, 0x6c, 0x75,
	  0x67, 0x69, 0x6e, 0x73, 0x77, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x20, 0x68, 0x65,
	  0x72, 0x73, 0x65, 0x6c, 0x66, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	  0x65, 0x64, 0x65, 0x72, 0x61, 0x6c, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65,
	  0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x73, 0x65, 0x6e, 0x74, 0x20, 0x74,
	  0x6f, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x63, 0x74, 0x72, 0x65,
	  0x73, 0x73, 0x63, 0x6f, 0x6d, 0x65, 0x20, 0x74, 0x6f, 0x66, 0x69, 0x6e, 0x67,
	  0x65, 0x72, 0x73, 0x44, 0x75, 0x6b, 0x65, 0x20, 0x6f, 0x66, 0x70, 0x65, 0x6f,
	  0x70, 0x6c, 0x65, 0x2c, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x69, 0x74, 0x77, 0x68,
	  0x61, 0x74, 0x20, 0x69, 0x73, 0x68, 0x61, 0x72, 0x6d, 0x6f, 0x6e, 0x79, 0x61,
	  0x20, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x22, 0x3a, 0x22, 0x68, 0x74, 0x74, 0x70,
	  0x69, 0x6e, 0x20, 0x68, 0x69, 0x73, 0x20, 0x6d, 0x65, 0x6e, 0x75, 0x22, 0x3e,
	  0x0a, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x6f, 0x66, 0x66, 0x69, 0x63,
	  0x65, 0x72, 0x63, 0x6f, 0x75, 0x6e, 0x63, 0x69, 0x6c, 0x67, 0x61, 0x69, 0x6e,
	  0x69, 0x6e, 0x67, 0x65, 0x76, 0x65, 0x6e, 0x20, 0x69, 0x6e, 0x53, 0x75, 0x6d,
	  0x6d, 0x61, 0x72, 0x79, 0x64, 0x61, 0x74, 0x65, 0x20, 0x6f, 0x66, 0x6c, 0x6f,
	  0x79, 0x61, 0x6c, 0x74, 0x79, 0x66, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x61,
	  0x6e, 0x64, 0x20, 0x77, 0x61, 0x73, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x6f, 0x72,
	  0x73, 0x75, 0x70, 0x72, 0x65, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	  0x20, 0x68, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x73, 0x73, 0x69,
	  0x61, 0x6e, 0x6c, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x41, 0x6c, 0x62, 0x65,
	  0x72, 0x74, 0x61, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x73, 0x65, 0x74,
	  0x20, 0x6f, 0x66, 0x20, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x22, 0x3e, 0x2e, 0x61,
	  0x70, 0x70, 0x65, 0x6e, 0x64, 0x64, 0x6f, 0x20, 0x77, 0x69, 0x74, 0x68, 0x66,
	  0x65, 0x64, 0x65, 0x72, 0x61, 0x6c, 0x62, 0x61, 0x6e, 0x6b, 0x20, 0x6f, 0x66,
	  0x62, 0x65, 0x6e, 0x65, 0x61, 0x74, 0x68, 0x44, 0x65, 0x73, 0x70, 0x69, 0x74,
	  0x65, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	  0x64, 0x73, 0x29, 0x2c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x70, 0x65, 0x72, 0x63,
	  0x65, 0x6e, 0x74, 0x69, 0x74, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x63, 0x6c, 0x6f,
	  0x73, 0x69, 0x6e, 0x67, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x49, 0x6e,
	  0x73, 0x74, 0x65, 0x61, 0x64, 0x66, 0x69, 0x66, 0x74, 0x65, 0x65, 0x6e, 0x61,
	  0x73, 0x20, 0x77, 0x65, 0x6c, 0x6c, 0x2e, 0x79, 0x61, 0x68, 0x6f, 0x6f, 0x2e,
	  0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x66, 0x69, 0x67, 0x68, 0x74, 0x65,
	  0x72, 0x6f, 0x62, 0x73, 0x63, 0x75, 0x72, 0x65, 0x72, 0x65, 0x66, 0x6c, 0x65,
	  0x63, 0x74, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x63, 0x3d, 0x20, 0x4d, 0x61,
	  0x74, 0x68, 0x2e, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x6f, 0x6e, 0x6c,
	  0x69, 0x6e, 0x65, 0x20, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x61, 0x20,
	  0x77, 0x68, 0x6f, 0x6c, 0x65, 0x6f, 0x6e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x79,
	  0x65, 0x61, 0x72, 0x20, 0x6f, 0x66, 0x65, 0x6e, 0x64, 0x20, 0x6f, 0x66, 0x20,
	  0x62, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x69,
	  0x74, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x20, 0x68, 0x6f, 0x6d, 0x65, 0x20,
	  0x6f, 0x66, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x72, 0x65, 0x6e, 0x61,
	  0x6d, 0x65, 0x64, 0x73, 0x74, 0x72, 0x6f, 0x6e, 0x67, 0x3e, 0x68, 0x65, 0x61,
	  0x74, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x63, 0x6c,
	  0x6f, 0x75, 0x64, 0x66, 0x72, 0x77, 0x61, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x4d,
	  0x61, 0x72, 0x63, 0x68, 0x20, 0x31, 0x6b, 0x6e, 0x6f, 0x77, 0x69, 0x6e, 0x67,
	  0x69, 0x6e, 0x20, 0x70, 0x61, 0x72, 0x74, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65,
	  0x6e, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x73, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	  0x73, 0x74, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x6b,
	  0x73, 0x22, 0x3e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x65, 0x64, 0x45, 0x4e, 0x44,
	  0x20, 0x2d, 0x2d, 0x3e, 0x66, 0x61, 0x6d, 0x6f, 0x75, 0x73, 0x20, 0x61, 0x77,
	  0x61, 0x72, 0x64, 0x65, 0x64, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x48,
	  0x65, 0x61, 0x6c, 0x74, 0x68, 0x20, 0x66, 0x61, 0x69, 0x72, 0x6c, 0x79, 0x20,
	  0x77, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x61,
	  0x6c, 0x41, 0x66, 0x72, 0x69, 0x63, 0x61, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x65,
	  0x74, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x3e, 0x73, 0x69, 0x6e, 0x67,
	  0x69, 0x6e, 0x67, 0x66, 0x61, 0x72, 0x6d, 0x65, 0x72, 0x73, 0x42, 0x72, 0x61,
	  0x73, 0x69, 0x6c, 0x29, 0x64, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x72, 0x65,
	  0x70, 0x6c, 0x61, 0x63, 0x65, 0x47, 0x72, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x66,
	  0x6f, 0x6e, 0x74, 0x20, 0x63, 0x6f, 0x70, 0x75, 0x72, 0x73, 0x75, 0x65, 0x64,
	  0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x73, 0x6d, 0x61, 0x6b, 0x65, 0x20, 0x75,
	  0x70, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x62, 0x6f, 0x74, 0x68, 0x20,
	  0x6f, 0x66, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x73, 0x61, 0x77, 0x20,
	  0x74, 0x68, 0x65, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x73, 0x63, 0x6f, 0x6c,
	  0x6f, 0x75, 0x72, 0x73, 0x69, 0x66, 0x28, 0x64, 0x6f, 0x63, 0x75, 0x77, 0x68,
	  0x65, 0x6e, 0x20, 0x68, 0x65, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x70,
	  0x75, 0x73, 0x68, 0x28, 0x66, 0x75, 0x41, 0x75, 0x67, 0x75, 0x73, 0x74, 0x20,
	  0x55, 0x54, 0x46, 0x2d, 0x38, 0x22, 0x3e, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73,
	  0x79, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x6a, 0x75, 0x72,
	  0x65, 0x64, 0x55, 0x73, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x66, 0x61, 0x72, 0x6d,
	  0x69, 0x6e, 0x67, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x6f, 0x62, 0x6a,
	  0x65, 0x63, 0x74, 0x20, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x75, 0x73,
	  0x65, 0x20, 0x6f, 0x66, 0x20, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x3c,
	  0x62, 0x6f, 0x64, 0x79, 0x3e, 0x0a, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x74,
	  0x62, 0x65, 0x20, 0x75, 0x73, 0x65, 0x64, 0x6b, 0x65, 0x79, 0x43, 0x6f, 0x64,
	  0x65, 0x73, 0x69, 0x78, 0x74, 0x65, 0x65, 0x6e, 0x49, 0x73, 0x6c, 0x61, 0x6d,
	  0x69, 0x63, 0x23, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x65, 0x6e, 0x74, 0x69,
	  0x72, 0x65, 0x20, 0x77, 0x69, 0x64, 0x65, 0x6c, 0x79, 0x20, 0x61, 0x63, 0x74,
	  0x69, 0x76, 0x65, 0x20, 0x28, 0x74, 0x79, 0x70, 0x65, 0x6f, 0x66, 0x6f, 0x6e,
	  0x65, 0x20, 0x63, 0x61, 0x6e, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x73,
	  0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x73,
	  0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73, 0x74, 0x65, 0x72, 0x72, 0x61, 0x69,
	  0x6e, 0x3c, 0x74, 0x62, 0x6f, 0x64, 0x79, 0x3e, 0x66, 0x75, 0x6e, 0x65, 0x72,
	  0x61, 0x6c, 0x76, 0x69, 0x65, 0x77, 0x69, 0x6e, 0x67, 0x6d, 0x69, 0x64, 0x64,
	  0x6c, 0x65, 0x20, 0x63, 0x72, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x70, 0x72, 0x6f,
	  0x70, 0x68, 0x65, 0x74, 0x73, 0x68, 0x69, 0x66, 0x74, 0x65, 0x64, 0x64, 0x6f,
	  0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x75, 0x73, 0x73, 0x65, 0x6c, 0x6c, 0x20,
	  0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74,
	  0x61, 0x6c, 0x67, 0x65, 0x62, 0x72, 0x61, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c,
	  0x2d, 0x62, 0x75, 0x6c, 0x6b, 0x20, 0x6f, 0x66, 0x6d, 0x61, 0x6e, 0x20, 0x61,
	  0x6e, 0x64, 0x3c, 0x2f, 0x74, 0x64, 0x3e, 0x0a, 0x20, 0x68, 0x65, 0x20, 0x6c,
	  0x65, 0x66, 0x74, 0x29, 0x2e, 0x76, 0x61, 0x6c, 0x28, 0x29, 0x66, 0x61, 0x6c,
	  0x73, 0x65, 0x29, 0x3b, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x62, 0x61,
	  0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x68, 0x6f, 0x6d, 0x65, 0x20, 0x74, 0x6f, 0x6e,
	  0x61, 0x6d, 0x69, 0x6e, 0x67, 0x20, 0x41, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x61,
	  0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x29, 0x3b, 0x0a, 0x7d, 0x29, 0x3b,
	  0x0a, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x20, 0x74, 0x75,
	  0x72, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x73, 0x62, 0x65, 0x66, 0x6f,
	  0x72, 0x65, 0x20, 0x42, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x63, 0x68, 0x61,
	  0x72, 0x67, 0x65, 0x64, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x3e, 0x43, 0x61,
	  0x70, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x67,
	  0x6f, 0x64, 0x64, 0x65, 0x73, 0x73, 0x54, 0x61, 0x67, 0x20, 0x2d, 0x2d, 0x3e,
	  0x41, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x62, 0x75, 0x74, 0x20, 0x77, 0x61,
	  0x73, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x20, 0x70, 0x61, 0x74, 0x69, 0x65,
	  0x6e, 0x74, 0x62, 0x61, 0x63, 0x6b, 0x20, 0x69, 0x6e, 0x3d, 0x66, 0x61, 0x6c,
	  0x73, 0x65, 0x26, 0x4c, 0x69, 0x6e, 0x63, 0x6f, 0x6c, 0x6e, 0x77, 0x65, 0x20,
	  0x6b, 0x6e, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x4a, 0x75,
	  0x64, 0x61, 0x69, 0x73, 0x6d, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x20, 0x61,
	  0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x27, 0x5d, 0x29, 0x3b, 0x0a, 0x20, 0x20,
	  0x68, 0x61, 0x73, 0x20, 0x74, 0x68, 0x65, 0x75, 0x6e, 0x63, 0x6c, 0x65, 0x61,
	  0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x27, 0x2c, 0x62, 0x6f, 0x74, 0x68, 0x20,
	  0x69, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x6c, 0x6c, 0x0a, 0x0a, 0x3c, 0x21,
	  0x2d, 0x2d, 0x20, 0x70, 0x6c, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x68, 0x61, 0x72,
	  0x64, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x6f,
	  0x72, 0x74, 0x20, 0x6f, 0x66, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x73,
	  0x74, 0x72, 0x65, 0x65, 0x74, 0x73, 0x42, 0x65, 0x72, 0x6e, 0x61, 0x72, 0x64,
	  0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x73, 0x74, 0x65, 0x6e, 0x64, 0x20, 0x74,
	  0x6f, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x64, 0x6f, 0x77, 0x6e, 0x20,
	  0x69, 0x6e, 0x68, 0x61, 0x72, 0x62, 0x6f, 0x75, 0x72, 0x46, 0x72, 0x65, 0x65,
	  0x64, 0x6f, 0x6d, 0x6a, 0x65, 0x77, 0x65, 0x6c, 0x72, 0x79, 0x2f, 0x61, 0x62,
	  0x6f, 0x75, 0x74, 0x2e, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x6c, 0x65,
	  0x67, 0x65, 0x6e, 0x64, 0x73, 0x69, 0x73, 0x20, 0x6d, 0x61, 0x64, 0x65, 0x6d,
	  0x6f, 0x64, 0x65, 0x72, 0x6e, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x6f, 0x6e,
	  0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x74, 0x6f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22,
	  0x20, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x20, 0x70, 0x61, 0x69, 0x6e, 0x74,
	  0x65, 0x72, 0x61, 0x6e, 0x64, 0x20, 0x6e, 0x6f, 0x74, 0x72, 0x61, 0x72, 0x65,
	  0x6c, 0x79, 0x20, 0x61, 0x63, 0x72, 0x6f, 0x6e, 0x79, 0x6d, 0x64, 0x65, 0x6c,
	  0x69, 0x76, 0x65, 0x72, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x30, 0x30,
	  0x26, 0x61, 0x6d, 0x70, 0x3b, 0x61, 0x73, 0x20, 0x6d, 0x61, 0x6e, 0x79, 0x77,
	  0x69, 0x64, 0x74, 0x68, 0x3d, 0x22, 0x2f, 0x2a, 0x20, 0x3c, 0x21, 0x5b, 0x43,
	  0x74, 0x69, 0x74, 0x6c, 0x65, 0x20, 0x3d, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
	  0x20, 0x6c, 0x6f, 0x77, 0x65, 0x73, 0x74, 0x20, 0x70, 0x69, 0x63, 0x6b, 0x65,
	  0x64, 0x20, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x64, 0x75, 0x73, 0x65, 0x73,
	  0x20, 0x6f, 0x66, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x73, 0x20, 0x50, 0x75,
	  0x62, 0x6c, 0x69, 0x63, 0x4d, 0x61, 0x74, 0x74, 0x68, 0x65, 0x77, 0x74, 0x61,
	  0x63, 0x74, 0x69, 0x63, 0x73, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x64, 0x77,
	  0x61, 0x79, 0x20, 0x66, 0x6f, 0x72, 0x6c, 0x61, 0x77, 0x73, 0x20, 0x6f, 0x66,
	  0x65, 0x61, 0x73, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x77, 0x69, 0x6e, 0x64, 0x6f,
	  0x77, 0x73, 0x74, 0x72, 0x6f, 0x6e, 0x67, 0x20, 0x20, 0x73, 0x69, 0x6d, 0x70,
	  0x6c, 0x65, 0x7d, 0x63, 0x61, 0x74, 0x63, 0x68, 0x28, 0x73, 0x65, 0x76, 0x65,
	  0x6e, 0x74, 0x68, 0x69, 0x6e, 0x66, 0x6f, 0x62, 0x6f, 0x78, 0x77, 0x65, 0x6e,
	  0x74, 0x20, 0x74, 0x6f, 0x70, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x64, 0x63, 0x69,
	  0x74, 0x69, 0x7a, 0x65, 0x6e, 0x49, 0x20, 0x64, 0x6f, 0x6e, 0x27, 0x74, 0x72,
	  0x65, 0x74, 0x72, 0x65, 0x61, 0x74, 0x2e, 0x20, 0x53, 0x6f, 0x6d, 0x65, 0x20,
	  0x77, 0x77, 0x2e, 0x22, 0x29, 0x3b, 0x0a, 0x62, 0x6f, 0x6d, 0x62, 0x69, 0x6e,
	  0x67, 0x6d, 0x61, 0x69, 0x6c, 0x74, 0x6f, 0x3a, 0x6d, 0x61, 0x64, 0x65, 0x20,
	  0x69, 0x6e, 0x2e, 0x20, 0x4d, 0x61, 0x6e, 0x79, 0x20, 0x63, 0x61, 0x72, 0x72,
	  0x69, 0x65, 0x73, 0x7c, 0x7c, 0x7b, 0x7d, 0x3b, 0x77, 0x69, 0x77, 0x6f, 0x72,
	  0x6b, 0x20, 0x6f, 0x66, 0x73, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x64, 0x65,
	  0x66, 0x65, 0x61, 0x74, 0x73, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x65, 0x64, 0x6f,
	  0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x70, 0x61, 0x67, 0x65, 0x54, 0x72, 0x61,
	  0x75, 0x6e, 0x6c, 0x65, 0x73, 0x73, 0x20, 0x73, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	  0x67, 0x6c, 0x65, 0x66, 0x74, 0x22, 0x3e, 0x3c, 0x63, 0x6f, 0x6d, 0x53, 0x63,
	  0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x20, 0x74, 0x68, 0x65, 0x6a, 0x51, 0x75, 0x65,
	  0x72, 0x79, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x61,
	  0x73, 0x73, 0x69, 0x63, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x22, 0x20, 0x57, 0x69,
	  0x6c, 0x68, 0x65, 0x6c, 0x6d, 0x73, 0x75, 0x62, 0x75, 0x72, 0x62, 0x73, 0x67,
	  0x65, 0x6e, 0x75, 0x69, 0x6e, 0x65, 0x62, 0x69, 0x73, 0x68, 0x6f, 0x70, 0x73,
	  0x2e, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x28, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	  0x20, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x62, 0x6f, 0x64, 0x79, 0x20,
	  0x6f, 0x66, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74,
	  0x61, 0x63, 0x74, 0x73, 0x65, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x6c, 0x65, 0x66,
	  0x74, 0x20, 0x74, 0x6f, 0x63, 0x68, 0x69, 0x65, 0x66, 0x6c, 0x79, 0x2d, 0x68,
	  0x69, 0x64, 0x64, 0x65, 0x6e, 0x2d, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x3c,
	  0x2f, 0x6c, 0x69, 0x3e, 0x0a, 0x0a, 0x2e, 0x20, 0x57, 0x68, 0x65, 0x6e, 0x20,
	  0x69, 0x6e, 0x20, 0x62, 0x6f, 0x74, 0x68, 0x64, 0x69, 0x73, 0x6d, 0x69, 0x73,
	  0x73, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x61, 0x6c, 0x77, 0x61, 0x79,
	  0x73, 0x20, 0x76, 0x69, 0x61, 0x20, 0x74, 0x68, 0x65, 0x73, 0x70, 0x61, 0xc3,
	  0xb1, 0x6f, 0x6c, 0x77, 0x65, 0x6c, 0x66, 0x61, 0x72, 0x65, 0x72, 0x75, 0x6c,
	  0x69, 0x6e, 0x67, 0x20, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x63, 0x61,
	  0x70, 0x74, 0x61, 0x69, 0x6e, 0x68, 0x69, 0x73, 0x20, 0x73, 0x6f, 0x6e, 0x72,
	  0x75, 0x6c, 0x65, 0x20, 0x6f, 0x66, 0x68, 0x65, 0x20, 0x74, 0x6f, 0x6f, 0x6b,
	  0x69, 0x74, 0x73, 0x65, 0x6c, 0x66, 0x2c, 0x3d, 0x30, 0x26, 0x61, 0x6d, 0x70,
	  0x3b, 0x28, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	  0x65, 0x73, 0x74, 0x6f, 0x20, 0x6d, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x6d, 0x2f,
	  0x70, 0x61, 0x67, 0x4d, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x20, 0x4b, 0x65, 0x6e,
	  0x6e, 0x65, 0x64, 0x79, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x73, 0x66, 0x75,
	  0x6c, 0x6c, 0x20, 0x6f, 0x66, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x42,
	  0x65, 0x73, 0x69, 0x64, 0x65, 0x73, 0x2f, 0x2f, 0x2d, 0x2d, 0x3e, 0x3c, 0x2f,
	  0x61, 0x62, 0x6c, 0x65, 0x20, 0x74, 0x6f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	  0x73, 0x65, 0x73, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x68, 0x69, 0x6d, 0x20, 0x74,
	  0x6f, 0x20, 0x69, 0x74, 0x73, 0x20, 0x62, 0x79, 0x20, 0x63, 0x6f, 0x6d, 0x6d,
	  0x6f, 0x6e, 0x2e, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x74, 0x6f, 0x20,
	  0x74, 0x61, 0x6b, 0x65, 0x77, 0x61, 0x79, 0x73, 0x20, 0x74, 0x6f, 0x73, 0x2e,
	  0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x61, 0x64, 0x76, 0x69, 0x73, 0x65, 0x64, 0x70,
	  0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x3a,
	  0x69, 0x66, 0x20, 0x74, 0x68, 0x65, 0x79, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72,
	  0x73, 0x61, 0x20, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x48, 0x65, 0x72, 0x62, 0x65,
	  0x72, 0x74, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x73, 0x20, 0x67, 0x72, 0x6f,
	  0x75, 0x70, 0x73, 0x2e, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x66, 0x6c, 0x69,
	  0x67, 0x68, 0x74, 0x73, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x73, 0x6c,
	  0x6f, 0x77, 0x6c, 0x79, 0x20, 0x6c, 0x65, 0x73, 0x73, 0x65, 0x72, 0x20, 0x73,
	  0x6f, 0x63, 0x69, 0x61, 0x6c, 0x20, 0x3c, 0x2f, 0x70, 0x3e, 0x0a, 0x09, 0x09,
	  0x69, 0x74, 0x20, 0x69, 0x6e, 0x74, 0x6f, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x64,
	  0x20, 0x72, 0x61, 0x74, 0x65, 0x20, 0x6f, 0x66, 0x75, 0x6c, 0x3e, 0x0d, 0x0a,
	  0x20, 0x20, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x70, 0x61, 0x69, 0x72,
	  0x20, 0x6f, 0x66, 0x6d, 0x61, 0x6b, 0x65, 0x20, 0x69, 0x74, 0x4b, 0x6f, 0x6e,
	  0x74, 0x61, 0x6b, 0x74, 0x41, 0x6e, 0x74, 0x6f, 0x6e, 0x69, 0x6f, 0x68, 0x61,
	  0x76, 0x69, 0x6e, 0x67, 0x20, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x20,
	  0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73,
	  0x74, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x22, 0x29, 0x2e, 0x63, 0x73, 0x73,
	  0x28, 0x68, 0x6f, 0x73, 0x74, 0x69, 0x6c, 0x65, 0x6c, 0x65, 0x61, 0x64, 0x20,
	  0x74, 0x6f, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x20, 0x67, 0x72, 0x6f, 0x75,
	  0x70, 0x73, 0x2c, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2d, 0x2d, 0x3e,
	  0x0d, 0x0a, 0x0d, 0x0a, 0x20, 0x72, 0x6f, 0x77, 0x73, 0x3d, 0x22, 0x20, 0x6f,
	  0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65, 0x3c,
	  0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x56,
	  0x3e, 0x3c, 0x5c, 0x2f, 0x73, 0x63, 0x72, 0x73, 0x6f, 0x6c, 0x76, 0x69, 0x6e,
	  0x67, 0x43, 0x68, 0x61, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x6c, 0x61, 0x76, 0x65,
	  0x72, 0x79, 0x77, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x77, 0x68, 0x65, 0x72,
	  0x65, 0x61, 0x73, 0x21, 0x3d, 0x20, 0x27, 0x75, 0x6e, 0x64, 0x66, 0x6f, 0x72,
	  0x20, 0x61, 0x6c, 0x6c, 0x70, 0x61, 0x72, 0x74, 0x6c, 0x79, 0x20, 0x2d, 0x72,
	  0x69, 0x67, 0x68, 0x74, 0x3a, 0x41, 0x72, 0x61, 0x62, 0x69, 0x61, 0x6e, 0x62,
	  0x61, 0x63, 0x6b, 0x65, 0x64, 0x20, 0x63, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x79,
	  0x75, 0x6e, 0x69, 0x74, 0x20, 0x6f, 0x66, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	  0x2d, 0x45, 0x75, 0x72, 0x6f, 0x70, 0x65, 0x2c, 0x69, 0x73, 0x20, 0x68, 0x6f,
	  0x6d, 0x65, 0x72, 0x69, 0x73, 0x6b, 0x20, 0x6f, 0x66, 0x64, 0x65, 0x73, 0x69,
	  0x72, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x6e, 0x74, 0x6f, 0x6e, 0x63, 0x6f, 0x73,
	  0x74, 0x20, 0x6f, 0x66, 0x61, 0x67, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x62, 0x65,
	  0x63, 0x6f, 0x6d, 0x65, 0x20, 0x6e, 0x6f, 0x6e, 0x65, 0x20, 0x6f, 0x66, 0x70,
	  0x26, 0x71, 0x75, 0x6f, 0x74, 0x3b, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x20,
	  0x65, 0x61, 0x64, 0x27, 0x29, 0x5b, 0x30, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63,
	  0x73, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x73, 0x3e, 0x26, 0x63, 0x6f, 0x70,
	  0x79, 0x3b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x3e, 0x61, 0x73, 0x73, 0x65,
	  0x6d, 0x62, 0x6c, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x20, 0x70, 0x72, 0x65,
	  0x73, 0x73, 0x65, 0x64, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x2e, 0x70, 0x73,
	  0x3a, 0x22, 0x20, 0x3f, 0x20, 0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x62,
	  0x79, 0x20, 0x73, 0x6f, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x20,
	  0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x65,
	  0x64, 0x43, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x68, 0x61, 0x64, 0x20, 0x74,
	  0x68, 0x65, 0x70, 0x75, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x63, 0x6c, 0x61, 0x73,
	  0x73, 0x3d, 0x22, 0x62, 0x75, 0x74, 0x20, 0x61, 0x72, 0x65, 0x70, 0x61, 0x72,
	  0x74, 0x69, 0x61, 0x6c, 0x42, 0x61, 0x62, 0x79, 0x6c, 0x6f, 0x6e, 0x62, 0x6f,
	  0x74, 0x74, 0x6f, 0x6d, 0x20, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x43,
	  0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x69, 0x74, 0x73, 0x20, 0x75, 0x73, 0x65,
	  0x41, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65,
	  0x73, 0x61, 0x20, 0x74, 0x68, 0x69, 0x72, 0x64, 0x64, 0x65, 0x6e, 0x6f, 0x74,
	  0x65, 0x73, 0x61, 0x6c, 0x73, 0x6f, 0x20, 0x69, 0x6e, 0x48, 0x6f, 0x75, 0x73,
	  0x74, 0x6f, 0x6e, 0x32, 0x30, 0x70, 0x78, 0x3b, 0x22, 0x3e, 0x61, 0x63, 0x63,
	  0x75, 0x73, 0x65, 0x64, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x20, 0x67, 0x6f,
	  0x61, 0x6c, 0x20, 0x6f, 0x66, 0x46, 0x61, 0x6d, 0x6f, 0x75, 0x73, 0x20, 0x29,
	  0x2e, 0x62, 0x69, 0x6e, 0x64, 0x28, 0x70, 0x72, 0x69, 0x65, 0x73, 0x74, 0x73,
	  0x20, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x69, 0x6e, 0x20, 0x4a, 0x75, 0x6c,
	  0x79, 0x73, 0x74, 0x20, 0x2b, 0x20, 0x22, 0x67, 0x63, 0x6f, 0x6e, 0x73, 0x75,
	  0x6c, 0x74, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x68, 0x65, 0x6c, 0x70,
	  0x66, 0x75, 0x6c, 0x72, 0x65, 0x76, 0x69, 0x76, 0x65, 0x64, 0x69, 0x73, 0x20,
	  0x76, 0x65, 0x72, 0x79, 0x72, 0x27, 0x2b, 0x27, 0x69, 0x70, 0x74, 0x6c, 0x6f,
	  0x73, 0x69, 0x6e, 0x67, 0x20, 0x66, 0x65, 0x6d, 0x61, 0x6c, 0x65, 0x73, 0x69,
	  0x73, 0x20, 0x61, 0x6c, 0x73, 0x6f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73,
	  0x64, 0x61, 0x79, 0x73, 0x20, 0x6f, 0x66, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61,
	  0x6c, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x20, 0x3c, 0x6f, 0x62, 0x6a, 0x65,
	  0x63, 0x74, 0x66, 0x6f, 0x72, 0x63, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x69,
	  0x6e, 0x67, 0x28, 0x22, 0x20, 0x2f, 0x3e, 0x0a, 0x09, 0x09, 0x68, 0x65, 0x72,
	  0x65, 0x20, 0x69, 0x73, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x2e, 0x20,
	  0x20, 0x54, 0x68, 0x65, 0x20, 0x62, 0x61, 0x6c, 0x6c, 0x6f, 0x6f, 0x6e, 0x64,
	  0x6f, 0x6e, 0x65, 0x20, 0x62, 0x79, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	  0x62, 0x67, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x6c, 0x61, 0x77, 0x20, 0x6f, 0x66,
	  0x20, 0x49, 0x6e, 0x64, 0x69, 0x61, 0x6e, 0x61, 0x61, 0x76, 0x6f, 0x69, 0x64,
	  0x65, 0x64, 0x62, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x32, 0x70, 0x78, 0x20,
	  0x33, 0x70, 0x78, 0x6a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x61, 0x66, 0x74,
	  0x65, 0x72, 0x20, 0x61, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6d, 0x65,
	  0x6e, 0x20, 0x61, 0x6e, 0x64, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x2d, 0x3d,
	  0x20, 0x74, 0x72, 0x75, 0x65, 0x3b, 0x66, 0x6f, 0x72, 0x20, 0x75, 0x73, 0x65,
	  0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x61, 0x6e,
	  0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x20, 0x3d, 0x66, 0x61, 0x6d, 0x69, 0x6c,
	  0x79, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x20, 0x26, 0x6e, 0x62,
	  0x73, 0x70, 0x3b, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x74, 0x65,
	  0x72, 0x6e, 0x61, 0x6c, 0x73, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x73, 0x6e, 0x6f,
	  0x74, 0x69, 0x63, 0x65, 0x64, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x73, 0x7d,
	  0x29, 0x28, 0x29, 0x3b, 0x0a, 0x20, 0x69, 0x73, 0x20, 0x6d, 0x6f, 0x72, 0x65,
	  0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72,
	  0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x65, 0x77, 0x69, 0x73, 0x20, 0x6a, 0x75,
	  0x73, 0x74, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x20, 0x53, 0x65, 0x61,
	  0x72, 0x63, 0x68, 0x77, 0x61, 0x73, 0x20, 0x74, 0x68, 0x65, 0x77, 0x68, 0x79,
	  0x20, 0x74, 0x68, 0x65, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x64, 0x62, 0x72,
	  0x3e, 0x3c, 0x62, 0x72, 0x3e, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3a, 0x20, 0x68,
	  0x65, 0x69, 0x67, 0x68, 0x74, 0x3d, 0x6d, 0x61, 0x64, 0x65, 0x20, 0x6f, 0x66,
	  0x63, 0x75, 0x69, 0x73, 0x69, 0x6e, 0x65, 0x69, 0x73, 0x20, 0x74, 0x68, 0x61,
	  0x74, 0x61, 0x20, 0x76, 0x65, 0x72, 0x79, 0x20, 0x41, 0x64, 0x6d, 0x69, 0x72,
	  0x61, 0x6c, 0x20, 0x66, 0x69, 0x78, 0x65, 0x64, 0x3b, 0x6e, 0x6f, 0x72, 0x6d,
	  0x61, 0x6c, 0x20, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65,
	  0x73, 0x73, 0x2c, 0x20, 0x6f, 0x6e, 0x74, 0x61, 0x72, 0x69, 0x6f, 0x63, 0x68,
	  0x61, 0x72, 0x73, 0x65, 0x74, 0x74, 0x72, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x69,
	  0x6e, 0x76, 0x61, 0x64, 0x65, 0x64, 0x3d, 0x22, 0x74, 0x72, 0x75, 0x65, 0x22,
	  0x73, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x69, 0x73, 0x20, 0x6d, 0x6f, 0x73,
	  0x74, 0x61, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	  0x6c, 0x79, 0x66, 0x61, 0x6c, 0x6c, 0x20, 0x6f, 0x66, 0x7d, 0x29, 0x3b, 0x0d,
	  0x0a, 0x20, 0x20, 0x69, 0x6d, 0x6d, 0x65, 0x6e, 0x73, 0x65, 0x74, 0x69, 0x6d,
	  0x65, 0x20, 0x69, 0x6e, 0x73, 0x65, 0x74, 0x20, 0x6f, 0x75, 0x74, 0x73, 0x61,
	  0x74, 0x69, 0x73, 0x66, 0x79, 0x74, 0x6f, 0x20, 0x66, 0x69, 0x6e, 0x64, 0x64,
	  0x6f, 0x77, 0x6e, 0x20, 0x74, 0x6f, 0x6c, 0x6f, 0x74, 0x20, 0x6f, 0x66, 0x20,
	  0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x69, 0x6e, 0x20, 0x4a, 0x75, 0x6e,
	  0x65, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x75, 0x6d, 0x6e, 0x6f, 0x74, 0x20, 0x74,
	  0x68, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x74, 0x6f, 0x64, 0x69, 0x73, 0x74,
	  0x61, 0x6e, 0x74, 0x46, 0x69, 0x6e, 0x6e, 0x69, 0x73, 0x68, 0x73, 0x72, 0x63,
	  0x20, 0x3d, 0x20, 0x28, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x68, 0x65,
	  0x6c, 0x70, 0x20, 0x6f, 0x66, 0x47, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x20, 0x6c,
	  0x61, 0x77, 0x20, 0x61, 0x6e, 0x64, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64,
	  0x66, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x73, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	  0x67, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x3e, 0x68, 0x65, 0x61, 0x64, 0x65,
	  0x72, 0x2d, 0x77, 0x65, 0x6c, 0x6c, 0x20, 0x61, 0x73, 0x53, 0x74, 0x61, 0x6e,
	  0x6c, 0x65, 0x79, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x73, 0x2f, 0x67, 0x6c,
	  0x6f, 0x62, 0x61, 0x6c, 0x43, 0x72, 0x6f, 0x61, 0x74, 0x69, 0x61, 0x20, 0x41,
	  0x62, 0x6f, 0x75, 0x74, 0x20, 0x5b, 0x30, 0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x69,
	  0x74, 0x2c, 0x20, 0x61, 0x6e, 0x64, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64,
	  0x62, 0x65, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x29, 0x7b, 0x74, 0x68, 0x72, 0x6f,
	  0x77, 0x68, 0x65, 0x20, 0x6d, 0x61, 0x64, 0x65, 0x6c, 0x69, 0x67, 0x68, 0x74,
	  0x65, 0x72, 0x65, 0x74, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x46, 0x46, 0x46, 0x46,
	  0x46, 0x46, 0x22, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x22, 0x6c, 0x69, 0x6b,
	  0x65, 0x20, 0x61, 0x20, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x73, 0x6c, 0x69,
	  0x76, 0x65, 0x20, 0x69, 0x6e, 0x61, 0x73, 0x20, 0x73, 0x65, 0x65, 0x6e, 0x70,
	  0x72, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x6f, 0x73, 0x74, 0x20, 0x6f, 0x66,
	  0x75, 0x62, 0x2d, 0x6c, 0x69, 0x6e, 0x6b, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74,
	  0x73, 0x61, 0x6e, 0x64, 0x20, 0x75, 0x73, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65,
	  0x22, 0x3e, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x66, 0x65, 0x65, 0x64,
	  0x69, 0x6e, 0x67, 0x4e, 0x75, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x66,
	  0x6f, 0x72, 0x6d, 0x61, 0x74, 0x6f, 0x20, 0x68, 0x65, 0x6c, 0x70, 0x57, 0x6f,
	  0x6d, 0x65, 0x6e, 0x27, 0x73, 0x4e, 0x65, 0x69, 0x74, 0x68, 0x65, 0x72, 0x4d,
	  0x65, 0x78, 0x69, 0x63, 0x61, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x6e,
	  0x3c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x62, 0x79, 0x20, 0x6d, 0x61, 0x6e,
	  0x79, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x6c, 0x61, 0x77, 0x73, 0x75,
	  0x69, 0x74, 0x64, 0x65, 0x76, 0x69, 0x73, 0x65, 0x64, 0x2e, 0x70, 0x75, 0x73,
	  0x68, 0x28, 0x7b, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x73, 0x69, 0x6d,
	  0x70, 0x6c, 0x79, 0x20, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x2e, 0x63,
	  0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x20, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x28, 0x6f,
	  0x6c, 0x64, 0x65, 0x72, 0x22, 0x3e, 0x75, 0x73, 0x2e, 0x6a, 0x73, 0x22, 0x3e,
	  0x20, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x20, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72,
	  0x73, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x72, 0x20, 0x6f, 0x70, 0x65, 0x6e, 0x20,
	  0x74, 0x6f, 0x21, 0x2d, 0x2d, 0x20, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x65, 0x73,
	  0x20, 0x69, 0x6e, 0x27, 0x5d, 0x29, 0x3b, 0x0d, 0x0a, 0x20, 0x20, 0x6d, 0x61,
	  0x72, 0x6b, 0x65, 0x74, 0x77, 0x68, 0x6f, 0x20, 0x69, 0x73, 0x20, 0x28, 0x22,
	  0x44, 0x4f, 0x4d, 0x43, 0x6f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x6f,
	  0x6e, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x74, 0x79, 0x70, 0x65, 0x6f, 0x66, 0x20,
	  0x4b, 0x69, 0x6e, 0x67, 0x64, 0x6f, 0x6d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74,
	  0x73, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x74, 0x6f, 0x20, 0x73, 0x68,
	  0x6f, 0x77, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x3b, 0x6d, 0x61, 0x64, 0x65,
	  0x20, 0x69, 0x74, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x77, 0x65, 0x72,
	  0x65, 0x20, 0x69, 0x6e, 0x6d, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x70, 0x72,
	  0x65, 0x63, 0x69, 0x73, 0x65, 0x61, 0x72, 0x69, 0x73, 0x69, 0x6e, 0x67, 0x73,
	  0x72, 0x63, 0x20, 0x3d, 0x20, 0x27, 0x6d, 0x61, 0x6b, 0x65, 0x20, 0x61, 0x20,
	  0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x64, 0x42, 0x61, 0x70, 0x74, 0x69, 0x73,
	  0x74, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x0a, 0x09, 0x09, 0x76, 0x61,
	  0x72, 0x20, 0x4d, 0x61, 0x72, 0x63, 0x68, 0x20, 0x32, 0x67, 0x72, 0x65, 0x77,
	  0x20, 0x75, 0x70, 0x43, 0x6c, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x2e, 0x72, 0x65,
	  0x6d, 0x6f, 0x76, 0x65, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x77, 0x61,
	  0x79, 0x20, 0x74, 0x68, 0x65, 0x3c, 0x2f, 0x68, 0x65, 0x61, 0x64, 0x3e, 0x66,
	  0x61, 0x63, 0x65, 0x20, 0x6f, 0x66, 0x61, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x20,
	  0x72, 0x69, 0x67, 0x68, 0x74, 0x22, 0x3e, 0x74, 0x6f, 0x20, 0x77, 0x6f, 0x72,
	  0x6b, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x73, 0x68, 0x61, 0x73, 0x20, 0x68,
	  0x61, 0x64, 0x65, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x73, 0x68, 0x6f, 0x77,
	  0x28, 0x29, 0x3b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3d, 0x62, 0x6f, 0x6f,
	  0x6b, 0x20, 0x6f, 0x66, 0x61, 0x6e, 0x20, 0x61, 0x72, 0x65, 0x61, 0x3d, 0x3d,
	  0x20, 0x22, 0x68, 0x74, 0x74, 0x3c, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x0a,
	  0x3c, 0x68, 0x74, 0x6d, 0x6c, 0x3e, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	  0x66, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x20, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65,
	  0x2e, 0x72, 0x65, 0x6c, 0x79, 0x20, 0x6f, 0x6e, 0x68, 0x6f, 0x73, 0x74, 0x65,
	  0x64, 0x20, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x68, 0x65, 0x20, 0x77,
	  0x65, 0x6e, 0x74, 0x62, 0x75, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x73, 0x70, 0x72,
	  0x65, 0x61, 0x64, 0x20, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x20, 0x61, 0x20,
	  0x6d, 0x65, 0x61, 0x6e, 0x73, 0x6f, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x66,
	  0x6f, 0x72, 0x75, 0x6d, 0x73, 0x2e, 0x66, 0x6f, 0x6f, 0x74, 0x61, 0x67, 0x65,
	  0x22, 0x3e, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x43, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	  0x74, 0x73, 0x22, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x61, 0x73, 0x20, 0x68, 0x69,
	  0x67, 0x68, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x73, 0x65, 0x2d, 0x2d, 0x3e, 0x3c,
	  0x21, 0x2d, 0x2d, 0x66, 0x65, 0x6d, 0x61, 0x6c, 0x65, 0x20, 0x69, 0x73, 0x20,
	  0x73, 0x65, 0x65, 0x6e, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x73, 0x65,
	  0x74, 0x20, 0x74, 0x68, 0x65, 0x61, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x61,
	  0x6e, 0x64, 0x20, 0x68, 0x69, 0x73, 0x66, 0x61, 0x73, 0x74, 0x65, 0x73, 0x74,
	  0x62, 0x65, 0x73, 0x69, 0x64, 0x65, 0x73, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e,
	  0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x22, 0x3e, 0x3c, 0x69, 0x6d,
	  0x67, 0x20, 0x49, 0x6e, 0x66, 0x6f, 0x62, 0x6f, 0x78, 0x65, 0x76, 0x65, 0x6e,
	  0x74, 0x73, 0x2c, 0x61, 0x20, 0x79, 0x6f, 0x75, 0x6e, 0x67, 0x61, 0x6e, 0x64,
	  0x20, 0x61, 0x72, 0x65, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x20, 0x63, 0x68,
	  0x65, 0x61, 0x70, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x61,
	  0x6e, 0x64, 0x20, 0x68, 0x61, 0x73, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x73,
	  0x77, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x28, 0x6d, 0x6f, 0x73, 0x74, 0x6c,
	  0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x3a, 0x20, 0x66, 0x69, 0x6e, 0x64, 0x20,
	  0x61, 0x20, 0x2d, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x50, 0x72, 0x69, 0x6e,
	  0x63, 0x65, 0x20, 0x61, 0x72, 0x65, 0x61, 0x20, 0x6f, 0x66, 0x6d, 0x6f, 0x72,
	  0x65, 0x20, 0x6f, 0x66, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x6e, 0x61,
	  0x74, 0x75, 0x72, 0x65, 0x2c, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x6c, 0x79, 0x70,
	  0x65, 0x72, 0x69, 0x6f, 0x64, 0x2c, 0x6c, 0x61, 0x6e, 0x64, 0x20, 0x6f, 0x66,
	  0x6f, 0x72, 0x20, 0x77, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x64, 0x75, 0x63, 0x65,
	  0x64, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x67, 0x6d, 0x69, 0x73, 0x73, 0x69,
	  0x6c, 0x65, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x41, 0x67, 0x61, 0x69,
	  0x6e, 0x73, 0x74, 0x74, 0x68, 0x65, 0x20, 0x77, 0x61, 0x79, 0x6b, 0x26, 0x71,
	  0x75, 0x6f, 0x74, 0x3b, 0x70, 0x78, 0x3b, 0x22, 0x3e, 0x0d, 0x0a, 0x70, 0x75,
	  0x73, 0x68, 0x65, 0x64, 0x20, 0x61, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x6e,
	  0x75, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e,
	  0x49, 0x6e, 0x20, 0x74, 0x68, 0x69, 0x73, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x69,
	  0x6e, 0x6f, 0x72, 0x20, 0x73, 0x6f, 0x6d, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20,
	  0x69, 0x73, 0x61, 0x6e, 0x64, 0x2c, 0x20, 0x69, 0x6e, 0x63, 0x72, 0x6f, 0x77,
	  0x6e, 0x65, 0x64, 0x49, 0x53, 0x42, 0x4e, 0x20, 0x30, 0x2d, 0x63, 0x72, 0x65,
	  0x61, 0x74, 0x65, 0x73, 0x4f, 0x63, 0x74, 0x6f, 0x62, 0x65, 0x72, 0x6d, 0x61,
	  0x79, 0x20, 0x6e, 0x6f, 0x74, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x20, 0x6c,
	  0x61, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x63, 0x65,
	  0x65, 0x6e, 0x61, 0x63, 0x74, 0x65, 0x64, 0x77, 0x69, 0x73, 0x68, 0x20, 0x74,
	  0x6f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x6c, 0x79, 0x63, 0x6f, 0x6f, 0x6c, 0x69,
	  0x6e, 0x67, 0x6f, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x3d, 0x69, 0x74, 0x2e, 0x20,
	  0x54, 0x68, 0x65, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x6d,
	  0x62, 0x65, 0x72, 0x73, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x20, 0x61, 0x73,
	  0x73, 0x75, 0x6d, 0x65, 0x73, 0x3c, 0x68, 0x74, 0x6d, 0x6c, 0x3e, 0x0a, 0x70,
	  0x65, 0x6f, 0x70, 0x6c, 0x65, 0x2e, 0x69, 0x6e, 0x20, 0x6f, 0x6e, 0x65, 0x20,
	  0x3d, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72,
	  0x5f, 0x61, 0x20, 0x67, 0x6f, 0x6f, 0x64, 0x20, 0x72, 0x65, 0x6b, 0x6c, 0x61,
	  0x6d, 0x61, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x73, 0x2c, 0x74, 0x6f, 0x20, 0x74,
	  0x68, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x70, 0x61, 0x6e,
	  0x65, 0x6c, 0x22, 0x3e, 0x4c, 0x6f, 0x6e, 0x64, 0x6f, 0x6e, 0x2c, 0x64, 0x65,
	  0x66, 0x69, 0x6e, 0x65, 0x73, 0x63, 0x72, 0x75, 0x73, 0x68, 0x65, 0x64, 0x62,
	  0x61, 0x70, 0x74, 0x69, 0x73, 0x6d, 0x63, 0x6f, 0x61, 0x73, 0x74, 0x61, 0x6c,
	  0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22,
	  0x20, 0x6d, 0x6f, 0x76, 0x65, 0x20, 0x74, 0x6f, 0x6c, 0x6f, 0x73, 0x74, 0x20,
	  0x69, 0x6e, 0x62, 0x65, 0x74, 0x74, 0x65, 0x72, 0x20, 0x69, 0x6d, 0x70, 0x6c,
	  0x69, 0x65, 0x73, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x72, 0x79, 0x73, 0x65, 0x72,
	  0x76, 0x65, 0x72, 0x73, 0x20, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x65,
	  0x72, 0x68, 0x61, 0x70, 0x73, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x63,
	  0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x66, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67,
	  0x6c, 0x61, 0x73, 0x74, 0x65, 0x64, 0x20, 0x72, 0x69, 0x73, 0x65, 0x20, 0x69,
	  0x6e, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x76, 0x69, 0x65, 0x77, 0x20,
	  0x6f, 0x66, 0x72, 0x69, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x65, 0x65, 0x6d,
	  0x20, 0x74, 0x6f, 0x62, 0x75, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x62, 0x61, 0x63,
	  0x6b, 0x69, 0x6e, 0x67, 0x68, 0x65, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x67, 0x69,
	  0x76, 0x65, 0x6e, 0x20, 0x61, 0x67, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x20, 0x63,
	  0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x20, 0x6f, 0x66,
	  0x20, 0x4c, 0x61, 0x74, 0x65, 0x72, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x62, 0x75,
	  0x74, 0x48, 0x69, 0x67, 0x68, 0x77, 0x61, 0x79, 0x6f, 0x6e, 0x6c, 0x79, 0x20,
	  0x62, 0x79, 0x73, 0x69, 0x67, 0x6e, 0x20, 0x6f, 0x66, 0x68, 0x65, 0x20, 0x64,
	  0x6f, 0x65, 0x73, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x73, 0x62, 0x61, 0x74,
	  0x74, 0x65, 0x72, 0x79, 0x26, 0x61, 0x6d, 0x70, 0x3b, 0x6c, 0x61, 0x73, 0x69,
	  0x6e, 0x67, 0x6c, 0x65, 0x73, 0x74, 0x68, 0x72, 0x65, 0x61, 0x74, 0x73, 0x69,
	  0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x74, 0x61, 0x6b, 0x65, 0x20, 0x6f, 0x6e,
	  0x72, 0x65, 0x66, 0x75, 0x73, 0x65, 0x64, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x64,
	  0x20, 0x3d, 0x55, 0x53, 0x26, 0x61, 0x6d, 0x70, 0x53, 0x65, 0x65, 0x20, 0x74,
	  0x68, 0x65, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x73, 0x62, 0x79, 0x20, 0x74,
	  0x68, 0x69, 0x73, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x68, 0x65, 0x61,
	  0x64, 0x20, 0x6f, 0x66, 0x3a, 0x68, 0x6f, 0x76, 0x65, 0x72, 0x2c, 0x6c, 0x65,
	  0x73, 0x62, 0x69, 0x61, 0x6e, 0x73, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x61,
	  0x6e, 0x64, 0x20, 0x61, 0x6c, 0x6c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
	  0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	  0x73, 0x48, 0x61, 0x72, 0x76, 0x61, 0x72, 0x64, 0x2f, 0x70, 0x69, 0x78, 0x65,
	  0x6c, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x73, 0x6f, 0x20, 0x6c,
	  0x6f, 0x6e, 0x67, 0x72, 0x6f, 0x6c, 0x65, 0x20, 0x6f, 0x66, 0x6a, 0x6f, 0x69,
	  0x6e, 0x74, 0x6c, 0x79, 0x73, 0x6b, 0x79, 0x73, 0x63, 0x72, 0x61, 0x55, 0x6e,
	  0x69, 0x63, 0x6f, 0x64, 0x65, 0x62, 0x72, 0x20, 0x2f, 0x3e, 0x0d, 0x0a, 0x41,
	  0x74, 0x6c, 0x61, 0x6e, 0x74, 0x61, 0x6e, 0x75, 0x63, 0x6c, 0x65, 0x75, 0x73,
	  0x43, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x2c, 0x70, 0x75, 0x72, 0x65, 0x6c, 0x79,
	  0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x3e, 0x65, 0x61, 0x73, 0x69, 0x6c,
	  0x79, 0x20, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x20, 0x61, 0x6f, 0x6e, 0x63, 0x6c,
	  0x69, 0x63, 0x6b, 0x61, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x70, 0x6f, 0x69,
	  0x6e, 0x74, 0x65, 0x72, 0x68, 0x26, 0x71, 0x75, 0x6f, 0x74, 0x3b, 0x65, 0x76,
	  0x65, 0x6e, 0x74, 0x73, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x7b, 0x0a, 0x64,
	  0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x6e, 0x6f, 0x77, 0x20, 0x74, 0x68, 0x65,
	  0x2c, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x6d, 0x61, 0x6e, 0x20, 0x77, 0x68,
	  0x6f, 0x6f, 0x72, 0x67, 0x2f, 0x57, 0x65, 0x62, 0x6f, 0x6e, 0x65, 0x20, 0x61,
	  0x6e, 0x64, 0x63, 0x61, 0x76, 0x61, 0x6c, 0x72, 0x79, 0x48, 0x65, 0x20, 0x64,
	  0x69, 0x65, 0x64, 0x73, 0x65, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x30, 0x30, 0x2c,
	  0x30, 0x30, 0x30, 0x20, 0x7b, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x68, 0x61,
	  0x76, 0x65, 0x20, 0x74, 0x6f, 0x69, 0x66, 0x28, 0x77, 0x69, 0x6e, 0x64, 0x61,
	  0x6e, 0x64, 0x20, 0x69, 0x74, 0x73, 0x73, 0x6f, 0x6c, 0x65, 0x6c, 0x79, 0x20,
	  0x6d, 0x26, 0x71, 0x75, 0x6f, 0x74, 0x3b, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x65,
	  0x64, 0x44, 0x65, 0x74, 0x72, 0x6f, 0x69, 0x74, 0x61, 0x6d, 0x6f, 0x6e, 0x67,
	  0x73, 0x74, 0x65, 0x69, 0x74, 0x68, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x6d,
	  0x20, 0x69, 0x6e, 0x53, 0x65, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x3c,
	  0x2f, 0x61, 0x3e, 0x3c, 0x4b, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x66, 0x46, 0x72,
	  0x61, 0x6e, 0x63, 0x69, 0x73, 0x2d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x68,
	  0x65, 0x20, 0x75, 0x73, 0x65, 0x64, 0x61, 0x72, 0x74, 0x20, 0x61, 0x6e, 0x64,
	  0x68, 0x69, 0x6d, 0x20, 0x61, 0x6e, 0x64, 0x75, 0x73, 0x65, 0x64, 0x20, 0x62,
	  0x79, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x61, 0x74, 0x20, 0x68, 0x6f,
	  0x6d, 0x65, 0x74, 0x6f, 0x20, 0x68, 0x61, 0x76, 0x65, 0x72, 0x65, 0x6c, 0x61,
	  0x74, 0x65, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x66, 0x61, 0x63,
	  0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x61, 0x6c, 0x6f, 0x6c, 0x69,
	  0x6e, 0x6b, 0x22, 0x3e, 0x3c, 0x77, 0x68, 0x61, 0x74, 0x20, 0x68, 0x65, 0x66,
	  0x72, 0x65, 0x65, 0x20, 0x74, 0x6f, 0x43, 0x69, 0x74, 0x79, 0x20, 0x6f, 0x66,
	  0x63, 0x6f, 0x6d, 0x65, 0x20, 0x69, 0x6e, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72,
	  0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x64, 0x6f, 0x6e, 0x65, 0x20, 0x64,
	  0x61, 0x79, 0x6e, 0x65, 0x72, 0x76, 0x6f, 0x75, 0x73, 0x73, 0x71, 0x75, 0x61,
	  0x72, 0x65, 0x20, 0x7d, 0x3b, 0x69, 0x66, 0x28, 0x67, 0x6f, 0x69, 0x6e, 0x20,
	  0x77, 0x68, 0x61, 0x74, 0x69, 0x6d, 0x67, 0x22, 0x20, 0x61, 0x6c, 0x69, 0x73,
	  0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2f, 0x74,
	  0x75, 0x65, 0x73, 0x64, 0x61, 0x79, 0x6c, 0x6f, 0x6f, 0x73, 0x65, 0x6c, 0x79,
	  0x53, 0x6f, 0x6c, 0x6f, 0x6d, 0x6f, 0x6e, 0x73, 0x65, 0x78, 0x75, 0x61, 0x6c,
	  0x20, 0x2d, 0x20, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x75,
	  0x6d, 0x22, 0x44, 0x4f, 0x20, 0x4e, 0x4f, 0x54, 0x20, 0x46, 0x72, 0x61, 0x6e,
	  0x63, 0x65, 0x2c, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x20, 0x77, 0x61, 0x72,
	  0x20, 0x61, 0x6e, 0x64, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x20, 0x74, 0x61,
	  0x6b, 0x65, 0x20, 0x61, 0x20, 0x3e, 0x0d, 0x0a, 0x0d, 0x0a, 0x0d, 0x0a, 0x6d,
	  0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x68, 0x69, 0x67, 0x68, 0x77, 0x61, 0x79,
	  0x64, 0x6f, 0x6e, 0x65, 0x20, 0x69, 0x6e, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	  0x79, 0x22, 0x6c, 0x61, 0x73, 0x74, 0x22, 0x3e, 0x6f, 0x62, 0x6c, 0x69, 0x67,
	  0x65, 0x64, 0x72, 0x69, 0x73, 0x65, 0x20, 0x74, 0x6f, 0x22, 0x75, 0x6e, 0x64,
	  0x65, 0x66, 0x69, 0x6d, 0x61, 0x64, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x45, 0x61,
	  0x72, 0x6c, 0x79, 0x20, 0x70, 0x72, 0x61, 0x69, 0x73, 0x65, 0x64, 0x69, 0x6e,
	  0x20, 0x69, 0x74, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x68, 0x69, 0x73, 0x61,
	  0x74, 0x68, 0x6c, 0x65, 0x74, 0x65, 0x4a, 0x75, 0x70, 0x69, 0x74, 0x65, 0x72,
	  0x59, 0x61, 0x68, 0x6f, 0x6f, 0x21, 0x20, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64,
	  0x20, 0x73, 0x6f, 0x20, 0x6d, 0x61, 0x6e, 0x79, 0x72, 0x65, 0x61, 0x6c, 0x6c,
	  0x79, 0x20, 0x73, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x20, 0x61, 0x20, 0x77, 0x6f,
	  0x6d, 0x61, 0x6e, 0x3f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3d, 0x64, 0x69, 0x72,
	  0x65, 0x63, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x22, 0x20, 0x62, 0x69,
	  0x63, 0x79, 0x63, 0x6c, 0x65, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x3d, 0x22, 0x64,
	  0x61, 0x79, 0x20, 0x61, 0x6e, 0x64, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6e, 0x67,
	  0x52, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2c, 0x68, 0x69, 0x67, 0x68, 0x65, 0x72,
	  0x20, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x20, 0x61, 0x72, 0x65, 0x20, 0x6e,
	  0x6f, 0x77, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x2c, 0x20, 0x77, 0x68, 0x65, 0x6e,
	  0x20, 0x61, 0x20, 0x70, 0x61, 0x79, 0x20, 0x66, 0x6f, 0x72, 0x6f, 0x6e, 0x20,
	  0x74, 0x68, 0x69, 0x73, 0x2d, 0x6c, 0x69, 0x6e, 0x6b, 0x22, 0x3e, 0x3b, 0x62,
	  0x6f, 0x72, 0x64, 0x65, 0x72, 0x61, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x61,
	  0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4e, 0x65, 0x77,
	  0x70, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x22, 0x20,
	  0x74, 0x61, 0x6b, 0x69, 0x6e, 0x20, 0x74, 0x6f, 0x61, 0x20, 0x62, 0x72, 0x69,
	  0x65, 0x66, 0x28, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x67, 0x72, 0x6f, 0x75,
	  0x70, 0x73, 0x2e, 0x3b, 0x20, 0x77, 0x69, 0x64, 0x74, 0x68, 0x65, 0x6e, 0x7a,
	  0x79, 0x6d, 0x65, 0x73, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x20, 0x69, 0x6e,
	  0x20, 0x6c, 0x61, 0x74, 0x65, 0x7b, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x74,
	  0x68, 0x65, 0x72, 0x61, 0x70, 0x79, 0x61, 0x20, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	  0x62, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x69, 0x6e, 0x6b, 0x73, 0x22, 0x3e,
	  0x0a, 0x28, 0x29, 0x3b, 0x22, 0x20, 0x72, 0x65, 0x61, 0x20, 0x70, 0x6c, 0x61,
	  0x63, 0x65, 0x5c, 0x75, 0x30, 0x30, 0x33, 0x43, 0x61, 0x61, 0x62, 0x6f, 0x75,
	  0x74, 0x20, 0x61, 0x74, 0x72, 0x3e, 0x0d, 0x0a, 0x09, 0x09, 0x63, 0x63, 0x6f,
	  0x75, 0x6e, 0x74, 0x20, 0x67, 0x69, 0x76, 0x65, 0x73, 0x20, 0x61, 0x3c, 0x53,
	  0x43, 0x52, 0x49, 0x50, 0x54, 0x52, 0x61, 0x69, 0x6c, 0x77, 0x61, 0x79, 0x74,
	  0x68, 0x65, 0x6d, 0x65, 0x73, 0x2f, 0x74, 0x6f, 0x6f, 0x6c, 0x62, 0x6f, 0x78,
	  0x42, 0x79, 0x49, 0x64, 0x28, 0x22, 0x78, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x73,
	  0x2c, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x69, 0x6e, 0x20, 0x73, 0x6f,
	  0x6d, 0x65, 0x20, 0x69, 0x66, 0x20, 0x28, 0x77, 0x69, 0x63, 0x6f, 0x6d, 0x69,
	  0x6e, 0x67, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x20, 0x55, 0x6e,
	  0x64, 0x65, 0x72, 0x20, 0x62, 0x75, 0x74, 0x20, 0x68, 0x61, 0x73, 0x68, 0x61,
	  0x6e, 0x64, 0x65, 0x64, 0x20, 0x6d, 0x61, 0x64, 0x65, 0x20, 0x62, 0x79, 0x74,
	  0x68, 0x61, 0x6e, 0x20, 0x69, 0x6e, 0x66, 0x65, 0x61, 0x72, 0x20, 0x6f, 0x66,
	  0x64, 0x65, 0x6e, 0x6f, 0x74, 0x65, 0x64, 0x2f, 0x69, 0x66, 0x72, 0x61, 0x6d,
	  0x65, 0x6c, 0x65, 0x66, 0x74, 0x20, 0x69, 0x6e, 0x76, 0x6f, 0x6c, 0x74, 0x61,
	  0x67, 0x65, 0x69, 0x6e, 0x20, 0x65, 0x61, 0x63, 0x68, 0x61, 0x26, 0x71, 0x75,
	  0x6f, 0x74, 0x3b, 0x62, 0x61, 0x73, 0x65, 0x20, 0x6f, 0x66, 0x49, 0x6e, 0x20,
	  0x6d, 0x61, 0x6e, 0x79, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x67, 0x6f, 0x72, 0x65,
	  0x67, 0x69, 0x6d, 0x65, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3c,
	  0x2f, 0x70, 0x3e, 0x0d, 0x0a, 0x3c, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x56, 0x61,
	  0x3b, 0x26, 0x67, 0x74, 0x3b, 0x3c, 0x2f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	  0x73, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x61, 0x74, 0x6d, 0x6f, 0x73, 0x74, 0x6c,
	  0x79, 0x20, 0x26, 0x61, 0x6d, 0x70, 0x3b, 0x72, 0x65, 0x20, 0x73, 0x69, 0x7a,
	  0x65, 0x3d, 0x22, 0x3c, 0x2f, 0x61, 0x3e, 0x3c, 0x2f, 0x68, 0x61, 0x20, 0x63,
	  0x6c, 0x61, 0x73, 0x73, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x48, 0x6f,
	  0x73, 0x74, 0x20, 0x3d, 0x20, 0x57, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x66,
	  0x65, 0x72, 0x74, 0x69, 0x6c, 0x65, 0x56, 0x61, 0x72, 0x69, 0x6f, 0x75, 0x73,
	  0x3d, 0x5b, 0x5d, 0x3b, 0x28, 0x66, 0x75, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61,
	  0x73, 0x2f, 0x3e, 0x3c, 0x2f, 0x74, 0x64, 0x3e, 0x61, 0x63, 0x74, 0x73, 0x20,
	  0x61, 0x73, 0x49, 0x6e, 0x20, 0x73, 0x6f, 0x6d, 0x65, 0x3e, 0x0d, 0x0a, 0x0d,
	  0x0a, 0x3c, 0x21, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x20, 0x3c, 0x62,
	  0x72, 0x20, 0x2f, 0x3e, 0x42, 0x65, 0x69, 0x6a, 0x69, 0x6e, 0x67, 0x63, 0x61,
	  0x74, 0x61, 0x6c, 0xc3, 0xa0, 0x64, 0x65, 0x75, 0x74, 0x73, 0x63, 0x68, 0x65,
	  0x75, 0x72, 0x6f, 0x70, 0x65, 0x75, 0x65, 0x75, 0x73, 0x6b, 0x61, 0x72, 0x61,
	  0x67, 0x61, 0x65, 0x69, 0x6c, 0x67, 0x65, 0x73, 0x76, 0x65, 0x6e, 0x73, 0x6b,
	  0x61, 0x65, 0x73, 0x70, 0x61, 0xc3, 0xb1, 0x61, 0x6d, 0x65, 0x6e, 0x73, 0x61,
	  0x6a, 0x65, 0x75, 0x73, 0x75, 0x61, 0x72, 0x69, 0x6f, 0x74, 0x72, 0x61, 0x62,
	  0x61, 0x6a, 0x6f, 0x6d, 0xc3, 0xa9, 0x78, 0x69, 0x63, 0x6f, 0x70, 0xc3, 0xa1,
	  0x67, 0x69, 0x6e, 0x61, 0x73, 0x69, 0x65, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x69,
	  0x73, 0x74, 0x65, 0x6d, 0x61, 0x6f, 0x63, 0x74, 0x75, 0x62, 0x72, 0x65, 0x64,
	  0x75, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x61, 0xc3, 0xb1, 0x61, 0x64, 0x69, 0x72,
	  0x65, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74,
	  0x6f, 0x6e, 0x75, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x6d, 0x65,
	  0x72, 0x61, 0x74, 0x72, 0x61, 0x76, 0xc3, 0xa9, 0x73, 0x67, 0x72, 0x61, 0x63,
	  0x69, 0x61, 0x73, 0x6e, 0x75, 0x65, 0x73, 0x74, 0x72, 0x61, 0x70, 0x72, 0x6f,
	  0x63, 0x65, 0x73, 0x6f, 0x65, 0x73, 0x74, 0x61, 0x64, 0x6f, 0x73, 0x63, 0x61,
	  0x6c, 0x69, 0x64, 0x61, 0x64, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6e,
	  0xc3, 0xba, 0x6d, 0x65, 0x72, 0x6f, 0x61, 0x63, 0x75, 0x65, 0x72, 0x64, 0x6f,
	  0x6d, 0xc3, 0xba, 0x73, 0x69, 0x63, 0x61, 0x6d, 0x69, 0x65, 0x6d, 0x62, 0x72,
	  0x6f, 0x6f, 0x66, 0x65, 0x72, 0x74, 0x61, 0x73, 0x61, 0x6c, 0x67, 0x75, 0x6e,
	  0x6f, 0x73, 0x70, 0x61, 0xc3, 0xad, 0x73, 0x65, 0x73, 0x65, 0x6a, 0x65, 0x6d,
	  0x70, 0x6c, 0x6f, 0x64, 0x65, 0x72, 0x65, 0x63, 0x68, 0x6f, 0x61, 0x64, 0x65,
	  0x6d, 0xc3, 0xa1, 0x73, 0x70, 0x72, 0x69, 0x76, 0x61, 0x64, 0x6f, 0x61, 0x67,
	  0x72, 0x65, 0x67, 0x61, 0x72, 0x65, 0x6e, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x70,
	  0x6f, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x68, 0x6f, 0x74, 0x65, 0x6c, 0x65, 0x73,
	  0x73, 0x65, 0x76, 0x69, 0x6c, 0x6c, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x72,
	  0x6f, 0xc3, 0xba, 0x6c, 0x74, 0x69, 0x6d, 0x6f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	  0x6f, 0x73, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x6f, 0x63, 0x75, 0x6c, 0x74,
	  0x75, 0x72, 0x61, 0x6d, 0x75, 0x6a, 0x65, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	  0x72, 0x61, 0x64, 0x61, 0x61, 0x6e, 0x75, 0x6e, 0x63, 0x69, 0x6f, 0x65, 0x6d,
	  0x62, 0x61, 0x72, 0x67, 0x6f, 0x6d, 0x65, 0x72, 0x63, 0x61, 0x64, 0x6f, 0x67,
	  0x72, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x65, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f,
	  0x6d, 0x65, 0x6a, 0x6f, 0x72, 0x65, 0x73, 0x66, 0x65, 0x62, 0x72, 0x65, 0x72,
	  0x6f, 0x64, 0x69, 0x73, 0x65, 0xc3, 0xb1, 0x6f, 0x74, 0x75, 0x72, 0x69, 0x73,
	  0x6d, 0x6f, 0x63, 0xc3, 0xb3, 0x64, 0x69, 0x67, 0x6f, 0x70, 0x6f, 0x72, 0x74,
	  0x61, 0x64, 0x61, 0x65, 0x73, 0x70, 0x61, 0x63, 0x69, 0x6f, 0x66, 0x61, 0x6d,
	  0x69, 0x6c, 0x69, 0x61, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x69, 0x6f, 0x70, 0x65,
	  0x72, 0x6d, 0x69, 0x74, 0x65, 0x67, 0x75, 0x61, 0x72, 0x64, 0x61, 0x72, 0x61,
	  0x6c, 0x67, 0x75, 0x6e, 0x61, 0x73, 0x70, 0x72, 0x65, 0x63, 0x69, 0x6f, 0x73,
	  0x61, 0x6c, 0x67, 0x75, 0x69, 0x65, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x64,
	  0x6f, 0x76, 0x69, 0x73, 0x69, 0x74, 0x61, 0x73, 0x74, 0xc3, 0xad, 0x74, 0x75,
	  0x6c, 0x6f, 0x63, 0x6f, 0x6e, 0x6f, 0x63, 0x65, 0x72, 0x73, 0x65, 0x67, 0x75,
	  0x6e, 0x64, 0x6f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6a, 0x6f, 0x66, 0x72, 0x61,
	  0x6e, 0x63, 0x69, 0x61, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x6f, 0x73, 0x73, 0x65,
	  0x67, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x65, 0x6e, 0x65, 0x6d, 0x6f, 0x73, 0x65,
	  0x66, 0x65, 0x63, 0x74, 0x6f, 0x73, 0x6d, 0xc3, 0xa1, 0x6c, 0x61, 0x67, 0x61,
	  0x73, 0x65, 0x73, 0x69, 0xc3, 0xb3, 0x6e, 0x72, 0x65, 0x76, 0x69, 0x73, 0x74,
	  0x61, 0x67, 0x72, 0x61, 0x6e, 0x61, 0x64, 0x61, 0x63, 0x6f, 0x6d, 0x70, 0x72,
	  0x61, 0x72, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x6f, 0x67, 0x61, 0x72, 0x63,
	  0xc3, 0xad, 0x61, 0x61, 0x63, 0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x65, 0x63, 0x75,
	  0x61, 0x64, 0x6f, 0x72, 0x71, 0x75, 0x69, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x6e,
	  0x63, 0x6c, 0x75, 0x73, 0x6f, 0x64, 0x65, 0x62, 0x65, 0x72, 0xc3, 0xa1, 0x6d,
	  0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x68, 0x6f, 0x6d, 0x62, 0x72, 0x65, 0x73,
	  0x6d, 0x75, 0x65, 0x73, 0x74, 0x72, 0x61, 0x70, 0x6f, 0x64, 0x72, 0xc3, 0xad,
	  0x61, 0x6d, 0x61, 0xc3, 0xb1, 0x61, 0x6e, 0x61, 0xc3, 0xba, 0x6c, 0x74, 0x69,
	  0x6d, 0x61, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x6f, 0x73, 0x6f, 0x66, 0x69, 0x63,
	  0x69, 0x61, 0x6c, 0x74, 0x61, 0x6d, 0x62, 0x69, 0x65, 0x6e, 0x6e, 0x69, 0x6e,
	  0x67, 0xc3, 0xba, 0x6e, 0x73, 0x61, 0x6c, 0x75, 0x64, 0x6f, 0x73, 0x70, 0x6f,
	  0x64, 0x65, 0x6d, 0x6f, 0x73, 0x6d, 0x65, 0x6a, 0x6f, 0x72, 0x61, 0x72, 0x70,
	  0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	  0x73, 0x73, 0x68, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x73, 0x65, 0x63,
	  0x75, 0x72, 0x69, 0x74, 0x79, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	  0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x63, 0x61, 0x6d, 0x70, 0x61,
	  0x69, 0x67, 0x6e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x63, 0x61,
	  0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	  0x6c, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x72, 0x65, 0x73, 0x65,
	  0x72, 0x76, 0x65, 0x64, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65,
	  0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69,
	  0x74, 0x65, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x6d, 0x69, 0x6c,
	  0x69, 0x74, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79,
	  0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x6d, 0x61, 0x74, 0x65, 0x72,
	  0x69, 0x61, 0x6c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x7a, 0x2d,
	  0x69, 0x6e, 0x64, 0x65, 0x78, 0x3a, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	  0x73, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x70,
	  0x6c, 0x65, 0x74, 0x65, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x70,
	  0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c,
	  0x65, 0x73, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x6d, 0x6f, 0x76,
	  0x65, 0x6d, 0x65, 0x6e, 0x74, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	  0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6c, 0x69, 0x74,
	  0x69, 0x63, 0x73, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x72, 0x65,
	  0x6c, 0x69, 0x67, 0x69, 0x6f, 0x6e, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61,
	  0x6c, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x72, 0x65, 0x67, 0x69,
	  0x73, 0x74, 0x65, 0x72, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x73, 0x64,
	  0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	  0x6f, 0x6c, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x65, 0x74,
	  0x74, 0x69, 0x6e, 0x67, 0x73, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	  0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x6c, 0x65, 0x61, 0x72, 0x6e,
	  0x69, 0x6e, 0x67, 0x61, 0x6e, 0x79, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x61, 0x62,
	  0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	  0x73, 0x6f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x6d, 0x61, 0x67, 0x61,
	  0x7a, 0x69, 0x6e, 0x65, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x74,
	  0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75,
	  0x72, 0x65, 0x76, 0x61, 0x72, 0x69, 0x6f, 0x75, 0x73, 0x20, 0x3c, 0x73, 0x74,
	  0x72, 0x6f, 0x6e, 0x67, 0x3e, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	  0x73, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x74, 0x6f, 0x67, 0x65, 0x74,
	  0x68, 0x65, 0x72, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x62, 0x65,
	  0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	  0x64, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x66, 0x6f, 0x6f, 0x74,
	  0x62, 0x61, 0x6c, 0x6c, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4c,
	  0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e,
	  0x63, 0x65, 0x72, 0x65, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x74, 0x72, 0x61,
	  0x63, 0x6b, 0x69, 0x6e, 0x67, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	  0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x73, 0x74, 0x75, 0x64, 0x65,
	  0x6e, 0x74, 0x73, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6c, 0x79, 0x66, 0x69,
	  0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x6e, 0x6f, 0x72, 0x74, 0x68, 0x65, 0x72,
	  0x6e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x66, 0x65, 0x73, 0x74,
	  0x69, 0x76, 0x61, 0x6c, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x6c,
	  0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	  0x65, 0x74, 0x64, 0x72, 0x6f, 0x70, 0x64, 0x6f, 0x77, 0x6e, 0x70, 0x72, 0x61,
	  0x63, 0x74, 0x69, 0x63, 0x65, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65,
	  0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x72, 0x72, 0x69,
	  0x61, 0x67, 0x65, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x70, 0x72,
	  0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76,
	  0x65, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x61, 0x6e, 0x61, 0x6c,
	  0x79, 0x73, 0x69, 0x73, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x62,
	  0x61, 0x6e, 0x6e, 0x65, 0x72, 0x22, 0x3e, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61,
	  0x73, 0x65, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x72, 0x65, 0x67,
	  0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65,
	  0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x62, 0x6f, 0x6f, 0x6b, 0x6d,
	  0x61, 0x72, 0x6b, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x63, 0x68,
	  0x65, 0x6d, 0x69, 0x63, 0x61, 0x6c, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f,
	  0x6e, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x65, 0x70, 0x61,
	  0x72, 0x61, 0x74, 0x65, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x63,
	  0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61,
	  0x72, 0x65, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x64, 0x65, 0x6c,
	  0x69, 0x76, 0x65, 0x72, 0x79, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	  0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x3d, 0x20, 0x66, 0x61, 0x6c,
	  0x73, 0x65, 0x3b, 0x66, 0x6f, 0x72, 0x28, 0x76, 0x61, 0x72, 0x20, 0x61, 0x63,
	  0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	  0x79, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x72, 0x69, 0x64, 0x65, 0x6e,
	  0x74, 0x69, 0x74, 0x79, 0x61, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x65,
	  0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	  0x65, 0x64, 0x64, 0x6f, 0x6d, 0x65, 0x73, 0x74, 0x69, 0x63, 0x69, 0x6e, 0x63,
	  0x6c, 0x75, 0x64, 0x65, 0x73, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64,
	  0x68, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x76, 0x65, 0x72, 0x74, 0x69,
	  0x63, 0x61, 0x6c, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x61, 0x70,
	  0x70, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	  0x73, 0x6c, 0x6f, 0x67, 0x6f, 0x22, 0x3e, 0x3c, 0x61, 0x64, 0x61, 0x75, 0x67,
	  0x68, 0x74, 0x65, 0x72, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x22, 0x20, 0x63,
	  0x75, 0x6c, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x69,
	  0x65, 0x73, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x61, 0x73, 0x73,
	  0x65, 0x6d, 0x62, 0x6c, 0x79, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x66, 0x75, 0x6c,
	  0x74, 0x65, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x66, 0x69, 0x6e, 0x69, 0x73,
	  0x68, 0x65, 0x64, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x63, 0x72,
	  0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x63, 0x67, 0x69, 0x2d, 0x62, 0x69, 0x6e,
	  0x2f, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x73, 0x72, 0x65, 0x71, 0x75,
	  0x69, 0x72, 0x65, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x62,
	  0x65, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	  0x65, 0x73, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x65, 0x78, 0x65,
	  0x72, 0x63, 0x69, 0x73, 0x65, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x6c, 0x79,
	  0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	  0x61, 0x6e, 0x74, 0x61, 0x63, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x4d, 0x61,
	  0x67, 0x61, 0x7a, 0x69, 0x6e, 0x65, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	  0x74, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x62, 0x6f, 0x74, 0x74,
	  0x6f, 0x6d, 0x22, 0x3e, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x3a,
	  0x20, 0x26, 0x71, 0x75, 0x6f, 0x74, 0x3b, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64,
	  0x65, 0x64, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x53, 0x6f, 0x66,
	  0x74, 0x77, 0x61, 0x72, 0x65, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	  0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x6e,
	  0x67, 0x74, 0x68, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x73, 0x6c,
	  0x69, 0x67, 0x68, 0x74, 0x6c, 0x79, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e,
	  0x67, 0x74, 0x65, 0x78, 0x74, 0x61, 0x72, 0x65, 0x61, 0x63, 0x75, 0x72, 0x72,
	  0x65, 0x6e, 0x63, 0x79, 0x65, 0x76, 0x65, 0x72, 0x79, 0x6f, 0x6e, 0x65, 0x73,
	  0x74, 0x72, 0x61, 0x69, 0x67, 0x68, 0x74, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	  0x65, 0x72, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x70, 0x72, 0x6f,
	  0x64, 0x75, 0x63, 0x65, 0x64, 0x68, 0x65, 0x72, 0x69, 0x74, 0x61, 0x67, 0x65,
	  0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x61, 0x62, 0x73, 0x6f, 0x6c,
	  0x75, 0x74, 0x65, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x72, 0x65,
	  0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x22,
	  0x20, 0x76, 0x69, 0x6f, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x61, 0x6e, 0x79, 0x77,
	  0x68, 0x65, 0x72, 0x65, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x73, 0x6c,
	  0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x64, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74,
	  0x6c, 0x79, 0x61, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x66, 0x6f, 0x6c,
	  0x6c, 0x6f, 0x77, 0x65, 0x64, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65,
	  0x62, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x69, 0x6e, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	  0x64, 0x65, 0x64, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x64, 0x69, 0x6e,
	  0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x24, 0x28, 0x74, 0x68, 0x69, 0x73, 0x29,
	  0x2e, 0x72, 0x65, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x3e, 0x3c, 0x74, 0x72,
	  0x3e, 0x3c, 0x74, 0x64, 0x63, 0x6f, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x72,
	  0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x64, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61,
	  0x74, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x3c, 0x75, 0x6c,
	  0x20, 0x69, 0x64, 0x3d, 0x22, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	  0x48, 0x6f, 0x6d, 0x65, 0x3c, 0x2f, 0x61, 0x3e, 0x77, 0x65, 0x62, 0x73, 0x69,
	  0x74, 0x65, 0x73, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x61, 0x6c,
	  0x74, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x72, 0x65, 0x6c,
	  0x79, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x6d, 0x65, 0x73, 0x73,
	  0x61, 0x67, 0x65, 0x73, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x61,
	  0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x3e, 0x73, 0x6f, 0x6d, 0x65, 0x77, 0x68,
	  0x61, 0x74, 0x76, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x57, 0x65, 0x73,
	  0x74, 0x65, 0x72, 0x6e, 0x20, 0x20, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x3d, 0x22,
	  0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	  0x61, 0x63, 0x74, 0x76, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x44, 0x6f,
	  0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74,
	  0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x22, 0x3e, 0x0a, 0x6d, 0x65, 0x61, 0x73,
	  0x75, 0x72, 0x65, 0x73, 0x77, 0x69, 0x64, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x76,
	  0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x69, 0x6e, 0x76, 0x6f, 0x6c, 0x76,
	  0x65, 0x64, 0x76, 0x69, 0x72, 0x67, 0x69, 0x6e, 0x69, 0x61, 0x6e, 0x6f, 0x72,
	  0x6d, 0x61, 0x6c, 0x6c, 0x79, 0x68, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x65, 0x64,
	  0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x73, 0x74, 0x61, 0x6e, 0x64,
	  0x69, 0x6e, 0x67, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x65,
	  0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65,
	  0x64, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x61, 0x63, 0x63, 0x75,
	  0x72, 0x61, 0x74, 0x65, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x73,
	  0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69,
	  0x61, 0x6c, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x63, 0x72, 0x69,
	  0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x79,
	  0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x50, 0x65, 0x72, 0x73, 0x6f,
	  0x6e, 0x61, 0x6c, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x76, 0x61,
	  0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65,
	  0x64, 0x2e, 0x6a, 0x70, 0x67, 0x22, 0x20, 0x2f, 0x3e, 0x6d, 0x61, 0x63, 0x68,
	  0x69, 0x6e, 0x65, 0x73, 0x3c, 0x2f, 0x68, 0x32, 0x3e, 0x0a, 0x20, 0x20, 0x6b,
	  0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,
	  0x6c, 0x79, 0x62, 0x72, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x73, 0x63, 0x6f, 0x6d,
	  0x62, 0x69, 0x6e, 0x65, 0x64, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	  0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x65, 0x78, 0x70, 0x65, 0x63,
	  0x74, 0x65, 0x64, 0x61, 0x64, 0x65, 0x71, 0x75, 0x61, 0x74, 0x65, 0x70, 0x61,
	  0x6b, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x22,
	  0x20, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x62, 0x6c, 0x65, 0x3c, 0x2f, 0x6c, 0x61,
	  0x62, 0x65, 0x6c, 0x3e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x62,
	  0x72, 0x69, 0x6e, 0x67, 0x69, 0x6e, 0x67, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61,
	  0x73, 0x65, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6f, 0x72, 0x70, 0x6c, 0x75,
	  0x67, 0x69, 0x6e, 0x73, 0x2f, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20,
	  0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x3e, 0x22, 0x20, 0x6e, 0x61, 0x6d,
	  0x65, 0x3d, 0x22, 0x20, 0x28, 0x26, 0x71, 0x75, 0x6f, 0x74, 0x3b, 0x67, 0x72,
	  0x61, 0x64, 0x75, 0x61, 0x74, 0x65, 0x3c, 0x2f, 0x68, 0x65, 0x61, 0x64, 0x3e,
	  0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x65, 0x6d, 0x61, 0x6c, 0x61,
	  0x79, 0x73, 0x69, 0x61, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x6d,
	  0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x3b, 0x68, 0x65, 0x69, 0x67, 0x68,
	  0x74, 0x3a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x63, 0x68, 0x61,
	  0x6e, 0x67, 0x69, 0x6e, 0x67, 0x62, 0x61, 0x63, 0x6b, 0x20, 0x74, 0x6f, 0x20,
	  0x63, 0x61, 0x74, 0x68, 0x6f, 0x6c, 0x69, 0x63, 0x70, 0x61, 0x74, 0x74, 0x65,
	  0x72, 0x6e, 0x73, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3a, 0x20, 0x23, 0x67, 0x72,
	  0x65, 0x61, 0x74, 0x65, 0x73, 0x74, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65,
	  0x73, 0x72, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x3c, 0x2f, 0x75, 0x6c,
	  0x3e, 0x0a, 0x09, 0x09, 0x3c, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x20, 0x63,
	  0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x73, 0x63, 0x6c, 0x6f, 0x74, 0x68, 0x69,
	  0x6e, 0x67, 0x77, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x3c, 0x6c, 0x69,
	  0x20, 0x69, 0x64, 0x3d, 0x22, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	  0x63, 0x61, 0x72, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x73, 0x65, 0x6e, 0x74, 0x65,
	  0x6e, 0x63, 0x65, 0x3c, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x3e, 0x63, 0x6f,
	  0x6e, 0x74, 0x72, 0x61, 0x73, 0x74, 0x74, 0x68, 0x69, 0x6e, 0x6b, 0x69, 0x6e,
	  0x67, 0x63, 0x61, 0x74, 0x63, 0x68, 0x28, 0x65, 0x29, 0x73, 0x6f, 0x75, 0x74,
	  0x68, 0x65, 0x72, 0x6e, 0x4d, 0x69, 0x63, 0x68, 0x61, 0x65, 0x6c, 0x20, 0x6d,
	  0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x63, 0x61, 0x72, 0x6f, 0x75, 0x73,
	  0x65, 0x6c, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x69, 0x6e, 0x74,
	  0x65, 0x72, 0x69, 0x6f, 0x72, 0x2e, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x28, 0x22,
	  0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x63, 0x74, 0x6f, 0x62,
	  0x65, 0x72, 0x20, 0x29, 0x7b, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x69, 0x6d,
	  0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x2d, 0x2d, 0x26, 0x67, 0x74, 0x3b, 0x0a,
	  0x0a, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x63, 0x68, 0x61, 0x69,
	  0x72, 0x6d, 0x61, 0x6e, 0x2e, 0x70, 0x6e, 0x67, 0x22, 0x20, 0x2f, 0x3e, 0x73,
	  0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x69, 0x63, 0x68, 0x61, 0x72,
	  0x64, 0x20, 0x77, 0x68, 0x61, 0x74, 0x65, 0x76, 0x65, 0x72, 0x70, 0x72, 0x6f,
	  0x62, 0x61, 0x62, 0x6c, 0x79, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	  0x62, 0x61, 0x73, 0x65, 0x62, 0x61, 0x6c, 0x6c, 0x6a, 0x75, 0x64, 0x67, 0x6d,
	  0x65, 0x6e, 0x74, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x2e, 0x63,
	  0x73, 0x73, 0x22, 0x20, 0x2f, 0x3e, 0x20, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74,
	  0x65, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x64, 0x65, 0x66, 0x61,
	  0x75, 0x6c, 0x74, 0x22, 0x2f, 0x3e, 0x3c, 0x2f, 0x61, 0x3e, 0x0d, 0x0a, 0x65,
	  0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x73, 0x63, 0x6f, 0x74, 0x6c, 0x61,
	  0x6e, 0x64, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x71, 0x75, 0x61,
	  0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x20, 0x49, 0x53, 0x42, 0x4e, 0x20, 0x30,
	  0x64, 0x69, 0x64, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x61,
	  0x6e, 0x63, 0x65, 0x2d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2d, 0x22, 0x20,
	  0x6c, 0x61, 0x6e, 0x67, 0x3d, 0x22, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72,
	  0x73, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x74,
	  0x61, 0x69, 0x6e, 0x73, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x6d,
	  0x69, 0x6e, 0x69, 0x73, 0x74, 0x65, 0x72, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69,
	  0x6f, 0x6e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x74, 0x61,
	  0x6c, 0x69, 0x61, 0x6e, 0x6f, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61,
	  0x73, 0x74, 0x72, 0x6f, 0x6e, 0x67, 0x6c, 0x79, 0x3a, 0x20, 0x27, 0x68, 0x74,
	  0x74, 0x70, 0x3a, 0x27, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x27, 0x63, 0x6f,
	  0x76, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e,
	  0x67, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x65, 0x64, 0x42, 0x72, 0x69, 0x74,
	  0x69, 0x73, 0x68, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x46,
	  0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x6f,
	  0x75, 0x73, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x63, 0x6f, 0x6e,
	  0x63, 0x65, 0x72, 0x6e, 0x73, 0x41, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x61, 0x6e,
	  0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x64, 0x69, 0x76, 0x20, 0x69,
	  0x64, 0x3d, 0x22, 0x57, 0x69, 0x6c, 0x6c, 0x69, 0x61, 0x6d, 0x20, 0x70, 0x72,
	  0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	  0x74, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x73, 0x65, 0x63, 0x74,
	  0x69, 0x6f, 0x6e, 0x20, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x66,
	  0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	  0x72, 0x79, 0x6c, 0x61, 0x77, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3c, 0x73, 0x63,
	  0x72, 0x69, 0x70, 0x74, 0x3e, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x3d, 0x22,
	  0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x20, 0x6d, 0x61, 0x78, 0x69,
	  0x6d, 0x75, 0x6d, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x3e, 0x3c, 0x2f,
	  0x74, 0x61, 0x62, 0x6c, 0x65, 0x3e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	  0x73, 0x68, 0x61, 0x6d, 0x69, 0x6c, 0x74, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72,
	  0x65, 0x6e, 0x74, 0x20, 0x63, 0x61, 0x6e, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x63,
	  0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2f, 0x74, 0x68, 0x65, 0x6d, 0x65,
	  0x73, 0x2f, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x6f, 0x70, 0x74,
	  0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x70, 0x6f, 0x72, 0x74, 0x75, 0x67, 0x61, 0x6c,
	  0x76, 0x61, 0x6c, 0x75, 0x65, 0x3d, 0x22, 0x22, 0x69, 0x6e, 0x74, 0x65, 0x72,
	  0x76, 0x61, 0x6c, 0x77, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x65, 0x6e,
	  0x74, 0x69, 0x74, 0x6c, 0x65, 0x64, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x69, 0x65,
	  0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x22, 0x20, 0x6d, 0x65, 0x61, 0x73,
	  0x75, 0x72, 0x65, 0x64, 0x74, 0x68, 0x6f, 0x75, 0x73, 0x61, 0x6e, 0x64, 0x73,
	  0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x26, 0x68, 0x65, 0x6c, 0x6c, 0x69,
	  0x70, 0x3b, 0x6e, 0x65, 0x77, 0x20, 0x44, 0x61, 0x74, 0x65, 0x22, 0x20, 0x73,
	  0x69, 0x7a, 0x65, 0x3d, 0x22, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	  0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x22, 0x20, 0x22, 0x20, 0x2f, 0x3e, 0x3c,
	  0x2f, 0x61, 0x3e, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x22, 0x3e, 0x73, 0x65,
	  0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61,
	  0x6c, 0x6f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x6f, 0x70, 0x69, 0x6e,
	  0x69, 0x6f, 0x6e, 0x73, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x6f, 0x69, 0x73, 0x6c,
	  0x69, 0x6e, 0x6b, 0x73, 0x22, 0x3e, 0x0a, 0x09, 0x3c, 0x74, 0x69, 0x74, 0x6c,
	  0x65, 0x3e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x73, 0x61, 0x74,
	  0x75, 0x72, 0x64, 0x61, 0x79, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c,
	  0x69, 0x74, 0x65, 0x6d, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	  0x65, 0x65, 0x72, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x64, 0x65,
	  0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	  0x6c, 0x3d, 0x22, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x22, 0x45, 0x73, 0x70, 0x61,
	  0xc3, 0xb1, 0x6f, 0x6c, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x73,
	  0x75, 0x62, 0x6d, 0x69, 0x74, 0x22, 0x20, 0x65, 0x72, 0x26, 0x71, 0x75, 0x6f,
	  0x74, 0x3b, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x79, 0x6d,
	  0x70, 0x74, 0x6f, 0x6d, 0x73, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x65, 0x64,
	  0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x72, 0x69, 0x67, 0x68, 0x74,
	  0x22, 0x3e, 0x3c, 0x70, 0x6c, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x73, 0x74,
	  0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	  0x2e, 0x6c, 0x65, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x20, 0x20, 0x62, 0x6f, 0x72,
	  0x64, 0x65, 0x72, 0x3d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x63,
	  0x65, 0x6e, 0x74, 0x65, 0x72, 0x22, 0x3e, 0x2e, 0x0a, 0x0a, 0x53, 0x6f, 0x6d,
	  0x65, 0x20, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x73, 0x75, 0x69,
	  0x74, 0x61, 0x62, 0x6c, 0x65, 0x62, 0x75, 0x6c, 0x67, 0x61, 0x72, 0x69, 0x61,
	  0x2e, 0x73, 0x68, 0x6f, 0x77, 0x28, 0x29, 0x3b, 0x64, 0x65, 0x73, 0x69, 0x67,
	  0x6e, 0x65, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x20, 0x63, 0x6f,
	  0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	  0x73, 0x77, 0x69, 0x6c, 0x6c, 0x69, 0x61, 0x6d, 0x73, 0x4f, 0x72, 0x69, 0x67,
	  0x69, 0x6e, 0x61, 0x6c, 0x22, 0x3e, 0x3c, 0x73, 0x70, 0x61, 0x6e, 0x3e, 0x73,
	  0x65, 0x61, 0x72, 0x63, 0x68, 0x22, 0x3e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	  0x6f, 0x72, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x61, 0x20, 0x26,
	  0x71, 0x75, 0x6f, 0x74, 0x3b, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67,
	  0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x76, 0x69, 0x73,
	  0x69, 0x6f, 0x6e, 0x2e, 0x20, 0x0a, 0x0a, 0x54, 0x68, 0x65, 0x20, 0x79, 0x6f,
	  0x75, 0x72, 0x73, 0x65, 0x6c, 0x66, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	  0x20, 0x6d, 0x69, 0x63, 0x68, 0x69, 0x67, 0x61, 0x6e, 0x45, 0x6e, 0x67, 0x6c,
	  0x69, 0x73, 0x68, 0x20, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x62, 0x69, 0x61, 0x70,
	  0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x69,
	  0x6e, 0x67, 0x64, 0x72, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x66, 0x61, 0x63,
	  0x69, 0x6c, 0x69, 0x74, 0x79, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64,
	  0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x66, 0x69, 0x63,
	  0x65, 0x72, 0x73, 0x52, 0x75, 0x73, 0x73, 0x69, 0x61, 0x6e, 0x20, 0x67, 0x65,
	  0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x38, 0x38, 0x35, 0x39, 0x2d, 0x31,
	  0x22, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x66, 0x61, 0x6d, 0x69,
	  0x6c, 0x69, 0x61, 0x72, 0x20, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x6d,
	  0x61, 0x72, 0x67, 0x69, 0x6e, 0x3a, 0x30, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	  0x6e, 0x74, 0x76, 0x69, 0x65, 0x77, 0x70, 0x6f, 0x72, 0x74, 0x63, 0x6f, 0x6e,
	  0x74, 0x61, 0x63, 0x74, 0x73, 0x2d, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x3e,
	  0x70, 0x6f, 0x72, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x6c, 0x65, 0x6e, 0x67,
	  0x74, 0x68, 0x20, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x69, 0x6e,
	  0x76, 0x6f, 0x6c, 0x76, 0x65, 0x73, 0x61, 0x74, 0x6c, 0x61, 0x6e, 0x74, 0x69,
	  0x63, 0x6f, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x3d, 0x22, 0x64, 0x65, 0x66, 0x61,
	  0x75, 0x6c, 0x74, 0x2e, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x70,
	  0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x67, 0x6c, 0x6f, 0x73, 0x73, 0x61,
	  0x72, 0x79, 0x0a, 0x0a, 0x41, 0x66, 0x74, 0x65, 0x72, 0x20, 0x67, 0x75, 0x69,
	  0x64, 0x61, 0x6e, 0x63, 0x65, 0x3c, 0x2f, 0x74, 0x64, 0x3e, 0x3c, 0x74, 0x64,
	  0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x6d, 0x69, 0x64, 0x64, 0x6c,
	  0x65, 0x22, 0x3e, 0x63, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x64, 0x69,
	  0x73, 0x70, 0x6c, 0x61, 0x79, 0x73, 0x73, 0x63, 0x6f, 0x74, 0x74, 0x69, 0x73,
	  0x68, 0x6a, 0x6f, 0x6e, 0x61, 0x74, 0x68, 0x61, 0x6e, 0x6d, 0x61, 0x6a, 0x6f,
	  0x72, 0x69, 0x74, 0x79, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x63,
	  0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x74, 0x68, 0x61, 0x69, 0x6c, 0x61,
	  0x6e, 0x64, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x73, 0x3c, 0x68, 0x65,
	  0x61, 0x64, 0x3e, 0x0a, 0x09, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64,
	  0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	  0x65, 0x72, 0x3b, 0x74, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3c, 0x2f,
	  0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x3e, 0x6f, 0x6b, 0x6c, 0x61, 0x68, 0x6f, 0x6d,
	  0x61, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x69, 0x6e, 0x76, 0x65,
	  0x73, 0x74, 0x6f, 0x72, 0x30, 0x22, 0x20, 0x61, 0x6c, 0x74, 0x3d, 0x22, 0x68,
	  0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	  0x63, 0x65, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x64, 0x20, 0x28, 0x77,
	  0x68, 0x69, 0x63, 0x68, 0x20, 0x2e, 0x20, 0x41, 0x66, 0x74, 0x65, 0x72, 0x20,
	  0x63, 0x6f, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x72, 0x76, 0x69, 0x73, 0x69, 0x74,
	  0x69, 0x6e, 0x67, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x70, 0x72,
	  0x69, 0x6d, 0x61, 0x72, 0x79, 0x20, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x22,
	  0x20, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x22, 0x71, 0x75, 0x69, 0x63,
	  0x6b, 0x6c, 0x79, 0x20, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x65,
	  0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x3b, 0x72, 0x65, 0x74, 0x75, 0x72,
	  0x6e, 0x20, 0x3b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3a, 0x23, 0x20, 0x68, 0x65,
	  0x69, 0x67, 0x68, 0x74, 0x3d, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c,
	  0x2c, 0x20, 0x26, 0x71, 0x75, 0x6f, 0x74, 0x3b, 0x20, 0x63, 0x68, 0x65, 0x63,
	  0x6b, 0x65, 0x64, 0x2e, 0x6d, 0x69, 0x6e, 0x2e, 0x6a, 0x73, 0x22, 0x6d, 0x61,
	  0x67, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x3e, 0x3c, 0x2f, 0x61, 0x3e, 0x3c, 0x2f,
	  0x68, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x20, 0x57, 0x68,
	  0x69, 0x6c, 0x65, 0x20, 0x74, 0x68, 0x75, 0x72, 0x73, 0x64, 0x61, 0x79, 0x64,
	  0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x26, 0x65, 0x61, 0x63, 0x75, 0x74,
	  0x65, 0x3b, 0x68, 0x61, 0x73, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x76, 0x61,
	  0x6c, 0x75, 0x61, 0x74, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67,
	  0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x70, 0x61, 0x74, 0x69, 0x65,
	  0x6e, 0x74, 0x73, 0x20, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x20, 0x63, 0x6f,
	  0x6c, 0x6f, 0x72, 0x61, 0x64, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	  0x22, 0x63, 0x61, 0x6d, 0x70, 0x62, 0x65, 0x6c, 0x6c, 0x3c, 0x21, 0x2d, 0x2d,
	  0x20, 0x65, 0x6e, 0x64, 0x3c, 0x2f, 0x73, 0x70, 0x61, 0x6e, 0x3e, 0x3c, 0x3c,
	  0x62, 0x72, 0x20, 0x2f, 0x3e, 0x0d, 0x0a, 0x5f, 0x70, 0x6f, 0x70, 0x75, 0x70,
	  0x73, 0x7c, 0x73, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2c, 0x26, 0x71,
	  0x75, 0x6f, 0x74, 0x3b, 0x20, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x20,
	  0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x20, 0x61, 0x73, 0x73, 0x69, 0x67,
	  0x6e, 0x65, 0x64, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3a, 0x20, 0x3c, 0x62,
	  0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x6c, 0x65, 0x26, 0x71, 0x75, 0x6f, 0x74,
	  0x3b, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3d, 0x22, 0x20, 0x43, 0x6f, 0x6d,
	  0x70, 0x61, 0x6e, 0x79, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x3c,
	  0x69, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x20, 0x62, 0x65, 0x6c, 0x69, 0x65, 0x76,
	  0x65, 0x73, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x6d, 0x61, 0x72,
	  0x73, 0x68, 0x61, 0x6c, 0x6c, 0x70, 0x61, 0x72, 0x74, 0x20, 0x6f, 0x66, 0x20,
	  0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x6c, 0x79, 0x29, 0x2e, 0x0a, 0x0a, 0x54,
	  0x68, 0x65, 0x20, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x6d, 0x75,
	  0x63, 0x68, 0x20, 0x6f, 0x66, 0x20, 0x3c, 0x2f, 0x73, 0x70, 0x61, 0x6e, 0x3e,
	  0x0a, 0x22, 0x20, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x73, 0x72, 0x74, 0x75, 0x67,
	  0x75, 0xc3, 0xaa, 0x73, 0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x54, 0x6f, 0x20,
	  0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x3c, 0x68, 0x65, 0x61, 0x64, 0x3e,
	  0x0d, 0x0a, 0x61, 0x74, 0x74, 0x6f, 0x72, 0x6e, 0x65, 0x79, 0x65, 0x6d, 0x70,
	  0x68, 0x61, 0x73, 0x69, 0x73, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x73,
	  0x66, 0x61, 0x6e, 0x63, 0x79, 0x62, 0x6f, 0x78, 0x77, 0x6f, 0x72, 0x6c, 0x64,
	  0x27, 0x73, 0x20, 0x77, 0x69, 0x6c, 0x64, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x68,
	  0x65, 0x63, 0x6b, 0x65, 0x64, 0x3d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	  0x73, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x70, 0x78, 0x3b, 0x66,
	  0x6f, 0x6e, 0x74, 0x2d, 0x20, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x6a,
	  0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x73, 0x62, 0x65, 0x6c, 0x69, 0x65, 0x76,
	  0x65, 0x64, 0x76, 0x61, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x68, 0x6f,
	  0x6d, 0x70, 0x73, 0x6f, 0x6e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67,
	  0x61, 0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69,
	  0x61, 0x6c, 0x20, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3d, 0x30, 0x63, 0x68,
	  0x65, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x3c, 0x2f, 0x74, 0x62, 0x6f, 0x64, 0x79,
	  0x3e, 0x3c, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x20, 0x43, 0x6f, 0x6d, 0x70,
	  0x6c, 0x65, 0x74, 0x65, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x66, 0x69, 0x78, 0x0a,
	  0x3c, 0x68, 0x65, 0x61, 0x64, 0x3e, 0x0a, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c,
	  0x65, 0x20, 0x3c, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x66, 0x69, 0x6e,
	  0x64, 0x69, 0x6e, 0x67, 0x73, 0x72, 0x6f, 0x6c, 0x65, 0x20, 0x69, 0x6e, 0x20,
	  0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x20, 0x20, 0x4f, 0x63, 0x74, 0x6f,
	  0x62, 0x65, 0x72, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x20, 0x65, 0x78,
	  0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x75, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f,
	  0x20, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x6f, 0x70, 0x65, 0x72,
	  0x61, 0x74, 0x65, 0x64, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x65,
	  0x6e, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	  0x64, 0x73, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x20, 0x6e, 0x75,
	  0x6d, 0x62, 0x65, 0x72, 0x73, 0x20, 0x20, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e,
	  0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x6f, 0x6e, 0x53, 0x75, 0x62,
	  0x6d, 0x69, 0x74, 0x6d, 0x61, 0x72, 0x79, 0x6c, 0x61, 0x6e, 0x64, 0x63, 0x6f,
	  0x6c, 0x6c, 0x65, 0x67, 0x65, 0x73, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	  0x63, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x63, 0x6f, 0x6e, 0x74,
	  0x61, 0x63, 0x74, 0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x61,
	  0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x73, 0x69, 0x62, 0x6c, 0x69, 0x6e,
	  0x67, 0x73, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x73, 0x26, 0x71,
	  0x75, 0x6f, 0x74, 0x3b, 0x29, 0x73, 0x2e, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20,
	  0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x63, 0x68, 0x65, 0x63, 0x6b,
	  0x62, 0x6f, 0x78, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x73, 0x70, 0x72,
	  0x65, 0x67, 0x6e, 0x61, 0x6e, 0x74, 0x74, 0x6f, 0x6d, 0x6f, 0x72, 0x72, 0x6f,
	  0x77, 0x73, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x3d, 0x69, 0x63, 0x6f, 0x6e,
	  0x2e, 0x70, 0x6e, 0x67, 0x6a, 0x61, 0x70, 0x61, 0x6e, 0x65, 0x73, 0x65, 0x63,
	  0x6f, 0x64, 0x65, 0x62, 0x61, 0x73, 0x65, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e,
	  0x22, 0x3e, 0x67, 0x61, 0x6d, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x73, 0x75, 0x63,
	  0x68, 0x20, 0x61, 0x73, 0x20, 0x2c, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20,
	  0x3c, 0x2f, 0x73, 0x70, 0x61, 0x6e, 0x3e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x6f,
	  0x75, 0x72, 0x69, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x74, 0x6f,
	  0x70, 0x3a, 0x31, 0x70, 0x78, 0x20, 0x2e, 0x3c, 0x2f, 0x73, 0x70, 0x61, 0x6e,
	  0x3e, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x77, 0x69, 0x64, 0x74,
	  0x68, 0x3d, 0x22, 0x32, 0x6c, 0x61, 0x7a, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x6e,
	  0x6f, 0x76, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x75, 0x73, 0x65, 0x64, 0x20, 0x69,
	  0x6e, 0x20, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3d, 0x22, 0x63, 0x72, 0x69,
	  0x70, 0x74, 0x22, 0x3e, 0x0a, 0x26, 0x6e, 0x62, 0x73, 0x70, 0x3b, 0x3c, 0x2f,
	  0x3c, 0x74, 0x72, 0x3e, 0x3c, 0x74, 0x64, 0x20, 0x68, 0x65, 0x69, 0x67, 0x68,
	  0x74, 0x3a, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x63, 0x6f,
	  0x75, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	  0x20, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x22, 0x20, 0x26, 0x6c, 0x74, 0x3b,
	  0x21, 0x2d, 0x2d, 0x20, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x3e, 0x3c, 0x2f,
	  0x6a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x3c, 0x2f, 0x66, 0x6f, 0x72, 0x6d,
	  0x3e, 0x0a, 0x28, 0xe7, 0xae, 0x80, 0xe4, 0xbd, 0x93, 0x29, 0x28, 0xe7, 0xb9,
	  0x81, 0xe9, 0xab, 0x94, 0x29, 0x68, 0x72, 0x76, 0x61, 0x74, 0x73, 0x6b, 0x69,
	  0x69, 0x74, 0x61, 0x6c, 0x69, 0x61, 0x6e, 0x6f, 0x72, 0x6f, 0x6d, 0xc3, 0xa2,
	  0x6e, 0xc4, 0x83, 0x74, 0xc3, 0xbc, 0x72, 0x6b, 0xc3, 0xa7, 0x65, 0xd8, 0xa7,
	  0xd8, 0xb1, 0xd8, 0xaf, 0xd9, 0x88, 0x74, 0x61, 0x6d, 0x62, 0x69, 0xc3, 0xa9,
	  0x6e, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x69, 0x61, 0x73, 0x6d, 0x65, 0x6e, 0x73,
	  0x61, 0x6a, 0x65, 0x73, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x73, 0x64,
	  0x65, 0x72, 0x65, 0x63, 0x68, 0x6f, 0x73, 0x6e, 0x61, 0x63, 0x69, 0x6f, 0x6e,
	  0x61, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x69, 0x6f, 0x63, 0x6f, 0x6e,
	  0x74, 0x61, 0x63, 0x74, 0x6f, 0x75, 0x73, 0x75, 0x61, 0x72, 0x69, 0x6f, 0x73,
	  0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x61, 0x67, 0x6f, 0x62, 0x69, 0x65,
	  0x72, 0x6e, 0x6f, 0x65, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x61, 0x73, 0x61, 0x6e,
	  0x75, 0x6e, 0x63, 0x69, 0x6f, 0x73, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x69,
	  0x61, 0x63, 0x6f, 0x6c, 0x6f, 0x6d, 0x62, 0x69, 0x61, 0x64, 0x65, 0x73, 0x70,
	  0x75, 0xc3, 0xa9, 0x73, 0x64, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x70,
	  0x72, 0x6f, 0x79, 0x65, 0x63, 0x74, 0x6f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	  0x74, 0x6f, 0x70, 0xc3, 0xba, 0x62, 0x6c, 0x69, 0x63, 0x6f, 0x6e, 0x6f, 0x73,
	  0x6f, 0x74, 0x72, 0x6f, 0x73, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x61,
	  0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6d, 0x69, 0x6c, 0x6c, 0x6f,
	  0x6e, 0x65, 0x73, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x65, 0x70, 0x72,
	  0x65, 0x67, 0x75, 0x6e, 0x74, 0x61, 0x61, 0x6e, 0x74, 0x65, 0x72, 0x69, 0x6f,
	  0x72, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x73, 0x70, 0x72, 0x6f, 0x62,
	  0x6c, 0x65, 0x6d, 0x61, 0x73, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x67, 0x6f, 0x6e,
	  0x75, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x73, 0x6f, 0x70, 0x69, 0x6e, 0x69, 0xc3,
	  0xb3, 0x6e, 0x69, 0x6d, 0x70, 0x72, 0x69, 0x6d, 0x69, 0x72, 0x6d, 0x69, 0x65,
	  0x6e, 0x74, 0x72, 0x61, 0x73, 0x61, 0x6d, 0xc3, 0xa9, 0x72, 0x69, 0x63, 0x61,
	  0x76, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x6f, 0x72, 0x73, 0x6f, 0x63, 0x69, 0x65,
	  0x64, 0x61, 0x64, 0x72, 0x65, 0x73, 0x70, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x65,
	  0x61, 0x6c, 0x69, 0x7a, 0x61, 0x72, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	  0x6f, 0x70, 0x61, 0x6c, 0x61, 0x62, 0x72, 0x61, 0x73, 0x69, 0x6e, 0x74, 0x65,
	  0x72, 0xc3, 0xa9, 0x73, 0x65, 0x6e, 0x74, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x65,
	  0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x6d, 0x69, 0x65, 0x6d, 0x62, 0x72,
	  0x6f, 0x73, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x64, 0x63, 0xc3, 0xb3,
	  0x72, 0x64, 0x6f, 0x62, 0x61, 0x7a, 0x61, 0x72, 0x61, 0x67, 0x6f, 0x7a, 0x61,
	  0x70, 0xc3, 0xa1, 0x67, 0x69, 0x6e, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61,
	  0x6c, 0x65, 0x73, 0x62, 0x6c, 0x6f, 0x71, 0x75, 0x65, 0x61, 0x72, 0x67, 0x65,
	  0x73, 0x74, 0x69, 0xc3, 0xb3, 0x6e, 0x61, 0x6c, 0x71, 0x75, 0x69, 0x6c, 0x65,
	  0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6d, 0x61, 0x73, 0x63, 0x69, 0x65, 0x6e,
	  0x63, 0x69, 0x61, 0x73, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x6f, 0x76,
	  0x65, 0x72, 0x73, 0x69, 0xc3, 0xb3, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	  0x74, 0x61, 0x65, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x73, 0x70, 0xc3, 0xba,
	  0x62, 0x6c, 0x69, 0x63, 0x61, 0x6f, 0x62, 0x6a, 0x65, 0x74, 0x69, 0x76, 0x6f,
	  0x61, 0x6c, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x65, 0x62, 0x75, 0x73, 0x63, 0x61,
	  0x64, 0x6f, 0x72, 0x63, 0x61, 0x6e, 0x74, 0x69, 0x64, 0x61, 0x64, 0x65, 0x6e,
	  0x74, 0x72, 0x61, 0x64, 0x61, 0x73, 0x61, 0x63, 0x63, 0x69, 0x6f, 0x6e, 0x65,
	  0x73, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x6f, 0x73, 0x73, 0x75, 0x70, 0x65,
	  0x72, 0x69, 0x6f, 0x72, 0x6d, 0x61, 0x79, 0x6f, 0x72, 0xc3, 0xad, 0x61, 0x61,
	  0x6c, 0x65, 0x6d, 0x61, 0x6e, 0x69, 0x61, 0x66, 0x75, 0x6e, 0x63, 0x69, 0xc3,
	  0xb3, 0x6e, 0xc3, 0xba, 0x6c, 0x74, 0x69, 0x6d, 0x6f, 0x73, 0x68, 0x61, 0x63,
	  0x69, 0x65, 0x6e, 0x64, 0x6f, 0x61, 0x71, 0x75, 0x65, 0x6c, 0x6c, 0x6f, 0x73,
	  0x65, 0x64, 0x69, 0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x66, 0x65, 0x72, 0x6e, 0x61,
	  0x6e, 0x64, 0x6f, 0x61, 0x6d, 0x62, 0x69, 0x65, 0x6e, 0x74, 0x65, 0x66, 0x61,
	  0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6e, 0x75, 0x65, 0x73, 0x74, 0x72, 0x61,
	  0x73, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x65, 0x73, 0x70, 0x72, 0x6f, 0x63,
	  0x65, 0x73, 0x6f, 0x73, 0x62, 0x61, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x65, 0x70,
	  0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	  0x61, 0x72, 0x63, 0x6f, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x6f, 0x70, 0x75, 0x62,
	  0x6c, 0x69, 0x63, 0x61, 0x72, 0x63, 0x6f, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x6f,
	  0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x6a, 0xc3, 0xb3, 0x76, 0x65,
	  0x6e, 0x65, 0x73, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x74, 0x6f, 0x74, 0xc3,
	  0xa9, 0x63, 0x6e, 0x69, 0x63, 0x61, 0x63, 0x6f, 0x6e, 0x6a, 0x75, 0x6e, 0x74,
	  0x6f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0xc3, 0xad, 0x61, 0x74, 0x72, 0x61, 0x62,
	  0x61, 0x6a, 0x61, 0x72, 0x61, 0x73, 0x74, 0x75, 0x72, 0x69, 0x61, 0x73, 0x72,
	  0x65, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x65, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a,
	  0x61, 0x72, 0x62, 0x6f, 0x6c, 0x65, 0x74, 0xc3, 0xad, 0x6e, 0x73, 0x61, 0x6c,
	  0x76, 0x61, 0x64, 0x6f, 0x72, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x61,
	  0x74, 0x72, 0x61, 0x62, 0x61, 0x6a, 0x6f, 0x73, 0x70, 0x72, 0x69, 0x6d, 0x65,
	  0x72, 0x6f, 0x73, 0x6e, 0x65, 0x67, 0x6f, 0x63, 0x69, 0x6f, 0x73, 0x6c, 0x69,
	  0x62, 0x65, 0x72, 0x74, 0x61, 0x64, 0x64, 0x65, 0x74, 0x61, 0x6c, 0x6c, 0x65,
	  0x73, 0x70, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x70, 0x72, 0xc3, 0xb3,
	  0x78, 0x69, 0x6d, 0x6f, 0x61, 0x6c, 0x6d, 0x65, 0x72, 0xc3, 0xad, 0x61, 0x61,
	  0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x65, 0x73, 0x71, 0x75, 0x69, 0xc3, 0xa9, 0x6e,
	  0x65, 0x73, 0x63, 0x6f, 0x72, 0x61, 0x7a, 0xc3, 0xb3, 0x6e, 0x73, 0x65, 0x63,
	  0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x62, 0x75, 0x73, 0x63, 0x61, 0x6e, 0x64, 0x6f,
	  0x6f, 0x70, 0x63, 0x69, 0x6f, 0x6e, 0x65, 0x73, 0x65, 0x78, 0x74, 0x65, 0x72,
	  0x69, 0x6f, 0x72, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x74, 0x6f,
	  0x64, 0x61, 0x76, 0xc3, 0xad, 0x61, 0x67, 0x61, 0x6c, 0x65, 0x72, 0xc3, 0xad,
	  0x61, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x69,
	  0x63, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x63, 0x69, 0x61, 0x63,
	  0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x61, 0x61, 0x73, 0x70, 0x65, 0x63, 0x74,
	  0x6f, 0x73, 0x63, 0x72, 0xc3, 0xad, 0x74, 0x69, 0x63, 0x61, 0x64, 0xc3, 0xb3,
	  0x6c, 0x61, 0x72, 0x65, 0x73, 0x6a, 0x75, 0x73, 0x74, 0x69, 0x63, 0x69, 0x61,
	  0x64, 0x65, 0x62, 0x65, 0x72, 0xc3, 0xa1, 0x6e, 0x70, 0x65, 0x72, 0xc3, 0xad,
	  0x6f, 0x64, 0x6f, 0x6e, 0x65, 0x63, 0x65, 0x73, 0x69, 0x74, 0x61, 0x6d, 0x61,
	  0x6e, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x70, 0x65, 0x71, 0x75, 0x65, 0xc3, 0xb1,
	  0x6f, 0x72, 0x65, 0x63, 0x69, 0x62, 0x69, 0x64, 0x61, 0x74, 0x72, 0x69, 0x62,
	  0x75, 0x6e, 0x61, 0x6c, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x66, 0x65, 0x63,
	  0x61, 0x6e, 0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x63, 0x61, 0x6e, 0x61, 0x72, 0x69,
	  0x61, 0x73, 0x64, 0x65, 0x73, 0x63, 0x61, 0x72, 0x67, 0x61, 0x64, 0x69, 0x76,
	  0x65, 0x72, 0x73, 0x6f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x6f, 0x72, 0x63, 0x61,
	  0x72, 0x65, 0x71, 0x75, 0x69, 0x65, 0x72, 0x65, 0x74, 0xc3, 0xa9, 0x63, 0x6e,
	  0x69, 0x63, 0x6f, 0x64, 0x65, 0x62, 0x65, 0x72, 0xc3, 0xad, 0x61, 0x76, 0x69,
	  0x76, 0x69, 0x65, 0x6e, 0x64, 0x61, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x7a, 0x61,
	  0x73, 0x61, 0x64, 0x65, 0x6c, 0x61, 0x6e, 0x74, 0x65, 0x66, 0x75, 0x6e, 0x63,
	  0x69, 0x6f, 0x6e, 0x61, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6a, 0x6f, 0x73, 0x64,
	  0x69, 0x66, 0xc3, 0xad, 0x63, 0x69, 0x6c, 0x63, 0x69, 0x75, 0x64, 0x61, 0x64,
	  0x65, 0x73, 0x61, 0x6e, 0x74, 0x69, 0x67, 0x75, 0x61, 0x73, 0x61, 0x76, 0x61,
	  0x6e, 0x7a, 0x61, 0x64, 0x61, 0x74, 0xc3, 0xa9, 0x72, 0x6d, 0x69, 0x6e, 0x6f,
	  0x75, 0x6e, 0x69, 0x64, 0x61, 0x64, 0x65, 0x73, 0x73, 0xc3, 0xa1, 0x6e, 0x63,
	  0x68, 0x65, 0x7a, 0x63, 0x61, 0x6d, 0x70, 0x61, 0xc3, 0xb1, 0x61, 0x73, 0x6f,
	  0x66, 0x74, 0x6f, 0x6e, 0x69, 0x63, 0x72, 0x65, 0x76, 0x69, 0x73, 0x74, 0x61,
	  0x73, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x63, 0x74,
	  0x6f, 0x72, 0x65, 0x73, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x6f, 0x73, 0x66,
	  0x61, 0x63, 0x75, 0x6c, 0x74, 0x61, 0x64, 0x63, 0x72, 0xc3, 0xa9, 0x64, 0x69,
	  0x74, 0x6f, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x73, 0x73, 0x75, 0x70,
	  0x75, 0x65, 0x73, 0x74, 0x6f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x65, 0x73,
	  0x73, 0x65, 0x67, 0x75, 0x6e, 0x64, 0x6f, 0x73, 0x70, 0x65, 0x71, 0x75, 0x65,
	  0xc3, 0xb1, 0x61, 0xd0, 0xb3, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xb0, 0xd0, 0xb5,
	  0xd1, 0x81, 0xd0, 0xbb, 0xd0, 0xb8, 0xd0, 0xb5, 0xd1, 0x81, 0xd1, 0x82, 0xd1,
	  0x8c, 0xd0, 0xb1, 0xd1, 0x8b, 0xd0, 0xbb, 0xd0, 0xbe, 0xd0, 0xb1, 0xd1, 0x8b,
	  0xd1, 0x82, 0xd1, 0x8c, 0xd1, 0x8d, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xbc, 0xd0,
	  0x95, 0xd1, 0x81, 0xd0, 0xbb, 0xd0, 0xb8, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xb3,
	  0xd0, 0xbe, 0xd0, 0xbc, 0xd0, 0xb5, 0xd0, 0xbd, 0xd1, 0x8f, 0xd0, 0xb2, 0xd1,
	  0x81, 0xd0, 0xb5, 0xd1, 0x85, 0xd1, 0x8d, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xb9,
	  0xd0, 0xb4, 0xd0, 0xb0, 0xd0, 0xb6, 0xd0, 0xb5, 0xd0, 0xb1, 0xd1, 0x8b, 0xd0,
	  0xbb, 0xd0, 0xb8, 0xd0, 0xb3, 0xd0, 0xbe, 0xd0, 0xb4, 0xd1, 0x83, 0xd0, 0xb4,
	  0xd0, 0xb5, 0xd0, 0xbd, 0xd1, 0x8c, 0xd1, 0x8d, 0xd1, 0x82, 0xd0, 0xbe, 0xd1,
	  0x82, 0xd0, 0xb1, 0xd1, 0x8b, 0xd0, 0xbb, 0xd0, 0xb0, 0xd1, 0x81, 0xd0, 0xb5,
	  0xd0, 0xb1, 0xd1, 0x8f, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xb8, 0xd0, 0xbd, 0xd1,
	  0x81, 0xd0, 0xb5, 0xd0, 0xb1, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb0, 0xd0, 0xb4,
	  0xd0, 0xbe, 0xd1, 0x81, 0xd0, 0xb0, 0xd0, 0xb9, 0xd1, 0x82, 0xd1, 0x84, 0xd0,
	  0xbe, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xbd, 0xd0, 0xb5, 0xd0, 0xb3, 0xd0, 0xbe,
	  0xd1, 0x81, 0xd0, 0xb2, 0xd0, 0xbe, 0xd0, 0xb8, 0xd1, 0x81, 0xd0, 0xb2, 0xd0,
	  0xbe, 0xd0, 0xb9, 0xd0, 0xb8, 0xd0, 0xb3, 0xd1, 0x80, 0xd1, 0x8b, 0xd1, 0x82,
	  0xd0, 0xbe, 0xd0, 0xb6, 0xd0, 0xb5, 0xd0, 0xb2, 0xd1, 0x81, 0xd0, 0xb5, 0xd0,
	  0xbc, 0xd1, 0x81, 0xd0, 0xb2, 0xd0, 0xbe, 0xd1, 0x8e, 0xd0, 0xbb, 0xd0, 0xb8,
	  0xd1, 0x88, 0xd1, 0x8c, 0xd1, 0x8d, 0xd1, 0x82, 0xd0, 0xb8, 0xd1, 0x85, 0xd0,
	  0xbf, 0xd0, 0xbe, 0xd0, 0xba, 0xd0, 0xb0, 0xd0, 0xb4, 0xd0, 0xbd, 0xd0, 0xb5,
	  0xd0, 0xb9, 0xd0, 0xb4, 0xd0, 0xbe, 0xd0, 0xbc, 0xd0, 0xb0, 0xd0, 0xbc, 0xd0,
	  0xb8, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xbb, 0xd0, 0xb8, 0xd0, 0xb1, 0xd0, 0xbe,
	  0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbc, 0xd1, 0x83, 0xd1, 0x85, 0xd0, 0xbe, 0xd1,
	  0x82, 0xd1, 0x8f, 0xd0, 0xb4, 0xd0, 0xb2, 0xd1, 0x83, 0xd1, 0x85, 0xd1, 0x81,
	  0xd0, 0xb5, 0xd1, 0x82, 0xd0, 0xb8, 0xd0, 0xbb, 0xd1, 0x8e, 0xd0, 0xb4, 0xd0,
	  0xb8, 0xd0, 0xb4, 0xd0, 0xb5, 0xd0, 0xbb, 0xd0, 0xbe, 0xd0, 0xbc, 0xd0, 0xb8,
	  0xd1, 0x80, 0xd0, 0xb5, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xb1, 0xd1, 0x8f, 0xd1,
	  0x81, 0xd0, 0xb2, 0xd0, 0xbe, 0xd0, 0xb5, 0xd0, 0xb2, 0xd0, 0xb8, 0xd0, 0xb4,
	  0xd0, 0xb5, 0xd1, 0x87, 0xd0, 0xb5, 0xd0, 0xb3, 0xd0, 0xbe, 0xd1, 0x8d, 0xd1,
	  0x82, 0xd0, 0xb8, 0xd0, 0xbc, 0xd1, 0x81, 0xd1, 0x87, 0xd0, 0xb5, 0xd1, 0x82,
	  0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbc, 0xd1, 0x8b, 0xd1, 0x86, 0xd0, 0xb5, 0xd0,
	  0xbd, 0xd1, 0x8b, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb0, 0xd0, 0xbb, 0xd0, 0xb2,
	  0xd0, 0xb5, 0xd0, 0xb4, 0xd1, 0x8c, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbc, 0xd0,
	  0xb5, 0xd0, 0xb2, 0xd0, 0xbe, 0xd0, 0xb4, 0xd1, 0x8b, 0xd1, 0x82, 0xd0, 0xb5,
	  0xd0, 0xb1, 0xd0, 0xb5, 0xd0, 0xb2, 0xd1, 0x8b, 0xd1, 0x88, 0xd0, 0xb5, 0xd0,
	  0xbd, 0xd0, 0xb0, 0xd0, 0xbc, 0xd0, 0xb8, 0xd1, 0x82, 0xd0, 0xb8, 0xd0, 0xbf,
	  0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xbc, 0xd1, 0x83, 0xd0, 0xbf, 0xd1,
	  0x80, 0xd0, 0xb0, 0xd0, 0xb2, 0xd0, 0xbb, 0xd0, 0xb8, 0xd1, 0x86, 0xd0, 0xb0,
	  0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xbd, 0xd0, 0xb0, 0xd0, 0xb3, 0xd0, 0xbe, 0xd0,
	  0xb4, 0xd1, 0x8b, 0xd0, 0xb7, 0xd0, 0xbd, 0xd0, 0xb0, 0xd1, 0x8e, 0xd0, 0xbc,
	  0xd0, 0xbe, 0xd0, 0xb3, 0xd1, 0x83, 0xd0, 0xb4, 0xd1, 0x80, 0xd1, 0x83, 0xd0,
	  0xb3, 0xd0, 0xb2, 0xd1, 0x81, 0xd0, 0xb5, 0xd0, 0xb9, 0xd0, 0xb8, 0xd0, 0xb4,
	  0xd0, 0xb5, 0xd1, 0x82, 0xd0, 0xba, 0xd0, 0xb8, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0,
	  0xbe, 0xd0, 0xb4, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xb5, 0xd0, 0xbb,
	  0xd0, 0xb0, 0xd0, 0xb4, 0xd0, 0xb5, 0xd0, 0xbb, 0xd0, 0xb5, 0xd1, 0x81, 0xd1,
	  0x80, 0xd0, 0xbe, 0xd0, 0xba, 0xd0, 0xb8, 0xd1, 0x8e, 0xd0, 0xbd, 0xd1, 0x8f,
	  0xd0, 0xb2, 0xd0, 0xb5, 0xd1, 0x81, 0xd1, 0x8c, 0xd0, 0x95, 0xd1, 0x81, 0xd1,
	  0x82, 0xd1, 0x8c, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xb7, 0xd0, 0xb0, 0xd0, 0xbd,
	  0xd0, 0xb0, 0xd1, 0x88, 0xd0, 0xb8, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x84, 0xd9,
	  0x87, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xaa, 0xd9, 0x8a, 0xd8, 0xac, 0xd9, 0x85,
	  0xd9, 0x8a, 0xd8, 0xb9, 0xd8, 0xae, 0xd8, 0xa7, 0xd8, 0xb5, 0xd8, 0xa9, 0xd8,
	  0xa7, 0xd9, 0x84, 0xd8, 0xb0, 0xd9, 0x8a, 0xd8, 0xb9, 0xd9, 0x84, 0xd9, 0x8a,
	  0xd9, 0x87, 0xd8, 0xac, 0xd8, 0xaf, 0xd9, 0x8a, 0xd8, 0xaf, 0xd8, 0xa7, 0xd9,
	  0x84, 0xd8, 0xa2, 0xd9, 0x86, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb1, 0xd8, 0xaf,
	  0xd8, 0xaa, 0xd8, 0xad, 0xd9, 0x83, 0xd9, 0x85, 0xd8, 0xb5, 0xd9, 0x81, 0xd8,
	  0xad, 0xd8, 0xa9, 0xd9, 0x83, 0xd8, 0xa7, 0xd9, 0x86, 0xd8, 0xaa, 0xd8, 0xa7,
	  0xd9, 0x84, 0xd9, 0x84, 0xd9, 0x8a, 0xd9, 0x8a, 0xd9, 0x83, 0xd9, 0x88, 0xd9,
	  0x86, 0xd8, 0xb4, 0xd8, 0xa8, 0xd9, 0x83, 0xd8, 0xa9, 0xd9, 0x81, 0xd9, 0x8a,
	  0xd9, 0x87, 0xd8, 0xa7, 0xd8, 0xa8, 0xd9, 0x86, 0xd8, 0xa7, 0xd8, 0xaa, 0xd8,
	  0xad, 0xd9, 0x88, 0xd8, 0xa7, 0xd8, 0xa1, 0xd8, 0xa3, 0xd9, 0x83, 0xd8, 0xab,
	  0xd8, 0xb1, 0xd8, 0xae, 0xd9, 0x84, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa7, 0xd9,
	  0x84, 0xd8, 0xad, 0xd8, 0xa8, 0xd8, 0xaf, 0xd9, 0x84, 0xd9, 0x8a, 0xd9, 0x84,
	  0xd8, 0xaf, 0xd8, 0xb1, 0xd9, 0x88, 0xd8, 0xb3, 0xd8, 0xa7, 0xd8, 0xb6, 0xd8,
	  0xba, 0xd8, 0xb7, 0xd8, 0xaa, 0xd9, 0x83, 0xd9, 0x88, 0xd9, 0x86, 0xd9, 0x87,
	  0xd9, 0x86, 0xd8, 0xa7, 0xd9, 0x83, 0xd8, 0xb3, 0xd8, 0xa7, 0xd8, 0xad, 0xd8,
	  0xa9, 0xd9, 0x86, 0xd8, 0xa7, 0xd8, 0xaf, 0xd9, 0x8a, 0xd8, 0xa7, 0xd9, 0x84,
	  0xd8, 0xb7, 0xd8, 0xa8, 0xd8, 0xb9, 0xd9, 0x84, 0xd9, 0x8a, 0xd9, 0x83, 0xd8,
	  0xb4, 0xd9, 0x83, 0xd8, 0xb1, 0xd8, 0xa7, 0xd9, 0x8a, 0xd9, 0x85, 0xd9, 0x83,
	  0xd9, 0x86, 0xd9, 0x85, 0xd9, 0x86, 0xd9, 0x87, 0xd8, 0xa7, 0xd8, 0xb4, 0xd8,
	  0xb1, 0xd9, 0x83, 0xd8, 0xa9, 0xd8, 0xb1, 0xd8, 0xa6, 0xd9, 0x8a, 0xd8, 0xb3,
	  0xd9, 0x86, 0xd8, 0xb4, 0xd9, 0x8a, 0xd8, 0xb7, 0xd9, 0x85, 0xd8, 0xa7, 0xd8,
	  0xb0, 0xd8, 0xa7, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x81, 0xd9, 0x86, 0xd8, 0xb4,
	  0xd8, 0xa8, 0xd8, 0xa7, 0xd8, 0xa8, 0xd8, 0xaa, 0xd8, 0xb9, 0xd8, 0xa8, 0xd8,
	  0xb1, 0xd8, 0xb1, 0xd8, 0xad, 0xd9, 0x85, 0xd8, 0xa9, 0xd9, 0x83, 0xd8, 0xa7,
	  0xd9, 0x81, 0xd8, 0xa9, 0xd9, 0x8a, 0xd9, 0x82, 0xd9, 0x88, 0xd9, 0x84, 0xd9,
	  0x85, 0xd8, 0xb1, 0xd9, 0x83, 0xd8, 0xb2, 0xd9, 0x83, 0xd9, 0x84, 0xd9, 0x85,
	  0xd8, 0xa9, 0xd8, 0xa3, 0xd8, 0xad, 0xd9, 0x85, 0xd8, 0xaf, 0xd9, 0x82, 0xd9,
	  0x84, 0xd8, 0xa8, 0xd9, 0x8a, 0xd9, 0x8a, 0xd8, 0xb9, 0xd9, 0x86, 0xd9, 0x8a,
	  0xd8, 0xb5, 0xd9, 0x88, 0xd8, 0xb1, 0xd8, 0xa9, 0xd8, 0xb7, 0xd8, 0xb1, 0xd9,
	  0x8a, 0xd9, 0x82, 0xd8, 0xb4, 0xd8, 0xa7, 0xd8, 0xb1, 0xd9, 0x83, 0xd8, 0xac,
	  0xd9, 0x88, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa3, 0xd8, 0xae, 0xd8, 0xb1, 0xd9,
	  0x89, 0xd9, 0x85, 0xd8, 0xb9, 0xd9, 0x86, 0xd8, 0xa7, 0xd8, 0xa7, 0xd8, 0xa8,
	  0xd8, 0xad, 0xd8, 0xab, 0xd8, 0xb9, 0xd8, 0xb1, 0xd9, 0x88, 0xd8, 0xb6, 0xd8,
	  0xa8, 0xd8, 0xb4, 0xd9, 0x83, 0xd9, 0x84, 0xd9, 0x85, 0xd8, 0xb3, 0xd8, 0xac,
	  0xd9, 0x84, 0xd8, 0xa8, 0xd9, 0x86, 0xd8, 0xa7, 0xd9, 0x86, 0xd8, 0xae, 0xd8,
	  0xa7, 0xd9, 0x84, 0xd8, 0xaf, 0xd9, 0x83, 0xd8, 0xaa, 0xd8, 0xa7, 0xd8, 0xa8,
	  0xd9, 0x83, 0xd9, 0x84, 0xd9, 0x8a, 0xd8, 0xa9, 0xd8, 0xa8, 0xd8, 0xaf, 0xd9,
	  0x88, 0xd9, 0x86, 0xd8, 0xa3, 0xd9, 0x8a, 0xd8, 0xb6, 0xd8, 0xa7, 0xd9, 0x8a,
	  0xd9, 0x88, 0xd8, 0xac, 0xd8, 0xaf, 0xd9, 0x81, 0xd8, 0xb1, 0xd9, 0x8a, 0xd9,
	  0x82, 0xd9, 0x83, 0xd8, 0xaa, 0xd8, 0xa8, 0xd8, 0xaa, 0xd8, 0xa3, 0xd9, 0x81,
	  0xd8, 0xb6, 0xd9, 0x84, 0xd9, 0x85, 0xd8, 0xb7, 0xd8, 0xa8, 0xd8, 0xae, 0xd8,
	  0xa7, 0xd9, 0x83, 0xd8, 0xab, 0xd8, 0xb1, 0xd8, 0xa8, 0xd8, 0xa7, 0xd8, 0xb1,
	  0xd9, 0x83, 0xd8, 0xa7, 0xd9, 0x81, 0xd8, 0xb6, 0xd9, 0x84, 0xd8, 0xa7, 0xd8,
	  0xad, 0xd9, 0x84, 0xd9, 0x89, 0xd9, 0x86, 0xd9, 0x81, 0xd8, 0xb3, 0xd9, 0x87,
	  0xd8, 0xa3, 0xd9, 0x8a, 0xd8, 0xa7, 0xd9, 0x85, 0xd8, 0xb1, 0xd8, 0xaf, 0xd9,
	  0x88, 0xd8, 0xaf, 0xd8, 0xa3, 0xd9, 0x86, 0xd9, 0x87, 0xd8, 0xa7, 0xd8, 0xaf,
	  0xd9, 0x8a, 0xd9, 0x86, 0xd8, 0xa7, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa7, 0xd9,
	  0x86, 0xd9, 0x85, 0xd8, 0xb9, 0xd8, 0xb1, 0xd8, 0xb6, 0xd8, 0xaa, 0xd8, 0xb9,
	  0xd9, 0x84, 0xd9, 0x85, 0xd8, 0xaf, 0xd8, 0xa7, 0xd8, 0xae, 0xd9, 0x84, 0xd9,
	  0x85, 0xd9, 0x85, 0xd9, 0x83, 0xd9, 0x86, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x02, 0x00, 0x02,
	  0x00, 0x02, 0x00, 0x02, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00,
	  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x07, 0x06, 0x05, 0x04, 0x03,
	  0x02, 0x01, 0x00, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x0f, 0x0e,
	  0x0d, 0x0c, 0x0b, 0x0a, 0x09, 0x08, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16,
	  0x17, 0x17, 0x16, 0x15, 0x14, 0x13, 0x12, 0x11, 0x10, 0x18, 0x19, 0x1a, 0x1b,
	  0x1c, 0x1d, 0x1e, 0x1f, 0x1f, 0x1e, 0x1d, 0x1c, 0x1b, 0x1a, 0x19, 0x18, 0xff,
	  0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
	  0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
	  0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
	  0xff, 0xff, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0xff, 0xff, 0x00,
	  0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x08, 0x00, 0x08, 0x00, 0x08, 0x00, 0x00,
	  0x00, 0x01, 0x00, 0x02, 0x00, 0x03, 0x00, 0x04, 0x00, 0x05, 0x00, 0x06, 0x00,
	  0x07, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x63, 0x6f, 0x75,
	  0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	  0x6e, 0x73, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x63, 0x6f,
	  0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	  0x62, 0x6c, 0x65, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x44,
	  0x54, 0x44, 0x2f, 0x78, 0x68, 0x74, 0x6d, 0x6c, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	  0x74, 0x69, 0x6e, 0x67, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
	  0x73, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x63, 0x6f, 0x6e, 0x74,
	  0x61, 0x69, 0x6e, 0x65, 0x72, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	  0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x61, 0x64, 0x76,
	  0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	  0x65, 0x72, 0x22, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3d, 0x22, 0x3c, 0x2f,
	  0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x3e, 0x41, 0x75, 0x73, 0x74, 0x72, 0x61,
	  0x6c, 0x69, 0x61, 0x22, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x73,
	  0x69, 0x74, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f,
	  0x72, 0x69, 0x74, 0x79, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67,
	  0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x69, 0x6c, 0x79, 0x6f, 0x70, 0x65, 0x72,
	  0x61, 0x74, 0x69, 0x6f, 0x6e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	  0x65, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x61, 0x6e, 0x6f,
	  0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	  0x6e, 0x20, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x63, 0x6f,
	  0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	  0x75, 0x72, 0x65, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22,
	  0x20, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x3d, 0x22, 0x70, 0x6f, 0x74, 0x65, 0x6e,
	  0x74, 0x69, 0x61, 0x6c, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	  0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x73, 0x65, 0x63, 0x6f,
	  0x6e, 0x64, 0x61, 0x72, 0x79, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,
	  0x74, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x65, 0x78, 0x63,
	  0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	  0x6f, 0x6e, 0x3c, 0x2f, 0x66, 0x6f, 0x72, 0x6d, 0x3e, 0x0d, 0x0a, 0x73, 0x74,
	  0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x74,
	  0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x7d,
	  0x20, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x7b, 0x0a, 0x73, 0x6f, 0x6c, 0x75, 0x74,
	  0x69, 0x6f, 0x6e, 0x73, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20,
	  0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x74, 0x65, 0x6d, 0x70,
	  0x6c, 0x61, 0x74, 0x65, 0x73, 0x64, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x6f, 0x75,
	  0x73, 0x73, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x64, 0x6f, 0x63,
	  0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	  0x65, 0x72, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x74, 0x70, 0x72,
	  0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65,
	  0x6e, 0x63, 0x65, 0x26, 0x72, 0x61, 0x71, 0x75, 0x6f, 0x3b, 0x3c, 0x2f, 0x65,
	  0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x67, 0x65, 0x6e, 0x65, 0x72,
	  0x61, 0x6c, 0x6c, 0x79, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d,
	  0x62, 0x65, 0x61, 0x75, 0x74, 0x69, 0x66, 0x75, 0x6c, 0x74, 0x72, 0x61, 0x6e,
	  0x73, 0x70, 0x6f, 0x72, 0x74, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65,
	  0x64, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x70, 0x72, 0x6f,
	  0x6d, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x20, 0x74,
	  0x68, 0x65, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x4e, 0x61,
	  0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x2e, 0x66, 0x6f, 0x63, 0x75, 0x73,
	  0x28, 0x29, 0x3b, 0x6f, 0x76, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d,
	  0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6e, 0x6e, 0x6f, 0x75,
	  0x6e, 0x63, 0x65, 0x64, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x22, 0x3e, 0x0a,
	  0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x6c, 0x65, 0x73, 0x73,
	  0x20, 0x74, 0x68, 0x61, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x69, 0x76,
	  0x65, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x66, 0x72, 0x61,
	  0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x65, 0x72, 0x72, 0x69, 0x74, 0x6f,
	  0x72, 0x79, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x63, 0x75,
	  0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e,
	  0x61, 0x6d, 0x65, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x69, 0x73, 0x6d, 0x74,
	  0x72, 0x61, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x6c, 0x73, 0x65, 0x77,
	  0x68, 0x65, 0x72, 0x65, 0x41, 0x6c, 0x65, 0x78, 0x61, 0x6e, 0x64, 0x65, 0x72,
	  0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x64, 0x6d, 0x61, 0x74, 0x65,
	  0x72, 0x69, 0x61, 0x6c, 0x73, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	  0x74, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x61, 0x66, 0x66,
	  0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x3c, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	  0x6e, 0x3e, 0x74, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x64, 0x69,
	  0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x65, 0x66, 0x61, 0x75,
	  0x6c, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x6f,
	  0x6e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x3d, 0x22, 0x62, 0x69, 0x6f, 0x67, 0x72,
	  0x61, 0x70, 0x68, 0x79, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x77, 0x69, 0x73, 0x65,
	  0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x46, 0x72, 0x61, 0x6e,
	  0xc3, 0xa7, 0x61, 0x69, 0x73, 0x48, 0x6f, 0x6c, 0x6c, 0x79, 0x77, 0x6f, 0x6f,
	  0x64, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x74, 0x61,
	  0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x3c, 0x2f, 0x73, 0x74, 0x79, 0x6c, 0x65,
	  0x3e, 0x0a, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	  0x63, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72,
	  0x72, 0x65, 0x64, 0x43, 0x61, 0x6d, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x6f,
	  0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x75, 0x73, 0x69, 0x6e,
	  0x65, 0x73, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x75, 0x73, 0x69, 0x6f, 0x6e,
	  0x3e, 0x0a, 0x3c, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x3e, 0x70, 0x72, 0x65, 0x73,
	  0x65, 0x6e, 0x74, 0x65, 0x64, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x65,
	  0x64, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x77, 0x6f, 0x72,
	  0x6c, 0x64, 0x77, 0x69, 0x64, 0x65, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	  0x63, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x6e, 0x65,
	  0x77, 0x73, 0x70, 0x61, 0x70, 0x65, 0x72, 0x3c, 0x2f, 0x74, 0x61, 0x62, 0x6c,
	  0x65, 0x3e, 0x0a, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x6c,
	  0x69, 0x6b, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x73, 0x73, 0x65, 0x6e,
	  0x74, 0x69, 0x61, 0x6c, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c,
	  0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x63, 0x74, 0x69,
	  0x6f, 0x6e, 0x3d, 0x22, 0x2f, 0x61, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x65,
	  0x64, 0x45, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x61, 0x72,
	  0x73, 0x65, 0x49, 0x6e, 0x74, 0x28, 0x73, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69,
	  0x74, 0x79, 0x75, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x74, 0x6f, 0x3c, 0x2f,
	  0x74, 0x69, 0x74, 0x6c, 0x65, 0x3e, 0x0a, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	  0x6f, 0x6e, 0x73, 0x4e, 0x6f, 0x74, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x65,
	  0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x70, 0x65, 0x72, 0x66, 0x6f,
	  0x72, 0x6d, 0x65, 0x64, 0x74, 0x77, 0x6f, 0x20, 0x79, 0x65, 0x61, 0x72, 0x73,
	  0x53, 0x69, 0x6e, 0x63, 0x65, 0x20, 0x74, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72,
	  0x65, 0x66, 0x6f, 0x72, 0x65, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x22,
	  0x3e, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x65, 0x69, 0x6e, 0x63,
	  0x72, 0x65, 0x61, 0x73, 0x65, 0x64, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x20,
	  0x6f, 0x66, 0x70, 0x65, 0x72, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x74, 0x72,
	  0x79, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x6f, 0x6e, 0x65, 0x63, 0x65, 0x73, 0x73,
	  0x61, 0x72, 0x79, 0x70, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x79, 0x65, 0x64, 0x65,
	  0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6c, 0x69, 0x7a, 0x61,
	  0x62, 0x65, 0x74, 0x68, 0x3c, 0x2f, 0x69, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x3e,
	  0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x69, 0x6e, 0x73, 0x75,
	  0x72, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	  0x3b, 0x6c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x47, 0x65, 0x6f,
	  0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61,
	  0x74, 0x65, 0x63, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x73, 0x6f,
	  0x6d, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	  0x65, 0x73, 0x2e, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x65, 0x64, 0x3c,
	  0x2f, 0x73, 0x74, 0x72, 0x6f, 0x6e, 0x67, 0x3e, 0x43, 0x6f, 0x6d, 0x6d, 0x75,
	  0x6e, 0x69, 0x74, 0x79, 0x72, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x6f, 0x75, 0x73,
	  0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6d, 0x6d,
	  0x69, 0x74, 0x74, 0x65, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67,
	  0x73, 0x74, 0x68, 0x65, 0x20, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x6e, 0x6f, 0x20,
	  0x6c, 0x6f, 0x6e, 0x67, 0x65, 0x72, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x6e, 0x69,
	  0x6e, 0x67, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x63, 0x61,
	  0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x62, 0x65, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65,
	  0x6e, 0x63, 0x79, 0x74, 0x79, 0x70, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x69,
	  0x6e, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x6c, 0x61, 0x74,
	  0x69, 0x76, 0x65, 0x3b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67,
	  0x70, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x69, 0x74,
	  0x69, 0x61, 0x6c, 0x6c, 0x79, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x71, 0x75,
	  0x65, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x69, 0x74, 0x20,
	  0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x65, 0x78, 0x69, 0x73, 0x74, 0x65, 0x6e,
	  0x63, 0x65, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x74, 0x68,
	  0x69, 0x73, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x68,
	  0x6f, 0x6e, 0x65, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x70,
	  0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x73, 0x61, 0x64, 0x76, 0x61, 0x6e,
	  0x74, 0x61, 0x67, 0x65, 0x29, 0x3b, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20,
	  0x46, 0x6f, 0x72, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x76,
	  0x69, 0x64, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x6d, 0x6f, 0x63, 0x72, 0x61, 0x63,
	  0x79, 0x62, 0x6f, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x78, 0x74,
	  0x65, 0x6e, 0x73, 0x69, 0x76, 0x65, 0x73, 0x75, 0x66, 0x66, 0x65, 0x72, 0x69,
	  0x6e, 0x67, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x63, 0x6f,
	  0x6d, 0x70, 0x75, 0x74, 0x65, 0x72, 0x73, 0x20, 0x66, 0x75, 0x6e, 0x63, 0x74,
	  0x69, 0x6f, 0x6e, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x73,
	  0x61, 0x69, 0x64, 0x20, 0x74, 0x68, 0x61, 0x74, 0x69, 0x74, 0x20, 0x6d, 0x61,
	  0x79, 0x20, 0x62, 0x65, 0x45, 0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68, 0x3c, 0x2f,
	  0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x63, 0x68, 0x65,
	  0x64, 0x75, 0x6c, 0x65, 0x64, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	  0x73, 0x3c, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x3e, 0x0a, 0x73, 0x75, 0x73,
	  0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x3a,
	  0x20, 0x30, 0x73, 0x70, 0x69, 0x72, 0x69, 0x74, 0x75, 0x61, 0x6c, 0x3c, 0x2f,
	  0x68, 0x65, 0x61, 0x64, 0x3e, 0x0a, 0x0a, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73,
	  0x6f, 0x66, 0x74, 0x67, 0x72, 0x61, 0x64, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x64,
	  0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x65, 0x64, 0x68, 0x65, 0x20, 0x62, 0x65,
	  0x63, 0x61, 0x6d, 0x65, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65,
	  0x6a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x6a, 0x73, 0x68, 0x6f, 0x75, 0x73,
	  0x65, 0x68, 0x6f, 0x6c, 0x64, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65,
	  0x64, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x6c, 0x69, 0x74,
	  0x65, 0x72, 0x61, 0x6c, 0x6c, 0x79, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79,
	  0x65, 0x64, 0x75, 0x70, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x76, 0x61,
	  0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e,
	  0x69, 0x6e, 0x67, 0x69, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x63,
	  0x65, 0x6e, 0x74, 0x75, 0x72, 0x69, 0x65, 0x73, 0x4a, 0x61, 0x70, 0x61, 0x6e,
	  0x65, 0x73, 0x65, 0x20, 0x61, 0x6d, 0x6f, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65,
	  0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x61, 0x6c, 0x67, 0x6f,
	  0x72, 0x69, 0x74, 0x68, 0x6d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74,
	  0x73, 0x72, 0x65, 0x62, 0x65, 0x6c, 0x6c, 0x69, 0x6f, 0x6e, 0x75, 0x6e, 0x64,
	  0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x72, 0x61,
	  0x67, 0x65, 0x72, 0x65, 0x73, 0x69, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x69, 0x6e,
	  0x76, 0x6f, 0x6c, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74,
	  0x69, 0x76, 0x65, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x70,
	  0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x28, 0x61, 0x6c, 0x74, 0x68,
	  0x6f, 0x75, 0x67, 0x68, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x69, 0x6e, 0x67,
	  0x63, 0x6f, 0x6e, 0x64, 0x75, 0x63, 0x74, 0x65, 0x64, 0x29, 0x2c, 0x20, 0x77,
	  0x68, 0x69, 0x63, 0x68, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65,
	  0x64, 0x2d, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x3e, 0x46, 0x65, 0x62,
	  0x72, 0x75, 0x61, 0x72, 0x79, 0x20, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x6f, 0x75,
	  0x73, 0x20, 0x6f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x3a, 0x63, 0x6f,
	  0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65,
	  0x6e, 0x74, 0x73, 0x65, 0x78, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x6e, 0x74, 0x63,
	  0x6f, 0x6c, 0x73, 0x70, 0x61, 0x6e, 0x3d, 0x22, 0x74, 0x65, 0x63, 0x68, 0x6e,
	  0x69, 0x63, 0x61, 0x6c, 0x6e, 0x65, 0x61, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20,
	  0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x20, 0x73, 0x6f, 0x75, 0x72,
	  0x63, 0x65, 0x20, 0x6f, 0x66, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65,
	  0x64, 0x48, 0x6f, 0x6e, 0x67, 0x20, 0x4b, 0x6f, 0x6e, 0x67, 0x20, 0x46, 0x61,
	  0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	  0x65, 0x20, 0x6d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x65, 0x6c,
	  0x65, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6f, 0x66, 0x66, 0x65, 0x6e, 0x73,
	  0x69, 0x76, 0x65, 0x3c, 0x2f, 0x66, 0x6f, 0x72, 0x6d, 0x3e, 0x0a, 0x09, 0x73,
	  0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x65, 0x64, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	  0x65, 0x6e, 0x74, 0x2e, 0x6f, 0x72, 0x20, 0x26, 0x71, 0x75, 0x6f, 0x74, 0x3b,
	  0x74, 0x68, 0x65, 0x72, 0x65, 0x20, 0x61, 0x72, 0x65, 0x74, 0x68, 0x6f, 0x73,
	  0x65, 0x20, 0x77, 0x68, 0x6f, 0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	  0x73, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x64, 0x69, 0x66,
	  0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74,
	  0x65, 0x64, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x63, 0x6f,
	  0x6e, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x64, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74,
	  0x69, 0x6e, 0x67, 0x22, 0x20, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3d, 0x22, 0x2e,
	  0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x28, 0x63, 0x6c, 0x61, 0x73, 0x73,
	  0x69, 0x63, 0x61, 0x6c, 0x63, 0x6f, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	  0x68, 0x69, 0x73, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x64, 0x65, 0x63, 0x69,
	  0x73, 0x69, 0x6f, 0x6e, 0x73, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e,
	  0x74, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x65, 0x76, 0x6f,
	  0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	  0x72, 0x22, 0x65, 0x6e, 0x6f, 0x75, 0x67, 0x68, 0x20, 0x74, 0x6f, 0x61, 0x6c,
	  0x6f, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	  0x72, 0x65, 0x64, 0x2d, 0x2d, 0x3e, 0x0d, 0x0a, 0x3c, 0x21, 0x2d, 0x2d, 0x41,
	  0x6d, 0x65, 0x72, 0x69, 0x63, 0x61, 0x6e, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x65,
	  0x63, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x76, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x20,
	  0x3c, 0x2f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3e, 0x3c, 0x66, 0x75, 0x72, 0x6e,
	  0x69, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74,
	  0x20, 0x20, 0x6f, 0x6e, 0x62, 0x6c, 0x75, 0x72, 0x3d, 0x22, 0x73, 0x75, 0x73,
	  0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65,
	  0x6e, 0x74, 0x62, 0x61, 0x73, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x4d, 0x6f,
	  0x72, 0x65, 0x6f, 0x76, 0x65, 0x72, 0x2c, 0x61, 0x62, 0x6f, 0x6c, 0x69, 0x73,
	  0x68, 0x65, 0x64, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x77,
	  0x65, 0x72, 0x65, 0x20, 0x6d, 0x61, 0x64, 0x65, 0x65, 0x6d, 0x6f, 0x74, 0x69,
	  0x6f, 0x6e, 0x61, 0x6c, 0x65, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79,
	  0x6e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x61, 0x64, 0x76, 0x6f,
	  0x63, 0x61, 0x74, 0x65, 0x73, 0x70, 0x78, 0x3b, 0x62, 0x6f, 0x72, 0x64, 0x65,
	  0x72, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x64, 0x69, 0x72,
	  0x3d, 0x22, 0x6c, 0x74, 0x72, 0x22, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65,
	  0x65, 0x73, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x20, 0x73,
	  0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	  0x73, 0x6f, 0x72, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x64,
	  0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x53, 0x65, 0x70, 0x74, 0x65,
	  0x6d, 0x62, 0x65, 0x72, 0x61, 0x64, 0x64, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x28,
	  0x46, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x20, 0x73, 0x75, 0x67, 0x67,
	  0x65, 0x73, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x64, 0x20, 0x6c, 0x61, 0x74, 0x65,
	  0x72, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x65, 0x6c, 0x61,
	  0x62, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x6d, 0x65, 0x74, 0x69, 0x6d,
	  0x65, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x65, 0x63, 0x65,
	  0x72, 0x74, 0x61, 0x69, 0x6e, 0x6c, 0x79, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	  0x6c, 0x65, 0x64, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x4a,
	  0x65, 0x72, 0x75, 0x73, 0x61, 0x6c, 0x65, 0x6d, 0x74, 0x68, 0x65, 0x79, 0x20,
	  0x68, 0x61, 0x76, 0x65, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x69, 0x6e, 0x67,
	  0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x70, 0x72, 0x6f, 0x76,
	  0x69, 0x6e, 0x63, 0x65, 0x73, 0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65,
	  0x65, 0x61, 0x72, 0x62, 0x69, 0x74, 0x72, 0x61, 0x72, 0x79, 0x72, 0x65, 0x63,
	  0x6f, 0x67, 0x6e, 0x69, 0x7a, 0x65, 0x77, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x20,
	  0x74, 0x6f, 0x70, 0x78, 0x3b, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3a, 0x74, 0x68,
	  0x65, 0x6f, 0x72, 0x79, 0x20, 0x6f, 0x66, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69,
	  0x6f, 0x75, 0x72, 0x57, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x74, 0x68, 0x65, 0x65,
	  0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x62, 0x65, 0x67, 0x61, 0x6e,
	  0x20, 0x74, 0x6f, 0x20, 0x69, 0x74, 0x20, 0x62, 0x65, 0x63, 0x61, 0x6d, 0x65,
	  0x6d, 0x61, 0x67, 0x6e, 0x69, 0x74, 0x75, 0x64, 0x65, 0x6d, 0x75, 0x73, 0x74,
	  0x20, 0x68, 0x61, 0x76, 0x65, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x74, 0x68, 0x61,
	  0x6e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x65, 0x78, 0x74,
	  0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x61,
	  0x72, 0x79, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x6c, 0x79, 0x6f, 0x63,
	  0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62,
	  0x6c, 0x65, 0x73, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x70,
	  0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x3c, 0x2f, 0x6c, 0x61, 0x62,
	  0x65, 0x6c, 0x3e, 0x3c, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x20, 0x74, 0x6f,
	  0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x6b, 0x69, 0x6e, 0x64,
	  0x73, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x6f, 0x63, 0x69, 0x65, 0x74, 0x69, 0x65,
	  0x73, 0x61, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x69, 0x64, 0x65, 0x20, 0x2d, 0x2d,
	  0x26, 0x67, 0x74, 0x3b, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x74, 0x68, 0x77, 0x65,
	  0x73, 0x74, 0x74, 0x68, 0x65, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x72, 0x61,
	  0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x79, 0x20, 0x68, 0x61,
	  0x76, 0x65, 0x20, 0x75, 0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x28, 0x73,
	  0x70, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x69, 0x6e, 0x22, 0x20, 0x68, 0x72, 0x65,
	  0x66, 0x3d, 0x22, 0x2f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65,
	  0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6d, 0x65,
	  0x20, 0x66, 0x72, 0x6f, 0x6d, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	  0x79, 0x62, 0x75, 0x72, 0x69, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x61, 0x20, 0x73,
	  0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x74, 0x68, 0x65, 0x79, 0x20, 0x77, 0x65,
	  0x72, 0x65, 0x3c, 0x2f, 0x66, 0x6f, 0x6e, 0x74, 0x3e, 0x3c, 0x2f, 0x4e, 0x6f,
	  0x72, 0x77, 0x65, 0x67, 0x69, 0x61, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	  0x69, 0x65, 0x64, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x69, 0x6e, 0x67, 0x70,
	  0x61, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x28, 0x6e, 0x65, 0x77, 0x20,
	  0x44, 0x61, 0x74, 0x65, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79,
	  0x66, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x66, 0x74, 0x65,
	  0x72, 0x20, 0x74, 0x68, 0x65, 0x65, 0x71, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	  0x73, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x72, 0x65, 0x67,
	  0x75, 0x6c, 0x61, 0x72, 0x6c, 0x79, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	  0x65, 0x72, 0x61, 0x62, 0x6f, 0x76, 0x65, 0x20, 0x74, 0x68, 0x65, 0x6c, 0x69,
	  0x6e, 0x6b, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x70, 0x68, 0x65, 0x6e, 0x6f, 0x6d,
	  0x65, 0x6e, 0x61, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x20, 0x6f, 0x66, 0x74,
	  0x6f, 0x6f, 0x6c, 0x74, 0x69, 0x70, 0x22, 0x3e, 0x73, 0x75, 0x62, 0x73, 0x74,
	  0x61, 0x6e, 0x63, 0x65, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63,
	  0x61, 0x73, 0x70, 0x65, 0x63, 0x74, 0x20, 0x6f, 0x66, 0x41, 0x6d, 0x6f, 0x6e,
	  0x67, 0x20, 0x74, 0x68, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65,
	  0x64, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x73, 0x41, 0x69, 0x72,
	  0x20, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20,
	  0x6f, 0x66, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x69, 0x6d,
	  0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	  0x20, 0x69, 0x74, 0x70, 0x61, 0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x63,
	  0x6f, 0x6e, 0x71, 0x75, 0x65, 0x72, 0x65, 0x64, 0x61, 0x72, 0x65, 0x20, 0x73,
	  0x74, 0x69, 0x6c, 0x6c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65,
	  0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x20, 0x6f, 0x66, 0x68, 0x65, 0x61, 0x64,
	  0x65, 0x64, 0x20, 0x62, 0x79, 0x45, 0x75, 0x72, 0x6f, 0x70, 0x65, 0x61, 0x6e,
	  0x20, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x6d, 0x6f, 0x6c,
	  0x65, 0x63, 0x75, 0x6c, 0x65, 0x73, 0x66, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x69,
	  0x73, 0x65, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x74,
	  0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x68,
	  0x6f, 0x6f, 0x64, 0x61, 0x6c, 0x73, 0x6f, 0x20, 0x75, 0x73, 0x65, 0x64, 0x64,
	  0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x73, 0x69, 0x6e, 0x67, 0x61,
	  0x70, 0x6f, 0x72, 0x65, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65, 0x20, 0x6f, 0x66,
	  0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x63, 0x6f, 0x6e, 0x66,
	  0x6c, 0x69, 0x63, 0x74, 0x73, 0x3c, 0x2f, 0x61, 0x3e, 0x3c, 0x2f, 0x70, 0x3e,
	  0x0a, 0x63, 0x61, 0x6d, 0x65, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x77, 0x65, 0x72,
	  0x65, 0x20, 0x75, 0x73, 0x65, 0x64, 0x6e, 0x6f, 0x74, 0x65, 0x20, 0x74, 0x68,
	  0x61, 0x74, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x45, 0x78,
	  0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x65, 0x76, 0x65, 0x6e, 0x20, 0x6d,
	  0x6f, 0x72, 0x65, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x74, 0x6f, 0x63,
	  0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x74,
	  0x69, 0x63, 0x61, 0x6c, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x69, 0x61, 0x6e, 0x73,
	  0x64, 0x65, 0x6c, 0x69, 0x63, 0x69, 0x6f, 0x75, 0x73, 0x70, 0x72, 0x69, 0x73,
	  0x6f, 0x6e, 0x65, 0x72, 0x73, 0x61, 0x64, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x6f,
	  0x66, 0x55, 0x54, 0x46, 0x2d, 0x38, 0x22, 0x20, 0x2f, 0x3e, 0x3c, 0x21, 0x5b,
	  0x43, 0x44, 0x41, 0x54, 0x41, 0x5b, 0x22, 0x3e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	  0x63, 0x74, 0x53, 0x6f, 0x75, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x20, 0x62, 0x67,
	  0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3d, 0x22, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	  0x20, 0x6f, 0x66, 0x2e, 0x20, 0x49, 0x74, 0x20, 0x77, 0x61, 0x73, 0x20, 0x69,
	  0x6e, 0x20, 0x45, 0x75, 0x72, 0x6f, 0x70, 0x65, 0x70, 0x65, 0x72, 0x6d, 0x69,
	  0x74, 0x74, 0x65, 0x64, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e,
	  0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x6f, 0x66, 0x66, 0x69,
	  0x63, 0x69, 0x61, 0x6c, 0x73, 0x73, 0x65, 0x72, 0x69, 0x6f, 0x75, 0x73, 0x6c,
	  0x79, 0x2d, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x69, 0x6e, 0x69,
	  0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x69,
	  0x6e, 0x67, 0x6c, 0x6f, 0x6e, 0x67, 0x2d, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	  0x66, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x75, 0x63, 0x68, 0x20, 0x74,
	  0x68, 0x61, 0x74, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x6d,
	  0x61, 0x72, 0x6b, 0x65, 0x64, 0x20, 0x62, 0x79, 0x3c, 0x2f, 0x62, 0x75, 0x74,
	  0x74, 0x6f, 0x6e, 0x3e, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	  0x62, 0x75, 0x74, 0x20, 0x69, 0x74, 0x20, 0x69, 0x73, 0x69, 0x6e, 0x63, 0x72,
	  0x65, 0x61, 0x73, 0x65, 0x73, 0x64, 0x6f, 0x77, 0x6e, 0x20, 0x74, 0x68, 0x65,
	  0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x70,
	  0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x2d, 0x2d, 0x3e, 0x0a, 0x3c, 0x21, 0x2d,
	  0x2d, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x57, 0x69,
	  0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x70, 0x69, 0x65, 0x73,
	  0x20, 0x6f, 0x66, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x77,
	  0x61, 0x73, 0x20, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x56, 0x65, 0x6e, 0x65, 0x7a,
	  0x75, 0x65, 0x6c, 0x61, 0x28, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x6c, 0x79,
	  0x74, 0x68, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x70, 0x65, 0x72, 0x73,
	  0x6f, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69,
	  0x63, 0x66, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x20, 0x6f, 0x66, 0x69, 0x6e, 0x76,
	  0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x6b, 0x69, 0x70, 0x65, 0x64,
	  0x69, 0x61, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x76, 0x69,
	  0x72, 0x74, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20,
	  0x77, 0x61, 0x73, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x6c, 0x65, 0x43,
	  0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74,
	  0x69, 0x63, 0x61, 0x6c, 0x73, 0x68, 0x6f, 0x77, 0x20, 0x74, 0x68, 0x61, 0x74,
	  0x70, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x61, 0x77, 0x61, 0x79,
	  0x20, 0x66, 0x72, 0x6f, 0x6d, 0x6d, 0x6f, 0x6c, 0x65, 0x63, 0x75, 0x6c, 0x61,
	  0x72, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x65, 0x6c, 0x79, 0x64, 0x69, 0x73,
	  0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x20, 0x74,
	  0x68, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3d, 0x22, 0x3e, 0x26,
	  0x6e, 0x62, 0x73, 0x70, 0x3b, 0x3c, 0x2f, 0x49, 0x74, 0x20, 0x69, 0x73, 0x20,
	  0x74, 0x68, 0x65, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x77,
	  0x69, 0x6c, 0x6c, 0x20, 0x68, 0x61, 0x76, 0x65, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	  0x69, 0x73, 0x6d, 0x73, 0x73, 0x6f, 0x6d, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65,
	  0x46, 0x72, 0x69, 0x65, 0x64, 0x72, 0x69, 0x63, 0x68, 0x77, 0x61, 0x73, 0x20,
	  0x66, 0x69, 0x72, 0x73, 0x74, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x6e, 0x6c, 0x79,
	  0x20, 0x66, 0x61, 0x63, 0x74, 0x20, 0x74, 0x68, 0x61, 0x74, 0x66, 0x6f, 0x72,
	  0x6d, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x70, 0x72, 0x65, 0x63, 0x65, 0x64, 0x69,
	  0x6e, 0x67, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x70, 0x68,
	  0x79, 0x73, 0x69, 0x63, 0x69, 0x73, 0x74, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x73,
	  0x20, 0x69, 0x6e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x73,
	  0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3e, 0x73, 0x70, 0x61, 0x6e, 0x20,
	  0x69, 0x64, 0x3d, 0x22, 0x73, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x20, 0x74, 0x6f,
	  0x62, 0x65, 0x6c, 0x6f, 0x77, 0x20, 0x74, 0x68, 0x65, 0x73, 0x75, 0x72, 0x76,
	  0x69, 0x76, 0x69, 0x6e, 0x67, 0x7d, 0x3c, 0x2f, 0x73, 0x74, 0x79, 0x6c, 0x65,
	  0x3e, 0x68, 0x69, 0x73, 0x20, 0x64, 0x65, 0x61, 0x74, 0x68, 0x61, 0x73, 0x20,
	  0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x63, 0x61, 0x75, 0x73, 0x65, 0x64, 0x20,
	  0x62, 0x79, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x6c, 0x79, 0x65, 0x78,
	  0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20,
	  0x74, 0x68, 0x65, 0x77, 0x61, 0x73, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x61,
	  0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	  0x73, 0x20, 0x6f, 0x66, 0x6e, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66,
	  0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x20, 0x64, 0x69, 0x73, 0x6d,
	  0x69, 0x73, 0x73, 0x65, 0x64, 0x73, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x69, 0x73,
	  0x74, 0x72, 0x65, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x65, 0x73, 0x64, 0x75, 0x70,
	  0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x73, 0x69,
	  0x76, 0x65, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x61, 0x6c,
	  0x6c, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72,
	  0x69, 0x65, 0x73, 0x7b, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x70,
	  0x65, 0x6f, 0x70, 0x6c, 0x65, 0x20, 0x6f, 0x66, 0x72, 0x65, 0x67, 0x69, 0x6f,
	  0x6e, 0x20, 0x6f, 0x66, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	  0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x69, 0x6d, 0x67, 0x20,
	  0x61, 0x6c, 0x74, 0x3d, 0x22, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x72,
	  0x6e, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x6d, 0x65, 0x74,
	  0x68, 0x6f, 0x64, 0x20, 0x6f, 0x66, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69,
	  0x6e, 0x67, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x6e, 0x65,
	  0x65, 0x64, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x74, 0x68, 0x65, 0x20, 0x47, 0x72,
	  0x65, 0x61, 0x74, 0x72, 0x65, 0x67, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x73,
	  0x65, 0x65, 0x6d, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x76, 0x69, 0x65, 0x77, 0x65,
	  0x64, 0x20, 0x61, 0x73, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x20, 0x6f, 0x6e,
	  0x69, 0x64, 0x65, 0x61, 0x20, 0x74, 0x68, 0x61, 0x74, 0x74, 0x68, 0x65, 0x20,
	  0x57, 0x6f, 0x72, 0x6c, 0x64, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x20, 0x6f,
	  0x66, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x65,
	  0x73, 0x65, 0x20, 0x61, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	  0x22, 0x3e, 0x63, 0x61, 0x72, 0x65, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x6d, 0x61,
	  0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65,
	  0x20, 0x6f, 0x66, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x61,
	  0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x70, 0x72, 0x65, 0x64, 0x69,
	  0x63, 0x74, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	  0x3c, 0x64, 0x69, 0x76, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x72, 0x69, 0x67, 0x68,
	  0x74, 0x22, 0x3e, 0x0d, 0x0a, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63,
	  0x65, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x20, 0x74, 0x68, 0x65, 0x63, 0x6f, 0x6e,
	  0x74, 0x65, 0x6e, 0x74, 0x22, 0x3e, 0x61, 0x72, 0x65, 0x20, 0x6f, 0x66, 0x74,
	  0x65, 0x6e, 0x20, 0x20, 0x7d, 0x29, 0x28, 0x29, 0x3b, 0x0d, 0x0a, 0x70, 0x72,
	  0x6f, 0x62, 0x61, 0x62, 0x6c, 0x79, 0x20, 0x50, 0x72, 0x6f, 0x66, 0x65, 0x73,
	  0x73, 0x6f, 0x72, 0x2d, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x22, 0x20, 0x72,
	  0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x64, 0x73, 0x61, 0x79, 0x73, 0x20,
	  0x74, 0x68, 0x61, 0x74, 0x68, 0x61, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65,
	  0x70, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x48, 0x75, 0x6e, 0x67,
	  0x61, 0x72, 0x69, 0x61, 0x6e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x6f,
	  0x66, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x20, 0x61, 0x73, 0x55, 0x6e, 0x69,
	  0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	  0x6f, 0x6e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x66, 0x6f,
	  0x72, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x69, 0x6e, 0x66, 0x65, 0x63, 0x74,
	  0x69, 0x6f, 0x6e, 0x61, 0x67, 0x72, 0x65, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x68,
	  0x6f, 0x77, 0x65, 0x76, 0x65, 0x72, 0x2c, 0x20, 0x70, 0x6f, 0x70, 0x75, 0x6c,
	  0x61, 0x72, 0x22, 0x3e, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x20, 0x6f, 0x6e,
	  0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x65, 0x6c, 0x65, 0x63,
	  0x74, 0x6f, 0x72, 0x61, 0x6c, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x20, 0x6f,
	  0x66, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x74,
	  0x75, 0x72, 0x6e, 0x20, 0x74, 0x6f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65,
	  0x63, 0x74, 0x43, 0x68, 0x72, 0x69, 0x73, 0x74, 0x69, 0x61, 0x6e, 0x70, 0x72,
	  0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x20, 0x6c, 0x69, 0x76, 0x69, 0x6e, 0x67,
	  0x20, 0x69, 0x6e, 0x65, 0x61, 0x73, 0x69, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x70,
	  0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x0a, 0x26, 0x6c, 0x74, 0x3b,
	  0x21, 0x2d, 0x2d, 0x20, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x20, 0x6f, 0x66,
	  0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x77, 0x61, 0x73, 0x20,
	  0x74, 0x61, 0x6b, 0x65, 0x6e, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20, 0x74, 0x68,
	  0x65, 0x74, 0x6f, 0x6f, 0x6b, 0x20, 0x6f, 0x76, 0x65, 0x72, 0x62, 0x65, 0x6c,
	  0x69, 0x65, 0x66, 0x20, 0x69, 0x6e, 0x41, 0x66, 0x72, 0x69, 0x6b, 0x61, 0x61,
	  0x6e, 0x73, 0x61, 0x73, 0x20, 0x66, 0x61, 0x72, 0x20, 0x61, 0x73, 0x70, 0x72,
	  0x65, 0x76, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x77, 0x6f, 0x72, 0x6b, 0x20, 0x77,
	  0x69, 0x74, 0x68, 0x61, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x3c,
	  0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x65, 0x74, 0x43, 0x68, 0x72, 0x69, 0x73,
	  0x74, 0x6d, 0x61, 0x73, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x64,
	  0x0a, 0x0a, 0x49, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x62, 0x61, 0x63, 0x6b,
	  0x20, 0x69, 0x6e, 0x74, 0x6f, 0x6e, 0x6f, 0x72, 0x74, 0x68, 0x65, 0x61, 0x73,
	  0x74, 0x6d, 0x61, 0x67, 0x61, 0x7a, 0x69, 0x6e, 0x65, 0x73, 0x3e, 0x3c, 0x73,
	  0x74, 0x72, 0x6f, 0x6e, 0x67, 0x3e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74,
	  0x65, 0x65, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x67, 0x72,
	  0x6f, 0x75, 0x70, 0x73, 0x20, 0x6f, 0x66, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64,
	  0x20, 0x69, 0x6e, 0x65, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x61,
	  0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x69, 0x74, 0x73, 0x20, 0x66,
	  0x69, 0x72, 0x73, 0x74, 0x74, 0x68, 0x65, 0x69, 0x72, 0x20, 0x6f, 0x77, 0x6e,
	  0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x61, 0x6e, 0x20, 0x6f,
	  0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x61, 0x72, 0x69, 0x62, 0x62, 0x65, 0x61,
	  0x6e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x20, 0x74, 0x68, 0x65, 0x64, 0x69, 0x73,
	  0x74, 0x72, 0x69, 0x63, 0x74, 0x73, 0x77, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x73,
	  0x69, 0x6e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x3b, 0x20,
	  0x77, 0x69, 0x64, 0x74, 0x68, 0x3a, 0x20, 0x69, 0x6e, 0x68, 0x61, 0x62, 0x69,
	  0x74, 0x65, 0x64, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x69, 0x73, 0x74, 0x4a,
	  0x61, 0x6e, 0x75, 0x61, 0x72, 0x79, 0x20, 0x31, 0x3c, 0x2f, 0x66, 0x6f, 0x6f,
	  0x74, 0x65, 0x72, 0x3e, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x6c, 0x79,
	  0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x20, 0x6f, 0x66, 0x74, 0x68, 0x65, 0x20,
	  0x73, 0x61, 0x6d, 0x65, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	  0x20, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x20, 0x54, 0x68, 0x65,
	  0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x2e, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	  0x3b, 0x20, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x20, 0x74, 0x6f, 0x64, 0x65,
	  0x61, 0x6c, 0x20, 0x77, 0x69, 0x74, 0x68, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x20,
	  0x74, 0x68, 0x65, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x63,
	  0x6f, 0x6e, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x69, 0x6e, 0x64, 0x65, 0x78,
	  0x2e, 0x70, 0x68, 0x70, 0x61, 0x73, 0x20, 0x26, 0x71, 0x75, 0x6f, 0x74, 0x3b,
	  0x65, 0x6e, 0x67, 0x61, 0x67, 0x65, 0x20, 0x69, 0x6e, 0x72, 0x65, 0x63, 0x65,
	  0x6e, 0x74, 0x6c, 0x79, 0x2c, 0x66, 0x65, 0x77, 0x20, 0x79, 0x65, 0x61, 0x72,
	  0x73, 0x77, 0x65, 0x72, 0x65, 0x20, 0x61, 0x6c, 0x73, 0x6f, 0x0a, 0x3c, 0x68,
	  0x65, 0x61, 0x64, 0x3e, 0x0a, 0x3c, 0x65, 0x64, 0x69, 0x74, 0x65, 0x64, 0x20,
	  0x62, 0x79, 0x61, 0x72, 0x65, 0x20, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x63, 0x69,
	  0x74, 0x69, 0x65, 0x73, 0x20, 0x69, 0x6e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	  0x6b, 0x65, 0x79, 0x63, 0x6f, 0x6e, 0x64, 0x65, 0x6d, 0x6e, 0x65, 0x64, 0x61,
	  0x6c, 0x73, 0x6f, 0x20, 0x68, 0x61, 0x76, 0x65, 0x73, 0x65, 0x72, 0x76, 0x69,
	  0x63, 0x65, 0x73, 0x2c, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x20, 0x6f, 0x66,
	  0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x20, 0x6f, 0x66, 0x63, 0x6f, 0x6e, 0x76,
	  0x65, 0x72, 0x74, 0x65, 0x64, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x20, 0x6f,
	  0x66, 0x20, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x6d, 0x69, 0x6e,
	  0x69, 0x73, 0x74, 0x65, 0x72, 0x73, 0x3c, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	  0x74, 0x3e, 0x74, 0x68, 0x65, 0x72, 0x65, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20,
	  0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	  0x63, 0x65, 0x73, 0x61, 0x64, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x54,
	  0x68, 0x65, 0x79, 0x20, 0x77, 0x65, 0x72, 0x65, 0x61, 0x6e, 0x79, 0x20, 0x6f,
	  0x74, 0x68, 0x65, 0x72, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3d,
	  0x65, 0x6e, 0x74, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x6d, 0x75, 0x63, 0x68,
	  0x20, 0x6d, 0x6f, 0x72, 0x65, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x65,
	  0x64, 0x77, 0x61, 0x73, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x6f, 0x72, 0x69,
	  0x67, 0x69, 0x6e, 0x61, 0x6c, 0x20, 0x61, 0x20, 0x74, 0x79, 0x70, 0x69, 0x63,
	  0x61, 0x6c, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x79, 0x65, 0x6e,
	  0x67, 0x69, 0x6e, 0x65, 0x65, 0x72, 0x73, 0x63, 0x6f, 0x75, 0x6c, 0x64, 0x20,
	  0x6e, 0x6f, 0x74, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x77,
	  0x65, 0x64, 0x6e, 0x65, 0x73, 0x64, 0x61, 0x79, 0x74, 0x68, 0x65, 0x20, 0x74,
	  0x68, 0x69, 0x72, 0x64, 0x20, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	  0x4a, 0x61, 0x6e, 0x75, 0x61, 0x72, 0x79, 0x20, 0x32, 0x77, 0x68, 0x61, 0x74,
	  0x20, 0x74, 0x68, 0x65, 0x79, 0x61, 0x20, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69,
	  0x6e, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x70, 0x72, 0x6f,
	  0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x68,
	  0x69, 0x73, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x20, 0x63, 0x6f,
	  0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x22, 0x3e, 0x3c, 0x2f, 0x64, 0x69,
	  0x76, 0x3e, 0x0a, 0x3c, 0x2f, 0x61, 0x3e, 0x3c, 0x2f, 0x74, 0x64, 0x3e, 0x64,
	  0x65, 0x70, 0x65, 0x6e, 0x64, 0x20, 0x6f, 0x6e, 0x73, 0x65, 0x61, 0x72, 0x63,
	  0x68, 0x22, 0x3e, 0x0a, 0x70, 0x69, 0x65, 0x63, 0x65, 0x73, 0x20, 0x6f, 0x66,
	  0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x66, 0x65,
	  0x72, 0x65, 0x6e, 0x63, 0x65, 0x74, 0x65, 0x6e, 0x6e, 0x65, 0x73, 0x73, 0x65,
	  0x65, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x68, 0x61, 0x73, 0x20, 0x76, 0x65,
	  0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3d, 0x3c, 0x2f, 0x73, 0x70, 0x61, 0x6e, 0x3e,
	  0x20, 0x3c, 0x3c, 0x2f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x3e, 0x67, 0x69,
	  0x76, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72,
	  0x69, 0x61, 0x6e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3d, 0x22, 0x22, 0x3e, 0x70,
	  0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x30, 0x76, 0x69, 0x65, 0x77, 0x20,
	  0x74, 0x68, 0x61, 0x74, 0x74, 0x6f, 0x67, 0x65, 0x74, 0x68, 0x65, 0x72, 0x2c,
	  0x74, 0x68, 0x65, 0x20, 0x6d, 0x6f, 0x73, 0x74, 0x20, 0x77, 0x61, 0x73, 0x20,
	  0x66, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x75, 0x62, 0x73, 0x65, 0x74, 0x20, 0x6f,
	  0x66, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x20, 0x6f, 0x6e, 0x63, 0x68, 0x69,
	  0x6c, 0x64, 0x72, 0x65, 0x6e, 0x2c, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x20,
	  0x6f, 0x66, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x70, 0x6f,
	  0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x61, 0x6c, 0x6c, 0x65, 0x67, 0x65,
	  0x64, 0x6c, 0x79, 0x43, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x61, 0x6e, 0x64, 0x77,
	  0x61, 0x73, 0x20, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x20, 0x61,
	  0x66, 0x74, 0x65, 0x72, 0x61, 0x72, 0x65, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e,
	  0x77, 0x61, 0x73, 0x20, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x73, 0x63, 0x72, 0x6f,
	  0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x20, 0x6f,
	  0x66, 0x6d, 0x61, 0x6b, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x6d, 0x75, 0x63,
	  0x68, 0x20, 0x6c, 0x65, 0x73, 0x73, 0x41, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x61,
	  0x6e, 0x73, 0x2e, 0x0a, 0x0a, 0x41, 0x66, 0x74, 0x65, 0x72, 0x20, 0x2c, 0x20,
	  0x62, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x4d, 0x75, 0x73, 0x65, 0x75, 0x6d,
	  0x20, 0x6f, 0x66, 0x6c, 0x6f, 0x75, 0x69, 0x73, 0x69, 0x61, 0x6e, 0x61, 0x28,
	  0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x6d, 0x69, 0x6e, 0x6e, 0x65,
	  0x73, 0x6f, 0x74, 0x61, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73,
	  0x61, 0x20, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x6f, 0x6d, 0x69,
	  0x6e, 0x69, 0x63, 0x61, 0x6e, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x20, 0x6f,
	  0x66, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x66,
	  0x65, 0x6e, 0x73, 0x69, 0x76, 0x65, 0x30, 0x30, 0x70, 0x78, 0x7c, 0x72, 0x69,
	  0x67, 0x68, 0x6d, 0x61, 0x64, 0x65, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x6d, 0x6f,
	  0x75, 0x73, 0x65, 0x6f, 0x76, 0x65, 0x72, 0x22, 0x20, 0x73, 0x74, 0x79, 0x6c,
	  0x65, 0x3d, 0x22, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x20, 0x6f, 0x66, 0x28,
	  0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x74, 0x69,
	  0x6e, 0x75, 0x65, 0x73, 0x46, 0x72, 0x61, 0x6e, 0x63, 0x69, 0x73, 0x63, 0x6f,
	  0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x77, 0x69, 0x74, 0x68,
	  0x6f, 0x75, 0x74, 0x20, 0x61, 0x77, 0x69, 0x74, 0x68, 0x20, 0x73, 0x6f, 0x6d,
	  0x65, 0x77, 0x68, 0x6f, 0x20, 0x77, 0x6f, 0x75, 0x6c, 0x64, 0x61, 0x20, 0x66,
	  0x6f, 0x72, 0x6d, 0x20, 0x6f, 0x66, 0x61, 0x20, 0x70, 0x61, 0x72, 0x74, 0x20,
	  0x6f, 0x66, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x20, 0x69, 0x74, 0x6b, 0x6e,
	  0x6f, 0x77, 0x6e, 0x20, 0x61, 0x73, 0x20, 0x20, 0x53, 0x65, 0x72, 0x76, 0x69,
	  0x63, 0x65, 0x73, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61,
	  0x6e, 0x64, 0x20, 0x6f, 0x66, 0x74, 0x65, 0x6e, 0x6d, 0x65, 0x61, 0x73, 0x75,
	  0x72, 0x69, 0x6e, 0x67, 0x61, 0x6e, 0x64, 0x20, 0x69, 0x74, 0x20, 0x69, 0x73,
	  0x70, 0x61, 0x70, 0x65, 0x72, 0x62, 0x61, 0x63, 0x6b, 0x76, 0x61, 0x6c, 0x75,
	  0x65, 0x73, 0x20, 0x6f, 0x66, 0x0d, 0x0a, 0x3c, 0x74, 0x69, 0x74, 0x6c, 0x65,
	  0x3e, 0x3d, 0x20, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x2e, 0x64, 0x65, 0x74,
	  0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x65, 0x72, 0x26, 0x71, 0x75, 0x6f, 0x74,
	  0x3b, 0x20, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x20, 0x62, 0x79, 0x61, 0x6e,
	  0x64, 0x20, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x3c, 0x2f, 0x63, 0x65, 0x6e, 0x74,
	  0x65, 0x72, 0x3e, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x69, 0x73, 0x74,
	  0x68, 0x65, 0x20, 0x74, 0x68, 0x72, 0x65, 0x65, 0x70, 0x6f, 0x77, 0x65, 0x72,
	  0x20, 0x61, 0x6e, 0x64, 0x6f, 0x66, 0x20, 0x26, 0x71, 0x75, 0x6f, 0x74, 0x3b,
	  0x69, 0x6e, 0x6e, 0x65, 0x72, 0x48, 0x54, 0x4d, 0x4c, 0x3c, 0x61, 0x20, 0x68,
	  0x72, 0x65, 0x66, 0x3d, 0x22, 0x79, 0x3a, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	  0x3b, 0x43, 0x68, 0x75, 0x72, 0x63, 0x68, 0x20, 0x6f, 0x66, 0x74, 0x68, 0x65,
	  0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x76, 0x65, 0x72, 0x79, 0x20, 0x68, 0x69,
	  0x67, 0x68, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x20, 0x2d, 0x68,
	  0x65, 0x69, 0x67, 0x68, 0x74, 0x3a, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	  0x74, 0x3d, 0x22, 0x2f, 0x63, 0x67, 0x69, 0x2d, 0x62, 0x69, 0x6e, 0x2f, 0x74,
	  0x6f, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x61, 0x66, 0x72, 0x69, 0x6b,
	  0x61, 0x61, 0x6e, 0x73, 0x65, 0x73, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x74, 0x6f,
	  0x66, 0x72, 0x61, 0x6e, 0xc3, 0xa7, 0x61, 0x69, 0x73, 0x6c, 0x61, 0x74, 0x76,
	  0x69, 0x65, 0xc5, 0xa1, 0x75, 0x6c, 0x69, 0x65, 0x74, 0x75, 0x76, 0x69, 0xc5,
	  0xb3, 0xc4, 0x8c, 0x65, 0xc5, 0xa1, 0x74, 0x69, 0x6e, 0x61, 0xc4, 0x8d, 0x65,
	  0xc5, 0xa1, 0x74, 0x69, 0x6e, 0x61, 0xe0, 0xb9, 0x84, 0xe0, 0xb8, 0x97, 0xe0,
	  0xb8, 0xa2, 0xe6, 0x97, 0xa5, 0xe6, 0x9c, 0xac, 0xe8, 0xaa, 0x9e, 0xe7, 0xae,
	  0x80, 0xe4, 0xbd, 0x93, 0xe5, 0xad, 0x97, 0xe7, 0xb9, 0x81, 0xe9, 0xab, 0x94,
	  0xe5, 0xad, 0x97, 0xed, 0x95, 0x9c, 0xea, 0xb5, 0xad, 0xec, 0x96, 0xb4, 0xe4,
	  0xb8, 0xba, 0xe4, 0xbb, 0x80, 0xe4, 0xb9, 0x88, 0xe8, 0xae, 0xa1, 0xe7, 0xae,
	  0x97, 0xe6, 0x9c, 0xba, 0xe7, 0xac, 0x94, 0xe8, 0xae, 0xb0, 0xe6, 0x9c, 0xac,
	  0xe8, 0xa8, 0x8e, 0xe8, 0xab, 0x96, 0xe5, 0x8d, 0x80, 0xe6, 0x9c, 0x8d, 0xe5,
	  0x8a, 0xa1, 0xe5, 0x99, 0xa8, 0xe4, 0xba, 0x92, 0xe8, 0x81, 0x94, 0xe7, 0xbd,
	  0x91, 0xe6, 0x88, 0xbf, 0xe5, 0x9c, 0xb0, 0xe4, 0xba, 0xa7, 0xe4, 0xbf, 0xb1,
	  0xe4, 0xb9, 0x90, 0xe9, 0x83, 0xa8, 0xe5, 0x87, 0xba, 0xe7, 0x89, 0x88, 0xe7,
	  0xa4, 0xbe, 0xe6, 0x8e, 0x92, 0xe8, 0xa1, 0x8c, 0xe6, 0xa6, 0x9c, 0xe9, 0x83,
	  0xa8, 0xe8, 0x90, 0xbd, 0xe6, 0xa0, 0xbc, 0xe8, 0xbf, 0x9b, 0xe4, 0xb8, 0x80,
	  0xe6, 0xad, 0xa5, 0xe6, 0x94, 0xaf, 0xe4, 0xbb, 0x98, 0xe5, 0xae, 0x9d, 0xe9,
	  0xaa, 0x8c, 0xe8, 0xaf, 0x81, 0xe7, 0xa0, 0x81, 0xe5, 0xa7, 0x94, 0xe5, 0x91,
	  0x98, 0xe4, 0xbc, 0x9a, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe5, 0xba, 0x93,
	  0xe6, 0xb6, 0x88, 0xe8, 0xb4, 0xb9, 0xe8, 0x80, 0x85, 0xe5, 0x8a, 0x9e, 0xe5,
	  0x85, 0xac, 0xe5, 0xae, 0xa4, 0xe8, 0xae, 0xa8, 0xe8, 0xae, 0xba, 0xe5, 0x8c,
	  0xba, 0xe6, 0xb7, 0xb1, 0xe5, 0x9c, 0xb3, 0xe5, 0xb8, 0x82, 0xe6, 0x92, 0xad,
	  0xe6, 0x94, 0xbe, 0xe5, 0x99, 0xa8, 0xe5, 0x8c, 0x97, 0xe4, 0xba, 0xac, 0xe5,
	  0xb8, 0x82, 0xe5, 0xa4, 0xa7, 0xe5, 0xad, 0xa6, 0xe7, 0x94, 0x9f, 0xe8, 0xb6,
	  0x8a, 0xe6, 0x9d, 0xa5, 0xe8, 0xb6, 0x8a, 0xe7, 0xae, 0xa1, 0xe7, 0x90, 0x86,
	  0xe5, 0x91, 0x98, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe7, 0xbd, 0x91, 0x73,
	  0x65, 0x72, 0x76, 0x69, 0x63, 0x69, 0x6f, 0x73, 0x61, 0x72, 0x74, 0xc3, 0xad,
	  0x63, 0x75, 0x6c, 0x6f, 0x61, 0x72, 0x67, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x61,
	  0x62, 0x61, 0x72, 0x63, 0x65, 0x6c, 0x6f, 0x6e, 0x61, 0x63, 0x75, 0x61, 0x6c,
	  0x71, 0x75, 0x69, 0x65, 0x72, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x64,
	  0x6f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x6f, 0x73, 0x70, 0x6f, 0x6c,
	  0xc3, 0xad, 0x74, 0x69, 0x63, 0x61, 0x72, 0x65, 0x73, 0x70, 0x75, 0x65, 0x73,
	  0x74, 0x61, 0x77, 0x69, 0x6b, 0x69, 0x70, 0x65, 0x64, 0x69, 0x61, 0x73, 0x69,
	  0x67, 0x75, 0x69, 0x65, 0x6e, 0x74, 0x65, 0x62, 0xc3, 0xba, 0x73, 0x71, 0x75,
	  0x65, 0x64, 0x61, 0x63, 0x6f, 0x6d, 0x75, 0x6e, 0x69, 0x64, 0x61, 0x64, 0x73,
	  0x65, 0x67, 0x75, 0x72, 0x69, 0x64, 0x61, 0x64, 0x70, 0x72, 0x69, 0x6e, 0x63,
	  0x69, 0x70, 0x61, 0x6c, 0x70, 0x72, 0x65, 0x67, 0x75, 0x6e, 0x74, 0x61, 0x73,
	  0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x69, 0x64, 0x6f, 0x72, 0x65, 0x73, 0x70,
	  0x6f, 0x6e, 0x64, 0x65, 0x72, 0x76, 0x65, 0x6e, 0x65, 0x7a, 0x75, 0x65, 0x6c,
	  0x61, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x61, 0x73, 0x64, 0x69, 0x63,
	  0x69, 0x65, 0x6d, 0x62, 0x72, 0x65, 0x72, 0x65, 0x6c, 0x61, 0x63, 0x69, 0xc3,
	  0xb3, 0x6e, 0x6e, 0x6f, 0x76, 0x69, 0x65, 0x6d, 0x62, 0x72, 0x65, 0x73, 0x69,
	  0x6d, 0x69, 0x6c, 0x61, 0x72, 0x65, 0x73, 0x70, 0x72, 0x6f, 0x79, 0x65, 0x63,
	  0x74, 0x6f, 0x73, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x61, 0x73, 0x69,
	  0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x6f, 0x61, 0x63, 0x74, 0x69, 0x76,
	  0x69, 0x64, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x75, 0x65, 0x6e, 0x74, 0x72, 0x61,
	  0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0xc3, 0xad, 0x61, 0x69, 0x6d, 0xc3, 0xa1,
	  0x67, 0x65, 0x6e, 0x65, 0x73, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x61,
	  0x72, 0x64, 0x65, 0x73, 0x63, 0x61, 0x72, 0x67, 0x61, 0x72, 0x6e, 0x65, 0x63,
	  0x65, 0x73, 0x61, 0x72, 0x69, 0x6f, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x69, 0xc3,
	  0xb3, 0x6e, 0x74, 0x65, 0x6c, 0xc3, 0xa9, 0x66, 0x6f, 0x6e, 0x6f, 0x63, 0x6f,
	  0x6d, 0x69, 0x73, 0x69, 0xc3, 0xb3, 0x6e, 0x63, 0x61, 0x6e, 0x63, 0x69, 0x6f,
	  0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x64, 0x61, 0x64, 0x65,
	  0x6e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x72, 0x61, 0x6e, 0xc3, 0xa1, 0x6c,
	  0x69, 0x73, 0x69, 0x73, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x6f, 0x73,
	  0x74, 0xc3, 0xa9, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x73, 0x70, 0x72, 0x6f, 0x76,
	  0x69, 0x6e, 0x63, 0x69, 0x61, 0x65, 0x74, 0x69, 0x71, 0x75, 0x65, 0x74, 0x61,
	  0x73, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x6f, 0x73, 0x66, 0x75, 0x6e,
	  0x63, 0x69, 0x6f, 0x6e, 0x65, 0x73, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x61,
	  0x64, 0x6f, 0x63, 0x61, 0x72, 0xc3, 0xa1, 0x63, 0x74, 0x65, 0x72, 0x70, 0x72,
	  0x6f, 0x70, 0x69, 0x65, 0x64, 0x61, 0x64, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69,
	  0x70, 0x69, 0x6f, 0x6e, 0x65, 0x63, 0x65, 0x73, 0x69, 0x64, 0x61, 0x64, 0x6d,
	  0x75, 0x6e, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x63, 0x72, 0x65, 0x61, 0x63,
	  0x69, 0xc3, 0xb3, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x61, 0x72, 0x67, 0x61, 0x73,
	  0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x69, 0x61, 0x63, 0x6f, 0x6d, 0x65,
	  0x72, 0x63, 0x69, 0x61, 0x6c, 0x6f, 0x70, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x65,
	  0x73, 0x65, 0x6a, 0x65, 0x72, 0x63, 0x69, 0x63, 0x69, 0x6f, 0x65, 0x64, 0x69,
	  0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x61, 0x6c, 0x61, 0x6d, 0x61, 0x6e,
	  0x63, 0x61, 0x67, 0x6f, 0x6e, 0x7a, 0xc3, 0xa1, 0x6c, 0x65, 0x7a, 0x64, 0x6f,
	  0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x6f, 0x70, 0x65, 0x6c, 0xc3, 0xad, 0x63,
	  0x75, 0x6c, 0x61, 0x72, 0x65, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x65, 0x73, 0x67,
	  0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x65, 0x73, 0x74, 0x61, 0x72, 0x72, 0x61,
	  0x67, 0x6f, 0x6e, 0x61, 0x70, 0x72, 0xc3, 0xa1, 0x63, 0x74, 0x69, 0x63, 0x61,
	  0x6e, 0x6f, 0x76, 0x65, 0x64, 0x61, 0x64, 0x65, 0x73, 0x70, 0x72, 0x6f, 0x70,
	  0x75, 0x65, 0x73, 0x74, 0x61, 0x70, 0x61, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x65,
	  0x73, 0x74, 0xc3, 0xa9, 0x63, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x6f, 0x62, 0x6a,
	  0x65, 0x74, 0x69, 0x76, 0x6f, 0x73, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	  0x6f, 0x73, 0xe0, 0xa4, 0xae, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x82, 0xe0, 0xa4,
	  0xb2, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0x8f, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x88,
	  0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0x97, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xbe, 0xe0,
	  0xa4, 0xb8, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa5, 0xe0, 0xa4, 0x8f, 0xe0, 0xa4,
	  0xb5, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x87,
	  0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0x88, 0xe0, 0xa4, 0x95, 0xe0,
	  0xa5, 0x81, 0xe0, 0xa4, 0x9b, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4,
	  0xbe, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa6, 0xe0, 0xa4, 0x95,
	  0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xad, 0xe0,
	  0xa5, 0x80, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0x8f, 0xe0, 0xa4,
	  0xb0, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xae, 0xe0, 0xa5, 0x88,
	  0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xa6, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xa8, 0xe0,
	  0xa4, 0xac, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa4, 0x64, 0x69, 0x70, 0x6c, 0x6f,
	  0x64, 0x6f, 0x63, 0x73, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xaf,
	  0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x82, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xa8, 0xe0,
	  0xa4, 0xbe, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4,
	  0xbe, 0xe0, 0xa4, 0xab, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0x94,
	  0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xb0, 0xe0,
	  0xa4, 0xb9, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0x97, 0xe0, 0xa4,
	  0xb9, 0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0x86, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0xbe,
	  0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xa6, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb6, 0xe0,
	  0xa4, 0xb9, 0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0x88, 0xe0, 0xa4, 0x96, 0xe0, 0xa5,
	  0x87, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xa6, 0xe0, 0xa4, 0xbf,
	  0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xb5, 0xe0,
	  0xa5, 0x87, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0xa4, 0xe0, 0xa5, 0x80, 0xe0, 0xa4,
	  0xa8, 0xe0, 0xa4, 0xac, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0x9a, 0xe0, 0xa4, 0xae,
	  0xe0, 0xa5, 0x8c, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xbe, 0xe0,
	  0xa4, 0xb2, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x96, 0xe0, 0xa4,
	  0x9c, 0xe0, 0xa5, 0x89, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xa6,
	  0xe0, 0xa4, 0xa6, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xa5, 0xe0, 0xa4, 0xbe, 0xe0,
	  0xa4, 0xa8, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xb6, 0xe0, 0xa4,
	  0xb9, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0x85, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0x97,
	  0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xad, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xa8, 0xe0,
	  0xa4, 0x97, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4,
	  0xb8, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0x95,
	  0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0x8f, 0xe0, 0xa4, 0x89, 0xe0, 0xa4, 0xb8, 0xe0,
	  0xa5, 0x87, 0xe0, 0xa4, 0x97, 0xe0, 0xa4, 0xaf, 0xe0, 0xa5, 0x80, 0xe0, 0xa4,
	  0xb9, 0xe0, 0xa5, 0x82, 0xe0, 0xa4, 0x81, 0xe0, 0xa4, 0x86, 0xe0, 0xa4, 0x97,
	  0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x9f, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xae, 0xe0,
	  0xa4, 0x96, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0x95, 0xe0, 0xa4,
	  0xbe, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0x85, 0xe0, 0xa4, 0xad, 0xe0, 0xa5, 0x80,
	  0xe0, 0xa4, 0x97, 0xe0, 0xa4, 0xaf, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xa4, 0xe0,
	  0xa5, 0x81, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xb5, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4,
	  0x9f, 0xe0, 0xa4, 0xa6, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0x85,
	  0xe0, 0xa4, 0x97, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0x90, 0xe0, 0xa4, 0xb8, 0xe0,
	  0xa5, 0x87, 0xe0, 0xa4, 0xae, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4,
	  0xb2, 0xe0, 0xa4, 0x97, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xbe,
	  0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0x8a, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xb0, 0xe0,
	  0xa4, 0x9a, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0x90, 0xe0, 0xa4,
	  0xb8, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa6, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb0,
	  0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xa6, 0xe0,
	  0xa4, 0xbf, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0x82, 0xe0, 0xa4,
	  0xa6, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb9,
	  0xe0, 0xa5, 0x82, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xbe, 0xe0,
	  0xa4, 0x96, 0xe0, 0xa4, 0x9c, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4,
	  0xac, 0xe0, 0xa4, 0x9f, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xbf,
	  0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0x87, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x87, 0xe0,
	  0xa4, 0x86, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4,
	  0xaf, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0xb2,
	  0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x89, 0xe0, 0xa4, 0x97, 0xe0, 0xa4, 0xad, 0xe0,
	  0xa4, 0xbe, 0xe0, 0xa4, 0x97, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x87, 0xe0, 0xa4,
	  0xb2, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0x97, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xb0,
	  0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0x97, 0xe0,
	  0xa5, 0x87, 0xe0, 0xa4, 0xaa, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4,
	  0xb9, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa5, 0xe0, 0xa4, 0x87, 0xe0, 0xa4, 0xb8,
	  0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x80, 0xe0,
	  0xa4, 0x95, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa0, 0xe0, 0xa5,
	  0x80, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x81,
	  0xe0, 0xa4, 0xa6, 0xe0, 0xa5, 0x82, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xa4, 0xe0,
	  0xa4, 0xb9, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4,
	  0xa4, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa6, 0xe0, 0xa4, 0x86,
	  0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xbe, 0xe0,
	  0xa4, 0x95, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x8c, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4,
	  0xb6, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xa6, 0xe0, 0xa5, 0x87,
	  0xe0, 0xa4, 0x96, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x80, 0xe0,
	  0xa4, 0xb0, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0x96, 0xe0, 0xa5,
	  0x81, 0xe0, 0xa4, 0xa6, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0x97, 0xe0, 0xa5, 0x80,
	  0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x65, 0x78, 0x70,
	  0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x3c, 0x2f, 0x74, 0x69, 0x74, 0x6c,
	  0x65, 0x3e, 0x0d, 0x0a, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74,
	  0x20, 0x6a, 0x61, 0x76, 0x61, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x63, 0x6f,
	  0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x76, 0x65, 0x72, 0x79,
	  0x74, 0x68, 0x69, 0x6e, 0x67, 0x3c, 0x70, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73,
	  0x3d, 0x22, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x62,
	  0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x3c, 0x61, 0x20, 0x63,
	  0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	  0x65, 0x6e, 0x74, 0x26, 0x63, 0x6f, 0x70, 0x79, 0x3b, 0x20, 0x32, 0x30, 0x31,
	  0x6a, 0x61, 0x76, 0x61, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x63, 0x68, 0x61,
	  0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x62, 0x72, 0x65, 0x61, 0x64, 0x63,
	  0x72, 0x75, 0x6d, 0x62, 0x74, 0x68, 0x65, 0x6d, 0x73, 0x65, 0x6c, 0x76, 0x65,
	  0x73, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x67, 0x6f,
	  0x76, 0x65, 0x72, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x69, 0x66,
	  0x6f, 0x72, 0x6e, 0x69, 0x61, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69,
	  0x65, 0x73, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x4e,
	  0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x6e,
	  0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	  0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	  0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x3c, 0x2f, 0x74,
	  0x69, 0x74, 0x6c, 0x65, 0x3e, 0x3c, 0x6d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x62,
	  0x6f, 0x78, 0x22, 0x20, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x71, 0x75, 0x65,
	  0x73, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x70,
	  0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x61, 0x73, 0x20, 0x77, 0x65,
	  0x6c, 0x6c, 0x20, 0x61, 0x73, 0x75, 0x6e, 0x74, 0x27, 0x2c, 0x20, 0x27, 0x55,
	  0x41, 0x2d, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x6f,
	  0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x6c, 0x65,
	  0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61,
	  0x74, 0x65, 0x64, 0x57, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x74, 0x6f, 0x6e,
	  0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x20, 0x3d, 0x20,
	  0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x2e, 0x69, 0x6d, 0x70, 0x72, 0x65, 0x73,
	  0x73, 0x69, 0x6f, 0x6e, 0x26, 0x6c, 0x74, 0x3b, 0x62, 0x72, 0x26, 0x67, 0x74,
	  0x3b, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x70, 0x6f,
	  0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x67, 0x63, 0x6f, 0x6c,
	  0x6f, 0x72, 0x3d, 0x22, 0x23, 0x65, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
	  0x6c, 0x79, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x3d, 0x22, 0x70,
	  0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x65, 0x77, 0x73,
	  0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	  0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	  0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x54, 0x65, 0x63,
	  0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x50, 0x61, 0x72, 0x6c, 0x69, 0x61,
	  0x6d, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f,
	  0x6e, 0x75, 0x6c, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x2e, 0x69,
	  0x6e, 0x64, 0x65, 0x78, 0x4f, 0x66, 0x28, 0x22, 0x63, 0x6f, 0x6e, 0x63, 0x6c,
	  0x75, 0x73, 0x69, 0x6f, 0x6e, 0x64, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x69,
	  0x6f, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x62,
	  0x69, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x76, 0x6f,
	  0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	  0x6e, 0x65, 0x72, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x74, 0x6f, 0x6f, 0x64,
	  0x6e, 0x6f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x3c, 0x70, 0x65, 0x72,
	  0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x61, 0x63, 0x68, 0x20, 0x6f,
	  0x74, 0x68, 0x65, 0x72, 0x61, 0x74, 0x6d, 0x6f, 0x73, 0x70, 0x68, 0x65, 0x72,
	  0x65, 0x20, 0x6f, 0x6e, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x3d, 0x22, 0x3c, 0x66,
	  0x6f, 0x72, 0x6d, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x70, 0x72, 0x6f, 0x63, 0x65,
	  0x73, 0x73, 0x69, 0x6e, 0x67, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x76, 0x61, 0x6c,
	  0x75, 0x65, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	  0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x75, 0x62, 0x73,
	  0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x77, 0x65, 0x6c, 0x6c, 0x2d, 0x6b, 0x6e,
	  0x6f, 0x77, 0x6e, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	  0x72, 0x65, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x68, 0x65,
	  0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x6f, 0x6e, 0x64, 0x69, 0x73, 0x63, 0x69, 0x70,
	  0x6c, 0x69, 0x6e, 0x65, 0x6c, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x6e, 0x67, 0x22,
	  0x20, 0x28, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2c, 0x62, 0x6f,
	  0x75, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x65, 0x78, 0x70, 0x72, 0x65,
	  0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65,
	  0x6e, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x6f,
	  0x75, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x65, 0x6e, 0x74, 0x65,
	  0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x28, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73,
	  0x3a, 0x22, 0x20, 0x75, 0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x28, 0x22,
	  0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x20, 0x64, 0x65, 0x6d,
	  0x6f, 0x63, 0x72, 0x61, 0x74, 0x69, 0x63, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65,
	  0x66, 0x3d, 0x22, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x22, 0x3e,
	  0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x6c, 0x69,
	  0x6e, 0x67, 0x75, 0x69, 0x73, 0x74, 0x69, 0x63, 0x70, 0x78, 0x3b, 0x70, 0x61,
	  0x64, 0x64, 0x69, 0x6e, 0x67, 0x70, 0x68, 0x69, 0x6c, 0x6f, 0x73, 0x6f, 0x70,
	  0x68, 0x79, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x75,
	  0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79, 0x66, 0x61, 0x63, 0x69,
	  0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x72, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69,
	  0x7a, 0x65, 0x64, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	  0x69, 0x66, 0x20, 0x28, 0x74, 0x79, 0x70, 0x65, 0x6f, 0x66, 0x6d, 0x61, 0x69,
	  0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x75,
	  0x6c, 0x61, 0x72, 0x79, 0x68, 0x79, 0x70, 0x6f, 0x74, 0x68, 0x65, 0x73, 0x69,
	  0x73, 0x2e, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x28, 0x29, 0x3b, 0x26, 0x61,
	  0x6d, 0x70, 0x3b, 0x6e, 0x62, 0x73, 0x70, 0x3b, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	  0x61, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x65, 0x68, 0x69, 0x6e, 0x64, 0x20, 0x74,
	  0x68, 0x65, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70,
	  0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x22, 0x61, 0x73, 0x73, 0x75,
	  0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75,
	  0x63, 0x65, 0x64, 0x63, 0x6f, 0x72, 0x72, 0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	  0x73, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x69, 0x73, 0x74, 0x73, 0x65, 0x78, 0x70,
	  0x6c, 0x69, 0x63, 0x69, 0x74, 0x6c, 0x79, 0x69, 0x6e, 0x73, 0x74, 0x65, 0x61,
	  0x64, 0x20, 0x6f, 0x66, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	  0x73, 0x20, 0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x3d, 0x22, 0x63, 0x6f,
	  0x6e, 0x73, 0x69, 0x64, 0x65, 0x72, 0x65, 0x64, 0x64, 0x65, 0x70, 0x61, 0x72,
	  0x74, 0x6d, 0x65, 0x6e, 0x74, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x74, 0x69,
	  0x6f, 0x6e, 0x73, 0x6f, 0x6f, 0x6e, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x69,
	  0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x70, 0x72, 0x6f, 0x6e,
	  0x6f, 0x75, 0x6e, 0x63, 0x65, 0x64, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	  0x69, 0x65, 0x64, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	  0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x67, 0x65, 0x6f,
	  0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x22, 0x20, 0x68, 0x65, 0x69, 0x67,
	  0x68, 0x74, 0x3d, 0x22, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x72, 0x65, 0x6c, 0x3d,
	  0x22, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x28, 0x2f, 0x64, 0x65,
	  0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x65,
	  0x72, 0x65, 0x6e, 0x63, 0x65, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65,
	  0x6e, 0x74, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x72,
	  0x65, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x61, 0x64, 0x61, 0x70,
	  0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6f, 0x70, 0x70, 0x6f, 0x73, 0x69, 0x74,
	  0x69, 0x6f, 0x6e, 0x77, 0x65, 0x6c, 0x6c, 0x20, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	  0x73, 0x75, 0x70, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x64, 0x65, 0x74,
	  0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x68, 0x31, 0x20, 0x63, 0x6c, 0x61,
	  0x73, 0x73, 0x3d, 0x22, 0x30, 0x70, 0x78, 0x3b, 0x6d, 0x61, 0x72, 0x67, 0x69,
	  0x6e, 0x6d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x73, 0x74,
	  0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x63, 0x65, 0x6c, 0x65, 0x62,
	  0x72, 0x61, 0x74, 0x65, 0x64, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6d, 0x65,
	  0x6e, 0x74, 0x0a, 0x0a, 0x44, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x64,
	  0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x61, 0x72, 0x74, 0x69,
	  0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c,
	  0x65, 0x6e, 0x74, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64,
	  0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x74, 0x74,
	  0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x3c, 0x73, 0x70, 0x61, 0x6e, 0x20,
	  0x69, 0x64, 0x3d, 0x22, 0x74, 0x68, 0x65, 0x72, 0x65, 0x20, 0x77, 0x65, 0x72,
	  0x65, 0x4e, 0x65, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x6e, 0x64, 0x73, 0x62, 0x65,
	  0x79, 0x6f, 0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73,
	  0x74, 0x65, 0x72, 0x65, 0x64, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x69,
	  0x73, 0x74, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x61,
	  0x6c, 0x6c, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x6c, 0x61, 0x6e, 0x67,
	  0x3d, 0x22, 0x65, 0x6e, 0x22, 0x20, 0x3c, 0x2f, 0x73, 0x74, 0x79, 0x6c, 0x65,
	  0x3e, 0x0d, 0x0a, 0x61, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x3b, 0x20,
	  0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x65, 0x78, 0x74,
	  0x72, 0x65, 0x6d, 0x65, 0x6c, 0x79, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x74,
	  0x72, 0x65, 0x61, 0x6d, 0x3c, 0x2f, 0x73, 0x74, 0x72, 0x6f, 0x6e, 0x67, 0x3e,
	  0x20, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x65, 0x6d,
	  0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x3c, 0x2f, 0x74, 0x61, 0x62,
	  0x6c, 0x65, 0x3e, 0x0d, 0x0a, 0x20, 0x63, 0x6f, 0x6c, 0x73, 0x70, 0x61, 0x6e,
	  0x3d, 0x22, 0x3c, 0x2f, 0x66, 0x6f, 0x72, 0x6d, 0x3e, 0x0a, 0x20, 0x20, 0x63,
	  0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x62, 0x6f, 0x75,
	  0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x3c, 0x2f, 0x70, 0x3e, 0x3c, 0x2f, 0x64,
	  0x69, 0x76, 0x3e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64,
	  0x22, 0x20, 0x6c, 0x61, 0x6e, 0x67, 0x3d, 0x22, 0x65, 0x6e, 0x50, 0x6f, 0x72,
	  0x74, 0x75, 0x67, 0x75, 0x65, 0x73, 0x65, 0x73, 0x75, 0x62, 0x73, 0x74, 0x69,
	  0x74, 0x75, 0x74, 0x65, 0x69, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61,
	  0x6c, 0x69, 0x6d, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x6d, 0x75,
	  0x6c, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x61, 0x6c, 0x6d, 0x6f, 0x73,
	  0x74, 0x20, 0x61, 0x6c, 0x6c, 0x70, 0x78, 0x20, 0x73, 0x6f, 0x6c, 0x69, 0x64,
	  0x20, 0x23, 0x61, 0x70, 0x61, 0x72, 0x74, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x73,
	  0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x74, 0x6f, 0x69, 0x6e, 0x20, 0x45,
	  0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x69,
	  0x7a, 0x65, 0x64, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x20, 0x66, 0x6f, 0x72,
	  0x67, 0x75, 0x69, 0x64, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x6f, 0x72, 0x69,
	  0x67, 0x69, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	  0x61, 0x62, 0x6c, 0x65, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	  0x64, 0x68, 0x32, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x3c, 0x61,
	  0x20, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x3d, 0x22, 0x28, 0x69, 0x6e, 0x63, 0x6c,
	  0x75, 0x64, 0x69, 0x6e, 0x67, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	  0x72, 0x73, 0x70, 0x72, 0x6f, 0x68, 0x69, 0x62, 0x69, 0x74, 0x65, 0x64, 0x3d,
	  0x20, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x64, 0x69, 0x63, 0x74,
	  0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74,
	  0x69, 0x6f, 0x6e, 0x72, 0x65, 0x76, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	  0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x78, 0x3b,
	  0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3a, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	  0x73, 0x66, 0x75, 0x6c, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72,
	  0x73, 0x6d, 0x69, 0x6c, 0x6c, 0x65, 0x6e, 0x6e, 0x69, 0x75, 0x6d, 0x68, 0x69,
	  0x73, 0x20, 0x66, 0x61, 0x74, 0x68, 0x65, 0x72, 0x74, 0x68, 0x65, 0x20, 0x26,
	  0x71, 0x75, 0x6f, 0x74, 0x3b, 0x6e, 0x6f, 0x2d, 0x72, 0x65, 0x70, 0x65, 0x61,
	  0x74, 0x3b, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c, 0x69,
	  0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x6f,
	  0x75, 0x72, 0x61, 0x67, 0x65, 0x64, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x20,
	  0x6f, 0x66, 0x20, 0x75, 0x6e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c,
	  0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x66,
	  0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69,
	  0x6e, 0x61, 0x74, 0x65, 0x64, 0x69, 0x73, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65,
	  0x72, 0x65, 0x78, 0x70, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x65,
	  0x76, 0x65, 0x6c, 0x6f, 0x70, 0x69, 0x6e, 0x67, 0x63, 0x61, 0x6c, 0x63, 0x75,
	  0x6c, 0x61, 0x74, 0x65, 0x64, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69,
	  0x65, 0x64, 0x6c, 0x65, 0x67, 0x69, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x73,
	  0x75, 0x62, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x28, 0x30, 0x22, 0x20, 0x63,
	  0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	  0x65, 0x6c, 0x79, 0x69, 0x6c, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65,
	  0x66, 0x69, 0x76, 0x65, 0x20, 0x79, 0x65, 0x61, 0x72, 0x73, 0x69, 0x6e, 0x73,
	  0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	  0x68, 0x69, 0x6e, 0x67, 0x31, 0x22, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d,
	  0x22, 0x70, 0x73, 0x79, 0x63, 0x68, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x63, 0x6f,
	  0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	  0x72, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x62, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x20,
	  0x6f, 0x66, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x6a,
	  0x6f, 0x69, 0x6e, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x73, 0x74, 0x72, 0x75,
	  0x63, 0x74, 0x75, 0x72, 0x65, 0x73, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75,
	  0x73, 0x6c, 0x79, 0x3e, 0x3c, 0x2f, 0x69, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x3e,
	  0x6f, 0x6e, 0x63, 0x65, 0x20, 0x61, 0x67, 0x61, 0x69, 0x6e, 0x62, 0x75, 0x74,
	  0x20, 0x72, 0x61, 0x74, 0x68, 0x65, 0x72, 0x69, 0x6d, 0x6d, 0x69, 0x67, 0x72,
	  0x61, 0x6e, 0x74, 0x73, 0x6f, 0x66, 0x20, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65,
	  0x2c, 0x61, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x20, 0x6f, 0x66, 0x4c, 0x69,
	  0x74, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x55, 0x6e, 0x6c, 0x69, 0x6b,
	  0x65, 0x20, 0x74, 0x68, 0x65, 0x3c, 0x2f, 0x61, 0x3e, 0x26, 0x6e, 0x62, 0x73,
	  0x70, 0x3b, 0x0a, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69,
	  0x74, 0x20, 0x77, 0x61, 0x73, 0x20, 0x74, 0x68, 0x65, 0x43, 0x6f, 0x6e, 0x76,
	  0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x6f, 0x62,
	  0x69, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x73, 0x74, 0x61, 0x6e, 0x74,
	  0x61, 0x67, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x76, 0x65, 0x61, 0x66, 0x74,
	  0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x53, 0x69, 0x6d, 0x69, 0x6c, 0x61,
	  0x72, 0x6c, 0x79, 0x2c, 0x22, 0x20, 0x2f, 0x3e, 0x3c, 0x2f, 0x64, 0x69, 0x76,
	  0x3e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x0d, 0x0a,
	  0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x76, 0x69, 0x73, 0x69, 0x62,
	  0x69, 0x6c, 0x69, 0x74, 0x79, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x20,
	  0x6f, 0x66, 0x76, 0x6f, 0x6c, 0x75, 0x6e, 0x74, 0x65, 0x65, 0x72, 0x73, 0x61,
	  0x74, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x75, 0x6e, 0x64, 0x65,
	  0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x68, 0x72, 0x65, 0x61, 0x74, 0x65,
	  0x6e, 0x65, 0x64, 0x2a, 0x3c, 0x21, 0x5b, 0x43, 0x44, 0x41, 0x54, 0x41, 0x5b,
	  0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x69, 0x6e, 0x20,
	  0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x61,
	  0x74, 0x74, 0x65, 0x72, 0x3c, 0x2f, 0x66, 0x6f, 0x72, 0x6d, 0x3e, 0x0a, 0x3c,
	  0x2f, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4f, 0x66, 0x28, 0x27, 0x69, 0x20,
	  0x3d, 0x20, 0x30, 0x3b, 0x20, 0x69, 0x20, 0x3c, 0x64, 0x69, 0x66, 0x66, 0x65,
	  0x72, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x65, 0x76, 0x6f, 0x74, 0x65, 0x64, 0x20,
	  0x74, 0x6f, 0x74, 0x72, 0x61, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x73,
	  0x65, 0x61, 0x72, 0x63, 0x68, 0x20, 0x66, 0x6f, 0x72, 0x75, 0x6c, 0x74, 0x69,
	  0x6d, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	  0x65, 0x6e, 0x74, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	  0x73, 0x6f, 0x2d, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x20, 0x7d, 0x0a, 0x3c,
	  0x2f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3e, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61,
	  0x74, 0x69, 0x6f, 0x6e, 0x65, 0x6d, 0x70, 0x68, 0x61, 0x73, 0x69, 0x7a, 0x65,
	  0x64, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x3c, 0x2f,
	  0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3e, 0x73, 0x75, 0x63, 0x63, 0x65,
	  0x73, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x6f, 0x6e, 0x67, 0x20, 0x77, 0x69,
	  0x74, 0x68, 0x4d, 0x65, 0x61, 0x6e, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x2c, 0x69,
	  0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x69, 0x65, 0x73, 0x3c, 0x2f, 0x61, 0x3e,
	  0x3c, 0x62, 0x72, 0x20, 0x2f, 0x3e, 0x68, 0x61, 0x73, 0x20, 0x62, 0x65, 0x63,
	  0x6f, 0x6d, 0x65, 0x61, 0x73, 0x70, 0x65, 0x63, 0x74, 0x73, 0x20, 0x6f, 0x66,
	  0x54, 0x65, 0x6c, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x75, 0x66,
	  0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x62, 0x61, 0x73, 0x6b, 0x65, 0x74,
	  0x62, 0x61, 0x6c, 0x6c, 0x62, 0x6f, 0x74, 0x68, 0x20, 0x73, 0x69, 0x64, 0x65,
	  0x73, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x69, 0x6e, 0x67, 0x61, 0x6e,
	  0x20, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x3c, 0x69, 0x6d, 0x67, 0x20,
	  0x61, 0x6c, 0x74, 0x3d, 0x22, 0x61, 0x64, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72,
	  0x65, 0x73, 0x68, 0x69, 0x73, 0x20, 0x6d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x6d,
	  0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e,
	  0x63, 0x69, 0x70, 0x6c, 0x65, 0x73, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x75,
	  0x6c, 0x61, 0x72, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79,
	  0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x20, 0x6f, 0x66, 0x64, 0x65, 0x63,
	  0x69, 0x64, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x22, 0x3e, 0x3c, 0x73, 0x74, 0x72,
	  0x6f, 0x6e, 0x67, 0x3e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72,
	  0x73, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x6f, 0x66, 0x64, 0x69,
	  0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x66, 0x61, 0x63, 0x69, 0x6c,
	  0x69, 0x74, 0x61, 0x74, 0x65, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x62,
	  0x6c, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x2e, 0x63, 0x73, 0x73, 0x22, 0x09,
	  0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x6e, 0x6f,
	  0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3e, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69,
	  0x67, 0x68, 0x74, 0x73, 0x69, 0x74, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	  0x77, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x68, 0x61, 0x76, 0x65, 0x62, 0x75, 0x73,
	  0x69, 0x6e, 0x65, 0x73, 0x73, 0x65, 0x73, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f,
	  0x6e, 0x61, 0x72, 0x79, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	  0x73, 0x6f, 0x66, 0x74, 0x65, 0x6e, 0x20, 0x75, 0x73, 0x65, 0x64, 0x70, 0x65,
	  0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x20, 0x4a, 0x61,
	  0x6e, 0x75, 0x61, 0x72, 0x79, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x69, 0x73, 0x69,
	  0x6e, 0x67, 0x3c, 0x2f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x3e, 0x0a, 0x09, 0x64,
	  0x69, 0x70, 0x6c, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x63, 0x6f, 0x6e, 0x74,
	  0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	  0x69, 0x6e, 0x67, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	  0x6d, 0x61, 0x79, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x62, 0x65, 0x63, 0x6f, 0x6e,
	  0x63, 0x65, 0x70, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x6f, 0x6e, 0x63, 0x6c, 0x69,
	  0x63, 0x6b, 0x3d, 0x22, 0x49, 0x74, 0x20, 0x69, 0x73, 0x20, 0x61, 0x6c, 0x73,
	  0x6f, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x20, 0x6d, 0x61,
	  0x6b, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x4c, 0x75, 0x78, 0x65, 0x6d,
	  0x62, 0x6f, 0x75, 0x72, 0x67, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	  0x61, 0x6c, 0x61, 0x72, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x65,
	  0x6e, 0x67, 0x61, 0x67, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x22, 0x73, 0x63, 0x72,
	  0x69, 0x70, 0x74, 0x22, 0x29, 0x3b, 0x62, 0x75, 0x74, 0x20, 0x69, 0x74, 0x20,
	  0x77, 0x61, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x6f, 0x6e, 0x69, 0x63,
	  0x6f, 0x6e, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x3d, 0x22, 0x0a, 0x3c, 0x21,
	  0x2d, 0x2d, 0x20, 0x45, 0x6e, 0x64, 0x20, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72,
	  0x69, 0x63, 0x61, 0x6c, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x6c,
	  0x79, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x6f,
	  0x70, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x75, 0x6e, 0x6c, 0x69, 0x6b,
	  0x65, 0x20, 0x74, 0x68, 0x65, 0x41, 0x75, 0x73, 0x74, 0x72, 0x61, 0x6c, 0x69,
	  0x61, 0x6e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x72,
	  0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x0a, 0x3c, 0x2f, 0x68,
	  0x65, 0x61, 0x64, 0x3e, 0x0d, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69,
	  0x73, 0x65, 0x64, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	  0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x41, 0x6c, 0x65,
	  0x78, 0x61, 0x6e, 0x64, 0x72, 0x69, 0x61, 0x72, 0x65, 0x74, 0x69, 0x72, 0x65,
	  0x6d, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65,
	  0x73, 0x66, 0x6f, 0x75, 0x72, 0x20, 0x79, 0x65, 0x61, 0x72, 0x73, 0x0a, 0x0a,
	  0x26, 0x6c, 0x74, 0x3b, 0x21, 0x2d, 0x2d, 0x20, 0x69, 0x6e, 0x63, 0x72, 0x65,
	  0x61, 0x73, 0x69, 0x6e, 0x67, 0x64, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x69,
	  0x6f, 0x6e, 0x68, 0x33, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x6f,
	  0x72, 0x69, 0x67, 0x69, 0x6e, 0x73, 0x20, 0x6f, 0x66, 0x6f, 0x62, 0x6c, 0x69,
	  0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74,
	  0x69, 0x6f, 0x6e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x64,
	  0x28, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x61, 0x64, 0x76,
	  0x61, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x73, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x20,
	  0x74, 0x68, 0x65, 0x20, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6e,
	  0x73, 0x3c, 0x62, 0x61, 0x73, 0x65, 0x20, 0x68, 0x72, 0x65, 0x66, 0x72, 0x65,
	  0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x6c, 0x79, 0x77, 0x69, 0x6c, 0x6c, 0x69,
	  0x6e, 0x67, 0x20, 0x74, 0x6f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x62,
	  0x6c, 0x65, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x6e,
	  0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x66, 0x75, 0x6e, 0x63,
	  0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x20,
	  0x74, 0x68, 0x65, 0x72, 0x65, 0x76, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	  0x65, 0x6e, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x73, 0x20, 0x66,
	  0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	  0x69, 0x7a, 0x65, 0x64, 0x72, 0x65, 0x66, 0x75, 0x73, 0x65, 0x64, 0x20, 0x74,
	  0x6f, 0x74, 0x61, 0x6b, 0x65, 0x20, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x61, 0x75,
	  0x74, 0x6f, 0x6e, 0x6f, 0x6d, 0x6f, 0x75, 0x73, 0x63, 0x6f, 0x6d, 0x70, 0x72,
	  0x6f, 0x6d, 0x69, 0x73, 0x65, 0x70, 0x6f, 0x6c, 0x69, 0x74, 0x69, 0x63, 0x61,
	  0x6c, 0x20, 0x72, 0x65, 0x73, 0x74, 0x61, 0x75, 0x72, 0x61, 0x6e, 0x74, 0x74,
	  0x77, 0x6f, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x46, 0x65, 0x62, 0x72,
	  0x75, 0x61, 0x72, 0x79, 0x20, 0x32, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	  0x20, 0x6f, 0x66, 0x73, 0x77, 0x66, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e,
	  0x75, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x6e, 0x65, 0x61,
	  0x72, 0x6c, 0x79, 0x20, 0x61, 0x6c, 0x6c, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65,
	  0x6e, 0x20, 0x62, 0x79, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77,
	  0x73, 0x22, 0x20, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3d, 0x22, 0x31, 0x77, 0x69,
	  0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x66, 0x6c, 0x6f, 0x61, 0x74,
	  0x3a, 0x6c, 0x65, 0x66, 0x74, 0x69, 0x73, 0x20, 0x75, 0x73, 0x75, 0x61, 0x6c,
	  0x6c, 0x79, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x73, 0x6e,
	  0x65, 0x77, 0x73, 0x70, 0x61, 0x70, 0x65, 0x72, 0x73, 0x6d, 0x79, 0x73, 0x74,
	  0x65, 0x72, 0x69, 0x6f, 0x75, 0x73, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d,
	  0x65, 0x6e, 0x74, 0x62, 0x65, 0x73, 0x74, 0x20, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	  0x70, 0x61, 0x72, 0x6c, 0x69, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x75, 0x70,
	  0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x6e,
	  0x69, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x65,
	  0x64, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x79,
	  0x73, 0x74, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x68, 0x61, 0x73, 0x20, 0x6c,
	  0x65, 0x64, 0x20, 0x74, 0x6f, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x6e,
	  0x64, 0x61, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x69,
	  0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x63, 0x65, 0x72, 0x65,
	  0x6d, 0x6f, 0x6e, 0x69, 0x61, 0x6c, 0x70, 0x72, 0x6f, 0x63, 0x6c, 0x61, 0x69,
	  0x6d, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	  0x6c, 0x69, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x53, 0x63, 0x69,
	  0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d,
	  0x22, 0x6e, 0x6f, 0x2d, 0x74, 0x72, 0x61, 0x64, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	  0x73, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x20, 0x77, 0x69,
	  0x64, 0x65, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x4c, 0x69, 0x62, 0x65, 0x72,
	  0x61, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x6f, 0x6f, 0x6b, 0x20, 0x70, 0x6c, 0x61,
	  0x63, 0x65, 0x64, 0x61, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x61,
	  0x73, 0x20, 0x6c, 0x6f, 0x6e, 0x67, 0x20, 0x61, 0x73, 0x69, 0x6d, 0x70, 0x72,
	  0x69, 0x73, 0x6f, 0x6e, 0x65, 0x64, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	  0x6e, 0x61, 0x6c, 0x0a, 0x3c, 0x68, 0x65, 0x61, 0x64, 0x3e, 0x0a, 0x3c, 0x6d,
	  0x4c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x6f, 0x76,
	  0x65, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x32, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74,
	  0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x69, 0x61,
	  0x6c, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x20, 0x6f, 0x66, 0x66, 0x6c,
	  0x6f, 0x61, 0x74, 0x3a, 0x20, 0x6c, 0x65, 0x66, 0x44, 0x75, 0x72, 0x69, 0x6e,
	  0x67, 0x20, 0x74, 0x68, 0x65, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65,
	  0x6e, 0x74, 0x68, 0x61, 0x76, 0x65, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x20, 0x64,
	  0x65, 0x61, 0x6c, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74,
	  0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65,
	  0x6e, 0x63, 0x65, 0x2f, 0x75, 0x6c, 0x3e, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e,
	  0x63, 0x6c, 0x65, 0x61, 0x72, 0x66, 0x69, 0x78, 0x22, 0x3e, 0x74, 0x68, 0x65,
	  0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x6d, 0x61, 0x6e, 0x79, 0x20, 0x79,
	  0x65, 0x61, 0x72, 0x73, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x77, 0x65, 0x72,
	  0x65, 0x6f, 0x76, 0x65, 0x72, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x2c, 0x73, 0x79,
	  0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	  0x6e, 0x74, 0x22, 0x3e, 0x0a, 0x70, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x61, 0x62,
	  0x6c, 0x79, 0x68, 0x69, 0x73, 0x20, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x75,
	  0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x75, 0x6e, 0x65, 0x78,
	  0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x69,
	  0x6e, 0x67, 0x20, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x64,
	  0x61, 0x20, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x75, 0x6e, 0x64,
	  0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x22, 0x62, 0x65, 0x6c, 0x6f, 0x6e, 0x67,
	  0x73, 0x20, 0x74, 0x6f, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x20, 0x66, 0x72, 0x6f,
	  0x6d, 0x69, 0x6e, 0x20, 0x4f, 0x63, 0x74, 0x6f, 0x62, 0x65, 0x72, 0x70, 0x6f,
	  0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x73, 0x61, 0x69, 0x64, 0x20,
	  0x74, 0x6f, 0x20, 0x62, 0x65, 0x72, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x6f, 0x75,
	  0x73, 0x20, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	  0x72, 0x6f, 0x77, 0x73, 0x70, 0x61, 0x6e, 0x3d, 0x22, 0x6f, 0x6e, 0x6c, 0x79,
	  0x20, 0x61, 0x20, 0x66, 0x65, 0x77, 0x6d, 0x65, 0x61, 0x6e, 0x74, 0x20, 0x74,
	  0x68, 0x61, 0x74, 0x6c, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65,
	  0x2d, 0x2d, 0x3e, 0x0d, 0x0a, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x3c, 0x66, 0x69,
	  0x65, 0x6c, 0x64, 0x73, 0x65, 0x74, 0x3e, 0x41, 0x72, 0x63, 0x68, 0x62, 0x69,
	  0x73, 0x68, 0x6f, 0x70, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x6e,
	  0x6f, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x20, 0x75, 0x73, 0x65, 0x64, 0x61, 0x70,
	  0x70, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x65, 0x73, 0x70, 0x72, 0x69, 0x76, 0x69,
	  0x6c, 0x65, 0x67, 0x65, 0x73, 0x6e, 0x6f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	  0x3e, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x69, 0x6e, 0x6d,
	  0x61, 0x79, 0x20, 0x62, 0x65, 0x20, 0x74, 0x68, 0x65, 0x45, 0x61, 0x73, 0x74,
	  0x65, 0x72, 0x20, 0x65, 0x67, 0x67, 0x6d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69,
	  0x73, 0x6d, 0x73, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	  0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6c,
	  0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	  0x65, 0x64, 0x22, 0x3e, 0x6e, 0x6f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e,
	  0x0d, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x70, 0x68, 0x70, 0x61, 0x72,
	  0x72, 0x69, 0x76, 0x61, 0x6c, 0x20, 0x6f, 0x66, 0x2d, 0x6a, 0x73, 0x73, 0x64,
	  0x6b, 0x27, 0x29, 0x29, 0x3b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x20,
	  0x74, 0x6f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x63,
	  0x61, 0x73, 0x75, 0x61, 0x6c, 0x74, 0x69, 0x65, 0x73, 0x63, 0x6f, 0x6d, 0x70,
	  0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x72, 0x69, 0x73, 0x74, 0x69,
	  0x61, 0x6e, 0x73, 0x53, 0x65, 0x70, 0x74, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x20,
	  0x61, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x70, 0x72, 0x6f,
	  0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x6d, 0x69, 0x67, 0x68, 0x74, 0x20,
	  0x68, 0x61, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f,
	  0x6e, 0x69, 0x74, 0x20, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x73, 0x50, 0x68,
	  0x69, 0x6c, 0x6f, 0x73, 0x6f, 0x70, 0x68, 0x79, 0x66, 0x72, 0x69, 0x65, 0x6e,
	  0x64, 0x73, 0x68, 0x69, 0x70, 0x6c, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x20,
	  0x74, 0x6f, 0x67, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x74,
	  0x6f, 0x77, 0x61, 0x72, 0x64, 0x20, 0x74, 0x68, 0x65, 0x67, 0x75, 0x61, 0x72,
	  0x61, 0x6e, 0x74, 0x65, 0x65, 0x64, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	  0x74, 0x65, 0x64, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3a, 0x23, 0x30, 0x30, 0x30,
	  0x76, 0x69, 0x64, 0x65, 0x6f, 0x20, 0x67, 0x61, 0x6d, 0x65, 0x63, 0x6f, 0x6d,
	  0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63,
	  0x74, 0x69, 0x6e, 0x67, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x20, 0x74, 0x68,
	  0x65, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x73, 0x61,
	  0x6e, 0x73, 0x2d, 0x73, 0x65, 0x72, 0x69, 0x66, 0x6f, 0x6e, 0x6b, 0x65, 0x79,
	  0x70, 0x72, 0x65, 0x73, 0x73, 0x3b, 0x20, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e,
	  0x67, 0x3a, 0x48, 0x65, 0x20, 0x77, 0x61, 0x73, 0x20, 0x74, 0x68, 0x65, 0x75,
	  0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x74, 0x79, 0x70, 0x69,
	  0x63, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x2c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x74,
	  0x68, 0x65, 0x20, 0x73, 0x72, 0x63, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	  0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x76, 0x65, 0x73, 0x69, 0x6e,
	  0x63, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64,
	  0x20, 0x62, 0x65, 0x20, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	  0x67, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x73,
	  0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x6c, 0x6f, 0x77, 0x65, 0x72,
	  0x20, 0x74, 0x68, 0x61, 0x6e, 0x73, 0x68, 0x6f, 0x77, 0x73, 0x20, 0x74, 0x68,
	  0x61, 0x74, 0x3c, 0x2f, 0x73, 0x70, 0x61, 0x6e, 0x3e, 0x0a, 0x09, 0x09, 0x63,
	  0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x63, 0x6f, 0x6e, 0x74,
	  0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	  0x69, 0x65, 0x73, 0x61, 0x73, 0x74, 0x72, 0x6f, 0x6e, 0x6f, 0x6d, 0x65, 0x72,
	  0x68, 0x65, 0x20, 0x64, 0x69, 0x64, 0x20, 0x6e, 0x6f, 0x74, 0x64, 0x75, 0x65,
	  0x20, 0x74, 0x6f, 0x20, 0x69, 0x74, 0x73, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65,
	  0x64, 0x20, 0x74, 0x6f, 0x61, 0x6e, 0x20, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67,
	  0x65, 0x65, 0x66, 0x66, 0x6f, 0x72, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x74, 0x68,
	  0x65, 0x20, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x61, 0x74, 0x74, 0x65, 0x6d,
	  0x70, 0x74, 0x20, 0x74, 0x6f, 0x54, 0x68, 0x65, 0x72, 0x65, 0x66, 0x6f, 0x72,
	  0x65, 0x2c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52,
	  0x65, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x6e, 0x77, 0x61, 0x73, 0x20,
	  0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x6f,
	  0x6e, 0x69, 0x63, 0x6b, 0x69, 0x6c, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	  0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x70, 0x75, 0x62,
	  0x6c, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x74, 0x68, 0x65, 0x20, 0x66, 0x6f,
	  0x72, 0x6d, 0x65, 0x72, 0x69, 0x6e, 0x64, 0x69, 0x67, 0x65, 0x6e, 0x6f, 0x75,
	  0x73, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x73, 0x75,
	  0x62, 0x73, 0x69, 0x64, 0x69, 0x61, 0x72, 0x79, 0x63, 0x6f, 0x6e, 0x73, 0x70,
	  0x69, 0x72, 0x61, 0x63, 0x79, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x20,
	  0x6f, 0x66, 0x61, 0x6e, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x61,
	  0x66, 0x66, 0x6f, 0x72, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x75, 0x62, 0x73,
	  0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x20,
	  0x66, 0x6f, 0x72, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	  0x69, 0x74, 0x65, 0x6d, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x61, 0x62, 0x73,
	  0x6f, 0x6c, 0x75, 0x74, 0x65, 0x6c, 0x79, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x73,
	  0x65, 0x64, 0x6c, 0x79, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x20,
	  0x61, 0x61, 0x74, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x74, 0x72,
	  0x61, 0x76, 0x65, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x73, 0x65, 0x70, 0x61, 0x72,
	  0x61, 0x74, 0x65, 0x6c, 0x79, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x65, 0x73, 0x20,
	  0x6f, 0x6e, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x61,
	  0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x66, 0x6f, 0x75, 0x6e,
	  0x64, 0x20, 0x74, 0x68, 0x61, 0x74, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x68,
	  0x65, 0x65, 0x74, 0x6d, 0x61, 0x6e, 0x75, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	  0x73, 0x74, 0x61, 0x6e, 0x64, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x6e, 0x6f,
	  0x2d, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x28, 0x73, 0x6f, 0x6d, 0x65, 0x74,
	  0x69, 0x6d, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61,
	  0x6c, 0x69, 0x6e, 0x20, 0x41, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x61, 0x75, 0x6e,
	  0x64, 0x65, 0x72, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x71, 0x75, 0x61, 0x72, 0x74,
	  0x65, 0x72, 0x20, 0x6f, 0x66, 0x61, 0x6e, 0x20, 0x65, 0x78, 0x61, 0x6d, 0x70,
	  0x6c, 0x65, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x69,
	  0x6e, 0x64, 0x65, 0x78, 0x2e, 0x70, 0x68, 0x70, 0x3f, 0x3c, 0x2f, 0x62, 0x75,
	  0x74, 0x74, 0x6f, 0x6e, 0x3e, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	  0x61, 0x67, 0x65, 0x62, 0x65, 0x73, 0x74, 0x2d, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	  0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x22, 0x20, 0x64,
	  0x69, 0x72, 0x3d, 0x22, 0x6c, 0x74, 0x72, 0x4c, 0x69, 0x65, 0x75, 0x74, 0x65,
	  0x6e, 0x61, 0x6e, 0x74, 0x0a, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x69, 0x64, 0x3d,
	  0x22, 0x74, 0x68, 0x65, 0x79, 0x20, 0x77, 0x6f, 0x75, 0x6c, 0x64, 0x61, 0x62,
	  0x69, 0x6c, 0x69, 0x74, 0x79, 0x20, 0x6f, 0x66, 0x6d, 0x61, 0x64, 0x65, 0x20,
	  0x75, 0x70, 0x20, 0x6f, 0x66, 0x6e, 0x6f, 0x74, 0x65, 0x64, 0x20, 0x74, 0x68,
	  0x61, 0x74, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x20, 0x74, 0x68, 0x61, 0x74, 0x61,
	  0x72, 0x67, 0x75, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x74, 0x6f, 0x20, 0x61,
	  0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65,
	  0x6e, 0x27, 0x73, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x20, 0x6f, 0x66,
	  0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x62, 0x61, 0x73,
	  0x65, 0x64, 0x20, 0x75, 0x70, 0x6f, 0x6e, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65,
	  0x67, 0x69, 0x6f, 0x6e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x6f,
	  0x66, 0x70, 0x61, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x73, 0x70, 0x6f,
	  0x73, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x0a, 0x0a, 0x49, 0x6e,
	  0x20, 0x74, 0x68, 0x65, 0x20, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x20, 0x74,
	  0x68, 0x65, 0x61, 0x66, 0x74, 0x65, 0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x63,
	  0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x20, 0x61, 0x63, 0x72, 0x6f,
	  0x73, 0x73, 0x20, 0x74, 0x68, 0x65, 0x73, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x69,
	  0x66, 0x69, 0x63, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e,
	  0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x73, 0x6d, 0x69, 0x6e, 0x20,
	  0x47, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x2d,
	  0x77, 0x69, 0x6e, 0x67, 0x74, 0x68, 0x65, 0x20, 0x73, 0x79, 0x73, 0x74, 0x65,
	  0x6d, 0x53, 0x6f, 0x63, 0x69, 0x65, 0x74, 0x79, 0x20, 0x6f, 0x66, 0x70, 0x6f,
	  0x6c, 0x69, 0x74, 0x69, 0x63, 0x69, 0x61, 0x6e, 0x64, 0x69, 0x72, 0x65, 0x63,
	  0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x77, 0x65, 0x6e, 0x74, 0x20, 0x6f, 0x6e, 0x20,
	  0x74, 0x6f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x20, 0x6f, 0x66, 0x20,
	  0x4e, 0x65, 0x77, 0x20, 0x59, 0x6f, 0x72, 0x6b, 0x20, 0x61, 0x70, 0x61, 0x72,
	  0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	  0x69, 0x6f, 0x6e, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65,
	  0x75, 0x6e, 0x6c, 0x65, 0x73, 0x73, 0x20, 0x74, 0x68, 0x65, 0x68, 0x69, 0x73,
	  0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x68, 0x61, 0x64, 0x20, 0x62, 0x65,
	  0x65, 0x6e, 0x20, 0x61, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x76,
	  0x65, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74,
	  0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x65, 0x6e, 0x74, 0x65,
	  0x72, 0x20, 0x66, 0x6f, 0x72, 0x70, 0x72, 0x6f, 0x6d, 0x69, 0x6e, 0x65, 0x6e,
	  0x63, 0x65, 0x72, 0x65, 0x61, 0x64, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73,
	  0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x65, 0x73, 0x62, 0x75, 0x74, 0x20,
	  0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x61, 0x73, 0x20, 0x70, 0x61, 0x72, 0x74,
	  0x20, 0x6f, 0x66, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x65,
	  0x63, 0x6c, 0x61, 0x69, 0x6d, 0x20, 0x74, 0x68, 0x61, 0x74, 0x6c, 0x61, 0x62,
	  0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74,
	  0x69, 0x62, 0x6c, 0x65, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x20, 0x6f,
	  0x66, 0x2c, 0x20, 0x73, 0x75, 0x63, 0x68, 0x20, 0x61, 0x73, 0x20, 0x62, 0x65,
	  0x67, 0x61, 0x6e, 0x20, 0x77, 0x69, 0x74, 0x68, 0x75, 0x73, 0x69, 0x6e, 0x67,
	  0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69,
	  0x64, 0x65, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x20, 0x6f, 0x66, 0x66,
	  0x72, 0x6f, 0x6d, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x2f, 0x22, 0x20, 0x63,
	  0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x67, 0x65, 0x6f, 0x6c, 0x6f, 0x67, 0x69,
	  0x63, 0x61, 0x6c, 0x73, 0x65, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x20, 0x6f, 0x66,
	  0x64, 0x65, 0x6c, 0x69, 0x62, 0x65, 0x72, 0x61, 0x74, 0x65, 0x69, 0x6d, 0x70,
	  0x6f, 0x72, 0x74, 0x61, 0x6e, 0x74, 0x20, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x20,
	  0x74, 0x68, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x26, 0x71, 0x75, 0x6f, 0x74, 0x3b,
	  0x20, 0x76, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x3d, 0x74, 0x6f, 0x70, 0x74, 0x68,
	  0x65, 0x20, 0x47, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x6f, 0x75, 0x74, 0x73, 0x69,
	  0x64, 0x65, 0x20, 0x6f, 0x66, 0x6e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74,
	  0x65, 0x64, 0x68, 0x69, 0x73, 0x20, 0x63, 0x61, 0x72, 0x65, 0x65, 0x72, 0x73,
	  0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x3d, 0x22,
	  0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x77, 0x61, 0x73, 0x20, 0x63, 0x61, 0x6c,
	  0x6c, 0x65, 0x64, 0x74, 0x68, 0x65, 0x20, 0x66, 0x6f, 0x75, 0x72, 0x74, 0x68,
	  0x72, 0x65, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6f, 0x74, 0x68,
	  0x65, 0x72, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e,
	  0x74, 0x69, 0x6f, 0x6e, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x74, 0x68, 0x65,
	  0x20, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x63, 0x6f,
	  0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x61, 0x63, 0x63, 0x75, 0x72,
	  0x61, 0x74, 0x65, 0x6c, 0x79, 0x77, 0x65, 0x72, 0x65, 0x20, 0x62, 0x75, 0x69,
	  0x6c, 0x74, 0x77, 0x61, 0x73, 0x20, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x61,
	  0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x6d, 0x75, 0x63, 0x68,
	  0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x44, 0x75, 0x65, 0x20, 0x74, 0x6f, 0x20,
	  0x74, 0x68, 0x65, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3a, 0x20, 0x31, 0x30, 0x30,
	  0x73, 0x6f, 0x6d, 0x65, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x4b, 0x69, 0x6e,
	  0x67, 0x64, 0x6f, 0x6d, 0x20, 0x6f, 0x66, 0x74, 0x68, 0x65, 0x20, 0x65, 0x6e,
	  0x74, 0x69, 0x72, 0x65, 0x66, 0x61, 0x6d, 0x6f, 0x75, 0x73, 0x20, 0x66, 0x6f,
	  0x72, 0x74, 0x6f, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x62,
	  0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x74, 0x68, 0x65, 0x20, 0x46,
	  0x72, 0x65, 0x6e, 0x63, 0x68, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x20, 0x61,
	  0x6e, 0x64, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x22, 0x3e, 0x69,
	  0x73, 0x20, 0x73, 0x61, 0x69, 0x64, 0x20, 0x74, 0x6f, 0x73, 0x74, 0x72, 0x75,
	  0x63, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	  0x64, 0x75, 0x6d, 0x6d, 0x6f, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x74, 0x65, 0x6e,
	  0x61, 0x20, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x3e, 0x0a,
	  0x3c, 0x64, 0x69, 0x76, 0x20, 0x69, 0x64, 0x20, 0x4f, 0x66, 0x66, 0x69, 0x63,
	  0x69, 0x61, 0x6c, 0x20, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x77, 0x69, 0x64, 0x65,
	  0x2e, 0x61, 0x72, 0x69, 0x61, 0x2d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x74, 0x68,
	  0x65, 0x20, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x61, 0x6e, 0x64, 0x20, 0x69,
	  0x74, 0x20, 0x77, 0x61, 0x73, 0x64, 0x22, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65,
	  0x3d, 0x22, 0x6c, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x74, 0x62,
	  0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x61, 0x72, 0x65, 0x20,
	  0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	  0x69, 0x6e, 0x67, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x6c, 0x79,
	  0x74, 0x68, 0x65, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x72, 0x6e, 0x77, 0x6f, 0x72,
	  0x6b, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x6e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	  0x64, 0x20, 0x74, 0x6f, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20, 0x74, 0x68, 0x65,
	  0x20, 0x69, 0x6e, 0x6e, 0x6f, 0x76, 0x61, 0x74, 0x69, 0x76, 0x65, 0x3c, 0x2f,
	  0x61, 0x3e, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x73, 0x6f, 0x75, 0x6e, 0x64,
	  0x74, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x6f,
	  0x72, 0x6d, 0x74, 0x65, 0x6e, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x69,
	  0x6e, 0x70, 0x75, 0x74, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x6f, 0x70, 0x65, 0x6e,
	  0x69, 0x6e, 0x67, 0x20, 0x6f, 0x66, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,
	  0x74, 0x65, 0x64, 0x61, 0x64, 0x6f, 0x70, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79,
	  0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x74, 0x68, 0x65,
	  0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x61, 0x6e, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	  0x73, 0x20, 0x6f, 0x66, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x20, 0x6f,
	  0x66, 0x43, 0x68, 0x72, 0x69, 0x73, 0x74, 0x69, 0x61, 0x6e, 0x20, 0x76, 0x65,
	  0x72, 0x79, 0x20, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	  0x6f, 0x74, 0x69, 0x76, 0x65, 0x62, 0x79, 0x20, 0x66, 0x61, 0x72, 0x20, 0x74,
	  0x68, 0x65, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x70,
	  0x75, 0x72, 0x73, 0x75, 0x69, 0x74, 0x20, 0x6f, 0x66, 0x66, 0x6f, 0x6c, 0x6c,
	  0x6f, 0x77, 0x20, 0x74, 0x68, 0x65, 0x62, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x74,
	  0x20, 0x74, 0x6f, 0x69, 0x6e, 0x20, 0x45, 0x6e, 0x67, 0x6c, 0x61, 0x6e, 0x64,
	  0x61, 0x67, 0x72, 0x65, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x61, 0x63, 0x63,
	  0x75, 0x73, 0x65, 0x64, 0x20, 0x6f, 0x66, 0x63, 0x6f, 0x6d, 0x65, 0x73, 0x20,
	  0x66, 0x72, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6e,
	  0x67, 0x64, 0x69, 0x76, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x68, 0x69,
	  0x73, 0x20, 0x6f, 0x72, 0x20, 0x68, 0x65, 0x72, 0x74, 0x72, 0x65, 0x6d, 0x65,
	  0x6e, 0x64, 0x6f, 0x75, 0x73, 0x66, 0x72, 0x65, 0x65, 0x64, 0x6f, 0x6d, 0x20,
	  0x6f, 0x66, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x30,
	  0x20, 0x31, 0x65, 0x6d, 0x20, 0x31, 0x65, 0x6d, 0x3b, 0x42, 0x61, 0x73, 0x6b,
	  0x65, 0x74, 0x62, 0x61, 0x6c, 0x6c, 0x2f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x2e,
	  0x63, 0x73, 0x73, 0x61, 0x6e, 0x20, 0x65, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x72,
	  0x65, 0x76, 0x65, 0x6e, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x2f, 0x22, 0x20,
	  0x74, 0x69, 0x74, 0x6c, 0x65, 0x3d, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69,
	  0x6e, 0x64, 0x65, 0x78, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68,
	  0x65, 0x70, 0x69, 0x74, 0x74, 0x73, 0x62, 0x75, 0x72, 0x67, 0x68, 0x63, 0x6f,
	  0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x3e, 0x0d, 0x3c, 0x73, 0x63, 0x72, 0x69,
	  0x70, 0x74, 0x3e, 0x28, 0x66, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x6f,
	  0x75, 0x74, 0x68, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x3c,
	  0x2f, 0x73, 0x70, 0x61, 0x6e, 0x3e, 0x0d, 0x0a, 0x20, 0x6f, 0x63, 0x63, 0x61,
	  0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x62, 0x65, 0x63, 0x61, 0x75, 0x73, 0x65,
	  0x20, 0x69, 0x74, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f,
	  0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x3e, 0x3c, 0x2f,
	  0x64, 0x69, 0x76, 0x3e, 0x0a, 0x20, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	  0x64, 0x20, 0x62, 0x79, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79,
	  0x2c, 0x20, 0x62, 0x67, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3d, 0x22, 0x74, 0x61,
	  0x62, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x3d, 0x22, 0x64, 0x69, 0x73, 0x61, 0x73,
	  0x74, 0x72, 0x6f, 0x75, 0x73, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	  0x73, 0x20, 0x61, 0x6c, 0x73, 0x6f, 0x20, 0x68, 0x61, 0x73, 0x20, 0x61, 0x3e,
	  0x3c, 0x64, 0x69, 0x76, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x3c, 0x2f, 0x73, 0x74,
	  0x79, 0x6c, 0x65, 0x3e, 0x0a, 0x3c, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x20,
	  0x66, 0x6f, 0x72, 0x73, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x20, 0x61, 0x6e, 0x64,
	  0x2e, 0x73, 0x72, 0x63, 0x20, 0x3d, 0x20, 0x22, 0x2f, 0x2f, 0x76, 0x69, 0x6f,
	  0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x74, 0x68, 0x69, 0x73, 0x20, 0x70,
	  0x6f, 0x69, 0x6e, 0x74, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x6c,
	  0x79, 0x69, 0x73, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x72, 0x65,
	  0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x64, 0x20, 0x66, 0x72, 0x6f,
	  0x6d, 0x20, 0x74, 0x68, 0x65, 0x6e, 0x65, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x6e,
	  0x64, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x75, 0x67, 0x75, 0xc3, 0xaa, 0x73, 0xd7,
	  0xa2, 0xd7, 0x91, 0xd7, 0xa8, 0xd7, 0x99, 0xd7, 0xaa, 0xd9, 0x81, 0xd8, 0xa7,
	  0xd8, 0xb1, 0xd8, 0xb3, 0xdb, 0x8c, 0x64, 0x65, 0x73, 0x61, 0x72, 0x72, 0x6f,
	  0x6c, 0x6c, 0x6f, 0x63, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x69, 0x6f,
	  0x65, 0x64, 0x75, 0x63, 0x61, 0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x73, 0x65, 0x70,
	  0x74, 0x69, 0x65, 0x6d, 0x62, 0x72, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	  0x72, 0x61, 0x64, 0x6f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x63, 0x69, 0xc3, 0xb3,
	  0x6e, 0x75, 0x62, 0x69, 0x63, 0x61, 0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x70, 0x75,
	  0x62, 0x6c, 0x69, 0x63, 0x69, 0x64, 0x61, 0x64, 0x72, 0x65, 0x73, 0x70, 0x75,
	  0x65, 0x73, 0x74, 0x61, 0x73, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x61, 0x64,
	  0x6f, 0x73, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x74, 0x65, 0x72,
	  0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x64, 0x6f, 0x73, 0x61, 0x72, 0x74, 0xc3,
	  0xad, 0x63, 0x75, 0x6c, 0x6f, 0x73, 0x64, 0x69, 0x66, 0x65, 0x72, 0x65, 0x6e,
	  0x74, 0x65, 0x73, 0x73, 0x69, 0x67, 0x75, 0x69, 0x65, 0x6e, 0x74, 0x65, 0x73,
	  0x72, 0x65, 0x70, 0xc3, 0xba, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x69, 0x74,
	  0x75, 0x61, 0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74,
	  0x65, 0x72, 0x69, 0x6f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x69, 0x64, 0x61,
	  0x64, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6f, 0x66, 0x6f,
	  0x72, 0x6d, 0x61, 0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x70, 0x6f, 0x62, 0x6c, 0x61,
	  0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x70, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e,
	  0x74, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x69, 0x64, 0x6f, 0x73, 0x61,
	  0x63, 0x63, 0x65, 0x73, 0x6f, 0x72, 0x69, 0x6f, 0x73, 0x74, 0x65, 0x63, 0x68,
	  0x6e, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61,
	  0x6c, 0x65, 0x73, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0xc3, 0xad, 0x61,
	  0x65, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x65, 0x73, 0x64, 0x69, 0x73,
	  0x70, 0x6f, 0x6e, 0x69, 0x62, 0x6c, 0x65, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c,
	  0x69, 0x64, 0x61, 0x64, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x69,
	  0x61, 0x76, 0x61, 0x6c, 0x6c, 0x61, 0x64, 0x6f, 0x6c, 0x69, 0x64, 0x62, 0x69,
	  0x62, 0x6c, 0x69, 0x6f, 0x74, 0x65, 0x63, 0x61, 0x72, 0x65, 0x6c, 0x61, 0x63,
	  0x69, 0x6f, 0x6e, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72,
	  0x69, 0x6f, 0x70, 0x6f, 0x6c, 0xc3, 0xad, 0x74, 0x69, 0x63, 0x61, 0x73, 0x61,
	  0x6e, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x72, 0x65, 0x73, 0x64, 0x6f, 0x63, 0x75,
	  0x6d, 0x65, 0x6e, 0x74, 0x6f, 0x73, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c,
	  0x65, 0x7a, 0x61, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x65, 0x73,
	  0x64, 0x69, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x61, 0x65, 0x63, 0x6f,
	  0x6e, 0xc3, 0xb3, 0x6d, 0x69, 0x63, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70,
	  0x6f, 0x72, 0x74, 0x65, 0x72, 0x6f, 0x64, 0x72, 0xc3, 0xad, 0x67, 0x75, 0x65,
	  0x7a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x72, 0x65, 0x6e,
	  0x63, 0x75, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x64, 0x69, 0x73, 0x63, 0x75,
	  0x73, 0x69, 0xc3, 0xb3, 0x6e, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	  0x72, 0x61, 0x66, 0x75, 0x6e, 0x64, 0x61, 0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x66,
	  0x72, 0x65, 0x63, 0x75, 0x65, 0x6e, 0x74, 0x65, 0x73, 0x70, 0x65, 0x72, 0x6d,
	  0x61, 0x6e, 0x65, 0x6e, 0x74, 0x65, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x6d, 0x65,
	  0x6e, 0x74, 0x65, 0xd0, 0xbc, 0xd0, 0xbe, 0xd0, 0xb6, 0xd0, 0xbd, 0xd0, 0xbe,
	  0xd0, 0xb1, 0xd1, 0x83, 0xd0, 0xb4, 0xd0, 0xb5, 0xd1, 0x82, 0xd0, 0xbc, 0xd0,
	  0xbe, 0xd0, 0xb6, 0xd0, 0xb5, 0xd1, 0x82, 0xd0, 0xb2, 0xd1, 0x80, 0xd0, 0xb5,
	  0xd0, 0xbc, 0xd1, 0x8f, 0xd1, 0x82, 0xd0, 0xb0, 0xd0, 0xba, 0xd0, 0xb6, 0xd0,
	  0xb5, 0xd1, 0x87, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xb1, 0xd1, 0x8b, 0xd0, 0xb1,
	  0xd0, 0xbe, 0xd0, 0xbb, 0xd0, 0xb5, 0xd0, 0xb5, 0xd0, 0xbe, 0xd1, 0x87, 0xd0,
	  0xb5, 0xd0, 0xbd, 0xd1, 0x8c, 0xd1, 0x8d, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xb3,
	  0xd0, 0xbe, 0xd0, 0xba, 0xd0, 0xbe, 0xd0, 0xb3, 0xd0, 0xb4, 0xd0, 0xb0, 0xd0,
	  0xbf, 0xd0, 0xbe, 0xd1, 0x81, 0xd0, 0xbb, 0xd0, 0xb5, 0xd0, 0xb2, 0xd1, 0x81,
	  0xd0, 0xb5, 0xd0, 0xb3, 0xd0, 0xbe, 0xd1, 0x81, 0xd0, 0xb0, 0xd0, 0xb9, 0xd1,
	  0x82, 0xd0, 0xb5, 0xd1, 0x87, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb5, 0xd0, 0xb7,
	  0xd0, 0xbc, 0xd0, 0xbe, 0xd0, 0xb3, 0xd1, 0x83, 0xd1, 0x82, 0xd1, 0x81, 0xd0,
	  0xb0, 0xd0, 0xb9, 0xd1, 0x82, 0xd0, 0xb0, 0xd0, 0xb6, 0xd0, 0xb8, 0xd0, 0xb7,
	  0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xbc, 0xd0, 0xb5, 0xd0, 0xb6, 0xd0, 0xb4, 0xd1,
	  0x83, 0xd0, 0xb1, 0xd1, 0x83, 0xd0, 0xb4, 0xd1, 0x83, 0xd1, 0x82, 0xd0, 0x9f,
	  0xd0, 0xbe, 0xd0, 0xb8, 0xd1, 0x81, 0xd0, 0xba, 0xd0, 0xb7, 0xd0, 0xb4, 0xd0,
	  0xb5, 0xd1, 0x81, 0xd1, 0x8c, 0xd0, 0xb2, 0xd0, 0xb8, 0xd0, 0xb4, 0xd0, 0xb5,
	  0xd0, 0xbe, 0xd1, 0x81, 0xd0, 0xb2, 0xd1, 0x8f, 0xd0, 0xb7, 0xd0, 0xb8, 0xd0,
	  0xbd, 0xd1, 0x83, 0xd0, 0xb6, 0xd0, 0xbd, 0xd0, 0xbe, 0xd1, 0x81, 0xd0, 0xb2,
	  0xd0, 0xbe, 0xd0, 0xb5, 0xd0, 0xb9, 0xd0, 0xbb, 0xd1, 0x8e, 0xd0, 0xb4, 0xd0,
	  0xb5, 0xd0, 0xb9, 0xd0, 0xbf, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xbd, 0xd0, 0xbe,
	  0xd0, 0xbc, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xb3, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0,
	  0xb5, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xb9, 0xd1, 0x81, 0xd0, 0xb2, 0xd0, 0xbe,
	  0xd0, 0xb8, 0xd1, 0x85, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xb2, 0xd0,
	  0xb0, 0xd1, 0x82, 0xd0, 0xb0, 0xd0, 0xba, 0xd0, 0xbe, 0xd0, 0xb9, 0xd0, 0xbc,
	  0xd0, 0xb5, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xb8, 0xd0, 0xbc, 0xd0,
	  0xb5, 0xd0, 0xb5, 0xd1, 0x82, 0xd0, 0xb6, 0xd0, 0xb8, 0xd0, 0xb7, 0xd0, 0xbd,
	  0xd1, 0x8c, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xb9, 0xd0,
	  0xbb, 0xd1, 0x83, 0xd1, 0x87, 0xd1, 0x88, 0xd0, 0xb5, 0xd0, 0xbf, 0xd0, 0xb5,
	  0xd1, 0x80, 0xd0, 0xb5, 0xd0, 0xb4, 0xd1, 0x87, 0xd0, 0xb0, 0xd1, 0x81, 0xd1,
	  0x82, 0xd0, 0xb8, 0xd1, 0x87, 0xd0, 0xb0, 0xd1, 0x81, 0xd1, 0x82, 0xd1, 0x8c,
	  0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xb1, 0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xbd, 0xd0,
	  0xbe, 0xd0, 0xb2, 0xd1, 0x8b, 0xd1, 0x85, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xb0,
	  0xd0, 0xb2, 0xd0, 0xbe, 0xd1, 0x81, 0xd0, 0xbe, 0xd0, 0xb1, 0xd0, 0xbe, 0xd0,
	  0xb9, 0xd0, 0xbf, 0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xbc, 0xd0, 0xbc,
	  0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb5, 0xd0, 0xb5, 0xd1, 0x87, 0xd0, 0xb8, 0xd1,
	  0x81, 0xd0, 0xbb, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xb2, 0xd1, 0x8b,
	  0xd0, 0xb5, 0xd1, 0x83, 0xd1, 0x81, 0xd0, 0xbb, 0xd1, 0x83, 0xd0, 0xb3, 0xd0,
	  0xbe, 0xd0, 0xba, 0xd0, 0xbe, 0xd0, 0xbb, 0xd0, 0xbe, 0xd0, 0xbd, 0xd0, 0xb0,
	  0xd0, 0xb7, 0xd0, 0xb0, 0xd0, 0xb4, 0xd1, 0x82, 0xd0, 0xb0, 0xd0, 0xba, 0xd0,
	  0xbe, 0xd0, 0xb5, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xb3, 0xd0, 0xb4, 0xd0, 0xb0,
	  0xd0, 0xbf, 0xd0, 0xbe, 0xd1, 0x87, 0xd1, 0x82, 0xd0, 0xb8, 0xd0, 0x9f, 0xd0,
	  0xbe, 0xd1, 0x81, 0xd0, 0xbb, 0xd0, 0xb5, 0xd1, 0x82, 0xd0, 0xb0, 0xd0, 0xba,
	  0xd0, 0xb8, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xb2, 0xd1, 0x8b, 0xd0,
	  0xb9, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xb8, 0xd1, 0x82, 0xd1, 0x82,
	  0xd0, 0xb0, 0xd0, 0xba, 0xd0, 0xb8, 0xd1, 0x85, 0xd1, 0x81, 0xd1, 0x80, 0xd0,
	  0xb0, 0xd0, 0xb7, 0xd1, 0x83, 0xd0, 0xa1, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xba,
	  0xd1, 0x82, 0xd1, 0x84, 0xd0, 0xbe, 0xd1, 0x80, 0xd1, 0x83, 0xd0, 0xbc, 0xd0,
	  0x9a, 0xd0, 0xbe, 0xd0, 0xb3, 0xd0, 0xb4, 0xd0, 0xb0, 0xd0, 0xba, 0xd0, 0xbd,
	  0xd0, 0xb8, 0xd0, 0xb3, 0xd0, 0xb8, 0xd1, 0x81, 0xd0, 0xbb, 0xd0, 0xbe, 0xd0,
	  0xb2, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb0, 0xd1, 0x88, 0xd0, 0xb5, 0xd0, 0xb9,
	  0xd0, 0xbd, 0xd0, 0xb0, 0xd0, 0xb9, 0xd1, 0x82, 0xd0, 0xb8, 0xd1, 0x81, 0xd0,
	  0xb2, 0xd0, 0xbe, 0xd0, 0xb8, 0xd0, 0xbc, 0xd1, 0x81, 0xd0, 0xb2, 0xd1, 0x8f,
	  0xd0, 0xb7, 0xd1, 0x8c, 0xd0, 0xbb, 0xd1, 0x8e, 0xd0, 0xb1, 0xd0, 0xbe, 0xd0,
	  0xb9, 0xd1, 0x87, 0xd0, 0xb0, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x81,
	  0xd1, 0x80, 0xd0, 0xb5, 0xd0, 0xb4, 0xd0, 0xb8, 0xd0, 0x9a, 0xd1, 0x80, 0xd0,
	  0xbe, 0xd0, 0xbc, 0xd0, 0xb5, 0xd0, 0xa4, 0xd0, 0xbe, 0xd1, 0x80, 0xd1, 0x83,
	  0xd0, 0xbc, 0xd1, 0x80, 0xd1, 0x8b, 0xd0, 0xbd, 0xd0, 0xba, 0xd0, 0xb5, 0xd1,
	  0x81, 0xd1, 0x82, 0xd0, 0xb0, 0xd0, 0xbb, 0xd0, 0xb8, 0xd0, 0xbf, 0xd0, 0xbe,
	  0xd0, 0xb8, 0xd1, 0x81, 0xd0, 0xba, 0xd1, 0x82, 0xd1, 0x8b, 0xd1, 0x81, 0xd1,
	  0x8f, 0xd1, 0x87, 0xd0, 0xbc, 0xd0, 0xb5, 0xd1, 0x81, 0xd1, 0x8f, 0xd1, 0x86,
	  0xd1, 0x86, 0xd0, 0xb5, 0xd0, 0xbd, 0xd1, 0x82, 0xd1, 0x80, 0xd1, 0x82, 0xd1,
	  0x80, 0xd1, 0x83, 0xd0, 0xb4, 0xd0, 0xb0, 0xd1, 0x81, 0xd0, 0xb0, 0xd0, 0xbc,
	  0xd1, 0x8b, 0xd1, 0x85, 0xd1, 0x80, 0xd1, 0x8b, 0xd0, 0xbd, 0xd0, 0xba, 0xd0,
	  0xb0, 0xd0, 0x9d, 0xd0, 0xbe, 0xd0, 0xb2, 0xd1, 0x8b, 0xd0, 0xb9, 0xd1, 0x87,
	  0xd0, 0xb0, 0xd1, 0x81, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xbc, 0xd0, 0xb5, 0xd1,
	  0x81, 0xd1, 0x82, 0xd0, 0xb0, 0xd1, 0x84, 0xd0, 0xb8, 0xd0, 0xbb, 0xd1, 0x8c,
	  0xd0, 0xbc, 0xd0, 0xbc, 0xd0, 0xb0, 0xd1, 0x80, 0xd1, 0x82, 0xd0, 0xb0, 0xd1,
	  0x81, 0xd1, 0x82, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xbc, 0xd0, 0xb5,
	  0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb5, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xba, 0xd1,
	  0x81, 0xd1, 0x82, 0xd0, 0xbd, 0xd0, 0xb0, 0xd1, 0x88, 0xd0, 0xb8, 0xd1, 0x85,
	  0xd0, 0xbc, 0xd0, 0xb8, 0xd0, 0xbd, 0xd1, 0x83, 0xd1, 0x82, 0xd0, 0xb8, 0xd0,
	  0xbc, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xb8, 0xd0, 0xbc, 0xd0, 0xb5,
	  0xd1, 0x8e, 0xd1, 0x82, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xbc, 0xd0, 0xb5, 0xd1,
	  0x80, 0xd0, 0xb3, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb4, 0xd1, 0x81,
	  0xd0, 0xb0, 0xd0, 0xbc, 0xd0, 0xbe, 0xd0, 0xbc, 0xd1, 0x8d, 0xd1, 0x82, 0xd0,
	  0xbe, 0xd0, 0xbc, 0xd1, 0x83, 0xd0, 0xba, 0xd0, 0xbe, 0xd0, 0xbd, 0xd1, 0x86,
	  0xd0, 0xb5, 0xd1, 0x81, 0xd0, 0xb2, 0xd0, 0xbe, 0xd0, 0xb5, 0xd0, 0xbc, 0xd0,
	  0xba, 0xd0, 0xb0, 0xd0, 0xba, 0xd0, 0xbe, 0xd0, 0xb9, 0xd0, 0x90, 0xd1, 0x80,
	  0xd1, 0x85, 0xd0, 0xb8, 0xd0, 0xb2, 0xd9, 0x85, 0xd9, 0x86, 0xd8, 0xaa, 0xd8,
	  0xaf, 0xd9, 0x89, 0xd8, 0xa5, 0xd8, 0xb1, 0xd8, 0xb3, 0xd8, 0xa7, 0xd9, 0x84,
	  0xd8, 0xb1, 0xd8, 0xb3, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa9, 0xd8, 0xa7, 0xd9,
	  0x84, 0xd8, 0xb9, 0xd8, 0xa7, 0xd9, 0x85, 0xd9, 0x83, 0xd8, 0xaa, 0xd8, 0xa8,
	  0xd9, 0x87, 0xd8, 0xa7, 0xd8, 0xa8, 0xd8, 0xb1, 0xd8, 0xa7, 0xd9, 0x85, 0xd8,
	  0xac, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x8a, 0xd9, 0x88, 0xd9, 0x85, 0xd8, 0xa7,
	  0xd9, 0x84, 0xd8, 0xb5, 0xd9, 0x88, 0xd8, 0xb1, 0xd8, 0xac, 0xd8, 0xaf, 0xd9,
	  0x8a, 0xd8, 0xaf, 0xd8, 0xa9, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb9, 0xd8, 0xb6,
	  0xd9, 0x88, 0xd8, 0xa5, 0xd8, 0xb6, 0xd8, 0xa7, 0xd9, 0x81, 0xd8, 0xa9, 0xd8,
	  0xa7, 0xd9, 0x84, 0xd9, 0x82, 0xd8, 0xb3, 0xd9, 0x85, 0xd8, 0xa7, 0xd9, 0x84,
	  0xd8, 0xb9, 0xd8, 0xa7, 0xd8, 0xa8, 0xd8, 0xaa, 0xd8, 0xad, 0xd9, 0x85, 0xd9,
	  0x8a, 0xd9, 0x84, 0xd9, 0x85, 0xd9, 0x84, 0xd9, 0x81, 0xd8, 0xa7, 0xd8, 0xaa,
	  0xd9, 0x85, 0xd9, 0x84, 0xd8, 0xaa, 0xd9, 0x82, 0xd9, 0x89, 0xd8, 0xaa, 0xd8,
	  0xb9, 0xd8, 0xaf, 0xd9, 0x8a, 0xd9, 0x84, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb4,
	  0xd8, 0xb9, 0xd8, 0xb1, 0xd8, 0xa3, 0xd8, 0xae, 0xd8, 0xa8, 0xd8, 0xa7, 0xd8,
	  0xb1, 0xd8, 0xaa, 0xd8, 0xb7, 0xd9, 0x88, 0xd9, 0x8a, 0xd8, 0xb1, 0xd8, 0xb9,
	  0xd9, 0x84, 0xd9, 0x8a, 0xd9, 0x83, 0xd9, 0x85, 0xd8, 0xa5, 0xd8, 0xb1, 0xd9,
	  0x81, 0xd8, 0xa7, 0xd9, 0x82, 0xd8, 0xb7, 0xd9, 0x84, 0xd8, 0xa8, 0xd8, 0xa7,
	  0xd8, 0xaa, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x84, 0xd8, 0xba, 0xd8, 0xa9, 0xd8,
	  0xaa, 0xd8, 0xb1, 0xd8, 0xaa, 0xd9, 0x8a, 0xd8, 0xa8, 0xd8, 0xa7, 0xd9, 0x84,
	  0xd9, 0x86, 0xd8, 0xa7, 0xd8, 0xb3, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb4, 0xd9,
	  0x8a, 0xd8, 0xae, 0xd9, 0x85, 0xd9, 0x86, 0xd8, 0xaa, 0xd8, 0xaf, 0xd9, 0x8a,
	  0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb9, 0xd8, 0xb1, 0xd8, 0xa8, 0xd8, 0xa7, 0xd9,
	  0x84, 0xd9, 0x82, 0xd8, 0xb5, 0xd8, 0xb5, 0xd8, 0xa7, 0xd9, 0x81, 0xd9, 0x84,
	  0xd8, 0xa7, 0xd9, 0x85, 0xd8, 0xb9, 0xd9, 0x84, 0xd9, 0x8a, 0xd9, 0x87, 0xd8,
	  0xa7, 0xd8, 0xaa, 0xd8, 0xad, 0xd8, 0xaf, 0xd9, 0x8a, 0xd8, 0xab, 0xd8, 0xa7,
	  0xd9, 0x84, 0xd9, 0x84, 0xd9, 0x87, 0xd9, 0x85, 0xd8, 0xa7, 0xd9, 0x84, 0xd8,
	  0xb9, 0xd9, 0x85, 0xd9, 0x84, 0xd9, 0x85, 0xd9, 0x83, 0xd8, 0xaa, 0xd8, 0xa8,
	  0xd8, 0xa9, 0xd9, 0x8a, 0xd9, 0x85, 0xd9, 0x83, 0xd9, 0x86, 0xd9, 0x83, 0xd8,
	  0xa7, 0xd9, 0x84, 0xd8, 0xb7, 0xd9, 0x81, 0xd9, 0x84, 0xd9, 0x81, 0xd9, 0x8a,
	  0xd8, 0xaf, 0xd9, 0x8a, 0xd9, 0x88, 0xd8, 0xa5, 0xd8, 0xaf, 0xd8, 0xa7, 0xd8,
	  0xb1, 0xd8, 0xa9, 0xd8, 0xaa, 0xd8, 0xa7, 0xd8, 0xb1, 0xd9, 0x8a, 0xd8, 0xae,
	  0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb5, 0xd8, 0xad, 0xd8, 0xa9, 0xd8, 0xaa, 0xd8,
	  0xb3, 0xd8, 0xac, 0xd9, 0x8a, 0xd9, 0x84, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x88,
	  0xd9, 0x82, 0xd8, 0xaa, 0xd8, 0xb9, 0xd9, 0x86, 0xd8, 0xaf, 0xd9, 0x85, 0xd8,
	  0xa7, 0xd9, 0x85, 0xd8, 0xaf, 0xd9, 0x8a, 0xd9, 0x86, 0xd8, 0xa9, 0xd8, 0xaa,
	  0xd8, 0xb5, 0xd9, 0x85, 0xd9, 0x8a, 0xd9, 0x85, 0xd8, 0xa3, 0xd8, 0xb1, 0xd8,
	  0xb4, 0xd9, 0x8a, 0xd9, 0x81, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb0, 0xd9, 0x8a,
	  0xd9, 0x86, 0xd8, 0xb9, 0xd8, 0xb1, 0xd8, 0xa8, 0xd9, 0x8a, 0xd8, 0xa9, 0xd8,
	  0xa8, 0xd9, 0x88, 0xd8, 0xa7, 0xd8, 0xa8, 0xd8, 0xa9, 0xd8, 0xa3, 0xd9, 0x84,
	  0xd8, 0xb9, 0xd8, 0xa7, 0xd8, 0xa8, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb3, 0xd9,
	  0x81, 0xd8, 0xb1, 0xd9, 0x85, 0xd8, 0xb4, 0xd8, 0xa7, 0xd9, 0x83, 0xd9, 0x84,
	  0xd8, 0xaa, 0xd8, 0xb9, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x89, 0xd8, 0xa7, 0xd9,
	  0x84, 0xd8, 0xa3, 0xd9, 0x88, 0xd9, 0x84, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb3,
	  0xd9, 0x86, 0xd8, 0xa9, 0xd8, 0xac, 0xd8, 0xa7, 0xd9, 0x85, 0xd8, 0xb9, 0xd8,
	  0xa9, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb5, 0xd8, 0xad, 0xd9, 0x81, 0xd8, 0xa7,
	  0xd9, 0x84, 0xd8, 0xaf, 0xd9, 0x8a, 0xd9, 0x86, 0xd9, 0x83, 0xd9, 0x84, 0xd9,
	  0x85, 0xd8, 0xa7, 0xd8, 0xaa, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xae, 0xd8, 0xa7,
	  0xd8, 0xb5, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x85, 0xd9, 0x84, 0xd9, 0x81, 0xd8,
	  0xa3, 0xd8, 0xb9, 0xd8, 0xb6, 0xd8, 0xa7, 0xd8, 0xa1, 0xd9, 0x83, 0xd8, 0xaa,
	  0xd8, 0xa7, 0xd8, 0xa8, 0xd8, 0xa9, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xae, 0xd9,
	  0x8a, 0xd8, 0xb1, 0xd8, 0xb1, 0xd8, 0xb3, 0xd8, 0xa7, 0xd8, 0xa6, 0xd9, 0x84,
	  0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x82, 0xd9, 0x84, 0xd8, 0xa8, 0xd8, 0xa7, 0xd9,
	  0x84, 0xd8, 0xa3, 0xd8, 0xaf, 0xd8, 0xa8, 0xd9, 0x85, 0xd9, 0x82, 0xd8, 0xa7,
	  0xd8, 0xb7, 0xd8, 0xb9, 0xd9, 0x85, 0xd8, 0xb1, 0xd8, 0xa7, 0xd8, 0xb3, 0xd9,
	  0x84, 0xd9, 0x85, 0xd9, 0x86, 0xd8, 0xb7, 0xd9, 0x82, 0xd8, 0xa9, 0xd8, 0xa7,
	  0xd9, 0x84, 0xd9, 0x83, 0xd8, 0xaa, 0xd8, 0xa8, 0xd8, 0xa7, 0xd9, 0x84, 0xd8,
	  0xb1, 0xd8, 0xac, 0xd9, 0x84, 0xd8, 0xa7, 0xd8, 0xb4, 0xd8, 0xaa, 0xd8, 0xb1,
	  0xd9, 0x83, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x82, 0xd8, 0xaf, 0xd9, 0x85, 0xd9,
	  0x8a, 0xd8, 0xb9, 0xd8, 0xb7, 0xd9, 0x8a, 0xd9, 0x83, 0x73, 0x42, 0x79, 0x54,
	  0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x28, 0x2e, 0x6a, 0x70, 0x67, 0x22, 0x20,
	  0x61, 0x6c, 0x74, 0x3d, 0x22, 0x31, 0x70, 0x78, 0x20, 0x73, 0x6f, 0x6c, 0x69,
	  0x64, 0x20, 0x23, 0x2e, 0x67, 0x69, 0x66, 0x22, 0x20, 0x61, 0x6c, 0x74, 0x3d,
	  0x22, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x69,
	  0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x70, 0x70,
	  0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x20, 0x6f, 0x6e, 0x63,
	  0x6c, 0x69, 0x63, 0x6b, 0x3d, 0x22, 0x65, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69,
	  0x73, 0x68, 0x65, 0x64, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x69,
	  0x6e, 0x67, 0x2e, 0x70, 0x6e, 0x67, 0x22, 0x20, 0x61, 0x6c, 0x74, 0x3d, 0x22,
	  0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x70, 0x65,
	  0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x61, 0x70, 0x70, 0x72,
	  0x6f, 0x70, 0x72, 0x69, 0x61, 0x74, 0x65, 0x26, 0x61, 0x6d, 0x70, 0x3b, 0x6d,
	  0x64, 0x61, 0x73, 0x68, 0x3b, 0x69, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74,
	  0x65, 0x6c, 0x79, 0x3c, 0x2f, 0x73, 0x74, 0x72, 0x6f, 0x6e, 0x67, 0x3e, 0x3c,
	  0x2f, 0x72, 0x61, 0x74, 0x68, 0x65, 0x72, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x74,
	  0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x65, 0x76,
	  0x65, 0x6c, 0x6f, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x6d, 0x70, 0x65,
	  0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f,
	  0x6c, 0x64, 0x65, 0x72, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	  0x79, 0x3a, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x22, 0x3e,
	  0x30, 0x22, 0x20, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3d, 0x22, 0x65, 0x76,
	  0x65, 0x6e, 0x20, 0x74, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x72, 0x65, 0x70, 0x6c,
	  0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	  0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74,
	  0x69, 0x6f, 0x6e, 0x3c, 0x75, 0x6c, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d,
	  0x22, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x69,
	  0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x73, 0x70, 0x65, 0x72,
	  0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x65, 0x74, 0x54, 0x69,
	  0x6d, 0x65, 0x6f, 0x75, 0x74, 0x28, 0x75, 0x72, 0x6c, 0x28, 0x68, 0x74, 0x74,
	  0x70, 0x3a, 0x2f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x65, 0x6d, 0x61, 0x74, 0x69,
	  0x63, 0x73, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x2d, 0x74, 0x6f, 0x70, 0x3a,
	  0x65, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x64, 0x65,
	  0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x6e, 0x6f,
	  0x2d, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	  0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4a, 0x50, 0x47, 0x7c, 0x74, 0x68, 0x75,
	  0x6d, 0x62, 0x7c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74,
	  0x65, 0x2f, 0x68, 0x65, 0x61, 0x64, 0x3e, 0x3c, 0x62, 0x6f, 0x64, 0x79, 0x66,
	  0x6c, 0x6f, 0x61, 0x74, 0x3a, 0x6c, 0x65, 0x66, 0x74, 0x3b, 0x3c, 0x6c, 0x69,
	  0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x68, 0x75, 0x6e, 0x64, 0x72,
	  0x65, 0x64, 0x73, 0x20, 0x6f, 0x66, 0x0a, 0x0a, 0x48, 0x6f, 0x77, 0x65, 0x76,
	  0x65, 0x72, 0x2c, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	  0x6f, 0x6e, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x3a, 0x62, 0x6f, 0x74, 0x68, 0x3b,
	  0x63, 0x6f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x77, 0x69,
	  0x74, 0x68, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x61, 0x62, 0x65,
	  0x6c, 0x20, 0x66, 0x6f, 0x72, 0x3d, 0x22, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72,
	  0x2d, 0x74, 0x6f, 0x70, 0x3a, 0x4e, 0x65, 0x77, 0x20, 0x5a, 0x65, 0x61, 0x6c,
	  0x61, 0x6e, 0x64, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65,
	  0x64, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x69,
	  0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x26, 0x6c, 0x74,
	  0x3b, 0x73, 0x75, 0x70, 0x26, 0x67, 0x74, 0x3b, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	  0x6f, 0x76, 0x65, 0x72, 0x73, 0x79, 0x4e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6c,
	  0x61, 0x6e, 0x64, 0x73, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69,
	  0x76, 0x65, 0x6d, 0x61, 0x78, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x3d, 0x22,
	  0x73, 0x77, 0x69, 0x74, 0x7a, 0x65, 0x72, 0x6c, 0x61, 0x6e, 0x64, 0x44, 0x65,
	  0x76, 0x65, 0x6c, 0x6f, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x73, 0x73, 0x65,
	  0x6e, 0x74, 0x69, 0x61, 0x6c, 0x6c, 0x79, 0x0a, 0x0a, 0x41, 0x6c, 0x74, 0x68,
	  0x6f, 0x75, 0x67, 0x68, 0x20, 0x3c, 0x2f, 0x74, 0x65, 0x78, 0x74, 0x61, 0x72,
	  0x65, 0x61, 0x3e, 0x74, 0x68, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x62, 0x69, 0x72,
	  0x64, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x26,
	  0x61, 0x6d, 0x70, 0x3b, 0x6e, 0x64, 0x61, 0x73, 0x68, 0x3b, 0x73, 0x70, 0x65,
	  0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	  0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x6c, 0x65, 0x67, 0x69, 0x73, 0x6c, 0x61,
	  0x74, 0x69, 0x6f, 0x6e, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x6f, 0x6e, 0x69,
	  0x63, 0x73, 0x0a, 0x09, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x69, 0x64, 0x3d, 0x22,
	  0x69, 0x6c, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x64, 0x65, 0x6e,
	  0x67, 0x69, 0x6e, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x74, 0x65, 0x72, 0x72,
	  0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	  0x69, 0x74, 0x69, 0x65, 0x73, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	  0x74, 0x65, 0x64, 0x36, 0x22, 0x20, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3d,
	  0x22, 0x73, 0x61, 0x6e, 0x73, 0x2d, 0x73, 0x65, 0x72, 0x69, 0x66, 0x3b, 0x63,
	  0x61, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x64, 0x69, 0x73,
	  0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x65, 0x64, 0x69, 0x6e, 0x74, 0x65, 0x72,
	  0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6c, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	  0x20, 0x66, 0x6f, 0x72, 0x69, 0x74, 0x20, 0x77, 0x6f, 0x75, 0x6c, 0x64, 0x20,
	  0x62, 0x65, 0x41, 0x66, 0x67, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x74, 0x61, 0x6e,
	  0x77, 0x61, 0x73, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x61,
	  0x74, 0x68, 0x2e, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x28, 0x73, 0x75, 0x72, 0x72,
	  0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x63, 0x61, 0x6e, 0x20, 0x61, 0x6c,
	  0x73, 0x6f, 0x20, 0x62, 0x65, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	  0x69, 0x6f, 0x6e, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63,
	  0x65, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64, 0x3c,
	  0x68, 0x32, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x6d, 0x6f, 0x72,
	  0x65, 0x20, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x20, 0x68, 0x61,
	  0x73, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x69, 0x6e, 0x76, 0x61, 0x73, 0x69, 0x6f,
	  0x6e, 0x20, 0x6f, 0x66, 0x29, 0x2e, 0x67, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65,
	  0x28, 0x29, 0x66, 0x75, 0x6e, 0x64, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c,
	  0x44, 0x65, 0x73, 0x70, 0x69, 0x74, 0x65, 0x20, 0x74, 0x68, 0x65, 0x22, 0x3e,
	  0x3c, 0x64, 0x69, 0x76, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x69, 0x6e, 0x73, 0x70,
	  0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x78, 0x61, 0x6d, 0x69, 0x6e,
	  0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74,
	  0x69, 0x6f, 0x6e, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	  0x6e, 0x3c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x3c,
	  0x2f, 0x61, 0x3e, 0x3c, 0x2f, 0x73, 0x70, 0x61, 0x6e, 0x3e, 0x76, 0x65, 0x72,
	  0x73, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x6f, 0x66, 0x69, 0x6e, 0x73, 0x74, 0x72,
	  0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x20,
	  0x74, 0x68, 0x65, 0x20, 0x20, 0x3d, 0x20, 0x27, 0x68, 0x74, 0x74, 0x70, 0x3a,
	  0x2f, 0x2f, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	  0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x6c, 0x79, 0x20, 0x2e, 0x73,
	  0x75, 0x62, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x28, 0x65, 0x61, 0x63, 0x68,
	  0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69,
	  0x6d, 0x65, 0x6e, 0x74, 0x73, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x74,
	  0x69, 0x61, 0x6c, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	  0x6e, 0x6d, 0x61, 0x6e, 0x79, 0x20, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x64,
	  0x75, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6d,
	  0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x6f, 0x20, 0x6e, 0x6f,
	  0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x20,
	  0x45, 0x61, 0x73, 0x74, 0x3c, 0x6e, 0x6f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	  0x3e, 0x3c, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x22, 0x20,
	  0x70, 0x65, 0x72, 0x68, 0x61, 0x70, 0x73, 0x20, 0x74, 0x68, 0x65, 0x69, 0x6e,
	  0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x20, 0x44,
	  0x65, 0x63, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x67,
	  0x65, 0x6d, 0x65, 0x6e, 0x74, 0x6d, 0x6f, 0x73, 0x74, 0x20, 0x66, 0x61, 0x6d,
	  0x6f, 0x75, 0x73, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74,
	  0x79, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x6c,
	  0x69, 0x6d, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x78, 0x63,
	  0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x6c, 0x79, 0x73, 0x6f, 0x76, 0x65, 0x72,
	  0x65, 0x69, 0x67, 0x6e, 0x74, 0x79, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	  0x74, 0x22, 0x3e, 0x0a, 0x3c, 0x74, 0x64, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73,
	  0x3d, 0x22, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	  0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x20, 0x74, 0x6f, 0x64, 0x6f,
	  0x63, 0x74, 0x72, 0x69, 0x6e, 0x65, 0x20, 0x6f, 0x66, 0x6f, 0x63, 0x63, 0x75,
	  0x70, 0x69, 0x65, 0x64, 0x20, 0x62, 0x79, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	  0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x52, 0x65, 0x6e, 0x61, 0x69, 0x73, 0x73, 0x61,
	  0x6e, 0x63, 0x65, 0x61, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f,
	  0x66, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x65,
	  0x78, 0x70, 0x6c, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x63,
	  0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x72, 0x65, 0x64, 0x65,
	  0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x3c, 0x69, 0x6d, 0x67, 0x20, 0x73, 0x72,
	  0x63, 0x3d, 0x22, 0x2f, 0x3c, 0x68, 0x31, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73,
	  0x3d, 0x22, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	  0x6d, 0x61, 0x79, 0x20, 0x61, 0x6c, 0x73, 0x6f, 0x20, 0x62, 0x65, 0x73, 0x70,
	  0x65, 0x63, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x3c, 0x2f, 0x66, 0x69,
	  0x65, 0x6c, 0x64, 0x73, 0x65, 0x74, 0x3e, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65,
	  0x73, 0x73, 0x69, 0x76, 0x65, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x6f, 0x6e, 0x73,
	  0x20, 0x6f, 0x66, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x20, 0x74, 0x68, 0x61,
	  0x74, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	  0x72, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x6e, 0x65,
	  0x20, 0x61, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x70, 0x61, 0x72, 0x65,
	  0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x61, 0x67, 0x72, 0x69, 0x63, 0x75, 0x6c,
	  0x74, 0x75, 0x72, 0x65, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69,
	  0x76, 0x65, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x73,
	  0x74, 0x6f, 0x77, 0x61, 0x72, 0x64, 0x73, 0x20, 0x74, 0x68, 0x65, 0x4d, 0x6f,
	  0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x6d, 0x61, 0x6e, 0x79,
	  0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x28, 0x65, 0x73, 0x70, 0x65, 0x63,
	  0x69, 0x61, 0x6c, 0x6c, 0x79, 0x3c, 0x74, 0x64, 0x20, 0x77, 0x69, 0x64, 0x74,
	  0x68, 0x3d, 0x22, 0x3b, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3a, 0x31, 0x30, 0x30,
	  0x25, 0x69, 0x6e, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x3c,
	  0x68, 0x33, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x20, 0x6f, 0x6e,
	  0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x3d, 0x22, 0x29, 0x2e, 0x61, 0x64, 0x64,
	  0x43, 0x6c, 0x61, 0x73, 0x73, 0x28, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63,
	  0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	  0x65, 0x20, 0x64, 0x61, 0x75, 0x67, 0x68, 0x74, 0x65, 0x72, 0x20, 0x6f, 0x66,
	  0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x62, 0x72,
	  0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x20, 0x6f, 0x66, 0x0d, 0x0a, 0x3c, 0x64,
	  0x69, 0x76, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x61,
	  0x72, 0x67, 0x65, 0x73, 0x74, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74,
	  0x69, 0x6f, 0x6e, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	  0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x74,
	  0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x6f, 0x63,
	  0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x20, 0x6f, 0x72,
	  0x64, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x22, 0x3e, 0x0a, 0x3c, 0x68, 0x65, 0x61,
	  0x64, 0x3e, 0x0a, 0x3c, 0x22, 0x20, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3d,
	  0x22, 0x31, 0x61, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20,
	  0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x3b,
	  0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x69, 0x6d, 0x70, 0x6c,
	  0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65,
	  0x20, 0x73, 0x65, 0x65, 0x6e, 0x74, 0x68, 0x65, 0x72, 0x65, 0x20, 0x77, 0x61,
	  0x73, 0x20, 0x61, 0x64, 0x65, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x74,
	  0x65, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x22, 0x3e, 0x63,
	  0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x74, 0x68, 0x65,
	  0x20, 0x42, 0x72, 0x69, 0x74, 0x69, 0x73, 0x68, 0x77, 0x61, 0x73, 0x20, 0x77,
	  0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x21, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	  0x61, 0x6e, 0x74, 0x3b, 0x70, 0x78, 0x3b, 0x20, 0x6d, 0x61, 0x72, 0x67, 0x69,
	  0x6e, 0x2d, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x20, 0x62, 0x79,
	  0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x6f,
	  0x6d, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x64, 0x75, 0x72, 0x69,
	  0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6d, 0x6d, 0x69, 0x67, 0x72,
	  0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x73, 0x6f, 0x20, 0x63, 0x61, 0x6c,
	  0x6c, 0x65, 0x64, 0x3c, 0x68, 0x34, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d,
	  0x22, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72,
	  0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x20, 0x62, 0x79, 0x67, 0x6f, 0x76,
	  0x65, 0x72, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	  0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x69, 0x6e, 0x20, 0x4e, 0x6f, 0x76, 0x65,
	  0x6d, 0x62, 0x65, 0x72, 0x77, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x20, 0x74,
	  0x68, 0x65, 0x3c, 0x2f, 0x70, 0x3e, 0x0a, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e,
	  0x61, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x63, 0x61,
	  0x6c, 0x6c, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x65, 0x72, 0x73,
	  0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e,
	  0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7b, 0x66, 0x6f, 0x6e, 0x74, 0x2d, 0x73, 0x69,
	  0x7a, 0x65, 0x3a, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x65, 0x64, 0x20, 0x69,
	  0x6e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x65, 0x65,
	  0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x6d, 0x6f, 0x73,
	  0x74, 0x20, 0x6c, 0x69, 0x6b, 0x65, 0x6c, 0x79, 0x77, 0x69, 0x64, 0x65, 0x6c,
	  0x79, 0x20, 0x75, 0x73, 0x65, 0x64, 0x64, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73,
	  0x69, 0x6f, 0x6e, 0x73, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x20,
	  0x6f, 0x66, 0x20, 0x28, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	  0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x76, 0x65, 0x6c, 0x79, 0x49, 0x74,
	  0x20, 0x68, 0x61, 0x73, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x69, 0x74, 0x20, 0x64,
	  0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	  0x72, 0x79, 0x20, 0x74, 0x6f, 0x69, 0x6e, 0x68, 0x61, 0x62, 0x69, 0x74, 0x61,
	  0x6e, 0x74, 0x73, 0x69, 0x6d, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e,
	  0x74, 0x73, 0x63, 0x68, 0x6f, 0x6c, 0x61, 0x72, 0x73, 0x68, 0x69, 0x70, 0x63,
	  0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x73,
	  0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x20, 0x65,
	  0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x6f, 0x6e, 0x65, 0x20, 0x6f, 0x72, 0x20,
	  0x6d, 0x6f, 0x72, 0x65, 0x70, 0x78, 0x3b, 0x20, 0x70, 0x61, 0x64, 0x64, 0x69,
	  0x6e, 0x67, 0x74, 0x68, 0x65, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	  0x61, 0x20, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x20, 0x6f, 0x66, 0x61, 0x72,
	  0x65, 0x20, 0x75, 0x73, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x72, 0x6f, 0x6c, 0x65,
	  0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f,
	  0x75, 0x73, 0x6c, 0x79, 0x20, 0x64, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69,
	  0x76, 0x65, 0x73, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x6f,
	  0x66, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x63,
	  0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x61,
	  0x74, 0x65, 0x64, 0x20, 0x74, 0x68, 0x61, 0x74, 0x63, 0x65, 0x72, 0x74, 0x69,
	  0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x3c, 0x2f, 0x61, 0x3e, 0x3c, 0x2f, 0x64,
	  0x69, 0x76, 0x3e, 0x0a, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64,
	  0x3d, 0x22, 0x68, 0x69, 0x67, 0x68, 0x20, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c,
	  0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x74, 0x6f, 0x63, 0x6f,
	  0x6d, 0x66, 0x6f, 0x72, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x61, 0x64, 0x6f, 0x70,
	  0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x74, 0x68, 0x72, 0x65, 0x65, 0x20,
	  0x79, 0x65, 0x61, 0x72, 0x73, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x75, 0x6e,
	  0x74, 0x72, 0x79, 0x69, 0x6e, 0x20, 0x46, 0x65, 0x62, 0x72, 0x75, 0x61, 0x72,
	  0x79, 0x73, 0x6f, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x70,
	  0x65, 0x6f, 0x70, 0x6c, 0x65, 0x20, 0x77, 0x68, 0x6f, 0x20, 0x70, 0x72, 0x6f,
	  0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x62, 0x79, 0x3c, 0x70, 0x61, 0x72, 0x61,
	  0x6d, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65,
	  0x64, 0x20, 0x62, 0x79, 0x69, 0x6e, 0x20, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x20,
	  0x6f, 0x66, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	  0x49, 0x53, 0x4f, 0x2d, 0x38, 0x38, 0x35, 0x39, 0x2d, 0x31, 0x22, 0x77, 0x61,
	  0x73, 0x20, 0x62, 0x6f, 0x72, 0x6e, 0x20, 0x69, 0x6e, 0x68, 0x69, 0x73, 0x74,
	  0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x20, 0x72, 0x65, 0x67, 0x61, 0x72, 0x64,
	  0x65, 0x64, 0x20, 0x61, 0x73, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d,
	  0x65, 0x6e, 0x74, 0x69, 0x73, 0x20, 0x62, 0x61, 0x73, 0x65, 0x64, 0x20, 0x6f,
	  0x6e, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x3a,
	  0x20, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x73, 0x69, 0x67,
	  0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x63, 0x65, 0x6c, 0x65, 0x62,
	  0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69,
	  0x74, 0x74, 0x65, 0x64, 0x2f, 0x6a, 0x73, 0x2f, 0x6a, 0x71, 0x75, 0x65, 0x72,
	  0x79, 0x2e, 0x69, 0x73, 0x20, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x20, 0x61, 0x73,
	  0x74, 0x68, 0x65, 0x6f, 0x72, 0x65, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x20, 0x74,
	  0x61, 0x62, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x3d, 0x22, 0x69, 0x74, 0x20, 0x63,
	  0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x3c, 0x6e, 0x6f, 0x73, 0x63, 0x72,
	  0x69, 0x70, 0x74, 0x3e, 0x0a, 0x68, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x20, 0x62,
	  0x65, 0x65, 0x6e, 0x0d, 0x0a, 0x3c, 0x68, 0x65, 0x61, 0x64, 0x3e, 0x0d, 0x0a,
	  0x3c, 0x20, 0x26, 0x71, 0x75, 0x6f, 0x74, 0x3b, 0x54, 0x68, 0x65, 0x20, 0x63,
	  0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x68, 0x65, 0x20,
	  0x68, 0x61, 0x64, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	  0x63, 0x65, 0x64, 0x20, 0x62, 0x79, 0x70, 0x68, 0x69, 0x6c, 0x6f, 0x73, 0x6f,
	  0x70, 0x68, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	  0x65, 0x64, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x20, 0x74, 0x6f,
	  0x61, 0x6d, 0x6f, 0x6e, 0x67, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x63, 0x6f,
	  0x6d, 0x70, 0x61, 0x72, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x74, 0x6f, 0x20, 0x73,
	  0x61, 0x79, 0x20, 0x74, 0x68, 0x61, 0x74, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	  0x65, 0x72, 0x69, 0x6e, 0x67, 0x61, 0x20, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72,
	  0x65, 0x6e, 0x74, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x20, 0x74,
	  0x6f, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x62,
	  0x65, 0x6c, 0x69, 0x65, 0x66, 0x20, 0x74, 0x68, 0x61, 0x74, 0x70, 0x68, 0x6f,
	  0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74,
	  0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	  0x20, 0x6f, 0x66, 0x20, 0x52, 0x65, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x20,
	  0x6f, 0x66, 0x6e, 0x65, 0x63, 0x65, 0x73, 0x73, 0x61, 0x72, 0x69, 0x6c, 0x79,
	  0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x74, 0x65,
	  0x63, 0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x6c, 0x65, 0x61, 0x76,
	  0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x73, 0x70, 0x65, 0x63, 0x74, 0x61,
	  0x63, 0x75, 0x6c, 0x61, 0x72, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	  0x20, 0x6f, 0x66, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74,
	  0x79, 0x68, 0x65, 0x61, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x72,
	  0x65, 0x73, 0x74, 0x61, 0x75, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x70, 0x61, 0x72,
	  0x74, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x65, 0x6d, 0x70, 0x68, 0x61,
	  0x73, 0x69, 0x73, 0x20, 0x6f, 0x6e, 0x6d, 0x6f, 0x73, 0x74, 0x20, 0x72, 0x65,
	  0x63, 0x65, 0x6e, 0x74, 0x73, 0x68, 0x61, 0x72, 0x65, 0x20, 0x77, 0x69, 0x74,
	  0x68, 0x20, 0x73, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x61, 0x74,
	  0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x64, 0x65,
	  0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x69, 0x74, 0x20, 0x69,
	  0x73, 0x20, 0x6f, 0x66, 0x74, 0x65, 0x6e, 0x22, 0x3e, 0x3c, 0x2f, 0x69, 0x66,
	  0x72, 0x61, 0x6d, 0x65, 0x3e, 0x61, 0x73, 0x20, 0x66, 0x6f, 0x6c, 0x6c, 0x6f,
	  0x77, 0x73, 0x3a, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74,
	  0x68, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x20, 0x74, 0x68, 0x65, 0x63,
	  0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c, 0x20, 0x70, 0x6f, 0x69,
	  0x6e, 0x74, 0x65, 0x64, 0x20, 0x6f, 0x75, 0x74, 0x6f, 0x70, 0x70, 0x6f, 0x72,
	  0x74, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x76, 0x69, 0x65, 0x77, 0x20, 0x6f, 0x66,
	  0x20, 0x74, 0x68, 0x65, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65,
	  0x6e, 0x74, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66,
	  0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x68, 0x65,
	  0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x73, 0x65, 0x74, 0x49,
	  0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0x3e, 0x3c, 0x2f, 0x73, 0x70,
	  0x61, 0x6e, 0x3e, 0x3c, 0x2f, 0x69, 0x6e, 0x20, 0x4e, 0x65, 0x77, 0x20, 0x59,
	  0x6f, 0x72, 0x6b, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	  0x20, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x0a,
	  0x0a, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x69, 0x6e, 0x63,
	  0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x3b, 0x3c, 0x2f, 0x73, 0x63,
	  0x72, 0x69, 0x70, 0x74, 0x3e, 0x3c, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x45,
	  0x76, 0x65, 0x6e, 0x74, 0x62, 0x65, 0x63, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x68,
	  0x65, 0x20, 0x22, 0x20, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x3d, 0x22, 0x5f,
	  0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x64, 0x20, 0x6f, 0x75, 0x74, 0x53, 0x6f,
	  0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x73, 0x63, 0x69, 0x65,
	  0x6e, 0x63, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x74, 0x68, 0x65, 0x20, 0x74, 0x69,
	  0x6d, 0x65, 0x20, 0x6f, 0x66, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	  0x72, 0x22, 0x3e, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	  0x67, 0x43, 0x68, 0x72, 0x69, 0x73, 0x74, 0x6f, 0x70, 0x68, 0x65, 0x72, 0x4d,
	  0x75, 0x63, 0x68, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x77, 0x72, 0x69,
	  0x74, 0x69, 0x6e, 0x67, 0x73, 0x20, 0x6f, 0x66, 0x22, 0x20, 0x68, 0x65, 0x69,
	  0x67, 0x68, 0x74, 0x3d, 0x22, 0x32, 0x73, 0x69, 0x7a, 0x65, 0x20, 0x6f, 0x66,
	  0x20, 0x74, 0x68, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x6f,
	  0x66, 0x20, 0x6d, 0x69, 0x78, 0x74, 0x75, 0x72, 0x65, 0x20, 0x6f, 0x66, 0x20,
	  0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x45, 0x78,
	  0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x20, 0x6f, 0x66, 0x65, 0x64, 0x75, 0x63,
	  0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74,
	  0x69, 0x74, 0x69, 0x76, 0x65, 0x20, 0x6f, 0x6e, 0x73, 0x75, 0x62, 0x6d, 0x69,
	  0x74, 0x3d, 0x22, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x20, 0x6f,
	  0x66, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x69, 0x76, 0x65, 0x2f,
	  0x44, 0x54, 0x44, 0x20, 0x58, 0x48, 0x54, 0x4d, 0x4c, 0x20, 0x72, 0x65, 0x6c,
	  0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x6f, 0x74, 0x65, 0x6e, 0x64, 0x65,
	  0x6e, 0x63, 0x79, 0x20, 0x74, 0x6f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63,
	  0x65, 0x20, 0x6f, 0x66, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x77, 0x6f, 0x75,
	  0x6c, 0x64, 0x64, 0x65, 0x73, 0x70, 0x69, 0x74, 0x65, 0x20, 0x74, 0x68, 0x65,
	  0x73, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x20, 0x6c, 0x65,
	  0x67, 0x69, 0x73, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x69, 0x6e, 0x6e,
	  0x65, 0x72, 0x48, 0x54, 0x4d, 0x4c, 0x20, 0x61, 0x6c, 0x6c, 0x65, 0x67, 0x61,
	  0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x67, 0x72, 0x69, 0x63, 0x75, 0x6c, 0x74,
	  0x75, 0x72, 0x65, 0x77, 0x61, 0x73, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x69,
	  0x6e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x61, 0x63, 0x68, 0x20, 0x74, 0x6f, 0x69,
	  0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x74, 0x79, 0x65, 0x61,
	  0x72, 0x73, 0x20, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x2c, 0x73, 0x61, 0x6e, 0x73,
	  0x2d, 0x73, 0x65, 0x72, 0x69, 0x66, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69,
	  0x6e, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e,
	  0x63, 0x65, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x73,
	  0x2c, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x69, 0x73, 0x20, 0x66, 0x6f,
	  0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x61, 0x62, 0x62, 0x72,
	  0x65, 0x76, 0x69, 0x61, 0x74, 0x65, 0x64, 0x68, 0x69, 0x67, 0x68, 0x65, 0x72,
	  0x20, 0x74, 0x68, 0x61, 0x6e, 0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74,
	  0x68, 0x65, 0x20, 0x69, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c,
	  0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x20, 0x6f, 0x66, 0x73,
	  0x75, 0x70, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x63, 0x6c, 0x61,
	  0x69, 0x6d, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x61, 0x74, 0x74, 0x72, 0x69,
	  0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x66, 0x6f, 0x6e, 0x74, 0x2d, 0x73, 0x69,
	  0x7a, 0x65, 0x3a, 0x31, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20,
	  0x6f, 0x66, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x20,
	  0x68, 0x69, 0x73, 0x20, 0x62, 0x72, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x61, 0x74,
	  0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x61, 0x6e, 0x6e, 0x69,
	  0x76, 0x65, 0x72, 0x73, 0x61, 0x72, 0x79, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e,
	  0x65, 0x64, 0x20, 0x62, 0x79, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x20,
	  0x74, 0x6f, 0x20, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x6c, 0x79,
	  0x20, 0x69, 0x6e, 0x6e, 0x6f, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x69,
	  0x74, 0x20, 0x69, 0x73, 0x20, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x63, 0x61, 0x6e,
	  0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x62, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e,
	  0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x74, 0x6f, 0x47, 0x4d, 0x54, 0x53, 0x74,
	  0x72, 0x69, 0x6e, 0x67, 0x41, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20,
	  0x6f, 0x66, 0x69, 0x6d, 0x67, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22,
	  0x45, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x2c, 0x77, 0x61,
	  0x73, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x6f, 0x63, 0x63, 0x75,
	  0x72, 0x72, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	  0x6f, 0x72, 0x69, 0x6e, 0x67, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x75,
	  0x69, 0x73, 0x68, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x68, 0x65, 0x20, 0x77, 0x61,
	  0x73, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x69, 0x6e, 0x67, 0x74,
	  0x65, 0x72, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x4d, 0x61, 0x6e,
	  0x79, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x61, 0x72, 0x67, 0x75, 0x65,
	  0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x61, 0x6e, 0x20, 0x41, 0x6d, 0x65, 0x72,
	  0x69, 0x63, 0x61, 0x6e, 0x63, 0x6f, 0x6e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20,
	  0x6f, 0x66, 0x77, 0x69, 0x64, 0x65, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x20,
	  0x77, 0x65, 0x72, 0x65, 0x20, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x73, 0x63,
	  0x72, 0x65, 0x65, 0x6e, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x49, 0x6e, 0x20, 0x6f,
	  0x72, 0x64, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74,
	  0x65, 0x64, 0x20, 0x74, 0x6f, 0x64, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x61,
	  0x6e, 0x74, 0x73, 0x61, 0x72, 0x65, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65,
	  0x64, 0x6c, 0x65, 0x67, 0x69, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x67,
	  0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x62, 0x61,
	  0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x6d, 0x6f, 0x73, 0x74, 0x20,
	  0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x79, 0x65, 0x61, 0x72, 0x73, 0x20, 0x61,
	  0x66, 0x74, 0x65, 0x72, 0x74, 0x68, 0x65, 0x72, 0x65, 0x20, 0x69, 0x73, 0x20,
	  0x6e, 0x6f, 0x74, 0x68, 0x65, 0x20, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74,
	  0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x20, 0x74, 0x68,
	  0x65, 0x79, 0x20, 0x64, 0x6f, 0x20, 0x6e, 0x6f, 0x74, 0x61, 0x72, 0x67, 0x75,
	  0x65, 0x64, 0x20, 0x74, 0x68, 0x61, 0x74, 0x73, 0x68, 0x6f, 0x77, 0x65, 0x64,
	  0x20, 0x74, 0x68, 0x61, 0x74, 0x70, 0x72, 0x65, 0x64, 0x6f, 0x6d, 0x69, 0x6e,
	  0x61, 0x6e, 0x74, 0x74, 0x68, 0x65, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61,
	  0x6c, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x63,
	  0x6f, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x68, 0x6f,
	  0x72, 0x74, 0x2d, 0x6c, 0x69, 0x76, 0x65, 0x64, 0x3c, 0x2f, 0x73, 0x70, 0x61,
	  0x6e, 0x3e, 0x3c, 0x2f, 0x61, 0x3e, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20,
	  0x75, 0x73, 0x65, 0x64, 0x76, 0x65, 0x72, 0x79, 0x20, 0x6c, 0x69, 0x74, 0x74,
	  0x6c, 0x65, 0x6f, 0x6e, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	  0x68, 0x61, 0x64, 0x20, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x69, 0x6e,
	  0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x64, 0x63, 0x6f, 0x6d, 0x6d,
	  0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x65, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	  0x65, 0x73, 0x20, 0x6f, 0x66, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6d, 0x65,
	  0x6e, 0x74, 0x2c, 0x3c, 0x2f, 0x6e, 0x6f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	  0x3e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x22,
	  0x20, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3d, 0x22, 0x33, 0x49, 0x6e, 0x64,
	  0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x70, 0x6f, 0x70, 0x75, 0x6c,
	  0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x2d, 0x73,
	  0x63, 0x61, 0x6c, 0x65, 0x2e, 0x20, 0x41, 0x6c, 0x74, 0x68, 0x6f, 0x75, 0x67,
	  0x68, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65,
	  0x64, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x6f,
	  0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x73, 0x74, 0x61, 0x72,
	  0x74, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x74, 0x77, 0x6f, 0x20, 0x6f, 0x72,
	  0x20, 0x6d, 0x6f, 0x72, 0x65, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	  0x6f, 0x6e, 0x73, 0x73, 0x75, 0x62, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74,
	  0x65, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x72, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x68,
	  0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x61, 0x6e, 0x64, 0x3c, 0x2f, 0x6f,
	  0x70, 0x74, 0x69, 0x6f, 0x6e, 0x3e, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x69,
	  0x6e, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61,
	  0x74, 0x69, 0x6e, 0x67, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x6e, 0x6f, 0x74, 0x20,
	  0x62, 0x65, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x20, 0x6f, 0x66,
	  0x69, 0x6e, 0x20, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x73, 0x69,
	  0x74, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x65, 0x6e, 0x73, 0x75,
	  0x72, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x74, 0x6f, 0x20, 0x63, 0x72, 0x65,
	  0x61, 0x74, 0x65, 0x20, 0x61, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x73, 0x73, 0x69,
	  0x70, 0x70, 0x69, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x6c,
	  0x79, 0x6f, 0x75, 0x74, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x62,
	  0x65, 0x74, 0x74, 0x65, 0x72, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x77, 0x68, 0x61,
	  0x74, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x77, 0x73, 0x69, 0x74, 0x75, 0x61,
	  0x74, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x20, 0x6e, 0x61,
	  0x6d, 0x65, 0x3d, 0x22, 0x54, 0x72, 0x61, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	  0x61, 0x6c, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	  0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x68,
	  0x65, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6f, 0x66, 0x61, 0x74, 0x6d, 0x6f,
	  0x73, 0x70, 0x68, 0x65, 0x72, 0x69, 0x63, 0x69, 0x64, 0x65, 0x6f, 0x6c, 0x6f,
	  0x67, 0x69, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69,
	  0x73, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6e,
	  0x67, 0x65, 0x61, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x72,
	  0x65, 0x6d, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x20, 0x6f, 0x66, 0x70, 0x6c, 0x75,
	  0x67, 0x69, 0x6e, 0x73, 0x70, 0x61, 0x67, 0x65, 0x2f, 0x69, 0x6e, 0x64, 0x65,
	  0x78, 0x2e, 0x70, 0x68, 0x70, 0x3f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x65,
	  0x64, 0x20, 0x69, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d,
	  0x65, 0x64, 0x48, 0x65, 0x20, 0x77, 0x61, 0x73, 0x20, 0x61, 0x6c, 0x73, 0x6f,
	  0x77, 0x61, 0x73, 0x20, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x73, 0x74,
	  0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x20, 0x66,
	  0x61, 0x76, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x4d, 0x69, 0x6e, 0x69, 0x73, 0x74,
	  0x72, 0x79, 0x20, 0x6f, 0x66, 0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	  0x20, 0x6f, 0x66, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	  0x6e, 0x69, 0x73, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x3c,
	  0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x72, 0x65, 0x6c, 0x3d, 0x22, 0x54, 0x68, 0x69,
	  0x73, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x3c, 0x61, 0x20, 0x68,
	  0x72, 0x65, 0x66, 0x3d, 0x22, 0x2f, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72,
	  0x69, 0x7a, 0x65, 0x64, 0x69, 0x6e, 0x76, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x20,
	  0x69, 0x6e, 0x61, 0x72, 0x65, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f,
	  0x61, 0x6e, 0x64, 0x20, 0x73, 0x65, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6d, 0x61,
	  0x64, 0x65, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x73, 0x65, 0x65, 0x6d,
	  0x73, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x6c, 0x69, 0x6b, 0x65, 0x6c, 0x79,
	  0x20, 0x74, 0x68, 0x61, 0x74, 0x50, 0x61, 0x6c, 0x65, 0x73, 0x74, 0x69, 0x6e,
	  0x69, 0x61, 0x6e, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x20, 0x61, 0x66, 0x74, 0x65,
	  0x72, 0x69, 0x74, 0x20, 0x68, 0x61, 0x64, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x6d,
	  0x6f, 0x73, 0x74, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x74, 0x6f, 0x20,
	  0x72, 0x65, 0x66, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x62, 0x75, 0x74, 0x20, 0x74,
	  0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x75,
	  0x74, 0x69, 0x76, 0x65, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x69,
	  0x6c, 0x79, 0x49, 0x6e, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2c,
	  0x63, 0x6f, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x74, 0x61,
	  0x6b, 0x65, 0x73, 0x20, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x75, 0x62, 0x64,
	  0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x69, 0x74,
	  0x6f, 0x72, 0x69, 0x61, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	  0x6e, 0x61, 0x6c, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x6c,
	  0x79, 0x77, 0x61, 0x73, 0x20, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x6c, 0x79, 0x6f,
	  0x75, 0x74, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x20, 0x6f, 0x66, 0x69, 0x6e, 0x20,
	  0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x73, 0x74, 0x66, 0x6f, 0x6c, 0x6c, 0x6f,
	  0x77, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x78, 0x6d, 0x6c, 0x6e, 0x73, 0x3a,
	  0x6f, 0x67, 0x3d, 0x22, 0x3e, 0x3c, 0x61, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73,
	  0x3d, 0x22, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x74, 0x65, 0x78, 0x74,
	  0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x61,
	  0x79, 0x20, 0x62, 0x65, 0x20, 0x75, 0x73, 0x65, 0x64, 0x6d, 0x61, 0x6e, 0x75,
	  0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20,
	  0x62, 0x65, 0x69, 0x6e, 0x67, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x66, 0x69, 0x78,
	  0x22, 0x3e, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f,
	  0x66, 0x77, 0x61, 0x73, 0x20, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x74,
	  0x6f, 0x20, 0x62, 0x65, 0x63, 0x6f, 0x6d, 0x65, 0x20, 0x61, 0x62, 0x65, 0x63,
	  0x61, 0x75, 0x73, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x6f, 0x6d, 0x65, 0x20,
	  0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65,
	  0x64, 0x20, 0x62, 0x79, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75,
	  0x6c, 0x20, 0x61, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x77, 0x68, 0x65, 0x6e,
	  0x6d, 0x6f, 0x72, 0x65, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x61, 0x6d,
	  0x6f, 0x6e, 0x67, 0x73, 0x74, 0x20, 0x74, 0x68, 0x65, 0x61, 0x6e, 0x20, 0x6f,
	  0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3a,
	  0x31, 0x30, 0x30, 0x25, 0x3b, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f,
	  0x67, 0x79, 0x2c, 0x77, 0x61, 0x73, 0x20, 0x61, 0x64, 0x6f, 0x70, 0x74, 0x65,
	  0x64, 0x74, 0x6f, 0x20, 0x6b, 0x65, 0x65, 0x70, 0x20, 0x74, 0x68, 0x65, 0x73,
	  0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x6c, 0x69, 0x76,
	  0x65, 0x20, 0x62, 0x69, 0x72, 0x74, 0x68, 0x73, 0x69, 0x6e, 0x64, 0x65, 0x78,
	  0x2e, 0x68, 0x74, 0x6d, 0x6c, 0x22, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	  0x69, 0x63, 0x75, 0x74, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x20,
	  0x74, 0x6f, 0x26, 0x61, 0x6d, 0x70, 0x3b, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x3b,
	  0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x61, 0x6c,
	  0x69, 0x67, 0x6e, 0x3d, 0x72, 0x69, 0x67, 0x68, 0x74, 0x74, 0x68, 0x65, 0x20,
	  0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73,
	  0x20, 0x62, 0x65, 0x65, 0x6e, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64,
	  0x20, 0x74, 0x6f, 0x69, 0x6e, 0x76, 0x6f, 0x6c, 0x76, 0x65, 0x6d, 0x65, 0x6e,
	  0x74, 0x42, 0x65, 0x63, 0x61, 0x75, 0x73, 0x65, 0x20, 0x74, 0x68, 0x65, 0x74,
	  0x68, 0x69, 0x73, 0x20, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0x20, 0x6e,
	  0x61, 0x6d, 0x65, 0x3d, 0x22, 0x71, 0x22, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	  0x6e, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x61, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c,
	  0x74, 0x20, 0x6f, 0x66, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3d, 0x22, 0x22, 0x20,
	  0x2f, 0x3e, 0x69, 0x73, 0x20, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x6c, 0x79,
	  0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x0d, 0x0a,
	  0x3c, 0x2f, 0x68, 0x65, 0x61, 0x64, 0x3e, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x76,
	  0x65, 0x72, 0x73, 0x65, 0x6c, 0x79, 0x2c, 0x3e, 0x0a, 0x3c, 0x64, 0x69, 0x76,
	  0x20, 0x69, 0x64, 0x3d, 0x22, 0x30, 0x22, 0x20, 0x77, 0x69, 0x64, 0x74, 0x68,
	  0x3d, 0x22, 0x31, 0x69, 0x73, 0x20, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x6c,
	  0x79, 0x68, 0x61, 0x76, 0x65, 0x20, 0x62, 0x65, 0x63, 0x6f, 0x6d, 0x65, 0x63,
	  0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x74, 0x68, 0x65,
	  0x20, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x63, 0x69, 0x74, 0x69, 0x7a,
	  0x65, 0x6e, 0x73, 0x20, 0x6f, 0x66, 0x70, 0x6f, 0x6c, 0x69, 0x74, 0x69, 0x63,
	  0x69, 0x61, 0x6e, 0x73, 0x72, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x20, 0x74,
	  0x68, 0x65, 0x61, 0x73, 0x20, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x20, 0x61, 0x73,
	  0x3a, 0x6e, 0x6f, 0x6e, 0x65, 0x3b, 0x20, 0x6f, 0x76, 0x65, 0x72, 0x3c, 0x74,
	  0x61, 0x62, 0x6c, 0x65, 0x20, 0x63, 0x65, 0x6c, 0x6c, 0x76, 0x61, 0x6c, 0x69,
	  0x64, 0x69, 0x74, 0x79, 0x20, 0x6f, 0x66, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	  0x6c, 0x79, 0x20, 0x74, 0x6f, 0x6f, 0x6e, 0x6d, 0x6f, 0x75, 0x73, 0x65, 0x64,
	  0x6f, 0x77, 0x6e, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20, 0x69, 0x74, 0x20, 0x69,
	  0x73, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x69, 0x74, 0x20, 0x77, 0x61, 0x73, 0x6d,
	  0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x72, 0x65, 0x6c,
	  0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x61, 0x63, 0x63, 0x6f, 0x6d,
	  0x6d, 0x6f, 0x64, 0x61, 0x74, 0x65, 0x61, 0x6c, 0x6f, 0x6e, 0x67, 0x20, 0x77,
	  0x69, 0x74, 0x68, 0x20, 0x49, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x61,
	  0x74, 0x65, 0x74, 0x68, 0x65, 0x20, 0x45, 0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68,
	  0x64, 0x65, 0x6c, 0x69, 0x63, 0x69, 0x6f, 0x75, 0x73, 0x22, 0x3e, 0x74, 0x68,
	  0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x74, 0x68, 0x65, 0x20,
	  0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x20, 0x74, 0x68, 0x65,
	  0x79, 0x20, 0x61, 0x72, 0x65, 0x61, 0x6e, 0x64, 0x20, 0x66, 0x69, 0x6e, 0x61,
	  0x6c, 0x6c, 0x79, 0x61, 0x20, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x72, 0x20, 0x6f,
	  0x66, 0x0d, 0x0a, 0x09, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0d, 0x0a, 0x0d,
	  0x0a, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x66, 0x61, 0x73,
	  0x74, 0x65, 0x72, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x6d, 0x61, 0x6a, 0x6f, 0x72,
	  0x69, 0x74, 0x79, 0x20, 0x6f, 0x66, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x77,
	  0x68, 0x69, 0x63, 0x68, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69,
	  0x76, 0x65, 0x74, 0x6f, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	  0x69, 0x6d, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x20, 0x74, 0x68, 0x65, 0x61, 0x77,
	  0x61, 0x72, 0x64, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x65, 0x72, 0x22, 0x20,
	  0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x62,
	  0x6f, 0x72, 0x64, 0x65, 0x72, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x74,
	  0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x61, 0x6d,
	  0x65, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x20, 0x6f, 0x66, 0x74,
	  0x68, 0x65, 0x69, 0x72, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x44, 0x75, 0x72,
	  0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x69,
	  0x6e, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	  0x65, 0x20, 0x6f, 0x66, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x28,
	  0x29, 0x7b, 0x66, 0x6f, 0x6e, 0x74, 0x2d, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x20,
	  0x77, 0x6f, 0x72, 0x6b, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x3c, 0x2f,
	  0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x0a, 0x3c, 0x62, 0x65, 0x67, 0x69,
	  0x6e, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x6a, 0x61, 0x76, 0x61, 0x73, 0x63,
	  0x72, 0x69, 0x70, 0x74, 0x3a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75,
	  0x65, 0x6e, 0x74, 0x77, 0x61, 0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x65,
	  0x64, 0x65, 0x71, 0x75, 0x69, 0x6c, 0x69, 0x62, 0x72, 0x69, 0x75, 0x6d, 0x61,
	  0x73, 0x73, 0x75, 0x6d, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x69, 0x73, 0x20,
	  0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x62, 0x79, 0x6e, 0x65, 0x65, 0x64, 0x73,
	  0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	  0x61, 0x74, 0x65, 0x73, 0x74, 0x68, 0x65, 0x20, 0x76, 0x61, 0x72, 0x69, 0x6f,
	  0x75, 0x73, 0x61, 0x72, 0x65, 0x20, 0x70, 0x61, 0x72, 0x74, 0x20, 0x6f, 0x66,
	  0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x73, 0x65,
	  0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x6f, 0x66, 0x69, 0x73, 0x20, 0x61,
	  0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x65, 0x6f, 0x72, 0x69,
	  0x65, 0x73, 0x20, 0x6f, 0x66, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	  0x69, 0x65, 0x73, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f,
	  0x6e, 0x65, 0x64, 0x67, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x73,
	  0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x20, 0x6f, 0x66, 0x70, 0x6f, 0x73,
	  0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x70, 0x72, 0x65, 0x73, 0x65,
	  0x6e, 0x74, 0x2d, 0x64, 0x61, 0x79, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73,
	  0x61, 0x6c, 0x6c, 0x79, 0x74, 0x6f, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x74,
	  0x68, 0x65, 0x62, 0x75, 0x74, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x65, 0x61, 0x64,
	  0x63, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x74,
	  0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x69, 0x73, 0x20, 0x63,
	  0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6c, 0x79, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	  0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x26, 0x71, 0x75, 0x6f, 0x74, 0x3b, 0x74,
	  0x68, 0x65, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x6d, 0x61, 0x64,
	  0x65, 0x77, 0x61, 0x73, 0x20, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x74, 0x6f, 0x77,
	  0x68, 0x69, 0x63, 0x68, 0x20, 0x6d, 0x65, 0x61, 0x6e, 0x73, 0x62, 0x75, 0x74,
	  0x20, 0x64, 0x69, 0x64, 0x20, 0x6e, 0x6f, 0x74, 0x6f, 0x6e, 0x4d, 0x6f, 0x75,
	  0x73, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x61, 0x73, 0x20, 0x70, 0x6f, 0x73, 0x73,
	  0x69, 0x62, 0x6c, 0x65, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x20,
	  0x62, 0x79, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x20, 0x66, 0x72, 0x6f, 0x6d,
	  0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x61, 0x64,
	  0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x66, 0x6f, 0x72, 0x20,
	  0x73, 0x65, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	  0x65, 0x72, 0x72, 0x65, 0x64, 0x61, 0x20, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	  0x20, 0x6f, 0x66, 0x61, 0x72, 0x65, 0x20, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x74,
	  0x6f, 0x68, 0x6f, 0x77, 0x65, 0x76, 0x65, 0x72, 0x2c, 0x20, 0x69, 0x74, 0x73,
	  0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x68, 0x61, 0x76, 0x65, 0x6d, 0x75, 0x63,
	  0x68, 0x20, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x72, 0x0a, 0x09, 0x3c, 0x2f, 0x73,
	  0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x61, 0x64, 0x6f, 0x70, 0x74, 0x65, 0x64,
	  0x20, 0x74, 0x68, 0x65, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x20,
	  0x6f, 0x66, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79,
	  0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6c, 0x79, 0x77, 0x61,
	  0x73, 0x20, 0x62, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x63, 0x68, 0x69, 0x6c,
	  0x64, 0x72, 0x65, 0x6e, 0x20, 0x6f, 0x66, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61,
	  0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x6c, 0x6f, 0x6e, 0x67, 0x65, 0x72, 0x20, 0x74,
	  0x68, 0x61, 0x6e, 0x6d, 0x61, 0x6e, 0x75, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	  0x73, 0x77, 0x61, 0x72, 0x20, 0x61, 0x67, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x62,
	  0x79, 0x20, 0x6d, 0x65, 0x61, 0x6e, 0x73, 0x20, 0x6f, 0x66, 0x61, 0x6e, 0x64,
	  0x20, 0x6d, 0x6f, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x73, 0x69, 0x6d, 0x69, 0x6c,
	  0x61, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x65,
	  0x74, 0x61, 0x72, 0x79, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	  0x6e, 0x67, 0x70, 0x72, 0x65, 0x73, 0x74, 0x69, 0x67, 0x69, 0x6f, 0x75, 0x73,
	  0x67, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x65, 0x78,
	  0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x74, 0x6f, 0x20, 0x6d,
	  0x61, 0x6b, 0x65, 0x20, 0x74, 0x68, 0x65, 0x49, 0x74, 0x20, 0x77, 0x61, 0x73,
	  0x20, 0x61, 0x6c, 0x73, 0x6f, 0x69, 0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64,
	  0x20, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x6f, 0x72,
	  0x73, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x55, 0x2e, 0x53, 0x2e, 0x72,
	  0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x20, 0x74, 0x68, 0x65, 0x62, 0x72, 0x6f,
	  0x75, 0x67, 0x68, 0x74, 0x20, 0x74, 0x68, 0x65, 0x63, 0x61, 0x6c, 0x63, 0x75,
	  0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x66, 0x61, 0x6c, 0x6c, 0x20, 0x6f, 0x66,
	  0x20, 0x74, 0x68, 0x65, 0x74, 0x68, 0x65, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72,
	  0x61, 0x6c, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79,
	  0x69, 0x6e, 0x20, 0x68, 0x6f, 0x6e, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x72, 0x65,
	  0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x72, 0x65, 0x73, 0x69,
	  0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x61, 0x6e, 0x64, 0x20, 0x73, 0x6f,
	  0x6d, 0x65, 0x20, 0x6f, 0x66, 0x6b, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x66, 0x20,
	  0x74, 0x68, 0x65, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74,
	  0x6f, 0x31, 0x73, 0x74, 0x20, 0x45, 0x61, 0x72, 0x6c, 0x20, 0x6f, 0x66, 0x63,
	  0x75, 0x6c, 0x74, 0x75, 0x72, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x70, 0x72, 0x69,
	  0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x6c, 0x79, 0x3c, 0x2f, 0x74, 0x69, 0x74,
	  0x6c, 0x65, 0x3e, 0x0a, 0x20, 0x20, 0x74, 0x68, 0x65, 0x79, 0x20, 0x63, 0x61,
	  0x6e, 0x20, 0x62, 0x65, 0x62, 0x61, 0x63, 0x6b, 0x20, 0x74, 0x6f, 0x20, 0x74,
	  0x68, 0x65, 0x73, 0x6f, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x68, 0x69, 0x73,
	  0x65, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x20, 0x74, 0x6f, 0x61, 0x72,
	  0x65, 0x20, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	  0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x61, 0x64, 0x64, 0x46, 0x61, 0x76,
	  0x6f, 0x72, 0x69, 0x74, 0x65, 0x63, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x73,
	  0x68, 0x69, 0x70, 0x70, 0x61, 0x72, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68,
	  0x65, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0x69,
	  0x6e, 0x20, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x74, 0x6f, 0x20,
	  0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x26, 0x61, 0x6d, 0x70, 0x3b,
	  0x6d, 0x69, 0x6e, 0x75, 0x73, 0x3b, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	  0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x72, 0x73,
	  0x74, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65,
	  0x61, 0x6e, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x66, 0x75,
	  0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6c, 0x61, 0x79,
	  0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	  0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3d, 0x22,
	  0x30, 0x22, 0x20, 0x69, 0x6e, 0x20, 0x68, 0x69, 0x73, 0x20, 0x62, 0x6f, 0x6f,
	  0x6b, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x20, 0x61, 0x66,
	  0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x20, 0x74, 0x68, 0x65, 0x63, 0x72, 0x65,
	  0x61, 0x74, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65,
	  0x6e, 0x63, 0x65, 0x20, 0x69, 0x6e, 0x26, 0x6e, 0x62, 0x73, 0x70, 0x3b, 0x3c,
	  0x2f, 0x74, 0x64, 0x3e, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69,
	  0x73, 0x74, 0x74, 0x68, 0x65, 0x20, 0x69, 0x64, 0x65, 0x61, 0x20, 0x6f, 0x66,
	  0x61, 0x20, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x77, 0x65,
	  0x72, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x64, 0x20, 0x63, 0x6c, 0x61,
	  0x73, 0x73, 0x3d, 0x22, 0x62, 0x74, 0x6e, 0x64, 0x61, 0x79, 0x73, 0x20, 0x6f,
	  0x66, 0x20, 0x74, 0x68, 0x65, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64,
	  0x20, 0x69, 0x6e, 0x73, 0x68, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68,
	  0x65, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x20, 0x69, 0x6e, 0x69,
	  0x6e, 0x20, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x20, 0x6f, 0x66, 0x74, 0x75, 0x72,
	  0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x74, 0x68, 0x65, 0x20, 0x68,
	  0x65, 0x61, 0x64, 0x20, 0x6f, 0x66, 0x4c, 0x6f, 0x72, 0x64, 0x20, 0x6f, 0x66,
	  0x20, 0x74, 0x68, 0x65, 0x70, 0x6f, 0x6c, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c,
	  0x6c, 0x79, 0x68, 0x61, 0x73, 0x20, 0x69, 0x74, 0x73, 0x20, 0x6f, 0x77, 0x6e,
	  0x45, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x61, 0x70,
	  0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x20, 0x6f, 0x66, 0x73, 0x6f, 0x6d, 0x65,
	  0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x65, 0x61, 0x63, 0x68, 0x20, 0x6f,
	  0x74, 0x68, 0x65, 0x72, 0x2c, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72,
	  0x20, 0x6f, 0x66, 0x61, 0x6e, 0x64, 0x20, 0x62, 0x65, 0x63, 0x61, 0x75, 0x73,
	  0x65, 0x61, 0x6e, 0x64, 0x20, 0x61, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x61,
	  0x70, 0x70, 0x65, 0x61, 0x72, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x72, 0x65, 0x63,
	  0x6f, 0x72, 0x64, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x62, 0x6c, 0x61, 0x63, 0x6b,
	  0x26, 0x71, 0x75, 0x6f, 0x74, 0x3b, 0x6d, 0x61, 0x79, 0x20, 0x69, 0x6e, 0x63,
	  0x6c, 0x75, 0x64, 0x65, 0x74, 0x68, 0x65, 0x20, 0x77, 0x6f, 0x72, 0x6c, 0x64,
	  0x27, 0x73, 0x63, 0x61, 0x6e, 0x20, 0x6c, 0x65, 0x61, 0x64, 0x20, 0x74, 0x6f,
	  0x72, 0x65, 0x66, 0x65, 0x72, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x62, 0x6f,
	  0x72, 0x64, 0x65, 0x72, 0x3d, 0x22, 0x30, 0x22, 0x20, 0x67, 0x6f, 0x76, 0x65,
	  0x72, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x77, 0x69, 0x6e, 0x6e, 0x69, 0x6e,
	  0x67, 0x20, 0x74, 0x68, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x65, 0x64,
	  0x20, 0x69, 0x6e, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x74, 0x68, 0x65,
	  0x20, 0x57, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x74, 0x6f, 0x6e, 0x2c, 0x74,
	  0x68, 0x65, 0x20, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x63, 0x69, 0x74,
	  0x79, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x3e, 0x3c, 0x2f, 0x64, 0x69,
	  0x76, 0x3e, 0x0d, 0x0a, 0x09, 0x09, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74,
	  0x20, 0x74, 0x68, 0x65, 0x74, 0x6f, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	  0x74, 0x65, 0x62, 0x65, 0x63, 0x61, 0x6d, 0x65, 0x20, 0x6d, 0x6f, 0x72, 0x65,
	  0x72, 0x61, 0x64, 0x69, 0x6f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x72, 0x65,
	  0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x77, 0x69, 0x74, 0x68,
	  0x6f, 0x75, 0x74, 0x20, 0x61, 0x6e, 0x79, 0x68, 0x69, 0x73, 0x20, 0x66, 0x61,
	  0x74, 0x68, 0x65, 0x72, 0x2c, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x63, 0x6f,
	  0x75, 0x6c, 0x64, 0x63, 0x6f, 0x70, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	  0x65, 0x74, 0x6f, 0x20, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x61,
	  0x20, 0x70, 0x6f, 0x6c, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x61, 0x63, 0x63,
	  0x6f, 0x75, 0x6e, 0x74, 0x73, 0x20, 0x6f, 0x66, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	  0x69, 0x74, 0x75, 0x74, 0x65, 0x73, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x64, 0x20,
	  0x77, 0x69, 0x74, 0x68, 0x65, 0x72, 0x3c, 0x2f, 0x61, 0x3e, 0x3c, 0x2f, 0x6c,
	  0x69, 0x3e, 0x6f, 0x66, 0x20, 0x68, 0x69, 0x73, 0x20, 0x6c, 0x69, 0x66, 0x65,
	  0x61, 0x63, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x64, 0x63, 0x6c,
	  0x69, 0x65, 0x6e, 0x74, 0x57, 0x69, 0x64, 0x74, 0x68, 0x70, 0x72, 0x65, 0x76,
	  0x65, 0x6e, 0x74, 0x20, 0x74, 0x68, 0x65, 0x4c, 0x65, 0x67, 0x69, 0x73, 0x6c,
	  0x61, 0x74, 0x69, 0x76, 0x65, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e,
	  0x74, 0x6c, 0x79, 0x74, 0x6f, 0x67, 0x65, 0x74, 0x68, 0x65, 0x72, 0x20, 0x69,
	  0x6e, 0x68, 0x61, 0x73, 0x20, 0x73, 0x65, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x66,
	  0x6f, 0x72, 0x20, 0x61, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78,
	  0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x66, 0x6f, 0x75, 0x6e, 0x64,
	  0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20,
	  0x74, 0x68, 0x65, 0x20, 0x69, 0x73, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x66,
	  0x6f, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65,
	  0x75, 0x73, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x74, 0x68, 0x65, 0x70, 0x6c,
	  0x61, 0x63, 0x65, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x77, 0x68, 0x65, 0x72,
	  0x65, 0x61, 0x73, 0x20, 0x74, 0x68, 0x65, 0x3e, 0x20, 0x3c, 0x61, 0x20, 0x68,
	  0x72, 0x65, 0x66, 0x3d, 0x22, 0x22, 0x3e, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65,
	  0x66, 0x3d, 0x22, 0x74, 0x68, 0x65, 0x6d, 0x73, 0x65, 0x6c, 0x76, 0x65, 0x73,
	  0x2c, 0x61, 0x6c, 0x74, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x20, 0x68, 0x65, 0x74,
	  0x68, 0x61, 0x74, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x74, 0x72, 0x61,
	  0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x72, 0x6f, 0x6c, 0x65, 0x20,
	  0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x61, 0x73, 0x20, 0x61, 0x20, 0x72, 0x65,
	  0x73, 0x75, 0x6c, 0x74, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x68, 0x69,
	  0x6c, 0x64, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x20, 0x62, 0x79,
	  0x77, 0x65, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x53, 0x6f,
	  0x6d, 0x65, 0x20, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x70, 0x72, 0x6f, 0x64,
	  0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x73, 0x69, 0x64, 0x65, 0x20, 0x6f,
	  0x66, 0x20, 0x74, 0x68, 0x65, 0x6e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74,
	  0x65, 0x72, 0x73, 0x75, 0x73, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68,
	  0x65, 0x64, 0x6f, 0x77, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x61,
	  0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x6c, 0x69, 0x76,
	  0x65, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x61, 0x74, 0x74, 0x65, 0x6d,
	  0x70, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x6f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65,
	  0x20, 0x74, 0x68, 0x65, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x69,
	  0x65, 0x73, 0x48, 0x6f, 0x77, 0x65, 0x76, 0x65, 0x72, 0x2c, 0x20, 0x69, 0x6e,
	  0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x72, 0x73, 0x61, 0x74,
	  0x20, 0x6c, 0x65, 0x61, 0x73, 0x74, 0x20, 0x69, 0x6e, 0x61, 0x70, 0x70, 0x72,
	  0x6f, 0x78, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x6f, 0x75,
	  0x67, 0x68, 0x20, 0x69, 0x74, 0x77, 0x61, 0x73, 0x20, 0x70, 0x61, 0x72, 0x74,
	  0x20, 0x6f, 0x66, 0x61, 0x6e, 0x64, 0x20, 0x76, 0x61, 0x72, 0x69, 0x6f, 0x75,
	  0x73, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x74,
	  0x68, 0x65, 0x20, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x74, 0x75, 0x72,
	  0x6e, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x74, 0x6f, 0x3e, 0x3c, 0x61, 0x20, 0x68,
	  0x72, 0x65, 0x66, 0x3d, 0x22, 0x2f, 0x74, 0x68, 0x65, 0x20, 0x65, 0x63, 0x6f,
	  0x6e, 0x6f, 0x6d, 0x79, 0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x6f,
	  0x73, 0x74, 0x6d, 0x6f, 0x73, 0x74, 0x20, 0x77, 0x69, 0x64, 0x65, 0x6c, 0x79,
	  0x77, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6e,
	  0x64, 0x20, 0x70, 0x65, 0x72, 0x68, 0x61, 0x70, 0x73, 0x72, 0x69, 0x73, 0x65,
	  0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x73,
	  0x20, 0x77, 0x68, 0x65, 0x6e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x20, 0x77, 0x68,
	  0x69, 0x63, 0x68, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	  0x2e, 0x74, 0x68, 0x65, 0x20, 0x77, 0x65, 0x73, 0x74, 0x65, 0x72, 0x6e, 0x74,
	  0x68, 0x65, 0x6f, 0x72, 0x79, 0x20, 0x74, 0x68, 0x61, 0x74, 0x69, 0x73, 0x20,
	  0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x64, 0x74, 0x68, 0x65, 0x20, 0x63,
	  0x69, 0x74, 0x79, 0x20, 0x6f, 0x66, 0x69, 0x6e, 0x20, 0x77, 0x68, 0x69, 0x63,
	  0x68, 0x20, 0x68, 0x65, 0x73, 0x65, 0x65, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x74,
	  0x68, 0x65, 0x74, 0x68, 0x65, 0x20, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c,
	  0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x66, 0x6d, 0x61,
	  0x6e, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x68, 0x69, 0x73, 0x61, 0x72, 0x65, 0x61,
	  0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x69, 0x73, 0x20, 0x74, 0x68, 0x65,
	  0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x6d, 0x6f, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20,
	  0x74, 0x68, 0x65, 0x6d, 0x61, 0x6e, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	  0x65, 0x74, 0x68, 0x65, 0x20, 0x57, 0x65, 0x73, 0x74, 0x65, 0x72, 0x6e, 0x54,
	  0x68, 0x65, 0x72, 0x65, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x65, 0x78, 0x74,
	  0x65, 0x6e, 0x64, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x69,
	  0x73, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x63, 0x6f, 0x6c, 0x73, 0x70, 0x61, 0x6e,
	  0x3d, 0x32, 0x20, 0x7c, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x20, 0x73, 0x74, 0x6f,
	  0x72, 0x79, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x20, 0x74, 0x6f,
	  0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x63, 0x72,
	  0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x20, 0x6f, 0x66, 0x72, 0x65, 0x70, 0x6f,
	  0x72, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x61, 0x20, 0x43, 0x68, 0x72, 0x69,
	  0x73, 0x74, 0x69, 0x61, 0x6e, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	  0x20, 0x74, 0x6f, 0x69, 0x73, 0x20, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x20, 0x74,
	  0x6f, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x20, 0x6f, 0x66, 0x54,
	  0x68, 0x69, 0x73, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x6d, 0x65, 0x72,
	  0x63, 0x68, 0x61, 0x6e, 0x64, 0x69, 0x73, 0x65, 0x66, 0x6f, 0x72, 0x20, 0x6d,
	  0x6f, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x6e, 0x6f, 0x20, 0x65, 0x76, 0x69, 0x64,
	  0x65, 0x6e, 0x63, 0x65, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20,
	  0x6f, 0x66, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x69, 0x6e,
	  0x26, 0x71, 0x75, 0x6f, 0x74, 0x3b, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x63, 0x6f,
	  0x6d, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x77, 0x68, 0x69, 0x63,
	  0x68, 0x20, 0x6d, 0x61, 0x6b, 0x65, 0x73, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72,
	  0x6f, 0x63, 0x65, 0x73, 0x73, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x20,
	  0x74, 0x68, 0x65, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65,
	  0x2c, 0x69, 0x73, 0x20, 0x61, 0x20, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x74,
	  0x68, 0x65, 0x20, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x74, 0x68, 0x65,
	  0x20, 0x61, 0x6e, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x70, 0x72, 0x6f, 0x62, 0x6c,
	  0x65, 0x6d, 0x73, 0x20, 0x69, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x6f, 0x66,
	  0x20, 0x74, 0x68, 0x65, 0x64, 0x65, 0x66, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20,
	  0x62, 0x79, 0x62, 0x6f, 0x64, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
	  0x61, 0x20, 0x66, 0x65, 0x77, 0x20, 0x79, 0x65, 0x61, 0x72, 0x73, 0x6d, 0x75,
	  0x63, 0x68, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x74, 0x68, 0x65, 0x20,
	  0x77, 0x6f, 0x72, 0x6b, 0x20, 0x6f, 0x66, 0x43, 0x61, 0x6c, 0x69, 0x66, 0x6f,
	  0x72, 0x6e, 0x69, 0x61, 0x2c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x20, 0x61,
	  0x73, 0x20, 0x61, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	  0x2e, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x20, 0x6f, 0x66, 0x6d,
	  0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x69, 0x6e, 0x09, 0x09, 0x3c,
	  0x64, 0x69, 0x76, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x69, 0x74, 0x22, 0x20, 0x76,
	  0x61, 0x6c, 0x75, 0x65, 0x3d, 0x22, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	  0x65, 0x20, 0x6f, 0x66, 0x61, 0x73, 0x20, 0x74, 0x68, 0x65, 0x79, 0x20, 0x61,
	  0x72, 0x65, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x64, 0x20, 0x69, 0x6e,
	  0x69, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x65, 0x78,
	  0x70, 0x6c, 0x61, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x64, 0x69, 0x76, 0x3e,
	  0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0a, 0x48, 0x6f, 0x77, 0x65, 0x76, 0x65,
	  0x72, 0x20, 0x74, 0x68, 0x65, 0x6c, 0x65, 0x61, 0x64, 0x20, 0x74, 0x6f, 0x20,
	  0x74, 0x68, 0x65, 0x09, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22,
	  0x2f, 0x77, 0x61, 0x73, 0x20, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x70,
	  0x65, 0x6f, 0x70, 0x6c, 0x65, 0x20, 0x68, 0x61, 0x76, 0x65, 0x63, 0x6f, 0x6e,
	  0x74, 0x69, 0x6e, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x77, 0x61, 0x73, 0x20, 0x73,
	  0x65, 0x65, 0x6e, 0x20, 0x61, 0x73, 0x61, 0x6e, 0x64, 0x20, 0x72, 0x65, 0x6c,
	  0x61, 0x74, 0x65, 0x64, 0x74, 0x68, 0x65, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x20,
	  0x6f, 0x66, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x20, 0x62, 0x79,
	  0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x62, 0x65, 0x73, 0x74, 0x65, 0x61,
	  0x63, 0x68, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x73,
	  0x74, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65,
	  0x20, 0x66, 0x72, 0x6f, 0x6d, 0x64, 0x69, 0x61, 0x6c, 0x65, 0x63, 0x74, 0x73,
	  0x20, 0x6f, 0x66, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	  0x6e, 0x77, 0x61, 0x73, 0x20, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x61,
	  0x20, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x6f, 0x66, 0x74, 0x68, 0x65,
	  0x20, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x6c, 0x61, 0x75, 0x6e, 0x63,
	  0x68, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	  0x20, 0x74, 0x68, 0x65, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x77, 0x65,
	  0x73, 0x74, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20, 0x74, 0x68, 0x65, 0x72, 0x65,
	  0x61, 0x6e, 0x64, 0x20, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x62, 0x65,
	  0x74, 0x77, 0x65, 0x65, 0x6e, 0x20, 0x74, 0x77, 0x6f, 0x69, 0x73, 0x20, 0x61,
	  0x6c, 0x73, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x45, 0x6e, 0x67, 0x6c, 0x69, 0x73,
	  0x68, 0x20, 0x61, 0x6e, 0x64, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	  0x6e, 0x73, 0x2c, 0x74, 0x68, 0x61, 0x74, 0x20, 0x69, 0x74, 0x20, 0x77, 0x61,
	  0x73, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x74,
	  0x68, 0x65, 0x6d, 0x73, 0x65, 0x6c, 0x76, 0x65, 0x73, 0x2e, 0x71, 0x75, 0x61,
	  0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x6f, 0x66, 0x72, 0x61, 0x6e, 0x73, 0x70,
	  0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x74, 0x68, 0x65, 0x20, 0x73, 0x61, 0x6d,
	  0x65, 0x20, 0x61, 0x73, 0x74, 0x6f, 0x20, 0x6a, 0x6f, 0x69, 0x6e, 0x20, 0x74,
	  0x68, 0x65, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x61, 0x6e, 0x64,
	  0x74, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x54, 0x68,
	  0x69, 0x73, 0x20, 0x6c, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x61, 0x20, 0x73, 0x74,
	  0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	  0x73, 0x74, 0x20, 0x74, 0x6f, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x64, 0x65,
	  0x78, 0x4f, 0x66, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x20, 0x68, 0x69,
	  0x73, 0x69, 0x73, 0x20, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x74,
	  0x68, 0x65, 0x20, 0x74, 0x65, 0x72, 0x6d, 0x20, 0x69, 0x73, 0x69, 0x73, 0x20,
	  0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x70, 0x72, 0x6f, 0x74, 0x65,
	  0x63, 0x74, 0x20, 0x74, 0x68, 0x65, 0x6e, 0x67, 0x3c, 0x2f, 0x61, 0x3e, 0x3c,
	  0x2f, 0x6c, 0x69, 0x3e, 0x54, 0x68, 0x65, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65,
	  0x6e, 0x74, 0x74, 0x68, 0x65, 0x20, 0x73, 0x69, 0x74, 0x65, 0x20, 0x6f, 0x66,
	  0x73, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x65, 0x78,
	  0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x2c, 0x69, 0x6e, 0x20, 0x74,
	  0x68, 0x65, 0x20, 0x57, 0x65, 0x73, 0x74, 0x74, 0x68, 0x65, 0x79, 0x20, 0x73,
	  0x68, 0x6f, 0x75, 0x6c, 0x64, 0x73, 0x6c, 0x6f, 0x76, 0x65, 0x6e, 0xc4, 0x8d,
	  0x69, 0x6e, 0x61, 0x63, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x69, 0x6f,
	  0x73, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x64, 0x61, 0x64, 0x63,
	  0x6f, 0x6e, 0x64, 0x69, 0x63, 0x69, 0x6f, 0x6e, 0x65, 0x73, 0x61, 0x63, 0x74,
	  0x69, 0x76, 0x69, 0x64, 0x61, 0x64, 0x65, 0x73, 0x65, 0x78, 0x70, 0x65, 0x72,
	  0x69, 0x65, 0x6e, 0x63, 0x69, 0x61, 0x74, 0x65, 0x63, 0x6e, 0x6f, 0x6c, 0x6f,
	  0x67, 0xc3, 0xad, 0x61, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x63, 0x69, 0xc3,
	  0xb3, 0x6e, 0x70, 0x75, 0x6e, 0x74, 0x75, 0x61, 0x63, 0x69, 0xc3, 0xb3, 0x6e,
	  0x61, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x63, 0x6f,
	  0x6e, 0x74, 0x72, 0x61, 0x73, 0x65, 0xc3, 0xb1, 0x61, 0x63, 0x61, 0x74, 0x65,
	  0x67, 0x6f, 0x72, 0xc3, 0xad, 0x61, 0x73, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	  0x72, 0x61, 0x72, 0x73, 0x65, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x69, 0x6f,
	  0x6e, 0x61, 0x6c, 0x74, 0x72, 0x61, 0x74, 0x61, 0x6d, 0x69, 0x65, 0x6e, 0x74,
	  0x6f, 0x72, 0x65, 0x67, 0xc3, 0xad, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x73,
	  0x65, 0x63, 0x72, 0x65, 0x74, 0x61, 0x72, 0xc3, 0xad, 0x61, 0x70, 0x72, 0x69,
	  0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x65, 0x73, 0x70, 0x72, 0x6f, 0x74, 0x65,
	  0x63, 0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61,
	  0x6e, 0x74, 0x65, 0x73, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x63,
	  0x69, 0x61, 0x70, 0x6f, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x64, 0x61, 0x64,
	  0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x61, 0x6e, 0x74, 0x65, 0x63, 0x72,
	  0x65, 0x63, 0x69, 0x6d, 0x69, 0x65, 0x6e, 0x74, 0x6f, 0x6e, 0x65, 0x63, 0x65,
	  0x73, 0x69, 0x64, 0x61, 0x64, 0x65, 0x73, 0x73, 0x75, 0x73, 0x63, 0x72, 0x69,
	  0x62, 0x69, 0x72, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x63, 0x69,
	  0xc3, 0xb3, 0x6e, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x6e, 0x69, 0x62, 0x6c, 0x65,
	  0x73, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x65,
	  0x73, 0x74, 0x75, 0x64, 0x69, 0x61, 0x6e, 0x74, 0x65, 0x73, 0x72, 0x65, 0x73,
	  0x70, 0x6f, 0x6e, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x72, 0x65, 0x73, 0x6f, 0x6c,
	  0x75, 0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x67, 0x75, 0x61, 0x64, 0x61, 0x6c, 0x61,
	  0x6a, 0x61, 0x72, 0x61, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x64,
	  0x6f, 0x73, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x75, 0x6e, 0x69, 0x64, 0x61, 0x64,
	  0x63, 0x6f, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c, 0x65, 0x73, 0x66, 0x6f,
	  0x74, 0x6f, 0x67, 0x72, 0x61, 0x66, 0xc3, 0xad, 0x61, 0x61, 0x75, 0x74, 0x6f,
	  0x72, 0x69, 0x64, 0x61, 0x64, 0x65, 0x73, 0x69, 0x6e, 0x67, 0x65, 0x6e, 0x69,
	  0x65, 0x72, 0xc3, 0xad, 0x61, 0x74, 0x65, 0x6c, 0x65, 0x76, 0x69, 0x73, 0x69,
	  0xc3, 0xb3, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x65, 0x6e, 0x63, 0x69,
	  0x61, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x63, 0x69, 0x6f, 0x6e, 0x65, 0x73, 0x65,
	  0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x63, 0x69, 0x64, 0x6f, 0x73, 0x69, 0x6d,
	  0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x61, 0x63, 0x74, 0x75, 0x61,
	  0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x76, 0x65, 0x67, 0x61, 0x63,
	  0x69, 0xc3, 0xb3, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x69, 0x64,
	  0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	  0x3a, 0x66, 0x6f, 0x6e, 0x74, 0x2d, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x3a,
	  0x22, 0x20, 0x3a, 0x20, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x61,
	  0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x6c, 0x69,
	  0x6e, 0x6b, 0x22, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x73, 0x70, 0x65,
	  0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x2f, 0x2f, 0x3c, 0x21,
	  0x5b, 0x43, 0x44, 0x41, 0x54, 0x41, 0x5b, 0x0a, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	  0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69,
	  0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x30, 0x70, 0x78, 0x3b, 0x20, 0x68, 0x65,
	  0x69, 0x67, 0x68, 0x74, 0x3a, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	  0x73, 0x68, 0x69, 0x70, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x77, 0x69,
	  0x64, 0x74, 0x68, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73,
	  0x3d, 0x22, 0x3c, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x20, 0x66, 0x6f, 0x72, 0x3d,
	  0x22, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	  0x3c, 0x2f, 0x6e, 0x6f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x0a, 0x2f,
	  0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x68, 0x74, 0x6d, 0x6c, 0x22, 0x77, 0x69,
	  0x6e, 0x64, 0x6f, 0x77, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x28, 0x20, 0x21, 0x69,
	  0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x74, 0x3b, 0x61, 0x70, 0x70, 0x6c,
	  0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x70,
	  0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e,
	  0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	  0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x75, 0x74, 0x6f, 0x63, 0x6f, 0x6d, 0x70,
	  0x6c, 0x65, 0x74, 0x65, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65,
	  0x6e, 0x74, 0x73, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	  0x76, 0x65, 0x3c, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3d,
	  0x22, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x61, 0x6c,
	  0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x2d, 0x6c, 0x65, 0x66, 0x74, 0x3a, 0x31,
	  0x38, 0x74, 0x68, 0x20, 0x63, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x79, 0x61, 0x6e,
	  0x20, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x73,
	  0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x61, 0x62, 0x62, 0x72,
	  0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3c, 0x69, 0x6d, 0x67, 0x20,
	  0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	  0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x63, 0x69, 0x76, 0x69, 0x6c, 0x69, 0x7a,
	  0x61, 0x74, 0x69, 0x6f, 0x6e, 0x31, 0x39, 0x74, 0x68, 0x20, 0x63, 0x65, 0x6e,
	  0x74, 0x75, 0x72, 0x79, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74,
	  0x75, 0x72, 0x65, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74,
	  0x65, 0x64, 0x32, 0x30, 0x74, 0x68, 0x20, 0x63, 0x65, 0x6e, 0x74, 0x75, 0x72,
	  0x79, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x22, 0x3e,
	  0x6d, 0x6f, 0x73, 0x74, 0x20, 0x6e, 0x6f, 0x74, 0x61, 0x62, 0x6c, 0x79, 0x2f,
	  0x3e, 0x3c, 0x2f, 0x61, 0x3e, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x6e, 0x6f,
	  0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x27, 0x75, 0x6e,
	  0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x27, 0x29, 0x46, 0x75, 0x72, 0x74,
	  0x68, 0x65, 0x72, 0x6d, 0x6f, 0x72, 0x65, 0x2c, 0x62, 0x65, 0x6c, 0x69, 0x65,
	  0x76, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x48,
	  0x54, 0x4d, 0x4c, 0x20, 0x3d, 0x20, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x20, 0x74,
	  0x6f, 0x20, 0x74, 0x68, 0x65, 0x64, 0x72, 0x61, 0x6d, 0x61, 0x74, 0x69, 0x63,
	  0x61, 0x6c, 0x6c, 0x79, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x69, 0x6e, 0x67,
	  0x20, 0x74, 0x6f, 0x6e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f,
	  0x6e, 0x73, 0x68, 0x65, 0x61, 0x64, 0x71, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72,
	  0x73, 0x53, 0x6f, 0x75, 0x74, 0x68, 0x20, 0x41, 0x66, 0x72, 0x69, 0x63, 0x61,
	  0x75, 0x6e, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x50,
	  0x65, 0x6e, 0x6e, 0x73, 0x79, 0x6c, 0x76, 0x61, 0x6e, 0x69, 0x61, 0x41, 0x73,
	  0x20, 0x61, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2c, 0x3c, 0x68, 0x74,
	  0x6d, 0x6c, 0x20, 0x6c, 0x61, 0x6e, 0x67, 0x3d, 0x22, 0x26, 0x6c, 0x74, 0x3b,
	  0x2f, 0x73, 0x75, 0x70, 0x26, 0x67, 0x74, 0x3b, 0x64, 0x65, 0x61, 0x6c, 0x69,
	  0x6e, 0x67, 0x20, 0x77, 0x69, 0x74, 0x68, 0x70, 0x68, 0x69, 0x6c, 0x61, 0x64,
	  0x65, 0x6c, 0x70, 0x68, 0x69, 0x61, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69,
	  0x63, 0x61, 0x6c, 0x6c, 0x79, 0x29, 0x3b, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69,
	  0x70, 0x74, 0x3e, 0x0a, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x2d, 0x74,
	  0x6f, 0x70, 0x3a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	  0x61, 0x6c, 0x67, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	  0x65, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	  0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x70,
	  0x61, 0x72, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x3d, 0x66,
	  0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x29, 0x7b, 0x73, 0x75, 0x62,
	  0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x6c, 0x2e, 0x64, 0x74,
	  0x64, 0x22, 0x3e, 0x0d, 0x0a, 0x3c, 0x68, 0x74, 0x67, 0x65, 0x6f, 0x67, 0x72,
	  0x61, 0x70, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x69,
	  0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x27, 0x2c, 0x20, 0x66, 0x75, 0x6e, 0x63,
	  0x74, 0x69, 0x6f, 0x6e, 0x28, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65,
	  0x64, 0x20, 0x62, 0x79, 0x61, 0x67, 0x72, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x75,
	  0x72, 0x61, 0x6c, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	  0x6f, 0x6e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	  0x73, 0x66, 0x6f, 0x6e, 0x74, 0x2d, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x20, 0x31,
	  0x61, 0x20, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x20, 0x6f, 0x66, 0x3c,
	  0x64, 0x69, 0x76, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x45, 0x6e,
	  0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x69, 0x66, 0x72,
	  0x61, 0x6d, 0x65, 0x20, 0x73, 0x72, 0x63, 0x3d, 0x22, 0x64, 0x65, 0x6d, 0x6f,
	  0x6e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x6d,
	  0x70, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72,
	  0x73, 0x69, 0x74, 0x69, 0x65, 0x73, 0x44, 0x65, 0x6d, 0x6f, 0x67, 0x72, 0x61,
	  0x70, 0x68, 0x69, 0x63, 0x73, 0x29, 0x3b, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69,
	  0x70, 0x74, 0x3e, 0x3c, 0x64, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64,
	  0x20, 0x74, 0x6f, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x20,
	  0x6f, 0x66, 0x73, 0x61, 0x74, 0x69, 0x73, 0x66, 0x61, 0x63, 0x74, 0x69, 0x6f,
	  0x6e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x6c, 0x79,
	  0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x45,
	  0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68, 0x20, 0x28, 0x55, 0x53, 0x29, 0x61, 0x70,
	  0x70, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x28, 0x74, 0x72, 0x61,
	  0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x20, 0x48,
	  0x6f, 0x77, 0x65, 0x76, 0x65, 0x72, 0x2c, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x6c,
	  0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x20, 0x74, 0x61, 0x62, 0x69,
	  0x6e, 0x64, 0x65, 0x78, 0x3d, 0x22, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3a, 0x72,
	  0x69, 0x67, 0x68, 0x74, 0x3b, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x77, 0x65,
	  0x61, 0x6c, 0x74, 0x68, 0x72, 0x61, 0x6e, 0x67, 0x69, 0x6e, 0x67, 0x20, 0x66,
	  0x72, 0x6f, 0x6d, 0x69, 0x6e, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x74,
	  0x68, 0x65, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x61, 0x73, 0x74, 0x20, 0x6f, 0x6e,
	  0x65, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	  0x65, 0x6e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x3b,
	  0x66, 0x6f, 0x6e, 0x74, 0x2d, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x31, 0x6a, 0x75,
	  0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x74, 0x20,
	  0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x3e, 0x3c, 0x61,
	  0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x49, 0x6e, 0x20, 0x61, 0x64,
	  0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	  0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2b, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	  0x61, 0x74, 0x69, 0x6f, 0x6e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x20,
	  0x77, 0x69, 0x74, 0x68, 0x69, 0x73, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	  0x6c, 0x6c, 0x79, 0x72, 0x22, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	  0x3d, 0x22, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6e,
	  0x67, 0x26, 0x6c, 0x74, 0x3b, 0x6d, 0x61, 0x74, 0x68, 0x26, 0x67, 0x74, 0x3b,
	  0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6f,
	  0x63, 0x63, 0x61, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x3c, 0x69,
	  0x6d, 0x67, 0x20, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3d, 0x22, 0x6e, 0x61, 0x76,
	  0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3e, 0x63, 0x6f, 0x6d, 0x70,
	  0x65, 0x6e, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x63, 0x68, 0x61, 0x6d, 0x70,
	  0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x3d,
	  0x22, 0x61, 0x6c, 0x6c, 0x22, 0x20, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69,
	  0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	  0x65, 0x20, 0x74, 0x6f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72,
	  0x75, 0x65, 0x3b, 0x53, 0x74, 0x72, 0x69, 0x63, 0x74, 0x2f, 0x2f, 0x45, 0x4e,
	  0x22, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	  0x73, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	  0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	  0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x69,
	  0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x69, 0x65, 0x73, 0x43, 0x68, 0x61,
	  0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x63, 0x61, 0x70, 0x61,
	  0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x3c, 0x21, 0x5b, 0x65, 0x6e,
	  0x64, 0x69, 0x66, 0x5d, 0x2d, 0x2d, 0x3e, 0x7d, 0x0a, 0x3c, 0x2f, 0x73, 0x63,
	  0x72, 0x69, 0x70, 0x74, 0x3e, 0x0a, 0x43, 0x68, 0x72, 0x69, 0x73, 0x74, 0x69,
	  0x61, 0x6e, 0x69, 0x74, 0x79, 0x66, 0x6f, 0x72, 0x20, 0x65, 0x78, 0x61, 0x6d,
	  0x70, 0x6c, 0x65, 0x2c, 0x50, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f,
	  0x6e, 0x61, 0x6c, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f,
	  0x6e, 0x73, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x20, 0x74, 0x68, 0x61,
	  0x74, 0x77, 0x61, 0x73, 0x20, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64,
	  0x28, 0x73, 0x75, 0x63, 0x68, 0x20, 0x61, 0x73, 0x20, 0x74, 0x68, 0x65, 0x72,
	  0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x28, 0x75, 0x6e,
	  0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x74, 0x68, 0x65,
	  0x20, 0x41, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x61, 0x6e, 0x73, 0x74, 0x72, 0x75,
	  0x63, 0x74, 0x75, 0x72, 0x65, 0x20, 0x6f, 0x66, 0x2f, 0x69, 0x6e, 0x64, 0x65,
	  0x78, 0x2e, 0x68, 0x74, 0x6d, 0x6c, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	  0x68, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x73, 0x70, 0x61, 0x6e, 0x20, 0x63, 0x6c,
	  0x61, 0x73, 0x73, 0x3d, 0x22, 0x22, 0x3e, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65,
	  0x66, 0x3d, 0x22, 0x2f, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	  0x69, 0x6f, 0x6e, 0x62, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x6e, 0x67, 0x20,
	  0x74, 0x6f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x20, 0x74, 0x68, 0x61,
	  0x74, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x73,
	  0x3c, 0x6d, 0x65, 0x74, 0x61, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x22, 0x47,
	  0x75, 0x69, 0x64, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x6f, 0x76,
	  0x65, 0x72, 0x77, 0x68, 0x65, 0x6c, 0x6d, 0x69, 0x6e, 0x67, 0x61, 0x67, 0x61,
	  0x69, 0x6e, 0x73, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x63,
	  0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2c, 0x0a, 0x2e, 0x6e, 0x6f,
	  0x6e, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x20, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76,
	  0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3c, 0x2f, 0x61, 0x3e, 0x0a, 0x3c, 0x2f,
	  0x64, 0x69, 0x76, 0x3e, 0x0a, 0x66, 0x20, 0x28, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	  0x65, 0x6e, 0x74, 0x2e, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3a, 0x20, 0x31,
	  0x70, 0x78, 0x20, 0x7b, 0x66, 0x6f, 0x6e, 0x74, 0x2d, 0x73, 0x69, 0x7a, 0x65,
	  0x3a, 0x31, 0x74, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x6f,
	  0x66, 0x30, 0x22, 0x20, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3d, 0x22, 0x31,
	  0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	  0x6e, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x69,
	  0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x74, 0x6f, 0x67, 0x72, 0x65,
	  0x61, 0x74, 0x65, 0x72, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x61, 0x63, 0x68, 0x69,
	  0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x65, 0x73, 0x74, 0x61, 0x62,
	  0x6c, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x4a, 0x61, 0x76, 0x61, 0x53, 0x63,
	  0x72, 0x69, 0x70, 0x74, 0x22, 0x20, 0x6e, 0x65, 0x76, 0x65, 0x72, 0x74, 0x68,
	  0x65, 0x6c, 0x65, 0x73, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x63,
	  0x61, 0x6e, 0x63, 0x65, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	  0x69, 0x6e, 0x67, 0x3e, 0x26, 0x6e, 0x62, 0x73, 0x70, 0x3b, 0x3c, 0x2f, 0x74,
	  0x64, 0x3e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x22, 0x3e,
	  0x0a, 0x73, 0x75, 0x63, 0x68, 0x20, 0x61, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20,
	  0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x6f, 0x66, 0x61,
	  0x20, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x73, 0x72,
	  0x63, 0x3d, 0x27, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6e, 0x61, 0x76,
	  0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x20, 0x68, 0x61, 0x6c, 0x66,
	  0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x75, 0x62, 0x73, 0x74,
	  0x61, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x20, 0x26, 0x6e, 0x62, 0x73, 0x70, 0x3b,
	  0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x74, 0x61,
	  0x67, 0x65, 0x20, 0x6f, 0x66, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	  0x79, 0x20, 0x6f, 0x66, 0x66, 0x75, 0x6e, 0x64, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	  0x61, 0x6c, 0x20, 0x6d, 0x65, 0x74, 0x72, 0x6f, 0x70, 0x6f, 0x6c, 0x69, 0x74,
	  0x61, 0x6e, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x70, 0x70, 0x6f, 0x73, 0x69, 0x74,
	  0x65, 0x22, 0x20, 0x78, 0x6d, 0x6c, 0x3a, 0x6c, 0x61, 0x6e, 0x67, 0x3d, 0x22,
	  0x64, 0x65, 0x6c, 0x69, 0x62, 0x65, 0x72, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x61,
	  0x6c, 0x69, 0x67, 0x6e, 0x3d, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x76,
	  0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x70, 0x72, 0x65,
	  0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6d, 0x70, 0x72,
	  0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x62, 0x65, 0x67, 0x69, 0x6e,
	  0x6e, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x4a, 0x65, 0x73, 0x75, 0x73, 0x20,
	  0x43, 0x68, 0x72, 0x69, 0x73, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61,
	  0x74, 0x69, 0x6f, 0x6e, 0x73, 0x64, 0x69, 0x73, 0x61, 0x67, 0x72, 0x65, 0x65,
	  0x6d, 0x65, 0x6e, 0x74, 0x74, 0x65, 0x78, 0x74, 0x2d, 0x61, 0x6c, 0x69, 0x67,
	  0x6e, 0x3a, 0x72, 0x2c, 0x20, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	  0x28, 0x29, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x69, 0x65,
	  0x73, 0x62, 0x6f, 0x64, 0x79, 0x3e, 0x3c, 0x2f, 0x68, 0x74, 0x6d, 0x6c, 0x3e,
	  0x69, 0x73, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x61,
	  0x6c, 0x70, 0x68, 0x61, 0x62, 0x65, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x73,
	  0x20, 0x73, 0x6f, 0x6d, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x79, 0x70,
	  0x65, 0x3d, 0x22, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2f, 0x6d, 0x61, 0x6e, 0x79,
	  0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x6c, 0x6f, 0x77, 0x3a,
	  0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x3b, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	  0x62, 0x6c, 0x65, 0x20, 0x69, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	  0x65, 0x20, 0x74, 0x68, 0x65, 0x65, 0x78, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63,
	  0x65, 0x20, 0x6f, 0x66, 0x61, 0x6c, 0x6c, 0x20, 0x6f, 0x76, 0x65, 0x72, 0x20,
	  0x74, 0x68, 0x65, 0x74, 0x68, 0x65, 0x20, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	  0x65, 0x74, 0x09, 0x3c, 0x75, 0x6c, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d,
	  0x22, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	  0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x68, 0x6f, 0x6f, 0x64, 0x61,
	  0x72, 0x6d, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x73, 0x72, 0x65,
	  0x64, 0x75, 0x63, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x63, 0x6f, 0x6e,
	  0x74, 0x69, 0x6e, 0x75, 0x65, 0x73, 0x20, 0x74, 0x6f, 0x4e, 0x6f, 0x6e, 0x65,
	  0x74, 0x68, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x2c, 0x74, 0x65, 0x6d, 0x70, 0x65,
	  0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x0a, 0x09, 0x09, 0x3c, 0x61, 0x20,
	  0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x20, 0x74,
	  0x6f, 0x20, 0x74, 0x68, 0x65, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	  0x20, 0x6f, 0x66, 0x20, 0x69, 0x73, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20,
	  0x74, 0x68, 0x65, 0x28, 0x73, 0x65, 0x65, 0x20, 0x62, 0x65, 0x6c, 0x6f, 0x77,
	  0x29, 0x2e, 0x22, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x73, 0x65, 0x61, 0x72, 0x63,
	  0x68, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	  0x69, 0x73, 0x20, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x74,
	  0x68, 0x65, 0x20, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x09, 0x09,
	  0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x0a, 0x0a, 0x09, 0x09,
	  0x3c, 0x64, 0x69, 0x76, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x61, 0x63, 0x63, 0x65,
	  0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x68, 0x72, 0x6f, 0x75,
	  0x67, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x48, 0x61, 0x6c, 0x6c, 0x20, 0x6f,
	  0x66, 0x20, 0x46, 0x61, 0x6d, 0x65, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	  0x74, 0x69, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74,
	  0x69, 0x6f, 0x6e, 0x73, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x65, 0x72, 0x65,
	  0x6e, 0x63, 0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x27, 0x74, 0x65, 0x78,
	  0x74, 0x2f, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x20, 0x79, 0x65, 0x61, 0x72,
	  0x73, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x77, 0x6f, 0x72, 0x6c, 0x64,
	  0x76, 0x65, 0x72, 0x79, 0x20, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x7b,
	  0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x3a, 0x74, 0x72,
	  0x61, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x73, 0x6f, 0x6d,
	  0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x6e,
	  0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x65, 0x78, 0x70, 0x6c, 0x6f,
	  0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x6d, 0x65, 0x72, 0x67, 0x65,
	  0x6e, 0x63, 0x65, 0x20, 0x6f, 0x66, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x69, 0x74,
	  0x75, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x20, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	  0x79, 0x20, 0x6f, 0x66, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61,
	  0x6e, 0x74, 0x20, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72,
	  0x65, 0x64, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	  0x73, 0x3e, 0x3c, 0x6e, 0x6f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x3c,
	  0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x62,
	  0x65, 0x63, 0x61, 0x75, 0x73, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x68, 0x61,
	  0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x6e, 0x65, 0x69,
	  0x67, 0x68, 0x62, 0x6f, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x77, 0x69, 0x74, 0x68,
	  0x6f, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x64, 0x64, 0x65, 0x64,
	  0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x09, 0x3c, 0x6c, 0x69, 0x20, 0x63,
	  0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	  0x65, 0x6e, 0x74, 0x61, 0x6c, 0x53, 0x6f, 0x76, 0x69, 0x65, 0x74, 0x20, 0x55,
	  0x6e, 0x69, 0x6f, 0x6e, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	  0x67, 0x65, 0x64, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x63, 0x61, 0x6e, 0x20,
	  0x62, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68,
	  0x65, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f,
	  0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x64,
	  0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x49, 0x6e,
	  0x20, 0x66, 0x61, 0x63, 0x74, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x3c, 0x6c, 0x69,
	  0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x61, 0x69, 0x6d, 0x70, 0x6c,
	  0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x73, 0x75, 0x69, 0x74, 0x61,
	  0x62, 0x6c, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x63, 0x68, 0x20, 0x6f,
	  0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x7a,
	  0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e,
	  0x74, 0x69, 0x61, 0x6c, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x75, 0x62,
	  0x62, 0x6c, 0x65, 0x20, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	  0x6f, 0x6e, 0x6d, 0x6f, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
	  0x20, 0x69, 0x73, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64,
	  0x72, 0x65, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d,
	  0x6f, 0x72, 0x65, 0x20, 0x6f, 0x72, 0x20, 0x6c, 0x65, 0x73, 0x73, 0x69, 0x6e,
	  0x20, 0x53, 0x65, 0x70, 0x74, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x74,
	  0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x72, 0x63, 0x3d,
	  0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x70, 0x78, 0x3b, 0x20, 0x68,
	  0x65, 0x69, 0x67, 0x68, 0x74, 0x3a, 0x20, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	  0x62, 0x6c, 0x65, 0x20, 0x74, 0x6f, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63,
	  0x74, 0x75, 0x72, 0x65, 0x72, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x20, 0x72, 0x69,
	  0x67, 0x68, 0x74, 0x73, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x68, 0x72, 0x65, 0x66,
	  0x3d, 0x22, 0x2f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69,
	  0x74, 0x79, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	  0x6c, 0x6f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20,
	  0x61, 0x73, 0x74, 0x72, 0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x61, 0x6c, 0x68,
	  0x75, 0x6d, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x73, 0x6e, 0x61,
	  0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x72, 0x65,
	  0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x69, 0x6e, 0x61, 0x72, 0x65, 0x20,
	  0x62, 0x61, 0x73, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x73, 0x6d, 0x61, 0x6c, 0x6c,
	  0x65, 0x72, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x61, 0x20, 0x70, 0x65, 0x72, 0x73,
	  0x6f, 0x6e, 0x20, 0x77, 0x68, 0x6f, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69,
	  0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x61, 0x72, 0x67, 0x75, 0x69, 0x6e, 0x67, 0x20,
	  0x74, 0x68, 0x61, 0x74, 0x6e, 0x6f, 0x77, 0x20, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	  0x20, 0x61, 0x73, 0x49, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x61, 0x72,
	  0x6c, 0x79, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74,
	  0x65, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d,
	  0x53, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x61, 0x76, 0x69, 0x61, 0x6e, 0x3c,
	  0x2f, 0x61, 0x3e, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0d, 0x0a, 0x63, 0x6f,
	  0x6e, 0x73, 0x69, 0x64, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x61, 0x6e, 0x20,
	  0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x74, 0x68, 0x65, 0x20,
	  0x4e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x3c, 0x64, 0x69, 0x76, 0x20,
	  0x69, 0x64, 0x3d, 0x22, 0x70, 0x61, 0x67, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	  0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	  0x69, 0x6f, 0x6e, 0x65, 0x64, 0x61, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x6f, 0x75,
	  0x73, 0x20, 0x74, 0x6f, 0x61, 0x72, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69,
	  0x72, 0x65, 0x64, 0x2f, 0x75, 0x6c, 0x3e, 0x0a, 0x3c, 0x2f, 0x64, 0x69, 0x76,
	  0x3e, 0x0a, 0x77, 0x61, 0x73, 0x20, 0x62, 0x61, 0x73, 0x65, 0x64, 0x20, 0x6f,
	  0x6e, 0x61, 0x6e, 0x64, 0x20, 0x62, 0x65, 0x63, 0x61, 0x6d, 0x65, 0x20, 0x61,
	  0x26, 0x6e, 0x62, 0x73, 0x70, 0x3b, 0x26, 0x6e, 0x62, 0x73, 0x70, 0x3b, 0x74,
	  0x22, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3d, 0x22, 0x22, 0x20, 0x77, 0x61,
	  0x73, 0x20, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x64, 0x6e, 0x6f, 0x20,
	  0x6d, 0x6f, 0x72, 0x65, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x72, 0x65, 0x73, 0x70,
	  0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6c, 0x79, 0x63, 0x6f, 0x6e, 0x74, 0x69,
	  0x6e, 0x75, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x3e, 0x0d, 0x0a, 0x3c, 0x68, 0x65,
	  0x61, 0x64, 0x3e, 0x0d, 0x0a, 0x3c, 0x77, 0x65, 0x72, 0x65, 0x20, 0x63, 0x72,
	  0x65, 0x61, 0x74, 0x65, 0x64, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x67, 0x65, 0x6e,
	  0x65, 0x72, 0x61, 0x6c, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	  0x6f, 0x6e, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74,
	  0x68, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74,
	  0x20, 0x74, 0x68, 0x65, 0x20, 0x49, 0x6d, 0x70, 0x65, 0x72, 0x69, 0x61, 0x6c,
	  0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x74,
	  0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x6f, 0x72, 0x74, 0x68, 0x69, 0x6e,
	  0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x43, 0x6f, 0x6e,
	  0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x69, 0x64, 0x65,
	  0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x77, 0x6f, 0x75, 0x6c, 0x64,
	  0x20, 0x6e, 0x6f, 0x74, 0x20, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x20, 0x69, 0x6e,
	  0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x69,
	  0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x63, 0x6f, 0x6d,
	  0x70, 0x6c, 0x65, 0x78, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76,
	  0x65, 0x6c, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	  0x3a, 0x20, 0x74, 0x65, 0x78, 0x74, 0x2d, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x3a,
	  0x20, 0x69, 0x74, 0x73, 0x20, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	  0x69, 0x6e, 0x74, 0x6f, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x74,
	  0x68, 0x69, 0x73, 0x20, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x61, 0x6e,
	  0x20, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x76, 0x65, 0x68, 0x6f, 0x77,
	  0x65, 0x76, 0x65, 0x72, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x74, 0x68, 0x65, 0x79,
	  0x20, 0x61, 0x72, 0x65, 0x20, 0x6e, 0x6f, 0x74, 0x72, 0x65, 0x6a, 0x65, 0x63,
	  0x74, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63,
	  0x69, 0x73, 0x6d, 0x20, 0x6f, 0x66, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x20,
	  0x77, 0x68, 0x69, 0x63, 0x68, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x6c, 0x79,
	  0x20, 0x74, 0x68, 0x65, 0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x72, 0x74, 0x69,
	  0x63, 0x6c, 0x65, 0x28, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x28,
	  0x29, 0x7b, 0x49, 0x74, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62,
	  0x65, 0x61, 0x6e, 0x20, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	  0x61, 0x63, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x6c, 0x79, 0x64,
	  0x69, 0x66, 0x66, 0x65, 0x72, 0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x72,
	  0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x62, 0x65, 0x74,
	  0x74, 0x65, 0x72, 0x20, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x61, 0x72, 0x72, 0x61,
	  0x6e, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x69, 0x6e, 0x66, 0x6c, 0x75,
	  0x65, 0x6e, 0x63, 0x65, 0x20, 0x6f, 0x6e, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x64,
	  0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x63,
	  0x61, 0x6c, 0x20, 0x74, 0x6f, 0x73, 0x6f, 0x75, 0x74, 0x68, 0x20, 0x6f, 0x66,
	  0x20, 0x74, 0x68, 0x65, 0x70, 0x61, 0x73, 0x73, 0x20, 0x74, 0x68, 0x72, 0x6f,
	  0x75, 0x67, 0x68, 0x78, 0x6d, 0x6c, 0x22, 0x20, 0x74, 0x69, 0x74, 0x6c, 0x65,
	  0x3d, 0x22, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3a, 0x62, 0x6f, 0x6c, 0x64,
	  0x3b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65,
	  0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x3a, 0x6e, 0x6f, 0x6e, 0x65, 0x72,
	  0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x3c, 0x69,
	  0x6d, 0x67, 0x20, 0x73, 0x72, 0x63, 0x3d, 0x22, 0x2f, 0x69, 0x68, 0x74, 0x74,
	  0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x57, 0x6f, 0x72, 0x6c,
	  0x64, 0x20, 0x57, 0x61, 0x72, 0x20, 0x49, 0x49, 0x74, 0x65, 0x73, 0x74, 0x69,
	  0x6d, 0x6f, 0x6e, 0x69, 0x61, 0x6c, 0x73, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x20,
	  0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	  0x64, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x74, 0x68, 0x61, 0x74,
	  0x20, 0x74, 0x68, 0x65, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x20, 0x74,
	  0x68, 0x65, 0x20, 0x77, 0x61, 0x73, 0x20, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e,
	  0x65, 0x64, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x73, 0x20, 0x6f, 0x66,
	  0x20, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x79,
	  0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x20, 0x62, 0x79, 0x74,
	  0x68, 0x65, 0x20, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f,
	  0x6e, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x63, 0x6f, 0x6e,
	  0x73, 0x69, 0x73, 0x74, 0x65, 0x64, 0x20, 0x6f, 0x66, 0x72, 0x65, 0x66, 0x65,
	  0x72, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x62, 0x61, 0x63, 0x6b, 0x20,
	  0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x73, 0x73, 0x22, 0x20, 0x6d,
	  0x65, 0x64, 0x69, 0x61, 0x3d, 0x22, 0x50, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x20,
	  0x66, 0x72, 0x6f, 0x6d, 0x20, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	  0x65, 0x20, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x20, 0x74, 0x6f,
	  0x20, 0x62, 0x65, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	  0x73, 0x22, 0x77, 0x61, 0x73, 0x20, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x20, 0x61,
	  0x73, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x69, 0x65, 0x73, 0x20, 0x6f, 0x66,
	  0x6c, 0x69, 0x6b, 0x65, 0x6c, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x63,
	  0x6f, 0x6d, 0x70, 0x72, 0x69, 0x73, 0x65, 0x64, 0x20, 0x6f, 0x66, 0x73, 0x75,
	  0x70, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x68, 0x61, 0x6e,
	  0x64, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x63, 0x6f, 0x75, 0x70,
	  0x6c, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	  0x63, 0x74, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72,
	  0x3a, 0x6e, 0x6f, 0x6e, 0x65, 0x3b, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	  0x61, 0x6e, 0x63, 0x65, 0x73, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x20, 0x62,
	  0x65, 0x69, 0x6e, 0x67, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x20, 0x62, 0x65, 0x63,
	  0x61, 0x6d, 0x65, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	  0x6e, 0x73, 0x6f, 0x66, 0x74, 0x65, 0x6e, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x65,
	  0x64, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x6f, 0x66,
	  0x6d, 0x65, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x61, 0x74, 0x3e,
	  0x3c, 0x6c, 0x69, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x65, 0x76,
	  0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x65, 0x78, 0x70,
	  0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x76, 0x69,
	  0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x3e, 0x3c, 0x2f, 0x61,
	  0x3e, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20,
	  0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75,
	  0x63, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65,
	  0x64, 0x20, 0x62, 0x79, 0x61, 0x20, 0x77, 0x69, 0x64, 0x65, 0x20, 0x72, 0x61,
	  0x6e, 0x67, 0x65, 0x6f, 0x6e, 0x20, 0x62, 0x65, 0x68, 0x61, 0x6c, 0x66, 0x20,
	  0x6f, 0x66, 0x76, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x3d, 0x22, 0x74, 0x6f, 0x70,
	  0x22, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x6c, 0x65, 0x20, 0x6f, 0x66,
	  0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x2c, 0x3c,
	  0x2f, 0x6e, 0x6f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x0d, 0x73, 0x61,
	  0x69, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x68, 0x61, 0x76, 0x65, 0x69, 0x6e, 0x20,
	  0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x77, 0x68, 0x69, 0x6c,
	  0x65, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x73, 0x68, 0x79, 0x70, 0x6f, 0x74,
	  0x68, 0x65, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x70, 0x68, 0x69, 0x6c, 0x6f, 0x73,
	  0x6f, 0x70, 0x68, 0x65, 0x72, 0x73, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x20, 0x6f,
	  0x66, 0x20, 0x74, 0x68, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	  0x64, 0x20, 0x69, 0x6e, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64,
	  0x20, 0x62, 0x79, 0x69, 0x6e, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x20,
	  0x74, 0x6f, 0x77, 0x65, 0x72, 0x65, 0x20, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65,
	  0x6e, 0x73, 0x70, 0x61, 0x6e, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22,
	  0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x22, 0x74,
	  0x68, 0x65, 0x20, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e,
	  0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x72, 0x65, 0x6a,
	  0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x69, 0x6d, 0x70, 0x6c,
	  0x69, 0x65, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	  0x74, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x74, 0x68, 0x65, 0x20, 0x73, 0x74,
	  0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x77, 0x61, 0x73, 0x20, 0x70, 0x72, 0x6f,
	  0x62, 0x61, 0x62, 0x6c, 0x79, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x62, 0x65, 0x74,
	  0x77, 0x65, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x6f, 0x72,
	  0x20, 0x6f, 0x66, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f,
	  0x6e, 0x73, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68,
	  0x65, 0x49, 0x6e, 0x64, 0x69, 0x61, 0x6e, 0x20, 0x4f, 0x63, 0x65, 0x61, 0x6e,
	  0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x6c, 0x61, 0x73, 0x74, 0x77,
	  0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x20, 0x77, 0x69, 0x74, 0x68, 0x27, 0x68,
	  0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x79, 0x65, 0x61,
	  0x72, 0x73, 0x20, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x54, 0x68, 0x69, 0x73,
	  0x20, 0x77, 0x61, 0x73, 0x20, 0x74, 0x68, 0x65, 0x72, 0x65, 0x63, 0x72, 0x65,
	  0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x69,
	  0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	  0x6d, 0x65, 0x6e, 0x74, 0x73, 0x61, 0x6e, 0x20, 0x65, 0x78, 0x74, 0x72, 0x65,
	  0x6d, 0x65, 0x6c, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x6f, 0x66, 0x20,
	  0x74, 0x68, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74,
	  0x68, 0x65, 0x0a, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x0a,
	  0x0a, 0x61, 0x6e, 0x20, 0x65, 0x66, 0x66, 0x6f, 0x72, 0x74, 0x20, 0x74, 0x6f,
	  0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x20, 0x74, 0x68, 0x65, 0x74,
	  0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x6f, 0x75, 0x74, 0x68, 0x73, 0x70,
	  0x61, 0x63, 0x69, 0x6e, 0x67, 0x3d, 0x22, 0x30, 0x22, 0x3e, 0x73, 0x75, 0x66,
	  0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x74, 0x68, 0x65, 0x20,
	  0x45, 0x75, 0x72, 0x6f, 0x70, 0x65, 0x61, 0x6e, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	  0x72, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x54,
	  0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x64, 0x69, 0x64, 0x20, 0x6e, 0x6f, 0x74,
	  0x20, 0x68, 0x61, 0x76, 0x65, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x71, 0x75, 0x65,
	  0x6e, 0x74, 0x6c, 0x79, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e,
	  0x65, 0x78, 0x74, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x20,
	  0x6f, 0x66, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x20, 0x61, 0x6e,
	  0x64, 0x61, 0x6c, 0x74, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x20, 0x74, 0x68, 0x65,
	  0x61, 0x72, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x64, 0x61,
	  0x6e, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x69, 0x6e,
	  0x73, 0x75, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x67, 0x69, 0x76,
	  0x65, 0x6e, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x73, 0x74, 0x61, 0x74,
	  0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x61, 0x74, 0x65, 0x78, 0x70, 0x65, 0x6e,
	  0x64, 0x69, 0x74, 0x75, 0x72, 0x65, 0x73, 0x3c, 0x2f, 0x73, 0x70, 0x61, 0x6e,
	  0x3e, 0x3c, 0x2f, 0x61, 0x3e, 0x0a, 0x74, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x74,
	  0x20, 0x74, 0x68, 0x61, 0x74, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x62,
	  0x61, 0x73, 0x69, 0x73, 0x63, 0x65, 0x6c, 0x6c, 0x70, 0x61, 0x64, 0x64, 0x69,
	  0x6e, 0x67, 0x3d, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74,
	  0x68, 0x65, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x74,
	  0x6f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c,
	  0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x61,
	  0x73, 0x73, 0x61, 0x73, 0x73, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x73, 0x22,
	  0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x3d, 0x22, 0x61, 0x75, 0x74,
	  0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x20, 0x6f, 0x66, 0x6e, 0x6f, 0x72, 0x74,
	  0x68, 0x77, 0x65, 0x73, 0x74, 0x65, 0x72, 0x6e, 0x3c, 0x2f, 0x64, 0x69, 0x76,
	  0x3e, 0x0a, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x22, 0x3e, 0x3c, 0x2f, 0x64, 0x69,
	  0x76, 0x3e, 0x0d, 0x0a, 0x20, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74,
	  0x61, 0x74, 0x69, 0x6f, 0x6e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	  0x79, 0x20, 0x6f, 0x66, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	  0x6e, 0x61, 0x6c, 0x69, 0x74, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20,
	  0x62, 0x65, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	  0x73, 0x20, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x3d, 0x22, 0x6c, 0x65, 0x66, 0x74,
	  0x74, 0x68, 0x65, 0x20, 0x67, 0x72, 0x65, 0x61, 0x74, 0x65, 0x73, 0x74, 0x73,
	  0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x73, 0x75,
	  0x70, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x64, 0x65, 0x70,
	  0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x20, 0x6f, 0x6e, 0x69, 0x73, 0x20, 0x6d,
	  0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	  0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x77, 0x61, 0x73, 0x20, 0x69, 0x6e,
	  0x76, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	  0x6e, 0x79, 0x69, 0x6e, 0x67, 0x68, 0x69, 0x73, 0x20, 0x70, 0x65, 0x72, 0x73,
	  0x6f, 0x6e, 0x61, 0x6c, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	  0x20, 0x61, 0x74, 0x73, 0x74, 0x75, 0x64, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x74,
	  0x68, 0x65, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x74, 0x68, 0x65,
	  0x72, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66,
	  0x48, 0x75, 0x6d, 0x61, 0x6e, 0x20, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x74,
	  0x65, 0x72, 0x6d, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x61, 0x73,
	  0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x72, 0x65, 0x73,
	  0x65, 0x61, 0x72, 0x63, 0x68, 0x20, 0x61, 0x6e, 0x64, 0x73, 0x75, 0x63, 0x63,
	  0x65, 0x65, 0x64, 0x65, 0x64, 0x20, 0x62, 0x79, 0x64, 0x65, 0x66, 0x65, 0x61,
	  0x74, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x61, 0x6e, 0x64, 0x20, 0x66, 0x72,
	  0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x62, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65,
	  0x79, 0x20, 0x61, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65,
	  0x72, 0x20, 0x6f, 0x66, 0x73, 0x74, 0x61, 0x74, 0x65, 0x20, 0x6f, 0x66, 0x20,
	  0x74, 0x68, 0x65, 0x79, 0x65, 0x61, 0x72, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x61,
	  0x67, 0x65, 0x74, 0x68, 0x65, 0x20, 0x73, 0x74, 0x75, 0x64, 0x79, 0x20, 0x6f,
	  0x66, 0x3c, 0x75, 0x6c, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x73,
	  0x70, 0x6c, 0x61, 0x63, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x77,
	  0x68, 0x65, 0x72, 0x65, 0x20, 0x68, 0x65, 0x20, 0x77, 0x61, 0x73, 0x3c, 0x6c,
	  0x69, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x66, 0x74, 0x68, 0x65,
	  0x72, 0x65, 0x20, 0x61, 0x72, 0x65, 0x20, 0x6e, 0x6f, 0x77, 0x68, 0x69, 0x63,
	  0x68, 0x20, 0x62, 0x65, 0x63, 0x61, 0x6d, 0x65, 0x68, 0x65, 0x20, 0x70, 0x75,
	  0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73,
	  0x73, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x74, 0x6f, 0x20, 0x77, 0x68, 0x69, 0x63,
	  0x68, 0x20, 0x74, 0x68, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	  0x6f, 0x6e, 0x65, 0x72, 0x66, 0x6f, 0x6e, 0x74, 0x2d, 0x77, 0x65, 0x69, 0x67,
	  0x68, 0x74, 0x3a, 0x74, 0x65, 0x72, 0x72, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x20,
	  0x6f, 0x66, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	  0x3e, 0x52, 0x6f, 0x6d, 0x61, 0x6e, 0x20, 0x45, 0x6d, 0x70, 0x69, 0x72, 0x65,
	  0x65, 0x71, 0x75, 0x61, 0x6c, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x49,
	  0x6e, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x73, 0x74, 0x2c, 0x68, 0x6f,
	  0x77, 0x65, 0x76, 0x65, 0x72, 0x2c, 0x20, 0x61, 0x6e, 0x64, 0x69, 0x73, 0x20,
	  0x74, 0x79, 0x70, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x61, 0x6e, 0x64, 0x20,
	  0x68, 0x69, 0x73, 0x20, 0x77, 0x69, 0x66, 0x65, 0x28, 0x61, 0x6c, 0x73, 0x6f,
	  0x20, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x3e, 0x3c, 0x75, 0x6c, 0x20, 0x63,
	  0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69,
	  0x76, 0x65, 0x6c, 0x79, 0x20, 0x65, 0x76, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x20,
	  0x69, 0x6e, 0x74, 0x6f, 0x73, 0x65, 0x65, 0x6d, 0x20, 0x74, 0x6f, 0x20, 0x68,
	  0x61, 0x76, 0x65, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x69, 0x73, 0x20, 0x74,
	  0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x20, 0x77, 0x61, 0x73, 0x20, 0x6e,
	  0x6f, 0x61, 0x6e, 0x20, 0x65, 0x78, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x6e, 0x74,
	  0x61, 0x6c, 0x6c, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x73, 0x65, 0x64,
	  0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x20, 0x62, 0x79, 0x49, 0x6e,
	  0x20, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x2c, 0x62, 0x72, 0x6f,
	  0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x63, 0x68, 0x61, 0x72,
	  0x67, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x72, 0x65, 0x66, 0x6c, 0x65,
	  0x63, 0x74, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	  0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x6d, 0x69, 0x6c, 0x69, 0x74, 0x61, 0x72,
	  0x79, 0x20, 0x61, 0x6e, 0x64, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70,
	  0x6f, 0x69, 0x6e, 0x74, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x61,
	  0x6c, 0x6c, 0x79, 0x73, 0x65, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x69,
	  0x6e, 0x67, 0x61, 0x72, 0x65, 0x20, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x6c,
	  0x79, 0x76, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x6f, 0x76, 0x65, 0x72,
	  0x28, 0x29, 0x3b, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x63,
	  0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x6c, 0x79, 0x72, 0x65,
	  0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x65, 0x76, 0x6f,
	  0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x61, 0x6e, 0x20, 0x65,
	  0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6e, 0x6f, 0x72, 0x74, 0x68,
	  0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x2c, 0x20, 0x77, 0x68, 0x69, 0x63,
	  0x68, 0x20, 0x77, 0x61, 0x73, 0x20, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x20, 0x6f,
	  0x66, 0x20, 0x74, 0x68, 0x65, 0x6f, 0x72, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72,
	  0x77, 0x69, 0x73, 0x65, 0x73, 0x6f, 0x6d, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x6d,
	  0x20, 0x6f, 0x66, 0x68, 0x61, 0x64, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x62, 0x65,
	  0x65, 0x6e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x20, 0x62,
	  0x79, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	  0x70, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x69,
	  0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x64, 0x65,
	  0x76, 0x65, 0x6c, 0x6f, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2c, 0x65, 0x6e, 0x74,
	  0x65, 0x72, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x74, 0x6f, 0x74, 0x68, 0x65, 0x20,
	  0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x63, 0x6f, 0x6e, 0x73, 0x69,
	  0x73, 0x74, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x61, 0x72, 0x65, 0x20, 0x6b, 0x6e,
	  0x6f, 0x77, 0x6e, 0x20, 0x61, 0x73, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x65,
	  0x6c, 0x64, 0x20, 0x6f, 0x66, 0x74, 0x68, 0x69, 0x73, 0x20, 0x74, 0x79, 0x70,
	  0x65, 0x20, 0x6f, 0x66, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x74, 0x6f, 0x20,
	  0x74, 0x68, 0x65, 0x74, 0x68, 0x65, 0x20, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x20,
	  0x6f, 0x66, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x20, 0x74, 0x68,
	  0x65, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x20, 0x6f, 0x66,
	  0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x6f, 0x72, 0x74, 0x68, 0x64,
	  0x75, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x69, 0x72, 0x61, 0x72,
	  0x65, 0x20, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x63, 0x6f, 0x72,
	  0x70, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x77, 0x61, 0x73, 0x20,
	  0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x6f, 0x6e, 0x65, 0x20, 0x6f,
	  0x66, 0x20, 0x74, 0x68, 0x65, 0x73, 0x65, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x70,
	  0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64,
	  0x65, 0x64, 0x20, 0x69, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x20,
	  0x66, 0x72, 0x6f, 0x6d, 0x69, 0x6e, 0x20, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72,
	  0x65, 0x6e, 0x74, 0x64, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x20,
	  0x62, 0x79, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x20, 0x66, 0x6f,
	  0x72, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x20, 0x6f, 0x66,
	  0x61, 0x6e, 0x64, 0x20, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x79, 0x73,
	  0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x69, 0x7a, 0x65, 0x64, 0x72, 0x65,
	  0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x65, 0x78, 0x74, 0x77, 0x61, 0x73,
	  0x20, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x72, 0x65, 0x63, 0x65,
	  0x69, 0x76, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x61, 0x73, 0x73, 0x75, 0x6d,
	  0x65, 0x64, 0x20, 0x74, 0x68, 0x61, 0x74, 0x61, 0x72, 0x65, 0x61, 0x73, 0x20,
	  0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x69,
	  0x6c, 0x79, 0x20, 0x69, 0x6e, 0x74, 0x68, 0x65, 0x20, 0x62, 0x61, 0x73, 0x69,
	  0x73, 0x20, 0x6f, 0x66, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65,
	  0x6e, 0x73, 0x65, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x20, 0x66,
	  0x6f, 0x72, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x65, 0x64, 0x20, 0x62,
	  0x79, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x61, 0x73, 0x74, 0x20, 0x74, 0x77, 0x6f,
	  0x77, 0x61, 0x73, 0x20, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x64, 0x63,
	  0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x62, 0x65, 0x53, 0x65,
	  0x63, 0x72, 0x65, 0x74, 0x61, 0x72, 0x79, 0x20, 0x6f, 0x66, 0x61, 0x70, 0x70,
	  0x65, 0x61, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x6d, 0x61, 0x72, 0x67,
	  0x69, 0x6e, 0x2d, 0x74, 0x6f, 0x70, 0x3a, 0x31, 0x2f, 0x5e, 0x5c, 0x73, 0x2b,
	  0x7c, 0x5c, 0x73, 0x2b, 0x24, 0x2f, 0x67, 0x65, 0x29, 0x7b, 0x74, 0x68, 0x72,
	  0x6f, 0x77, 0x20, 0x65, 0x7d, 0x3b, 0x74, 0x68, 0x65, 0x20, 0x73, 0x74, 0x61,
	  0x72, 0x74, 0x20, 0x6f, 0x66, 0x74, 0x77, 0x6f, 0x20, 0x73, 0x65, 0x70, 0x61,
	  0x72, 0x61, 0x74, 0x65, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x20,
	  0x61, 0x6e, 0x64, 0x77, 0x68, 0x6f, 0x20, 0x68, 0x61, 0x64, 0x20, 0x62, 0x65,
	  0x65, 0x6e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f,
	  0x66, 0x64, 0x65, 0x61, 0x74, 0x68, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
	  0x72, 0x65, 0x61, 0x6c, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x09,
	  0x3c, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x72, 0x65, 0x6c, 0x3d, 0x22, 0x70, 0x72,
	  0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x74, 0x68, 0x65,
	  0x20, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x6f, 0x66, 0x63, 0x6f, 0x6d, 0x70,
	  0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x67, 0x6c, 0x69,
	  0x73, 0x68, 0x20, 0x28, 0x55, 0x4b, 0x29, 0x65, 0x6e, 0x67, 0x6c, 0x69, 0x73,
	  0x68, 0x20, 0x28, 0x55, 0x53, 0x29, 0xd0, 0x9c, 0xd0, 0xbe, 0xd0, 0xbd, 0xd0,
	  0xb3, 0xd0, 0xbe, 0xd0, 0xbb, 0xd0, 0xa1, 0xd1, 0x80, 0xd0, 0xbf, 0xd1, 0x81,
	  0xd0, 0xba, 0xd0, 0xb8, 0xd1, 0x81, 0xd1, 0x80, 0xd0, 0xbf, 0xd1, 0x81, 0xd0,
	  0xba, 0xd0, 0xb8, 0xd1, 0x81, 0xd1, 0x80, 0xd0, 0xbf, 0xd1, 0x81, 0xd0, 0xba,
	  0xd0, 0xbe, 0xd9, 0x84, 0xd8, 0xb9, 0xd8, 0xb1, 0xd8, 0xa8, 0xd9, 0x8a, 0xd8,
	  0xa9, 0xe6, 0xad, 0xa3, 0xe9, 0xab, 0x94, 0xe4, 0xb8, 0xad, 0xe6, 0x96, 0x87,
	  0xe7, 0xae, 0x80, 0xe4, 0xbd, 0x93, 0xe4, 0xb8, 0xad, 0xe6, 0x96, 0x87, 0xe7,
	  0xb9, 0x81, 0xe4, 0xbd, 0x93, 0xe4, 0xb8, 0xad, 0xe6, 0x96, 0x87, 0xe6, 0x9c,
	  0x89, 0xe9, 0x99, 0x90, 0xe5, 0x85, 0xac, 0xe5, 0x8f, 0xb8, 0xe4, 0xba, 0xba,
	  0xe6, 0xb0, 0x91, 0xe6, 0x94, 0xbf, 0xe5, 0xba, 0x9c, 0xe9, 0x98, 0xbf, 0xe9,
	  0x87, 0x8c, 0xe5, 0xb7, 0xb4, 0xe5, 0xb7, 0xb4, 0xe7, 0xa4, 0xbe, 0xe4, 0xbc,
	  0x9a, 0xe4, 0xb8, 0xbb, 0xe4, 0xb9, 0x89, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c,
	  0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0xe6, 0x94, 0xbf, 0xe7, 0xad, 0x96, 0xe6,
	  0xb3, 0x95, 0xe8, 0xa7, 0x84, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x63,
	  0x69, 0xc3, 0xb3, 0x6e, 0x68, 0x65, 0x72, 0x72, 0x61, 0x6d, 0x69, 0x65, 0x6e,
	  0x74, 0x61, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0xc3, 0xb3, 0x6e, 0x69,
	  0x63, 0x6f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x63, 0x69, 0xc3, 0xb3,
	  0x6e, 0x63, 0x6c, 0x61, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x64, 0x6f, 0x73,
	  0x63, 0x6f, 0x6e, 0x6f, 0x63, 0x69, 0x6d, 0x69, 0x65, 0x6e, 0x74, 0x6f, 0x70,
	  0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x72, 0x65,
	  0x6c, 0x61, 0x63, 0x69, 0x6f, 0x6e, 0x61, 0x64, 0x61, 0x73, 0x69, 0x6e, 0x66,
	  0x6f, 0x72, 0x6d, 0xc3, 0xa1, 0x74, 0x69, 0x63, 0x61, 0x72, 0x65, 0x6c, 0x61,
	  0x63, 0x69, 0x6f, 0x6e, 0x61, 0x64, 0x6f, 0x73, 0x64, 0x65, 0x70, 0x61, 0x72,
	  0x74, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x6f, 0x74, 0x72, 0x61, 0x62, 0x61, 0x6a,
	  0x61, 0x64, 0x6f, 0x72, 0x65, 0x73, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x61,
	  0x6d, 0x65, 0x6e, 0x74, 0x65, 0x61, 0x79, 0x75, 0x6e, 0x74, 0x61, 0x6d, 0x69,
	  0x65, 0x6e, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x63, 0x61, 0x64, 0x6f, 0x4c, 0x69,
	  0x62, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0xc3, 0xa1, 0x63, 0x74, 0x65, 0x6e,
	  0x6f, 0x73, 0x68, 0x61, 0x62, 0x69, 0x74, 0x61, 0x63, 0x69, 0x6f, 0x6e, 0x65,
	  0x73, 0x63, 0x75, 0x6d, 0x70, 0x6c, 0x69, 0x6d, 0x69, 0x65, 0x6e, 0x74, 0x6f,
	  0x72, 0x65, 0x73, 0x74, 0x61, 0x75, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x73, 0x64,
	  0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x63, 0x6f,
	  0x6e, 0x73, 0x65, 0x63, 0x75, 0x65, 0x6e, 0x63, 0x69, 0x61, 0x65, 0x6c, 0x65,
	  0x63, 0x74, 0x72, 0xc3, 0xb3, 0x6e, 0x69, 0x63, 0x61, 0x61, 0x70, 0x6c, 0x69,
	  0x63, 0x61, 0x63, 0x69, 0x6f, 0x6e, 0x65, 0x73, 0x64, 0x65, 0x73, 0x63, 0x6f,
	  0x6e, 0x65, 0x63, 0x74, 0x61, 0x64, 0x6f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	  0x61, 0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x7a, 0x61,
	  0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x63,
	  0x69, 0xc3, 0xb3, 0x6e, 0x65, 0x6e, 0x63, 0x69, 0x63, 0x6c, 0x6f, 0x70, 0x65,
	  0x64, 0x69, 0x61, 0x65, 0x6e, 0x66, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x61, 0x64,
	  0x65, 0x73, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x6f,
	  0x73, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x69, 0x61, 0x73,
	  0x69, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x70,
	  0x61, 0x72, 0x74, 0x69, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x65, 0x73, 0x73, 0x75,
	  0x62, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x61, 0xd1, 0x82, 0xd0,
	  0xbe, 0xd0, 0xbb, 0xd1, 0x8c, 0xd0, 0xba, 0xd0, 0xbe, 0xd0, 0xa0, 0xd0, 0xbe,
	  0xd1, 0x81, 0xd1, 0x81, 0xd0, 0xb8, 0xd0, 0xb8, 0xd1, 0x80, 0xd0, 0xb0, 0xd0,
	  0xb1, 0xd0, 0xbe, 0xd1, 0x82, 0xd1, 0x8b, 0xd0, 0xb1, 0xd0, 0xbe, 0xd0, 0xbb,
	  0xd1, 0x8c, 0xd1, 0x88, 0xd0, 0xb5, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xbe, 0xd1,
	  0x81, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xbc, 0xd0, 0xbe, 0xd0, 0xb6, 0xd0, 0xb5,
	  0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xb4, 0xd1, 0x80, 0xd1, 0x83, 0xd0, 0xb3, 0xd0,
	  0xb8, 0xd1, 0x85, 0xd1, 0x81, 0xd0, 0xbb, 0xd1, 0x83, 0xd1, 0x87, 0xd0, 0xb0,
	  0xd0, 0xb5, 0xd1, 0x81, 0xd0, 0xb5, 0xd0, 0xb9, 0xd1, 0x87, 0xd0, 0xb0, 0xd1,
	  0x81, 0xd0, 0xb2, 0xd1, 0x81, 0xd0, 0xb5, 0xd0, 0xb3, 0xd0, 0xb4, 0xd0, 0xb0,
	  0xd0, 0xa0, 0xd0, 0xbe, 0xd1, 0x81, 0xd1, 0x81, 0xd0, 0xb8, 0xd1, 0x8f, 0xd0,
	  0x9c, 0xd0, 0xbe, 0xd1, 0x81, 0xd0, 0xba, 0xd0, 0xb2, 0xd0, 0xb5, 0xd0, 0xb4,
	  0xd1, 0x80, 0xd1, 0x83, 0xd0, 0xb3, 0xd0, 0xb8, 0xd0, 0xb5, 0xd0, 0xb3, 0xd0,
	  0xbe, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xb0, 0xd0, 0xb2, 0xd0, 0xbe,
	  0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xbe, 0xd1, 0x81, 0xd0, 0xb4, 0xd0, 0xb0, 0xd0,
	  0xbd, 0xd0, 0xbd, 0xd1, 0x8b, 0xd1, 0x85, 0xd0, 0xb4, 0xd0, 0xbe, 0xd0, 0xbb,
	  0xd0, 0xb6, 0xd0, 0xbd, 0xd1, 0x8b, 0xd0, 0xb8, 0xd0, 0xbc, 0xd0, 0xb5, 0xd0,
	  0xbd, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0x9c, 0xd0, 0xbe, 0xd1, 0x81, 0xd0, 0xba,
	  0xd0, 0xb2, 0xd1, 0x8b, 0xd1, 0x80, 0xd1, 0x83, 0xd0, 0xb1, 0xd0, 0xbb, 0xd0,
	  0xb5, 0xd0, 0xb9, 0xd0, 0x9c, 0xd0, 0xbe, 0xd1, 0x81, 0xd0, 0xba, 0xd0, 0xb2,
	  0xd0, 0xb0, 0xd1, 0x81, 0xd1, 0x82, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xbd, 0xd1,
	  0x8b, 0xd0, 0xbd, 0xd0, 0xb8, 0xd1, 0x87, 0xd0, 0xb5, 0xd0, 0xb3, 0xd0, 0xbe,
	  0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xb1, 0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xb5, 0xd0,
	  0xb4, 0xd0, 0xbe, 0xd0, 0xbb, 0xd0, 0xb6, 0xd0, 0xb5, 0xd0, 0xbd, 0xd1, 0x83,
	  0xd1, 0x81, 0xd0, 0xbb, 0xd1, 0x83, 0xd0, 0xb3, 0xd0, 0xb8, 0xd1, 0x82, 0xd0,
	  0xb5, 0xd0, 0xbf, 0xd0, 0xb5, 0xd1, 0x80, 0xd1, 0x8c, 0xd0, 0x9e, 0xd0, 0xb4,
	  0xd0, 0xbd, 0xd0, 0xb0, 0xd0, 0xba, 0xd0, 0xbe, 0xd0, 0xbf, 0xd0, 0xbe, 0xd1,
	  0x82, 0xd0, 0xbe, 0xd0, 0xbc, 0xd1, 0x83, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xb1,
	  0xd0, 0xbe, 0xd1, 0x82, 0xd1, 0x83, 0xd0, 0xb0, 0xd0, 0xbf, 0xd1, 0x80, 0xd0,
	  0xb5, 0xd0, 0xbb, 0xd1, 0x8f, 0xd0, 0xb2, 0xd0, 0xbe, 0xd0, 0xbe, 0xd0, 0xb1,
	  0xd1, 0x89, 0xd0, 0xb5, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0,
	  0xb3, 0xd0, 0xbe, 0xd1, 0x81, 0xd0, 0xb2, 0xd0, 0xbe, 0xd0, 0xb5, 0xd0, 0xb3,
	  0xd0, 0xbe, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb0, 0xd1, 0x82, 0xd1, 0x8c, 0xd0,
	  0xb8, 0xd0, 0xb4, 0xd1, 0x80, 0xd1, 0x83, 0xd0, 0xb3, 0xd0, 0xbe, 0xd0, 0xb9,
	  0xd1, 0x84, 0xd0, 0xbe, 0xd1, 0x80, 0xd1, 0x83, 0xd0, 0xbc, 0xd0, 0xb5, 0xd1,
	  0x85, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xbe, 0xd1, 0x88, 0xd0, 0xbe, 0xd0, 0xbf,
	  0xd1, 0x80, 0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xb8, 0xd0, 0xb2, 0xd1, 0x81, 0xd1,
	  0x81, 0xd1, 0x8b, 0xd0, 0xbb, 0xd0, 0xba, 0xd0, 0xb0, 0xd0, 0xba, 0xd0, 0xb0,
	  0xd0, 0xb6, 0xd0, 0xb4, 0xd1, 0x8b, 0xd0, 0xb9, 0xd0, 0xb2, 0xd0, 0xbb, 0xd0,
	  0xb0, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb8, 0xd0, 0xb3, 0xd1, 0x80, 0xd1, 0x83,
	  0xd0, 0xbf, 0xd0, 0xbf, 0xd1, 0x8b, 0xd0, 0xb2, 0xd0, 0xbc, 0xd0, 0xb5, 0xd1,
	  0x81, 0xd1, 0x82, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xb1, 0xd0, 0xbe,
	  0xd1, 0x82, 0xd0, 0xb0, 0xd1, 0x81, 0xd0, 0xba, 0xd0, 0xb0, 0xd0, 0xb7, 0xd0,
	  0xb0, 0xd0, 0xbb, 0xd0, 0xbf, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb2, 0xd1, 0x8b,
	  0xd0, 0xb9, 0xd0, 0xb4, 0xd0, 0xb5, 0xd0, 0xbb, 0xd0, 0xb0, 0xd1, 0x82, 0xd1,
	  0x8c, 0xd0, 0xb4, 0xd0, 0xb5, 0xd0, 0xbd, 0xd1, 0x8c, 0xd0, 0xb3, 0xd0, 0xb8,
	  0xd0, 0xbf, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb8, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0,
	  0xb1, 0xd0, 0xb8, 0xd0, 0xb7, 0xd0, 0xbd, 0xd0, 0xb5, 0xd1, 0x81, 0xd0, 0xbe,
	  0xd1, 0x81, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xb5, 0xd0, 0xbc, 0xd0,
	  0xbe, 0xd0, 0xbc, 0xd0, 0xb5, 0xd0, 0xbd, 0xd1, 0x82, 0xd0, 0xba, 0xd1, 0x83,
	  0xd0, 0xbf, 0xd0, 0xb8, 0xd1, 0x82, 0xd1, 0x8c, 0xd0, 0xb4, 0xd0, 0xbe, 0xd0,
	  0xbb, 0xd0, 0xb6, 0xd0, 0xbd, 0xd0, 0xb0, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xbc,
	  0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x85, 0xd0, 0xbd, 0xd0, 0xb0, 0xd1, 0x87, 0xd0,
	  0xb0, 0xd0, 0xbb, 0xd0, 0xbe, 0xd0, 0xa0, 0xd0, 0xb0, 0xd0, 0xb1, 0xd0, 0xbe,
	  0xd1, 0x82, 0xd0, 0xb0, 0xd0, 0xa2, 0xd0, 0xbe, 0xd0, 0xbb, 0xd1, 0x8c, 0xd0,
	  0xba, 0xd0, 0xbe, 0xd1, 0x81, 0xd0, 0xbe, 0xd0, 0xb2, 0xd1, 0x81, 0xd0, 0xb5,
	  0xd0, 0xbc, 0xd0, 0xb2, 0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xbe, 0xd0,
	  0xb9, 0xd0, 0xbd, 0xd0, 0xb0, 0xd1, 0x87, 0xd0, 0xb0, 0xd0, 0xbb, 0xd0, 0xb0,
	  0xd1, 0x81, 0xd0, 0xbf, 0xd0, 0xb8, 0xd1, 0x81, 0xd0, 0xbe, 0xd0, 0xba, 0xd1,
	  0x81, 0xd0, 0xbb, 0xd1, 0x83, 0xd0, 0xb6, 0xd0, 0xb1, 0xd1, 0x8b, 0xd1, 0x81,
	  0xd0, 0xb8, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbc, 0xd0, 0xbf, 0xd0,
	  0xb5, 0xd1, 0x87, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb8, 0xd0, 0xbd, 0xd0, 0xbe,
	  0xd0, 0xb2, 0xd0, 0xbe, 0xd0, 0xb3, 0xd0, 0xbe, 0xd0, 0xbf, 0xd0, 0xbe, 0xd0,
	  0xbc, 0xd0, 0xbe, 0xd1, 0x89, 0xd0, 0xb8, 0xd1, 0x81, 0xd0, 0xb0, 0xd0, 0xb9,
	  0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xbf, 0xd0, 0xbe, 0xd1, 0x87, 0xd0,
	  0xb5, 0xd0, 0xbc, 0xd1, 0x83, 0xd0, 0xbf, 0xd0, 0xbe, 0xd0, 0xbc, 0xd0, 0xbe,
	  0xd1, 0x89, 0xd1, 0x8c, 0xd0, 0xb4, 0xd0, 0xbe, 0xd0, 0xbb, 0xd0, 0xb6, 0xd0,
	  0xbd, 0xd0, 0xbe, 0xd1, 0x81, 0xd1, 0x81, 0xd1, 0x8b, 0xd0, 0xbb, 0xd0, 0xba,
	  0xd0, 0xb8, 0xd0, 0xb1, 0xd1, 0x8b, 0xd1, 0x81, 0xd1, 0x82, 0xd1, 0x80, 0xd0,
	  0xbe, 0xd0, 0xb4, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xbd, 0xd1, 0x8b, 0xd0, 0xb5,
	  0xd0, 0xbc, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xb3, 0xd0, 0xb8, 0xd0, 0xb5, 0xd0,
	  0xbf, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb5, 0xd0, 0xba, 0xd1, 0x82, 0xd0, 0xa1,
	  0xd0, 0xb5, 0xd0, 0xb9, 0xd1, 0x87, 0xd0, 0xb0, 0xd1, 0x81, 0xd0, 0xbc, 0xd0,
	  0xbe, 0xd0, 0xb4, 0xd0, 0xb5, 0xd0, 0xbb, 0xd0, 0xb8, 0xd1, 0x82, 0xd0, 0xb0,
	  0xd0, 0xba, 0xd0, 0xbe, 0xd0, 0xb3, 0xd0, 0xbe, 0xd0, 0xbe, 0xd0, 0xbd, 0xd0,
	  0xbb, 0xd0, 0xb0, 0xd0, 0xb9, 0xd0, 0xbd, 0xd0, 0xb3, 0xd0, 0xbe, 0xd1, 0x80,
	  0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xb5, 0xd0, 0xb2, 0xd0, 0xb5, 0xd1, 0x80, 0xd1,
	  0x81, 0xd0, 0xb8, 0xd1, 0x8f, 0xd1, 0x81, 0xd1, 0x82, 0xd1, 0x80, 0xd0, 0xb0,
	  0xd0, 0xbd, 0xd0, 0xb5, 0xd1, 0x84, 0xd0, 0xb8, 0xd0, 0xbb, 0xd1, 0x8c, 0xd0,
	  0xbc, 0xd1, 0x8b, 0xd1, 0x83, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xbd,
	  0xd1, 0x8f, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xb7, 0xd0, 0xbd, 0xd1, 0x8b, 0xd1,
	  0x85, 0xd0, 0xb8, 0xd1, 0x81, 0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x82, 0xd1, 0x8c,
	  0xd0, 0xbd, 0xd0, 0xb5, 0xd0, 0xb4, 0xd0, 0xb5, 0xd0, 0xbb, 0xd1, 0x8e, 0xd1,
	  0x8f, 0xd0, 0xbd, 0xd0, 0xb2, 0xd0, 0xb0, 0xd1, 0x80, 0xd1, 0x8f, 0xd0, 0xbc,
	  0xd0, 0xb5, 0xd0, 0xbd, 0xd1, 0x8c, 0xd1, 0x88, 0xd0, 0xb5, 0xd0, 0xbc, 0xd0,
	  0xbd, 0xd0, 0xbe, 0xd0, 0xb3, 0xd0, 0xb8, 0xd1, 0x85, 0xd0, 0xb4, 0xd0, 0xb0,
	  0xd0, 0xbd, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xb9, 0xd0, 0xb7, 0xd0, 0xbd, 0xd0,
	  0xb0, 0xd1, 0x87, 0xd0, 0xb8, 0xd1, 0x82, 0xd0, 0xbd, 0xd0, 0xb5, 0xd0, 0xbb,
	  0xd1, 0x8c, 0xd0, 0xb7, 0xd1, 0x8f, 0xd1, 0x84, 0xd0, 0xbe, 0xd1, 0x80, 0xd1,
	  0x83, 0xd0, 0xbc, 0xd0, 0xb0, 0xd0, 0xa2, 0xd0, 0xb5, 0xd0, 0xbf, 0xd0, 0xb5,
	  0xd1, 0x80, 0xd1, 0x8c, 0xd0, 0xbc, 0xd0, 0xb5, 0xd1, 0x81, 0xd1, 0x8f, 0xd1,
	  0x86, 0xd0, 0xb0, 0xd0, 0xb7, 0xd0, 0xb0, 0xd1, 0x89, 0xd0, 0xb8, 0xd1, 0x82,
	  0xd1, 0x8b, 0xd0, 0x9b, 0xd1, 0x83, 0xd1, 0x87, 0xd1, 0x88, 0xd0, 0xb8, 0xd0,
	  0xb5, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0x82,
	  0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x87, 0xe0,
	  0xa4, 0x85, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x87, 0xe0, 0xa4,
	  0x95, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x95,
	  0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0x85, 0xe0,
	  0xa4, 0xa8, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0x95, 0xe0, 0xa5,
	  0x8d, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x97, 0xe0, 0xa4, 0xbe,
	  0xe0, 0xa4, 0x87, 0xe0, 0xa4, 0xa1, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0xbe, 0xe0,
	  0xa4, 0xb0, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4,
	  0xb8, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xa6, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xaf,
	  0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xb2, 0xe0,
	  0xa5, 0x87, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0x82, 0xe0, 0xa4,
	  0xb9, 0xe0, 0xa4, 0xad, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xa4,
	  0xe0, 0xa4, 0x85, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x80, 0xe0,
	  0xa4, 0xb5, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x87, 0xe0, 0xa4,
	  0xb8, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x95,
	  0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xa4, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xae, 0xe0,
	  0xa5, 0x87, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5,
	  0x8b, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0x95,
	  0xe0, 0xa4, 0xa4, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0xb9, 0xe0,
	  0xa5, 0x81, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4,
	  0x87, 0xe0, 0xa4, 0x9f, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0x97,
	  0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa8, 0xe0,
	  0xa5, 0x87, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4,
	  0x9f, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xbe,
	  0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xbe, 0xe0,
	  0xa4, 0x89, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x87, 0xe0, 0xa4,
	  0xaf, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x81, 0xe0, 0xa4, 0xb8,
	  0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xad, 0xe0,
	  0xa4, 0xbe, 0xe0, 0xa4, 0xb7, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x86, 0xe0, 0xa4,
	  0xaa, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xbf,
	  0xe0, 0xa4, 0xaf, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb6, 0xe0, 0xa5, 0x81, 0xe0,
	  0xa4, 0xb0, 0xe0, 0xa5, 0x82, 0xe0, 0xa4, 0x87, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4,
	  0x95, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x98, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0x9f,
	  0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xae, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb0, 0xe0,
	  0xa5, 0x80, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4,
	  0xbe, 0xe0, 0xa4, 0xae, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xbe,
	  0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xb0, 0xe0,
	  0xa4, 0x85, 0xe0, 0xa4, 0xa7, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0x95, 0xe0, 0xa4,
	  0x85, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb8,
	  0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0xae, 0xe0,
	  0xa5, 0x81, 0xe0, 0xa4, 0x9d, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x95, 0xe0, 0xa4,
	  0xbe, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xa3, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x8b,
	  0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xa1, 0xe0,
	  0xa4, 0xbc, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4,
	  0xbe, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0x9f,
	  0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xb6, 0xe0, 0xa4, 0xac, 0xe0, 0xa5, 0x8d, 0xe0,
	  0xa4, 0xa6, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4,
	  0xbe, 0xe0, 0xa4, 0x9c, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xa8,
	  0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xbe, 0xe0,
	  0xa4, 0x95, 0xe0, 0xa5, 0x88, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x87, 0xe0, 0xa4,
	  0x86, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb5,
	  0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xa6, 0xe0,
	  0xa5, 0x87, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xaa, 0xe0, 0xa5,
	  0x82, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xbe,
	  0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0x89, 0xe0, 0xa4, 0xb8, 0xe0,
	  0xa4, 0x95, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4,
	  0x97, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xac, 0xe0, 0xa5, 0x88, 0xe0, 0xa4, 0xa0,
	  0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0x86, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0x95, 0xe0,
	  0xa5, 0x80, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4,
	  0xb7, 0xe0, 0xa4, 0x97, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xb5,
	  0xe0, 0xa4, 0x86, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x8b, 0xe0,
	  0xa4, 0x9c, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4,
	  0x9c, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb8,
	  0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xb9, 0xe0,
	  0xa4, 0xae, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0x89, 0xe0, 0xa4,
	  0xa8, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xbe,
	  0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x82, 0xe0, 0xa4, 0xa6, 0xe0, 0xa4, 0xb0, 0xe0,
	  0xa5, 0x8d, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x82, 0xe0, 0xa4,
	  0x9a, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0x82,
	  0xe0, 0xa4, 0xa6, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xbe, 0xe0,
	  0xa4, 0xb2, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4,
	  0xbe, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0xa4, 0xe0, 0xa5, 0x80,
	  0xe0, 0xa4, 0x9c, 0xe0, 0xa5, 0x88, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x87, 0xe0,
	  0xa4, 0xb5, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4,
	  0x9c, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa8,
	  0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x9c, 0xe0,
	  0xa4, 0xbe, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0x98, 0xe0, 0xa4,
	  0xbe, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0xbf,
	  0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x80, 0xe0,
	  0xa4, 0x9a, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4,
	  0x82, 0xe0, 0xa4, 0x9a, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xa4, 0xe0, 0xa5, 0x8d,
	  0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0x97, 0xe0, 0xa5, 0x82, 0xe0, 0xa4, 0x97, 0xe0,
	  0xa4, 0xb2, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa4, 0xe0, 0xa5,
	  0x87, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xb0,
	  0xe0, 0xa4, 0x86, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x87, 0xe0,
	  0xa4, 0xb5, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4,
	  0x87, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb8,
	  0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xb0, 0xe0,
	  0xa4, 0xb9, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x87, 0xe0, 0xa4,
	  0xb8, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xb9,
	  0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0xa1, 0xe0,
	  0xa4, 0xbc, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x98, 0xe0, 0xa4, 0x9f, 0xe0, 0xa4,
	  0xa8, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xbe,
	  0xe0, 0xa4, 0xb6, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x82, 0xe0,
	  0xa4, 0x9a, 0xe0, 0xa4, 0xb6, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5,
	  0x80, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0xa1, 0xe0, 0xa4, 0xbc, 0xe0, 0xa5, 0x80,
	  0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0xa4, 0xe0, 0xa5, 0x87, 0xe0,
	  0xa4, 0xb8, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x88, 0xe0, 0xa4, 0x9f, 0xe0, 0xa4,
	  0xb6, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xa6, 0xe0, 0xa4, 0xb8,
	  0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xa4, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0x9c, 0xe0,
	  0xa4, 0xbe, 0xe0, 0xa4, 0xa4, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4,
	  0xbe, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0x9c,
	  0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0x9f, 0xe0,
	  0xa4, 0xa8, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0x96, 0xe0, 0xa4,
	  0xa8, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xa1, 0xe0, 0xa4, 0xbc,
	  0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xb2, 0xe0,
	  0xa4, 0xbe, 0xe0, 0xa4, 0x89, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0x95, 0xe0, 0xa5,
	  0x80, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xb2,
	  0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0x97, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xbe, 0xe0,
	  0xa4, 0x96, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4,
	  0x85, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xa5, 0xe0, 0xa4, 0x9c,
	  0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xa6, 0xe0,
	  0xa5, 0x87, 0xe0, 0xa4, 0x96, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4,
	  0xb9, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xbf,
	  0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0xbf, 0xe0,
	  0xa4, 0xa8, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xac, 0xe0, 0xa5, 0x88, 0xe0, 0xa4,
	  0x82, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x80,
	  0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xa8, 0xe0,
	  0xa4, 0xbe, 0xe0, 0xa4, 0xa6, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4,
	  0xbe, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x87,
	  0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xab, 0xe0, 0xa5, 0x80, 0xe0,
	  0xa4, 0x9c, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4,
	  0xa4, 0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xae,
	  0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0x97, 0xe0, 0xa4, 0xb5, 0xe0,
	  0xa4, 0xb9, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5,
	  0x8b, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0xbc, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xbf,
	  0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0x86, 0xe0, 0xa4, 0xb0, 0xe0,
	  0xa5, 0x8b, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x87, 0xe0, 0xa4,
	  0xa8, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa6,
	  0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xa8, 0xe0,
	  0xa5, 0x87, 0xe0, 0xa4, 0x96, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4,
	  0xbe, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xac,
	  0xe0, 0xa4, 0x89, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xbe, 0xe0,
	  0xa4, 0x9c, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xac, 0xe0, 0xa4,
	  0xaa, 0xe0, 0xa5, 0x82, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xac,
	  0xe0, 0xa4, 0xa1, 0xe0, 0xa4, 0xbc, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb8, 0xe0,
	  0xa5, 0x8c, 0xe0, 0xa4, 0xa6, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb6, 0xe0, 0xa5,
	  0x87, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xbf,
	  0xe0, 0xa4, 0xaf, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xb9, 0xe0,
	  0xa4, 0xbe, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0x85, 0xe0, 0xa4, 0x95, 0xe0, 0xa4,
	  0xb8, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xbe,
	  0xe0, 0xa4, 0x8f, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xbe, 0xe0,
	  0xa4, 0x82, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xa5, 0xe0, 0xa4,
	  0xb2, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x87,
	  0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x96, 0xe0, 0xa4, 0x95, 0xe0,
	  0xa4, 0xb5, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xb7, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4,
	  0x95, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xb8,
	  0xe0, 0xa4, 0xae, 0xe0, 0xa5, 0x82, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xa5, 0xe0,
	  0xa4, 0xbe, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xbe, 0xd8, 0xaa, 0xd8, 0xb3, 0xd8,
	  0xaa, 0xd8, 0xb7, 0xd9, 0x8a, 0xd8, 0xb9, 0xd9, 0x85, 0xd8, 0xb4, 0xd8, 0xa7,
	  0xd8, 0xb1, 0xd9, 0x83, 0xd8, 0xa9, 0xd8, 0xa8, 0xd9, 0x88, 0xd8, 0xa7, 0xd8,
	  0xb3, 0xd8, 0xb7, 0xd8, 0xa9, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb5, 0xd9, 0x81,
	  0xd8, 0xad, 0xd8, 0xa9, 0xd9, 0x85, 0xd9, 0x88, 0xd8, 0xa7, 0xd8, 0xb6, 0xd9,
	  0x8a, 0xd8, 0xb9, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xae, 0xd8, 0xa7, 0xd8, 0xb5,
	  0xd8, 0xa9, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x85, 0xd8, 0xb2, 0xd9, 0x8a, 0xd8,
	  0xaf, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb9, 0xd8, 0xa7, 0xd9, 0x85, 0xd8, 0xa9,
	  0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x83, 0xd8, 0xa7, 0xd8, 0xaa, 0xd8, 0xa8, 0xd8,
	  0xa7, 0xd9, 0x84, 0xd8, 0xb1, 0xd8, 0xaf, 0xd9, 0x88, 0xd8, 0xaf, 0xd8, 0xa8,
	  0xd8, 0xb1, 0xd9, 0x86, 0xd8, 0xa7, 0xd9, 0x85, 0xd8, 0xac, 0xd8, 0xa7, 0xd9,
	  0x84, 0xd8, 0xaf, 0xd9, 0x88, 0xd9, 0x84, 0xd8, 0xa9, 0xd8, 0xa7, 0xd9, 0x84,
	  0xd8, 0xb9, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x85, 0xd8, 0xa7, 0xd9, 0x84, 0xd9,
	  0x85, 0xd9, 0x88, 0xd9, 0x82, 0xd8, 0xb9, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb9,
	  0xd8, 0xb1, 0xd8, 0xa8, 0xd9, 0x8a, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb3, 0xd8,
	  0xb1, 0xd9, 0x8a, 0xd8, 0xb9, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xac, 0xd9, 0x88,
	  0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb0, 0xd9, 0x87, 0xd8,
	  0xa7, 0xd8, 0xa8, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xad, 0xd9, 0x8a, 0xd8, 0xa7,
	  0xd8, 0xa9, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xad, 0xd9, 0x82, 0xd9, 0x88, 0xd9,
	  0x82, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x83, 0xd8, 0xb1, 0xd9, 0x8a, 0xd9, 0x85,
	  0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb9, 0xd8, 0xb1, 0xd8, 0xa7, 0xd9, 0x82, 0xd9,
	  0x85, 0xd8, 0xad, 0xd9, 0x81, 0xd9, 0x88, 0xd8, 0xb8, 0xd8, 0xa9, 0xd8, 0xa7,
	  0xd9, 0x84, 0xd8, 0xab, 0xd8, 0xa7, 0xd9, 0x86, 0xd9, 0x8a, 0xd9, 0x85, 0xd8,
	  0xb4, 0xd8, 0xa7, 0xd9, 0x87, 0xd8, 0xaf, 0xd8, 0xa9, 0xd8, 0xa7, 0xd9, 0x84,
	  0xd9, 0x85, 0xd8, 0xb1, 0xd8, 0xa3, 0xd8, 0xa9, 0xd8, 0xa7, 0xd9, 0x84, 0xd9,
	  0x82, 0xd8, 0xb1, 0xd8, 0xa2, 0xd9, 0x86, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb4,
	  0xd8, 0xa8, 0xd8, 0xa7, 0xd8, 0xa8, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xad, 0xd9,
	  0x88, 0xd8, 0xa7, 0xd8, 0xb1, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xac, 0xd8, 0xaf,
	  0xd9, 0x8a, 0xd8, 0xaf, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa3, 0xd8, 0xb3, 0xd8,
	  0xb1, 0xd8, 0xa9, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb9, 0xd9, 0x84, 0xd9, 0x88,
	  0xd9, 0x85, 0xd9, 0x85, 0xd8, 0xac, 0xd9, 0x85, 0xd9, 0x88, 0xd8, 0xb9, 0xd8,
	  0xa9, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb1, 0xd8, 0xad, 0xd9, 0x85, 0xd9, 0x86,
	  0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x86, 0xd9, 0x82, 0xd8, 0xa7, 0xd8, 0xb7, 0xd9,
	  0x81, 0xd9, 0x84, 0xd8, 0xb3, 0xd8, 0xb7, 0xd9, 0x8a, 0xd9, 0x86, 0xd8, 0xa7,
	  0xd9, 0x84, 0xd9, 0x83, 0xd9, 0x88, 0xd9, 0x8a, 0xd8, 0xaa, 0xd8, 0xa7, 0xd9,
	  0x84, 0xd8, 0xaf, 0xd9, 0x86, 0xd9, 0x8a, 0xd8, 0xa7, 0xd8, 0xa8, 0xd8, 0xb1,
	  0xd9, 0x83, 0xd8, 0xa7, 0xd8, 0xaa, 0xd9, 0x87, 0xd8, 0xa7, 0xd9, 0x84, 0xd8,
	  0xb1, 0xd9, 0x8a, 0xd8, 0xa7, 0xd8, 0xb6, 0xd8, 0xaa, 0xd8, 0xad, 0xd9, 0x8a,
	  0xd8, 0xa7, 0xd8, 0xaa, 0xd9, 0x8a, 0xd8, 0xa8, 0xd8, 0xaa, 0xd9, 0x88, 0xd9,
	  0x82, 0xd9, 0x8a, 0xd8, 0xaa, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa3, 0xd9, 0x88,
	  0xd9, 0x84, 0xd9, 0x89, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa8, 0xd8, 0xb1, 0xd9,
	  0x8a, 0xd8, 0xaf, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x83, 0xd9, 0x84, 0xd8, 0xa7,
	  0xd9, 0x85, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb1, 0xd8, 0xa7, 0xd8, 0xa8, 0xd8,
	  0xb7, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb4, 0xd8, 0xae, 0xd8, 0xb5, 0xd9, 0x8a,
	  0xd8, 0xb3, 0xd9, 0x8a, 0xd8, 0xa7, 0xd8, 0xb1, 0xd8, 0xa7, 0xd8, 0xaa, 0xd8,
	  0xa7, 0xd9, 0x84, 0xd8, 0xab, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xab, 0xd8, 0xa7,
	  0xd9, 0x84, 0xd8, 0xb5, 0xd9, 0x84, 0xd8, 0xa7, 0xd8, 0xa9, 0xd8, 0xa7, 0xd9,
	  0x84, 0xd8, 0xad, 0xd8, 0xaf, 0xd9, 0x8a, 0xd8, 0xab, 0xd8, 0xa7, 0xd9, 0x84,
	  0xd8, 0xb2, 0xd9, 0x88, 0xd8, 0xa7, 0xd8, 0xb1, 0xd8, 0xa7, 0xd9, 0x84, 0xd8,
	  0xae, 0xd9, 0x84, 0xd9, 0x8a, 0xd8, 0xac, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xac,
	  0xd9, 0x85, 0xd9, 0x8a, 0xd8, 0xb9, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb9, 0xd8,
	  0xa7, 0xd9, 0x85, 0xd9, 0x87, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xac, 0xd9, 0x85,
	  0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb3, 0xd8, 0xa7, 0xd8,
	  0xb9, 0xd8, 0xa9, 0xd9, 0x85, 0xd8, 0xb4, 0xd8, 0xa7, 0xd9, 0x87, 0xd8, 0xaf,
	  0xd9, 0x87, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb1, 0xd8, 0xa6, 0xd9, 0x8a, 0xd8,
	  0xb3, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xaf, 0xd8, 0xae, 0xd9, 0x88, 0xd9, 0x84,
	  0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x81, 0xd9, 0x86, 0xd9, 0x8a, 0xd8, 0xa9, 0xd8,
	  0xa7, 0xd9, 0x84, 0xd9, 0x83, 0xd8, 0xaa, 0xd8, 0xa7, 0xd8, 0xa8, 0xd8, 0xa7,
	  0xd9, 0x84, 0xd8, 0xaf, 0xd9, 0x88, 0xd8, 0xb1, 0xd9, 0x8a, 0xd8, 0xa7, 0xd9,
	  0x84, 0xd8, 0xaf, 0xd8, 0xb1, 0xd9, 0x88, 0xd8, 0xb3, 0xd8, 0xa7, 0xd8, 0xb3,
	  0xd8, 0xaa, 0xd8, 0xba, 0xd8, 0xb1, 0xd9, 0x82, 0xd8, 0xaa, 0xd8, 0xb5, 0xd8,
	  0xa7, 0xd9, 0x85, 0xd9, 0x8a, 0xd9, 0x85, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa8,
	  0xd9, 0x86, 0xd8, 0xa7, 0xd8, 0xaa, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb9, 0xd8,
	  0xb8, 0xd9, 0x8a, 0xd9, 0x85, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x74, 0x61, 0x69,
	  0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x74, 0x61,
	  0x6e, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x3d, 0x20, 0x66, 0x75, 0x6e, 0x63, 0x74,
	  0x69, 0x6f, 0x6e, 0x28, 0x29, 0x2e, 0x6a, 0x70, 0x67, 0x22, 0x20, 0x77, 0x69,
	  0x64, 0x74, 0x68, 0x3d, 0x22, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	  0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x6e, 0x67, 0x22, 0x20, 0x77, 0x69,
	  0x64, 0x74, 0x68, 0x3d, 0x22, 0x3c, 0x62, 0x6f, 0x64, 0x79, 0x20, 0x63, 0x6c,
	  0x61, 0x73, 0x73, 0x3d, 0x22, 0x4d, 0x61, 0x74, 0x68, 0x2e, 0x72, 0x61, 0x6e,
	  0x64, 0x6f, 0x6d, 0x28, 0x29, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6d, 0x70, 0x6f,
	  0x72, 0x61, 0x72, 0x79, 0x20, 0x55, 0x6e, 0x69, 0x74, 0x65, 0x64, 0x20, 0x53,
	  0x74, 0x61, 0x74, 0x65, 0x73, 0x63, 0x69, 0x72, 0x63, 0x75, 0x6d, 0x73, 0x74,
	  0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x43,
	  0x68, 0x69, 0x6c, 0x64, 0x28, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	  0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3c, 0x73, 0x70, 0x61, 0x6e, 0x20, 0x63, 0x6c,
	  0x61, 0x73, 0x73, 0x3d, 0x22, 0x22, 0x3e, 0x3c, 0x69, 0x6d, 0x67, 0x20, 0x73,
	  0x72, 0x63, 0x3d, 0x22, 0x2f, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x75,
	  0x69, 0x73, 0x68, 0x65, 0x64, 0x74, 0x68, 0x6f, 0x75, 0x73, 0x61, 0x6e, 0x64,
	  0x73, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63,
	  0x61, 0x74, 0x69, 0x6f, 0x6e, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x22, 0x3e, 0x3c,
	  0x2f, 0x64, 0x69, 0x76, 0x3e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x69, 0x67,
	  0x61, 0x74, 0x69, 0x6f, 0x6e, 0x66, 0x61, 0x76, 0x69, 0x63, 0x6f, 0x6e, 0x2e,
	  0x69, 0x63, 0x6f, 0x22, 0x20, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x2d, 0x72,
	  0x69, 0x67, 0x68, 0x74, 0x3a, 0x62, 0x61, 0x73, 0x65, 0x64, 0x20, 0x6f, 0x6e,
	  0x20, 0x74, 0x68, 0x65, 0x20, 0x4d, 0x61, 0x73, 0x73, 0x61, 0x63, 0x68, 0x75,
	  0x73, 0x65, 0x74, 0x74, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x62, 0x6f,
	  0x72, 0x64, 0x65, 0x72, 0x3d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74,
	  0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x61, 0x6c, 0x73, 0x6f, 0x20, 0x6b, 0x6e, 0x6f,
	  0x77, 0x6e, 0x20, 0x61, 0x73, 0x70, 0x72, 0x6f, 0x6e, 0x75, 0x6e, 0x63, 0x69,
	  0x61, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75,
	  0x6e, 0x64, 0x3a, 0x23, 0x66, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x2d,
	  0x6c, 0x65, 0x66, 0x74, 0x3a, 0x46, 0x6f, 0x72, 0x20, 0x65, 0x78, 0x61, 0x6d,
	  0x70, 0x6c, 0x65, 0x2c, 0x20, 0x6d, 0x69, 0x73, 0x63, 0x65, 0x6c, 0x6c, 0x61,
	  0x6e, 0x65, 0x6f, 0x75, 0x73, 0x26, 0x6c, 0x74, 0x3b, 0x2f, 0x6d, 0x61, 0x74,
	  0x68, 0x26, 0x67, 0x74, 0x3b, 0x70, 0x73, 0x79, 0x63, 0x68, 0x6f, 0x6c, 0x6f,
	  0x67, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x20, 0x70, 0x61, 0x72, 0x74, 0x69,
	  0x63, 0x75, 0x6c, 0x61, 0x72, 0x65, 0x61, 0x72, 0x63, 0x68, 0x22, 0x20, 0x74,
	  0x79, 0x70, 0x65, 0x3d, 0x22, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x65, 0x74,
	  0x68, 0x6f, 0x64, 0x3d, 0x22, 0x61, 0x73, 0x20, 0x6f, 0x70, 0x70, 0x6f, 0x73,
	  0x65, 0x64, 0x20, 0x74, 0x6f, 0x53, 0x75, 0x70, 0x72, 0x65, 0x6d, 0x65, 0x20,
	  0x43, 0x6f, 0x75, 0x72, 0x74, 0x6f, 0x63, 0x63, 0x61, 0x73, 0x69, 0x6f, 0x6e,
	  0x61, 0x6c, 0x6c, 0x79, 0x20, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	  0x61, 0x6c, 0x6c, 0x79, 0x2c, 0x4e, 0x6f, 0x72, 0x74, 0x68, 0x20, 0x41, 0x6d,
	  0x65, 0x72, 0x69, 0x63, 0x61, 0x70, 0x78, 0x3b, 0x62, 0x61, 0x63, 0x6b, 0x67,
	  0x72, 0x6f, 0x75, 0x6e, 0x64, 0x6f, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x75, 0x6e,
	  0x69, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x74, 0x61, 0x69,
	  0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x74, 0x6f, 0x4c, 0x6f, 0x77, 0x65, 0x72,
	  0x43, 0x61, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74,
	  0x75, 0x72, 0x69, 0x6e, 0x67, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69,
	  0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64,
	  0x20, 0x77, 0x69, 0x74, 0x68, 0x46, 0x6f, 0x72, 0x20, 0x69, 0x6e, 0x73, 0x74,
	  0x61, 0x6e, 0x63, 0x65, 0x2c, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x69,
	  0x6e, 0x67, 0x20, 0x6f, 0x66, 0x22, 0x20, 0x6d, 0x61, 0x78, 0x6c, 0x65, 0x6e,
	  0x67, 0x74, 0x68, 0x3d, 0x22, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x66,
	  0x61, 0x6c, 0x73, 0x65, 0x3b, 0x63, 0x6f, 0x6e, 0x73, 0x63, 0x69, 0x6f, 0x75,
	  0x73, 0x6e, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x64, 0x69, 0x74, 0x65, 0x72, 0x72,
	  0x61, 0x6e, 0x65, 0x61, 0x6e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x6f, 0x72, 0x64,
	  0x69, 0x6e, 0x61, 0x72, 0x79, 0x61, 0x73, 0x73, 0x61, 0x73, 0x73, 0x69, 0x6e,
	  0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x65, 0x71, 0x75, 0x65,
	  0x6e, 0x74, 0x6c, 0x79, 0x20, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x20, 0x74,
	  0x79, 0x70, 0x65, 0x3d, 0x22, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62,
	  0x65, 0x72, 0x20, 0x6f, 0x66, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x72, 0x69, 0x67,
	  0x69, 0x6e, 0x61, 0x6c, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x68, 0x65,
	  0x6e, 0x73, 0x69, 0x76, 0x65, 0x72, 0x65, 0x66, 0x65, 0x72, 0x73, 0x20, 0x74,
	  0x6f, 0x20, 0x74, 0x68, 0x65, 0x3c, 0x2f, 0x75, 0x6c, 0x3e, 0x0a, 0x3c, 0x2f,
	  0x64, 0x69, 0x76, 0x3e, 0x0a, 0x70, 0x68, 0x69, 0x6c, 0x6f, 0x73, 0x6f, 0x70,
	  0x68, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	  0x2e, 0x68, 0x72, 0x65, 0x66, 0x77, 0x61, 0x73, 0x20, 0x70, 0x75, 0x62, 0x6c,
	  0x69, 0x73, 0x68, 0x65, 0x64, 0x53, 0x61, 0x6e, 0x20, 0x46, 0x72, 0x61, 0x6e,
	  0x63, 0x69, 0x73, 0x63, 0x6f, 0x28, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	  0x6e, 0x28, 0x29, 0x7b, 0x0a, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x69, 0x64, 0x3d,
	  0x22, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x6f, 0x70, 0x68, 0x69, 0x73, 0x74, 0x69,
	  0x63, 0x61, 0x74, 0x65, 0x64, 0x6d, 0x61, 0x74, 0x68, 0x65, 0x6d, 0x61, 0x74,
	  0x69, 0x63, 0x61, 0x6c, 0x20, 0x2f, 0x68, 0x65, 0x61, 0x64, 0x3e, 0x0d, 0x0a,
	  0x3c, 0x62, 0x6f, 0x64, 0x79, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x73,
	  0x20, 0x74, 0x68, 0x61, 0x74, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	  0x61, 0x74, 0x69, 0x6f, 0x6e, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72,
	  0x61, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	  0x73, 0x68, 0x69, 0x70, 0x73, 0x6d, 0x61, 0x79, 0x20, 0x68, 0x61, 0x76, 0x65,
	  0x20, 0x62, 0x65, 0x65, 0x6e, 0x28, 0x66, 0x6f, 0x72, 0x20, 0x65, 0x78, 0x61,
	  0x6d, 0x70, 0x6c, 0x65, 0x2c, 0x54, 0x68, 0x69, 0x73, 0x20, 0x61, 0x72, 0x74,
	  0x69, 0x63, 0x6c, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x73, 0x6f, 0x6d, 0x65, 0x20,
	  0x63, 0x61, 0x73, 0x65, 0x73, 0x70, 0x61, 0x72, 0x74, 0x73, 0x20, 0x6f, 0x66,
	  0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	  0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x47, 0x72, 0x65, 0x61, 0x74, 0x20, 0x42, 0x72,
	  0x69, 0x74, 0x61, 0x69, 0x6e, 0x20, 0x63, 0x65, 0x6c, 0x6c, 0x70, 0x61, 0x64,
	  0x64, 0x69, 0x6e, 0x67, 0x3d, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65,
	  0x6e, 0x74, 0x20, 0x74, 0x6f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c,
	  0x64, 0x65, 0x72, 0x3d, 0x22, 0x3b, 0x20, 0x66, 0x6f, 0x6e, 0x74, 0x2d, 0x73,
	  0x69, 0x7a, 0x65, 0x3a, 0x20, 0x6a, 0x75, 0x73, 0x74, 0x69, 0x66, 0x69, 0x63,
	  0x61, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x65, 0x6c, 0x69, 0x65, 0x76, 0x65, 0x64,
	  0x20, 0x74, 0x68, 0x61, 0x74, 0x73, 0x75, 0x66, 0x66, 0x65, 0x72, 0x65, 0x64,
	  0x20, 0x66, 0x72, 0x6f, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x65,
	  0x64, 0x20, 0x74, 0x6f, 0x20, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x20, 0x6f,
	  0x66, 0x20, 0x74, 0x68, 0x65, 0x63, 0x72, 0x69, 0x70, 0x74, 0x22, 0x20, 0x73,
	  0x72, 0x63, 0x3d, 0x22, 0x2f, 0x28, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	  0x6e, 0x28, 0x29, 0x20, 0x7b, 0x61, 0x72, 0x65, 0x20, 0x61, 0x76, 0x61, 0x69,
	  0x6c, 0x61, 0x62, 0x6c, 0x65, 0x0a, 0x09, 0x3c, 0x6c, 0x69, 0x6e, 0x6b, 0x20,
	  0x72, 0x65, 0x6c, 0x3d, 0x22, 0x20, 0x73, 0x72, 0x63, 0x3d, 0x27, 0x68, 0x74,
	  0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74,
	  0x65, 0x64, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x69,
	  0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x22, 0x20, 0x61, 0x6c, 0x74, 0x3d, 0x22, 0x22,
	  0x20, 0x2f, 0x3e, 0x3c, 0x2f, 0x61, 0x72, 0x65, 0x20, 0x67, 0x65, 0x6e, 0x65,
	  0x72, 0x61, 0x6c, 0x6c, 0x79, 0x68, 0x61, 0x73, 0x20, 0x61, 0x6c, 0x73, 0x6f,
	  0x20, 0x62, 0x65, 0x65, 0x6e, 0x6d, 0x6f, 0x73, 0x74, 0x20, 0x70, 0x6f, 0x70,
	  0x75, 0x6c, 0x61, 0x72, 0x20, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x73, 0x70, 0x6f,
	  0x6e, 0x64, 0x69, 0x6e, 0x67, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x65, 0x64,
	  0x20, 0x77, 0x69, 0x74, 0x68, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x62, 0x6f,
	  0x72, 0x64, 0x65, 0x72, 0x3a, 0x3c, 0x2f, 0x61, 0x3e, 0x3c, 0x2f, 0x73, 0x70,
	  0x61, 0x6e, 0x3e, 0x3c, 0x2f, 0x2e, 0x67, 0x69, 0x66, 0x22, 0x20, 0x77, 0x69,
	  0x64, 0x74, 0x68, 0x3d, 0x22, 0x3c, 0x69, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x20,
	  0x73, 0x72, 0x63, 0x3d, 0x22, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x63, 0x6c,
	  0x61, 0x73, 0x73, 0x3d, 0x22, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x62,
	  0x6c, 0x6f, 0x63, 0x6b, 0x3b, 0x61, 0x63, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	  0x67, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x6f, 0x67, 0x65, 0x74, 0x68, 0x65, 0x72,
	  0x20, 0x77, 0x69, 0x74, 0x68, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x6d,
	  0x61, 0x74, 0x65, 0x6c, 0x79, 0x70, 0x61, 0x72, 0x6c, 0x69, 0x61, 0x6d, 0x65,
	  0x6e, 0x74, 0x61, 0x72, 0x79, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x61, 0x6e, 0x64,
	  0x20, 0x6d, 0x6f, 0x72, 0x65, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x3a,
	  0x6e, 0x6f, 0x6e, 0x65, 0x3b, 0x74, 0x72, 0x61, 0x64, 0x69, 0x74, 0x69, 0x6f,
	  0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x70, 0x72, 0x65, 0x64, 0x6f, 0x6d, 0x69, 0x6e,
	  0x61, 0x6e, 0x74, 0x6c, 0x79, 0x26, 0x6e, 0x62, 0x73, 0x70, 0x3b, 0x7c, 0x26,
	  0x6e, 0x62, 0x73, 0x70, 0x3b, 0x26, 0x6e, 0x62, 0x73, 0x70, 0x3b, 0x3c, 0x2f,
	  0x73, 0x70, 0x61, 0x6e, 0x3e, 0x20, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x70, 0x61,
	  0x63, 0x69, 0x6e, 0x67, 0x3d, 0x3c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x6e,
	  0x61, 0x6d, 0x65, 0x3d, 0x22, 0x6f, 0x72, 0x22, 0x20, 0x63, 0x6f, 0x6e, 0x74,
	  0x65, 0x6e, 0x74, 0x3d, 0x22, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x76, 0x65,
	  0x72, 0x73, 0x69, 0x61, 0x6c, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	  0x3d, 0x22, 0x6f, 0x67, 0x3a, 0x2f, 0x78, 0x2d, 0x73, 0x68, 0x6f, 0x63, 0x6b,
	  0x77, 0x61, 0x76, 0x65, 0x2d, 0x64, 0x65, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	  0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x75, 0x72, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	  0x65, 0x64, 0x20, 0x62, 0x79, 0x4e, 0x65, 0x76, 0x65, 0x72, 0x74, 0x68, 0x65,
	  0x6c, 0x65, 0x73, 0x73, 0x2c, 0x77, 0x61, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20,
	  0x66, 0x69, 0x72, 0x73, 0x74, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x72,
	  0x61, 0x62, 0x6c, 0x65, 0x20, 0x41, 0x6c, 0x74, 0x68, 0x6f, 0x75, 0x67, 0x68,
	  0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72,
	  0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6e,
	  0x6f, 0x74, 0x20, 0x62, 0x65, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69,
	  0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x3c, 0x73, 0x70, 0x61, 0x6e, 0x20, 0x73, 0x74,
	  0x79, 0x6c, 0x65, 0x3d, 0x22, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x20, 0x61, 0x73,
	  0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x6c, 0x79, 0x20,
	  0x61, 0x66, 0x74, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x20, 0x69, 0x6e, 0x73, 0x74,
	  0x61, 0x6e, 0x63, 0x65, 0x2c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	  0x64, 0x20, 0x61, 0x73, 0x20, 0x2f, 0x68, 0x65, 0x61, 0x64, 0x3e, 0x0a, 0x3c,
	  0x62, 0x6f, 0x64, 0x79, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67,
	  0x20, 0x77, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x69,
	  0x6e, 0x67, 0x6c, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x61, 0x63, 0x74,
	  0x20, 0x74, 0x68, 0x61, 0x74, 0x64, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x69,
	  0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x20, 0x6f,
	  0x66, 0x20, 0x74, 0x68, 0x65, 0x61, 0x6e, 0x20, 0x69, 0x6e, 0x64, 0x69, 0x76,
	  0x69, 0x64, 0x75, 0x61, 0x6c, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c,
	  0x74, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x6f, 0x66,
	  0x20, 0x76, 0x69, 0x65, 0x77, 0x68, 0x6f, 0x6d, 0x6f, 0x73, 0x65, 0x78, 0x75,
	  0x61, 0x6c, 0x69, 0x74, 0x79, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x6e,
	  0x63, 0x65, 0x20, 0x6f, 0x66, 0x3c, 0x2f, 0x73, 0x70, 0x61, 0x6e, 0x3e, 0x3c,
	  0x2f, 0x64, 0x69, 0x76, 0x3e, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74,
	  0x75, 0x72, 0x65, 0x72, 0x73, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x20, 0x6f,
	  0x66, 0x20, 0x74, 0x68, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6c, 0x79,
	  0x20, 0x75, 0x73, 0x65, 0x64, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e,
	  0x63, 0x65, 0x20, 0x6f, 0x66, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61,
	  0x74, 0x69, 0x6f, 0x6e, 0x73, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75,
	  0x6e, 0x64, 0x3a, 0x20, 0x23, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x20, 0x6f,
	  0x66, 0x20, 0x74, 0x68, 0x65, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	  0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x20, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x66,
	  0x69, 0x63, 0x61, 0x6e, 0x74, 0x22, 0x20, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72,
	  0x3d, 0x22, 0x30, 0x22, 0x3e, 0x72, 0x65, 0x76, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	  0x6f, 0x6e, 0x61, 0x72, 0x79, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x6c,
	  0x65, 0x73, 0x20, 0x6f, 0x66, 0x69, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x69,
	  0x64, 0x65, 0x72, 0x65, 0x64, 0x77, 0x61, 0x73, 0x20, 0x64, 0x65, 0x76, 0x65,
	  0x6c, 0x6f, 0x70, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x6f, 0x2d, 0x45, 0x75, 0x72,
	  0x6f, 0x70, 0x65, 0x61, 0x6e, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62,
	  0x6c, 0x65, 0x20, 0x74, 0x6f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	  0x74, 0x73, 0x20, 0x6f, 0x66, 0x61, 0x72, 0x65, 0x20, 0x73, 0x6f, 0x6d, 0x65,
	  0x74, 0x69, 0x6d, 0x65, 0x73, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x72, 0x20, 0x74,
	  0x6f, 0x20, 0x74, 0x68, 0x65, 0x4e, 0x65, 0x77, 0x20, 0x59, 0x6f, 0x72, 0x6b,
	  0x20, 0x43, 0x69, 0x74, 0x79, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x22, 0x73,
	  0x65, 0x61, 0x72, 0x63, 0x68, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	  0x65, 0x64, 0x20, 0x74, 0x6f, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x20, 0x6f,
	  0x66, 0x20, 0x74, 0x68, 0x65, 0x6d, 0x61, 0x74, 0x68, 0x65, 0x6d, 0x61, 0x74,
	  0x69, 0x63, 0x69, 0x61, 0x6e, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65,
	  0x6e, 0x64, 0x20, 0x6f, 0x66, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65,
	  0x6e, 0x64, 0x20, 0x6f, 0x66, 0x22, 0x20, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72,
	  0x3d, 0x22, 0x30, 0x22, 0x20, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f,
	  0x67, 0x69, 0x63, 0x61, 0x6c, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43,
	  0x6c, 0x61, 0x73, 0x73, 0x28, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x20, 0x6f,
	  0x66, 0x20, 0x74, 0x68, 0x65, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65,
	  0x20, 0x74, 0x68, 0x61, 0x74, 0x21, 0x5b, 0x65, 0x6e, 0x64, 0x69, 0x66, 0x5d,
	  0x2d, 0x2d, 0x3e, 0x0d, 0x0a, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74,
	  0x65, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x6e, 0x74, 0x6f, 0x20, 0x61, 0x20, 0x73,
	  0x69, 0x6e, 0x67, 0x6c, 0x65, 0x72, 0x65, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69,
	  0x76, 0x65, 0x6c, 0x79, 0x2e, 0x61, 0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x72,
	  0x65, 0x66, 0x6f, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	  0x65, 0x73, 0x20, 0x6f, 0x66, 0x69, 0x73, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	  0x65, 0x64, 0x20, 0x69, 0x6e, 0x73, 0x6f, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20,
	  0x77, 0x68, 0x69, 0x63, 0x68, 0x54, 0x68, 0x65, 0x72, 0x65, 0x20, 0x69, 0x73,
	  0x20, 0x61, 0x6c, 0x73, 0x6f, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65,
	  0x64, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e,
	  0x63, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x26, 0x61, 0x6d, 0x70, 0x3b, 0x6e, 0x64,
	  0x61, 0x73, 0x68, 0x3b, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	  0x73, 0x20, 0x74, 0x68, 0x65, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x72,
	  0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x20, 0x6f,
	  0x66, 0x20, 0x74, 0x68, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64,
	  0x65, 0x6e, 0x74, 0x6c, 0x79, 0x65, 0x71, 0x75, 0x69, 0x70, 0x70, 0x65, 0x64,
	  0x20, 0x77, 0x69, 0x74, 0x68, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74,
	  0x20, 0x68, 0x61, 0x76, 0x65, 0x3c, 0x2f, 0x61, 0x3e, 0x3c, 0x61, 0x20, 0x68,
	  0x72, 0x65, 0x66, 0x3d, 0x22, 0x63, 0x6f, 0x6e, 0x66, 0x75, 0x73, 0x65, 0x64,
	  0x20, 0x77, 0x69, 0x74, 0x68, 0x3c, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x68, 0x72,
	  0x65, 0x66, 0x3d, 0x22, 0x2f, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61,
	  0x67, 0x65, 0x20, 0x6f, 0x66, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x20, 0x69,
	  0x6e, 0x20, 0x74, 0x68, 0x65, 0x54, 0x68, 0x65, 0x73, 0x65, 0x20, 0x69, 0x6e,
	  0x63, 0x6c, 0x75, 0x64, 0x65, 0x72, 0x65, 0x67, 0x61, 0x72, 0x64, 0x6c, 0x65,
	  0x73, 0x73, 0x20, 0x6f, 0x66, 0x63, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65,
	  0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x26,
	  0x71, 0x75, 0x6f, 0x74, 0x3b, 0x73, 0x65, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x20,
	  0x74, 0x69, 0x6d, 0x65, 0x73, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	  0x74, 0x20, 0x74, 0x68, 0x65, 0x62, 0x6f, 0x64, 0x79, 0x3e, 0x0a, 0x3c, 0x2f,
	  0x68, 0x74, 0x6d, 0x6c, 0x3e, 0x74, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x20,
	  0x74, 0x6f, 0x20, 0x62, 0x65, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69,
	  0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c,
	  0x69, 0x74, 0x69, 0x65, 0x73, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	  0x67, 0x65, 0x20, 0x6f, 0x66, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x74,
	  0x6f, 0x20, 0x74, 0x68, 0x65, 0x61, 0x6e, 0x20, 0x61, 0x74, 0x74, 0x65, 0x6d,
	  0x70, 0x74, 0x20, 0x74, 0x6f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69,
	  0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x6a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x6a,
	  0x71, 0x75, 0x65, 0x72, 0x79, 0x74, 0x77, 0x6f, 0x20, 0x64, 0x69, 0x66, 0x66,
	  0x65, 0x72, 0x65, 0x6e, 0x74, 0x62, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x20, 0x74,
	  0x6f, 0x20, 0x74, 0x68, 0x65, 0x65, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73,
	  0x68, 0x6d, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x69, 0x6e,
	  0x67, 0x20, 0x74, 0x68, 0x65, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	  0x69, 0x6f, 0x6e, 0x22, 0x20, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	  0x65, 0x20, 0x74, 0x68, 0x65, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	  0x65, 0x20, 0x66, 0x6f, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	  0x67, 0x20, 0x74, 0x6f, 0x20, 0x77, 0x69, 0x64, 0x65, 0x20, 0x72, 0x61, 0x6e,
	  0x67, 0x65, 0x20, 0x6f, 0x66, 0x09, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x63, 0x6c,
	  0x61, 0x73, 0x73, 0x3d, 0x22, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x63, 0x6f, 0x6d,
	  0x6d, 0x6f, 0x6e, 0x6c, 0x79, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x61,
	  0x74, 0x69, 0x6f, 0x6e, 0x73, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	  0x61, 0x6c, 0x69, 0x74, 0x79, 0x77, 0x61, 0x73, 0x20, 0x63, 0x6f, 0x6d, 0x70,
	  0x6c, 0x65, 0x74, 0x65, 0x64, 0x20, 0x26, 0x61, 0x6d, 0x70, 0x3b, 0x6d, 0x64,
	  0x61, 0x73, 0x68, 0x3b, 0x20, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	  0x61, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x68, 0x65, 0x20, 0x63, 0x68, 0x61, 0x72,
	  0x61, 0x63, 0x74, 0x65, 0x72, 0x61, 0x6e, 0x20, 0x61, 0x64, 0x64, 0x69, 0x74,
	  0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x73, 0x20,
	  0x74, 0x6f, 0x20, 0x62, 0x65, 0x66, 0x61, 0x63, 0x74, 0x20, 0x74, 0x68, 0x61,
	  0x74, 0x20, 0x74, 0x68, 0x65, 0x61, 0x6e, 0x20, 0x65, 0x78, 0x61, 0x6d, 0x70,
	  0x6c, 0x65, 0x20, 0x6f, 0x66, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x63,
	  0x61, 0x6e, 0x74, 0x6c, 0x79, 0x6f, 0x6e, 0x6d, 0x6f, 0x75, 0x73, 0x65, 0x6f,
	  0x76, 0x65, 0x72, 0x3d, 0x22, 0x62, 0x65, 0x63, 0x61, 0x75, 0x73, 0x65, 0x20,
	  0x74, 0x68, 0x65, 0x79, 0x20, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x20, 0x3d, 0x20,
	  0x74, 0x72, 0x75, 0x65, 0x3b, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73,
	  0x20, 0x77, 0x69, 0x74, 0x68, 0x73, 0x65, 0x65, 0x6d, 0x73, 0x20, 0x74, 0x6f,
	  0x20, 0x68, 0x61, 0x76, 0x65, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x75,
	  0x6c, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x72, 0x63, 0x3d, 0x22, 0x68, 0x74,
	  0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x69, 0x61, 0x72,
	  0x20, 0x77, 0x69, 0x74, 0x68, 0x70, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x73, 0x69,
	  0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	  0x20, 0x28, 0x29, 0x20, 0x7b, 0x74, 0x6f, 0x6f, 0x6b, 0x20, 0x70, 0x6c, 0x61,
	  0x63, 0x65, 0x20, 0x69, 0x6e, 0x61, 0x6e, 0x64, 0x20, 0x73, 0x6f, 0x6d, 0x65,
	  0x74, 0x69, 0x6d, 0x65, 0x73, 0x73, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x74,
	  0x69, 0x61, 0x6c, 0x6c, 0x79, 0x3c, 0x73, 0x70, 0x61, 0x6e, 0x3e, 0x3c, 0x2f,
	  0x73, 0x70, 0x61, 0x6e, 0x3e, 0x69, 0x73, 0x20, 0x6f, 0x66, 0x74, 0x65, 0x6e,
	  0x20, 0x75, 0x73, 0x65, 0x64, 0x69, 0x6e, 0x20, 0x61, 0x6e, 0x20, 0x61, 0x74,
	  0x74, 0x65, 0x6d, 0x70, 0x74, 0x67, 0x72, 0x65, 0x61, 0x74, 0x20, 0x64, 0x65,
	  0x61, 0x6c, 0x20, 0x6f, 0x66, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	  0x65, 0x6e, 0x74, 0x61, 0x6c, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66,
	  0x75, 0x6c, 0x6c, 0x79, 0x20, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x6c,
	  0x79, 0x20, 0x61, 0x6c, 0x6c, 0x32, 0x30, 0x74, 0x68, 0x20, 0x63, 0x65, 0x6e,
	  0x74, 0x75, 0x72, 0x79, 0x2c, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69,
	  0x6f, 0x6e, 0x61, 0x6c, 0x73, 0x6e, 0x65, 0x63, 0x65, 0x73, 0x73, 0x61, 0x72,
	  0x79, 0x20, 0x74, 0x6f, 0x20, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	  0x65, 0x64, 0x20, 0x62, 0x79, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62,
	  0x69, 0x6c, 0x69, 0x74, 0x79, 0x62, 0x65, 0x63, 0x61, 0x75, 0x73, 0x65, 0x20,
	  0x69, 0x74, 0x20, 0x69, 0x73, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	  0x72, 0x79, 0x20, 0x6f, 0x66, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61,
	  0x74, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x68, 0x65, 0x20, 0x66, 0x6f, 0x6c, 0x6c,
	  0x6f, 0x77, 0x69, 0x6e, 0x67, 0x6d, 0x61, 0x79, 0x20, 0x72, 0x65, 0x66, 0x65,
	  0x72, 0x20, 0x74, 0x6f, 0x3a, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x71, 0x75, 0x65,
	  0x6e, 0x74, 0x6c, 0x79, 0x2c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74,
	  0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x61, 0x6c, 0x74, 0x68, 0x6f, 0x75, 0x67, 0x68,
	  0x20, 0x73, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x61, 0x74, 0x20, 0x77, 0x6f, 0x75,
	  0x6c, 0x64, 0x20, 0x62, 0x65, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x27, 0x73, 0x20,
	  0x66, 0x69, 0x72, 0x73, 0x74, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	  0x65, 0x64, 0x20, 0x61, 0x73, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x20, 0x6f,
	  0x66, 0x20, 0x74, 0x68, 0x65, 0x28, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x75,
	  0x6c, 0x61, 0x72, 0x6c, 0x79, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x3d, 0x22, 0x6c,
	  0x65, 0x66, 0x74, 0x22, 0x20, 0x6d, 0x6f, 0x73, 0x74, 0x20, 0x63, 0x6f, 0x6d,
	  0x6d, 0x6f, 0x6e, 0x6c, 0x79, 0x62, 0x61, 0x73, 0x69, 0x73, 0x20, 0x66, 0x6f,
	  0x72, 0x20, 0x74, 0x68, 0x65, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69,
	  0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75,
	  0x74, 0x69, 0x6f, 0x6e, 0x73, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x69,
	  0x74, 0x79, 0x20, 0x6f, 0x66, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x20, 0x6f,
	  0x66, 0x20, 0x74, 0x68, 0x65, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x64, 0x75, 0x63,
	  0x65, 0x20, 0x74, 0x68, 0x65, 0x6a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63,
	  0x74, 0x69, 0x6f, 0x6e, 0x73, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x6d,
	  0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x6e, 0x6d, 0x6f, 0x75, 0x73, 0x65,
	  0x6f, 0x75, 0x74, 0x3d, 0x22, 0x4e, 0x65, 0x77, 0x20, 0x54, 0x65, 0x73, 0x74,
	  0x61, 0x6d, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	  0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x3c, 0x2f, 0x73, 0x70, 0x61, 0x6e, 0x3e, 0x3c,
	  0x2f, 0x61, 0x3e, 0x3c, 0x2f, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x55,
	  0x6e, 0x69, 0x74, 0x65, 0x64, 0x66, 0x69, 0x6c, 0x6d, 0x20, 0x64, 0x69, 0x72,
	  0x65, 0x63, 0x74, 0x6f, 0x72, 0x2d, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x2e,
	  0x64, 0x74, 0x64, 0x22, 0x3e, 0x68, 0x61, 0x73, 0x20, 0x62, 0x65, 0x65, 0x6e,
	  0x20, 0x75, 0x73, 0x65, 0x64, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74,
	  0x6f, 0x20, 0x74, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x6f, 0x75, 0x67, 0x68,
	  0x20, 0x74, 0x68, 0x69, 0x73, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x20, 0x69,
	  0x6e, 0x20, 0x74, 0x68, 0x65, 0x73, 0x65, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x20,
	  0x6f, 0x74, 0x68, 0x65, 0x72, 0x62, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x72,
	  0x65, 0x20, 0x61, 0x72, 0x65, 0x75, 0x6e, 0x70, 0x72, 0x65, 0x63, 0x65, 0x64,
	  0x65, 0x6e, 0x74, 0x65, 0x64, 0x69, 0x73, 0x20, 0x73, 0x69, 0x6d, 0x69, 0x6c,
	  0x61, 0x72, 0x20, 0x74, 0x6f, 0x65, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
	  0x6c, 0x79, 0x20, 0x69, 0x6e, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3a, 0x20,
	  0x62, 0x6f, 0x6c, 0x64, 0x3b, 0x69, 0x73, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x65,
	  0x64, 0x20, 0x74, 0x68, 0x65, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x74,
	  0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65,
	  0x20, 0x74, 0x68, 0x61, 0x74, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	  0x65, 0x64, 0x20, 0x74, 0x6f, 0x09, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x20, 0x6e,
	  0x61, 0x6d, 0x65, 0x3d, 0x22, 0x61, 0x72, 0x65, 0x20, 0x74, 0x79, 0x70, 0x69,
	  0x63, 0x61, 0x6c, 0x6c, 0x79, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74,
	  0x20, 0x77, 0x69, 0x74, 0x68, 0x48, 0x6f, 0x77, 0x65, 0x76, 0x65, 0x72, 0x2c,
	  0x20, 0x74, 0x68, 0x65, 0x20, 0x41, 0x6e, 0x20, 0x65, 0x78, 0x61, 0x6d, 0x70,
	  0x6c, 0x65, 0x20, 0x6f, 0x66, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x64,
	  0x20, 0x77, 0x69, 0x74, 0x68, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x69,
	  0x65, 0x73, 0x20, 0x6f, 0x66, 0x72, 0x61, 0x74, 0x68, 0x65, 0x72, 0x20, 0x74,
	  0x68, 0x61, 0x6e, 0x20, 0x61, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x6c, 0x6c,
	  0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x65, 0x73, 0x73, 0x61, 0x72,
	  0x79, 0x20, 0x66, 0x6f, 0x72, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	  0x20, 0x74, 0x68, 0x61, 0x74, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	  0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x6f, 0x6c, 0x69, 0x74, 0x69, 0x63, 0x61,
	  0x6c, 0x20, 0x61, 0x6e, 0x64, 0x26, 0x6e, 0x62, 0x73, 0x70, 0x3b, 0x26, 0x6e,
	  0x62, 0x73, 0x70, 0x3b, 0x3c, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	  0x65, 0x73, 0x20, 0x74, 0x6f, 0x74, 0x68, 0x65, 0x20, 0x73, 0x61, 0x6d, 0x65,
	  0x20, 0x79, 0x65, 0x61, 0x72, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6d, 0x65,
	  0x6e, 0x74, 0x20, 0x6f, 0x66, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69,
	  0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x68, 0x61, 0x76, 0x65, 0x20, 0x6e, 0x6f, 0x74,
	  0x20, 0x62, 0x65, 0x65, 0x6e, 0x73, 0x65, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x20,
	  0x79, 0x65, 0x61, 0x72, 0x73, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65,
	  0x6e, 0x74, 0x20, 0x74, 0x6f, 0x09, 0x09, 0x3c, 0x75, 0x6c, 0x20, 0x63, 0x6c,
	  0x61, 0x73, 0x73, 0x3d, 0x22, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x69, 0x7a,
	  0x61, 0x74, 0x69, 0x6f, 0x6e, 0x31, 0x39, 0x74, 0x68, 0x20, 0x63, 0x65, 0x6e,
	  0x74, 0x75, 0x72, 0x79, 0x2c, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69,
	  0x6f, 0x6e, 0x65, 0x72, 0x73, 0x74, 0x68, 0x61, 0x74, 0x20, 0x68, 0x65, 0x20,
	  0x77, 0x6f, 0x75, 0x6c, 0x64, 0x61, 0x6e, 0x64, 0x20, 0x63, 0x6f, 0x6e, 0x74,
	  0x69, 0x6e, 0x75, 0x65, 0x64, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x74, 0x69,
	  0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x69, 0x73, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e,
	  0x65, 0x64, 0x20, 0x61, 0x73, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x20, 0x6f,
	  0x66, 0x20, 0x74, 0x68, 0x65, 0x74, 0x68, 0x65, 0x20, 0x61, 0x6d, 0x6f, 0x75,
	  0x6e, 0x74, 0x20, 0x6f, 0x66, 0x3e, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x73, 0x74,
	  0x79, 0x6c, 0x65, 0x3d, 0x22, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65,
	  0x6e, 0x74, 0x20, 0x6f, 0x66, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e,
	  0x74, 0x69, 0x61, 0x74, 0x65, 0x62, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x20,
	  0x61, 0x62, 0x6f, 0x75, 0x74, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x2d, 0x6c,
	  0x65, 0x66, 0x74, 0x3a, 0x20, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69,
	  0x63, 0x61, 0x6c, 0x6c, 0x79, 0x74, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x20,
	  0x6f, 0x66, 0x20, 0x61, 0x73, 0x53, 0x6f, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20,
	  0x74, 0x68, 0x65, 0x73, 0x65, 0x0a, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x63, 0x6c,
	  0x61, 0x73, 0x73, 0x3d, 0x22, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x63, 0x6c,
	  0x61, 0x73, 0x73, 0x3d, 0x22, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64,
	  0x20, 0x77, 0x69, 0x74, 0x68, 0x69, 0x73, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x6f,
	  0x66, 0x20, 0x74, 0x68, 0x65, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f,
	  0x6e, 0x20, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x63,
	  0x65, 0x64, 0x20, 0x62, 0x79, 0x72, 0x65, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69,
	  0x6f, 0x6e, 0x20, 0x61, 0x73, 0x0a, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x20, 0x6e,
	  0x61, 0x6d, 0x65, 0x3d, 0x22, 0x61, 0x63, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64,
	  0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0a, 0x3c,
	  0x2f, 0x64, 0x69, 0x76, 0x3e, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x20, 0x70, 0x61,
	  0x72, 0x74, 0x20, 0x6f, 0x66, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74,
	  0x65, 0x20, 0x66, 0x6f, 0x72, 0x74, 0x68, 0x65, 0x20, 0x73, 0x6f, 0x2d, 0x63,
	  0x61, 0x6c, 0x6c, 0x65, 0x64, 0x20, 0x61, 0x67, 0x61, 0x69, 0x6e, 0x73, 0x74,
	  0x20, 0x74, 0x68, 0x65, 0x20, 0x49, 0x6e, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20,
	  0x63, 0x61, 0x73, 0x65, 0x2c, 0x77, 0x61, 0x73, 0x20, 0x61, 0x70, 0x70, 0x6f,
	  0x69, 0x6e, 0x74, 0x65, 0x64, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x20,
	  0x74, 0x6f, 0x20, 0x62, 0x65, 0x48, 0x6f, 0x77, 0x65, 0x76, 0x65, 0x72, 0x2c,
	  0x20, 0x74, 0x68, 0x69, 0x73, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65,
	  0x6e, 0x74, 0x20, 0x6f, 0x66, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x6d, 0x61,
	  0x69, 0x6e, 0x69, 0x6e, 0x67, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x20, 0x6f,
	  0x6e, 0x20, 0x74, 0x68, 0x65, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x75, 0x6c,
	  0x61, 0x72, 0x6c, 0x79, 0x20, 0x64, 0x65, 0x61, 0x6c, 0x20, 0x77, 0x69, 0x74,
	  0x68, 0x20, 0x74, 0x68, 0x65, 0x0a, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x73, 0x74,
	  0x79, 0x6c, 0x65, 0x3d, 0x22, 0x61, 0x6c, 0x6d, 0x6f, 0x73, 0x74, 0x20, 0x61,
	  0x6c, 0x77, 0x61, 0x79, 0x73, 0x61, 0x72, 0x65, 0x20, 0x63, 0x75, 0x72, 0x72,
	  0x65, 0x6e, 0x74, 0x6c, 0x79, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	  0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x70, 0x68, 0x69, 0x6c, 0x6f, 0x73, 0x6f, 0x70,
	  0x68, 0x79, 0x20, 0x6f, 0x66, 0x66, 0x6f, 0x72, 0x20, 0x6d, 0x6f, 0x72, 0x65,
	  0x20, 0x74, 0x68, 0x61, 0x6e, 0x63, 0x69, 0x76, 0x69, 0x6c, 0x69, 0x7a, 0x61,
	  0x74, 0x69, 0x6f, 0x6e, 0x73, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69,
	  0x73, 0x6c, 0x61, 0x6e, 0x64, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64,
	  0x49, 0x6e, 0x64, 0x65, 0x78, 0x63, 0x61, 0x6e, 0x20, 0x72, 0x65, 0x73, 0x75,
	  0x6c, 0x74, 0x20, 0x69, 0x6e, 0x22, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3d,
	  0x22, 0x22, 0x20, 0x2f, 0x3e, 0x74, 0x68, 0x65, 0x20, 0x73, 0x74, 0x72, 0x75,
	  0x63, 0x74, 0x75, 0x72, 0x65, 0x20, 0x2f, 0x3e, 0x3c, 0x2f, 0x61, 0x3e, 0x3c,
	  0x2f, 0x64, 0x69, 0x76, 0x3e, 0x4d, 0x61, 0x6e, 0x79, 0x20, 0x6f, 0x66, 0x20,
	  0x74, 0x68, 0x65, 0x73, 0x65, 0x63, 0x61, 0x75, 0x73, 0x65, 0x64, 0x20, 0x62,
	  0x79, 0x20, 0x74, 0x68, 0x65, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x55,
	  0x6e, 0x69, 0x74, 0x65, 0x64, 0x73, 0x70, 0x61, 0x6e, 0x20, 0x63, 0x6c, 0x61,
	  0x73, 0x73, 0x3d, 0x22, 0x6d, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x74,
	  0x72, 0x61, 0x63, 0x65, 0x64, 0x69, 0x73, 0x20, 0x72, 0x65, 0x6c, 0x61, 0x74,
	  0x65, 0x64, 0x20, 0x74, 0x6f, 0x62, 0x65, 0x63, 0x61, 0x6d, 0x65, 0x20, 0x6f,
	  0x6e, 0x65, 0x20, 0x6f, 0x66, 0x69, 0x73, 0x20, 0x66, 0x72, 0x65, 0x71, 0x75,
	  0x65, 0x6e, 0x74, 0x6c, 0x79, 0x6c, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x20, 0x69,
	  0x6e, 0x20, 0x74, 0x68, 0x65, 0x74, 0x68, 0x65, 0x6f, 0x72, 0x65, 0x74, 0x69,
	  0x63, 0x61, 0x6c, 0x6c, 0x79, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e,
	  0x67, 0x20, 0x74, 0x68, 0x65, 0x52, 0x65, 0x76, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	  0x6f, 0x6e, 0x61, 0x72, 0x79, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6d, 0x65,
	  0x6e, 0x74, 0x20, 0x69, 0x6e, 0x69, 0x73, 0x20, 0x64, 0x65, 0x74, 0x65, 0x72,
	  0x6d, 0x69, 0x6e, 0x65, 0x64, 0x74, 0x68, 0x65, 0x20, 0x70, 0x6f, 0x6c, 0x69,
	  0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63,
	  0x65, 0x64, 0x20, 0x69, 0x6e, 0x73, 0x75, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65,
	  0x6e, 0x74, 0x20, 0x74, 0x6f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	  0x69, 0x6f, 0x6e, 0x22, 0x3e, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x20, 0x73, 0x74,
	  0x6f, 0x72, 0x69, 0x65, 0x73, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69,
	  0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x61, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x77, 0x68,
	  0x65, 0x74, 0x68, 0x65, 0x72, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x20, 0x66, 0x6f,
	  0x72, 0x20, 0x69, 0x74, 0x73, 0x77, 0x61, 0x73, 0x20, 0x69, 0x6e, 0x69, 0x74,
	  0x69, 0x61, 0x6c, 0x6c, 0x79, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x3a,
	  0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x65, 0x78,
	  0x61, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x69, 0x6e,
	  0x63, 0x69, 0x70, 0x61, 0x6c, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x73,
	  0x20, 0x6f, 0x66, 0x20, 0x61, 0x72, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x7a,
	  0x65, 0x64, 0x20, 0x61, 0x73, 0x2f, 0x62, 0x6f, 0x64, 0x79, 0x3e, 0x3c, 0x2f,
	  0x68, 0x74, 0x6d, 0x6c, 0x3e, 0x61, 0x20, 0x73, 0x75, 0x62, 0x73, 0x74, 0x61,
	  0x6e, 0x74, 0x69, 0x61, 0x6c, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	  0x75, 0x63, 0x74, 0x65, 0x64, 0x68, 0x65, 0x61, 0x64, 0x20, 0x6f, 0x66, 0x20,
	  0x73, 0x74, 0x61, 0x74, 0x65, 0x72, 0x65, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e,
	  0x63, 0x65, 0x20, 0x74, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x67, 0x72, 0x61,
	  0x64, 0x75, 0x61, 0x74, 0x65, 0x54, 0x68, 0x65, 0x72, 0x65, 0x20, 0x61, 0x72,
	  0x65, 0x20, 0x74, 0x77, 0x6f, 0x67, 0x72, 0x61, 0x76, 0x69, 0x74, 0x61, 0x74,
	  0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x61, 0x72, 0x65, 0x20, 0x64, 0x65, 0x73, 0x63,
	  0x72, 0x69, 0x62, 0x65, 0x64, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f,
	  0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x20, 0x61,
	  0x73, 0x20, 0x74, 0x68, 0x65, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x68,
	  0x65, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x70, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	  0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x66, 0x75, 0x6e, 0x64, 0x61, 0x6d, 0x65, 0x6e,
	  0x74, 0x61, 0x6c, 0x6c, 0x79, 0x64, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65,
	  0x64, 0x20, 0x74, 0x68, 0x65, 0x61, 0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20,
	  0x6f, 0x74, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65,
	  0x20, 0x77, 0x69, 0x74, 0x68, 0x77, 0x61, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x63,
	  0x65, 0x64, 0x20, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69,
	  0x76, 0x65, 0x6c, 0x79, 0x2c, 0x61, 0x6e, 0x64, 0x20, 0x70, 0x6f, 0x6c, 0x69,
	  0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f,
	  0x72, 0x74, 0x20, 0x6f, 0x66, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x20, 0x69,
	  0x6e, 0x20, 0x74, 0x68, 0x65, 0x32, 0x30, 0x74, 0x68, 0x20, 0x63, 0x65, 0x6e,
	  0x74, 0x75, 0x72, 0x79, 0x2e, 0x61, 0x6e, 0x64, 0x20, 0x70, 0x75, 0x62, 0x6c,
	  0x69, 0x73, 0x68, 0x65, 0x64, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x72,
	  0x74, 0x62, 0x65, 0x61, 0x74, 0x74, 0x6f, 0x20, 0x75, 0x6e, 0x64, 0x65, 0x72,
	  0x73, 0x74, 0x61, 0x6e, 0x64, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x73,
	  0x74, 0x61, 0x74, 0x65, 0x73, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	  0x65, 0x6e, 0x74, 0x61, 0x6c, 0x66, 0x69, 0x72, 0x73, 0x74, 0x20, 0x68, 0x61,
	  0x6c, 0x66, 0x20, 0x6f, 0x66, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65,
	  0x73, 0x20, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63,
	  0x74, 0x75, 0x72, 0x61, 0x6c, 0x62, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x69,
	  0x64, 0x65, 0x72, 0x65, 0x64, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	  0x72, 0x69, 0x7a, 0x65, 0x64, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x49, 0x6e, 0x74,
	  0x65, 0x72, 0x76, 0x61, 0x6c, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74,
	  0x61, 0x74, 0x69, 0x76, 0x65, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69,
	  0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x77, 0x61, 0x73, 0x20, 0x73, 0x75, 0x63, 0x63,
	  0x65, 0x65, 0x64, 0x65, 0x64, 0x61, 0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x72,
	  0x65, 0x20, 0x61, 0x72, 0x65, 0x61, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x71,
	  0x75, 0x65, 0x6e, 0x63, 0x65, 0x74, 0x68, 0x65, 0x20, 0x50, 0x72, 0x65, 0x73,
	  0x69, 0x64, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x73, 0x6f, 0x20, 0x69, 0x6e, 0x63,
	  0x6c, 0x75, 0x64, 0x65, 0x64, 0x66, 0x72, 0x65, 0x65, 0x20, 0x73, 0x6f, 0x66,
	  0x74, 0x77, 0x61, 0x72, 0x65, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69,
	  0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65,
	  0x64, 0x20, 0x74, 0x68, 0x65, 0x77, 0x61, 0x73, 0x20, 0x64, 0x65, 0x73, 0x74,
	  0x72, 0x6f, 0x79, 0x65, 0x64, 0x61, 0x77, 0x61, 0x79, 0x20, 0x66, 0x72, 0x6f,
	  0x6d, 0x20, 0x74, 0x68, 0x65, 0x3b, 0x0a, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69,
	  0x70, 0x74, 0x3e, 0x0a, 0x3c, 0x61, 0x6c, 0x74, 0x68, 0x6f, 0x75, 0x67, 0x68,
	  0x20, 0x74, 0x68, 0x65, 0x79, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	  0x20, 0x62, 0x79, 0x20, 0x61, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x70, 0x6f, 0x77,
	  0x65, 0x72, 0x66, 0x75, 0x6c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x65, 0x64,
	  0x20, 0x69, 0x6e, 0x20, 0x61, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69,
	  0x74, 0x79, 0x20, 0x6f, 0x66, 0x48, 0x6f, 0x77, 0x65, 0x76, 0x65, 0x72, 0x2c,
	  0x20, 0x6d, 0x61, 0x6e, 0x79, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x65, 0x73,
	  0x69, 0x64, 0x65, 0x6e, 0x74, 0x48, 0x6f, 0x77, 0x65, 0x76, 0x65, 0x72, 0x2c,
	  0x20, 0x73, 0x6f, 0x6d, 0x65, 0x69, 0x73, 0x20, 0x74, 0x68, 0x6f, 0x75, 0x67,
	  0x68, 0x74, 0x20, 0x74, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x20, 0x74, 0x68,
	  0x65, 0x20, 0x65, 0x6e, 0x64, 0x77, 0x61, 0x73, 0x20, 0x61, 0x6e, 0x6e, 0x6f,
	  0x75, 0x6e, 0x63, 0x65, 0x64, 0x61, 0x72, 0x65, 0x20, 0x69, 0x6d, 0x70, 0x6f,
	  0x72, 0x74, 0x61, 0x6e, 0x74, 0x61, 0x6c, 0x73, 0x6f, 0x20, 0x69, 0x6e, 0x63,
	  0x6c, 0x75, 0x64, 0x65, 0x73, 0x3e, 0x3c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20,
	  0x74, 0x79, 0x70, 0x65, 0x3d, 0x74, 0x68, 0x65, 0x20, 0x63, 0x65, 0x6e, 0x74,
	  0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x44, 0x4f, 0x20, 0x4e, 0x4f, 0x54, 0x20,
	  0x41, 0x4c, 0x54, 0x45, 0x52, 0x75, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20,
	  0x72, 0x65, 0x66, 0x65, 0x72, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x2f, 0x3f,
	  0x73, 0x6f, 0x72, 0x74, 0x3d, 0x74, 0x68, 0x61, 0x74, 0x20, 0x68, 0x61, 0x64,
	  0x20, 0x62, 0x65, 0x65, 0x6e, 0x74, 0x68, 0x65, 0x20, 0x62, 0x61, 0x73, 0x69,
	  0x73, 0x20, 0x66, 0x6f, 0x72, 0x68, 0x61, 0x73, 0x20, 0x64, 0x65, 0x76, 0x65,
	  0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73,
	  0x75, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74,
	  0x69, 0x76, 0x65, 0x6c, 0x79, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	  0x64, 0x20, 0x74, 0x68, 0x65, 0x73, 0x75, 0x63, 0x68, 0x20, 0x61, 0x73, 0x20,
	  0x74, 0x68, 0x6f, 0x73, 0x65, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x75,
	  0x6c, 0x74, 0x69, 0x6e, 0x67, 0x69, 0x73, 0x20, 0x69, 0x6d, 0x70, 0x6f, 0x73,
	  0x73, 0x69, 0x62, 0x6c, 0x65, 0x76, 0x61, 0x72, 0x69, 0x6f, 0x75, 0x73, 0x20,
	  0x6f, 0x74, 0x68, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x74, 0x68, 0x20, 0x41, 0x66,
	  0x72, 0x69, 0x63, 0x61, 0x6e, 0x68, 0x61, 0x76, 0x65, 0x20, 0x74, 0x68, 0x65,
	  0x20, 0x73, 0x61, 0x6d, 0x65, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76,
	  0x65, 0x6e, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68,
	  0x20, 0x63, 0x61, 0x73, 0x65, 0x3b, 0x20, 0x74, 0x65, 0x78, 0x74, 0x2d, 0x61,
	  0x6c, 0x69, 0x67, 0x6e, 0x3a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	  0x65, 0x20, 0x61, 0x6e, 0x64, 0x3b, 0x20, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72,
	  0x6f, 0x75, 0x6e, 0x64, 0x3a, 0x72, 0x65, 0x67, 0x61, 0x72, 0x64, 0x69, 0x6e,
	  0x67, 0x20, 0x74, 0x68, 0x65, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65,
	  0x64, 0x20, 0x74, 0x68, 0x65, 0x69, 0x73, 0x20, 0x61, 0x6c, 0x73, 0x6f, 0x20,
	  0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x6d,
	  0x61, 0x72, 0x67, 0x69, 0x6e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e,
	  0x67, 0x20, 0x74, 0x68, 0x65, 0x62, 0x61, 0x68, 0x61, 0x73, 0x61, 0x20, 0x4d,
	  0x65, 0x6c, 0x61, 0x79, 0x75, 0x6e, 0x6f, 0x72, 0x73, 0x6b, 0x20, 0x62, 0x6f,
	  0x6b, 0x6d, 0xc3, 0xa5, 0x6c, 0x6e, 0x6f, 0x72, 0x73, 0x6b, 0x20, 0x6e, 0x79,
	  0x6e, 0x6f, 0x72, 0x73, 0x6b, 0x73, 0x6c, 0x6f, 0x76, 0x65, 0x6e, 0xc5, 0xa1,
	  0xc4, 0x8d, 0x69, 0x6e, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x63,
	  0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x63, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61,
	  0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x63, 0x6f, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	  0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	  0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x22, 0x3e, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x63,
	  0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x64, 0x69, 0x73, 0x61, 0x6d, 0x62, 0x69,
	  0x67, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	  0x4e, 0x61, 0x6d, 0x65, 0x27, 0x2c, 0x20, 0x27, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	  0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x69, 0x6d, 0x75,
	  0x6c, 0x74, 0x61, 0x6e, 0x65, 0x6f, 0x75, 0x73, 0x6c, 0x79, 0x74, 0x72, 0x61,
	  0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	  0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x6d,
	  0x61, 0x72, 0x67, 0x69, 0x6e, 0x2d, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x3a,
	  0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	  0x79, 0x3c, 0x21, 0x5b, 0x65, 0x6e, 0x64, 0x69, 0x66, 0x5d, 0x2d, 0x2d, 0x3e,
	  0x0a, 0x3c, 0x2f, 0x3e, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x20, 0x6e, 0x61, 0x6d,
	  0x65, 0x3d, 0x22, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	  0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x74, 0x72, 0x75,
	  0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	  0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2d,
	  0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x3a, 0x3c, 0x2f, 0x68, 0x65, 0x61, 0x64,
	  0x3e, 0x0a, 0x3c, 0x62, 0x6f, 0x64, 0x79, 0x3e, 0x3d, 0x68, 0x74, 0x74, 0x70,
	  0x25, 0x33, 0x41, 0x25, 0x32, 0x46, 0x25, 0x32, 0x46, 0x3c, 0x66, 0x6f, 0x72,
	  0x6d, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x3d, 0x22, 0x6d, 0x65, 0x74,
	  0x68, 0x6f, 0x64, 0x3d, 0x22, 0x70, 0x6f, 0x73, 0x74, 0x22, 0x20, 0x2f, 0x66,
	  0x61, 0x76, 0x69, 0x63, 0x6f, 0x6e, 0x2e, 0x69, 0x63, 0x6f, 0x22, 0x20, 0x7d,
	  0x29, 0x3b, 0x0a, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x0a,
	  0x2e, 0x73, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	  0x28, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	  0x6f, 0x6e, 0x3d, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x41, 0x72, 0x72, 0x61, 0x79,
	  0x28, 0x29, 0x3b, 0x3c, 0x21, 0x5b, 0x65, 0x6e, 0x64, 0x69, 0x66, 0x5d, 0x2d,
	  0x2d, 0x3e, 0x0d, 0x0a, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x3a, 0x62,
	  0x6c, 0x6f, 0x63, 0x6b, 0x3b, 0x55, 0x6e, 0x66, 0x6f, 0x72, 0x74, 0x75, 0x6e,
	  0x61, 0x74, 0x65, 0x6c, 0x79, 0x2c, 0x22, 0x3e, 0x26, 0x6e, 0x62, 0x73, 0x70,
	  0x3b, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x2f, 0x66, 0x61, 0x76, 0x69, 0x63,
	  0x6f, 0x6e, 0x2e, 0x69, 0x63, 0x6f, 0x22, 0x3e, 0x3d, 0x27, 0x73, 0x74, 0x79,
	  0x6c, 0x65, 0x73, 0x68, 0x65, 0x65, 0x74, 0x27, 0x20, 0x69, 0x64, 0x65, 0x6e,
	  0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x66,
	  0x6f, 0x72, 0x20, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2c, 0x3c, 0x6c,
	  0x69, 0x3e, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x2f, 0x61,
	  0x6e, 0x20, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65,
	  0x61, 0x73, 0x20, 0x61, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x20, 0x6f,
	  0x66, 0x70, 0x74, 0x22, 0x3e, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	  0x3e, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x73, 0x75, 0x62, 0x6d, 0x69,
	  0x74, 0x22, 0x20, 0x0a, 0x28, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	  0x28, 0x29, 0x20, 0x7b, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	  0x61, 0x74, 0x69, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x61, 0x63, 0x74,
	  0x69, 0x6f, 0x6e, 0x3d, 0x22, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f,
	  0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x73,
	  0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x74, 0x79, 0x6c,
	  0x65, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x20, 0x41, 0x63, 0x63,
	  0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x6f, 0x20, 0x68, 0x69, 0x64,
	  0x64, 0x65, 0x6e, 0x22, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x22, 0x61, 0x6c,
	  0x6f, 0x6e, 0x67, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x64,
	  0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x62, 0x6f, 0x64, 0x79, 0x2e,
	  0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x6c, 0x79,
	  0x20, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	  0x6e, 0x73, 0x70, 0x6f, 0x73, 0x74, 0x22, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f,
	  0x6e, 0x3d, 0x22, 0x6d, 0x65, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x26, 0x71,
	  0x75, 0x6f, 0x74, 0x3b, 0x2d, 0x2d, 0x3c, 0x21, 0x5b, 0x65, 0x6e, 0x64, 0x69,
	  0x66, 0x5d, 0x2d, 0x2d, 0x3e, 0x50, 0x72, 0x69, 0x6d, 0x65, 0x20, 0x4d, 0x69,
	  0x6e, 0x69, 0x73, 0x74, 0x65, 0x72, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	  0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x3c, 0x2f, 0x61, 0x3e, 0x20, 0x3c,
	  0x61, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x74, 0x68, 0x65, 0x20, 0x68,
	  0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x6f, 0x6e, 0x6d,
	  0x6f, 0x75, 0x73, 0x65, 0x6f, 0x76, 0x65, 0x72, 0x3d, 0x22, 0x74, 0x68, 0x65,
	  0x20, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x68, 0x72,
	  0x65, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77,
	  0x61, 0x73, 0x20, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x6c, 0x79,
	  0x77, 0x61, 0x73, 0x20, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	  0x64, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	  0x6f, 0x6e, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74,
	  0x69, 0x76, 0x65, 0x61, 0x72, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x64,
	  0x65, 0x72, 0x65, 0x64, 0x3c, 0x21, 0x5b, 0x65, 0x6e, 0x64, 0x69, 0x66, 0x5d,
	  0x2d, 0x2d, 0x3e, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x73, 0x20,
	  0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73,
	  0x69, 0x74, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x6e, 0x20, 0x63, 0x6f, 0x6e,
	  0x74, 0x72, 0x61, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x6c, 0x61, 0x63,
	  0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x3d, 0x22, 0x69, 0x6e, 0x20, 0x74,
	  0x68, 0x65, 0x20, 0x63, 0x61, 0x73, 0x65, 0x20, 0x6f, 0x66, 0x69, 0x6e, 0x74,
	  0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x63, 0x6f,
	  0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x73,
	  0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2d,
	  0x3a, 0x20, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x29, 0x20,
	  0x7b, 0x42, 0x65, 0x63, 0x61, 0x75, 0x73, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74,
	  0x68, 0x65, 0x2d, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x2e, 0x64, 0x74, 0x64,
	  0x22, 0x3e, 0x0a, 0x3c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x63, 0x6c, 0x61,
	  0x73, 0x73, 0x3d, 0x22, 0x61, 0x63, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69,
	  0x65, 0x64, 0x20, 0x62, 0x79, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20,
	  0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x3c, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	  0x20, 0x73, 0x72, 0x63, 0x3d, 0x22, 0x2f, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	  0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70,
	  0x65, 0x6f, 0x70, 0x6c, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x61,
	  0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x73, 0x29, 0x3b,
	  0x20, 0x6a, 0x73, 0x2e, 0x69, 0x64, 0x20, 0x3d, 0x20, 0x69, 0x64, 0x22, 0x20,
	  0x77, 0x69, 0x64, 0x74, 0x68, 0x3d, 0x22, 0x31, 0x30, 0x30, 0x25, 0x22, 0x72,
	  0x65, 0x67, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20,
	  0x52, 0x6f, 0x6d, 0x61, 0x6e, 0x20, 0x43, 0x61, 0x74, 0x68, 0x6f, 0x6c, 0x69,
	  0x63, 0x61, 0x6e, 0x20, 0x69, 0x6e, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65,
	  0x6e, 0x74, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x20, 0x74,
	  0x68, 0x65, 0x20, 0x2e, 0x67, 0x69, 0x66, 0x22, 0x20, 0x77, 0x69, 0x64, 0x74,
	  0x68, 0x3d, 0x22, 0x31, 0x74, 0x68, 0x65, 0x20, 0x66, 0x6f, 0x6c, 0x6c, 0x6f,
	  0x77, 0x69, 0x6e, 0x67, 0x20, 0x64, 0x69, 0x73, 0x63, 0x72, 0x69, 0x6d, 0x69,
	  0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x63, 0x68, 0x61, 0x65, 0x6f,
	  0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x20,
	  0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x6a, 0x73, 0x22, 0x3e,
	  0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x63, 0x6f, 0x6d, 0x62,
	  0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x6d, 0x61,
	  0x72, 0x67, 0x69, 0x6e, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3d, 0x22, 0x63, 0x72,
	  0x65, 0x61, 0x74, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x28, 0x77,
	  0x2e, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x28,
	  0x3c, 0x2f, 0x61, 0x3e, 0x3c, 0x2f, 0x74, 0x64, 0x3e, 0x3c, 0x2f, 0x74, 0x72,
	  0x3e, 0x73, 0x72, 0x63, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f,
	  0x2f, 0x61, 0x49, 0x6e, 0x20, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x75, 0x6c,
	  0x61, 0x72, 0x2c, 0x20, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x3d, 0x22, 0x6c, 0x65,
	  0x66, 0x74, 0x22, 0x20, 0x43, 0x7a, 0x65, 0x63, 0x68, 0x20, 0x52, 0x65, 0x70,
	  0x75, 0x62, 0x6c, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x65, 0x64, 0x20, 0x4b,
	  0x69, 0x6e, 0x67, 0x64, 0x6f, 0x6d, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x73, 0x70,
	  0x6f, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x6c, 0x75,
	  0x64, 0x65, 0x64, 0x20, 0x74, 0x68, 0x61, 0x74, 0x2e, 0x68, 0x74, 0x6d, 0x6c,
	  0x22, 0x20, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x3d, 0x22, 0x28, 0x66, 0x75, 0x6e,
	  0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x28, 0x29, 0x20, 0x7b, 0x63, 0x6f, 0x6d,
	  0x65, 0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x61, 0x70,
	  0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x3c,
	  0x73, 0x70, 0x61, 0x6e, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x73,
	  0x62, 0x65, 0x6c, 0x69, 0x65, 0x76, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x62,
	  0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x28, 0x27, 0x73, 0x63, 0x72, 0x69, 0x70,
	  0x74, 0x27, 0x3c, 0x2f, 0x61, 0x3e, 0x0a, 0x3c, 0x2f, 0x6c, 0x69, 0x3e, 0x0a,
	  0x3c, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x20, 0x64, 0x69, 0x66, 0x66, 0x65,
	  0x72, 0x65, 0x6e, 0x74, 0x3e, 0x3c, 0x73, 0x70, 0x61, 0x6e, 0x20, 0x63, 0x6c,
	  0x61, 0x73, 0x73, 0x3d, 0x22, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x76,
	  0x61, 0x6c, 0x75, 0x65, 0x3d, 0x22, 0x28, 0x61, 0x6c, 0x73, 0x6f, 0x20, 0x6b,
	  0x6e, 0x6f, 0x77, 0x6e, 0x20, 0x61, 0x73, 0x09, 0x3c, 0x6c, 0x69, 0x3e, 0x3c,
	  0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x3e, 0x3c, 0x69, 0x6e, 0x70,
	  0x75, 0x74, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x22, 0x73, 0x65, 0x70, 0x61,
	  0x72, 0x61, 0x74, 0x65, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x72, 0x65, 0x66,
	  0x65, 0x72, 0x72, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x73, 0x20, 0x76,
	  0x61, 0x6c, 0x69, 0x67, 0x6e, 0x3d, 0x22, 0x74, 0x6f, 0x70, 0x22, 0x3e, 0x66,
	  0x6f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
	  0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x6f,
	  0x20, 0x63, 0x61, 0x72, 0x62, 0x6f, 0x6e, 0x20, 0x64, 0x69, 0x6f, 0x78, 0x69,
	  0x64, 0x65, 0x0a, 0x0a, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x63, 0x6c, 0x61, 0x73,
	  0x73, 0x3d, 0x22, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x73, 0x65, 0x61,
	  0x72, 0x63, 0x68, 0x2d, 0x2f, 0x62, 0x6f, 0x64, 0x79, 0x3e, 0x0a, 0x3c, 0x2f,
	  0x68, 0x74, 0x6d, 0x6c, 0x3e, 0x6f, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x75, 0x6e,
	  0x69, 0x74, 0x79, 0x20, 0x74, 0x6f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	  0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3c, 0x2f, 0x68, 0x65, 0x61, 0x64,
	  0x3e, 0x0d, 0x0a, 0x3c, 0x62, 0x6f, 0x64, 0x79, 0x20, 0x73, 0x74, 0x79, 0x6c,
	  0x65, 0x3d, 0x22, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3a, 0x54, 0x69, 0xe1, 0xba,
	  0xbf, 0x6e, 0x67, 0x20, 0x56, 0x69, 0xe1, 0xbb, 0x87, 0x74, 0x63, 0x68, 0x61,
	  0x6e, 0x67, 0x65, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x62, 0x6f,
	  0x72, 0x64, 0x65, 0x72, 0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3a, 0x23, 0x30,
	  0x22, 0x20, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3d, 0x22, 0x30, 0x22, 0x20,
	  0x3c, 0x2f, 0x73, 0x70, 0x61, 0x6e, 0x3e, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e,
	  0x3c, 0x77, 0x61, 0x73, 0x20, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	  0x65, 0x64, 0x22, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x74, 0x65, 0x78,
	  0x74, 0x22, 0x20, 0x29, 0x3b, 0x0a, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70,
	  0x74, 0x3e, 0x0a, 0x0a, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e,
	  0x74, 0x20, 0x6f, 0x66, 0x20, 0x65, 0x63, 0x63, 0x6c, 0x65, 0x73, 0x69, 0x61,
	  0x73, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x74, 0x68, 0x65, 0x72, 0x65, 0x20, 0x68,
	  0x61, 0x73, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	  0x69, 0x6e, 0x67, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x3c, 0x2f, 0x62, 0x6f, 0x64,
	  0x79, 0x3e, 0x3c, 0x2f, 0x68, 0x74, 0x6d, 0x6c, 0x3e, 0x68, 0x61, 0x73, 0x20,
	  0x6e, 0x65, 0x76, 0x65, 0x72, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x74, 0x68, 0x65,
	  0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x69, 0x6e,
	  0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x74, 0x6f, 0x61,
	  0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x20,
	  0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0a, 0x0a, 0x3c, 0x64, 0x69, 0x76, 0x20,
	  0x69, 0x77, 0x61, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x72,
	  0x65, 0x64, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x20,
	  0x74, 0x68, 0x65, 0x22, 0x20, 0x2f, 0x3e, 0x3c, 0x2f, 0x61, 0x3e, 0x3c, 0x2f,
	  0x64, 0x69, 0x76, 0x3e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	  0x6e, 0x20, 0x6f, 0x66, 0x20, 0x64, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x65,
	  0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	  0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74,
	  0x2d, 0x63, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x74, 0x6f, 0x20, 0x62, 0x65,
	  0x20, 0x63, 0x6f, 0x6e, 0x66, 0x75, 0x73, 0x65, 0x64, 0x6d, 0x65, 0x6d, 0x62,
	  0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x64,
	  0x64, 0x69, 0x6e, 0x67, 0x2d, 0x72, 0x69, 0x67, 0x68, 0x74, 0x3a, 0x74, 0x72,
	  0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x69,
	  0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	  0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x27, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	  0x2f, 0x77, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x20, 0x6f, 0x72, 0x20, 0x6e,
	  0x6f, 0x74, 0x54, 0x68, 0x65, 0x72, 0x65, 0x20, 0x61, 0x72, 0x65, 0x20, 0x61,
	  0x6c, 0x73, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x65, 0x20, 0x61, 0x72, 0x65, 0x20,
	  0x6d, 0x61, 0x6e, 0x79, 0x61, 0x20, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x20, 0x6e,
	  0x75, 0x6d, 0x62, 0x65, 0x72, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x70, 0x61,
	  0x72, 0x74, 0x73, 0x20, 0x6f, 0x66, 0x69, 0x6d, 0x70, 0x6f, 0x73, 0x73, 0x69,
	  0x62, 0x6c, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73,
	  0x3d, 0x22, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	  0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x2e, 0x20, 0x48, 0x6f,
	  0x77, 0x65, 0x76, 0x65, 0x72, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x61, 0x6e, 0x64,
	  0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x41, 0x74,
	  0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x6e, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x62,
	  0x65, 0x63, 0x61, 0x75, 0x73, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x74, 0x73,
	  0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x74, 0x68,
	  0x65, 0x3c, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	  0x3d, 0x22, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x3d, 0x22, 0x70, 0x6f,
	  0x73, 0x74, 0x22, 0x69, 0x74, 0x20, 0x69, 0x73, 0x20, 0x70, 0x6f, 0x73, 0x73,
	  0x69, 0x62, 0x6c, 0x65, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x6c, 0x69, 0x6b, 0x65,
	  0x6c, 0x79, 0x20, 0x74, 0x6f, 0x61, 0x6e, 0x20, 0x69, 0x6e, 0x63, 0x72, 0x65,
	  0x61, 0x73, 0x65, 0x20, 0x69, 0x6e, 0x68, 0x61, 0x76, 0x65, 0x20, 0x61, 0x6c,
	  0x73, 0x6f, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x73,
	  0x70, 0x6f, 0x6e, 0x64, 0x73, 0x20, 0x74, 0x6f, 0x61, 0x6e, 0x6e, 0x6f, 0x75,
	  0x6e, 0x63, 0x65, 0x64, 0x20, 0x74, 0x68, 0x61, 0x74, 0x61, 0x6c, 0x69, 0x67,
	  0x6e, 0x3d, 0x22, 0x72, 0x69, 0x67, 0x68, 0x74, 0x22, 0x3e, 0x6d, 0x61, 0x6e,
	  0x79, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x66, 0x6f,
	  0x72, 0x20, 0x6d, 0x61, 0x6e, 0x79, 0x20, 0x79, 0x65, 0x61, 0x72, 0x73, 0x65,
	  0x61, 0x72, 0x6c, 0x69, 0x65, 0x73, 0x74, 0x20, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	  0x62, 0x65, 0x63, 0x61, 0x75, 0x73, 0x65, 0x20, 0x69, 0x74, 0x20, 0x77, 0x61,
	  0x73, 0x70, 0x74, 0x22, 0x3e, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	  0x3e, 0x0d, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x3d, 0x22, 0x74, 0x6f,
	  0x70, 0x22, 0x20, 0x69, 0x6e, 0x68, 0x61, 0x62, 0x69, 0x74, 0x61, 0x6e, 0x74,
	  0x73, 0x20, 0x6f, 0x66, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67,
	  0x20, 0x79, 0x65, 0x61, 0x72, 0x0d, 0x0a, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x63,
	  0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x6f, 0x6e,
	  0x20, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	  0x76, 0x65, 0x72, 0x73, 0x69, 0x61, 0x6c, 0x20, 0x63, 0x6f, 0x6e, 0x63, 0x65,
	  0x72, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x61, 0x72, 0x67, 0x75,
	  0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x67, 0x6f, 0x76,
	  0x65, 0x72, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x61, 0x6e, 0x64, 0x61, 0x20,
	  0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x74, 0x6f, 0x74,
	  0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x20, 0x74, 0x6f,
	  0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68,
	  0x65, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x63, 0x6f, 0x6c, 0x6f,
	  0x72, 0x3a, 0x61, 0x6c, 0x74, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x20, 0x74, 0x68,
	  0x65, 0x72, 0x65, 0x62, 0x65, 0x73, 0x74, 0x20, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	  0x20, 0x66, 0x6f, 0x72, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x22, 0x20, 0x6e,
	  0x61, 0x6d, 0x65, 0x3d, 0x22, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69,
	  0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x74, 0x68,
	  0x61, 0x6e, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x67, 0x6e,
	  0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x43, 0x6f, 0x75, 0x6e, 0x63,
	  0x69, 0x6c, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x65, 0x64, 0x69, 0x74,
	  0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x20, 0x3c,
	  0x6d, 0x65, 0x74, 0x61, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x22, 0x45, 0x6e,
	  0x74, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x61,
	  0x77, 0x61, 0x79, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x20,
	  0x3b, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x2d, 0x72, 0x69, 0x67, 0x68, 0x74,
	  0x3a, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20,
	  0x6f, 0x66, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69,
	  0x6f, 0x6e, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20,
	  0x77, 0x69, 0x74, 0x68, 0x61, 0x6e, 0x64, 0x20, 0x6d, 0x61, 0x6e, 0x79, 0x20,
	  0x6f, 0x74, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x74, 0x68, 0x6f, 0x75, 0x67, 0x68,
	  0x20, 0x69, 0x74, 0x20, 0x69, 0x73, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x6e, 0x69,
	  0x6e, 0x67, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x3c, 0x73, 0x70, 0x61, 0x6e,
	  0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x64, 0x65, 0x73, 0x63, 0x65,
	  0x6e, 0x64, 0x61, 0x6e, 0x74, 0x73, 0x20, 0x6f, 0x66, 0x3c, 0x73, 0x70, 0x61,
	  0x6e, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x69, 0x20, 0x61, 0x6c,
	  0x69, 0x67, 0x6e, 0x3d, 0x22, 0x72, 0x69, 0x67, 0x68, 0x74, 0x22, 0x3c, 0x2f,
	  0x68, 0x65, 0x61, 0x64, 0x3e, 0x0a, 0x3c, 0x62, 0x6f, 0x64, 0x79, 0x20, 0x61,
	  0x73, 0x70, 0x65, 0x63, 0x74, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
	  0x68, 0x61, 0x73, 0x20, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x20, 0x62, 0x65, 0x65,
	  0x6e, 0x45, 0x75, 0x72, 0x6f, 0x70, 0x65, 0x61, 0x6e, 0x20, 0x55, 0x6e, 0x69,
	  0x6f, 0x6e, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x63, 0x65, 0x6e, 0x74,
	  0x20, 0x6f, 0x66, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x64, 0x69, 0x66, 0x66, 0x69,
	  0x63, 0x75, 0x6c, 0x74, 0x56, 0x69, 0x63, 0x65, 0x20, 0x50, 0x72, 0x65, 0x73,
	  0x69, 0x64, 0x65, 0x6e, 0x74, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74,
	  0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x20,
	  0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x69,
	  0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x74, 0x66, 0x6f, 0x6e, 0x74, 0x2d,
	  0x73, 0x69, 0x7a, 0x65, 0x3a, 0x31, 0x31, 0x70, 0x78, 0x65, 0x78, 0x70, 0x6c,
	  0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x74, 0x68, 0x65,
	  0x20, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x20, 0x6f, 0x66, 0x77, 0x72,
	  0x69, 0x74, 0x74, 0x65, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x09,
	  0x3c, 0x73, 0x70, 0x61, 0x6e, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22,
	  0x69, 0x73, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
	  0x20, 0x72, 0x65, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x20,
	  0x74, 0x6f, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x67, 0x72, 0x6f, 0x75,
	  0x6e, 0x64, 0x73, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x63, 0x6f, 0x6e, 0x74,
	  0x61, 0x69, 0x6e, 0x73, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67,
	  0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x20,
	  0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61,
	  0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x6d, 0x65, 0x61, 0x6e, 0x73, 0x20,
	  0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x6f, 0x75, 0x74, 0x73, 0x69,
	  0x64, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x73, 0x75, 0x70, 0x70,
	  0x6f, 0x72, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x3c, 0x69, 0x6e,
	  0x70, 0x75, 0x74, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x3c, 0x73,
	  0x70, 0x61, 0x6e, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x74, 0x28,
	  0x4d, 0x61, 0x74, 0x68, 0x2e, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x28, 0x29,
	  0x6d, 0x6f, 0x73, 0x74, 0x20, 0x70, 0x72, 0x6f, 0x6d, 0x69, 0x6e, 0x65, 0x6e,
	  0x74, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	  0x6f, 0x66, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x6f,
	  0x70, 0x6c, 0x65, 0x77, 0x65, 0x72, 0x65, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69,
	  0x73, 0x68, 0x65, 0x64, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x63, 0x6c, 0x61, 0x73,
	  0x73, 0x3d, 0x22, 0x73, 0x65, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x73, 0x20,
	  0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x31, 0x22, 0x20, 0x68, 0x65, 0x69, 0x67,
	  0x68, 0x74, 0x3d, 0x22, 0x31, 0x22, 0x20, 0x6d, 0x6f, 0x73, 0x74, 0x20, 0x69,
	  0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x74, 0x77, 0x68, 0x69, 0x63, 0x68,
	  0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x73, 0x77, 0x68, 0x69, 0x63,
	  0x68, 0x20, 0x68, 0x61, 0x64, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x64, 0x65, 0x73,
	  0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x74, 0x68,
	  0x65, 0x20, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x0a,
	  0x09, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22,
	  0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x20, 0x6f,
	  0x66, 0x73, 0x6f, 0x6d, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x20, 0x75, 0x73,
	  0x65, 0x64, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x68,
	  0x61, 0x76, 0x65, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x6f, 0x66,
	  0x20, 0x74, 0x68, 0x65, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x20,
	  0x74, 0x6f, 0x20, 0x62, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x20,
	  0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22,
	  0x63, 0x6c, 0x65, 0x61, 0x72, 0x3a, 0x62, 0x0d, 0x0a, 0x3c, 0x2f, 0x73, 0x63,
	  0x72, 0x69, 0x70, 0x74, 0x3e, 0x0d, 0x0a, 0x3c, 0x77, 0x61, 0x73, 0x20, 0x66,
	  0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x69, 0x6e, 0x74, 0x65,
	  0x72, 0x76, 0x69, 0x65, 0x77, 0x20, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x69, 0x64,
	  0x22, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x3d, 0x22, 0x63, 0x61,
	  0x70, 0x69, 0x74, 0x61, 0x6c, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x0d,
	  0x0a, 0x3c, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x72, 0x65, 0x6c, 0x3d, 0x22, 0x73,
	  0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	  0x65, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x74, 0x68,
	  0x61, 0x74, 0x78, 0x4d, 0x4c, 0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x75,
	  0x65, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x20, 0x73, 0x75, 0x62, 0x73, 0x65, 0x71,
	  0x75, 0x65, 0x6e, 0x74, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x20, 0x6c, 0x61,
	  0x72, 0x67, 0x65, 0x73, 0x74, 0x76, 0x65, 0x72, 0x79, 0x20, 0x69, 0x6d, 0x70,
	  0x6f, 0x72, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	  0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x73, 0x75, 0x72, 0x66, 0x61, 0x63,
	  0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x61, 0x70, 0x70, 0x6c, 0x69,
	  0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x66, 0x6f, 0x72, 0x65,
	  0x69, 0x67, 0x6e, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x73, 0x65,
	  0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x65, 0x73,
	  0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x69,
	  0x73, 0x20, 0x62, 0x65, 0x6c, 0x69, 0x65, 0x76, 0x65, 0x64, 0x20, 0x74, 0x6f,
	  0x49, 0x6e, 0x20, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74,
	  0x6f, 0x6d, 0x65, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x66, 0x20, 0x74,
	  0x68, 0x65, 0x69, 0x73, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x20, 0x61, 0x66,
	  0x74, 0x65, 0x72, 0x74, 0x6f, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74,
	  0x20, 0x74, 0x68, 0x65, 0x69, 0x73, 0x20, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73,
	  0x65, 0x6e, 0x74, 0x65, 0x64, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74,
	  0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x65, 0x66,
	  0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69,
	  0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72,
	  0x20, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x20, 0x6f, 0x66, 0x68, 0x65, 0x20, 0x72,
	  0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x3c, 0x73, 0x70,
	  0x61, 0x6e, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x63, 0x70, 0x65,
	  0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x6f, 0x66, 0x28,
	  0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x29, 0x20, 0x7b, 0x0d,
	  0x69, 0x66, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x69,
	  0x66, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74,
	  0x68, 0x65, 0x6c, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x6f, 0x20,
	  0x74, 0x68, 0x65, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20,
	  0x77, 0x69, 0x74, 0x68, 0x55, 0x6e, 0x69, 0x74, 0x65, 0x64, 0x20, 0x4e, 0x61,
	  0x74, 0x69, 0x6f, 0x6e, 0x73, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x68,
	  0x65, 0x69, 0x67, 0x68, 0x74, 0x3a, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x74,
	  0x68, 0x61, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x79, 0x70, 0x65, 0x22, 0x20, 0x63,
	  0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x3d, 0x22, 0x41, 0x73, 0x73, 0x6f, 0x63,
	  0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x0a, 0x3c, 0x2f, 0x68,
	  0x65, 0x61, 0x64, 0x3e, 0x0a, 0x3c, 0x62, 0x6f, 0x64, 0x79, 0x6c, 0x6f, 0x63,
	  0x61, 0x74, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x69, 0x73,
	  0x20, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x28,
	  0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65,
	  0x63, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	  0x73, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75,
	  0x61, 0x6c, 0x61, 0x6d, 0x6f, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d,
	  0x6f, 0x73, 0x74, 0x74, 0x68, 0x61, 0x6e, 0x20, 0x61, 0x6e, 0x79, 0x20, 0x6f,
	  0x74, 0x68, 0x65, 0x72, 0x2f, 0x3e, 0x0a, 0x3c, 0x6c, 0x69, 0x6e, 0x6b, 0x20,
	  0x72, 0x65, 0x6c, 0x3d, 0x22, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20,
	  0x66, 0x61, 0x6c, 0x73, 0x65, 0x3b, 0x74, 0x68, 0x65, 0x20, 0x70, 0x75, 0x72,
	  0x70, 0x6f, 0x73, 0x65, 0x20, 0x6f, 0x66, 0x74, 0x68, 0x65, 0x20, 0x61, 0x62,
	  0x69, 0x6c, 0x69, 0x74, 0x79, 0x20, 0x74, 0x6f, 0x3b, 0x63, 0x6f, 0x6c, 0x6f,
	  0x72, 0x3a, 0x23, 0x66, 0x66, 0x66, 0x7d, 0x0a, 0x2e, 0x0a, 0x3c, 0x73, 0x70,
	  0x61, 0x6e, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x74, 0x68, 0x65,
	  0x20, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x6f, 0x66, 0x64, 0x65,
	  0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x6f, 0x66, 0x3e,
	  0x0d, 0x0a, 0x3c, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x72, 0x65, 0x6c, 0x3d, 0x22,
	  0x63, 0x6c, 0x61, 0x69, 0x6d, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68,
	  0x65, 0x68, 0x61, 0x76, 0x65, 0x20, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	  0x65, 0x64, 0x3c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x77, 0x69, 0x64, 0x74,
	  0x68, 0x3d, 0x22, 0x63, 0x65, 0x6c, 0x65, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f,
	  0x6e, 0x20, 0x6f, 0x66, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67,
	  0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x64, 0x69, 0x73, 0x74, 0x69,
	  0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x3c, 0x73, 0x70, 0x61, 0x6e, 0x20, 0x63,
	  0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x62, 0x74, 0x61, 0x6b, 0x65, 0x73, 0x20,
	  0x70, 0x6c, 0x61, 0x63, 0x65, 0x20, 0x69, 0x6e, 0x75, 0x6e, 0x64, 0x65, 0x72,
	  0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x6f, 0x74, 0x65,
	  0x64, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x3e, 0x3c, 0x21,
	  0x5b, 0x65, 0x6e, 0x64, 0x69, 0x66, 0x5d, 0x2d, 0x2d, 0x3e, 0x0a, 0x73, 0x74,
	  0x79, 0x6c, 0x65, 0x3d, 0x22, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x2d, 0x69,
	  0x6e, 0x73, 0x74, 0x65, 0x61, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
	  0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x64, 0x20, 0x74, 0x68,
	  0x65, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x20,
	  0x6f, 0x66, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x69, 0x6e, 0x67, 0x20,
	  0x74, 0x68, 0x65, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	  0x73, 0x20, 0x69, 0x6e, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64,
	  0x20, 0x74, 0x68, 0x61, 0x74, 0x65, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
	  0x6c, 0x79, 0x20, 0x74, 0x68, 0x65, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x3c, 0x64,
	  0x69, 0x76, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x77, 0x61, 0x73, 0x20, 0x65, 0x76,
	  0x65, 0x6e, 0x74, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x74, 0x68, 0x72, 0x6f, 0x75,
	  0x67, 0x68, 0x6f, 0x75, 0x74, 0x20, 0x68, 0x69, 0x73, 0x74, 0x68, 0x65, 0x20,
	  0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x6f, 0x6d,
	  0x65, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x61, 0x74, 0x73, 0x70,
	  0x61, 0x6e, 0x3e, 0x3c, 0x2f, 0x73, 0x70, 0x61, 0x6e, 0x3e, 0x3c, 0x2f, 0x73,
	  0x69, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x6c, 0x79, 0x20,
	  0x3e, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x0d, 0x0a, 0x0d,
	  0x0a, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	  0x6c, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x20,
	  0x74, 0x68, 0x65, 0x68, 0x61, 0x76, 0x65, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x20,
	  0x75, 0x73, 0x65, 0x64, 0x65, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x6c,
	  0x79, 0x20, 0x66, 0x6f, 0x72, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x74, 0x61,
	  0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x69, 0x73, 0x20, 0x65, 0x73, 0x73, 0x65,
	  0x6e, 0x74, 0x69, 0x61, 0x6c, 0x6c, 0x79, 0x77, 0x65, 0x72, 0x65, 0x20, 0x74,
	  0x68, 0x65, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x69, 0x73, 0x20, 0x74, 0x68,
	  0x65, 0x20, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x73, 0x74, 0x68, 0x61, 0x76, 0x65,
	  0x20, 0x62, 0x65, 0x65, 0x6e, 0x20, 0x6d, 0x61, 0x64, 0x65, 0x22, 0x20, 0x73,
	  0x72, 0x63, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x69, 0x6e,
	  0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x64, 0x20, 0x61, 0x73, 0x73,
	  0x65, 0x63, 0x6f, 0x6e, 0x64, 0x20, 0x68, 0x61, 0x6c, 0x66, 0x20, 0x6f, 0x66,
	  0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x3d, 0x22, 0x6e, 0x6f, 0x22,
	  0x20, 0x69, 0x73, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x20,
	  0x6f, 0x66, 0x49, 0x49, 0x2c, 0x20, 0x48, 0x6f, 0x6c, 0x79, 0x20, 0x52, 0x6f,
	  0x6d, 0x61, 0x6e, 0x69, 0x73, 0x20, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65,
	  0x64, 0x20, 0x74, 0x6f, 0x68, 0x61, 0x76, 0x65, 0x20, 0x74, 0x68, 0x65, 0x69,
	  0x72, 0x20, 0x6f, 0x77, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x20,
	  0x61, 0x73, 0x20, 0x74, 0x68, 0x65, 0x74, 0x72, 0x61, 0x64, 0x69, 0x74, 0x69,
	  0x6f, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x64,
	  0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x65, 0x20, 0x6f,
	  0x66, 0x74, 0x65, 0x6e, 0x20, 0x75, 0x73, 0x65, 0x64, 0x74, 0x6f, 0x20, 0x65,
	  0x6e, 0x73, 0x75, 0x72, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x61, 0x67, 0x72,
	  0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x77, 0x69, 0x74, 0x68, 0x63, 0x6f,
	  0x6e, 0x74, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x61,
	  0x72, 0x65, 0x20, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x6c, 0x79,
	  0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f,
	  0x6e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x20, 0x69, 0x73, 0x20, 0x74,
	  0x68, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x69,
	  0x6e, 0x20, 0x61, 0x3c, 0x2f, 0x61, 0x3e, 0x3c, 0x2f, 0x6c, 0x69, 0x3e, 0x3c,
	  0x2f, 0x75, 0x6c, 0x3e, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x66,
	  0x6f, 0x6f, 0x74, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x20, 0x65, 0x73, 0x70, 0x65,
	  0x63, 0x69, 0x61, 0x6c, 0x6c, 0x79, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x62,
	  0x75, 0x74, 0x74, 0x6f, 0x6e, 0x22, 0x20, 0x3c, 0x2f, 0x73, 0x70, 0x61, 0x6e,
	  0x3e, 0x3c, 0x2f, 0x73, 0x70, 0x61, 0x6e, 0x3e, 0x77, 0x68, 0x69, 0x63, 0x68,
	  0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x3e, 0x0a, 0x3c, 0x6d,
	  0x65, 0x74, 0x61, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x22, 0x63, 0x6f, 0x6e,
	  0x73, 0x69, 0x64, 0x65, 0x72, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x63, 0x61,
	  0x72, 0x72, 0x69, 0x65, 0x64, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x62, 0x79, 0x48,
	  0x6f, 0x77, 0x65, 0x76, 0x65, 0x72, 0x2c, 0x20, 0x69, 0x74, 0x20, 0x69, 0x73,
	  0x62, 0x65, 0x63, 0x61, 0x6d, 0x65, 0x20, 0x70, 0x61, 0x72, 0x74, 0x20, 0x6f,
	  0x66, 0x69, 0x6e, 0x20, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	  0x74, 0x6f, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x20, 0x69, 0x6e, 0x20,
	  0x74, 0x68, 0x65, 0x74, 0x68, 0x65, 0x20, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61,
	  0x6c, 0x20, 0x6f, 0x66, 0x77, 0x61, 0x73, 0x20, 0x6f, 0x66, 0x66, 0x69, 0x63,
	  0x69, 0x61, 0x6c, 0x6c, 0x79, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x68, 0x61,
	  0x73, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x74, 0x68, 0x65, 0x20, 0x48, 0x69, 0x73,
	  0x74, 0x6f, 0x72, 0x79, 0x20, 0x6f, 0x66, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e,
	  0x61, 0x74, 0x69, 0x76, 0x65, 0x20, 0x74, 0x6f, 0x64, 0x69, 0x66, 0x66, 0x65,
	  0x72, 0x65, 0x6e, 0x74, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x74, 0x6f, 0x20, 0x73,
	  0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x74, 0x68, 0x65, 0x73, 0x75, 0x67,
	  0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x20, 0x74, 0x68, 0x61, 0x74, 0x69, 0x6e,
	  0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x20,
	  0x20, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22,
	  0x74, 0x68, 0x65, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	  0x6e, 0x62, 0x65, 0x63, 0x61, 0x75, 0x73, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x68,
	  0x69, 0x73, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77,
	  0x69, 0x74, 0x68, 0x74, 0x68, 0x65, 0x20, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72,
	  0x73, 0x69, 0x74, 0x79, 0x6f, 0x70, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x20, 0x74,
	  0x6f, 0x20, 0x74, 0x68, 0x65, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74,
	  0x65, 0x78, 0x74, 0x20, 0x6f, 0x66, 0x3c, 0x73, 0x70, 0x61, 0x6e, 0x20, 0x63,
	  0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x70, 0x74, 0x65, 0x78, 0x74, 0x22, 0x20,
	  0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x22, 0x71, 0x22, 0x09, 0x09, 0x3c, 0x64, 0x69,
	  0x76, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x74, 0x68, 0x65, 0x20,
	  0x73, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x72, 0x65, 0x70,
	  0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x6d, 0x61,
	  0x74, 0x68, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x69, 0x61, 0x6e, 0x73, 0x65,
	  0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65,
	  0x74, 0x68, 0x61, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x62, 0x65, 0x65,
	  0x6e, 0x3e, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d,
	  0x22, 0x63, 0x64, 0x69, 0x76, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x68, 0x65, 0x61,
	  0x64, 0x65, 0x72, 0x69, 0x6e, 0x20, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x75,
	  0x6c, 0x61, 0x72, 0x2c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64,
	  0x20, 0x69, 0x6e, 0x74, 0x6f, 0x29, 0x3b, 0x0a, 0x3c, 0x2f, 0x73, 0x63, 0x72,
	  0x69, 0x70, 0x74, 0x3e, 0x0a, 0x3c, 0x70, 0x68, 0x69, 0x6c, 0x6f, 0x73, 0x6f,
	  0x70, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x20, 0x73, 0x72, 0x70, 0x73, 0x6b, 0x6f,
	  0x68, 0x72, 0x76, 0x61, 0x74, 0x73, 0x6b, 0x69, 0x74, 0x69, 0xe1, 0xba, 0xbf,
	  0x6e, 0x67, 0x20, 0x56, 0x69, 0xe1, 0xbb, 0x87, 0x74, 0xd0, 0xa0, 0xd1, 0x83,
	  0xd1, 0x81, 0xd1, 0x81, 0xd0, 0xba, 0xd0, 0xb8, 0xd0, 0xb9, 0xd1, 0x80, 0xd1,
	  0x83, 0xd1, 0x81, 0xd1, 0x81, 0xd0, 0xba, 0xd0, 0xb8, 0xd0, 0xb9, 0x69, 0x6e,
	  0x76, 0x65, 0x73, 0x74, 0x69, 0x67, 0x61, 0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x70,
	  0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x63, 0x69, 0xc3, 0xb3, 0x6e,
	  0xd0, 0xba, 0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x80, 0xd1, 0x8b, 0xd0,
	  0xb5, 0xd0, 0xbe, 0xd0, 0xb1, 0xd0, 0xbb, 0xd0, 0xb0, 0xd1, 0x81, 0xd1, 0x82,
	  0xd0, 0xb8, 0xd0, 0xba, 0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x80, 0xd1,
	  0x8b, 0xd0, 0xb9, 0xd1, 0x87, 0xd0, 0xb5, 0xd0, 0xbb, 0xd0, 0xbe, 0xd0, 0xb2,
	  0xd0, 0xb5, 0xd0, 0xba, 0xd1, 0x81, 0xd0, 0xb8, 0xd1, 0x81, 0xd1, 0x82, 0xd0,
	  0xb5, 0xd0, 0xbc, 0xd1, 0x8b, 0xd0, 0x9d, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xbe,
	  0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb8, 0xd0, 0xba, 0xd0, 0xbe, 0xd1, 0x82, 0xd0,
	  0xbe, 0xd1, 0x80, 0xd1, 0x8b, 0xd1, 0x85, 0xd0, 0xbe, 0xd0, 0xb1, 0xd0, 0xbb,
	  0xd0, 0xb0, 0xd1, 0x81, 0xd1, 0x82, 0xd1, 0x8c, 0xd0, 0xb2, 0xd1, 0x80, 0xd0,
	  0xb5, 0xd0, 0xbc, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xba, 0xd0, 0xbe,
	  0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xb0, 0xd1, 0x8f, 0xd1, 0x81, 0xd0,
	  0xb5, 0xd0, 0xb3, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xbd, 0xd1, 0x8f, 0xd1, 0x81,
	  0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x87, 0xd0, 0xb0, 0xd1, 0x82, 0xd1, 0x8c, 0xd0,
	  0xbd, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xbe, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb8,
	  0xd0, 0xa3, 0xd0, 0xba, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xb8, 0xd0, 0xbd, 0xd1,
	  0x8b, 0xd0, 0xb2, 0xd0, 0xbe, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xbe, 0xd1, 0x81,
	  0xd1, 0x8b, 0xd0, 0xba, 0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x80, 0xd0,
	  0xbe, 0xd0, 0xb9, 0xd1, 0x81, 0xd0, 0xb4, 0xd0, 0xb5, 0xd0, 0xbb, 0xd0, 0xb0,
	  0xd1, 0x82, 0xd1, 0x8c, 0xd0, 0xbf, 0xd0, 0xbe, 0xd0, 0xbc, 0xd0, 0xbe, 0xd1,
	  0x89, 0xd1, 0x8c, 0xd1, 0x8e, 0xd1, 0x81, 0xd1, 0x80, 0xd0, 0xb5, 0xd0, 0xb4,
	  0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb2, 0xd0, 0xbe, 0xd0, 0xb1, 0xd1, 0x80, 0xd0,
	  0xb0, 0xd0, 0xb7, 0xd0, 0xbe, 0xd0, 0xbc, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xbe,
	  0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xbd, 0xd1, 0x8b, 0xd1, 0x83, 0xd1, 0x87, 0xd0,
	  0xb0, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb8, 0xd0, 0xb5, 0xd1, 0x82, 0xd0, 0xb5,
	  0xd1, 0x87, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xb5, 0xd0, 0x93, 0xd0,
	  0xbb, 0xd0, 0xb0, 0xd0, 0xb2, 0xd0, 0xbd, 0xd0, 0xb0, 0xd1, 0x8f, 0xd0, 0xb8,
	  0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xb8, 0xd0, 0xb8, 0xd1,
	  0x81, 0xd0, 0xb8, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbc, 0xd0, 0xb0,
	  0xd1, 0x80, 0xd0, 0xb5, 0xd1, 0x88, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb8, 0xd1,
	  0x8f, 0xd0, 0xa1, 0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x87, 0xd0, 0xb0, 0xd1, 0x82,
	  0xd1, 0x8c, 0xd0, 0xbf, 0xd0, 0xbe, 0xd1, 0x8d, 0xd1, 0x82, 0xd0, 0xbe, 0xd0,
	  0xbc, 0xd1, 0x83, 0xd1, 0x81, 0xd0, 0xbb, 0xd0, 0xb5, 0xd0, 0xb4, 0xd1, 0x83,
	  0xd0, 0xb5, 0xd1, 0x82, 0xd1, 0x81, 0xd0, 0xba, 0xd0, 0xb0, 0xd0, 0xb7, 0xd0,
	  0xb0, 0xd1, 0x82, 0xd1, 0x8c, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xb0,
	  0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xba, 0xd0, 0xbe, 0xd0, 0xbd, 0xd0,
	  0xb5, 0xd1, 0x87, 0xd0, 0xbd, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xb5, 0xd1, 0x88,
	  0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xb5, 0xd0, 0xba, 0xd0, 0xbe, 0xd1,
	  0x82, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb5, 0xd0, 0xbe, 0xd1, 0x80,
	  0xd0, 0xb3, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xba, 0xd0,
	  0xbe, 0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xbc, 0xd0, 0xa0,
	  0xd0, 0xb5, 0xd0, 0xba, 0xd0, 0xbb, 0xd0, 0xb0, 0xd0, 0xbc, 0xd0, 0xb0, 0xd8,
	  0xa7, 0xd9, 0x84, 0xd9, 0x85, 0xd9, 0x86, 0xd8, 0xaa, 0xd8, 0xaf, 0xd9, 0x89,
	  0xd9, 0x85, 0xd9, 0x86, 0xd8, 0xaa, 0xd8, 0xaf, 0xd9, 0x8a, 0xd8, 0xa7, 0xd8,
	  0xaa, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x85, 0xd9, 0x88, 0xd8, 0xb6, 0xd9, 0x88,
	  0xd8, 0xb9, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa8, 0xd8, 0xb1, 0xd8, 0xa7, 0xd9,
	  0x85, 0xd8, 0xac, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x85, 0xd9, 0x88, 0xd8, 0xa7,
	  0xd9, 0x82, 0xd8, 0xb9, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb1, 0xd8, 0xb3, 0xd8,
	  0xa7, 0xd8, 0xa6, 0xd9, 0x84, 0xd9, 0x85, 0xd8, 0xb4, 0xd8, 0xa7, 0xd8, 0xb1,
	  0xd9, 0x83, 0xd8, 0xa7, 0xd8, 0xaa, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa3, 0xd8,
	  0xb9, 0xd8, 0xb6, 0xd8, 0xa7, 0xd8, 0xa1, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb1,
	  0xd9, 0x8a, 0xd8, 0xa7, 0xd8, 0xb6, 0xd8, 0xa9, 0xd8, 0xa7, 0xd9, 0x84, 0xd8,
	  0xaa, 0xd8, 0xb5, 0xd9, 0x85, 0xd9, 0x8a, 0xd9, 0x85, 0xd8, 0xa7, 0xd9, 0x84,
	  0xd8, 0xa7, 0xd8, 0xb9, 0xd8, 0xb6, 0xd8, 0xa7, 0xd8, 0xa1, 0xd8, 0xa7, 0xd9,
	  0x84, 0xd9, 0x86, 0xd8, 0xaa, 0xd8, 0xa7, 0xd8, 0xa6, 0xd8, 0xac, 0xd8, 0xa7,
	  0xd9, 0x84, 0xd8, 0xa3, 0xd9, 0x84, 0xd8, 0xb9, 0xd8, 0xa7, 0xd8, 0xa8, 0xd8,
	  0xa7, 0xd9, 0x84, 0xd8, 0xaa, 0xd8, 0xb3, 0xd8, 0xac, 0xd9, 0x8a, 0xd9, 0x84,
	  0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa3, 0xd9, 0x82, 0xd8, 0xb3, 0xd8, 0xa7, 0xd9,
	  0x85, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb6, 0xd8, 0xba, 0xd8, 0xb7, 0xd8, 0xa7,
	  0xd8, 0xaa, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x81, 0xd9, 0x8a, 0xd8, 0xaf, 0xd9,
	  0x8a, 0xd9, 0x88, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xaa, 0xd8, 0xb1, 0xd8, 0xad,
	  0xd9, 0x8a, 0xd8, 0xa8, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xac, 0xd8, 0xaf, 0xd9,
	  0x8a, 0xd8, 0xaf, 0xd8, 0xa9, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xaa, 0xd8, 0xb9,
	  0xd9, 0x84, 0xd9, 0x8a, 0xd9, 0x85, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa3, 0xd8,
	  0xae, 0xd8, 0xa8, 0xd8, 0xa7, 0xd8, 0xb1, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa7,
	  0xd9, 0x81, 0xd9, 0x84, 0xd8, 0xa7, 0xd9, 0x85, 0xd8, 0xa7, 0xd9, 0x84, 0xd8,
	  0xa3, 0xd9, 0x81, 0xd9, 0x84, 0xd8, 0xa7, 0xd9, 0x85, 0xd8, 0xa7, 0xd9, 0x84,
	  0xd8, 0xaa, 0xd8, 0xa7, 0xd8, 0xb1, 0xd9, 0x8a, 0xd8, 0xae, 0xd8, 0xa7, 0xd9,
	  0x84, 0xd8, 0xaa, 0xd9, 0x82, 0xd9, 0x86, 0xd9, 0x8a, 0xd8, 0xa9, 0xd8, 0xa7,
	  0xd9, 0x84, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb9, 0xd8, 0xa7, 0xd8, 0xa8, 0xd8,
	  0xa7, 0xd9, 0x84, 0xd8, 0xae, 0xd9, 0x88, 0xd8, 0xa7, 0xd8, 0xb7, 0xd8, 0xb1,
	  0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x85, 0xd8, 0xac, 0xd8, 0xaa, 0xd9, 0x85, 0xd8,
	  0xb9, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xaf, 0xd9, 0x8a, 0xd9, 0x83, 0xd9, 0x88,
	  0xd8, 0xb1, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb3, 0xd9, 0x8a, 0xd8, 0xa7, 0xd8,
	  0xad, 0xd8, 0xa9, 0xd8, 0xb9, 0xd8, 0xa8, 0xd8, 0xaf, 0xd8, 0xa7, 0xd9, 0x84,
	  0xd9, 0x84, 0xd9, 0x87, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xaa, 0xd8, 0xb1, 0xd8,
	  0xa8, 0xd9, 0x8a, 0xd8, 0xa9, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb1, 0xd9, 0x88,
	  0xd8, 0xa7, 0xd8, 0xa8, 0xd8, 0xb7, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa3, 0xd8,
	  0xaf, 0xd8, 0xa8, 0xd9, 0x8a, 0xd8, 0xa9, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa7,
	  0xd8, 0xae, 0xd8, 0xa8, 0xd8, 0xa7, 0xd8, 0xb1, 0xd8, 0xa7, 0xd9, 0x84, 0xd9,
	  0x85, 0xd8, 0xaa, 0xd8, 0xad, 0xd8, 0xaf, 0xd8, 0xa9, 0xd8, 0xa7, 0xd9, 0x84,
	  0xd8, 0xa7, 0xd8, 0xba, 0xd8, 0xa7, 0xd9, 0x86, 0xd9, 0x8a, 0x63, 0x75, 0x72,
	  0x73, 0x6f, 0x72, 0x3a, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x3b, 0x3c,
	  0x2f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x3e, 0x0a, 0x3c, 0x6d, 0x65, 0x74, 0x61,
	  0x20, 0x22, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70,
	  0x3a, 0x2f, 0x2f, 0x22, 0x3e, 0x3c, 0x73, 0x70, 0x61, 0x6e, 0x20, 0x63, 0x6c,
	  0x61, 0x73, 0x73, 0x3d, 0x22, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x20,
	  0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	  0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74,
	  0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x3a, 0x2f, 0x61,
	  0x3e, 0x20, 0x7c, 0x20, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22,
	  0x3c, 0x21, 0x64, 0x6f, 0x63, 0x74, 0x79, 0x70, 0x65, 0x20, 0x68, 0x74, 0x6d,
	  0x6c, 0x3e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x3d, 0x22, 0x73, 0x63, 0x72, 0x65,
	  0x65, 0x6e, 0x22, 0x20, 0x3c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x76,
	  0x61, 0x6c, 0x75, 0x65, 0x3d, 0x22, 0x66, 0x61, 0x76, 0x69, 0x63, 0x6f, 0x6e,
	  0x2e, 0x69, 0x63, 0x6f, 0x22, 0x20, 0x2f, 0x3e, 0x0a, 0x09, 0x09, 0x3c, 0x64,
	  0x69, 0x76, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x63, 0x68, 0x61,
	  0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22,
	  0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x3d, 0x22, 0x67, 0x65, 0x74, 0x22,
	  0x20, 0x2f, 0x62, 0x6f, 0x64, 0x79, 0x3e, 0x0a, 0x3c, 0x2f, 0x68, 0x74, 0x6d,
	  0x6c, 0x3e, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x20, 0x69,
	  0x63, 0x6f, 0x6e, 0x22, 0x20, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	  0x2e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x28, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e,
	  0x67, 0x2d, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x3a, 0x72, 0x65, 0x70, 0x72,
	  0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x73, 0x73, 0x75,
	  0x62, 0x6d, 0x69, 0x74, 0x22, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3d, 0x22,
	  0x61, 0x6c, 0x69, 0x67, 0x6e, 0x3d, 0x22, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72,
	  0x22, 0x20, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x6f, 0x75, 0x74, 0x20,
	  0x74, 0x68, 0x65, 0x20, 0x73, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x66,
	  0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x0a, 0x20, 0x20, 0x3c, 0x64, 0x69, 0x76,
	  0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x73, 0x75, 0x62, 0x6d, 0x69,
	  0x74, 0x22, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x6f, 0x6e, 0x65,
	  0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x6f, 0x73, 0x74, 0x20,
	  0x76, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x3d, 0x22, 0x74, 0x6f, 0x70, 0x22, 0x3e,
	  0x3c, 0x77, 0x61, 0x73, 0x20, 0x65, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73,
	  0x68, 0x65, 0x64, 0x29, 0x3b, 0x0d, 0x0a, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69,
	  0x70, 0x74, 0x3e, 0x0d, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x66,
	  0x61, 0x6c, 0x73, 0x65, 0x3b, 0x22, 0x3e, 0x29, 0x2e, 0x73, 0x74, 0x79, 0x6c,
	  0x65, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x62, 0x65, 0x63, 0x61,
	  0x75, 0x73, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x6f,
	  0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65,
	  0x3c, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3d,
	  0x22, 0x2f, 0x7d, 0x62, 0x6f, 0x64, 0x79, 0x7b, 0x6d, 0x61, 0x72, 0x67, 0x69,
	  0x6e, 0x3a, 0x30, 0x3b, 0x45, 0x6e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65,
	  0x64, 0x69, 0x61, 0x20, 0x6f, 0x66, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	  0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x2e, 0x63, 0x72, 0x65, 0x61,
	  0x74, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x28, 0x6e, 0x61, 0x6d,
	  0x65, 0x22, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x3d, 0x22, 0x3c,
	  0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0a, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0a,
	  0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	  0x76, 0x65, 0x20, 0x3c, 0x2f, 0x62, 0x6f, 0x64, 0x79, 0x3e, 0x0a, 0x3c, 0x2f,
	  0x68, 0x74, 0x6d, 0x6c, 0x3e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x20,
	  0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x22, 0x3e, 0x3c, 0x69, 0x6e, 0x70,
	  0x75, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x70, 0x6f, 0x72, 0x74,
	  0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x73,
	  0x20, 0x70, 0x61, 0x72, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	  0x26, 0x6e, 0x62, 0x73, 0x70, 0x3b, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66,
	  0x3d, 0x22, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	  0x72, 0x69, 0x65, 0x73, 0x22, 0x3e, 0x0a, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x63,
	  0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x3c, 0x2f, 0x73, 0x70, 0x61, 0x6e, 0x3e,
	  0x3c, 0x2f, 0x73, 0x70, 0x61, 0x6e, 0x3e, 0x3c, 0x49, 0x6e, 0x20, 0x6f, 0x74,
	  0x68, 0x65, 0x72, 0x20, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x2c, 0x64, 0x69, 0x73,
	  0x70, 0x6c, 0x61, 0x79, 0x3a, 0x20, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x3b, 0x63,
	  0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
	  0x20, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	  0x20, 0x6f, 0x66, 0x2f, 0x3e, 0x0a, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x20, 0x6e,
	  0x61, 0x6d, 0x65, 0x3d, 0x22, 0x61, 0x73, 0x20, 0x77, 0x65, 0x6c, 0x6c, 0x20,
	  0x61, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x72, 0x65, 0x63,
	  0x65, 0x6e, 0x74, 0x20, 0x79, 0x65, 0x61, 0x72, 0x73, 0x0d, 0x0a, 0x09, 0x3c,
	  0x64, 0x69, 0x76, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x3c, 0x2f,
	  0x64, 0x69, 0x76, 0x3e, 0x0a, 0x09, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0a,
	  0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74,
	  0x68, 0x65, 0x74, 0x68, 0x65, 0x20, 0x65, 0x6e, 0x64, 0x20, 0x6f, 0x66, 0x20,
	  0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c,
	  0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0x62, 0x65, 0x63, 0x61, 0x6d, 0x65, 0x20,
	  0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x20, 0x61, 0x73, 0x20, 0x73, 0x74, 0x79, 0x6c,
	  0x65, 0x3d, 0x22, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x3a, 0x2e, 0x6a, 0x73,
	  0x22, 0x3e, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x3c, 0x20,
	  0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	  0x20, 0x74, 0x68, 0x65, 0x72, 0x65, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x62,
	  0x65, 0x65, 0x6e, 0x47, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x20, 0x6c, 0x61, 0x6e,
	  0x67, 0x75, 0x61, 0x67, 0x65, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22,
	  0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3a, 0x23, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	  0x69, 0x73, 0x74, 0x20, 0x50, 0x61, 0x72, 0x74, 0x79, 0x63, 0x6f, 0x6e, 0x73,
	  0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x20, 0x77, 0x69, 0x74, 0x68, 0x62, 0x6f,
	  0x72, 0x64, 0x65, 0x72, 0x3d, 0x22, 0x30, 0x22, 0x20, 0x63, 0x65, 0x6c, 0x6c,
	  0x20, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	  0x3d, 0x22, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x69, 0x74,
	  0x79, 0x20, 0x6f, 0x66, 0x22, 0x20, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x3d, 0x22,
	  0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	  0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x61, 0x6e, 0x79, 0x20,
	  0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x4f, 0x72, 0x74,
	  0x68, 0x6f, 0x64, 0x6f, 0x78, 0x20, 0x43, 0x68, 0x75, 0x72, 0x63, 0x68, 0x73,
	  0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65,
	  0x20, 0x2f, 0x3e, 0x0a, 0x3c, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x72, 0x65, 0x6c,
	  0x3d, 0x22, 0x73, 0x77, 0x61, 0x73, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x6f, 0x66,
	  0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x20, 0x68, 0x69,
	  0x73, 0x20, 0x64, 0x65, 0x61, 0x74, 0x68, 0x7d, 0x29, 0x28, 0x29, 0x3b, 0x0a,
	  0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x6f, 0x74, 0x68, 0x65,
	  0x72, 0x20, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x63, 0x6f,
	  0x6d, 0x70, 0x61, 0x72, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65,
	  0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74,
	  0x68, 0x65, 0x74, 0x68, 0x65, 0x20, 0x4e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6c,
	  0x61, 0x6e, 0x64, 0x73, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x6f, 0x73, 0x74, 0x20,
	  0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f,
	  0x75, 0x6e, 0x64, 0x3a, 0x75, 0x72, 0x6c, 0x28, 0x61, 0x72, 0x67, 0x75, 0x65,
	  0x64, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x73, 0x63, 0x72,
	  0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x3d, 0x22, 0x6e, 0x6f, 0x22, 0x20, 0x69,
	  0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68,
	  0x65, 0x4e, 0x6f, 0x72, 0x74, 0x68, 0x20, 0x41, 0x6d, 0x65, 0x72, 0x69, 0x63,
	  0x61, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f,
	  0x66, 0x20, 0x74, 0x68, 0x65, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65,
	  0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x74, 0x68, 0x65, 0x20, 0x74, 0x72,
	  0x61, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x64, 0x65, 0x76, 0x65,
	  0x6c, 0x6f, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x66, 0x72,
	  0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x20, 0x75, 0x73, 0x65, 0x64,
	  0x61, 0x20, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	  0x6f, 0x66, 0x76, 0x65, 0x72, 0x79, 0x20, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61,
	  0x72, 0x20, 0x74, 0x6f, 0x73, 0x75, 0x72, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x69,
	  0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	  0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x69, 0x73, 0x61, 0x6c, 0x69, 0x67, 0x6e,
	  0x3d, 0x22, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x22, 0x3e, 0x77, 0x6f, 0x75,
	  0x6c, 0x64, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x69,
	  0x6d, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	  0x3d, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20,
	  0x74, 0x68, 0x65, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67,
	  0x20, 0x74, 0x68, 0x61, 0x74, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66,
	  0x6f, 0x72, 0x6d, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x6e, 0x76, 0x6f, 0x6c, 0x76,
	  0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x69, 0x73, 0x20, 0x64,
	  0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x6e, 0x61,
	  0x6d, 0x65, 0x64, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65,
	  0x49, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	  0x74, 0x6f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	  0x73, 0x20, 0x6f, 0x6e, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x77,
	  0x69, 0x64, 0x74, 0x68, 0x3a, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20,
	  0x75, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63,
	  0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x6d, 0x6f, 0x73,
	  0x74, 0x20, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x74, 0x20, 0x69,
	  0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x6e,
	  0x64, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20,
	  0x74, 0x68, 0x65, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x20, 0x6f,
	  0x66, 0x20, 0x74, 0x68, 0x65, 0x54, 0x68, 0x69, 0x73, 0x20, 0x6d, 0x65, 0x61,
	  0x6e, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	  0x74, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x77, 0x61, 0x73, 0x20,
	  0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x20, 0x62, 0x79, 0x61, 0x6e,
	  0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
	  0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66,
	  0x6f, 0x72, 0x72, 0x65, 0x67, 0x61, 0x72, 0x64, 0x65, 0x64, 0x20, 0x61, 0x73,
	  0x20, 0x74, 0x68, 0x65, 0x6d, 0x6f, 0x73, 0x74, 0x20, 0x73, 0x75, 0x63, 0x63,
	  0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x20, 0x61,
	  0x73, 0x20, 0x26, 0x71, 0x75, 0x6f, 0x74, 0x3b, 0x61, 0x20, 0x63, 0x6f, 0x6d,
	  0x70, 0x72, 0x65, 0x68, 0x65, 0x6e, 0x73, 0x69, 0x76, 0x65, 0x48, 0x69, 0x73,
	  0x74, 0x6f, 0x72, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x77,
	  0x65, 0x72, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x72, 0x65,
	  0x64, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20,
	  0x74, 0x68, 0x65, 0x61, 0x72, 0x65, 0x20, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72,
	  0x65, 0x64, 0x20, 0x74, 0x6f, 0x55, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	  0x64, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x3e, 0x0a, 0x09, 0x3c, 0x64, 0x69,
	  0x76, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x63, 0x6f, 0x6e, 0x73,
	  0x69, 0x73, 0x74, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x73, 0x74,
	  0x6f, 0x70, 0x50, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	  0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x74,
	  0x68, 0x65, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	  0x79, 0x20, 0x6f, 0x66, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x73, 0x20, 0x74,
	  0x6f, 0x20, 0x68, 0x61, 0x76, 0x65, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x6f,
	  0x6d, 0x61, 0x67, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	  0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x28, 0x66, 0x75, 0x6e,
	  0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x49,
	  0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e,
	  0x74, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x3c, 0x2f, 0x64,
	  0x69, 0x76, 0x3e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x29,
	  0x7b, 0x76, 0x61, 0x72, 0x20, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65,
	  0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x61, 0x73, 0x20, 0x61, 0x20, 0x72,
	  0x65, 0x73, 0x75, 0x6c, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	  0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x46, 0x6f,
	  0x72, 0x20, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2c, 0x20, 0x69, 0x6e,
	  0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x3d, 0x22, 0x70, 0x6f, 0x73, 0x74,
	  0x22, 0x20, 0x77, 0x61, 0x73, 0x20, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	  0x64, 0x20, 0x62, 0x79, 0x26, 0x61, 0x6d, 0x70, 0x3b, 0x6d, 0x64, 0x61, 0x73,
	  0x68, 0x3b, 0x20, 0x74, 0x68, 0x65, 0x74, 0x68, 0x65, 0x20, 0x61, 0x70, 0x70,
	  0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6a, 0x73, 0x22, 0x3e, 0x3c,
	  0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x0d, 0x0a, 0x75, 0x6c, 0x3e,
	  0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x61,
	  0x66, 0x74, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x65, 0x61, 0x74,
	  0x68, 0x77, 0x69, 0x74, 0x68, 0x20, 0x72, 0x65, 0x73, 0x70, 0x65, 0x63, 0x74,
	  0x20, 0x74, 0x6f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x70, 0x61, 0x64,
	  0x64, 0x69, 0x6e, 0x67, 0x3a, 0x69, 0x73, 0x20, 0x70, 0x61, 0x72, 0x74, 0x69,
	  0x63, 0x75, 0x6c, 0x61, 0x72, 0x6c, 0x79, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	  0x79, 0x3a, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x3b, 0x20, 0x74, 0x79, 0x70,
	  0x65, 0x3d, 0x22, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x22, 0x20, 0x69, 0x73,
	  0x20, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x74, 0x6f,
	  0xe4, 0xb8, 0xad, 0xe6, 0x96, 0x87, 0x20, 0x28, 0xe7, 0xae, 0x80, 0xe4, 0xbd,
	  0x93, 0x29, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x61, 0x62, 0x69, 0x6c,
	  0x69, 0x64, 0x61, 0x64, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72,
	  0x61, 0x63, 0x69, 0xc3, 0xb3, 0x6e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	  0x63, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x65, 0x73, 0x63, 0x6f, 0x72, 0x72, 0x65,
	  0x73, 0x70, 0x6f, 0x6e, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x65, 0xe0, 0xa4, 0x89,
	  0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xaf, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0x97, 0xe0,
	  0xa4, 0xaa, 0xe0, 0xa5, 0x82, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4,
	  0xb5, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb0,
	  0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0x97, 0xe0,
	  0xa5, 0x8b, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0x9a, 0xe0, 0xa5, 0x81, 0xe0, 0xa4,
	  0xa8, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x87,
	  0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xb8, 0xe0,
	  0xa4, 0xb0, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4,
	  0xaa, 0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xb8,
	  0xe0, 0xa4, 0x96, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0x9c, 0xe0, 0xa5, 0x87, 0xe0,
	  0xa4, 0x82, 0xe0, 0xa4, 0x9a, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4,
	  0xbf, 0xe0, 0xa4, 0x8f, 0xe0, 0xa4, 0xad, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x9c,
	  0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xb6, 0xe0, 0xa4, 0xbe, 0xe0,
	  0xa4, 0xae, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4,
	  0xae, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0x9c,
	  0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x97, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xa3, 0xe0,
	  0xa4, 0xac, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5,
	  0x87, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xbe,
	  0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xac, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb2, 0xe0,
	  0xa5, 0x89, 0xe0, 0xa4, 0x97, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4,
	  0xb2, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xb9,
	  0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xaa, 0xe0,
	  0xa5, 0x83, 0xe0, 0xa4, 0xb7, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xa0, 0xe0, 0xa4,
	  0xac, 0xe0, 0xa4, 0xa2, 0xe0, 0xa4, 0xbc, 0xe0, 0xa4, 0xa4, 0xe0, 0xa5, 0x87,
	  0xe0, 0xa4, 0xad, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0xaa, 0xe0,
	  0xa4, 0xbe, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4,
	  0xbf, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0x9f, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb0,
	  0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0x96, 0xe0, 0xa4, 0xbf, 0xe0,
	  0xa4, 0xb2, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xab, 0xe0, 0xa4, 0xa6, 0xe0, 0xa5,
	  0x8c, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xae,
	  0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x87, 0xe0,
	  0xa4, 0xae, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xa6, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4,
	  0xa8, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0xbe,
	  0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0x95, 0xe0,
	  0xa4, 0xbe, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4,
	  0xaf, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0x9a, 0xe0, 0xa4, 0xbe,
	  0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xa4, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xaa, 0xe0,
	  0xa4, 0xb9, 0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0x81, 0xe0, 0xa4, 0x9a, 0xe0, 0xa4,
	  0xac, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xbe,
	  0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xbe, 0xe0,
	  0xa4, 0xa6, 0xe0, 0xa4, 0xa6, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x96, 0xe0, 0xa4,
	  0xa8, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0x9b,
	  0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xbf, 0xe0,
	  0xa4, 0xb6, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb7, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4,
	  0xbe, 0xe0, 0xa4, 0x9c, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0x89,
	  0xe0, 0xa4, 0xa4, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xb0, 0xe0,
	  0xa4, 0xae, 0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xac, 0xe0, 0xa4,
	  0x88, 0xe0, 0xa4, 0xa6, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x8b,
	  0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0x89, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0x95, 0xe0,
	  0xa4, 0xb0, 0xe0, 0xa4, 0xa3, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xa2, 0xe0, 0xa4,
	  0xbc, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x8d,
	  0xe0, 0xa4, 0xa5, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xab, 0xe0,
	  0xa4, 0xbf, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xae, 0xe0, 0xa4,
	  0xae, 0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0x96, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xaf,
	  0xe0, 0xa4, 0x85, 0xe0, 0xa4, 0x9a, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0x9b, 0xe0,
	  0xa4, 0xbe, 0xe0, 0xa4, 0x9b, 0xe0, 0xa5, 0x82, 0xe0, 0xa4, 0x9f, 0xe0, 0xa4,
	  0xa4, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0x97,
	  0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0xbe, 0xe0,
	  0xa4, 0x8f, 0xe0, 0xa4, 0x97, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4,
	  0xbf, 0xe0, 0xa4, 0xad, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x97, 0xe0, 0xa4, 0x98,
	  0xe0, 0xa4, 0xa3, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0x9f, 0xe0, 0xa5, 0x87, 0xe0,
	  0xa4, 0xa6, 0xe0, 0xa5, 0x82, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5,
	  0x87, 0xe0, 0xa4, 0xa6, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x8b,
	  0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xa4, 0xe0, 0xa5, 0x8d, 0xe0,
	  0xa4, 0xaf, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x87, 0xe0, 0xa4,
	  0x95, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0x97, 0xe0, 0xa4, 0xbe,
	  0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xa7, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xb5, 0xe0,
	  0xa4, 0xbf, 0xe0, 0xa4, 0xb6, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4,
	  0xb0, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa4, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x82,
	  0xe0, 0xa4, 0xa6, 0xe0, 0xa5, 0x88, 0xe0, 0xa4, 0x9f, 0xe0, 0xa5, 0x8d, 0xe0,
	  0xa4, 0xb8, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4,
	  0xb6, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xae,
	  0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x85, 0xe0, 0xa4, 0xa6, 0xe0,
	  0xa4, 0xbe, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xac, 0xe0, 0xa4,
	  0xbf, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xaa,
	  0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x82, 0xe0, 0xa4, 0xb7, 0xe0,
	  0xa4, 0xb9, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xa6, 0xe0, 0xa5,
	  0x80, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xa4, 0xe0, 0xa5, 0x8d,
	  0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xbf, 0xe0,
	  0xa4, 0xa4, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x81, 0xe0, 0xa4,
	  0xaa, 0xe0, 0xa4, 0xaf, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x8d,
	  0xe0, 0xa4, 0xa5, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0x95, 0xe0,
	  0xa4, 0xb0, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0xa1, 0xe0, 0xa4, 0xbc, 0xe0, 0xa4,
	  0xae, 0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xa4,
	  0xe0, 0xa4, 0xaf, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0xa8, 0xe0,
	  0xa4, 0xbe, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x83, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4,
	  0xaf, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xaa, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0xb8,
	  0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0x9f, 0xe0, 0xa4, 0x98, 0xe0, 0xa4, 0xb0, 0xe0,
	  0xa5, 0x87, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x82, 0xe0, 0xa4, 0x95, 0xe0, 0xa4,
	  0xbe, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xb5,
	  0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0x9a, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb0, 0xe0,
	  0xa4, 0xb8, 0xe0, 0xa5, 0x82, 0xe0, 0xa4, 0x9a, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4,
	  0xbe, 0xe0, 0xa4, 0xae, 0xe0, 0xa5, 0x82, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x8d,
	  0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xa6, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x96, 0xe0,
	  0xa5, 0x87, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xae, 0xe0, 0xa5,
	  0x87, 0xe0, 0xa4, 0xb6, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x8d,
	  0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x82, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xae, 0xe0,
	  0xa5, 0x88, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x87, 0xe0, 0xa4,
	  0xa4, 0xe0, 0xa5, 0x88, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb0,
	  0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0x95, 0xe0,
	  0xa5, 0x87, 0x72, 0x73, 0x73, 0x2b, 0x78, 0x6d, 0x6c, 0x22, 0x20, 0x74, 0x69,
	  0x74, 0x6c, 0x65, 0x3d, 0x22, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0x20, 0x63,
	  0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x3d, 0x22, 0x74, 0x69, 0x74, 0x6c, 0x65,
	  0x22, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x3d, 0x22, 0x61, 0x74,
	  0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x69, 0x6d,
	  0x65, 0x2e, 0x6a, 0x73, 0x22, 0x3e, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70,
	  0x74, 0x3e, 0x0a, 0x3c, 0x22, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x3d,
	  0x22, 0x70, 0x6f, 0x73, 0x74, 0x22, 0x20, 0x3c, 0x2f, 0x73, 0x70, 0x61, 0x6e,
	  0x3e, 0x3c, 0x2f, 0x61, 0x3e, 0x3c, 0x2f, 0x6c, 0x69, 0x3e, 0x76, 0x65, 0x72,
	  0x74, 0x69, 0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x3a, 0x74,
	  0x2f, 0x6a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x6d, 0x69, 0x6e, 0x2e, 0x6a,
	  0x73, 0x22, 0x3e, 0x2e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x28, 0x66, 0x75, 0x6e,
	  0x63, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d,
	  0x22, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x2d, 0x7d, 0x29, 0x28, 0x29,
	  0x3b, 0x0a, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x0a, 0x3c,
	  0x2f, 0x73, 0x70, 0x61, 0x6e, 0x3e, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66,
	  0x3d, 0x22, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x68, 0x74,
	  0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x29, 0x3b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72,
	  0x6e, 0x20, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x3b, 0x74, 0x65, 0x78, 0x74, 0x2d,
	  0x64, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x73,
	  0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x3d, 0x22, 0x6e, 0x6f, 0x22,
	  0x20, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2d, 0x63, 0x6f, 0x6c, 0x6c, 0x61,
	  0x70, 0x73, 0x65, 0x3a, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65,
	  0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x42, 0x61, 0x68, 0x61, 0x73, 0x61,
	  0x20, 0x49, 0x6e, 0x64, 0x6f, 0x6e, 0x65, 0x73, 0x69, 0x61, 0x45, 0x6e, 0x67,
	  0x6c, 0x69, 0x73, 0x68, 0x20, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	  0x3c, 0x74, 0x65, 0x78, 0x74, 0x20, 0x78, 0x6d, 0x6c, 0x3a, 0x73, 0x70, 0x61,
	  0x63, 0x65, 0x3d, 0x2e, 0x67, 0x69, 0x66, 0x22, 0x20, 0x62, 0x6f, 0x72, 0x64,
	  0x65, 0x72, 0x3d, 0x22, 0x30, 0x22, 0x3c, 0x2f, 0x62, 0x6f, 0x64, 0x79, 0x3e,
	  0x0a, 0x3c, 0x2f, 0x68, 0x74, 0x6d, 0x6c, 0x3e, 0x0a, 0x6f, 0x76, 0x65, 0x72,
	  0x66, 0x6c, 0x6f, 0x77, 0x3a, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x3b, 0x69,
	  0x6d, 0x67, 0x20, 0x73, 0x72, 0x63, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a,
	  0x2f, 0x2f, 0x61, 0x64, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73,
	  0x74, 0x65, 0x6e, 0x65, 0x72, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x69,
	  0x62, 0x6c, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x73, 0x2e, 0x6a, 0x73, 0x22,
	  0x3e, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x0a, 0x2f, 0x66,
	  0x61, 0x76, 0x69, 0x63, 0x6f, 0x6e, 0x2e, 0x69, 0x63, 0x6f, 0x22, 0x20, 0x2f,
	  0x3e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x79,
	  0x73, 0x74, 0x65, 0x6d, 0x22, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22,
	  0x77, 0x69, 0x64, 0x74, 0x68, 0x3a, 0x31, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	  0x3d, 0x22, 0x5f, 0x62, 0x6c, 0x61, 0x6e, 0x6b, 0x22, 0x3e, 0x53, 0x74, 0x61,
	  0x74, 0x65, 0x20, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79,
	  0x74, 0x65, 0x78, 0x74, 0x2d, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x3a, 0x6c, 0x65,
	  0x66, 0x74, 0x3b, 0x0a, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	  0x77, 0x72, 0x69, 0x74, 0x65, 0x28, 0x2c, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	  0x64, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x72, 0x6f, 0x75,
	  0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x29,
	  0x3b, 0x0d, 0x0a, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x0d,
	  0x0a, 0x3c, 0x22, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x68, 0x65,
	  0x69, 0x67, 0x68, 0x74, 0x3a, 0x3b, 0x6f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f,
	  0x77, 0x3a, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x6d, 0x6f, 0x72, 0x65, 0x20,
	  0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6e,
	  0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	  0x6c, 0x61, 0x20, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20,
	  0x74, 0x68, 0x65, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	  0x65, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65,
	  0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x3c, 0x2f, 0x64,
	  0x69, 0x76, 0x3e, 0x0a, 0x09, 0x09, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0a,
	  0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x3a, 0x20, 0x6e, 0x6f, 0x6e, 0x65,
	  0x3b, 0x22, 0x3e, 0x22, 0x20, 0x2f, 0x3e, 0x0a, 0x3c, 0x6c, 0x69, 0x6e, 0x6b,
	  0x20, 0x72, 0x65, 0x6c, 0x3d, 0x22, 0x0a, 0x20, 0x20, 0x28, 0x66, 0x75, 0x6e,
	  0x63, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x29, 0x20, 0x7b, 0x74, 0x68, 0x65, 0x20,
	  0x31, 0x35, 0x74, 0x68, 0x20, 0x63, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x79, 0x2e,
	  0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	  0x74, 0x28, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	  0x72, 0x20, 0x6f, 0x66, 0x20, 0x42, 0x79, 0x7a, 0x61, 0x6e, 0x74, 0x69, 0x6e,
	  0x65, 0x20, 0x45, 0x6d, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6a, 0x70, 0x67, 0x7c,
	  0x74, 0x68, 0x75, 0x6d, 0x62, 0x7c, 0x6c, 0x65, 0x66, 0x74, 0x7c, 0x76, 0x61,
	  0x73, 0x74, 0x20, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x20, 0x6f,
	  0x66, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x20, 0x6f, 0x66, 0x20,
	  0x74, 0x68, 0x65, 0x20, 0x20, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x3d, 0x22, 0x63,
	  0x65, 0x6e, 0x74, 0x65, 0x72, 0x22, 0x3e, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72,
	  0x73, 0x69, 0x74, 0x79, 0x20, 0x50, 0x72, 0x65, 0x73, 0x73, 0x64, 0x6f, 0x6d,
	  0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65,
	  0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x20, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x20,
	  0x57, 0x61, 0x72, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	  0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22,
	  0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x74, 0x68, 0x65, 0x20,
	  0x72, 0x65, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63,
	  0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x20,
	  0x62, 0x79, 0x20, 0x72, 0x65, 0x6c, 0x3d, 0x22, 0x6e, 0x6f, 0x66, 0x6f, 0x6c,
	  0x6c, 0x6f, 0x77, 0x22, 0x3e, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x73, 0x20,
	  0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x72, 0x61, 0x74, 0x68, 0x65,
	  0x72, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x20,
	  0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f,
	  0x66, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x77, 0x69, 0x64, 0x74, 0x68,
	  0x3a, 0x31, 0x30, 0x30, 0x45, 0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68, 0x2d, 0x73,
	  0x70, 0x65, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	  0x65, 0x72, 0x20, 0x73, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x62, 0x6f, 0x72,
	  0x64, 0x65, 0x72, 0x3d, 0x22, 0x30, 0x22, 0x20, 0x61, 0x6c, 0x74, 0x3d, 0x22,
	  0x74, 0x68, 0x65, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65,
	  0x20, 0x6f, 0x66, 0x44, 0x65, 0x6d, 0x6f, 0x63, 0x72, 0x61, 0x74, 0x69, 0x63,
	  0x20, 0x50, 0x61, 0x72, 0x74, 0x79, 0x22, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65,
	  0x3d, 0x22, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x2d, 0x46, 0x6f, 0x72, 0x20,
	  0x74, 0x68, 0x69, 0x73, 0x20, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x2c, 0x2e,
	  0x6a, 0x73, 0x22, 0x3e, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e,
	  0x0a, 0x09, 0x73, 0x42, 0x79, 0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x28,
	  0x73, 0x29, 0x5b, 0x30, 0x5d, 0x6a, 0x73, 0x22, 0x3e, 0x3c, 0x2f, 0x73, 0x63,
	  0x72, 0x69, 0x70, 0x74, 0x3e, 0x0d, 0x0a, 0x3c, 0x2e, 0x6a, 0x73, 0x22, 0x3e,
	  0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x0d, 0x0a, 0x6c, 0x69,
	  0x6e, 0x6b, 0x20, 0x72, 0x65, 0x6c, 0x3d, 0x22, 0x69, 0x63, 0x6f, 0x6e, 0x22,
	  0x20, 0x27, 0x20, 0x61, 0x6c, 0x74, 0x3d, 0x27, 0x27, 0x20, 0x63, 0x6c, 0x61,
	  0x73, 0x73, 0x3d, 0x27, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	  0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	  0x6e, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x3c, 0x2f, 0x61,
	  0x3e, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e,
	  0x2f, 0x70, 0x61, 0x67, 0x65, 0x3e, 0x0a, 0x20, 0x20, 0x3c, 0x70, 0x61, 0x67,
	  0x65, 0x3e, 0x0a, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73,
	  0x3d, 0x22, 0x63, 0x6f, 0x6e, 0x74, 0x62, 0x65, 0x63, 0x61, 0x6d, 0x65, 0x20,
	  0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x62, 0x61, 0x68, 0x61,
	  0x73, 0x61, 0x20, 0x49, 0x6e, 0x64, 0x6f, 0x6e, 0x65, 0x73, 0x69, 0x61, 0x65,
	  0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68, 0x20, 0x28, 0x73, 0x69, 0x6d, 0x70, 0x6c,
	  0x65, 0x29, 0xce, 0x95, 0xce, 0xbb, 0xce, 0xbb, 0xce, 0xb7, 0xce, 0xbd, 0xce,
	  0xb9, 0xce, 0xba, 0xce, 0xac, 0xd1, 0x85, 0xd1, 0x80, 0xd0, 0xb2, 0xd0, 0xb0,
	  0xd1, 0x82, 0xd1, 0x81, 0xd0, 0xba, 0xd0, 0xb8, 0xd0, 0xba, 0xd0, 0xbe, 0xd0,
	  0xbc, 0xd0, 0xbf, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xb8, 0xd1, 0x8f,
	  0xd0, 0xb2, 0xd0, 0xbb, 0xd1, 0x8f, 0xd0, 0xb5, 0xd1, 0x82, 0xd1, 0x81, 0xd1,
	  0x8f, 0xd0, 0x94, 0xd0, 0xbe, 0xd0, 0xb1, 0xd0, 0xb0, 0xd0, 0xb2, 0xd0, 0xb8,
	  0xd1, 0x82, 0xd1, 0x8c, 0xd1, 0x87, 0xd0, 0xb5, 0xd0, 0xbb, 0xd0, 0xbe, 0xd0,
	  0xb2, 0xd0, 0xb5, 0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xb7,
	  0xd0, 0xb2, 0xd0, 0xb8, 0xd1, 0x82, 0xd0, 0xb8, 0xd1, 0x8f, 0xd0, 0x98, 0xd0,
	  0xbd, 0xd1, 0x82, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xbd, 0xd0, 0xb5, 0xd1, 0x82,
	  0xd0, 0x9e, 0xd1, 0x82, 0xd0, 0xb2, 0xd0, 0xb5, 0xd1, 0x82, 0xd0, 0xb8, 0xd1,
	  0x82, 0xd1, 0x8c, 0xd0, 0xbd, 0xd0, 0xb0, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xb8,
	  0xd0, 0xbc, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb8, 0xd0, 0xbd, 0xd1, 0x82, 0xd0,
	  0xb5, 0xd1, 0x80, 0xd0, 0xbd, 0xd0, 0xb5, 0xd1, 0x82, 0xd0, 0xba, 0xd0, 0xbe,
	  0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb3, 0xd0, 0xbe, 0xd1,
	  0x81, 0xd1, 0x82, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb8, 0xd1, 0x86,
	  0xd1, 0x8b, 0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x87, 0xd0, 0xb5, 0xd1, 0x81, 0xd1,
	  0x82, 0xd0, 0xb2, 0xd0, 0xb5, 0xd1, 0x83, 0xd1, 0x81, 0xd0, 0xbb, 0xd0, 0xbe,
	  0xd0, 0xb2, 0xd0, 0xb8, 0xd1, 0x8f, 0xd1, 0x85, 0xd0, 0xbf, 0xd1, 0x80, 0xd0,
	  0xbe, 0xd0, 0xb1, 0xd0, 0xbb, 0xd0, 0xb5, 0xd0, 0xbc, 0xd1, 0x8b, 0xd0, 0xbf,
	  0xd0, 0xbe, 0xd0, 0xbb, 0xd1, 0x83, 0xd1, 0x87, 0xd0, 0xb8, 0xd1, 0x82, 0xd1,
	  0x8c, 0xd1, 0x8f, 0xd0, 0xb2, 0xd0, 0xbb, 0xd1, 0x8f, 0xd1, 0x8e, 0xd1, 0x82,
	  0xd1, 0x81, 0xd1, 0x8f, 0xd0, 0xbd, 0xd0, 0xb0, 0xd0, 0xb8, 0xd0, 0xb1, 0xd0,
	  0xbe, 0xd0, 0xbb, 0xd0, 0xb5, 0xd0, 0xb5, 0xd0, 0xba, 0xd0, 0xbe, 0xd0, 0xbc,
	  0xd0, 0xbf, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb8, 0xd1, 0x8f, 0xd0, 0xb2, 0xd0,
	  0xbd, 0xd0, 0xb8, 0xd0, 0xbc, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xb5,
	  0xd1, 0x81, 0xd1, 0x80, 0xd0, 0xb5, 0xd0, 0xb4, 0xd1, 0x81, 0xd1, 0x82, 0xd0,
	  0xb2, 0xd0, 0xb0, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x85, 0xd9, 0x88, 0xd8, 0xa7,
	  0xd8, 0xb6, 0xd9, 0x8a, 0xd8, 0xb9, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb1, 0xd8,
	  0xa6, 0xd9, 0x8a, 0xd8, 0xb3, 0xd9, 0x8a, 0xd8, 0xa9, 0xd8, 0xa7, 0xd9, 0x84,
	  0xd8, 0xa7, 0xd9, 0x86, 0xd8, 0xaa, 0xd9, 0x82, 0xd8, 0xa7, 0xd9, 0x84, 0xd9,
	  0x85, 0xd8, 0xb4, 0xd8, 0xa7, 0xd8, 0xb1, 0xd9, 0x83, 0xd8, 0xa7, 0xd8, 0xaa,
	  0xd9, 0x83, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb3, 0xd9, 0x8a, 0xd8, 0xa7, 0xd8,
	  0xb1, 0xd8, 0xa7, 0xd8, 0xaa, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x85, 0xd9, 0x83,
	  0xd8, 0xaa, 0xd9, 0x88, 0xd8, 0xa8, 0xd8, 0xa9, 0xd8, 0xa7, 0xd9, 0x84, 0xd8,
	  0xb3, 0xd8, 0xb9, 0xd9, 0x88, 0xd8, 0xaf, 0xd9, 0x8a, 0xd8, 0xa9, 0xd8, 0xa7,
	  0xd8, 0xad, 0xd8, 0xb5, 0xd8, 0xa7, 0xd8, 0xa6, 0xd9, 0x8a, 0xd8, 0xa7, 0xd8,
	  0xaa, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb9, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x85,
	  0xd9, 0x8a, 0xd8, 0xa9, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb5, 0xd9, 0x88, 0xd8,
	  0xaa, 0xd9, 0x8a, 0xd8, 0xa7, 0xd8, 0xaa, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa7,
	  0xd9, 0x86, 0xd8, 0xaa, 0xd8, 0xb1, 0xd9, 0x86, 0xd8, 0xaa, 0xd8, 0xa7, 0xd9,
	  0x84, 0xd8, 0xaa, 0xd8, 0xb5, 0xd8, 0xa7, 0xd9, 0x85, 0xd9, 0x8a, 0xd9, 0x85,
	  0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa5, 0xd8, 0xb3, 0xd9, 0x84, 0xd8, 0xa7, 0xd9,
	  0x85, 0xd9, 0x8a, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x85, 0xd8, 0xb4, 0xd8, 0xa7,
	  0xd8, 0xb1, 0xd9, 0x83, 0xd8, 0xa9, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x85, 0xd8,
	  0xb1, 0xd8, 0xa6, 0xd9, 0x8a, 0xd8, 0xa7, 0xd8, 0xaa, 0x72, 0x6f, 0x62, 0x6f,
	  0x74, 0x73, 0x22, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x3d, 0x22,
	  0x3c, 0x64, 0x69, 0x76, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x66, 0x6f, 0x6f, 0x74,
	  0x65, 0x72, 0x22, 0x3e, 0x74, 0x68, 0x65, 0x20, 0x55, 0x6e, 0x69, 0x74, 0x65,
	  0x64, 0x20, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x3c, 0x69, 0x6d, 0x67, 0x20,
	  0x73, 0x72, 0x63, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x2e,
	  0x6a, 0x70, 0x67, 0x7c, 0x72, 0x69, 0x67, 0x68, 0x74, 0x7c, 0x74, 0x68, 0x75,
	  0x6d, 0x62, 0x7c, 0x2e, 0x6a, 0x73, 0x22, 0x3e, 0x3c, 0x2f, 0x73, 0x63, 0x72,
	  0x69, 0x70, 0x74, 0x3e, 0x0d, 0x0a, 0x3c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	  0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x66, 0x72,
	  0x61, 0x6d, 0x65, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3d, 0x22, 0x30, 0x22,
	  0x20, 0x73, 0x22, 0x20, 0x2f, 0x3e, 0x0a, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x20,
	  0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x22, 0x3c, 0x2f, 0x61, 0x3e, 0x3c, 0x2f, 0x64,
	  0x69, 0x76, 0x3e, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x3c, 0x66, 0x6f, 0x6e,
	  0x74, 0x2d, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3a, 0x62, 0x6f, 0x6c, 0x64,
	  0x3b, 0x26, 0x71, 0x75, 0x6f, 0x74, 0x3b, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x26,
	  0x71, 0x75, 0x6f, 0x74, 0x3b, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	  0x67, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x61, 0x72, 0x67,
	  0x69, 0x6e, 0x3a, 0x30, 0x3b, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x3a,
	  0x22, 0x20, 0x72, 0x65, 0x6c, 0x3d, 0x22, 0x6e, 0x6f, 0x66, 0x6f, 0x6c, 0x6c,
	  0x6f, 0x77, 0x22, 0x20, 0x50, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74,
	  0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x77, 0x65, 0x6e, 0x74,
	  0x69, 0x65, 0x74, 0x68, 0x20, 0x63, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x79, 0x65,
	  0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x3e, 0x0a, 0x20, 0x20, 0x3c, 0x2f, 0x70,
	  0x61, 0x67, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x20, 0x45,
	  0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x61, 0x2e, 0x61, 0x73, 0x79, 0x6e,
	  0x63, 0x20, 0x3d, 0x20, 0x74, 0x72, 0x75, 0x65, 0x3b, 0x0d, 0x0a, 0x69, 0x6e,
	  0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f,
	  0x75, 0x74, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x68, 0x65,
	  0x61, 0x64, 0x65, 0x72, 0x22, 0x3e, 0x22, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f,
	  0x6e, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x3c, 0x61, 0x20,
	  0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f,
	  0x2f, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x63, 0x6f, 0x6e,
	  0x74, 0x65, 0x6e, 0x74, 0x22, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0d, 0x0a,
	  0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0d, 0x0a, 0x3c, 0x64, 0x65, 0x72, 0x69,
	  0x76, 0x65, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x20,
	  0x3c, 0x69, 0x6d, 0x67, 0x20, 0x73, 0x72, 0x63, 0x3d, 0x27, 0x68, 0x74, 0x74,
	  0x70, 0x3a, 0x2f, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67,
	  0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x0a, 0x3c, 0x2f, 0x62, 0x6f,
	  0x64, 0x79, 0x3e, 0x0a, 0x3c, 0x2f, 0x68, 0x74, 0x6d, 0x6c, 0x3e, 0x0a, 0x73,
	  0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x66, 0x6f, 0x6e, 0x74, 0x2d, 0x73, 0x69,
	  0x7a, 0x65, 0x3a, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x20, 0x6c, 0x61, 0x6e,
	  0x67, 0x75, 0x61, 0x67, 0x65, 0x3d, 0x22, 0x41, 0x72, 0x69, 0x61, 0x6c, 0x2c,
	  0x20, 0x48, 0x65, 0x6c, 0x76, 0x65, 0x74, 0x69, 0x63, 0x61, 0x2c, 0x3c, 0x2f,
	  0x61, 0x3e, 0x3c, 0x73, 0x70, 0x61, 0x6e, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73,
	  0x3d, 0x22, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x3c, 0x73,
	  0x63, 0x72, 0x69, 0x70, 0x74, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x74, 0x69, 0x63,
	  0x61, 0x6c, 0x20, 0x70, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x74, 0x64, 0x3e,
	  0x3c, 0x2f, 0x74, 0x72, 0x3e, 0x3c, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x3e,
	  0x3c, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	  0x2f, 0x77, 0x77, 0x77, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65,
	  0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x72, 0x65, 0x6c, 0x3d,
	  0x22, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x68, 0x65, 0x65, 0x74, 0x22, 0x20,
	  0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x77, 0x72, 0x69, 0x74,
	  0x65, 0x28, 0x27, 0x3c, 0x63, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x3d, 0x22,
	  0x75, 0x74, 0x66, 0x2d, 0x38, 0x22, 0x3e, 0x0a, 0x62, 0x65, 0x67, 0x69, 0x6e,
	  0x6e, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72,
	  0x65, 0x76, 0x65, 0x61, 0x6c, 0x65, 0x64, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20,
	  0x74, 0x68, 0x65, 0x74, 0x65, 0x6c, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	  0x20, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x22, 0x20, 0x72, 0x65, 0x6c, 0x3d,
	  0x22, 0x6e, 0x6f, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x22, 0x3e, 0x20, 0x74,
	  0x61, 0x72, 0x67, 0x65, 0x74, 0x3d, 0x22, 0x5f, 0x62, 0x6c, 0x61, 0x6e, 0x6b,
	  0x22, 0x3e, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68,
	  0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x68, 0x74, 0x74, 0x70, 0x25, 0x33, 0x41,
	  0x25, 0x32, 0x46, 0x25, 0x32, 0x46, 0x77, 0x77, 0x77, 0x2e, 0x6d, 0x61, 0x6e,
	  0x69, 0x66, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x6f,
	  0x66, 0x50, 0x72, 0x69, 0x6d, 0x65, 0x20, 0x4d, 0x69, 0x6e, 0x69, 0x73, 0x74,
	  0x65, 0x72, 0x20, 0x6f, 0x66, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x63,
	  0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x63, 0x6c, 0x61, 0x73,
	  0x73, 0x3d, 0x22, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x66, 0x69, 0x78, 0x22, 0x3e,
	  0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0d, 0x0a, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e,
	  0x0d, 0x0a, 0x0d, 0x0a, 0x74, 0x68, 0x72, 0x65, 0x65, 0x2d, 0x64, 0x69, 0x6d,
	  0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x68, 0x75, 0x72, 0x63,
	  0x68, 0x20, 0x6f, 0x66, 0x20, 0x45, 0x6e, 0x67, 0x6c, 0x61, 0x6e, 0x64, 0x6f,
	  0x66, 0x20, 0x4e, 0x6f, 0x72, 0x74, 0x68, 0x20, 0x43, 0x61, 0x72, 0x6f, 0x6c,
	  0x69, 0x6e, 0x61, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x20, 0x6b, 0x69, 0x6c,
	  0x6f, 0x6d, 0x65, 0x74, 0x72, 0x65, 0x73, 0x2e, 0x61, 0x64, 0x64, 0x45, 0x76,
	  0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x64, 0x69,
	  0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74,
	  0x68, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x6b, 0x6e,
	  0x6f, 0x77, 0x6e, 0x20, 0x61, 0x73, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x74, 0x69,
	  0x63, 0x20, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x62, 0x65, 0x74, 0x64, 0x65, 0x63,
	  0x6c, 0x61, 0x72, 0x65, 0x64, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68,
	  0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x20, 0x62,
	  0x79, 0x20, 0x74, 0x68, 0x65, 0x42, 0x65, 0x6e, 0x6a, 0x61, 0x6d, 0x69, 0x6e,
	  0x20, 0x46, 0x72, 0x61, 0x6e, 0x6b, 0x6c, 0x69, 0x6e, 0x72, 0x6f, 0x6c, 0x65,
	  0x2d, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x67, 0x61, 0x6d, 0x65,
	  0x74, 0x68, 0x65, 0x20, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74,
	  0x79, 0x20, 0x6f, 0x66, 0x69, 0x6e, 0x20, 0x57, 0x65, 0x73, 0x74, 0x65, 0x72,
	  0x6e, 0x20, 0x45, 0x75, 0x72, 0x6f, 0x70, 0x65, 0x70, 0x65, 0x72, 0x73, 0x6f,
	  0x6e, 0x61, 0x6c, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x72, 0x50,
	  0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x47, 0x75, 0x74, 0x65, 0x6e, 0x62,
	  0x65, 0x72, 0x67, 0x72, 0x65, 0x67, 0x61, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73,
	  0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x68, 0x61, 0x73, 0x20, 0x62, 0x65,
	  0x65, 0x6e, 0x20, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x74, 0x6f,
	  0x67, 0x65, 0x74, 0x68, 0x65, 0x72, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74,
	  0x68, 0x65, 0x3e, 0x3c, 0x2f, 0x6c, 0x69, 0x3e, 0x3c, 0x6c, 0x69, 0x20, 0x63,
	  0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x69, 0x6e, 0x20, 0x73, 0x6f, 0x6d, 0x65,
	  0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x6d, 0x69, 0x6e,
	  0x2e, 0x6a, 0x73, 0x22, 0x3e, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	  0x3e, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x6f, 0x70, 0x75, 0x6c,
	  0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c,
	  0x20, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x3c, 0x69, 0x6d, 0x67,
	  0x20, 0x73, 0x72, 0x63, 0x3d, 0x22, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x2f,
	  0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x62, 0x79,
	  0x20, 0x74, 0x68, 0x65, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x20, 0x72,
	  0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x63, 0x6c, 0x61, 0x73, 0x73,
	  0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x63,
	  0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x64, 0x65,
	  0x72, 0x65, 0x64, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x75, 0x6d, 0x20, 0x6d, 0x65,
	  0x63, 0x68, 0x61, 0x6e, 0x69, 0x63, 0x73, 0x4e, 0x65, 0x76, 0x65, 0x72, 0x74,
	  0x68, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x6d, 0x69,
	  0x6c, 0x6c, 0x69, 0x6f, 0x6e, 0x20, 0x79, 0x65, 0x61, 0x72, 0x73, 0x20, 0x61,
	  0x67, 0x6f, 0x3c, 0x2f, 0x62, 0x6f, 0x64, 0x79, 0x3e, 0x0d, 0x0a, 0x3c, 0x2f,
	  0x68, 0x74, 0x6d, 0x6c, 0x3e, 0x0d, 0xce, 0x95, 0xce, 0xbb, 0xce, 0xbb, 0xce,
	  0xb7, 0xce, 0xbd, 0xce, 0xb9, 0xce, 0xba, 0xce, 0xac, 0x0a, 0x74, 0x61, 0x6b,
	  0x65, 0x20, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x20, 0x6f,
	  0x66, 0x61, 0x6e, 0x64, 0x2c, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x72, 0x64, 0x69,
	  0x6e, 0x67, 0x20, 0x74, 0x6f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	  0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x4d, 0x69, 0x63, 0x72,
	  0x6f, 0x73, 0x6f, 0x66, 0x74, 0x20, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73,
	  0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x20, 0x63, 0x65, 0x6e,
	  0x74, 0x75, 0x72, 0x79, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65,
	  0x20, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x64, 0x69, 0x76, 0x20, 0x63,
	  0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	  0x68, 0x6f, 0x72, 0x74, 0x6c, 0x79, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20,
	  0x74, 0x68, 0x65, 0x6e, 0x6f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x65, 0x78,
	  0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x73, 0x20, 0x6f,
	  0x66, 0x20, 0x74, 0x68, 0x6f, 0x75, 0x73, 0x61, 0x6e, 0x64, 0x73, 0x73, 0x65,
	  0x76, 0x65, 0x72, 0x61, 0x6c, 0x20, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65,
	  0x6e, 0x74, 0x61, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20,
	  0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x69, 0x6e,
	  0x67, 0x20, 0x6d, 0x69, 0x6c, 0x69, 0x74, 0x61, 0x72, 0x79, 0x69, 0x73, 0x6f,
	  0x6c, 0x61, 0x74, 0x65, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68,
	  0x65, 0x6f, 0x70, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74,
	  0x6f, 0x20, 0x74, 0x68, 0x65, 0x74, 0x68, 0x65, 0x20, 0x4f, 0x6c, 0x64, 0x20,
	  0x54, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x66, 0x72, 0x69,
	  0x63, 0x61, 0x6e, 0x20, 0x41, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x61, 0x6e, 0x73,
	  0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x74, 0x6f,
	  0x20, 0x74, 0x68, 0x65, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x65, 0x20,
	  0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x6f,
	  0x70, 0x6f, 0x6c, 0x69, 0x74, 0x61, 0x6e, 0x20, 0x61, 0x72, 0x65, 0x61, 0x6d,
	  0x61, 0x6b, 0x65, 0x73, 0x20, 0x69, 0x74, 0x20, 0x70, 0x6f, 0x73, 0x73, 0x69,
	  0x62, 0x6c, 0x65, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	  0x65, 0x64, 0x20, 0x74, 0x68, 0x61, 0x74, 0x61, 0x72, 0x67, 0x75, 0x61, 0x62,
	  0x6c, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x6f, 0x73, 0x74, 0x74, 0x79,
	  0x70, 0x65, 0x3d, 0x22, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x63, 0x73, 0x73, 0x22,
	  0x3e, 0x0a, 0x74, 0x68, 0x65, 0x20, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	  0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x72, 0x64, 0x69,
	  0x6e, 0x67, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x65, 0x3d,
	  0x22, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x63, 0x73, 0x73, 0x22, 0x20, 0x2f, 0x3e,
	  0x0a, 0x63, 0x6f, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x20, 0x77, 0x69, 0x74,
	  0x68, 0x20, 0x74, 0x68, 0x65, 0x74, 0x77, 0x6f, 0x2d, 0x74, 0x68, 0x69, 0x72,
	  0x64, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x44, 0x75, 0x72, 0x69,
	  0x6e, 0x67, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x2c,
	  0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x65,
	  0x72, 0x69, 0x6f, 0x64, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x64,
	  0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x68, 0x65, 0x74, 0x68, 0x65, 0x20, 0x69,
	  0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x61,
	  0x6e, 0x64, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x72, 0x65, 0x63, 0x65, 0x6e,
	  0x74, 0x6c, 0x79, 0x62, 0x65, 0x6c, 0x69, 0x65, 0x76, 0x65, 0x64, 0x20, 0x74,
	  0x68, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x63, 0x6f, 0x6e, 0x73, 0x63, 0x69,
	  0x6f, 0x75, 0x73, 0x6e, 0x65, 0x73, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x66, 0x6f,
	  0x72, 0x6d, 0x65, 0x72, 0x6c, 0x79, 0x20, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x20,
	  0x61, 0x73, 0x73, 0x75, 0x72, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x20,
	  0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x66, 0x69, 0x72, 0x73, 0x74, 0x20, 0x61,
	  0x70, 0x70, 0x65, 0x61, 0x72, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x6f, 0x63, 0x63,
	  0x61, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x75, 0x73, 0x65,
	  0x64, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x61, 0x62, 0x73,
	  0x6f, 0x6c, 0x75, 0x74, 0x65, 0x3b, 0x22, 0x20, 0x74, 0x61, 0x72, 0x67, 0x65,
	  0x74, 0x3d, 0x22, 0x5f, 0x62, 0x6c, 0x61, 0x6e, 0x6b, 0x22, 0x20, 0x70, 0x6f,
	  0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	  0x76, 0x65, 0x3b, 0x74, 0x65, 0x78, 0x74, 0x2d, 0x61, 0x6c, 0x69, 0x67, 0x6e,
	  0x3a, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x3b, 0x6a, 0x61, 0x78, 0x2f, 0x6c,
	  0x69, 0x62, 0x73, 0x2f, 0x6a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x31, 0x2e,
	  0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x63, 0x6f,
	  0x6c, 0x6f, 0x72, 0x3a, 0x23, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x61, 0x70,
	  0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x61, 0x6e, 0x67,
	  0x75, 0x61, 0x67, 0x65, 0x22, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	  0x3d, 0x22, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x20, 0x68, 0x74, 0x74, 0x70, 0x2d,
	  0x65, 0x71, 0x75, 0x69, 0x76, 0x3d, 0x22, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63,
	  0x79, 0x20, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x3c, 0x2f, 0x61, 0x3e, 0x65,
	  0x28, 0x22, 0x25, 0x33, 0x43, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x20, 0x73,
	  0x72, 0x63, 0x3d, 0x27, 0x22, 0x20, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x3d,
	  0x22, 0x5f, 0x62, 0x6c, 0x61, 0x6e, 0x6b, 0x22, 0x3e, 0x4f, 0x6e, 0x20, 0x74,
	  0x68, 0x65, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x68, 0x61, 0x6e, 0x64,
	  0x2c, 0x2e, 0x6a, 0x70, 0x67, 0x7c, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x7c, 0x72,
	  0x69, 0x67, 0x68, 0x74, 0x7c, 0x32, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x3c,
	  0x64, 0x69, 0x76, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x3c, 0x64,
	  0x69, 0x76, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x66, 0x6c, 0x6f,
	  0x61, 0x74, 0x3a, 0x6e, 0x69, 0x6e, 0x65, 0x74, 0x65, 0x65, 0x6e, 0x74, 0x68,
	  0x20, 0x63, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x79, 0x3c, 0x2f, 0x62, 0x6f, 0x64,
	  0x79, 0x3e, 0x0d, 0x0a, 0x3c, 0x2f, 0x68, 0x74, 0x6d, 0x6c, 0x3e, 0x0d, 0x0a,
	  0x3c, 0x69, 0x6d, 0x67, 0x20, 0x73, 0x72, 0x63, 0x3d, 0x22, 0x68, 0x74, 0x74,
	  0x70, 0x3a, 0x2f, 0x2f, 0x73, 0x3b, 0x74, 0x65, 0x78, 0x74, 0x2d, 0x61, 0x6c,
	  0x69, 0x67, 0x6e, 0x3a, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x6f, 0x6e,
	  0x74, 0x2d, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3a, 0x20, 0x62, 0x6f, 0x6c,
	  0x64, 0x3b, 0x20, 0x41, 0x63, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x20,
	  0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72,
	  0x65, 0x6e, 0x63, 0x65, 0x20, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x22,
	  0x20, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3d,
	  0x22, 0x30, 0x22, 0x20, 0x22, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22,
	  0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x6c, 0x69, 0x6e, 0x6b,
	  0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	  0x2f, 0x68, 0x74, 0x6d, 0x6c, 0x34, 0x2f, 0x6c, 0x6f, 0x6f, 0x73, 0x65, 0x2e,
	  0x64, 0x74, 0x64, 0x22, 0x3e, 0x0a, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x20,
	  0x74, 0x68, 0x69, 0x73, 0x20, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x3c, 0x2f,
	  0x74, 0x64, 0x3e, 0x3c, 0x2f, 0x74, 0x72, 0x3e, 0x3c, 0x2f, 0x74, 0x61, 0x62,
	  0x6c, 0x65, 0x3e, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x6c, 0x79, 0x20, 0x72, 0x65,
	  0x6c, 0x61, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x66, 0x6f, 0x72, 0x20, 0x74,
	  0x68, 0x65, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x20, 0x74, 0x69, 0x6d, 0x65,
	  0x3b, 0x66, 0x6f, 0x6e, 0x74, 0x2d, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3a,
	  0x62, 0x6f, 0x6c, 0x64, 0x3b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x74, 0x79,
	  0x70, 0x65, 0x3d, 0x22, 0x74, 0x65, 0x78, 0x74, 0x22, 0x20, 0x3c, 0x73, 0x70,
	  0x61, 0x6e, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x66, 0x6f, 0x6e,
	  0x74, 0x2d, 0x6f, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x79, 0x73, 0x74, 0x61, 0x74,
	  0x65, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x09, 0x3c, 0x64, 0x69, 0x76, 0x20,
	  0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x64,
	  0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	  0x69, 0x6f, 0x6e, 0x2e, 0x20, 0x46, 0x6f, 0x72, 0x20, 0x65, 0x78, 0x61, 0x6d,
	  0x70, 0x6c, 0x65, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x20, 0x77, 0x69,
	  0x64, 0x65, 0x20, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x20, 0x6f, 0x66,
	  0x20, 0x3c, 0x21, 0x44, 0x4f, 0x43, 0x54, 0x59, 0x50, 0x45, 0x20, 0x68, 0x74,
	  0x6d, 0x6c, 0x3e, 0x0d, 0x0a, 0x3c, 0x26, 0x6e, 0x62, 0x73, 0x70, 0x3b, 0x26,
	  0x6e, 0x62, 0x73, 0x70, 0x3b, 0x26, 0x6e, 0x62, 0x73, 0x70, 0x3b, 0x22, 0x3e,
	  0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70,
	  0x3a, 0x2f, 0x2f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x66, 0x6c, 0x6f,
	  0x61, 0x74, 0x3a, 0x6c, 0x65, 0x66, 0x74, 0x3b, 0x63, 0x6f, 0x6e, 0x63, 0x65,
	  0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65,
	  0x3d, 0x68, 0x74, 0x74, 0x70, 0x25, 0x33, 0x41, 0x25, 0x32, 0x46, 0x25, 0x32,
	  0x46, 0x77, 0x77, 0x77, 0x2e, 0x69, 0x6e, 0x20, 0x70, 0x6f, 0x70, 0x75, 0x6c,
	  0x61, 0x72, 0x20, 0x63, 0x75, 0x6c, 0x74, 0x75, 0x72, 0x65, 0x74, 0x79, 0x70,
	  0x65, 0x3d, 0x22, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x63, 0x73, 0x73, 0x22, 0x20,
	  0x2f, 0x3e, 0x69, 0x74, 0x20, 0x69, 0x73, 0x20, 0x70, 0x6f, 0x73, 0x73, 0x69,
	  0x62, 0x6c, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x48, 0x61, 0x72, 0x76, 0x61, 0x72,
	  0x64, 0x20, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79, 0x74,
	  0x79, 0x6c, 0x65, 0x73, 0x68, 0x65, 0x65, 0x74, 0x22, 0x20, 0x68, 0x72, 0x65,
	  0x66, 0x3d, 0x22, 0x2f, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x20,
	  0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4f, 0x78, 0x66, 0x6f,
	  0x72, 0x64, 0x20, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79,
	  0x20, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x22, 0x6b, 0x65, 0x79, 0x77, 0x6f,
	  0x72, 0x64, 0x73, 0x22, 0x20, 0x63, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22,
	  0x74, 0x65, 0x78, 0x74, 0x2d, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x3a, 0x74, 0x68,
	  0x65, 0x20, 0x55, 0x6e, 0x69, 0x74, 0x65, 0x64, 0x20, 0x4b, 0x69, 0x6e, 0x67,
	  0x64, 0x6f, 0x6d, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x6c, 0x20, 0x67, 0x6f,
	  0x76, 0x65, 0x72, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x3c, 0x64, 0x69, 0x76, 0x20,
	  0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e,
	  0x20, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x6e,
	  0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	  0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x3c, 0x64, 0x69,
	  0x76, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x68, 0x65, 0x61, 0x64,
	  0x65, 0x72, 0x2e, 0x6d, 0x69, 0x6e, 0x2e, 0x6a, 0x73, 0x22, 0x3e, 0x3c, 0x2f,
	  0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x64, 0x65, 0x73, 0x74, 0x72, 0x75,
	  0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x73,
	  0x6c, 0x69, 0x67, 0x68, 0x74, 0x6c, 0x79, 0x20, 0x64, 0x69, 0x66, 0x66, 0x65,
	  0x72, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x72, 0x64,
	  0x61, 0x6e, 0x63, 0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0x74, 0x65, 0x6c, 0x65,
	  0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	  0x73, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x20, 0x74, 0x68,
	  0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x6c, 0x79,
	  0x20, 0x74, 0x68, 0x65, 0x72, 0x65, 0x61, 0x66, 0x74, 0x65, 0x72, 0x65, 0x73,
	  0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x69, 0x6e, 0x20, 0x74,
	  0x68, 0x65, 0x20, 0x45, 0x75, 0x72, 0x6f, 0x70, 0x65, 0x61, 0x6e, 0x20, 0x63,
	  0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x48, 0x6f, 0x77, 0x65, 0x76,
	  0x65, 0x72, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x72, 0x65, 0x20, 0x61, 0x72, 0x65,
	  0x73, 0x72, 0x63, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x73,
	  0x74, 0x61, 0x74, 0x69, 0x63, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65,
	  0x64, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x22, 0x20, 0x73,
	  0x72, 0x63, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77,
	  0x77, 0x2e, 0x61, 0x20, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x20, 0x6e, 0x75, 0x6d,
	  0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x54, 0x65, 0x6c, 0x65, 0x63, 0x6f,
	  0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	  0x20, 0x72, 0x65, 0x6c, 0x3d, 0x22, 0x6e, 0x6f, 0x66, 0x6f, 0x6c, 0x6c, 0x6f,
	  0x77, 0x22, 0x20, 0x74, 0x48, 0x6f, 0x6c, 0x79, 0x20, 0x52, 0x6f, 0x6d, 0x61,
	  0x6e, 0x20, 0x45, 0x6d, 0x70, 0x65, 0x72, 0x6f, 0x72, 0x61, 0x6c, 0x6d, 0x6f,
	  0x73, 0x74, 0x20, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x6c,
	  0x79, 0x22, 0x20, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3d, 0x22, 0x30, 0x22,
	  0x20, 0x61, 0x6c, 0x74, 0x3d, 0x22, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x61,
	  0x72, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x53, 0x74, 0x61, 0x74, 0x65, 0x63, 0x75,
	  0x6c, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20,
	  0x74, 0x68, 0x65, 0x43, 0x49, 0x41, 0x20, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x20,
	  0x46, 0x61, 0x63, 0x74, 0x62, 0x6f, 0x6f, 0x6b, 0x74, 0x68, 0x65, 0x20, 0x6d,
	  0x6f, 0x73, 0x74, 0x20, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x74,
	  0x61, 0x6e, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x72, 0x79, 0x20, 0x6f,
	  0x66, 0x20, 0x74, 0x68, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x62,
	  0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x3c, 0x6c, 0x69,
	  0x3e, 0x3c, 0x65, 0x6d, 0x3e, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d,
	  0x22, 0x2f, 0x74, 0x68, 0x65, 0x20, 0x41, 0x74, 0x6c, 0x61, 0x6e, 0x74, 0x69,
	  0x63, 0x20, 0x4f, 0x63, 0x65, 0x61, 0x6e, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	  0x6c, 0x79, 0x20, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2c, 0x73,
	  0x68, 0x6f, 0x72, 0x74, 0x6c, 0x79, 0x20, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65,
	  0x20, 0x74, 0x68, 0x65, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74,
	  0x20, 0x74, 0x79, 0x70, 0x65, 0x73, 0x20, 0x6f, 0x66, 0x74, 0x68, 0x65, 0x20,
	  0x4f, 0x74, 0x74, 0x6f, 0x6d, 0x61, 0x6e, 0x20, 0x45, 0x6d, 0x70, 0x69, 0x72,
	  0x65, 0x3e, 0x3c, 0x69, 0x6d, 0x67, 0x20, 0x73, 0x72, 0x63, 0x3d, 0x22, 0x68,
	  0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x41, 0x6e, 0x20, 0x49, 0x6e, 0x74, 0x72,
	  0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x63, 0x6f,
	  0x6e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x6f, 0x66, 0x20,
	  0x74, 0x68, 0x65, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x20,
	  0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x65,
	  0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x20, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73,
	  0x69, 0x6e, 0x64, 0x69, 0x67, 0x65, 0x6e, 0x6f, 0x75, 0x73, 0x20, 0x70, 0x65,
	  0x6f, 0x70, 0x6c, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x65, 0x64, 0x69,
	  0x6e, 0x67, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x69, 0x6e, 0x66,
	  0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x6e, 0x20, 0x74,
	  0x68, 0x65, 0x74, 0x68, 0x65, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x20, 0x68, 0x61,
	  0x76, 0x65, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x69, 0x6e, 0x76, 0x6f, 0x6c, 0x76,
	  0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x64,
	  0x69, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x74, 0x6f, 0x20, 0x74,
	  0x68, 0x72, 0x65, 0x65, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x74, 0x20,
	  0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x69, 0x73, 0x20, 0x72,
	  0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x20, 0x66, 0x6f,
	  0x72, 0x64, 0x69, 0x73, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	  0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f,
	  0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x77, 0x69, 0x74, 0x68, 0x77, 0x69,
	  0x64, 0x65, 0x6c, 0x79, 0x20, 0x72, 0x65, 0x67, 0x61, 0x72, 0x64, 0x65, 0x64,
	  0x20, 0x61, 0x73, 0x68, 0x69, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6d,
	  0x70, 0x6f, 0x72, 0x61, 0x72, 0x69, 0x65, 0x73, 0x66, 0x6f, 0x75, 0x6e, 0x64,
	  0x69, 0x6e, 0x67, 0x20, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66,
	  0x44, 0x6f, 0x6d, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6e, 0x20, 0x52, 0x65, 0x70,
	  0x75, 0x62, 0x6c, 0x69, 0x63, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x6c,
	  0x79, 0x20, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x74, 0x68, 0x65,
	  0x20, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x20,
	  0x6f, 0x66, 0x61, 0x72, 0x65, 0x20, 0x61, 0x6c, 0x73, 0x6f, 0x20, 0x61, 0x76,
	  0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x20,
	  0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72,
	  0x65, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66,
	  0x20, 0x74, 0x68, 0x65, 0x74, 0x68, 0x65, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72,
	  0x61, 0x6c, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x69, 0x73, 0x20, 0x61,
	  0x6c, 0x6d, 0x6f, 0x73, 0x74, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x72, 0x65, 0x6c,
	  0x79, 0x70, 0x61, 0x73, 0x73, 0x65, 0x73, 0x20, 0x74, 0x68, 0x72, 0x6f, 0x75,
	  0x67, 0x68, 0x20, 0x74, 0x68, 0x65, 0x68, 0x61, 0x73, 0x20, 0x62, 0x65, 0x65,
	  0x6e, 0x20, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x63, 0x6f,
	  0x6d, 0x70, 0x75, 0x74, 0x65, 0x72, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x76, 0x69,
	  0x64, 0x65, 0x6f, 0x47, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x69, 0x63, 0x20, 0x6c,
	  0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x20, 0x61, 0x63, 0x63, 0x6f,
	  0x72, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20,
	  0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x66, 0x72, 0x6f,
	  0x6d, 0x20, 0x74, 0x68, 0x65, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x6c, 0x79, 0x20,
	  0x61, 0x66, 0x74, 0x65, 0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x68, 0x72, 0x65,
	  0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77,
	  0x77, 0x2e, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x20, 0x64, 0x65, 0x76, 0x65,
	  0x6c, 0x6f, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x20,
	  0x6f, 0x66, 0x20, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x3c,
	  0x64, 0x69, 0x76, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x73, 0x65,
	  0x61, 0x72, 0x63, 0x68, 0x7c, 0x20, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66,
	  0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x49, 0x6e, 0x20, 0x70,
	  0x61, 0x72, 0x74, 0x69, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x2c, 0x20, 0x74, 0x68,
	  0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x20, 0x66, 0x6f, 0x6f,
	  0x74, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x6f, 0x72, 0x20, 0x6f, 0x74, 0x68, 0x65,
	  0x72, 0x20, 0x73, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x74, 0x68,
	  0x6f, 0x75, 0x73, 0x61, 0x6e, 0x64, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x79, 0x65,
	  0x61, 0x72, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	  0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x3c, 0x2f, 0x64, 0x69, 0x76,
	  0x3e, 0x0d, 0x0a, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0d, 0x0a, 0x0d, 0x0a,
	  0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x69, 0x6e, 0x64, 0x65,
	  0x78, 0x2e, 0x70, 0x68, 0x70, 0x77, 0x61, 0x73, 0x20, 0x65, 0x73, 0x74, 0x61,
	  0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x6d, 0x69, 0x6e,
	  0x2e, 0x6a, 0x73, 0x22, 0x3e, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	  0x3e, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x65,
	  0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x61, 0x20, 0x73, 0x74, 0x72, 0x6f,
	  0x6e, 0x67, 0x20, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x73,
	  0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x2d,
	  0x74, 0x6f, 0x70, 0x3a, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	  0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x67, 0x72, 0x61, 0x64,
	  0x75, 0x61, 0x74, 0x65, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68,
	  0x65, 0x54, 0x72, 0x61, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x6c,
	  0x79, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	  0x28, 0x22, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x22, 0x29, 0x3b, 0x48, 0x6f,
	  0x77, 0x65, 0x76, 0x65, 0x72, 0x2c, 0x20, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x20,
	  0x74, 0x68, 0x65, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0a, 0x3c, 0x2f, 0x64, 0x69,
	  0x76, 0x3e, 0x0a, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x3b,
	  0x20, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x2d, 0x6c, 0x65, 0x66, 0x74, 0x3a,
	  0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x67,
	  0x61, 0x69, 0x6e, 0x73, 0x74, 0x30, 0x3b, 0x20, 0x76, 0x65, 0x72, 0x74, 0x69,
	  0x63, 0x61, 0x6c, 0x2d, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x3a, 0x55, 0x6e, 0x66,
	  0x6f, 0x72, 0x74, 0x75, 0x6e, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x2c, 0x20, 0x74,
	  0x68, 0x65, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x69, 0x6d, 0x61, 0x67, 0x65,
	  0x2f, 0x78, 0x2d, 0x69, 0x63, 0x6f, 0x6e, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0a,
	  0x3c, 0x64, 0x69, 0x76, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x20,
	  0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x66,
	  0x69, 0x78, 0x22, 0x3e, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x63, 0x6c, 0x61, 0x73,
	  0x73, 0x3d, 0x22, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x09, 0x09, 0x3c, 0x2f,
	  0x64, 0x69, 0x76, 0x3e, 0x0a, 0x09, 0x09, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e,
	  0x0a, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x70,
	  0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0xd0, 0x91, 0xd1, 0x8a, 0xd0, 0xbb, 0xd0,
	  0xb3, 0xd0, 0xb0, 0xd1, 0x80, 0xd1, 0x81, 0xd0, 0xba, 0xd0, 0xb8, 0xd0, 0xb1,
	  0xd1, 0x8a, 0xd0, 0xbb, 0xd0, 0xb3, 0xd0, 0xb0, 0xd1, 0x80, 0xd1, 0x81, 0xd0,
	  0xba, 0xd0, 0xb8, 0xd0, 0xa4, 0xd0, 0xb5, 0xd0, 0xb4, 0xd0, 0xb5, 0xd1, 0x80,
	  0xd0, 0xb0, 0xd1, 0x86, 0xd0, 0xb8, 0xd0, 0xb8, 0xd0, 0xbd, 0xd0, 0xb5, 0xd1,
	  0x81, 0xd0, 0xba, 0xd0, 0xbe, 0xd0, 0xbb, 0xd1, 0x8c, 0xd0, 0xba, 0xd0, 0xbe,
	  0xd1, 0x81, 0xd0, 0xbe, 0xd0, 0xbe, 0xd0, 0xb1, 0xd1, 0x89, 0xd0, 0xb5, 0xd0,
	  0xbd, 0xd0, 0xb8, 0xd0, 0xb5, 0xd1, 0x81, 0xd0, 0xbe, 0xd0, 0xbe, 0xd0, 0xb1,
	  0xd1, 0x89, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb8, 0xd1, 0x8f, 0xd0, 0xbf, 0xd1,
	  0x80, 0xd0, 0xbe, 0xd0, 0xb3, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xbc, 0xd0, 0xbc,
	  0xd1, 0x8b, 0xd0, 0x9e, 0xd1, 0x82, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xb0, 0xd0,
	  0xb2, 0xd0, 0xb8, 0xd1, 0x82, 0xd1, 0x8c, 0xd0, 0xb1, 0xd0, 0xb5, 0xd1, 0x81,
	  0xd0, 0xbf, 0xd0, 0xbb, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0,
	  0xbc, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb8, 0xd0, 0xb0,
	  0xd0, 0xbb, 0xd1, 0x8b, 0xd0, 0xbf, 0xd0, 0xbe, 0xd0, 0xb7, 0xd0, 0xb2, 0xd0,
	  0xbe, 0xd0, 0xbb, 0xd1, 0x8f, 0xd0, 0xb5, 0xd1, 0x82, 0xd0, 0xbf, 0xd0, 0xbe,
	  0xd1, 0x81, 0xd0, 0xbb, 0xd0, 0xb5, 0xd0, 0xb4, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0,
	  0xb5, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xb7, 0xd0, 0xbb, 0xd0, 0xb8, 0xd1, 0x87,
	  0xd0, 0xbd, 0xd1, 0x8b, 0xd1, 0x85, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xbe, 0xd0,
	  0xb4, 0xd1, 0x83, 0xd0, 0xba, 0xd1, 0x86, 0xd0, 0xb8, 0xd0, 0xb8, 0xd0, 0xbf,
	  0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb3, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xbc, 0xd0,
	  0xbc, 0xd0, 0xb0, 0xd0, 0xbf, 0xd0, 0xbe, 0xd0, 0xbb, 0xd0, 0xbd, 0xd0, 0xbe,
	  0xd1, 0x81, 0xd1, 0x82, 0xd1, 0x8c, 0xd1, 0x8e, 0xd0, 0xbd, 0xd0, 0xb0, 0xd1,
	  0x85, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xb8, 0xd1, 0x82, 0xd1, 0x81, 0xd1, 0x8f,
	  0xd0, 0xb8, 0xd0, 0xb7, 0xd0, 0xb1, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0,
	  0xbd, 0xd0, 0xbe, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb0, 0xd1, 0x81, 0xd0, 0xb5,
	  0xd0, 0xbb, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb8, 0xd1, 0x8f, 0xd0, 0xb8, 0xd0,
	  0xb7, 0xd0, 0xbc, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb8,
	  0xd1, 0x8f, 0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xb3, 0xd0,
	  0xbe, 0xd1, 0x80, 0xd0, 0xb8, 0xd0, 0xb8, 0xd0, 0x90, 0xd0, 0xbb, 0xd0, 0xb5,
	  0xd0, 0xba, 0xd1, 0x81, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb4, 0xd1, 0x80, 0xe0,
	  0xa4, 0xa6, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4,
	  0xb0, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xae, 0xe0, 0xa5, 0x88, 0xe0, 0xa4, 0xa8,
	  0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0x85, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xaa, 0xe0,
	  0xa5, 0x8d, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xa6, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4,
	  0xa8, 0xe0, 0xa4, 0xad, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xa4,
	  0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0x85, 0xe0, 0xa4, 0xa8, 0xe0,
	  0xa5, 0x81, 0xe0, 0xa4, 0xa6, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb6, 0xe0, 0xa4,
	  0xb9, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xa6,
	  0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0x87, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xa1, 0xe0,
	  0xa4, 0xbf, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa6, 0xe0, 0xa4,
	  0xbf, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x80,
	  0xe0, 0xa4, 0x85, 0xe0, 0xa4, 0xa7, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0x95, 0xe0,
	  0xa4, 0xbe, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xb5, 0xe0, 0xa5, 0x80, 0xe0, 0xa4,
	  0xa1, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xaf, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0x9a,
	  0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0x9f, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xa0, 0xe0,
	  0xa5, 0x87, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4,
	  0x9a, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0x82,
	  0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb6, 0xe0, 0xa4, 0xa8, 0xe0,
	  0xa4, 0xa6, 0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4,
	  0xaf, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xaa, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb0,
	  0xe0, 0xa4, 0xaf, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0x97, 0xe0, 0xa4, 0x85, 0xe0,
	  0xa4, 0xa8, 0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4,
	  0xb0, 0xe0, 0xa4, 0x91, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xbe,
	  0xe0, 0xa4, 0x87, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xbe, 0xe0,
	  0xa4, 0xb0, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0x9f, 0xe0, 0xa5, 0x80, 0xe0, 0xa4,
	  0xb6, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xa4, 0xe0, 0xa5, 0x8b,
	  0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0x95, 0xe0,
	  0xa4, 0xb8, 0xe0, 0xa4, 0xad, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xab, 0xe0, 0xa4,
	  0xbc, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x88, 0xe0, 0xa4, 0xb6,
	  0xe0, 0xa4, 0xb6, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xa4, 0xe0,
	  0xa5, 0x87, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xaa, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4,
	  0xb0, 0xe0, 0xa4, 0xa6, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb6, 0xe0, 0xa4, 0xaa,
	  0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xaf, 0xe0,
	  0xa4, 0xb0, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x82, 0xe0, 0xa4,
	  0xa6, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x8d,
	  0xe0, 0xa4, 0xa5, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xbf, 0xe0,
	  0xa4, 0x89, 0xe0, 0xa4, 0xa4, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4,
	  0xbe, 0xe0, 0xa4, 0xa6, 0xe0, 0xa4, 0x89, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x8d,
	  0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0x9a, 0xe0,
	  0xa4, 0xbf, 0xe0, 0xa4, 0x9f, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xa0, 0xe0, 0xa4,
	  0xbe, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa4, 0xe0, 0xa5, 0x8d,
	  0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x9c, 0xe0, 0xa5, 0x8d, 0xe0,
	  0xa4, 0xaf, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa6, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4,
	  0xaa, 0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa8,
	  0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x9c, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0xa1, 0xe0,
	  0xa4, 0xbc, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0x85, 0xe0, 0xa4,
	  0xa8, 0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa6,
	  0xe0, 0xa4, 0xb6, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x87, 0xe0,
	  0xa4, 0xa3, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xb6, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4,
	  0x95, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb7, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb8,
	  0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb0, 0xe0,
	  0xa5, 0x80, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0x97, 0xe0, 0xa5,
	  0x8d, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xb9, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xb0,
	  0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xa3, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xae, 0xe0,
	  0xa4, 0xac, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4,
	  0x82, 0xe0, 0xa4, 0xa1, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0x9a, 0xe0, 0xa5, 0x8d,
	  0xe0, 0xa4, 0x9a, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0x89, 0xe0,
	  0xa4, 0xaa, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xac, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4,
	  0xa7, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xa4, 0xe0, 0xa5, 0x8d,
	  0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0x82, 0xe0,
	  0xa4, 0xaa, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0x95, 0xe0, 0xa4,
	  0x89, 0xe0, 0xa4, 0xae, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xae, 0xe0, 0xa5, 0x80,
	  0xe0, 0xa4, 0xa6, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa7, 0xe0,
	  0xa5, 0x8d, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4,
	  0xb9, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xbe,
	  0xe0, 0xa4, 0xb6, 0xe0, 0xa4, 0xac, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xa6, 0xe0,
	  0xa5, 0x8b, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xae, 0xe0, 0xa5, 0x80, 0xe0, 0xa4,
	  0xa1, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x86,
	  0xe0, 0xa4, 0x88, 0xe0, 0xa4, 0xaa, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0x8f, 0xe0,
	  0xa4, 0xb2, 0xe0, 0xa4, 0xae, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0xac, 0xe0, 0xa4,
	  0xbe, 0xe0, 0xa4, 0x87, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0x82,
	  0xe0, 0xa4, 0x96, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xbe, 0xe0,
	  0xa4, 0x86, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x87, 0xe0, 0xa4,
	  0xb6, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0x85, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x81,
	  0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xa7, 0xe0, 0xa4, 0xac, 0xe0,
	  0xa4, 0xbe, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0xbc, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4,
	  0xb0, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xb5, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xa8,
	  0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xaa, 0xe0, 0xa5, 0x8d, 0xe0,
	  0xa4, 0xb0, 0xe0, 0xa4, 0xae, 0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0x96, 0xe0, 0xa4,
	  0xaa, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xb6, 0xe0, 0xa5, 0x8d,
	  0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xaa, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xbf, 0xe0,
	  0xa4, 0xb5, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5,
	  0x81, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa8,
	  0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x8d, 0xe0,
	  0xa4, 0xa5, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0x86, 0xe0, 0xa4, 0xaf, 0xe0, 0xa5,
	  0x8b, 0xe0, 0xa4, 0x9c, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xb8,
	  0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xbe, 0xe0,
	  0xa4, 0xb0, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x85, 0xd8, 0xb4, 0xd8, 0xa7, 0xd8,
	  0xb1, 0xd9, 0x83, 0xd8, 0xa7, 0xd8, 0xaa, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x85,
	  0xd9, 0x86, 0xd8, 0xaa, 0xd8, 0xaf, 0xd9, 0x8a, 0xd8, 0xa7, 0xd8, 0xaa, 0xd8,
	  0xa7, 0xd9, 0x84, 0xd9, 0x83, 0xd9, 0x85, 0xd8, 0xa8, 0xd9, 0x8a, 0xd9, 0x88,
	  0xd8, 0xaa, 0xd8, 0xb1, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x85, 0xd8, 0xb4, 0xd8,
	  0xa7, 0xd9, 0x87, 0xd8, 0xaf, 0xd8, 0xa7, 0xd8, 0xaa, 0xd8, 0xb9, 0xd8, 0xaf,
	  0xd8, 0xaf, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb2, 0xd9, 0x88, 0xd8, 0xa7, 0xd8,
	  0xb1, 0xd8, 0xb9, 0xd8, 0xaf, 0xd8, 0xaf, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xb1,
	  0xd8, 0xaf, 0xd9, 0x88, 0xd8, 0xaf, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa5, 0xd8,
	  0xb3, 0xd9, 0x84, 0xd8, 0xa7, 0xd9, 0x85, 0xd9, 0x8a, 0xd8, 0xa9, 0xd8, 0xa7,
	  0xd9, 0x84, 0xd9, 0x81, 0xd9, 0x88, 0xd8, 0xaa, 0xd9, 0x88, 0xd8, 0xb4, 0xd9,
	  0x88, 0xd8, 0xa8, 0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x85, 0xd8, 0xb3, 0xd8, 0xa7,
	  0xd8, 0xa8, 0xd9, 0x82, 0xd8, 0xa7, 0xd8, 0xaa, 0xd8, 0xa7, 0xd9, 0x84, 0xd9,
	  0x85, 0xd8, 0xb9, 0xd9, 0x84, 0xd9, 0x88, 0xd9, 0x85, 0xd8, 0xa7, 0xd8, 0xaa,
	  0xd8, 0xa7, 0xd9, 0x84, 0xd9, 0x85, 0xd8, 0xb3, 0xd9, 0x84, 0xd8, 0xb3, 0xd9,
	  0x84, 0xd8, 0xa7, 0xd8, 0xaa, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xac, 0xd8, 0xb1,
	  0xd8, 0xa7, 0xd9, 0x81, 0xd9, 0x8a, 0xd9, 0x83, 0xd8, 0xb3, 0xd8, 0xa7, 0xd9,
	  0x84, 0xd8, 0xa7, 0xd8, 0xb3, 0xd9, 0x84, 0xd8, 0xa7, 0xd9, 0x85, 0xd9, 0x8a,
	  0xd8, 0xa9, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa7, 0xd8, 0xaa, 0xd8, 0xb5, 0xd8,
	  0xa7, 0xd9, 0x84, 0xd8, 0xa7, 0xd8, 0xaa, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	  0x64, 0x73, 0x22, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x3d, 0x22,
	  0x77, 0x33, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x31, 0x39, 0x39, 0x39, 0x2f, 0x78,
	  0x68, 0x74, 0x6d, 0x6c, 0x22, 0x3e, 0x3c, 0x61, 0x20, 0x74, 0x61, 0x72, 0x67,
	  0x65, 0x74, 0x3d, 0x22, 0x5f, 0x62, 0x6c, 0x61, 0x6e, 0x6b, 0x22, 0x20, 0x74,
	  0x65, 0x78, 0x74, 0x2f, 0x68, 0x74, 0x6d, 0x6c, 0x3b, 0x20, 0x63, 0x68, 0x61,
	  0x72, 0x73, 0x65, 0x74, 0x3d, 0x22, 0x20, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	  0x3d, 0x22, 0x5f, 0x62, 0x6c, 0x61, 0x6e, 0x6b, 0x22, 0x3e, 0x3c, 0x74, 0x61,
	  0x62, 0x6c, 0x65, 0x20, 0x63, 0x65, 0x6c, 0x6c, 0x70, 0x61, 0x64, 0x64, 0x69,
	  0x6e, 0x67, 0x3d, 0x22, 0x61, 0x75, 0x74, 0x6f, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	  0x65, 0x74, 0x65, 0x3d, 0x22, 0x6f, 0x66, 0x66, 0x22, 0x20, 0x74, 0x65, 0x78,
	  0x74, 0x2d, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x3a, 0x20, 0x63, 0x65, 0x6e, 0x74,
	  0x65, 0x72, 0x3b, 0x74, 0x6f, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x20, 0x76, 0x65,
	  0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x62, 0x79, 0x20, 0x62, 0x61, 0x63, 0x6b,
	  0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3a,
	  0x20, 0x23, 0x22, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74,
	  0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x2f, 0x64, 0x69, 0x76, 0x3e,
	  0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x69, 0x64,
	  0x3d, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x23, 0x22, 0x20,
	  0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x22, 0x3e, 0x3c, 0x69, 0x6d, 0x67,
	  0x20, 0x73, 0x72, 0x63, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	  0x63, 0x72, 0x69, 0x70, 0x74, 0x22, 0x20, 0x73, 0x72, 0x63, 0x3d, 0x22, 0x68,
	  0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x0a, 0x3c, 0x73, 0x63, 0x72, 0x69, 0x70,
	  0x74, 0x20, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x3d, 0x22, 0x2f,
	  0x2f, 0x45, 0x4e, 0x22, 0x20, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	  0x77, 0x77, 0x77, 0x2e, 0x77, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x55, 0x52,
	  0x49, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x28, 0x22, 0x20,
	  0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x6a, 0x61, 0x76, 0x61, 0x73, 0x63, 0x72,
	  0x69, 0x70, 0x74, 0x3a, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x63, 0x6c, 0x61, 0x73,
	  0x73, 0x3d, 0x22, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x64, 0x6f, 0x63,
	  0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x28, 0x27,
	  0x3c, 0x73, 0x63, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x20,
	  0x61, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x3b, 0x73, 0x63, 0x72, 0x69,
	  0x70, 0x74, 0x20, 0x73, 0x72, 0x63, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a,
	  0x2f, 0x2f, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x6d, 0x61, 0x72,
	  0x67, 0x69, 0x6e, 0x2d, 0x74, 0x6f, 0x70, 0x3a, 0x2e, 0x6d, 0x69, 0x6e, 0x2e,
	  0x6a, 0x73, 0x22, 0x3e, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e,
	  0x0a, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0a, 0x3c, 0x64, 0x69, 0x76, 0x20,
	  0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x77, 0x33, 0x2e, 0x6f, 0x72, 0x67,
	  0x2f, 0x31, 0x39, 0x39, 0x39, 0x2f, 0x78, 0x68, 0x74, 0x6d, 0x6c, 0x22, 0x20,
	  0x0a, 0x0d, 0x0a, 0x3c, 0x2f, 0x62, 0x6f, 0x64, 0x79, 0x3e, 0x0d, 0x0a, 0x3c,
	  0x2f, 0x68, 0x74, 0x6d, 0x6c, 0x3e, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63,
	  0x74, 0x69, 0x6f, 0x6e, 0x20, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x2f,
	  0x22, 0x20, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x3d, 0x22, 0x5f, 0x62, 0x6c,
	  0x61, 0x6e, 0x6b, 0x22, 0x3e, 0x3c, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x68, 0x72,
	  0x65, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x65, 0x6e,
	  0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x3d, 0x22, 0x75, 0x74, 0x66, 0x2d, 0x38,
	  0x22, 0x3f, 0x3e, 0x0a, 0x77, 0x2e, 0x61, 0x64, 0x64, 0x45, 0x76, 0x65, 0x6e,
	  0x74, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x3f, 0x61, 0x63, 0x74,
	  0x69, 0x6f, 0x6e, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77,
	  0x77, 0x77, 0x2e, 0x69, 0x63, 0x6f, 0x6e, 0x22, 0x20, 0x68, 0x72, 0x65, 0x66,
	  0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x20, 0x73, 0x74, 0x79,
	  0x6c, 0x65, 0x3d, 0x22, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	  0x64, 0x3a, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x74, 0x65, 0x78, 0x74, 0x2f,
	  0x63, 0x73, 0x73, 0x22, 0x20, 0x2f, 0x3e, 0x0a, 0x6d, 0x65, 0x74, 0x61, 0x20,
	  0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x3d, 0x22, 0x6f, 0x67, 0x3a,
	  0x74, 0x3c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d,
	  0x22, 0x74, 0x65, 0x78, 0x74, 0x22, 0x20, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65,
	  0x3d, 0x22, 0x74, 0x65, 0x78, 0x74, 0x2d, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x3a,
	  0x74, 0x68, 0x65, 0x20, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x6d, 0x65,
	  0x6e, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x68, 0x65,
	  0x65, 0x74, 0x22, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x74, 0x65, 0x68,
	  0x74, 0x6d, 0x6c, 0x3b, 0x20, 0x63, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x3d,
	  0x75, 0x74, 0x66, 0x2d, 0x38, 0x69, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x69,
	  0x64, 0x65, 0x72, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x74, 0x61,
	  0x62, 0x6c, 0x65, 0x20, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3d, 0x22, 0x31, 0x30,
	  0x30, 0x25, 0x22, 0x20, 0x49, 0x6e, 0x20, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69,
	  0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e,
	  0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74,
	  0x68, 0x65, 0x20, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	  0x73, 0x20, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x64, 0x65, 0x76, 0x65,
	  0x6c, 0x6f, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	  0x65, 0x20, 0x49, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6d, 0x70, 0x6f, 0x72,
	  0x74, 0x61, 0x6e, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x3c, 0x2f, 0x73, 0x63, 0x72,
	  0x69, 0x70, 0x74, 0x3e, 0x0a, 0x0a, 0x3c, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	  0x20, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x66, 0x6f, 0x6e, 0x74,
	  0x2d, 0x73, 0x69, 0x7a, 0x65, 0x3a, 0x31, 0x3e, 0x3c, 0x2f, 0x73, 0x70, 0x61,
	  0x6e, 0x3e, 0x3c, 0x73, 0x70, 0x61, 0x6e, 0x20, 0x69, 0x64, 0x3d, 0x67, 0x62,
	  0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x43, 0x6f,
	  0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x3c, 0x69, 0x6d, 0x67, 0x20, 0x73, 0x72,
	  0x63, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x69, 0x6d, 0x45,
	  0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c,
	  0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x79, 0x20,
	  0x6f, 0x66, 0x20, 0x53, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x64, 0x69,
	  0x76, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x64, 0x69, 0x73, 0x70,
	  0x6c, 0x61, 0x79, 0x3a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	  0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x2e, 0x67, 0x65,
	  0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x64, 0x28,
	  0x69, 0x64, 0x29, 0x69, 0x6e, 0x20, 0x63, 0x6f, 0x6e, 0x6a, 0x75, 0x6e, 0x63,
	  0x74, 0x69, 0x6f, 0x6e, 0x20, 0x77, 0x69, 0x74, 0x68, 0x45, 0x6c, 0x65, 0x6d,
	  0x65, 0x6e, 0x74, 0x28, 0x27, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x27, 0x29,
	  0x3b, 0x20, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x20, 0x70, 0x72, 0x6f, 0x70, 0x65,
	  0x72, 0x74, 0x79, 0x3d, 0x22, 0x6f, 0x67, 0x3a, 0xd0, 0x91, 0xd1, 0x8a, 0xd0,
	  0xbb, 0xd0, 0xb3, 0xd0, 0xb0, 0xd1, 0x80, 0xd1, 0x81, 0xd0, 0xba, 0xd0, 0xb8,
	  0x0a, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x74, 0x65, 0x78, 0x74, 0x22,
	  0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x22, 0x3e, 0x50, 0x72, 0x69, 0x76, 0x61,
	  0x63, 0x79, 0x20, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x3c, 0x2f, 0x61, 0x3e,
	  0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x20,
	  0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53,
	  0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	  0x74, 0x79, 0x6c, 0x65, 0x3d, 0x26, 0x71, 0x75, 0x6f, 0x74, 0x3b, 0x6d, 0x61,
	  0x72, 0x67, 0x69, 0x6e, 0x3a, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x3c, 0x2f,
	  0x64, 0x69, 0x76, 0x3e, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x3c, 0x3e, 0x3c,
	  0x69, 0x6d, 0x67, 0x20, 0x73, 0x72, 0x63, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70,
	  0x3a, 0x2f, 0x2f, 0x69, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x26, 0x71,
	  0x75, 0x6f, 0x74, 0x3b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3a, 0x72, 0x65, 0x66,
	  0x65, 0x72, 0x72, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x73, 0x20, 0x74,
	  0x68, 0x65, 0x20, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x20, 0x70, 0x6f, 0x70, 0x75,
	  0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x69, 0x6e, 0x20, 0x57,
	  0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x74, 0x6f, 0x6e, 0x2c, 0x20, 0x44, 0x2e,
	  0x43, 0x2e, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x62, 0x61, 0x63,
	  0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x61, 0x6d, 0x6f, 0x6e, 0x67,
	  0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73,
	  0x2c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	  0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	  0x69, 0x70, 0x61, 0x74, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65,
	  0x74, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	  0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	  0x69, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x66,
	  0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x63, 0x68, 0x61, 0x72,
	  0x61, 0x63, 0x74, 0x65, 0x72, 0x20, 0x4f, 0x78, 0x66, 0x6f, 0x72, 0x64, 0x20,
	  0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79, 0x20, 0x6d, 0x69,
	  0x73, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e,
	  0x67, 0x20, 0x6f, 0x66, 0x54, 0x68, 0x65, 0x72, 0x65, 0x20, 0x61, 0x72, 0x65,
	  0x2c, 0x20, 0x68, 0x6f, 0x77, 0x65, 0x76, 0x65, 0x72, 0x2c, 0x73, 0x74, 0x79,
	  0x6c, 0x65, 0x73, 0x68, 0x65, 0x65, 0x74, 0x22, 0x20, 0x68, 0x72, 0x65, 0x66,
	  0x3d, 0x22, 0x2f, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x62, 0x69, 0x61, 0x20, 0x55,
	  0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79, 0x65, 0x78, 0x70, 0x61,
	  0x6e, 0x64, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	  0x64, 0x65, 0x75, 0x73, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x72, 0x65, 0x66,
	  0x65, 0x72, 0x72, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x69, 0x6e, 0x64, 0x69, 0x63,
	  0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68,
	  0x65, 0x68, 0x61, 0x76, 0x65, 0x20, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74,
	  0x65, 0x64, 0x20, 0x74, 0x68, 0x61, 0x74, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69,
	  0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65,
	  0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x62,
	  0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20,
	  0x6f, 0x66, 0x20, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x3e,
	  0x3c, 0x2f, 0x74, 0x64, 0x3e, 0x3c, 0x2f, 0x74, 0x72, 0x3e, 0x3c, 0x2f, 0x74,
	  0x61, 0x62, 0x6c, 0x65, 0x3e, 0x52, 0x65, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	  0x20, 0x6f, 0x66, 0x20, 0x49, 0x72, 0x65, 0x6c, 0x61, 0x6e, 0x64, 0x0a, 0x3c,
	  0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x0a, 0x3c, 0x73, 0x63, 0x72,
	  0x69, 0x70, 0x74, 0x20, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65,
	  0x20, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x63, 0x6f, 0x6e,
	  0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20,
	  0x74, 0x68, 0x65, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x20, 0x77,
	  0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x20, 0x6f, 0x66, 0x68, 0x65, 0x61, 0x64,
	  0x71, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74,
	  0x68, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64, 0x20, 0x61, 0x72,
	  0x6f, 0x75, 0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x69, 0x6d, 0x70, 0x6c, 0x69,
	  0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	  0x65, 0x68, 0x61, 0x76, 0x65, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x20, 0x64, 0x65,
	  0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61,
	  0x6c, 0x20, 0x52, 0x65, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x20, 0x6f, 0x66,
	  0x62, 0x65, 0x63, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61,
	  0x73, 0x69, 0x6e, 0x67, 0x6c, 0x79, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75,
	  0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x4e,
	  0x6f, 0x74, 0x65, 0x2c, 0x20, 0x68, 0x6f, 0x77, 0x65, 0x76, 0x65, 0x72, 0x2c,
	  0x20, 0x74, 0x68, 0x61, 0x74, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x20,
	  0x74, 0x6f, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x61,
	  0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x20, 0x6f, 0x66,
	  0x20, 0x74, 0x68, 0x65, 0x61, 0x63, 0x63, 0x6f, 0x72, 0x64, 0x61, 0x6e, 0x63,
	  0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x70, 0x61, 0x72,
	  0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x20, 0x69, 0x6e, 0x20,
	  0x74, 0x68, 0x65, 0x66, 0x75, 0x72, 0x74, 0x68, 0x65, 0x72, 0x20, 0x64, 0x65,
	  0x76, 0x65, 0x6c, 0x6f, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x75, 0x6e, 0x64, 0x65,
	  0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	  0x6f, 0x6e, 0x69, 0x73, 0x20, 0x6f, 0x66, 0x74, 0x65, 0x6e, 0x20, 0x63, 0x6f,
	  0x6e, 0x73, 0x69, 0x64, 0x65, 0x72, 0x65, 0x64, 0x68, 0x69, 0x73, 0x20, 0x79,
	  0x6f, 0x75, 0x6e, 0x67, 0x65, 0x72, 0x20, 0x62, 0x72, 0x6f, 0x74, 0x68, 0x65,
	  0x72, 0x3c, 0x2f, 0x74, 0x64, 0x3e, 0x3c, 0x2f, 0x74, 0x72, 0x3e, 0x3c, 0x2f,
	  0x74, 0x61, 0x62, 0x6c, 0x65, 0x3e, 0x3c, 0x61, 0x20, 0x68, 0x74, 0x74, 0x70,
	  0x2d, 0x65, 0x71, 0x75, 0x69, 0x76, 0x3d, 0x22, 0x58, 0x2d, 0x55, 0x41, 0x2d,
	  0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x20, 0x70, 0x72, 0x6f, 0x70,
	  0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x6f, 0x66, 0x20, 0x42, 0x72, 0x69, 0x74,
	  0x69, 0x73, 0x68, 0x20, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x62, 0x69, 0x61, 0x68,
	  0x61, 0x73, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x20, 0x63, 0x72, 0x69, 0x74, 0x69,
	  0x63, 0x69, 0x7a, 0x65, 0x64, 0x28, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68,
	  0x65, 0x20, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x71, 0x75,
	  0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74,
	  0x20, 0x74, 0x68, 0x65, 0x70, 0x61, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x74,
	  0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x20, 0x74, 0x68, 0x65, 0x30, 0x22, 0x20,
	  0x63, 0x65, 0x6c, 0x6c, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x3d, 0x22,
	  0x30, 0x22, 0x20, 0x74, 0x68, 0x6f, 0x75, 0x73, 0x61, 0x6e, 0x64, 0x73, 0x20,
	  0x6f, 0x66, 0x20, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x72, 0x65, 0x64, 0x69,
	  0x72, 0x65, 0x63, 0x74, 0x73, 0x20, 0x68, 0x65, 0x72, 0x65, 0x2e, 0x20, 0x46,
	  0x6f, 0x72, 0x68, 0x61, 0x76, 0x65, 0x20, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72,
	  0x65, 0x6e, 0x20, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x25, 0x33, 0x45, 0x25, 0x33,
	  0x43, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x25, 0x33, 0x45, 0x22, 0x29,
	  0x29, 0x3b, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x68, 0x74,
	  0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x3c, 0x6c, 0x69, 0x3e,
	  0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70,
	  0x3a, 0x2f, 0x2f, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	  0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x3d, 0x22, 0x74, 0x65, 0x78,
	  0x74, 0x2d, 0x64, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a,
	  0x6e, 0x6f, 0x6e, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x64, 0x69,
	  0x73, 0x70, 0x6c, 0x61, 0x79, 0x3a, 0x20, 0x6e, 0x6f, 0x6e, 0x65, 0x3c, 0x6d,
	  0x65, 0x74, 0x61, 0x20, 0x68, 0x74, 0x74, 0x70, 0x2d, 0x65, 0x71, 0x75, 0x69,
	  0x76, 0x3d, 0x22, 0x58, 0x2d, 0x6e, 0x65, 0x77, 0x20, 0x44, 0x61, 0x74, 0x65,
	  0x28, 0x29, 0x2e, 0x67, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x28, 0x29, 0x20,
	  0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2f, 0x78,
	  0x2d, 0x69, 0x63, 0x6f, 0x6e, 0x22, 0x3c, 0x2f, 0x73, 0x70, 0x61, 0x6e, 0x3e,
	  0x3c, 0x73, 0x70, 0x61, 0x6e, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22,
	  0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x3d, 0x22, 0x6a, 0x61, 0x76,
	  0x61, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	  0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x68, 0x72, 0x65,
	  0x66, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x6a, 0x61, 0x76,
	  0x61, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3a, 0x2d, 0x2d, 0x3e, 0x0d, 0x0a,
	  0x3c, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d,
	  0x22, 0x74, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x27, 0x68, 0x74,
	  0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x68, 0x6f, 0x72, 0x74,
	  0x63, 0x75, 0x74, 0x20, 0x69, 0x63, 0x6f, 0x6e, 0x22, 0x20, 0x68, 0x72, 0x65,
	  0x66, 0x3d, 0x22, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0d, 0x0a, 0x3c, 0x64,
	  0x69, 0x76, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x3c, 0x73, 0x63,
	  0x72, 0x69, 0x70, 0x74, 0x20, 0x73, 0x72, 0x63, 0x3d, 0x22, 0x68, 0x74, 0x74,
	  0x70, 0x3a, 0x2f, 0x2f, 0x22, 0x20, 0x72, 0x65, 0x6c, 0x3d, 0x22, 0x73, 0x74,
	  0x79, 0x6c, 0x65, 0x73, 0x68, 0x65, 0x65, 0x74, 0x22, 0x20, 0x74, 0x3c, 0x2f,
	  0x64, 0x69, 0x76, 0x3e, 0x0a, 0x3c, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x20,
	  0x74, 0x79, 0x70, 0x65, 0x3d, 0x2f, 0x61, 0x3e, 0x20, 0x3c, 0x61, 0x20, 0x68,
	  0x72, 0x65, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x20,
	  0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72,
	  0x65, 0x6e, 0x63, 0x79, 0x3d, 0x22, 0x58, 0x2d, 0x55, 0x41, 0x2d, 0x43, 0x6f,
	  0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x22, 0x20, 0x63, 0x6f, 0x6e,
	  0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x20,
	  0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x0a, 0x3c, 0x2f, 0x73, 0x63, 0x72,
	  0x69, 0x70, 0x74, 0x3e, 0x0d, 0x0a, 0x3c, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	  0x20, 0x3c, 0x2f, 0x61, 0x3e, 0x3c, 0x2f, 0x6c, 0x69, 0x3e, 0x3c, 0x2f, 0x75,
	  0x6c, 0x3e, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x61, 0x73, 0x73, 0x6f, 0x63,
	  0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68,
	  0x65, 0x20, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	  0x20, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x3c, 0x2f, 0x61, 0x3e,
	  0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70,
	  0x3a, 0x2f, 0x2f, 0x3c, 0x2f, 0x61, 0x3e, 0x3c, 0x2f, 0x6c, 0x69, 0x3e, 0x3c,
	  0x6c, 0x69, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x66, 0x6f, 0x72,
	  0x6d, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3d, 0x22, 0x68, 0x74, 0x74,
	  0x70, 0x3a, 0x2f, 0x2f, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x73, 0x74, 0x79, 0x6c,
	  0x65, 0x3d, 0x22, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x3a, 0x74, 0x79,
	  0x70, 0x65, 0x3d, 0x22, 0x74, 0x65, 0x78, 0x74, 0x22, 0x20, 0x6e, 0x61, 0x6d,
	  0x65, 0x3d, 0x22, 0x71, 0x22, 0x3c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x77,
	  0x69, 0x64, 0x74, 0x68, 0x3d, 0x22, 0x31, 0x30, 0x30, 0x25, 0x22, 0x20, 0x62,
	  0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x70, 0x6f, 0x73,
	  0x69, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0x20, 0x62, 0x6f, 0x72, 0x64, 0x65,
	  0x72, 0x3d, 0x22, 0x30, 0x22, 0x20, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3d, 0x22,
	  0x72, 0x65, 0x6c, 0x3d, 0x22, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74,
	  0x20, 0x69, 0x63, 0x6f, 0x6e, 0x22, 0x20, 0x68, 0x36, 0x3e, 0x3c, 0x75, 0x6c,
	  0x3e, 0x3c, 0x6c, 0x69, 0x3e, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d,
	  0x22, 0x20, 0x20, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x20, 0x68, 0x74, 0x74, 0x70,
	  0x2d, 0x65, 0x71, 0x75, 0x69, 0x76, 0x3d, 0x22, 0x63, 0x73, 0x73, 0x22, 0x20,
	  0x6d, 0x65, 0x64, 0x69, 0x61, 0x3d, 0x22, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e,
	  0x22, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65,
	  0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x22, 0x20, 0x74, 0x79,
	  0x70, 0x65, 0x3d, 0x22, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	  0x6f, 0x6e, 0x2f, 0x22, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x62,
	  0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x68, 0x74, 0x6d,
	  0x6c, 0x3b, 0x20, 0x63, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x3d, 0x75, 0x74,
	  0x66, 0x2d, 0x38, 0x22, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x74, 0x72, 0x61,
	  0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x3d, 0x22, 0x73, 0x74,
	  0x79, 0x6c, 0x65, 0x73, 0x68, 0x65, 0x65, 0x74, 0x22, 0x20, 0x74, 0x79, 0x70,
	  0x65, 0x3d, 0x22, 0x74, 0x65, 0x0d, 0x0a, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x20,
	  0x68, 0x74, 0x74, 0x70, 0x2d, 0x65, 0x71, 0x75, 0x69, 0x76, 0x3d, 0x22, 0x3e,
	  0x3c, 0x2f, 0x73, 0x70, 0x61, 0x6e, 0x3e, 0x3c, 0x73, 0x70, 0x61, 0x6e, 0x20,
	  0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x30, 0x22, 0x20, 0x63, 0x65, 0x6c,
	  0x6c, 0x73, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x3d, 0x22, 0x30, 0x22, 0x3e,
	  0x3b, 0x0a, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x0a, 0x3c,
	  0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x20, 0x73, 0x6f, 0x6d, 0x65, 0x74, 0x69,
	  0x6d, 0x65, 0x73, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x20, 0x74, 0x68,
	  0x65, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x6e, 0x65, 0x63,
	  0x65, 0x73, 0x73, 0x61, 0x72, 0x69, 0x6c, 0x79, 0x46, 0x6f, 0x72, 0x20, 0x6d,
	  0x6f, 0x72, 0x65, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	  0x6f, 0x6e, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x62, 0x65, 0x67, 0x69,
	  0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x66, 0x20, 0x3c, 0x21, 0x44, 0x4f,
	  0x43, 0x54, 0x59, 0x50, 0x45, 0x20, 0x68, 0x74, 0x6d, 0x6c, 0x3e, 0x3c, 0x68,
	  0x74, 0x6d, 0x6c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x75, 0x6c, 0x61, 0x72,
	  0x6c, 0x79, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x79, 0x70,
	  0x65, 0x3d, 0x22, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x22, 0x20, 0x6e, 0x61,
	  0x6d, 0x65, 0x3d, 0x22, 0x6a, 0x61, 0x76, 0x61, 0x73, 0x63, 0x72, 0x69, 0x70,
	  0x74, 0x3a, 0x76, 0x6f, 0x69, 0x64, 0x28, 0x30, 0x29, 0x3b, 0x22, 0x65, 0x66,
	  0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x20, 0x6f,
	  0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x75, 0x74, 0x6f, 0x63, 0x6f, 0x6d,
	  0x70, 0x6c, 0x65, 0x74, 0x65, 0x3d, 0x22, 0x6f, 0x66, 0x66, 0x22, 0x20, 0x67,
	  0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x63, 0x6f, 0x6e, 0x73,
	  0x69, 0x64, 0x65, 0x72, 0x65, 0x64, 0x3e, 0x3c, 0x69, 0x6e, 0x70, 0x75, 0x74,
	  0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x74, 0x65, 0x78, 0x74, 0x22, 0x20,
	  0x22, 0x3e, 0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3e, 0x0d, 0x0a,
	  0x3c, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67,
	  0x68, 0x6f, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x77, 0x6f, 0x72, 0x6c,
	  0x64, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x63, 0x6f,
	  0x6e, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x73, 0x73, 0x6f, 0x63,
	  0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74,
	  0x68, 0x65, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0a, 0x3c, 0x2f, 0x64, 0x69,
	  0x76, 0x3e, 0x0a, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x63, 0x64, 0x75, 0x72, 0x69,
	  0x6e, 0x67, 0x20, 0x68, 0x69, 0x73, 0x20, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69,
	  0x6d, 0x65, 0x2c, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64,
	  0x69, 0x6e, 0x67, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x74, 0x79, 0x70,
	  0x65, 0x3d, 0x22, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2f, 0x78, 0x2d, 0x69, 0x63,
	  0x6f, 0x6e, 0x22, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61,
	  0x73, 0x69, 0x6e, 0x67, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x64, 0x69,
	  0x70, 0x6c, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x20, 0x72, 0x65, 0x6c, 0x61,
	  0x74, 0x69, 0x6f, 0x6e, 0x73, 0x61, 0x72, 0x65, 0x20, 0x6f, 0x66, 0x74, 0x65,
	  0x6e, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x72, 0x65, 0x64, 0x6d,
	  0x65, 0x74, 0x61, 0x20, 0x63, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x3d, 0x22,
	  0x75, 0x74, 0x66, 0x2d, 0x38, 0x22, 0x20, 0x3c, 0x69, 0x6e, 0x70, 0x75, 0x74,
	  0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x74, 0x65, 0x78, 0x74, 0x22, 0x20,
	  0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6c,
	  0x75, 0x64, 0x65, 0x20, 0x74, 0x68, 0x65, 0x22, 0x3e, 0x3c, 0x69, 0x6d, 0x67,
	  0x20, 0x73, 0x72, 0x63, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	  0x69, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f,
	  0x6e, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x74, 0x68, 0x65, 0x20, 0x65,
	  0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x20,
	  0x6f, 0x66, 0x0a, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0a, 0x3c, 0x64, 0x69,
	  0x76, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x26, 0x61, 0x6d, 0x70,
	  0x3b, 0x6e, 0x62, 0x73, 0x70, 0x3b, 0x26, 0x61, 0x6d, 0x70, 0x3b, 0x6e, 0x62,
	  0x73, 0x70, 0x3b, 0x74, 0x6f, 0x20, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69,
	  0x6e, 0x65, 0x20, 0x77, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x71, 0x75, 0x69,
	  0x74, 0x65, 0x20, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x20,
	  0x66, 0x72, 0x6f, 0x6d, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x20, 0x74, 0x68,
	  0x65, 0x20, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x64, 0x69,
	  0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65,
	  0x6e, 0x20, 0x74, 0x68, 0x65, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75,
	  0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x63,
	  0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x20, 0x62, 0x65, 0x74, 0x77, 0x65,
	  0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x77, 0x69, 0x64, 0x65, 0x6c, 0x79, 0x20,
	  0x63, 0x6f, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x72, 0x65, 0x64, 0x20, 0x74, 0x6f,
	  0x77, 0x61, 0x73, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	  0x65, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x77, 0x69, 0x74, 0x68, 0x20, 0x76,
	  0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65,
	  0x73, 0x68, 0x61, 0x76, 0x65, 0x20, 0x73, 0x70, 0x65, 0x63, 0x75, 0x6c, 0x61,
	  0x74, 0x65, 0x64, 0x20, 0x74, 0x68, 0x61, 0x74, 0x28, 0x64, 0x6f, 0x63, 0x75,
	  0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x67, 0x65, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	  0x6e, 0x74, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69,
	  0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x6f, 0x72, 0x69, 0x67,
	  0x69, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f,
	  0x70, 0x65, 0x64, 0x65, 0x74, 0x61, 0x20, 0x63, 0x68, 0x61, 0x72, 0x73, 0x65,
	  0x74, 0x3d, 0x22, 0x75, 0x74, 0x66, 0x2d, 0x38, 0x22, 0x3e, 0x20, 0x74, 0x79,
	  0x70, 0x65, 0x3d, 0x22, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x63, 0x73, 0x73, 0x22,
	  0x20, 0x2f, 0x3e, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	  0x67, 0x65, 0x61, 0x62, 0x6c, 0x79, 0x20, 0x77, 0x69, 0x74, 0x68, 0x6d, 0x6f,
	  0x72, 0x65, 0x20, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x6c, 0x79, 0x20, 0x72, 0x65,
	  0x6c, 0x61, 0x74, 0x65, 0x64, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x20, 0x61,
	  0x6e, 0x64, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x74,
	  0x68, 0x61, 0x74, 0x20, 0x77, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6f, 0x74, 0x68,
	  0x65, 0x72, 0x77, 0x69, 0x73, 0x65, 0x70, 0x65, 0x72, 0x70, 0x65, 0x6e, 0x64,
	  0x69, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65,
	  0x73, 0x74, 0x79, 0x6c, 0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x74,
	  0x65, 0x78, 0x74, 0x2f, 0x63, 0x73, 0x73, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22,
	  0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x22, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3d,
	  0x22, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x69, 0x65, 0x73, 0x20, 0x72, 0x65, 0x73,
	  0x69, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x64, 0x65, 0x76, 0x65, 0x6c,
	  0x6f, 0x70, 0x69, 0x6e, 0x67, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69,
	  0x65, 0x73, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x72, 0x20, 0x70, 0x72,
	  0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x65, 0x63, 0x6f, 0x6e,
	  0x6f, 0x6d, 0x69, 0x63, 0x20, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x6d,
	  0x65, 0x6e, 0x74, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	  0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x66, 0x6f, 0x72,
	  0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	  0x74, 0x69, 0x6f, 0x6e, 0x6f, 0x6e, 0x20, 0x73, 0x65, 0x76, 0x65, 0x72, 0x61,
	  0x6c, 0x20, 0x6f, 0x63, 0x63, 0x61, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x70, 0x6f,
	  0x72, 0x74, 0x75, 0x67, 0x75, 0xc3, 0xaa, 0x73, 0x20, 0x28, 0x45, 0x75, 0x72,
	  0x6f, 0x70, 0x65, 0x75, 0x29, 0xd0, 0xa3, 0xd0, 0xba, 0xd1, 0x80, 0xd0, 0xb0,
	  0xd1, 0x97, 0xd0, 0xbd, 0xd1, 0x81, 0xd1, 0x8c, 0xd0, 0xba, 0xd0, 0xb0, 0xd1,
	  0x83, 0xd0, 0xba, 0xd1, 0x80, 0xd0, 0xb0, 0xd1, 0x97, 0xd0, 0xbd, 0xd1, 0x81,
	  0xd1, 0x8c, 0xd0, 0xba, 0xd0, 0xb0, 0xd0, 0xa0, 0xd0, 0xbe, 0xd1, 0x81, 0xd1,
	  0x81, 0xd0, 0xb8, 0xd0, 0xb9, 0xd1, 0x81, 0xd0, 0xba, 0xd0, 0xbe, 0xd0, 0xb9,
	  0xd0, 0xbc, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb8, 0xd0,
	  0xb0, 0xd0, 0xbb, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xb8, 0xd0, 0xbd, 0xd1, 0x84,
	  0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xbc, 0xd0, 0xb0, 0xd1, 0x86, 0xd0, 0xb8, 0xd0,
	  0xb8, 0xd1, 0x83, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xb2, 0xd0, 0xbb,
	  0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb8, 0xd1, 0x8f, 0xd0, 0xbd, 0xd0, 0xb5, 0xd0,
	  0xbe, 0xd0, 0xb1, 0xd1, 0x85, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xb8, 0xd0, 0xbc,
	  0xd0, 0xbe, 0xd0, 0xb8, 0xd0, 0xbd, 0xd1, 0x84, 0xd0, 0xbe, 0xd1, 0x80, 0xd0,
	  0xbc, 0xd0, 0xb0, 0xd1, 0x86, 0xd0, 0xb8, 0xd1, 0x8f, 0xd0, 0x98, 0xd0, 0xbd,
	  0xd1, 0x84, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xbc, 0xd0, 0xb0, 0xd1, 0x86, 0xd0,
	  0xb8, 0xd1, 0x8f, 0xd0, 0xa0, 0xd0, 0xb5, 0xd1, 0x81, 0xd0, 0xbf, 0xd1, 0x83,
	  0xd0, 0xb1, 0xd0, 0xbb, 0xd0, 0xb8, 0xd0, 0xba, 0xd0, 0xb8, 0xd0, 0xba, 0xd0,
	  0xbe, 0xd0, 0xbb, 0xd0, 0xb8, 0xd1, 0x87, 0xd0, 0xb5, 0xd1, 0x81, 0xd1, 0x82,
	  0xd0, 0xb2, 0xd0, 0xbe, 0xd0, 0xb8, 0xd0, 0xbd, 0xd1, 0x84, 0xd0, 0xbe, 0xd1,
	  0x80, 0xd0, 0xbc, 0xd0, 0xb0, 0xd1, 0x86, 0xd0, 0xb8, 0xd1, 0x8e, 0xd1, 0x82,
	  0xd0, 0xb5, 0xd1, 0x80, 0xd1, 0x80, 0xd0, 0xb8, 0xd1, 0x82, 0xd0, 0xbe, 0xd1,
	  0x80, 0xd0, 0xb8, 0xd0, 0xb8, 0xd0, 0xb4, 0xd0, 0xbe, 0xd1, 0x81, 0xd1, 0x82,
	  0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x87, 0xd0, 0xbd, 0xd0, 0xbe, 0xd8,
	  0xa7, 0xd9, 0x84, 0xd9, 0x85, 0xd8, 0xaa, 0xd9, 0x88, 0xd8, 0xa7, 0xd8, 0xac,
	  0xd8, 0xaf, 0xd9, 0x88, 0xd9, 0x86, 0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa7, 0xd8,
	  0xb4, 0xd8, 0xaa, 0xd8, 0xb1, 0xd8, 0xa7, 0xd9, 0x83, 0xd8, 0xa7, 0xd8, 0xaa,
	  0xd8, 0xa7, 0xd9, 0x84, 0xd8, 0xa7, 0xd9, 0x82, 0xd8, 0xaa, 0xd8, 0xb1, 0xd8,
	  0xa7, 0xd8, 0xad, 0xd8, 0xa7, 0xd8, 0xaa, 0x68, 0x74, 0x6d, 0x6c, 0x3b, 0x20,
	  0x63, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x3d, 0x55, 0x54, 0x46, 0x2d, 0x38,
	  0x22, 0x20, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x28,
	  0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x29, 0x64, 0x69, 0x73,
	  0x70, 0x6c, 0x61, 0x79, 0x3a, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x2d, 0x62,
	  0x6c, 0x6f, 0x63, 0x6b, 0x3b, 0x3c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x74,
	  0x79, 0x70, 0x65, 0x3d, 0x22, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x22, 0x20,
	  0x74, 0x79, 0x70, 0x65, 0x20, 0x3d, 0x20, 0x27, 0x74, 0x65, 0x78, 0x74, 0x2f,
	  0x6a, 0x61, 0x76, 0x61, 0x73, 0x63, 0x72, 0x69, 0x3c, 0x69, 0x6d, 0x67, 0x20,
	  0x73, 0x72, 0x63, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77,
	  0x77, 0x77, 0x2e, 0x22, 0x20, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	  0x77, 0x77, 0x77, 0x2e, 0x77, 0x33, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x73, 0x68,
	  0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x20, 0x69, 0x63, 0x6f, 0x6e, 0x22, 0x20,
	  0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x22, 0x20, 0x61, 0x75, 0x74, 0x6f, 0x63,
	  0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x3d, 0x22, 0x6f, 0x66, 0x66, 0x22,
	  0x20, 0x3c, 0x2f, 0x61, 0x3e, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x3c, 0x64,
	  0x69, 0x76, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x3c, 0x2f, 0x61, 0x3e,
	  0x3c, 0x2f, 0x6c, 0x69, 0x3e, 0x0a, 0x3c, 0x6c, 0x69, 0x20, 0x63, 0x6c, 0x61,
	  0x73, 0x73, 0x3d, 0x22, 0x63, 0x73, 0x73, 0x22, 0x20, 0x74, 0x79, 0x70, 0x65,
	  0x3d, 0x22, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x63, 0x73, 0x73, 0x22, 0x20, 0x3c,
	  0x66, 0x6f, 0x72, 0x6d, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3d, 0x22,
	  0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x78, 0x74, 0x2f, 0x63, 0x73, 0x73,
	  0x22, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a,
	  0x2f, 0x2f, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x72, 0x65, 0x6c, 0x3d, 0x22, 0x61,
	  0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x65, 0x22, 0x20, 0x0d, 0x0a, 0x3c,
	  0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22,
	  0x74, 0x65, 0x78, 0x74, 0x2f, 0x20, 0x6f, 0x6e, 0x63, 0x6c, 0x69, 0x63, 0x6b,
	  0x3d, 0x22, 0x6a, 0x61, 0x76, 0x61, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3a,
	  0x28, 0x6e, 0x65, 0x77, 0x20, 0x44, 0x61, 0x74, 0x65, 0x29, 0x2e, 0x67, 0x65,
	  0x74, 0x54, 0x69, 0x6d, 0x65, 0x28, 0x29, 0x7d, 0x68, 0x65, 0x69, 0x67, 0x68,
	  0x74, 0x3d, 0x22, 0x31, 0x22, 0x20, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3d, 0x22,
	  0x31, 0x22, 0x20, 0x50, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x27, 0x73, 0x20, 0x52,
	  0x65, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x20, 0x6f, 0x66, 0x20, 0x20, 0x3c,
	  0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a,
	  0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2d, 0x64, 0x65,
	  0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x75, 0x6e, 0x64, 0x65,
	  0x72, 0x74, 0x68, 0x65, 0x20, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x6e, 0x69, 0x6e,
	  0x67, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x3c, 0x2f, 0x64, 0x69,
	  0x76, 0x3e, 0x0a, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x0a, 0x3c, 0x2f, 0x64,
	  0x69, 0x76, 0x3e, 0x0a, 0x65, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68,
	  0x6d, 0x65, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x3c,
	  0x2f, 0x64, 0x69, 0x76, 0x3e, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x3c, 0x2f,
	  0x64, 0x69, 0x76, 0x3e, 0x3c, 0x2f, 0x64, 0x23, 0x76, 0x69, 0x65, 0x77, 0x70,
	  0x6f, 0x72, 0x74, 0x7b, 0x6d, 0x69, 0x6e, 0x2d, 0x68, 0x65, 0x69, 0x67, 0x68,
	  0x74, 0x3a, 0x0a, 0x3c, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x20, 0x73, 0x72,
	  0x63, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6f, 0x70, 0x74,
	  0x69, 0x6f, 0x6e, 0x3e, 0x3c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x76,
	  0x61, 0x6c, 0x75, 0x65, 0x3d, 0x6f, 0x66, 0x74, 0x65, 0x6e, 0x20, 0x72, 0x65,
	  0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x73, 0x20,
	  0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x3e, 0x0a, 0x3c, 0x6f, 0x70, 0x74,
	  0x69, 0x6f, 0x6e, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x3c, 0x21, 0x44, 0x4f, 0x43,
	  0x54, 0x59, 0x50, 0x45, 0x20, 0x68, 0x74, 0x6d, 0x6c, 0x3e, 0x0a, 0x3c, 0x21,
	  0x2d, 0x2d, 0x5b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	  0x6e, 0x61, 0x6c, 0x20, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x3e, 0x0a,
	  0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70,
	  0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x3c, 0x2f, 0x61, 0x3e, 0x3c, 0x61, 0x20,
	  0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	  0x77, 0xe0, 0xb8, 0xa0, 0xe0, 0xb8, 0xb2, 0xe0, 0xb8, 0xa9, 0xe0, 0xb8, 0xb2,
	  0xe0, 0xb9, 0x84, 0xe0, 0xb8, 0x97, 0xe0, 0xb8, 0xa2, 0xe1, 0x83, 0xa5, 0xe1,
	  0x83, 0x90, 0xe1, 0x83, 0xa0, 0xe1, 0x83, 0x97, 0xe1, 0x83, 0xa3, 0xe1, 0x83,
	  0x9a, 0xe1, 0x83, 0x98, 0xe6, 0xad, 0xa3, 0xe9, 0xab, 0x94, 0xe4, 0xb8, 0xad,
	  0xe6, 0x96, 0x87, 0x20, 0x28, 0xe7, 0xb9, 0x81, 0xe9, 0xab, 0x94, 0x29, 0xe0,
	  0xa4, 0xa8, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4,
	  0xa6, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb6, 0xe0, 0xa4, 0xa1, 0xe0, 0xa4, 0xbe,
	  0xe0, 0xa4, 0x89, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xb2, 0xe0, 0xa5, 0x8b, 0xe0,
	  0xa4, 0xa1, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb7, 0xe0, 0xa5,
	  0x87, 0xe0, 0xa4, 0xa4, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0x9c,
	  0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xbe, 0xe0,
	  0xa4, 0xb0, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0x82, 0xe0, 0xa4,
	  0xac, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xa7, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xa4,
	  0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xa5, 0xe0, 0xa4, 0xbe, 0xe0,
	  0xa4, 0xaa, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5,
	  0x8d, 0xe0, 0xa4, 0xb5, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xbe,
	  0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xb8, 0xe0,
	  0xa5, 0x8d, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xa3, 0xe0, 0xa4,
	  0xb8, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0x97, 0xe0, 0xa5, 0x8d,
	  0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0x9a, 0xe0, 0xa4, 0xbf, 0xe0,
	  0xa4, 0x9f, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xa0, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4,
	  0x82, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0x9c, 0xe0, 0xa5, 0x8d,
	  0xe0, 0xa4, 0x9e, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0x85, 0xe0,
	  0xa4, 0xae, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4,
	  0x95, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xad,
	  0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xa8, 0xe0,
	  0xa4, 0x97, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xa1, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4,
	  0xaf, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x81, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x8d,
	  0xe0, 0xa4, 0xaf, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0x95, 0xe0,
	  0xa4, 0xbf, 0xe0, 0xa4, 0xb8, 0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4,
	  0x95, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb7, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xaa,
	  0xe0, 0xa4, 0xb9, 0xe0, 0xa5, 0x81, 0xe0, 0xa4, 0x81, 0xe0, 0xa4, 0x9a, 0xe0,
	  0xa4, 0xa4, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xaa, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4,
	  0xb0, 0xe0, 0xa4, 0xac, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xa7, 0xe0, 0xa4, 0xa8,
	  0xe0, 0xa4, 0x9f, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xaa, 0xe0, 0xa5, 0x8d, 0xe0,
	  0xa4, 0xaa, 0xe0, 0xa4, 0xa3, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0x95, 0xe0, 0xa5,
	  0x8d, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x87,
	  0xe0, 0xa4, 0x9f, 0xe0, 0xa4, 0xaa, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb0, 0xe0,
	  0xa4, 0xbe, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xad, 0xe0, 0xa4,
	  0xaa, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xaa,
	  0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xae, 0xe0, 0xa4, 0xbe, 0xe0,
	  0xa4, 0xb2, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4,
	  0x82, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xab, 0xe0, 0xa4, 0xbc, 0xe0, 0xa5, 0x8d,
	  0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xa8, 0xe0,
	  0xa4, 0xbf, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xae, 0xe0, 0xa4,
	  0xbe, 0xe0, 0xa4, 0xa3, 0xe0, 0xa4, 0xb2, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xae,
	  0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0x9f, 0xe0, 0xa5, 0x87, 0xe0, 0xa4, 0xa1, 0x64,
	  0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x20, 0x63,
	  0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x3d, 0x22, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	  0x65, 0x6e, 0x74, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	  0x70, 0x72, 0x6f, 0x74, 0x2e, 0x67, 0x65, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	  0x6e, 0x74, 0x73, 0x42, 0x79, 0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x28,
	  0x3c, 0x21, 0x44, 0x4f, 0x43, 0x54, 0x59, 0x50, 0x45, 0x20, 0x68, 0x74, 0x6d,
	  0x6c, 0x3e, 0x0a, 0x3c, 0x68, 0x74, 0x6d, 0x6c, 0x20, 0x3c, 0x6d, 0x65, 0x74,
	  0x61, 0x20, 0x63, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x3d, 0x22, 0x75, 0x74,
	  0x66, 0x2d, 0x38, 0x22, 0x3e, 0x3a, 0x75, 0x72, 0x6c, 0x22, 0x20, 0x63, 0x6f,
	  0x6e, 0x74, 0x65, 0x6e, 0x74, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	  0x2f, 0x2e, 0x63, 0x73, 0x73, 0x22, 0x20, 0x72, 0x65, 0x6c, 0x3d, 0x22, 0x73,
	  0x74, 0x79, 0x6c, 0x65, 0x73, 0x68, 0x65, 0x65, 0x74, 0x22, 0x73, 0x74, 0x79,
	  0x6c, 0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x74, 0x65, 0x78, 0x74,
	  0x2f, 0x63, 0x73, 0x73, 0x22, 0x3e, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x74,
	  0x65, 0x78, 0x74, 0x2f, 0x63, 0x73, 0x73, 0x22, 0x20, 0x68, 0x72, 0x65, 0x66,
	  0x3d, 0x22, 0x77, 0x33, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x31, 0x39, 0x39, 0x39,
	  0x2f, 0x78, 0x68, 0x74, 0x6d, 0x6c, 0x22, 0x20, 0x78, 0x6d, 0x6c, 0x74, 0x79,
	  0x70, 0x65, 0x3d, 0x22, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x6a, 0x61, 0x76, 0x61,
	  0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x22, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	  0x64, 0x3d, 0x22, 0x67, 0x65, 0x74, 0x22, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f,
	  0x6e, 0x3d, 0x22, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x72, 0x65, 0x6c, 0x3d, 0x22,
	  0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x68, 0x65, 0x65, 0x74, 0x22, 0x20, 0x20,
	  0x3d, 0x20, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x67, 0x65,
	  0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x74, 0x79, 0x70, 0x65, 0x3d,
	  0x22, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2f, 0x78, 0x2d, 0x69, 0x63, 0x6f, 0x6e,
	  0x22, 0x20, 0x2f, 0x3e, 0x63, 0x65, 0x6c, 0x6c, 0x70, 0x61, 0x64, 0x64, 0x69,
	  0x6e, 0x67, 0x3d, 0x22, 0x30, 0x22, 0x20, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x70,
	  0x2e, 0x63, 0x73, 0x73, 0x22, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x74,
	  0x65, 0x78, 0x74, 0x2f, 0x63, 0x73, 0x73, 0x22, 0x20, 0x3c, 0x2f, 0x61, 0x3e,
	  0x3c, 0x2f, 0x6c, 0x69, 0x3e, 0x3c, 0x6c, 0x69, 0x3e, 0x3c, 0x61, 0x20, 0x68,
	  0x72, 0x65, 0x66, 0x3d, 0x22, 0x22, 0x20, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3d,
	  0x22, 0x31, 0x22, 0x20, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3d, 0x22, 0x31,
	  0x22, 0x22, 0x3e, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x68,
	  0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x73, 0x74, 0x79,
	  0x6c, 0x65, 0x3d, 0x22, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x3a, 0x6e,
	  0x6f, 0x6e, 0x65, 0x3b, 0x22, 0x3e, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61,
	  0x74, 0x65, 0x22, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x61, 0x70, 0x70,
	  0x6c, 0x69, 0x2d, 0x2f, 0x2f, 0x57, 0x33, 0x43, 0x2f, 0x2f, 0x44, 0x54, 0x44,
	  0x20, 0x58, 0x48, 0x54, 0x4d, 0x4c, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x65, 0x6c,
	  0x6c, 0x73, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x3d, 0x22, 0x30, 0x22, 0x20,
	  0x63, 0x65, 0x6c, 0x6c, 0x70, 0x61, 0x64, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d,
	  0x22, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x22, 0x20, 0x76, 0x61, 0x6c, 0x75,
	  0x65, 0x3d, 0x22, 0x2f, 0x61, 0x3e, 0x26, 0x6e, 0x62, 0x73, 0x70, 0x3b, 0x3c,
	  0x73, 0x70, 0x61, 0x6e, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x3d, 0x22, 0x73, 0x0a,
	  0x3c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22,
	  0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x22, 0x20, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	  0x61, 0x67, 0x65, 0x3d, 0x22, 0x4a, 0x61, 0x76, 0x61, 0x53, 0x63, 0x72, 0x69,
	  0x70, 0x74, 0x22, 0x20, 0x20, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	  0x2e, 0x67, 0x65, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42,
	  0x67, 0x3d, 0x22, 0x30, 0x22, 0x20, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x70, 0x61,
	  0x63, 0x69, 0x6e, 0x67, 0x3d, 0x22, 0x30, 0x22, 0x20, 0x79, 0x70, 0x65, 0x3d,
	  0x22, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x63, 0x73, 0x73, 0x22, 0x20, 0x6d, 0x65,
	  0x64, 0x69, 0x61, 0x3d, 0x22, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x27, 0x74, 0x65,
	  0x78, 0x74, 0x2f, 0x6a, 0x61, 0x76, 0x61, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	  0x27, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x78, 0x63,
	  0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x79, 0x70, 0x65,
	  0x3d, 0x22, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x63, 0x73, 0x73, 0x22, 0x20, 0x72,
	  0x65, 0x6c, 0x3d, 0x22, 0x73, 0x74, 0x20, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	  0x3d, 0x22, 0x31, 0x22, 0x20, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3d, 0x22, 0x31,
	  0x22, 0x20, 0x3d, 0x27, 0x2b, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x55, 0x52,
	  0x49, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x28, 0x3c, 0x6c,
	  0x69, 0x6e, 0x6b, 0x20, 0x72, 0x65, 0x6c, 0x3d, 0x22, 0x61, 0x6c, 0x74, 0x65,
	  0x72, 0x6e, 0x61, 0x74, 0x65, 0x22, 0x20, 0x0a, 0x62, 0x6f, 0x64, 0x79, 0x2c,
	  0x20, 0x74, 0x72, 0x2c, 0x20, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2c, 0x20, 0x74,
	  0x65, 0x78, 0x74, 0x6d, 0x65, 0x74, 0x61, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3d,
	  0x22, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x73, 0x22, 0x20, 0x63, 0x6f, 0x6e, 0x6d,
	  0x65, 0x74, 0x68, 0x6f, 0x64, 0x3d, 0x22, 0x70, 0x6f, 0x73, 0x74, 0x22, 0x20,
	  0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3d, 0x22, 0x3e, 0x0a, 0x3c, 0x61, 0x20,
	  0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	  0x77, 0x77, 0x77, 0x2e, 0x63, 0x73, 0x73, 0x22, 0x20, 0x72, 0x65, 0x6c, 0x3d,
	  0x22, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x68, 0x65, 0x65, 0x74, 0x22, 0x20,
	  0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x3c, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x3c,
	  0x64, 0x69, 0x76, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x6c, 0x61, 0x6e, 0x67,
	  0x75, 0x61, 0x67, 0x65, 0x3d, 0x22, 0x6a, 0x61, 0x76, 0x61, 0x73, 0x63, 0x72,
	  0x69, 0x70, 0x74, 0x22, 0x3e, 0x61, 0x72, 0x69, 0x61, 0x2d, 0x68, 0x69, 0x64,
	  0x64, 0x65, 0x6e, 0x3d, 0x22, 0x74, 0x72, 0x75, 0x65, 0x22, 0x3e, 0xc2, 0xb7,
	  0x3c, 0x72, 0x69, 0x70, 0x74, 0x22, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22,
	  0x74, 0x65, 0x78, 0x74, 0x2f, 0x6a, 0x61, 0x76, 0x61, 0x73, 0x6c, 0x3d, 0x30,
	  0x3b, 0x7d, 0x29, 0x28, 0x29, 0x3b, 0x0a, 0x28, 0x66, 0x75, 0x6e, 0x63, 0x74,
	  0x69, 0x6f, 0x6e, 0x28, 0x29, 0x7b, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f,
	  0x75, 0x6e, 0x64, 0x2d, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x3a, 0x20, 0x75, 0x72,
	  0x6c, 0x28, 0x2f, 0x61, 0x3e, 0x3c, 0x2f, 0x6c, 0x69, 0x3e, 0x3c, 0x6c, 0x69,
	  0x3e, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x68, 0x09, 0x09,
	  0x3c, 0x6c, 0x69, 0x3e, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22,
	  0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x20,
	  0x61, 0x72, 0x69, 0x61, 0x2d, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x3d, 0x22,
	  0x74, 0x72, 0x75, 0x3e, 0x20, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d,
	  0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x6c,
	  0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x3d, 0x22, 0x6a, 0x61, 0x76, 0x61,
	  0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x22, 0x20, 0x2f, 0x6f, 0x70, 0x74, 0x69,
	  0x6f, 0x6e, 0x3e, 0x0a, 0x3c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x76,
	  0x61, 0x6c, 0x75, 0x65, 0x2f, 0x64, 0x69, 0x76, 0x3e, 0x3c, 0x2f, 0x64, 0x69,
	  0x76, 0x3e, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d,
	  0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x20, 0x61, 0x72, 0x69, 0x61, 0x2d, 0x68,
	  0x69, 0x64, 0x64, 0x65, 0x6e, 0x3d, 0x22, 0x74, 0x72, 0x65, 0x3d, 0x28, 0x6e,
	  0x65, 0x77, 0x20, 0x44, 0x61, 0x74, 0x65, 0x29, 0x2e, 0x67, 0x65, 0x74, 0x54,
	  0x69, 0x6d, 0x65, 0x28, 0x29, 0x70, 0x6f, 0x72, 0x74, 0x75, 0x67, 0x75, 0xc3,
	  0xaa, 0x73, 0x20, 0x28, 0x64, 0x6f, 0x20, 0x42, 0x72, 0x61, 0x73, 0x69, 0x6c,
	  0x29, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xb3, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb8,
	  0xd0, 0xb7, 0xd0, 0xb0, 0xd1, 0x86, 0xd0, 0xb8, 0xd0, 0xb8, 0xd0, 0xb2, 0xd0,
	  0xbe, 0xd0, 0xb7, 0xd0, 0xbc, 0xd0, 0xbe, 0xd0, 0xb6, 0xd0, 0xbd, 0xd0, 0xbe,
	  0xd1, 0x81, 0xd1, 0x82, 0xd1, 0x8c, 0xd0, 0xbe, 0xd0, 0xb1, 0xd1, 0x80, 0xd0,
	  0xb0, 0xd0, 0xb7, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb8,
	  0xd1, 0x8f, 0xd1, 0x80, 0xd0, 0xb5, 0xd0, 0xb3, 0xd0, 0xb8, 0xd1, 0x81, 0xd1,
	  0x82, 0xd1, 0x80, 0xd0, 0xb0, 0xd1, 0x86, 0xd0, 0xb8, 0xd0, 0xb8, 0xd0, 0xb2,
	  0xd0, 0xbe, 0xd0, 0xb7, 0xd0, 0xbc, 0xd0, 0xbe, 0xd0, 0xb6, 0xd0, 0xbd, 0xd0,
	  0xbe, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb8, 0xd0, 0xbe, 0xd0, 0xb1, 0xd1, 0x8f,
	  0xd0, 0xb7, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbb, 0xd1, 0x8c, 0xd0,
	  0xbd, 0xd0, 0xb0, 0x3c, 0x21, 0x44, 0x4f, 0x43, 0x54, 0x59, 0x50, 0x45, 0x20,
	  0x68, 0x74, 0x6d, 0x6c, 0x20, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x20, 0x22,
	  0x6e, 0x74, 0x2d, 0x54, 0x79, 0x70, 0x65, 0x22, 0x20, 0x63, 0x6f, 0x6e, 0x74,
	  0x65, 0x6e, 0x74, 0x3d, 0x22, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x3c, 0x6d, 0x65,
	  0x74, 0x61, 0x20, 0x68, 0x74, 0x74, 0x70, 0x2d, 0x65, 0x71, 0x75, 0x69, 0x76,
	  0x3d, 0x22, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74,
	  0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2f, 0x2f, 0x45, 0x4e, 0x22, 0x20, 0x22, 0x68,
	  0x74, 0x74, 0x70, 0x3a, 0x3c, 0x68, 0x74, 0x6d, 0x6c, 0x20, 0x78, 0x6d, 0x6c,
	  0x6e, 0x73, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77,
	  0x77, 0x2d, 0x2f, 0x2f, 0x57, 0x33, 0x43, 0x2f, 0x2f, 0x44, 0x54, 0x44, 0x20,
	  0x58, 0x48, 0x54, 0x4d, 0x4c, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x54, 0x44, 0x54,
	  0x44, 0x2f, 0x78, 0x68, 0x74, 0x6d, 0x6c, 0x31, 0x2d, 0x74, 0x72, 0x61, 0x6e,
	  0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2f, 0x2f, 0x77, 0x77, 0x77,
	  0x2e, 0x77, 0x33, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x54, 0x52, 0x2f, 0x78, 0x68,
	  0x74, 0x6d, 0x6c, 0x31, 0x2f, 0x70, 0x65, 0x20, 0x3d, 0x20, 0x27, 0x74, 0x65,
	  0x78, 0x74, 0x2f, 0x6a, 0x61, 0x76, 0x61, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	  0x27, 0x3b, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3d,
	  0x22, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x70,
	  0x61, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x69, 0x6e, 0x73,
	  0x65, 0x72, 0x74, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x3c, 0x69, 0x6e, 0x70,
	  0x75, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x68, 0x69, 0x64, 0x64,
	  0x65, 0x6e, 0x22, 0x20, 0x6e, 0x61, 0x6a, 0x73, 0x22, 0x20, 0x74, 0x79, 0x70,
	  0x65, 0x3d, 0x22, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x6a, 0x61, 0x76, 0x61, 0x73,
	  0x63, 0x72, 0x69, 0x28, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x29,
	  0x2e, 0x72, 0x65, 0x61, 0x64, 0x79, 0x28, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	  0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22,
	  0x74, 0x65, 0x78, 0x74, 0x2f, 0x6a, 0x61, 0x76, 0x61, 0x73, 0x69, 0x6d, 0x61,
	  0x67, 0x65, 0x22, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x3d, 0x22,
	  0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x55, 0x41, 0x2d, 0x43, 0x6f, 0x6d,
	  0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x22, 0x20, 0x63, 0x6f, 0x6e, 0x74,
	  0x65, 0x6e, 0x74, 0x3d, 0x74, 0x6d, 0x6c, 0x3b, 0x20, 0x63, 0x68, 0x61, 0x72,
	  0x73, 0x65, 0x74, 0x3d, 0x75, 0x74, 0x66, 0x2d, 0x38, 0x22, 0x20, 0x2f, 0x3e,
	  0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x72, 0x65, 0x6c, 0x3d, 0x22, 0x73, 0x68,
	  0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x20, 0x69, 0x63, 0x6f, 0x6e, 0x3c, 0x6c,
	  0x69, 0x6e, 0x6b, 0x20, 0x72, 0x65, 0x6c, 0x3d, 0x22, 0x73, 0x74, 0x79, 0x6c,
	  0x65, 0x73, 0x68, 0x65, 0x65, 0x74, 0x22, 0x20, 0x3c, 0x2f, 0x73, 0x63, 0x72,
	  0x69, 0x70, 0x74, 0x3e, 0x0a, 0x3c, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x20,
	  0x74, 0x79, 0x70, 0x65, 0x3d, 0x3d, 0x20, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	  0x6e, 0x74, 0x2e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6c, 0x65, 0x6d,
	  0x65, 0x6e, 0x3c, 0x61, 0x20, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x3d, 0x22,
	  0x5f, 0x62, 0x6c, 0x61, 0x6e, 0x6b, 0x22, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d,
	  0x20, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x67, 0x65, 0x74,
	  0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x69, 0x6e, 0x70, 0x75,
	  0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x74, 0x65, 0x78, 0x74, 0x22,
	  0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x20,
	  0x3d, 0x20, 0x27, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x6a, 0x61, 0x76, 0x61, 0x73,
	  0x63, 0x72, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d,
	  0x22, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x22, 0x20, 0x6e, 0x61, 0x6d, 0x65,
	  0x68, 0x74, 0x6d, 0x6c, 0x3b, 0x20, 0x63, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74,
	  0x3d, 0x75, 0x74, 0x66, 0x2d, 0x38, 0x22, 0x20, 0x2f, 0x3e, 0x64, 0x74, 0x64,
	  0x22, 0x3e, 0x0a, 0x3c, 0x68, 0x74, 0x6d, 0x6c, 0x20, 0x78, 0x6d, 0x6c, 0x6e,
	  0x73, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x2d, 0x2f, 0x2f, 0x57, 0x33, 0x43,
	  0x2f, 0x2f, 0x44, 0x54, 0x44, 0x20, 0x48, 0x54, 0x4d, 0x4c, 0x20, 0x34, 0x2e,
	  0x30, 0x31, 0x20, 0x54, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x54, 0x61, 0x67,
	  0x4e, 0x61, 0x6d, 0x65, 0x28, 0x27, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x27,
	  0x29, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22,
	  0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x22, 0x20, 0x6e, 0x61, 0x6d, 0x3c, 0x73,
	  0x63, 0x72, 0x69, 0x70, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x74,
	  0x65, 0x78, 0x74, 0x2f, 0x6a, 0x61, 0x76, 0x61, 0x73, 0x22, 0x20, 0x73, 0x74,
	  0x79, 0x6c, 0x65, 0x3d, 0x22, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x3a,
	  0x6e, 0x6f, 0x6e, 0x65, 0x3b, 0x22, 0x3e, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	  0x6e, 0x74, 0x2e, 0x67, 0x65, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	  0x42, 0x79, 0x49, 0x64, 0x28, 0x3d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	  0x74, 0x2e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	  0x6e, 0x74, 0x28, 0x27, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x27, 0x74, 0x65,
	  0x78, 0x74, 0x2f, 0x6a, 0x61, 0x76, 0x61, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	  0x27, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x22,
	  0x74, 0x65, 0x78, 0x74, 0x22, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x22, 0x64,
	  0x2e, 0x67, 0x65, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42,
	  0x79, 0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x28, 0x73, 0x6e, 0x69, 0x63,
	  0x61, 0x6c, 0x22, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74,
	  0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x43, 0x2f, 0x2f, 0x44, 0x54,
	  0x44, 0x20, 0x48, 0x54, 0x4d, 0x4c, 0x20, 0x34, 0x2e, 0x30, 0x31, 0x20, 0x54,
	  0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x3c, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x20,
	  0x74, 0x79, 0x70, 0x65, 0x3d, 0x22, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x63, 0x73,
	  0x73, 0x22, 0x3e, 0x0a, 0x0a, 0x3c, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x20, 0x74,
	  0x79, 0x70, 0x65, 0x3d, 0x22, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x63, 0x73, 0x73,
	  0x22, 0x3e, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2e, 0x64, 0x74, 0x64, 0x22, 0x3e,
	  0x0a, 0x3c, 0x68, 0x74, 0x6d, 0x6c, 0x20, 0x78, 0x6d, 0x6c, 0x6e, 0x73, 0x3d,
	  0x68, 0x74, 0x74, 0x70, 0x2d, 0x65, 0x71, 0x75, 0x69, 0x76, 0x3d, 0x22, 0x43,
	  0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x54, 0x79, 0x70, 0x65, 0x64, 0x69,
	  0x6e, 0x67, 0x3d, 0x22, 0x30, 0x22, 0x20, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x70,
	  0x61, 0x63, 0x69, 0x6e, 0x67, 0x3d, 0x22, 0x30, 0x22, 0x68, 0x74, 0x6d, 0x6c,
	  0x3b, 0x20, 0x63, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x3d, 0x75, 0x74, 0x66,
	  0x2d, 0x38, 0x22, 0x20, 0x2f, 0x3e, 0x0a, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65,
	  0x3d, 0x22, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x3a, 0x6e, 0x6f, 0x6e,
	  0x65, 0x3b, 0x22, 0x3e, 0x3c, 0x3c, 0x6c, 0x69, 0x3e, 0x3c, 0x61, 0x20, 0x68,
	  0x72, 0x65, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77,
	  0x77, 0x77, 0x2e, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x27, 0x74, 0x65, 0x78,
	  0x74, 0x2f, 0x6a, 0x61, 0x76, 0x61, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x27,
	  0x3e, 0xd0, 0xb4, 0xd0, 0xb5, 0xd1, 0x8f, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbb,
	  0xd1, 0x8c, 0xd0, 0xbd, 0xd0, 0xbe, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb8, 0xd1,
	  0x81, 0xd0, 0xbe, 0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xb2, 0xd0, 0xb5, 0xd1, 0x82,
	  0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb2, 0xd0, 0xb8, 0xd0, 0xb8, 0xd0, 0xbf, 0xd1,
	  0x80, 0xd0, 0xbe, 0xd0, 0xb8, 0xd0, 0xb7, 0xd0, 0xb2, 0xd0, 0xbe, 0xd0, 0xb4,
	  0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb2, 0xd0, 0xb0, 0xd0, 0xb1, 0xd0, 0xb5, 0xd0,
	  0xb7, 0xd0, 0xbe, 0xd0, 0xbf, 0xd0, 0xb0, 0xd1, 0x81, 0xd0, 0xbd, 0xd0, 0xbe,
	  0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb8, 0xe0, 0xa4, 0xaa, 0xe0, 0xa5, 0x81, 0xe0,
	  0xa4, 0xb8, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4,
	  0x95, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0x82,
	  0xe0, 0xa4, 0x97, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb0, 0xe0, 0xa5, 0x87, 0xe0,
	  0xa4, 0xb8, 0xe0, 0xa4, 0x89, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4,
	  0xb9, 0xe0, 0xa5, 0x8b, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0xa8, 0xe0, 0xa5, 0x87,
	  0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xa7, 0xe0, 0xa4, 0xbe, 0xe0,
	  0xa4, 0xa8, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0xad, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4,
	  0xab, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb8,
	  0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0x82, 0xe0, 0xa4, 0x97, 0xe0, 0xa4, 0xb8, 0xe0,
	  0xa5, 0x81, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4,
	  0xb7, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x89,
	  0xe0, 0xa4, 0xaa, 0xe0, 0xa5, 0x80, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xbe, 0xe0,
	  0xa4, 0x87, 0xe0, 0xa4, 0x9f, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xbf, 0xe0, 0xa4,
	  0x9c, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0x9e, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xaa,
	  0xe0, 0xa4, 0xa8, 0xe0, 0xa4, 0x95, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4, 0xb0, 0xe0,
	  0xa5, 0x8d, 0xe0, 0xa4, 0xb0, 0xe0, 0xa4, 0xb5, 0xe0, 0xa4, 0xbe, 0xe0, 0xa4,
	  0x88, 0xe0, 0xa4, 0xb8, 0xe0, 0xa4, 0x95, 0xe0, 0xa5, 0x8d, 0xe0, 0xa4, 0xb0,
	  0xe0, 0xa4, 0xbf, 0xe0, 0xa4, 0xaf, 0xe0, 0xa4, 0xa4, 0xe0, 0xa4, 0xbe,
	]);
	exports.init = function() {
	  return exports.dictionary;
	}; 
} (dictionaryData));

var data = dictionaryData;
dictionary.init = function() {
  dictionary.dictionary = data.init();
};
dictionary.offsetsByLength = new Uint32Array([
     0,     0,     0,     0,     0,  4096,  9216, 21504, 35840, 44032,
 53248, 63488, 74752, 87040, 93696, 100864, 104704, 106752, 108928, 113536,
 115968, 118528, 119872, 121280, 122016,
]);
dictionary.sizeBitsByLength = new Uint8Array([
  0,  0,  0,  0, 10, 10, 11, 11, 10, 10,
 10, 10, 10,  9,  9,  8,  7,  7,  8,  7,
  7,  6,  6,  5,  5,
]);
dictionary.minDictionaryWordLength = 4;
dictionary.maxDictionaryWordLength = 24;

var huffman = {};

function HuffmanCode$1(bits, value) {
  this.bits = bits;
  this.value = value;
}
huffman.HuffmanCode = HuffmanCode$1;
var MAX_LENGTH = 15;
function GetNextKey(key, len) {
  var step = 1 << (len - 1);
  while (key & step) {
    step >>= 1;
  }
  return (key & (step - 1)) + step;
}
function ReplicateValue(table, i, step, end, code) {
  do {
    end -= step;
    table[i + end] = new HuffmanCode$1(code.bits, code.value);
  } while (end > 0);
}
function NextTableBitSize(count, len, root_bits) {
  var left = 1 << (len - root_bits);
  while (len < MAX_LENGTH) {
    left -= count[len];
    if (left <= 0) break;
    ++len;
    left <<= 1;
  }
  return len - root_bits;
}
huffman.BrotliBuildHuffmanTable = function(root_table, table, root_bits, code_lengths, code_lengths_size) {
  var start_table = table;
  var code;
  var len;
  var symbol;
  var key;
  var step;
  var low;
  var mask;
  var table_bits;
  var table_size;
  var total_size;
  var sorted;
  var count = new Int32Array(MAX_LENGTH + 1);
  var offset = new Int32Array(MAX_LENGTH + 1);
  sorted = new Int32Array(code_lengths_size);
  for (symbol = 0; symbol < code_lengths_size; symbol++) {
    count[code_lengths[symbol]]++;
  }
  offset[1] = 0;
  for (len = 1; len < MAX_LENGTH; len++) {
    offset[len + 1] = offset[len] + count[len];
  }
  for (symbol = 0; symbol < code_lengths_size; symbol++) {
    if (code_lengths[symbol] !== 0) {
      sorted[offset[code_lengths[symbol]]++] = symbol;
    }
  }
  table_bits = root_bits;
  table_size = 1 << table_bits;
  total_size = table_size;
  if (offset[MAX_LENGTH] === 1) {
    for (key = 0; key < total_size; ++key) {
      root_table[table + key] = new HuffmanCode$1(0, sorted[0] & 0xffff);
    }
    return total_size;
  }
  key = 0;
  symbol = 0;
  for (len = 1, step = 2; len <= root_bits; ++len, step <<= 1) {
    for (; count[len] > 0; --count[len]) {
      code = new HuffmanCode$1(len & 0xff, sorted[symbol++] & 0xffff);
      ReplicateValue(root_table, table + key, step, table_size, code);
      key = GetNextKey(key, len);
    }
  }
  mask = total_size - 1;
  low = -1;
  for (len = root_bits + 1, step = 2; len <= MAX_LENGTH; ++len, step <<= 1) {
    for (; count[len] > 0; --count[len]) {
      if ((key & mask) !== low) {
        table += table_size;
        table_bits = NextTableBitSize(count, len, root_bits);
        table_size = 1 << table_bits;
        total_size += table_size;
        low = key & mask;
        root_table[start_table + low] = new HuffmanCode$1((table_bits + root_bits) & 0xff, ((table - start_table) - low) & 0xffff);
      }
      code = new HuffmanCode$1((len - root_bits) & 0xff, sorted[symbol++] & 0xffff);
      ReplicateValue(root_table, table + (key >> root_bits), step, table_size, code);
      key = GetNextKey(key, len);
    }
  }
  return total_size;
};

var context = {};

context.lookup = new Uint8Array([
   0,  0,  0,  0,  0,  0,  0,  0,  0,  4,  4,  0,  0,  4,  0,  0,
   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
   8, 12, 16, 12, 12, 20, 12, 16, 24, 28, 12, 12, 32, 12, 36, 12,
  44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 32, 32, 24, 40, 28, 12,
  12, 48, 52, 52, 52, 48, 52, 52, 52, 48, 52, 52, 52, 52, 52, 48,
  52, 52, 52, 52, 52, 48, 52, 52, 52, 52, 52, 24, 12, 28, 12, 12,
  12, 56, 60, 60, 60, 56, 60, 60, 60, 56, 60, 60, 60, 60, 60, 56,
  60, 60, 60, 60, 60, 56, 60, 60, 60, 60, 60, 24, 12, 28, 12,  0,
  0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
  0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
  0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
  0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
  2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
  2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
  2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
  2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1,
  1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
  2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
  1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
  3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
  2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
  2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
  2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
  3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
  3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
  3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
  3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
  4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
  4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
  4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
  4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
  5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
  5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
  5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
  6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7,
   0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
  16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
  16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
  16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
  32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
  32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
  32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
  32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
  40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
  40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
  40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
  48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 56,
   0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,
  16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
  32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
  48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
   0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,
  16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
  32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
  48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
   0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,
  16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
  32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
  48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
   0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,
  16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
  32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
  48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
   0,  0,  0,  0,  1,  1,  1,  1,  2,  2,  2,  2,  3,  3,  3,  3,
   4,  4,  4,  4,  5,  5,  5,  5,  6,  6,  6,  6,  7,  7,  7,  7,
   8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 11, 11, 11, 11,
  12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 15,
  16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19,
  20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 23, 23, 23, 23,
  24, 24, 24, 24, 25, 25, 25, 25, 26, 26, 26, 26, 27, 27, 27, 27,
  28, 28, 28, 28, 29, 29, 29, 29, 30, 30, 30, 30, 31, 31, 31, 31,
  32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 34, 35, 35, 35, 35,
  36, 36, 36, 36, 37, 37, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39,
  40, 40, 40, 40, 41, 41, 41, 41, 42, 42, 42, 42, 43, 43, 43, 43,
  44, 44, 44, 44, 45, 45, 45, 45, 46, 46, 46, 46, 47, 47, 47, 47,
  48, 48, 48, 48, 49, 49, 49, 49, 50, 50, 50, 50, 51, 51, 51, 51,
  52, 52, 52, 52, 53, 53, 53, 53, 54, 54, 54, 54, 55, 55, 55, 55,
  56, 56, 56, 56, 57, 57, 57, 57, 58, 58, 58, 58, 59, 59, 59, 59,
  60, 60, 60, 60, 61, 61, 61, 61, 62, 62, 62, 62, 63, 63, 63, 63,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
]);
context.lookupOffsets = new Uint16Array([
  1024, 1536,
  1280, 1536,
  0, 256,
  768, 512,
]);

var prefix = {};

function PrefixCodeRange(offset, nbits) {
  this.offset = offset;
  this.nbits = nbits;
}
prefix.kBlockLengthPrefixCode = [
  new PrefixCodeRange(1, 2), new PrefixCodeRange(5, 2), new PrefixCodeRange(9, 2), new PrefixCodeRange(13, 2),
  new PrefixCodeRange(17, 3), new PrefixCodeRange(25, 3), new PrefixCodeRange(33, 3), new PrefixCodeRange(41, 3),
  new PrefixCodeRange(49, 4), new PrefixCodeRange(65, 4), new PrefixCodeRange(81, 4), new PrefixCodeRange(97, 4),
  new PrefixCodeRange(113, 5), new PrefixCodeRange(145, 5), new PrefixCodeRange(177, 5), new PrefixCodeRange(209, 5),
  new PrefixCodeRange(241, 6), new PrefixCodeRange(305, 6), new PrefixCodeRange(369, 7), new PrefixCodeRange(497, 8),
  new PrefixCodeRange(753, 9), new PrefixCodeRange(1265, 10), new PrefixCodeRange(2289, 11), new PrefixCodeRange(4337, 12),
  new PrefixCodeRange(8433, 13), new PrefixCodeRange(16625, 24)
];
prefix.kInsertLengthPrefixCode = [
  new PrefixCodeRange(0, 0), new PrefixCodeRange(1, 0), new PrefixCodeRange(2, 0), new PrefixCodeRange(3, 0),
  new PrefixCodeRange(4, 0), new PrefixCodeRange(5, 0), new PrefixCodeRange(6, 1), new PrefixCodeRange(8, 1),
  new PrefixCodeRange(10, 2), new PrefixCodeRange(14, 2), new PrefixCodeRange(18, 3), new PrefixCodeRange(26, 3),
  new PrefixCodeRange(34, 4), new PrefixCodeRange(50, 4), new PrefixCodeRange(66, 5), new PrefixCodeRange(98, 5),
  new PrefixCodeRange(130, 6), new PrefixCodeRange(194, 7), new PrefixCodeRange(322, 8), new PrefixCodeRange(578, 9),
  new PrefixCodeRange(1090, 10), new PrefixCodeRange(2114, 12), new PrefixCodeRange(6210, 14), new PrefixCodeRange(22594, 24),
];
prefix.kCopyLengthPrefixCode = [
  new PrefixCodeRange(2, 0), new PrefixCodeRange(3, 0), new PrefixCodeRange(4, 0), new PrefixCodeRange(5, 0),
  new PrefixCodeRange(6, 0), new PrefixCodeRange(7, 0), new PrefixCodeRange(8, 0), new PrefixCodeRange(9, 0),
  new PrefixCodeRange(10, 1), new PrefixCodeRange(12, 1), new PrefixCodeRange(14, 2), new PrefixCodeRange(18, 2),
  new PrefixCodeRange(22, 3), new PrefixCodeRange(30, 3), new PrefixCodeRange(38, 4), new PrefixCodeRange(54, 4),
  new PrefixCodeRange(70, 5), new PrefixCodeRange(102, 5), new PrefixCodeRange(134, 6), new PrefixCodeRange(198, 7),
  new PrefixCodeRange(326, 8), new PrefixCodeRange(582, 9), new PrefixCodeRange(1094, 10), new PrefixCodeRange(2118, 24),
];
prefix.kInsertRangeLut = [
  0, 0, 8, 8, 0, 16, 8, 16, 16,
];
prefix.kCopyRangeLut = [
  0, 8, 0, 8, 16, 0, 16, 8, 16,
];

var transform = {};

var BrotliDictionary$1 = dictionary;
var kIdentity       = 0;
var kOmitLast1      = 1;
var kOmitLast2      = 2;
var kOmitLast3      = 3;
var kOmitLast4      = 4;
var kOmitLast5      = 5;
var kOmitLast6      = 6;
var kOmitLast7      = 7;
var kOmitLast8      = 8;
var kOmitLast9      = 9;
var kUppercaseFirst = 10;
var kUppercaseAll   = 11;
var kOmitFirst1     = 12;
var kOmitFirst2     = 13;
var kOmitFirst3     = 14;
var kOmitFirst4     = 15;
var kOmitFirst5     = 16;
var kOmitFirst6     = 17;
var kOmitFirst7     = 18;
var kOmitFirst9     = 20;
function Transform$1(prefix, transform, suffix) {
  this.prefix = new Uint8Array(prefix.length);
  this.transform = transform;
  this.suffix = new Uint8Array(suffix.length);
  for (var i = 0; i < prefix.length; i++)
    this.prefix[i] = prefix.charCodeAt(i);
  for (var i = 0; i < suffix.length; i++)
    this.suffix[i] = suffix.charCodeAt(i);
}
var kTransforms = [
     new Transform$1(         "", kIdentity,       ""           ),
     new Transform$1(         "", kIdentity,       " "          ),
     new Transform$1(        " ", kIdentity,       " "          ),
     new Transform$1(         "", kOmitFirst1,     ""           ),
     new Transform$1(         "", kUppercaseFirst, " "          ),
     new Transform$1(         "", kIdentity,       " the "      ),
     new Transform$1(        " ", kIdentity,       ""           ),
     new Transform$1(       "s ", kIdentity,       " "          ),
     new Transform$1(         "", kIdentity,       " of "       ),
     new Transform$1(         "", kUppercaseFirst, ""           ),
     new Transform$1(         "", kIdentity,       " and "      ),
     new Transform$1(         "", kOmitFirst2,     ""           ),
     new Transform$1(         "", kOmitLast1,      ""           ),
     new Transform$1(       ", ", kIdentity,       " "          ),
     new Transform$1(         "", kIdentity,       ", "         ),
     new Transform$1(        " ", kUppercaseFirst, " "          ),
     new Transform$1(         "", kIdentity,       " in "       ),
     new Transform$1(         "", kIdentity,       " to "       ),
     new Transform$1(       "e ", kIdentity,       " "          ),
     new Transform$1(         "", kIdentity,       "\""         ),
     new Transform$1(         "", kIdentity,       "."          ),
     new Transform$1(         "", kIdentity,       "\">"        ),
     new Transform$1(         "", kIdentity,       "\n"         ),
     new Transform$1(         "", kOmitLast3,      ""           ),
     new Transform$1(         "", kIdentity,       "]"          ),
     new Transform$1(         "", kIdentity,       " for "      ),
     new Transform$1(         "", kOmitFirst3,     ""           ),
     new Transform$1(         "", kOmitLast2,      ""           ),
     new Transform$1(         "", kIdentity,       " a "        ),
     new Transform$1(         "", kIdentity,       " that "     ),
     new Transform$1(        " ", kUppercaseFirst, ""           ),
     new Transform$1(         "", kIdentity,       ". "         ),
     new Transform$1(        ".", kIdentity,       ""           ),
     new Transform$1(        " ", kIdentity,       ", "         ),
     new Transform$1(         "", kOmitFirst4,     ""           ),
     new Transform$1(         "", kIdentity,       " with "     ),
     new Transform$1(         "", kIdentity,       "'"          ),
     new Transform$1(         "", kIdentity,       " from "     ),
     new Transform$1(         "", kIdentity,       " by "       ),
     new Transform$1(         "", kOmitFirst5,     ""           ),
     new Transform$1(         "", kOmitFirst6,     ""           ),
     new Transform$1(    " the ", kIdentity,       ""           ),
     new Transform$1(         "", kOmitLast4,      ""           ),
     new Transform$1(         "", kIdentity,       ". The "     ),
     new Transform$1(         "", kUppercaseAll,   ""           ),
     new Transform$1(         "", kIdentity,       " on "       ),
     new Transform$1(         "", kIdentity,       " as "       ),
     new Transform$1(         "", kIdentity,       " is "       ),
     new Transform$1(         "", kOmitLast7,      ""           ),
     new Transform$1(         "", kOmitLast1,      "ing "       ),
     new Transform$1(         "", kIdentity,       "\n\t"       ),
     new Transform$1(         "", kIdentity,       ":"          ),
     new Transform$1(        " ", kIdentity,       ". "         ),
     new Transform$1(         "", kIdentity,       "ed "        ),
     new Transform$1(         "", kOmitFirst9,     ""           ),
     new Transform$1(         "", kOmitFirst7,     ""           ),
     new Transform$1(         "", kOmitLast6,      ""           ),
     new Transform$1(         "", kIdentity,       "("          ),
     new Transform$1(         "", kUppercaseFirst, ", "         ),
     new Transform$1(         "", kOmitLast8,      ""           ),
     new Transform$1(         "", kIdentity,       " at "       ),
     new Transform$1(         "", kIdentity,       "ly "        ),
     new Transform$1(    " the ", kIdentity,       " of "       ),
     new Transform$1(         "", kOmitLast5,      ""           ),
     new Transform$1(         "", kOmitLast9,      ""           ),
     new Transform$1(        " ", kUppercaseFirst, ", "         ),
     new Transform$1(         "", kUppercaseFirst, "\""         ),
     new Transform$1(        ".", kIdentity,       "("          ),
     new Transform$1(         "", kUppercaseAll,   " "          ),
     new Transform$1(         "", kUppercaseFirst, "\">"        ),
     new Transform$1(         "", kIdentity,       "=\""        ),
     new Transform$1(        " ", kIdentity,       "."          ),
     new Transform$1(    ".com/", kIdentity,       ""           ),
     new Transform$1(    " the ", kIdentity,       " of the "   ),
     new Transform$1(         "", kUppercaseFirst, "'"          ),
     new Transform$1(         "", kIdentity,       ". This "    ),
     new Transform$1(         "", kIdentity,       ","          ),
     new Transform$1(        ".", kIdentity,       " "          ),
     new Transform$1(         "", kUppercaseFirst, "("          ),
     new Transform$1(         "", kUppercaseFirst, "."          ),
     new Transform$1(         "", kIdentity,       " not "      ),
     new Transform$1(        " ", kIdentity,       "=\""        ),
     new Transform$1(         "", kIdentity,       "er "        ),
     new Transform$1(        " ", kUppercaseAll,   " "          ),
     new Transform$1(         "", kIdentity,       "al "        ),
     new Transform$1(        " ", kUppercaseAll,   ""           ),
     new Transform$1(         "", kIdentity,       "='"         ),
     new Transform$1(         "", kUppercaseAll,   "\""         ),
     new Transform$1(         "", kUppercaseFirst, ". "         ),
     new Transform$1(        " ", kIdentity,       "("          ),
     new Transform$1(         "", kIdentity,       "ful "       ),
     new Transform$1(        " ", kUppercaseFirst, ". "         ),
     new Transform$1(         "", kIdentity,       "ive "       ),
     new Transform$1(         "", kIdentity,       "less "      ),
     new Transform$1(         "", kUppercaseAll,   "'"          ),
     new Transform$1(         "", kIdentity,       "est "       ),
     new Transform$1(        " ", kUppercaseFirst, "."          ),
     new Transform$1(         "", kUppercaseAll,   "\">"        ),
     new Transform$1(        " ", kIdentity,       "='"         ),
     new Transform$1(         "", kUppercaseFirst, ","          ),
     new Transform$1(         "", kIdentity,       "ize "       ),
     new Transform$1(         "", kUppercaseAll,   "."          ),
     new Transform$1( "\xc2\xa0", kIdentity,       ""           ),
     new Transform$1(        " ", kIdentity,       ","          ),
     new Transform$1(         "", kUppercaseFirst, "=\""        ),
     new Transform$1(         "", kUppercaseAll,   "=\""        ),
     new Transform$1(         "", kIdentity,       "ous "       ),
     new Transform$1(         "", kUppercaseAll,   ", "         ),
     new Transform$1(         "", kUppercaseFirst, "='"         ),
     new Transform$1(        " ", kUppercaseFirst, ","          ),
     new Transform$1(        " ", kUppercaseAll,   "=\""        ),
     new Transform$1(        " ", kUppercaseAll,   ", "         ),
     new Transform$1(         "", kUppercaseAll,   ","          ),
     new Transform$1(         "", kUppercaseAll,   "("          ),
     new Transform$1(         "", kUppercaseAll,   ". "         ),
     new Transform$1(        " ", kUppercaseAll,   "."          ),
     new Transform$1(         "", kUppercaseAll,   "='"         ),
     new Transform$1(        " ", kUppercaseAll,   ". "         ),
     new Transform$1(        " ", kUppercaseFirst, "=\""        ),
     new Transform$1(        " ", kUppercaseAll,   "='"         ),
     new Transform$1(        " ", kUppercaseFirst, "='"         )
];
transform.kTransforms = kTransforms;
transform.kNumTransforms = kTransforms.length;
function ToUpperCase(p, i) {
  if (p[i] < 0xc0) {
    if (p[i] >= 97 && p[i] <= 122) {
      p[i] ^= 32;
    }
    return 1;
  }
  if (p[i] < 0xe0) {
    p[i + 1] ^= 32;
    return 2;
  }
  p[i + 2] ^= 5;
  return 3;
}
transform.transformDictionaryWord = function(dst, idx, word, len, transform) {
  var prefix = kTransforms[transform].prefix;
  var suffix = kTransforms[transform].suffix;
  var t = kTransforms[transform].transform;
  var skip = t < kOmitFirst1 ? 0 : t - (kOmitFirst1 - 1);
  var i = 0;
  var start_idx = idx;
  var uppercase;
  if (skip > len) {
    skip = len;
  }
  var prefix_pos = 0;
  while (prefix_pos < prefix.length) {
    dst[idx++] = prefix[prefix_pos++];
  }
  word += skip;
  len -= skip;
  if (t <= kOmitLast9) {
    len -= t;
  }
  for (i = 0; i < len; i++) {
    dst[idx++] = BrotliDictionary$1.dictionary[word + i];
  }
  uppercase = idx - len;
  if (t === kUppercaseFirst) {
    ToUpperCase(dst, uppercase);
  } else if (t === kUppercaseAll) {
    while (len > 0) {
      var step = ToUpperCase(dst, uppercase);
      uppercase += step;
      len -= step;
    }
  }
  var suffix_pos = 0;
  while (suffix_pos < suffix.length) {
    dst[idx++] = suffix[suffix_pos++];
  }
  return idx - start_idx;
};

var BrotliInput = streams.BrotliInput;
var BrotliOutput = streams.BrotliOutput;
var BrotliBitReader = bit_reader;
var BrotliDictionary = dictionary;
var HuffmanCode = huffman.HuffmanCode;
var BrotliBuildHuffmanTable = huffman.BrotliBuildHuffmanTable;
var Context = context;
var Prefix = prefix;
var Transform = transform;
var kDefaultCodeLength = 8;
var kCodeLengthRepeatCode = 16;
var kNumLiteralCodes = 256;
var kNumInsertAndCopyCodes = 704;
var kNumBlockLengthCodes = 26;
var kLiteralContextBits = 6;
var kDistanceContextBits = 2;
var HUFFMAN_TABLE_BITS = 8;
var HUFFMAN_TABLE_MASK = 0xff;
var HUFFMAN_MAX_TABLE_SIZE = 1080;
var CODE_LENGTH_CODES = 18;
var kCodeLengthCodeOrder = new Uint8Array([
  1, 2, 3, 4, 0, 5, 17, 6, 16, 7, 8, 9, 10, 11, 12, 13, 14, 15,
]);
var NUM_DISTANCE_SHORT_CODES = 16;
var kDistanceShortCodeIndexOffset = new Uint8Array([
  3, 2, 1, 0, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2
]);
var kDistanceShortCodeValueOffset = new Int8Array([
  0, 0, 0, 0, -1, 1, -2, 2, -3, 3, -1, 1, -2, 2, -3, 3
]);
var kMaxHuffmanTableSize = new Uint16Array([
  256, 402, 436, 468, 500, 534, 566, 598, 630, 662, 694, 726, 758, 790, 822,
  854, 886, 920, 952, 984, 1016, 1048, 1080
]);
function DecodeWindowBits(br) {
  var n;
  if (br.readBits(1) === 0) {
    return 16;
  }
  n = br.readBits(3);
  if (n > 0) {
    return 17 + n;
  }
  n = br.readBits(3);
  if (n > 0) {
    return 8 + n;
  }
  return 17;
}
function DecodeVarLenUint8(br) {
  if (br.readBits(1)) {
    var nbits = br.readBits(3);
    if (nbits === 0) {
      return 1;
    } else {
      return br.readBits(nbits) + (1 << nbits);
    }
  }
  return 0;
}
function MetaBlockLength() {
  this.meta_block_length = 0;
  this.input_end = 0;
  this.is_uncompressed = 0;
  this.is_metadata = false;
}
function DecodeMetaBlockLength(br) {
  var out = new MetaBlockLength;
  var size_nibbles;
  var size_bytes;
  var i;
  out.input_end = br.readBits(1);
  if (out.input_end && br.readBits(1)) {
    return out;
  }
  size_nibbles = br.readBits(2) + 4;
  if (size_nibbles === 7) {
    out.is_metadata = true;
    if (br.readBits(1) !== 0)
      throw new Error('Invalid reserved bit');
    size_bytes = br.readBits(2);
    if (size_bytes === 0)
      return out;
    for (i = 0; i < size_bytes; i++) {
      var next_byte = br.readBits(8);
      if (i + 1 === size_bytes && size_bytes > 1 && next_byte === 0)
        throw new Error('Invalid size byte');
      out.meta_block_length |= next_byte << (i * 8);
    }
  } else {
    for (i = 0; i < size_nibbles; ++i) {
      var next_nibble = br.readBits(4);
      if (i + 1 === size_nibbles && size_nibbles > 4 && next_nibble === 0)
        throw new Error('Invalid size nibble');
      out.meta_block_length |= next_nibble << (i * 4);
    }
  }
  ++out.meta_block_length;
  if (!out.input_end && !out.is_metadata) {
    out.is_uncompressed = br.readBits(1);
  }
  return out;
}
function ReadSymbol(table, index, br) {
  var nbits;
  br.fillBitWindow();
  index += (br.val_ >>> br.bit_pos_) & HUFFMAN_TABLE_MASK;
  nbits = table[index].bits - HUFFMAN_TABLE_BITS;
  if (nbits > 0) {
    br.bit_pos_ += HUFFMAN_TABLE_BITS;
    index += table[index].value;
    index += (br.val_ >>> br.bit_pos_) & ((1 << nbits) - 1);
  }
  br.bit_pos_ += table[index].bits;
  return table[index].value;
}
function ReadHuffmanCodeLengths(code_length_code_lengths, num_symbols, code_lengths, br) {
  var symbol = 0;
  var prev_code_len = kDefaultCodeLength;
  var repeat = 0;
  var repeat_code_len = 0;
  var space = 32768;
  var table = [];
  for (var i = 0; i < 32; i++)
    table.push(new HuffmanCode(0, 0));
  BrotliBuildHuffmanTable(table, 0, 5, code_length_code_lengths, CODE_LENGTH_CODES);
  while (symbol < num_symbols && space > 0) {
    var p = 0;
    var code_len;
    br.readMoreInput();
    br.fillBitWindow();
    p += (br.val_ >>> br.bit_pos_) & 31;
    br.bit_pos_ += table[p].bits;
    code_len = table[p].value & 0xff;
    if (code_len < kCodeLengthRepeatCode) {
      repeat = 0;
      code_lengths[symbol++] = code_len;
      if (code_len !== 0) {
        prev_code_len = code_len;
        space -= 32768 >> code_len;
      }
    } else {
      var extra_bits = code_len - 14;
      var old_repeat;
      var repeat_delta;
      var new_len = 0;
      if (code_len === kCodeLengthRepeatCode) {
        new_len = prev_code_len;
      }
      if (repeat_code_len !== new_len) {
        repeat = 0;
        repeat_code_len = new_len;
      }
      old_repeat = repeat;
      if (repeat > 0) {
        repeat -= 2;
        repeat <<= extra_bits;
      }
      repeat += br.readBits(extra_bits) + 3;
      repeat_delta = repeat - old_repeat;
      if (symbol + repeat_delta > num_symbols) {
        throw new Error('[ReadHuffmanCodeLengths] symbol + repeat_delta > num_symbols');
      }
      for (var x = 0; x < repeat_delta; x++)
        code_lengths[symbol + x] = repeat_code_len;
      symbol += repeat_delta;
      if (repeat_code_len !== 0) {
        space -= repeat_delta << (15 - repeat_code_len);
      }
    }
  }
  if (space !== 0) {
    throw new Error("[ReadHuffmanCodeLengths] space = " + space);
  }
  for (; symbol < num_symbols; symbol++)
    code_lengths[symbol] = 0;
}
function ReadHuffmanCode(alphabet_size, tables, table, br) {
  var table_size = 0;
  var simple_code_or_skip;
  var code_lengths = new Uint8Array(alphabet_size);
  br.readMoreInput();
  simple_code_or_skip = br.readBits(2);
  if (simple_code_or_skip === 1) {
    var i;
    var max_bits_counter = alphabet_size - 1;
    var max_bits = 0;
    var symbols = new Int32Array(4);
    var num_symbols = br.readBits(2) + 1;
    while (max_bits_counter) {
      max_bits_counter >>= 1;
      ++max_bits;
    }
    for (i = 0; i < num_symbols; ++i) {
      symbols[i] = br.readBits(max_bits) % alphabet_size;
      code_lengths[symbols[i]] = 2;
    }
    code_lengths[symbols[0]] = 1;
    switch (num_symbols) {
      case 1:
        break;
      case 3:
        if ((symbols[0] === symbols[1]) ||
            (symbols[0] === symbols[2]) ||
            (symbols[1] === symbols[2])) {
          throw new Error('[ReadHuffmanCode] invalid symbols');
        }
        break;
      case 2:
        if (symbols[0] === symbols[1]) {
          throw new Error('[ReadHuffmanCode] invalid symbols');
        }
        code_lengths[symbols[1]] = 1;
        break;
      case 4:
        if ((symbols[0] === symbols[1]) ||
            (symbols[0] === symbols[2]) ||
            (symbols[0] === symbols[3]) ||
            (symbols[1] === symbols[2]) ||
            (symbols[1] === symbols[3]) ||
            (symbols[2] === symbols[3])) {
          throw new Error('[ReadHuffmanCode] invalid symbols');
        }
        if (br.readBits(1)) {
          code_lengths[symbols[2]] = 3;
          code_lengths[symbols[3]] = 3;
        } else {
          code_lengths[symbols[0]] = 2;
        }
        break;
    }
  } else {
    var i;
    var code_length_code_lengths = new Uint8Array(CODE_LENGTH_CODES);
    var space = 32;
    var num_codes = 0;
    var huff = [
      new HuffmanCode(2, 0), new HuffmanCode(2, 4), new HuffmanCode(2, 3), new HuffmanCode(3, 2),
      new HuffmanCode(2, 0), new HuffmanCode(2, 4), new HuffmanCode(2, 3), new HuffmanCode(4, 1),
      new HuffmanCode(2, 0), new HuffmanCode(2, 4), new HuffmanCode(2, 3), new HuffmanCode(3, 2),
      new HuffmanCode(2, 0), new HuffmanCode(2, 4), new HuffmanCode(2, 3), new HuffmanCode(4, 5)
    ];
    for (i = simple_code_or_skip; i < CODE_LENGTH_CODES && space > 0; ++i) {
      var code_len_idx = kCodeLengthCodeOrder[i];
      var p = 0;
      var v;
      br.fillBitWindow();
      p += (br.val_ >>> br.bit_pos_) & 15;
      br.bit_pos_ += huff[p].bits;
      v = huff[p].value;
      code_length_code_lengths[code_len_idx] = v;
      if (v !== 0) {
        space -= (32 >> v);
        ++num_codes;
      }
    }
    if (!(num_codes === 1 || space === 0))
      throw new Error('[ReadHuffmanCode] invalid num_codes or space');
    ReadHuffmanCodeLengths(code_length_code_lengths, alphabet_size, code_lengths, br);
  }
  table_size = BrotliBuildHuffmanTable(tables, table, HUFFMAN_TABLE_BITS, code_lengths, alphabet_size);
  if (table_size === 0) {
    throw new Error("[ReadHuffmanCode] BuildHuffmanTable failed: ");
  }
  return table_size;
}
function ReadBlockLength(table, index, br) {
  var code;
  var nbits;
  code = ReadSymbol(table, index, br);
  nbits = Prefix.kBlockLengthPrefixCode[code].nbits;
  return Prefix.kBlockLengthPrefixCode[code].offset + br.readBits(nbits);
}
function TranslateShortCodes(code, ringbuffer, index) {
  var val;
  if (code < NUM_DISTANCE_SHORT_CODES) {
    index += kDistanceShortCodeIndexOffset[code];
    index &= 3;
    val = ringbuffer[index] + kDistanceShortCodeValueOffset[code];
  } else {
    val = code - NUM_DISTANCE_SHORT_CODES + 1;
  }
  return val;
}
function MoveToFront(v, index) {
  var value = v[index];
  var i = index;
  for (; i; --i) v[i] = v[i - 1];
  v[0] = value;
}
function InverseMoveToFrontTransform(v, v_len) {
  var mtf = new Uint8Array(256);
  var i;
  for (i = 0; i < 256; ++i) {
    mtf[i] = i;
  }
  for (i = 0; i < v_len; ++i) {
    var index = v[i];
    v[i] = mtf[index];
    if (index) MoveToFront(mtf, index);
  }
}
function HuffmanTreeGroup(alphabet_size, num_htrees) {
  this.alphabet_size = alphabet_size;
  this.num_htrees = num_htrees;
  this.codes = new Array(num_htrees + num_htrees * kMaxHuffmanTableSize[(alphabet_size + 31) >>> 5]);
  this.htrees = new Uint32Array(num_htrees);
}
HuffmanTreeGroup.prototype.decode = function(br) {
  var i;
  var table_size;
  var next = 0;
  for (i = 0; i < this.num_htrees; ++i) {
    this.htrees[i] = next;
    table_size = ReadHuffmanCode(this.alphabet_size, this.codes, next, br);
    next += table_size;
  }
};
function DecodeContextMap(context_map_size, br) {
  var out = { num_htrees: null, context_map: null };
  var use_rle_for_zeros;
  var max_run_length_prefix = 0;
  var table;
  var i;
  br.readMoreInput();
  var num_htrees = out.num_htrees = DecodeVarLenUint8(br) + 1;
  var context_map = out.context_map = new Uint8Array(context_map_size);
  if (num_htrees <= 1) {
    return out;
  }
  use_rle_for_zeros = br.readBits(1);
  if (use_rle_for_zeros) {
    max_run_length_prefix = br.readBits(4) + 1;
  }
  table = [];
  for (i = 0; i < HUFFMAN_MAX_TABLE_SIZE; i++) {
    table[i] = new HuffmanCode(0, 0);
  }
  ReadHuffmanCode(num_htrees + max_run_length_prefix, table, 0, br);
  for (i = 0; i < context_map_size;) {
    var code;
    br.readMoreInput();
    code = ReadSymbol(table, 0, br);
    if (code === 0) {
      context_map[i] = 0;
      ++i;
    } else if (code <= max_run_length_prefix) {
      var reps = 1 + (1 << code) + br.readBits(code);
      while (--reps) {
        if (i >= context_map_size) {
          throw new Error("[DecodeContextMap] i >= context_map_size");
        }
        context_map[i] = 0;
        ++i;
      }
    } else {
      context_map[i] = code - max_run_length_prefix;
      ++i;
    }
  }
  if (br.readBits(1)) {
    InverseMoveToFrontTransform(context_map, context_map_size);
  }
  return out;
}
function DecodeBlockType(max_block_type, trees, tree_type, block_types, ringbuffers, indexes, br) {
  var ringbuffer = tree_type * 2;
  var index = tree_type;
  var type_code = ReadSymbol(trees, tree_type * HUFFMAN_MAX_TABLE_SIZE, br);
  var block_type;
  if (type_code === 0) {
    block_type = ringbuffers[ringbuffer + (indexes[index] & 1)];
  } else if (type_code === 1) {
    block_type = ringbuffers[ringbuffer + ((indexes[index] - 1) & 1)] + 1;
  } else {
    block_type = type_code - 2;
  }
  if (block_type >= max_block_type) {
    block_type -= max_block_type;
  }
  block_types[tree_type] = block_type;
  ringbuffers[ringbuffer + (indexes[index] & 1)] = block_type;
  ++indexes[index];
}
function CopyUncompressedBlockToOutput(output, len, pos, ringbuffer, ringbuffer_mask, br) {
  var rb_size = ringbuffer_mask + 1;
  var rb_pos = pos & ringbuffer_mask;
  var br_pos = br.pos_ & BrotliBitReader.IBUF_MASK;
  var nbytes;
  if (len < 8 || br.bit_pos_ + (len << 3) < br.bit_end_pos_) {
    while (len-- > 0) {
      br.readMoreInput();
      ringbuffer[rb_pos++] = br.readBits(8);
      if (rb_pos === rb_size) {
        output.write(ringbuffer, rb_size);
        rb_pos = 0;
      }
    }
    return;
  }
  if (br.bit_end_pos_ < 32) {
    throw new Error('[CopyUncompressedBlockToOutput] br.bit_end_pos_ < 32');
  }
  while (br.bit_pos_ < 32) {
    ringbuffer[rb_pos] = (br.val_ >>> br.bit_pos_);
    br.bit_pos_ += 8;
    ++rb_pos;
    --len;
  }
  nbytes = (br.bit_end_pos_ - br.bit_pos_) >> 3;
  if (br_pos + nbytes > BrotliBitReader.IBUF_MASK) {
    var tail = BrotliBitReader.IBUF_MASK + 1 - br_pos;
    for (var x = 0; x < tail; x++)
      ringbuffer[rb_pos + x] = br.buf_[br_pos + x];
    nbytes -= tail;
    rb_pos += tail;
    len -= tail;
    br_pos = 0;
  }
  for (var x = 0; x < nbytes; x++)
    ringbuffer[rb_pos + x] = br.buf_[br_pos + x];
  rb_pos += nbytes;
  len -= nbytes;
  if (rb_pos >= rb_size) {
    output.write(ringbuffer, rb_size);
    rb_pos -= rb_size;
    for (var x = 0; x < rb_pos; x++)
      ringbuffer[x] = ringbuffer[rb_size + x];
  }
  while (rb_pos + len >= rb_size) {
    nbytes = rb_size - rb_pos;
    if (br.input_.read(ringbuffer, rb_pos, nbytes) < nbytes) {
      throw new Error('[CopyUncompressedBlockToOutput] not enough bytes');
    }
    output.write(ringbuffer, rb_size);
    len -= nbytes;
    rb_pos = 0;
  }
  if (br.input_.read(ringbuffer, rb_pos, len) < len) {
    throw new Error('[CopyUncompressedBlockToOutput] not enough bytes');
  }
  br.reset();
}
function JumpToByteBoundary(br) {
  var new_bit_pos = (br.bit_pos_ + 7) & ~7;
  var pad_bits = br.readBits(new_bit_pos - br.bit_pos_);
  return pad_bits == 0;
}
function BrotliDecompressedSize(buffer) {
  var input = new BrotliInput(buffer);
  var br = new BrotliBitReader(input);
  DecodeWindowBits(br);
  var out = DecodeMetaBlockLength(br);
  return out.meta_block_length;
}
decode.BrotliDecompressedSize = BrotliDecompressedSize;
function BrotliDecompressBuffer(buffer, output_size) {
  var input = new BrotliInput(buffer);
  if (output_size == null) {
    output_size = BrotliDecompressedSize(buffer);
  }
  var output_buffer = new Uint8Array(output_size);
  var output = new BrotliOutput(output_buffer);
  BrotliDecompress(input, output);
  if (output.pos < output.buffer.length) {
    output.buffer = output.buffer.subarray(0, output.pos);
  }
  return output.buffer;
}
decode.BrotliDecompressBuffer = BrotliDecompressBuffer;
function BrotliDecompress(input, output) {
  var i;
  var pos = 0;
  var input_end = 0;
  var window_bits = 0;
  var max_backward_distance;
  var max_distance = 0;
  var ringbuffer_size;
  var ringbuffer_mask;
  var ringbuffer;
  var ringbuffer_end;
  var dist_rb = [ 16, 15, 11, 4 ];
  var dist_rb_idx = 0;
  var prev_byte1 = 0;
  var prev_byte2 = 0;
  var hgroup = [new HuffmanTreeGroup(0, 0), new HuffmanTreeGroup(0, 0), new HuffmanTreeGroup(0, 0)];
  var block_type_trees;
  var block_len_trees;
  var br;
  var kRingBufferWriteAheadSlack = 128 + BrotliBitReader.READ_SIZE;
  br = new BrotliBitReader(input);
  window_bits = DecodeWindowBits(br);
  max_backward_distance = (1 << window_bits) - 16;
  ringbuffer_size = 1 << window_bits;
  ringbuffer_mask = ringbuffer_size - 1;
  ringbuffer = new Uint8Array(ringbuffer_size + kRingBufferWriteAheadSlack + BrotliDictionary.maxDictionaryWordLength);
  ringbuffer_end = ringbuffer_size;
  block_type_trees = [];
  block_len_trees = [];
  for (var x = 0; x < 3 * HUFFMAN_MAX_TABLE_SIZE; x++) {
    block_type_trees[x] = new HuffmanCode(0, 0);
    block_len_trees[x] = new HuffmanCode(0, 0);
  }
  while (!input_end) {
    var meta_block_remaining_len = 0;
    var is_uncompressed;
    var block_length = [ 1 << 28, 1 << 28, 1 << 28 ];
    var block_type = [ 0 ];
    var num_block_types = [ 1, 1, 1 ];
    var block_type_rb = [ 0, 1, 0, 1, 0, 1 ];
    var block_type_rb_index = [ 0 ];
    var distance_postfix_bits;
    var num_direct_distance_codes;
    var distance_postfix_mask;
    var num_distance_codes;
    var context_map = null;
    var context_modes = null;
    var num_literal_htrees;
    var dist_context_map = null;
    var num_dist_htrees;
    var context_offset = 0;
    var context_map_slice = null;
    var literal_htree_index = 0;
    var dist_context_offset = 0;
    var dist_context_map_slice = null;
    var dist_htree_index = 0;
    var context_lookup_offset1 = 0;
    var context_lookup_offset2 = 0;
    var context_mode;
    var htree_command;
    for (i = 0; i < 3; ++i) {
      hgroup[i].codes = null;
      hgroup[i].htrees = null;
    }
    br.readMoreInput();
    var _out = DecodeMetaBlockLength(br);
    meta_block_remaining_len = _out.meta_block_length;
    if (pos + meta_block_remaining_len > output.buffer.length) {
      var tmp = new Uint8Array( pos + meta_block_remaining_len );
      tmp.set( output.buffer );
      output.buffer = tmp;
    }
    input_end = _out.input_end;
    is_uncompressed = _out.is_uncompressed;
    if (_out.is_metadata) {
      JumpToByteBoundary(br);
      for (; meta_block_remaining_len > 0; --meta_block_remaining_len) {
        br.readMoreInput();
        br.readBits(8);
      }
      continue;
    }
    if (meta_block_remaining_len === 0) {
      continue;
    }
    if (is_uncompressed) {
      br.bit_pos_ = (br.bit_pos_ + 7) & ~7;
      CopyUncompressedBlockToOutput(output, meta_block_remaining_len, pos,
                                    ringbuffer, ringbuffer_mask, br);
      pos += meta_block_remaining_len;
      continue;
    }
    for (i = 0; i < 3; ++i) {
      num_block_types[i] = DecodeVarLenUint8(br) + 1;
      if (num_block_types[i] >= 2) {
        ReadHuffmanCode(num_block_types[i] + 2, block_type_trees, i * HUFFMAN_MAX_TABLE_SIZE, br);
        ReadHuffmanCode(kNumBlockLengthCodes, block_len_trees, i * HUFFMAN_MAX_TABLE_SIZE, br);
        block_length[i] = ReadBlockLength(block_len_trees, i * HUFFMAN_MAX_TABLE_SIZE, br);
        block_type_rb_index[i] = 1;
      }
    }
    br.readMoreInput();
    distance_postfix_bits = br.readBits(2);
    num_direct_distance_codes = NUM_DISTANCE_SHORT_CODES + (br.readBits(4) << distance_postfix_bits);
    distance_postfix_mask = (1 << distance_postfix_bits) - 1;
    num_distance_codes = (num_direct_distance_codes + (48 << distance_postfix_bits));
    context_modes = new Uint8Array(num_block_types[0]);
    for (i = 0; i < num_block_types[0]; ++i) {
       br.readMoreInput();
       context_modes[i] = (br.readBits(2) << 1);
    }
    var _o1 = DecodeContextMap(num_block_types[0] << kLiteralContextBits, br);
    num_literal_htrees = _o1.num_htrees;
    context_map = _o1.context_map;
    var _o2 = DecodeContextMap(num_block_types[2] << kDistanceContextBits, br);
    num_dist_htrees = _o2.num_htrees;
    dist_context_map = _o2.context_map;
    hgroup[0] = new HuffmanTreeGroup(kNumLiteralCodes, num_literal_htrees);
    hgroup[1] = new HuffmanTreeGroup(kNumInsertAndCopyCodes, num_block_types[1]);
    hgroup[2] = new HuffmanTreeGroup(num_distance_codes, num_dist_htrees);
    for (i = 0; i < 3; ++i) {
      hgroup[i].decode(br);
    }
    context_map_slice = 0;
    dist_context_map_slice = 0;
    context_mode = context_modes[block_type[0]];
    context_lookup_offset1 = Context.lookupOffsets[context_mode];
    context_lookup_offset2 = Context.lookupOffsets[context_mode + 1];
    htree_command = hgroup[1].htrees[0];
    while (meta_block_remaining_len > 0) {
      var cmd_code;
      var range_idx;
      var insert_code;
      var copy_code;
      var insert_length;
      var copy_length;
      var distance_code;
      var distance;
      var context;
      var j;
      var copy_dst;
      br.readMoreInput();
      if (block_length[1] === 0) {
        DecodeBlockType(num_block_types[1],
                        block_type_trees, 1, block_type, block_type_rb,
                        block_type_rb_index, br);
        block_length[1] = ReadBlockLength(block_len_trees, HUFFMAN_MAX_TABLE_SIZE, br);
        htree_command = hgroup[1].htrees[block_type[1]];
      }
      --block_length[1];
      cmd_code = ReadSymbol(hgroup[1].codes, htree_command, br);
      range_idx = cmd_code >> 6;
      if (range_idx >= 2) {
        range_idx -= 2;
        distance_code = -1;
      } else {
        distance_code = 0;
      }
      insert_code = Prefix.kInsertRangeLut[range_idx] + ((cmd_code >> 3) & 7);
      copy_code = Prefix.kCopyRangeLut[range_idx] + (cmd_code & 7);
      insert_length = Prefix.kInsertLengthPrefixCode[insert_code].offset +
          br.readBits(Prefix.kInsertLengthPrefixCode[insert_code].nbits);
      copy_length = Prefix.kCopyLengthPrefixCode[copy_code].offset +
          br.readBits(Prefix.kCopyLengthPrefixCode[copy_code].nbits);
      prev_byte1 = ringbuffer[pos-1 & ringbuffer_mask];
      prev_byte2 = ringbuffer[pos-2 & ringbuffer_mask];
      for (j = 0; j < insert_length; ++j) {
        br.readMoreInput();
        if (block_length[0] === 0) {
          DecodeBlockType(num_block_types[0],
                          block_type_trees, 0, block_type, block_type_rb,
                          block_type_rb_index, br);
          block_length[0] = ReadBlockLength(block_len_trees, 0, br);
          context_offset = block_type[0] << kLiteralContextBits;
          context_map_slice = context_offset;
          context_mode = context_modes[block_type[0]];
          context_lookup_offset1 = Context.lookupOffsets[context_mode];
          context_lookup_offset2 = Context.lookupOffsets[context_mode + 1];
        }
        context = (Context.lookup[context_lookup_offset1 + prev_byte1] |
                   Context.lookup[context_lookup_offset2 + prev_byte2]);
        literal_htree_index = context_map[context_map_slice + context];
        --block_length[0];
        prev_byte2 = prev_byte1;
        prev_byte1 = ReadSymbol(hgroup[0].codes, hgroup[0].htrees[literal_htree_index], br);
        ringbuffer[pos & ringbuffer_mask] = prev_byte1;
        if ((pos & ringbuffer_mask) === ringbuffer_mask) {
          output.write(ringbuffer, ringbuffer_size);
        }
        ++pos;
      }
      meta_block_remaining_len -= insert_length;
      if (meta_block_remaining_len <= 0) break;
      if (distance_code < 0) {
        var context;
        br.readMoreInput();
        if (block_length[2] === 0) {
          DecodeBlockType(num_block_types[2],
                          block_type_trees, 2, block_type, block_type_rb,
                          block_type_rb_index, br);
          block_length[2] = ReadBlockLength(block_len_trees, 2 * HUFFMAN_MAX_TABLE_SIZE, br);
          dist_context_offset = block_type[2] << kDistanceContextBits;
          dist_context_map_slice = dist_context_offset;
        }
        --block_length[2];
        context = (copy_length > 4 ? 3 : copy_length - 2) & 0xff;
        dist_htree_index = dist_context_map[dist_context_map_slice + context];
        distance_code = ReadSymbol(hgroup[2].codes, hgroup[2].htrees[dist_htree_index], br);
        if (distance_code >= num_direct_distance_codes) {
          var nbits;
          var postfix;
          var offset;
          distance_code -= num_direct_distance_codes;
          postfix = distance_code & distance_postfix_mask;
          distance_code >>= distance_postfix_bits;
          nbits = (distance_code >> 1) + 1;
          offset = ((2 + (distance_code & 1)) << nbits) - 4;
          distance_code = num_direct_distance_codes +
              ((offset + br.readBits(nbits)) <<
               distance_postfix_bits) + postfix;
        }
      }
      distance = TranslateShortCodes(distance_code, dist_rb, dist_rb_idx);
      if (distance < 0) {
        throw new Error('[BrotliDecompress] invalid distance');
      }
      if (pos < max_backward_distance &&
          max_distance !== max_backward_distance) {
        max_distance = pos;
      } else {
        max_distance = max_backward_distance;
      }
      copy_dst = pos & ringbuffer_mask;
      if (distance > max_distance) {
        if (copy_length >= BrotliDictionary.minDictionaryWordLength &&
            copy_length <= BrotliDictionary.maxDictionaryWordLength) {
          var offset = BrotliDictionary.offsetsByLength[copy_length];
          var word_id = distance - max_distance - 1;
          var shift = BrotliDictionary.sizeBitsByLength[copy_length];
          var mask = (1 << shift) - 1;
          var word_idx = word_id & mask;
          var transform_idx = word_id >> shift;
          offset += word_idx * copy_length;
          if (transform_idx < Transform.kNumTransforms) {
            var len = Transform.transformDictionaryWord(ringbuffer, copy_dst, offset, copy_length, transform_idx);
            copy_dst += len;
            pos += len;
            meta_block_remaining_len -= len;
            if (copy_dst >= ringbuffer_end) {
              output.write(ringbuffer, ringbuffer_size);
              for (var _x = 0; _x < (copy_dst - ringbuffer_end); _x++)
                ringbuffer[_x] = ringbuffer[ringbuffer_end + _x];
            }
          } else {
            throw new Error("Invalid backward reference. pos: " + pos + " distance: " + distance +
              " len: " + copy_length + " bytes left: " + meta_block_remaining_len);
          }
        } else {
          throw new Error("Invalid backward reference. pos: " + pos + " distance: " + distance +
            " len: " + copy_length + " bytes left: " + meta_block_remaining_len);
        }
      } else {
        if (distance_code > 0) {
          dist_rb[dist_rb_idx & 3] = distance;
          ++dist_rb_idx;
        }
        if (copy_length > meta_block_remaining_len) {
          throw new Error("Invalid backward reference. pos: " + pos + " distance: " + distance +
            " len: " + copy_length + " bytes left: " + meta_block_remaining_len);
        }
        for (j = 0; j < copy_length; ++j) {
          ringbuffer[pos & ringbuffer_mask] = ringbuffer[(pos - distance) & ringbuffer_mask];
          if ((pos & ringbuffer_mask) === ringbuffer_mask) {
            output.write(ringbuffer, ringbuffer_size);
          }
          ++pos;
          --meta_block_remaining_len;
        }
      }
      prev_byte1 = ringbuffer[(pos - 1) & ringbuffer_mask];
      prev_byte2 = ringbuffer[(pos - 2) & ringbuffer_mask];
    }
    pos &= 0x3fffffff;
  }
  output.write(ringbuffer, pos & ringbuffer_mask);
}
decode.BrotliDecompress = BrotliDecompress;
BrotliDictionary.init();

var decompress = decode.BrotliDecompressBuffer;

var $5OpyM$brotlidecompressjs = /*@__PURE__*/getDefaultExportFromCjs$1(decompress);

function $parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});
}
function $parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}
var $8857867ee3ddfad5$exports = {};
$parcel$export($8857867ee3ddfad5$exports, "logErrors", () => $8857867ee3ddfad5$export$bd5c5d8b8dcafd78);
$parcel$export($8857867ee3ddfad5$exports, "registerFormat", () => $8857867ee3ddfad5$export$36b2f24e97d43be);
$parcel$export($8857867ee3ddfad5$exports, "openSync", () => $8857867ee3ddfad5$export$fa5499edb1ab414a);
$parcel$export($8857867ee3ddfad5$exports, "create", () => $8857867ee3ddfad5$export$185802fd694ee1f5);
$parcel$export($8857867ee3ddfad5$exports, "open", () => $8857867ee3ddfad5$export$3ce6949f20cea765);
$parcel$export($8857867ee3ddfad5$exports, "defaultLanguage", () => $8857867ee3ddfad5$export$42940898df819940);
$parcel$export($8857867ee3ddfad5$exports, "setDefaultLanguage", () => $8857867ee3ddfad5$export$5157e7780d44cc36);
let $8857867ee3ddfad5$export$bd5c5d8b8dcafd78 = false;
let $8857867ee3ddfad5$var$formats = [];
function $8857867ee3ddfad5$export$36b2f24e97d43be(format) {
    $8857867ee3ddfad5$var$formats.push(format);
}
function $8857867ee3ddfad5$export$fa5499edb1ab414a(filename, postscriptName) {
    let buffer = virtualFs_1.readFileSync(filename);
    return $8857867ee3ddfad5$export$185802fd694ee1f5(buffer, postscriptName);
}
function $8857867ee3ddfad5$export$3ce6949f20cea765(filename, postscriptName, callback) {
    if (typeof postscriptName === 'function') {
        callback = postscriptName;
        postscriptName = null;
    }
    virtualFs_1.readFile(filename, function(err, buffer) {
        if (err) return callback(err);
        try {
            var font = $8857867ee3ddfad5$export$185802fd694ee1f5(buffer, postscriptName);
        } catch (e) {
            return callback(e);
        }
        return callback(null, font);
    });
    return;
}
function $8857867ee3ddfad5$export$185802fd694ee1f5(buffer, postscriptName) {
    for(let i = 0; i < $8857867ee3ddfad5$var$formats.length; i++){
        let format = $8857867ee3ddfad5$var$formats[i];
        if (format.probe(buffer)) {
            let font = new format(new $5OpyM$restructure.DecodeStream(buffer));
            if (postscriptName) return font.getFont(postscriptName);
            return font;
        }
    }
    throw new Error('Unknown font format');
}
let $8857867ee3ddfad5$export$42940898df819940 = 'en';
function $8857867ee3ddfad5$export$5157e7780d44cc36(lang = 'en') {
    $8857867ee3ddfad5$export$42940898df819940 = lang;
}
function $df9bc573962369ff$export$69a3209f1a06c04d(target, key1, descriptor) {
    if (descriptor.get) {
        let get = descriptor.get;
        descriptor.get = function() {
            let value = get.call(this);
            Object.defineProperty(this, key1, {
                value: value
            });
            return value;
        };
    } else if (typeof descriptor.value === 'function') {
        let fn = descriptor.value;
        return {
            get () {
                let $df9bc573962369ff$export$69a3209f1a06c04d = new Map;
                function memoized(...args) {
                    let key = args.length > 0 ? args[0] : 'value';
                    if ($df9bc573962369ff$export$69a3209f1a06c04d.has(key)) return $df9bc573962369ff$export$69a3209f1a06c04d.get(key);
                    let result = fn.apply(this, args);
                    $df9bc573962369ff$export$69a3209f1a06c04d.set(key, result);
                    return result;
                }
                Object.defineProperty(this, key1, {
                    value: memoized
                });
                return memoized;
            }
        };
    }
}
let $9aad45a64cf8e4b5$var$SubHeader = new $5OpyM$restructure.Struct({
    firstCode: $5OpyM$restructure.uint16,
    entryCount: $5OpyM$restructure.uint16,
    idDelta: $5OpyM$restructure.int16,
    idRangeOffset: $5OpyM$restructure.uint16
});
let $9aad45a64cf8e4b5$var$CmapGroup = new $5OpyM$restructure.Struct({
    startCharCode: $5OpyM$restructure.uint32,
    endCharCode: $5OpyM$restructure.uint32,
    glyphID: $5OpyM$restructure.uint32
});
let $9aad45a64cf8e4b5$var$UnicodeValueRange = new $5OpyM$restructure.Struct({
    startUnicodeValue: $5OpyM$restructure.uint24,
    additionalCount: $5OpyM$restructure.uint8
});
let $9aad45a64cf8e4b5$var$UVSMapping = new $5OpyM$restructure.Struct({
    unicodeValue: $5OpyM$restructure.uint24,
    glyphID: $5OpyM$restructure.uint16
});
let $9aad45a64cf8e4b5$var$DefaultUVS = new $5OpyM$restructure.Array($9aad45a64cf8e4b5$var$UnicodeValueRange, $5OpyM$restructure.uint32);
let $9aad45a64cf8e4b5$var$NonDefaultUVS = new $5OpyM$restructure.Array($9aad45a64cf8e4b5$var$UVSMapping, $5OpyM$restructure.uint32);
let $9aad45a64cf8e4b5$var$VarSelectorRecord = new $5OpyM$restructure.Struct({
    varSelector: $5OpyM$restructure.uint24,
    defaultUVS: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, $9aad45a64cf8e4b5$var$DefaultUVS, {
        type: 'parent'
    }),
    nonDefaultUVS: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, $9aad45a64cf8e4b5$var$NonDefaultUVS, {
        type: 'parent'
    })
});
let $9aad45a64cf8e4b5$var$CmapSubtable = new $5OpyM$restructure.VersionedStruct($5OpyM$restructure.uint16, {
    0: {
        length: $5OpyM$restructure.uint16,
        language: $5OpyM$restructure.uint16,
        codeMap: new $5OpyM$restructure.LazyArray($5OpyM$restructure.uint8, 256)
    },
    2: {
        length: $5OpyM$restructure.uint16,
        language: $5OpyM$restructure.uint16,
        subHeaderKeys: new $5OpyM$restructure.Array($5OpyM$restructure.uint16, 256),
        subHeaderCount: (t)=>Math.max.apply(Math, t.subHeaderKeys)
        ,
        subHeaders: new $5OpyM$restructure.LazyArray($9aad45a64cf8e4b5$var$SubHeader, 'subHeaderCount'),
        glyphIndexArray: new $5OpyM$restructure.LazyArray($5OpyM$restructure.uint16, 'subHeaderCount')
    },
    4: {
        length: $5OpyM$restructure.uint16,
        language: $5OpyM$restructure.uint16,
        segCountX2: $5OpyM$restructure.uint16,
        segCount: (t)=>t.segCountX2 >> 1
        ,
        searchRange: $5OpyM$restructure.uint16,
        entrySelector: $5OpyM$restructure.uint16,
        rangeShift: $5OpyM$restructure.uint16,
        endCode: new $5OpyM$restructure.LazyArray($5OpyM$restructure.uint16, 'segCount'),
        reservedPad: new $5OpyM$restructure.Reserved($5OpyM$restructure.uint16),
        startCode: new $5OpyM$restructure.LazyArray($5OpyM$restructure.uint16, 'segCount'),
        idDelta: new $5OpyM$restructure.LazyArray($5OpyM$restructure.int16, 'segCount'),
        idRangeOffset: new $5OpyM$restructure.LazyArray($5OpyM$restructure.uint16, 'segCount'),
        glyphIndexArray: new $5OpyM$restructure.LazyArray($5OpyM$restructure.uint16, (t)=>(t.length - t._currentOffset) / 2
        )
    },
    6: {
        length: $5OpyM$restructure.uint16,
        language: $5OpyM$restructure.uint16,
        firstCode: $5OpyM$restructure.uint16,
        entryCount: $5OpyM$restructure.uint16,
        glyphIndices: new $5OpyM$restructure.LazyArray($5OpyM$restructure.uint16, 'entryCount')
    },
    8: {
        reserved: new $5OpyM$restructure.Reserved($5OpyM$restructure.uint16),
        length: $5OpyM$restructure.uint32,
        language: $5OpyM$restructure.uint16,
        is32: new $5OpyM$restructure.LazyArray($5OpyM$restructure.uint8, 8192),
        nGroups: $5OpyM$restructure.uint32,
        groups: new $5OpyM$restructure.LazyArray($9aad45a64cf8e4b5$var$CmapGroup, 'nGroups')
    },
    10: {
        reserved: new $5OpyM$restructure.Reserved($5OpyM$restructure.uint16),
        length: $5OpyM$restructure.uint32,
        language: $5OpyM$restructure.uint32,
        firstCode: $5OpyM$restructure.uint32,
        entryCount: $5OpyM$restructure.uint32,
        glyphIndices: new $5OpyM$restructure.LazyArray($5OpyM$restructure.uint16, 'numChars')
    },
    12: {
        reserved: new $5OpyM$restructure.Reserved($5OpyM$restructure.uint16),
        length: $5OpyM$restructure.uint32,
        language: $5OpyM$restructure.uint32,
        nGroups: $5OpyM$restructure.uint32,
        groups: new $5OpyM$restructure.LazyArray($9aad45a64cf8e4b5$var$CmapGroup, 'nGroups')
    },
    13: {
        reserved: new $5OpyM$restructure.Reserved($5OpyM$restructure.uint16),
        length: $5OpyM$restructure.uint32,
        language: $5OpyM$restructure.uint32,
        nGroups: $5OpyM$restructure.uint32,
        groups: new $5OpyM$restructure.LazyArray($9aad45a64cf8e4b5$var$CmapGroup, 'nGroups')
    },
    14: {
        length: $5OpyM$restructure.uint32,
        numRecords: $5OpyM$restructure.uint32,
        varSelectors: new $5OpyM$restructure.LazyArray($9aad45a64cf8e4b5$var$VarSelectorRecord, 'numRecords')
    }
});
let $9aad45a64cf8e4b5$var$CmapEntry = new $5OpyM$restructure.Struct({
    platformID: $5OpyM$restructure.uint16,
    encodingID: $5OpyM$restructure.uint16,
    table: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, $9aad45a64cf8e4b5$var$CmapSubtable, {
        type: 'parent',
        lazy: true
    })
});
var
$9aad45a64cf8e4b5$export$2e2bcd8739ae039 = new $5OpyM$restructure.Struct({
    version: $5OpyM$restructure.uint16,
    numSubtables: $5OpyM$restructure.uint16,
    tables: new $5OpyM$restructure.Array($9aad45a64cf8e4b5$var$CmapEntry, 'numSubtables')
});
var
$b41847595480ce3a$export$2e2bcd8739ae039 = new $5OpyM$restructure.Struct({
    version: $5OpyM$restructure.int32,
    revision: $5OpyM$restructure.int32,
    checkSumAdjustment: $5OpyM$restructure.uint32,
    magicNumber: $5OpyM$restructure.uint32,
    flags: $5OpyM$restructure.uint16,
    unitsPerEm: $5OpyM$restructure.uint16,
    created: new $5OpyM$restructure.Array($5OpyM$restructure.int32, 2),
    modified: new $5OpyM$restructure.Array($5OpyM$restructure.int32, 2),
    xMin: $5OpyM$restructure.int16,
    yMin: $5OpyM$restructure.int16,
    xMax: $5OpyM$restructure.int16,
    yMax: $5OpyM$restructure.int16,
    macStyle: new $5OpyM$restructure.Bitfield($5OpyM$restructure.uint16, [
        'bold',
        'italic',
        'underline',
        'outline',
        'shadow',
        'condensed',
        'extended'
    ]),
    lowestRecPPEM: $5OpyM$restructure.uint16,
    fontDirectionHint: $5OpyM$restructure.int16,
    indexToLocFormat: $5OpyM$restructure.int16,
    glyphDataFormat: $5OpyM$restructure.int16
});
var
$5fda302e2516d0c7$export$2e2bcd8739ae039 = new $5OpyM$restructure.Struct({
    version: $5OpyM$restructure.int32,
    ascent: $5OpyM$restructure.int16,
    descent: $5OpyM$restructure.int16,
    lineGap: $5OpyM$restructure.int16,
    advanceWidthMax: $5OpyM$restructure.uint16,
    minLeftSideBearing: $5OpyM$restructure.int16,
    minRightSideBearing: $5OpyM$restructure.int16,
    xMaxExtent: $5OpyM$restructure.int16,
    caretSlopeRise: $5OpyM$restructure.int16,
    caretSlopeRun: $5OpyM$restructure.int16,
    caretOffset: $5OpyM$restructure.int16,
    reserved: new $5OpyM$restructure.Reserved($5OpyM$restructure.int16, 4),
    metricDataFormat: $5OpyM$restructure.int16,
    numberOfMetrics: $5OpyM$restructure.uint16
});
let $28788c978325a3e1$var$HmtxEntry = new $5OpyM$restructure.Struct({
    advance: $5OpyM$restructure.uint16,
    bearing: $5OpyM$restructure.int16
});
var $28788c978325a3e1$export$2e2bcd8739ae039 = new $5OpyM$restructure.Struct({
    metrics: new $5OpyM$restructure.LazyArray($28788c978325a3e1$var$HmtxEntry, (t)=>t.parent.hhea.numberOfMetrics
    ),
    bearings: new $5OpyM$restructure.LazyArray($5OpyM$restructure.int16, (t)=>t.parent.maxp.numGlyphs - t.parent.hhea.numberOfMetrics
    )
});
var
$9e68d972c1fae2a9$export$2e2bcd8739ae039 = new $5OpyM$restructure.Struct({
    version: $5OpyM$restructure.int32,
    numGlyphs: $5OpyM$restructure.uint16,
    maxPoints: $5OpyM$restructure.uint16,
    maxContours: $5OpyM$restructure.uint16,
    maxComponentPoints: $5OpyM$restructure.uint16,
    maxComponentContours: $5OpyM$restructure.uint16,
    maxZones: $5OpyM$restructure.uint16,
    maxTwilightPoints: $5OpyM$restructure.uint16,
    maxStorage: $5OpyM$restructure.uint16,
    maxFunctionDefs: $5OpyM$restructure.uint16,
    maxInstructionDefs: $5OpyM$restructure.uint16,
    maxStackElements: $5OpyM$restructure.uint16,
    maxSizeOfInstructions: $5OpyM$restructure.uint16,
    maxComponentElements: $5OpyM$restructure.uint16,
    maxComponentDepth: $5OpyM$restructure.uint16
});
function $111d7d948974b54a$export$badc544e0651b6b1(platformID, encodingID, languageID = 0) {
    if (platformID === 1 && $111d7d948974b54a$export$479e671907f486d1[languageID]) return $111d7d948974b54a$export$479e671907f486d1[languageID];
    return $111d7d948974b54a$export$6fef87b7618bdf0b[platformID][encodingID];
}
const $111d7d948974b54a$export$6fef87b7618bdf0b = [
    [
        'utf16be',
        'utf16be',
        'utf16be',
        'utf16be',
        'utf16be',
        'utf16be'
    ],
    [
        'macroman',
        'shift-jis',
        'big5',
        'euc-kr',
        'iso-8859-6',
        'iso-8859-8',
        'macgreek',
        'maccyrillic',
        'symbol',
        'Devanagari',
        'Gurmukhi',
        'Gujarati',
        'Oriya',
        'Bengali',
        'Tamil',
        'Telugu',
        'Kannada',
        'Malayalam',
        'Sinhalese',
        'Burmese',
        'Khmer',
        'macthai',
        'Laotian',
        'Georgian',
        'Armenian',
        'gb-2312-80',
        'Tibetan',
        'Mongolian',
        'Geez',
        'maccenteuro',
        'Vietnamese',
        'Sindhi'
    ],
    [
        'ascii'
    ],
    [
        'symbol',
        'utf16be',
        'shift-jis',
        'gb18030',
        'big5',
        'wansung',
        'johab',
        null,
        null,
        null,
        'utf16be'
    ]
];
const $111d7d948974b54a$export$479e671907f486d1 = {
    15: 'maciceland',
    17: 'macturkish',
    18: 'maccroatian',
    24: 'maccenteuro',
    25: 'maccenteuro',
    26: 'maccenteuro',
    27: 'maccenteuro',
    28: 'maccenteuro',
    30: 'maciceland',
    37: 'macromania',
    38: 'maccenteuro',
    39: 'maccenteuro',
    40: 'maccenteuro',
    143: 'macinuit',
    146: 'macgaelic'
};
const $111d7d948974b54a$export$2092376fd002e13 = [
    [],
    {
        0: 'en',
        30: 'fo',
        60: 'ks',
        90: 'rw',
        1: 'fr',
        31: 'fa',
        61: 'ku',
        91: 'rn',
        2: 'de',
        32: 'ru',
        62: 'sd',
        92: 'ny',
        3: 'it',
        33: 'zh',
        63: 'bo',
        93: 'mg',
        4: 'nl',
        34: 'nl-BE',
        64: 'ne',
        94: 'eo',
        5: 'sv',
        35: 'ga',
        65: 'sa',
        128: 'cy',
        6: 'es',
        36: 'sq',
        66: 'mr',
        129: 'eu',
        7: 'da',
        37: 'ro',
        67: 'bn',
        130: 'ca',
        8: 'pt',
        38: 'cz',
        68: 'as',
        131: 'la',
        9: 'no',
        39: 'sk',
        69: 'gu',
        132: 'qu',
        10: 'he',
        40: 'si',
        70: 'pa',
        133: 'gn',
        11: 'ja',
        41: 'yi',
        71: 'or',
        134: 'ay',
        12: 'ar',
        42: 'sr',
        72: 'ml',
        135: 'tt',
        13: 'fi',
        43: 'mk',
        73: 'kn',
        136: 'ug',
        14: 'el',
        44: 'bg',
        74: 'ta',
        137: 'dz',
        15: 'is',
        45: 'uk',
        75: 'te',
        138: 'jv',
        16: 'mt',
        46: 'be',
        76: 'si',
        139: 'su',
        17: 'tr',
        47: 'uz',
        77: 'my',
        140: 'gl',
        18: 'hr',
        48: 'kk',
        78: 'km',
        141: 'af',
        19: 'zh-Hant',
        49: 'az-Cyrl',
        79: 'lo',
        142: 'br',
        20: 'ur',
        50: 'az-Arab',
        80: 'vi',
        143: 'iu',
        21: 'hi',
        51: 'hy',
        81: 'id',
        144: 'gd',
        22: 'th',
        52: 'ka',
        82: 'tl',
        145: 'gv',
        23: 'ko',
        53: 'mo',
        83: 'ms',
        146: 'ga',
        24: 'lt',
        54: 'ky',
        84: 'ms-Arab',
        147: 'to',
        25: 'pl',
        55: 'tg',
        85: 'am',
        148: 'el-polyton',
        26: 'hu',
        56: 'tk',
        86: 'ti',
        149: 'kl',
        27: 'es',
        57: 'mn-CN',
        87: 'om',
        150: 'az',
        28: 'lv',
        58: 'mn',
        88: 'so',
        151: 'nn',
        29: 'se',
        59: 'ps',
        89: 'sw'
    },
    [],
    {
        0x0436: 'af',
        0x4009: 'en-IN',
        0x0487: 'rw',
        0x0432: 'tn',
        0x041C: 'sq',
        0x1809: 'en-IE',
        0x0441: 'sw',
        0x045B: 'si',
        0x0484: 'gsw',
        0x2009: 'en-JM',
        0x0457: 'kok',
        0x041B: 'sk',
        0x045E: 'am',
        0x4409: 'en-MY',
        0x0412: 'ko',
        0x0424: 'sl',
        0x1401: 'ar-DZ',
        0x1409: 'en-NZ',
        0x0440: 'ky',
        0x2C0A: 'es-AR',
        0x3C01: 'ar-BH',
        0x3409: 'en-PH',
        0x0454: 'lo',
        0x400A: 'es-BO',
        0x0C01: 'ar',
        0x4809: 'en-SG',
        0x0426: 'lv',
        0x340A: 'es-CL',
        0x0801: 'ar-IQ',
        0x1C09: 'en-ZA',
        0x0427: 'lt',
        0x240A: 'es-CO',
        0x2C01: 'ar-JO',
        0x2C09: 'en-TT',
        0x082E: 'dsb',
        0x140A: 'es-CR',
        0x3401: 'ar-KW',
        0x0809: 'en-GB',
        0x046E: 'lb',
        0x1C0A: 'es-DO',
        0x3001: 'ar-LB',
        0x0409: 'en',
        0x042F: 'mk',
        0x300A: 'es-EC',
        0x1001: 'ar-LY',
        0x3009: 'en-ZW',
        0x083E: 'ms-BN',
        0x440A: 'es-SV',
        0x1801: 'ary',
        0x0425: 'et',
        0x043E: 'ms',
        0x100A: 'es-GT',
        0x2001: 'ar-OM',
        0x0438: 'fo',
        0x044C: 'ml',
        0x480A: 'es-HN',
        0x4001: 'ar-QA',
        0x0464: 'fil',
        0x043A: 'mt',
        0x080A: 'es-MX',
        0x0401: 'ar-SA',
        0x040B: 'fi',
        0x0481: 'mi',
        0x4C0A: 'es-NI',
        0x2801: 'ar-SY',
        0x080C: 'fr-BE',
        0x047A: 'arn',
        0x180A: 'es-PA',
        0x1C01: 'aeb',
        0x0C0C: 'fr-CA',
        0x044E: 'mr',
        0x3C0A: 'es-PY',
        0x3801: 'ar-AE',
        0x040C: 'fr',
        0x047C: 'moh',
        0x280A: 'es-PE',
        0x2401: 'ar-YE',
        0x140C: 'fr-LU',
        0x0450: 'mn',
        0x500A: 'es-PR',
        0x042B: 'hy',
        0x180C: 'fr-MC',
        0x0850: 'mn-CN',
        0x0C0A: 'es',
        0x044D: 'as',
        0x100C: 'fr-CH',
        0x0461: 'ne',
        0x040A: 'es',
        0x082C: 'az-Cyrl',
        0x0462: 'fy',
        0x0414: 'nb',
        0x540A: 'es-US',
        0x042C: 'az',
        0x0456: 'gl',
        0x0814: 'nn',
        0x380A: 'es-UY',
        0x046D: 'ba',
        0x0437: 'ka',
        0x0482: 'oc',
        0x200A: 'es-VE',
        0x042D: 'eu',
        0x0C07: 'de-AT',
        0x0448: 'or',
        0x081D: 'sv-FI',
        0x0423: 'be',
        0x0407: 'de',
        0x0463: 'ps',
        0x041D: 'sv',
        0x0845: 'bn',
        0x1407: 'de-LI',
        0x0415: 'pl',
        0x045A: 'syr',
        0x0445: 'bn-IN',
        0x1007: 'de-LU',
        0x0416: 'pt',
        0x0428: 'tg',
        0x201A: 'bs-Cyrl',
        0x0807: 'de-CH',
        0x0816: 'pt-PT',
        0x085F: 'tzm',
        0x141A: 'bs',
        0x0408: 'el',
        0x0446: 'pa',
        0x0449: 'ta',
        0x047E: 'br',
        0x046F: 'kl',
        0x046B: 'qu-BO',
        0x0444: 'tt',
        0x0402: 'bg',
        0x0447: 'gu',
        0x086B: 'qu-EC',
        0x044A: 'te',
        0x0403: 'ca',
        0x0468: 'ha',
        0x0C6B: 'qu',
        0x041E: 'th',
        0x0C04: 'zh-HK',
        0x040D: 'he',
        0x0418: 'ro',
        0x0451: 'bo',
        0x1404: 'zh-MO',
        0x0439: 'hi',
        0x0417: 'rm',
        0x041F: 'tr',
        0x0804: 'zh',
        0x040E: 'hu',
        0x0419: 'ru',
        0x0442: 'tk',
        0x1004: 'zh-SG',
        0x040F: 'is',
        0x243B: 'smn',
        0x0480: 'ug',
        0x0404: 'zh-TW',
        0x0470: 'ig',
        0x103B: 'smj-NO',
        0x0422: 'uk',
        0x0483: 'co',
        0x0421: 'id',
        0x143B: 'smj',
        0x042E: 'hsb',
        0x041A: 'hr',
        0x045D: 'iu',
        0x0C3B: 'se-FI',
        0x0420: 'ur',
        0x101A: 'hr-BA',
        0x085D: 'iu-Latn',
        0x043B: 'se',
        0x0843: 'uz-Cyrl',
        0x0405: 'cs',
        0x083C: 'ga',
        0x083B: 'se-SE',
        0x0443: 'uz',
        0x0406: 'da',
        0x0434: 'xh',
        0x203B: 'sms',
        0x042A: 'vi',
        0x048C: 'prs',
        0x0435: 'zu',
        0x183B: 'sma-NO',
        0x0452: 'cy',
        0x0465: 'dv',
        0x0410: 'it',
        0x1C3B: 'sms',
        0x0488: 'wo',
        0x0813: 'nl-BE',
        0x0810: 'it-CH',
        0x044F: 'sa',
        0x0485: 'sah',
        0x0413: 'nl',
        0x0411: 'ja',
        0x1C1A: 'sr-Cyrl-BA',
        0x0478: 'ii',
        0x0C09: 'en-AU',
        0x044B: 'kn',
        0x0C1A: 'sr',
        0x046A: 'yo',
        0x2809: 'en-BZ',
        0x043F: 'kk',
        0x181A: 'sr-Latn-BA',
        0x1009: 'en-CA',
        0x0453: 'km',
        0x081A: 'sr-Latn',
        0x2409: 'en-029',
        0x0486: 'quc',
        0x046C: 'nso'
    }
];
var $866b9b7dd32d7242$require$Buffer = buffer.Buffer;
let $866b9b7dd32d7242$var$NameRecord = new $5OpyM$restructure.Struct({
    platformID: $5OpyM$restructure.uint16,
    encodingID: $5OpyM$restructure.uint16,
    languageID: $5OpyM$restructure.uint16,
    nameID: $5OpyM$restructure.uint16,
    length: $5OpyM$restructure.uint16,
    string: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, new $5OpyM$restructure.String('length', (t)=>$111d7d948974b54a$export$badc544e0651b6b1(t.platformID, t.encodingID, t.languageID)
    ), {
        type: 'parent',
        relativeTo: (ctx)=>ctx.parent.stringOffset
        ,
        allowNull: false
    })
});
let $866b9b7dd32d7242$var$LangTagRecord = new $5OpyM$restructure.Struct({
    length: $5OpyM$restructure.uint16,
    tag: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, new $5OpyM$restructure.String('length', 'utf16be'), {
        type: 'parent',
        relativeTo: (ctx)=>ctx.stringOffset
    })
});
var $866b9b7dd32d7242$var$NameTable = new $5OpyM$restructure.VersionedStruct($5OpyM$restructure.uint16, {
    0: {
        count: $5OpyM$restructure.uint16,
        stringOffset: $5OpyM$restructure.uint16,
        records: new $5OpyM$restructure.Array($866b9b7dd32d7242$var$NameRecord, 'count')
    },
    1: {
        count: $5OpyM$restructure.uint16,
        stringOffset: $5OpyM$restructure.uint16,
        records: new $5OpyM$restructure.Array($866b9b7dd32d7242$var$NameRecord, 'count'),
        langTagCount: $5OpyM$restructure.uint16,
        langTags: new $5OpyM$restructure.Array($866b9b7dd32d7242$var$LangTagRecord, 'langTagCount')
    }
});
var $866b9b7dd32d7242$export$2e2bcd8739ae039 = $866b9b7dd32d7242$var$NameTable;
const $866b9b7dd32d7242$var$NAMES = [
    'copyright',
    'fontFamily',
    'fontSubfamily',
    'uniqueSubfamily',
    'fullName',
    'version',
    'postscriptName',
    'trademark',
    'manufacturer',
    'designer',
    'description',
    'vendorURL',
    'designerURL',
    'license',
    'licenseURL',
    null,
    'preferredFamily',
    'preferredSubfamily',
    'compatibleFull',
    'sampleText',
    'postscriptCIDFontName',
    'wwsFamilyName',
    'wwsSubfamilyName'
];
$866b9b7dd32d7242$var$NameTable.process = function(stream) {
    var records = {};
    for (let record of this.records){
        let language = $111d7d948974b54a$export$2092376fd002e13[record.platformID][record.languageID];
        if (language == null && this.langTags != null && record.languageID >= 0x8000) language = this.langTags[record.languageID - 0x8000].tag;
        if (language == null) language = record.platformID + '-' + record.languageID;
        let key = record.nameID >= 256 ? 'fontFeatures' : $866b9b7dd32d7242$var$NAMES[record.nameID] || record.nameID;
        if (records[key] == null) records[key] = {};
        let obj = records[key];
        if (record.nameID >= 256) obj = obj[record.nameID] || (obj[record.nameID] = {});
        if (typeof record.string === 'string' || typeof obj[language] !== 'string') obj[language] = record.string;
    }
    this.records = records;
};
$866b9b7dd32d7242$var$NameTable.preEncode = function() {
    if (Array.isArray(this.records)) return;
    this.version = 0;
    let records = [];
    for(let key in this.records){
        let val = this.records[key];
        if (key === 'fontFeatures') continue;
        records.push({
            platformID: 3,
            encodingID: 1,
            languageID: 0x409,
            nameID: $866b9b7dd32d7242$var$NAMES.indexOf(key),
            length: $866b9b7dd32d7242$require$Buffer.byteLength(val.en, 'utf16le'),
            string: val.en
        });
        if (key === 'postscriptName') records.push({
            platformID: 1,
            encodingID: 0,
            languageID: 0,
            nameID: $866b9b7dd32d7242$var$NAMES.indexOf(key),
            length: val.en.length,
            string: val.en
        });
    }
    this.records = records;
    this.count = records.length;
    this.stringOffset = $866b9b7dd32d7242$var$NameTable.size(this, null, false);
};
var $268023eac606db57$var$OS2 = new $5OpyM$restructure.VersionedStruct($5OpyM$restructure.uint16, {
    header: {
        xAvgCharWidth: $5OpyM$restructure.int16,
        usWeightClass: $5OpyM$restructure.uint16,
        usWidthClass: $5OpyM$restructure.uint16,
        fsType: new $5OpyM$restructure.Bitfield($5OpyM$restructure.uint16, [
            null,
            'noEmbedding',
            'viewOnly',
            'editable',
            null,
            null,
            null,
            null,
            'noSubsetting',
            'bitmapOnly'
        ]),
        ySubscriptXSize: $5OpyM$restructure.int16,
        ySubscriptYSize: $5OpyM$restructure.int16,
        ySubscriptXOffset: $5OpyM$restructure.int16,
        ySubscriptYOffset: $5OpyM$restructure.int16,
        ySuperscriptXSize: $5OpyM$restructure.int16,
        ySuperscriptYSize: $5OpyM$restructure.int16,
        ySuperscriptXOffset: $5OpyM$restructure.int16,
        ySuperscriptYOffset: $5OpyM$restructure.int16,
        yStrikeoutSize: $5OpyM$restructure.int16,
        yStrikeoutPosition: $5OpyM$restructure.int16,
        sFamilyClass: $5OpyM$restructure.int16,
        panose: new $5OpyM$restructure.Array($5OpyM$restructure.uint8, 10),
        ulCharRange: new $5OpyM$restructure.Array($5OpyM$restructure.uint32, 4),
        vendorID: new $5OpyM$restructure.String(4),
        fsSelection: new $5OpyM$restructure.Bitfield($5OpyM$restructure.uint16, [
            'italic',
            'underscore',
            'negative',
            'outlined',
            'strikeout',
            'bold',
            'regular',
            'useTypoMetrics',
            'wws',
            'oblique'
        ]),
        usFirstCharIndex: $5OpyM$restructure.uint16,
        usLastCharIndex: $5OpyM$restructure.uint16
    },
    0: {},
    1: {
        typoAscender: $5OpyM$restructure.int16,
        typoDescender: $5OpyM$restructure.int16,
        typoLineGap: $5OpyM$restructure.int16,
        winAscent: $5OpyM$restructure.uint16,
        winDescent: $5OpyM$restructure.uint16,
        codePageRange: new $5OpyM$restructure.Array($5OpyM$restructure.uint32, 2)
    },
    2: {
        typoAscender: $5OpyM$restructure.int16,
        typoDescender: $5OpyM$restructure.int16,
        typoLineGap: $5OpyM$restructure.int16,
        winAscent: $5OpyM$restructure.uint16,
        winDescent: $5OpyM$restructure.uint16,
        codePageRange: new $5OpyM$restructure.Array($5OpyM$restructure.uint32, 2),
        xHeight: $5OpyM$restructure.int16,
        capHeight: $5OpyM$restructure.int16,
        defaultChar: $5OpyM$restructure.uint16,
        breakChar: $5OpyM$restructure.uint16,
        maxContent: $5OpyM$restructure.uint16
    },
    5: {
        typoAscender: $5OpyM$restructure.int16,
        typoDescender: $5OpyM$restructure.int16,
        typoLineGap: $5OpyM$restructure.int16,
        winAscent: $5OpyM$restructure.uint16,
        winDescent: $5OpyM$restructure.uint16,
        codePageRange: new $5OpyM$restructure.Array($5OpyM$restructure.uint32, 2),
        xHeight: $5OpyM$restructure.int16,
        capHeight: $5OpyM$restructure.int16,
        defaultChar: $5OpyM$restructure.uint16,
        breakChar: $5OpyM$restructure.uint16,
        maxContent: $5OpyM$restructure.uint16,
        usLowerOpticalPointSize: $5OpyM$restructure.uint16,
        usUpperOpticalPointSize: $5OpyM$restructure.uint16
    }
});
let $268023eac606db57$var$versions = $268023eac606db57$var$OS2.versions;
$268023eac606db57$var$versions[3] = $268023eac606db57$var$versions[4] = $268023eac606db57$var$versions[2];
var $268023eac606db57$export$2e2bcd8739ae039 = $268023eac606db57$var$OS2;
var
$5287343c85bea17e$export$2e2bcd8739ae039 = new $5OpyM$restructure.VersionedStruct($5OpyM$restructure.fixed32, {
    header: {
        italicAngle: $5OpyM$restructure.fixed32,
        underlinePosition: $5OpyM$restructure.int16,
        underlineThickness: $5OpyM$restructure.int16,
        isFixedPitch: $5OpyM$restructure.uint32,
        minMemType42: $5OpyM$restructure.uint32,
        maxMemType42: $5OpyM$restructure.uint32,
        minMemType1: $5OpyM$restructure.uint32,
        maxMemType1: $5OpyM$restructure.uint32
    },
    1: {},
    2: {
        numberOfGlyphs: $5OpyM$restructure.uint16,
        glyphNameIndex: new $5OpyM$restructure.Array($5OpyM$restructure.uint16, 'numberOfGlyphs'),
        names: new $5OpyM$restructure.Array(new $5OpyM$restructure.String($5OpyM$restructure.uint8))
    },
    2.5: {
        numberOfGlyphs: $5OpyM$restructure.uint16,
        offsets: new $5OpyM$restructure.Array($5OpyM$restructure.uint8, 'numberOfGlyphs')
    },
    3: {},
    4: {
        map: new $5OpyM$restructure.Array($5OpyM$restructure.uint32, (t)=>t.parent.maxp.numGlyphs
        )
    }
});
var
$5768e6ef8b1a512a$export$2e2bcd8739ae039 = new $5OpyM$restructure.Struct({
    controlValues: new $5OpyM$restructure.Array($5OpyM$restructure.int16)
});
var
$6f2fae1f8d2b4b41$export$2e2bcd8739ae039 = new $5OpyM$restructure.Struct({
    instructions: new $5OpyM$restructure.Array($5OpyM$restructure.uint8)
});
let $cae48a5e791773ec$var$loca = new $5OpyM$restructure.VersionedStruct('head.indexToLocFormat', {
    0: {
        offsets: new $5OpyM$restructure.Array($5OpyM$restructure.uint16)
    },
    1: {
        offsets: new $5OpyM$restructure.Array($5OpyM$restructure.uint32)
    }
});
$cae48a5e791773ec$var$loca.process = function() {
    if (this.version === 0) for(let i = 0; i < this.offsets.length; i++)this.offsets[i] <<= 1;
};
$cae48a5e791773ec$var$loca.preEncode = function() {
    if (this.version === 0) for(let i = 0; i < this.offsets.length; i++)this.offsets[i] >>>= 1;
};
var $cae48a5e791773ec$export$2e2bcd8739ae039 = $cae48a5e791773ec$var$loca;
var
$7b12cfca10f7f884$export$2e2bcd8739ae039 = new $5OpyM$restructure.Struct({
    controlValueProgram: new $5OpyM$restructure.Array($5OpyM$restructure.uint8)
});
var
$06e9f2dae5795013$export$2e2bcd8739ae039 = new $5OpyM$restructure.Array(new $5OpyM$restructure.Buffer);
class $6333f51d822e64a1$export$2e2bcd8739ae039 {
    constructor(type){
        this.type = type;
    }
    getCFFVersion(ctx) {
        while(ctx && !ctx.hdrSize)ctx = ctx.parent;
        return ctx ? ctx.version : -1;
    }
    decode(stream, parent) {
        let version = this.getCFFVersion(parent);
        let count = version >= 2 ? stream.readUInt32BE() : stream.readUInt16BE();
        if (count === 0) return [];
        let offSize = stream.readUInt8();
        let offsetType;
        if (offSize === 1) offsetType = $5OpyM$restructure.uint8;
        else if (offSize === 2) offsetType = $5OpyM$restructure.uint16;
        else if (offSize === 3) offsetType = $5OpyM$restructure.uint24;
        else if (offSize === 4) offsetType = $5OpyM$restructure.uint32;
        else throw new Error(`Bad offset size in CFFIndex: ${offSize} ${stream.pos}`);
        let ret = [];
        let startPos = stream.pos + (count + 1) * offSize - 1;
        let start = offsetType.decode(stream);
        for(let i = 0; i < count; i++){
            let end = offsetType.decode(stream);
            if (this.type != null) {
                let pos = stream.pos;
                stream.pos = startPos + start;
                parent.length = end - start;
                ret.push(this.type.decode(stream, parent));
                stream.pos = pos;
            } else ret.push({
                offset: startPos + start,
                length: end - start
            });
            start = end;
        }
        stream.pos = startPos + start;
        return ret;
    }
    size(arr, parent) {
        let size = 2;
        if (arr.length === 0) return size;
        let type = this.type || new $5OpyM$restructure.Buffer;
        let offset = 1;
        for(let i = 0; i < arr.length; i++){
            let item = arr[i];
            offset += type.size(item, parent);
        }
        let offsetType;
        if (offset <= 0xff) offsetType = $5OpyM$restructure.uint8;
        else if (offset <= 0xffff) offsetType = $5OpyM$restructure.uint16;
        else if (offset <= 0xffffff) offsetType = $5OpyM$restructure.uint24;
        else if (offset <= 0xffffffff) offsetType = $5OpyM$restructure.uint32;
        else throw new Error("Bad offset in CFFIndex");
        size += 1 + offsetType.size() * (arr.length + 1);
        size += offset - 1;
        return size;
    }
    encode(stream, arr, parent) {
        stream.writeUInt16BE(arr.length);
        if (arr.length === 0) return;
        let type = this.type || new $5OpyM$restructure.Buffer;
        let sizes = [];
        let offset = 1;
        for (let item of arr){
            let s = type.size(item, parent);
            sizes.push(s);
            offset += s;
        }
        let offsetType;
        if (offset <= 0xff) offsetType = $5OpyM$restructure.uint8;
        else if (offset <= 0xffff) offsetType = $5OpyM$restructure.uint16;
        else if (offset <= 0xffffff) offsetType = $5OpyM$restructure.uint24;
        else if (offset <= 0xffffffff) offsetType = $5OpyM$restructure.uint32;
        else throw new Error("Bad offset in CFFIndex");
        stream.writeUInt8(offsetType.size());
        offset = 1;
        offsetType.encode(stream, offset);
        for (let size of sizes){
            offset += size;
            offsetType.encode(stream, offset);
        }
        for (let item1 of arr)type.encode(stream, item1, parent);
        return;
    }
}
const $2e2b3208cd32b1af$var$FLOAT_EOF = 0xf;
const $2e2b3208cd32b1af$var$FLOAT_LOOKUP = [
    '0',
    '1',
    '2',
    '3',
    '4',
    '5',
    '6',
    '7',
    '8',
    '9',
    '.',
    'E',
    'E-',
    null,
    '-'
];
const $2e2b3208cd32b1af$var$FLOAT_ENCODE_LOOKUP = {
    '.': 10,
    'E': 11,
    'E-': 12,
    '-': 14
};
class $2e2b3208cd32b1af$export$2e2bcd8739ae039 {
    static decode(stream, value) {
        if (32 <= value && value <= 246) return value - 139;
        if (247 <= value && value <= 250) return (value - 247) * 256 + stream.readUInt8() + 108;
        if (251 <= value && value <= 254) return -(value - 251) * 256 - stream.readUInt8() - 108;
        if (value === 28) return stream.readInt16BE();
        if (value === 29) return stream.readInt32BE();
        if (value === 30) {
            let str = '';
            while(true){
                let b = stream.readUInt8();
                let n1 = b >> 4;
                if (n1 === $2e2b3208cd32b1af$var$FLOAT_EOF) break;
                str += $2e2b3208cd32b1af$var$FLOAT_LOOKUP[n1];
                let n2 = b & 15;
                if (n2 === $2e2b3208cd32b1af$var$FLOAT_EOF) break;
                str += $2e2b3208cd32b1af$var$FLOAT_LOOKUP[n2];
            }
            return parseFloat(str);
        }
        return null;
    }
    static size(value) {
        if (value.forceLarge) value = 32768;
        if ((value | 0) !== value) {
            let str = '' + value;
            return 1 + Math.ceil((str.length + 1) / 2);
        } else if (-107 <= value && value <= 107) return 1;
        else if (108 <= value && value <= 1131 || -1131 <= value && value <= -108) return 2;
        else if (-32768 <= value && value <= 32767) return 3;
        else return 5;
    }
    static encode(stream, value) {
        let val = Number(value);
        if (value.forceLarge) {
            stream.writeUInt8(29);
            return stream.writeInt32BE(val);
        } else if ((val | 0) !== val) {
            stream.writeUInt8(30);
            let str = '' + val;
            for(let i = 0; i < str.length; i += 2){
                let c1 = str[i];
                let n1 = $2e2b3208cd32b1af$var$FLOAT_ENCODE_LOOKUP[c1] || +c1;
                if (i === str.length - 1) var n2 = $2e2b3208cd32b1af$var$FLOAT_EOF;
                else {
                    let c2 = str[i + 1];
                    var n2 = $2e2b3208cd32b1af$var$FLOAT_ENCODE_LOOKUP[c2] || +c2;
                }
                stream.writeUInt8(n1 << 4 | n2 & 15);
            }
            if (n2 !== $2e2b3208cd32b1af$var$FLOAT_EOF) return stream.writeUInt8($2e2b3208cd32b1af$var$FLOAT_EOF << 4);
        } else if (-107 <= val && val <= 107) return stream.writeUInt8(val + 139);
        else if (108 <= val && val <= 1131) {
            val -= 108;
            stream.writeUInt8((val >> 8) + 247);
            return stream.writeUInt8(val & 0xff);
        } else if (-1131 <= val && val <= -108) {
            val = -val - 108;
            stream.writeUInt8((val >> 8) + 251);
            return stream.writeUInt8(val & 0xff);
        } else if (-32768 <= val && val <= 32767) {
            stream.writeUInt8(28);
            return stream.writeInt16BE(val);
        } else {
            stream.writeUInt8(29);
            return stream.writeInt32BE(val);
        }
    }
}
class $1694c4b242cd1a66$export$2e2bcd8739ae039 {
    constructor(ops = []){
        this.ops = ops;
        this.fields = {};
        for (let field of ops){
            let key = Array.isArray(field[0]) ? field[0][0] << 8 | field[0][1] : field[0];
            this.fields[key] = field;
        }
    }
    decodeOperands(type, stream, ret, operands) {
        if (Array.isArray(type)) return operands.map((op, i)=>this.decodeOperands(type[i], stream, ret, [
                op
            ])
        );
        else if (type.decode != null) return type.decode(stream, ret, operands);
        else switch(type){
            case 'number':
            case 'offset':
            case 'sid':
                return operands[0];
            case 'boolean':
                return !!operands[0];
            default:
                return operands;
        }
    }
    encodeOperands(type, stream, ctx, operands) {
        if (Array.isArray(type)) return operands.map((op, i)=>this.encodeOperands(type[i], stream, ctx, op)[0]
        );
        else if (type.encode != null) return type.encode(stream, operands, ctx);
        else if (typeof operands === 'number') return [
            operands
        ];
        else if (typeof operands === 'boolean') return [
            +operands
        ];
        else if (Array.isArray(operands)) return operands;
        else return [
            operands
        ];
    }
    decode(stream, parent) {
        let end = stream.pos + parent.length;
        let ret = {};
        let operands = [];
        Object.defineProperties(ret, {
            parent: {
                value: parent
            },
            _startOffset: {
                value: stream.pos
            }
        });
        for(let key in this.fields){
            let field = this.fields[key];
            ret[field[1]] = field[3];
        }
        while(stream.pos < end){
            let b = stream.readUInt8();
            if (b < 28) {
                if (b === 12) b = b << 8 | stream.readUInt8();
                let field = this.fields[b];
                if (!field) throw new Error(`Unknown operator ${b}`);
                let val = this.decodeOperands(field[2], stream, ret, operands);
                if (val != null) {
                    if (val instanceof PropertyDescriptor_1) Object.defineProperty(ret, field[1], val);
                    else ret[field[1]] = val;
                }
                operands = [];
            } else operands.push($2e2b3208cd32b1af$export$2e2bcd8739ae039.decode(stream, b));
        }
        return ret;
    }
    size(dict, parent, includePointers = true) {
        let ctx = {
            parent: parent,
            val: dict,
            pointerSize: 0,
            startOffset: parent.startOffset || 0
        };
        let len = 0;
        for(let k in this.fields){
            let field = this.fields[k];
            let val = dict[field[1]];
            if (val == null || $5OpyM$deepequal(val, field[3])) continue;
            let operands = this.encodeOperands(field[2], null, ctx, val);
            for (let op of operands)len += $2e2b3208cd32b1af$export$2e2bcd8739ae039.size(op);
            let key = Array.isArray(field[0]) ? field[0] : [
                field[0]
            ];
            len += key.length;
        }
        if (includePointers) len += ctx.pointerSize;
        return len;
    }
    encode(stream, dict, parent) {
        let ctx = {
            pointers: [],
            startOffset: stream.pos,
            parent: parent,
            val: dict,
            pointerSize: 0
        };
        ctx.pointerOffset = stream.pos + this.size(dict, ctx, false);
        for (let field of this.ops){
            let val = dict[field[1]];
            if (val == null || $5OpyM$deepequal(val, field[3])) continue;
            let operands = this.encodeOperands(field[2], stream, ctx, val);
            for (let op of operands)$2e2b3208cd32b1af$export$2e2bcd8739ae039.encode(stream, op);
            let key = Array.isArray(field[0]) ? field[0] : [
                field[0]
            ];
            for (let op1 of key)stream.writeUInt8(op1);
        }
        let i = 0;
        while(i < ctx.pointers.length){
            let ptr = ctx.pointers[i++];
            ptr.type.encode(stream, ptr.val, ptr.parent);
        }
        return;
    }
}
class $6631a7581d654814$export$2e2bcd8739ae039 extends $5OpyM$restructure.Pointer {
    constructor(type, options = {}){
        if (options.type == null) options.type = 'global';
        super(null, type, options);
    }
    decode(stream, parent, operands) {
        this.offsetType = {
            decode: ()=>operands[0]
        };
        return super.decode(stream, parent, operands);
    }
    encode(stream, value, ctx) {
        if (!stream) {
            this.offsetType = {
                size: ()=>0
            };
            this.size(value, ctx);
            return [
                new $6631a7581d654814$var$Ptr(0)
            ];
        }
        let ptr = null;
        this.offsetType = {
            encode: (stream, val)=>ptr = val
        };
        super.encode(stream, value, ctx);
        return [
            new $6631a7581d654814$var$Ptr(ptr)
        ];
    }
}
class $6631a7581d654814$var$Ptr {
    constructor(val){
        this.val = val;
        this.forceLarge = true;
    }
    valueOf() {
        return this.val;
    }
}
class $94c2c7ed7c236891$var$CFFBlendOp {
    static decode(stream, parent, operands) {
        let numBlends = operands.pop();
        while(operands.length > numBlends)operands.pop();
    }
}
var $94c2c7ed7c236891$export$2e2bcd8739ae039 = new $1694c4b242cd1a66$export$2e2bcd8739ae039([
    [
        6,
        'BlueValues',
        'delta',
        null
    ],
    [
        7,
        'OtherBlues',
        'delta',
        null
    ],
    [
        8,
        'FamilyBlues',
        'delta',
        null
    ],
    [
        9,
        'FamilyOtherBlues',
        'delta',
        null
    ],
    [
        [
            12,
            9
        ],
        'BlueScale',
        'number',
        0.039625
    ],
    [
        [
            12,
            10
        ],
        'BlueShift',
        'number',
        7
    ],
    [
        [
            12,
            11
        ],
        'BlueFuzz',
        'number',
        1
    ],
    [
        10,
        'StdHW',
        'number',
        null
    ],
    [
        11,
        'StdVW',
        'number',
        null
    ],
    [
        [
            12,
            12
        ],
        'StemSnapH',
        'delta',
        null
    ],
    [
        [
            12,
            13
        ],
        'StemSnapV',
        'delta',
        null
    ],
    [
        [
            12,
            14
        ],
        'ForceBold',
        'boolean',
        false
    ],
    [
        [
            12,
            17
        ],
        'LanguageGroup',
        'number',
        0
    ],
    [
        [
            12,
            18
        ],
        'ExpansionFactor',
        'number',
        0.06
    ],
    [
        [
            12,
            19
        ],
        'initialRandomSeed',
        'number',
        0
    ],
    [
        20,
        'defaultWidthX',
        'number',
        0
    ],
    [
        21,
        'nominalWidthX',
        'number',
        0
    ],
    [
        22,
        'vsindex',
        'number',
        0
    ],
    [
        23,
        'blend',
        $94c2c7ed7c236891$var$CFFBlendOp,
        null
    ],
    [
        19,
        'Subrs',
        new $6631a7581d654814$export$2e2bcd8739ae039(new $6333f51d822e64a1$export$2e2bcd8739ae039, {
            type: 'local'
        }),
        null
    ]
]);
var
$276d3ff37a4362c9$export$2e2bcd8739ae039 = [
    ".notdef",
    "space",
    "exclam",
    "quotedbl",
    "numbersign",
    "dollar",
    "percent",
    "ampersand",
    "quoteright",
    "parenleft",
    "parenright",
    "asterisk",
    "plus",
    "comma",
    "hyphen",
    "period",
    "slash",
    "zero",
    "one",
    "two",
    "three",
    "four",
    "five",
    "six",
    "seven",
    "eight",
    "nine",
    "colon",
    "semicolon",
    "less",
    "equal",
    "greater",
    "question",
    "at",
    "A",
    "B",
    "C",
    "D",
    "E",
    "F",
    "G",
    "H",
    "I",
    "J",
    "K",
    "L",
    "M",
    "N",
    "O",
    "P",
    "Q",
    "R",
    "S",
    "T",
    "U",
    "V",
    "W",
    "X",
    "Y",
    "Z",
    "bracketleft",
    "backslash",
    "bracketright",
    "asciicircum",
    "underscore",
    "quoteleft",
    "a",
    "b",
    "c",
    "d",
    "e",
    "f",
    "g",
    "h",
    "i",
    "j",
    "k",
    "l",
    "m",
    "n",
    "o",
    "p",
    "q",
    "r",
    "s",
    "t",
    "u",
    "v",
    "w",
    "x",
    "y",
    "z",
    "braceleft",
    "bar",
    "braceright",
    "asciitilde",
    "exclamdown",
    "cent",
    "sterling",
    "fraction",
    "yen",
    "florin",
    "section",
    "currency",
    "quotesingle",
    "quotedblleft",
    "guillemotleft",
    "guilsinglleft",
    "guilsinglright",
    "fi",
    "fl",
    "endash",
    "dagger",
    "daggerdbl",
    "periodcentered",
    "paragraph",
    "bullet",
    "quotesinglbase",
    "quotedblbase",
    "quotedblright",
    "guillemotright",
    "ellipsis",
    "perthousand",
    "questiondown",
    "grave",
    "acute",
    "circumflex",
    "tilde",
    "macron",
    "breve",
    "dotaccent",
    "dieresis",
    "ring",
    "cedilla",
    "hungarumlaut",
    "ogonek",
    "caron",
    "emdash",
    "AE",
    "ordfeminine",
    "Lslash",
    "Oslash",
    "OE",
    "ordmasculine",
    "ae",
    "dotlessi",
    "lslash",
    "oslash",
    "oe",
    "germandbls",
    "onesuperior",
    "logicalnot",
    "mu",
    "trademark",
    "Eth",
    "onehalf",
    "plusminus",
    "Thorn",
    "onequarter",
    "divide",
    "brokenbar",
    "degree",
    "thorn",
    "threequarters",
    "twosuperior",
    "registered",
    "minus",
    "eth",
    "multiply",
    "threesuperior",
    "copyright",
    "Aacute",
    "Acircumflex",
    "Adieresis",
    "Agrave",
    "Aring",
    "Atilde",
    "Ccedilla",
    "Eacute",
    "Ecircumflex",
    "Edieresis",
    "Egrave",
    "Iacute",
    "Icircumflex",
    "Idieresis",
    "Igrave",
    "Ntilde",
    "Oacute",
    "Ocircumflex",
    "Odieresis",
    "Ograve",
    "Otilde",
    "Scaron",
    "Uacute",
    "Ucircumflex",
    "Udieresis",
    "Ugrave",
    "Yacute",
    "Ydieresis",
    "Zcaron",
    "aacute",
    "acircumflex",
    "adieresis",
    "agrave",
    "aring",
    "atilde",
    "ccedilla",
    "eacute",
    "ecircumflex",
    "edieresis",
    "egrave",
    "iacute",
    "icircumflex",
    "idieresis",
    "igrave",
    "ntilde",
    "oacute",
    "ocircumflex",
    "odieresis",
    "ograve",
    "otilde",
    "scaron",
    "uacute",
    "ucircumflex",
    "udieresis",
    "ugrave",
    "yacute",
    "ydieresis",
    "zcaron",
    "exclamsmall",
    "Hungarumlautsmall",
    "dollaroldstyle",
    "dollarsuperior",
    "ampersandsmall",
    "Acutesmall",
    "parenleftsuperior",
    "parenrightsuperior",
    "twodotenleader",
    "onedotenleader",
    "zerooldstyle",
    "oneoldstyle",
    "twooldstyle",
    "threeoldstyle",
    "fouroldstyle",
    "fiveoldstyle",
    "sixoldstyle",
    "sevenoldstyle",
    "eightoldstyle",
    "nineoldstyle",
    "commasuperior",
    "threequartersemdash",
    "periodsuperior",
    "questionsmall",
    "asuperior",
    "bsuperior",
    "centsuperior",
    "dsuperior",
    "esuperior",
    "isuperior",
    "lsuperior",
    "msuperior",
    "nsuperior",
    "osuperior",
    "rsuperior",
    "ssuperior",
    "tsuperior",
    "ff",
    "ffi",
    "ffl",
    "parenleftinferior",
    "parenrightinferior",
    "Circumflexsmall",
    "hyphensuperior",
    "Gravesmall",
    "Asmall",
    "Bsmall",
    "Csmall",
    "Dsmall",
    "Esmall",
    "Fsmall",
    "Gsmall",
    "Hsmall",
    "Ismall",
    "Jsmall",
    "Ksmall",
    "Lsmall",
    "Msmall",
    "Nsmall",
    "Osmall",
    "Psmall",
    "Qsmall",
    "Rsmall",
    "Ssmall",
    "Tsmall",
    "Usmall",
    "Vsmall",
    "Wsmall",
    "Xsmall",
    "Ysmall",
    "Zsmall",
    "colonmonetary",
    "onefitted",
    "rupiah",
    "Tildesmall",
    "exclamdownsmall",
    "centoldstyle",
    "Lslashsmall",
    "Scaronsmall",
    "Zcaronsmall",
    "Dieresissmall",
    "Brevesmall",
    "Caronsmall",
    "Dotaccentsmall",
    "Macronsmall",
    "figuredash",
    "hypheninferior",
    "Ogoneksmall",
    "Ringsmall",
    "Cedillasmall",
    "questiondownsmall",
    "oneeighth",
    "threeeighths",
    "fiveeighths",
    "seveneighths",
    "onethird",
    "twothirds",
    "zerosuperior",
    "foursuperior",
    "fivesuperior",
    "sixsuperior",
    "sevensuperior",
    "eightsuperior",
    "ninesuperior",
    "zeroinferior",
    "oneinferior",
    "twoinferior",
    "threeinferior",
    "fourinferior",
    "fiveinferior",
    "sixinferior",
    "seveninferior",
    "eightinferior",
    "nineinferior",
    "centinferior",
    "dollarinferior",
    "periodinferior",
    "commainferior",
    "Agravesmall",
    "Aacutesmall",
    "Acircumflexsmall",
    "Atildesmall",
    "Adieresissmall",
    "Aringsmall",
    "AEsmall",
    "Ccedillasmall",
    "Egravesmall",
    "Eacutesmall",
    "Ecircumflexsmall",
    "Edieresissmall",
    "Igravesmall",
    "Iacutesmall",
    "Icircumflexsmall",
    "Idieresissmall",
    "Ethsmall",
    "Ntildesmall",
    "Ogravesmall",
    "Oacutesmall",
    "Ocircumflexsmall",
    "Otildesmall",
    "Odieresissmall",
    "OEsmall",
    "Oslashsmall",
    "Ugravesmall",
    "Uacutesmall",
    "Ucircumflexsmall",
    "Udieresissmall",
    "Yacutesmall",
    "Thornsmall",
    "Ydieresissmall",
    "001.000",
    "001.001",
    "001.002",
    "001.003",
    "Black",
    "Bold",
    "Book",
    "Light",
    "Medium",
    "Regular",
    "Roman",
    "Semibold"
];
let $50148a3b88f16e26$export$dee0027060fa13bd = [
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    'space',
    'exclam',
    'quotedbl',
    'numbersign',
    'dollar',
    'percent',
    'ampersand',
    'quoteright',
    'parenleft',
    'parenright',
    'asterisk',
    'plus',
    'comma',
    'hyphen',
    'period',
    'slash',
    'zero',
    'one',
    'two',
    'three',
    'four',
    'five',
    'six',
    'seven',
    'eight',
    'nine',
    'colon',
    'semicolon',
    'less',
    'equal',
    'greater',
    'question',
    'at',
    'A',
    'B',
    'C',
    'D',
    'E',
    'F',
    'G',
    'H',
    'I',
    'J',
    'K',
    'L',
    'M',
    'N',
    'O',
    'P',
    'Q',
    'R',
    'S',
    'T',
    'U',
    'V',
    'W',
    'X',
    'Y',
    'Z',
    'bracketleft',
    'backslash',
    'bracketright',
    'asciicircum',
    'underscore',
    'quoteleft',
    'a',
    'b',
    'c',
    'd',
    'e',
    'f',
    'g',
    'h',
    'i',
    'j',
    'k',
    'l',
    'm',
    'n',
    'o',
    'p',
    'q',
    'r',
    's',
    't',
    'u',
    'v',
    'w',
    'x',
    'y',
    'z',
    'braceleft',
    'bar',
    'braceright',
    'asciitilde',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    'exclamdown',
    'cent',
    'sterling',
    'fraction',
    'yen',
    'florin',
    'section',
    'currency',
    'quotesingle',
    'quotedblleft',
    'guillemotleft',
    'guilsinglleft',
    'guilsinglright',
    'fi',
    'fl',
    '',
    'endash',
    'dagger',
    'daggerdbl',
    'periodcentered',
    '',
    'paragraph',
    'bullet',
    'quotesinglbase',
    'quotedblbase',
    'quotedblright',
    'guillemotright',
    'ellipsis',
    'perthousand',
    '',
    'questiondown',
    '',
    'grave',
    'acute',
    'circumflex',
    'tilde',
    'macron',
    'breve',
    'dotaccent',
    'dieresis',
    '',
    'ring',
    'cedilla',
    '',
    'hungarumlaut',
    'ogonek',
    'caron',
    'emdash',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    'AE',
    '',
    'ordfeminine',
    '',
    '',
    '',
    '',
    'Lslash',
    'Oslash',
    'OE',
    'ordmasculine',
    '',
    '',
    '',
    '',
    '',
    'ae',
    '',
    '',
    '',
    'dotlessi',
    '',
    '',
    'lslash',
    'oslash',
    'oe',
    'germandbls'
];
let $50148a3b88f16e26$export$4f58f497e14a53c3 = [
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    'space',
    'exclamsmall',
    'Hungarumlautsmall',
    '',
    'dollaroldstyle',
    'dollarsuperior',
    'ampersandsmall',
    'Acutesmall',
    'parenleftsuperior',
    'parenrightsuperior',
    'twodotenleader',
    'onedotenleader',
    'comma',
    'hyphen',
    'period',
    'fraction',
    'zerooldstyle',
    'oneoldstyle',
    'twooldstyle',
    'threeoldstyle',
    'fouroldstyle',
    'fiveoldstyle',
    'sixoldstyle',
    'sevenoldstyle',
    'eightoldstyle',
    'nineoldstyle',
    'colon',
    'semicolon',
    'commasuperior',
    'threequartersemdash',
    'periodsuperior',
    'questionsmall',
    '',
    'asuperior',
    'bsuperior',
    'centsuperior',
    'dsuperior',
    'esuperior',
    '',
    '',
    'isuperior',
    '',
    '',
    'lsuperior',
    'msuperior',
    'nsuperior',
    'osuperior',
    '',
    '',
    'rsuperior',
    'ssuperior',
    'tsuperior',
    '',
    'ff',
    'fi',
    'fl',
    'ffi',
    'ffl',
    'parenleftinferior',
    '',
    'parenrightinferior',
    'Circumflexsmall',
    'hyphensuperior',
    'Gravesmall',
    'Asmall',
    'Bsmall',
    'Csmall',
    'Dsmall',
    'Esmall',
    'Fsmall',
    'Gsmall',
    'Hsmall',
    'Ismall',
    'Jsmall',
    'Ksmall',
    'Lsmall',
    'Msmall',
    'Nsmall',
    'Osmall',
    'Psmall',
    'Qsmall',
    'Rsmall',
    'Ssmall',
    'Tsmall',
    'Usmall',
    'Vsmall',
    'Wsmall',
    'Xsmall',
    'Ysmall',
    'Zsmall',
    'colonmonetary',
    'onefitted',
    'rupiah',
    'Tildesmall',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    '',
    'exclamdownsmall',
    'centoldstyle',
    'Lslashsmall',
    '',
    '',
    'Scaronsmall',
    'Zcaronsmall',
    'Dieresissmall',
    'Brevesmall',
    'Caronsmall',
    '',
    'Dotaccentsmall',
    '',
    '',
    'Macronsmall',
    '',
    '',
    'figuredash',
    'hypheninferior',
    '',
    '',
    'Ogoneksmall',
    'Ringsmall',
    'Cedillasmall',
    '',
    '',
    '',
    'onequarter',
    'onehalf',
    'threequarters',
    'questiondownsmall',
    'oneeighth',
    'threeeighths',
    'fiveeighths',
    'seveneighths',
    'onethird',
    'twothirds',
    '',
    '',
    'zerosuperior',
    'onesuperior',
    'twosuperior',
    'threesuperior',
    'foursuperior',
    'fivesuperior',
    'sixsuperior',
    'sevensuperior',
    'eightsuperior',
    'ninesuperior',
    'zeroinferior',
    'oneinferior',
    'twoinferior',
    'threeinferior',
    'fourinferior',
    'fiveinferior',
    'sixinferior',
    'seveninferior',
    'eightinferior',
    'nineinferior',
    'centinferior',
    'dollarinferior',
    'periodinferior',
    'commainferior',
    'Agravesmall',
    'Aacutesmall',
    'Acircumflexsmall',
    'Atildesmall',
    'Adieresissmall',
    'Aringsmall',
    'AEsmall',
    'Ccedillasmall',
    'Egravesmall',
    'Eacutesmall',
    'Ecircumflexsmall',
    'Edieresissmall',
    'Igravesmall',
    'Iacutesmall',
    'Icircumflexsmall',
    'Idieresissmall',
    'Ethsmall',
    'Ntildesmall',
    'Ogravesmall',
    'Oacutesmall',
    'Ocircumflexsmall',
    'Otildesmall',
    'Odieresissmall',
    'OEsmall',
    'Oslashsmall',
    'Ugravesmall',
    'Uacutesmall',
    'Ucircumflexsmall',
    'Udieresissmall',
    'Yacutesmall',
    'Thornsmall',
    'Ydieresissmall'
];
let $a5fab60a6eadb8ed$export$c33b50336c234f16 = [
    '.notdef',
    'space',
    'exclam',
    'quotedbl',
    'numbersign',
    'dollar',
    'percent',
    'ampersand',
    'quoteright',
    'parenleft',
    'parenright',
    'asterisk',
    'plus',
    'comma',
    'hyphen',
    'period',
    'slash',
    'zero',
    'one',
    'two',
    'three',
    'four',
    'five',
    'six',
    'seven',
    'eight',
    'nine',
    'colon',
    'semicolon',
    'less',
    'equal',
    'greater',
    'question',
    'at',
    'A',
    'B',
    'C',
    'D',
    'E',
    'F',
    'G',
    'H',
    'I',
    'J',
    'K',
    'L',
    'M',
    'N',
    'O',
    'P',
    'Q',
    'R',
    'S',
    'T',
    'U',
    'V',
    'W',
    'X',
    'Y',
    'Z',
    'bracketleft',
    'backslash',
    'bracketright',
    'asciicircum',
    'underscore',
    'quoteleft',
    'a',
    'b',
    'c',
    'd',
    'e',
    'f',
    'g',
    'h',
    'i',
    'j',
    'k',
    'l',
    'm',
    'n',
    'o',
    'p',
    'q',
    'r',
    's',
    't',
    'u',
    'v',
    'w',
    'x',
    'y',
    'z',
    'braceleft',
    'bar',
    'braceright',
    'asciitilde',
    'exclamdown',
    'cent',
    'sterling',
    'fraction',
    'yen',
    'florin',
    'section',
    'currency',
    'quotesingle',
    'quotedblleft',
    'guillemotleft',
    'guilsinglleft',
    'guilsinglright',
    'fi',
    'fl',
    'endash',
    'dagger',
    'daggerdbl',
    'periodcentered',
    'paragraph',
    'bullet',
    'quotesinglbase',
    'quotedblbase',
    'quotedblright',
    'guillemotright',
    'ellipsis',
    'perthousand',
    'questiondown',
    'grave',
    'acute',
    'circumflex',
    'tilde',
    'macron',
    'breve',
    'dotaccent',
    'dieresis',
    'ring',
    'cedilla',
    'hungarumlaut',
    'ogonek',
    'caron',
    'emdash',
    'AE',
    'ordfeminine',
    'Lslash',
    'Oslash',
    'OE',
    'ordmasculine',
    'ae',
    'dotlessi',
    'lslash',
    'oslash',
    'oe',
    'germandbls',
    'onesuperior',
    'logicalnot',
    'mu',
    'trademark',
    'Eth',
    'onehalf',
    'plusminus',
    'Thorn',
    'onequarter',
    'divide',
    'brokenbar',
    'degree',
    'thorn',
    'threequarters',
    'twosuperior',
    'registered',
    'minus',
    'eth',
    'multiply',
    'threesuperior',
    'copyright',
    'Aacute',
    'Acircumflex',
    'Adieresis',
    'Agrave',
    'Aring',
    'Atilde',
    'Ccedilla',
    'Eacute',
    'Ecircumflex',
    'Edieresis',
    'Egrave',
    'Iacute',
    'Icircumflex',
    'Idieresis',
    'Igrave',
    'Ntilde',
    'Oacute',
    'Ocircumflex',
    'Odieresis',
    'Ograve',
    'Otilde',
    'Scaron',
    'Uacute',
    'Ucircumflex',
    'Udieresis',
    'Ugrave',
    'Yacute',
    'Ydieresis',
    'Zcaron',
    'aacute',
    'acircumflex',
    'adieresis',
    'agrave',
    'aring',
    'atilde',
    'ccedilla',
    'eacute',
    'ecircumflex',
    'edieresis',
    'egrave',
    'iacute',
    'icircumflex',
    'idieresis',
    'igrave',
    'ntilde',
    'oacute',
    'ocircumflex',
    'odieresis',
    'ograve',
    'otilde',
    'scaron',
    'uacute',
    'ucircumflex',
    'udieresis',
    'ugrave',
    'yacute',
    'ydieresis',
    'zcaron'
];
let $a5fab60a6eadb8ed$export$3ed0f9e1fee8d489 = [
    '.notdef',
    'space',
    'exclamsmall',
    'Hungarumlautsmall',
    'dollaroldstyle',
    'dollarsuperior',
    'ampersandsmall',
    'Acutesmall',
    'parenleftsuperior',
    'parenrightsuperior',
    'twodotenleader',
    'onedotenleader',
    'comma',
    'hyphen',
    'period',
    'fraction',
    'zerooldstyle',
    'oneoldstyle',
    'twooldstyle',
    'threeoldstyle',
    'fouroldstyle',
    'fiveoldstyle',
    'sixoldstyle',
    'sevenoldstyle',
    'eightoldstyle',
    'nineoldstyle',
    'colon',
    'semicolon',
    'commasuperior',
    'threequartersemdash',
    'periodsuperior',
    'questionsmall',
    'asuperior',
    'bsuperior',
    'centsuperior',
    'dsuperior',
    'esuperior',
    'isuperior',
    'lsuperior',
    'msuperior',
    'nsuperior',
    'osuperior',
    'rsuperior',
    'ssuperior',
    'tsuperior',
    'ff',
    'fi',
    'fl',
    'ffi',
    'ffl',
    'parenleftinferior',
    'parenrightinferior',
    'Circumflexsmall',
    'hyphensuperior',
    'Gravesmall',
    'Asmall',
    'Bsmall',
    'Csmall',
    'Dsmall',
    'Esmall',
    'Fsmall',
    'Gsmall',
    'Hsmall',
    'Ismall',
    'Jsmall',
    'Ksmall',
    'Lsmall',
    'Msmall',
    'Nsmall',
    'Osmall',
    'Psmall',
    'Qsmall',
    'Rsmall',
    'Ssmall',
    'Tsmall',
    'Usmall',
    'Vsmall',
    'Wsmall',
    'Xsmall',
    'Ysmall',
    'Zsmall',
    'colonmonetary',
    'onefitted',
    'rupiah',
    'Tildesmall',
    'exclamdownsmall',
    'centoldstyle',
    'Lslashsmall',
    'Scaronsmall',
    'Zcaronsmall',
    'Dieresissmall',
    'Brevesmall',
    'Caronsmall',
    'Dotaccentsmall',
    'Macronsmall',
    'figuredash',
    'hypheninferior',
    'Ogoneksmall',
    'Ringsmall',
    'Cedillasmall',
    'onequarter',
    'onehalf',
    'threequarters',
    'questiondownsmall',
    'oneeighth',
    'threeeighths',
    'fiveeighths',
    'seveneighths',
    'onethird',
    'twothirds',
    'zerosuperior',
    'onesuperior',
    'twosuperior',
    'threesuperior',
    'foursuperior',
    'fivesuperior',
    'sixsuperior',
    'sevensuperior',
    'eightsuperior',
    'ninesuperior',
    'zeroinferior',
    'oneinferior',
    'twoinferior',
    'threeinferior',
    'fourinferior',
    'fiveinferior',
    'sixinferior',
    'seveninferior',
    'eightinferior',
    'nineinferior',
    'centinferior',
    'dollarinferior',
    'periodinferior',
    'commainferior',
    'Agravesmall',
    'Aacutesmall',
    'Acircumflexsmall',
    'Atildesmall',
    'Adieresissmall',
    'Aringsmall',
    'AEsmall',
    'Ccedillasmall',
    'Egravesmall',
    'Eacutesmall',
    'Ecircumflexsmall',
    'Edieresissmall',
    'Igravesmall',
    'Iacutesmall',
    'Icircumflexsmall',
    'Idieresissmall',
    'Ethsmall',
    'Ntildesmall',
    'Ogravesmall',
    'Oacutesmall',
    'Ocircumflexsmall',
    'Otildesmall',
    'Odieresissmall',
    'OEsmall',
    'Oslashsmall',
    'Ugravesmall',
    'Uacutesmall',
    'Ucircumflexsmall',
    'Udieresissmall',
    'Yacutesmall',
    'Thornsmall',
    'Ydieresissmall'
];
let $a5fab60a6eadb8ed$export$dc28be11139d4120 = [
    '.notdef',
    'space',
    'dollaroldstyle',
    'dollarsuperior',
    'parenleftsuperior',
    'parenrightsuperior',
    'twodotenleader',
    'onedotenleader',
    'comma',
    'hyphen',
    'period',
    'fraction',
    'zerooldstyle',
    'oneoldstyle',
    'twooldstyle',
    'threeoldstyle',
    'fouroldstyle',
    'fiveoldstyle',
    'sixoldstyle',
    'sevenoldstyle',
    'eightoldstyle',
    'nineoldstyle',
    'colon',
    'semicolon',
    'commasuperior',
    'threequartersemdash',
    'periodsuperior',
    'asuperior',
    'bsuperior',
    'centsuperior',
    'dsuperior',
    'esuperior',
    'isuperior',
    'lsuperior',
    'msuperior',
    'nsuperior',
    'osuperior',
    'rsuperior',
    'ssuperior',
    'tsuperior',
    'ff',
    'fi',
    'fl',
    'ffi',
    'ffl',
    'parenleftinferior',
    'parenrightinferior',
    'hyphensuperior',
    'colonmonetary',
    'onefitted',
    'rupiah',
    'centoldstyle',
    'figuredash',
    'hypheninferior',
    'onequarter',
    'onehalf',
    'threequarters',
    'oneeighth',
    'threeeighths',
    'fiveeighths',
    'seveneighths',
    'onethird',
    'twothirds',
    'zerosuperior',
    'onesuperior',
    'twosuperior',
    'threesuperior',
    'foursuperior',
    'fivesuperior',
    'sixsuperior',
    'sevensuperior',
    'eightsuperior',
    'ninesuperior',
    'zeroinferior',
    'oneinferior',
    'twoinferior',
    'threeinferior',
    'fourinferior',
    'fiveinferior',
    'sixinferior',
    'seveninferior',
    'eightinferior',
    'nineinferior',
    'centinferior',
    'dollarinferior',
    'periodinferior',
    'commainferior'
];
let $401800e36a580e62$var$LangSysTable = new $5OpyM$restructure.Struct({
    reserved: new $5OpyM$restructure.Reserved($5OpyM$restructure.uint16),
    reqFeatureIndex: $5OpyM$restructure.uint16,
    featureCount: $5OpyM$restructure.uint16,
    featureIndexes: new $5OpyM$restructure.Array($5OpyM$restructure.uint16, 'featureCount')
});
let $401800e36a580e62$var$LangSysRecord = new $5OpyM$restructure.Struct({
    tag: new $5OpyM$restructure.String(4),
    langSys: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$var$LangSysTable, {
        type: 'parent'
    })
});
let $401800e36a580e62$var$Script = new $5OpyM$restructure.Struct({
    defaultLangSys: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$var$LangSysTable),
    count: $5OpyM$restructure.uint16,
    langSysRecords: new $5OpyM$restructure.Array($401800e36a580e62$var$LangSysRecord, 'count')
});
let $401800e36a580e62$var$ScriptRecord = new $5OpyM$restructure.Struct({
    tag: new $5OpyM$restructure.String(4),
    script: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$var$Script, {
        type: 'parent'
    })
});
let $401800e36a580e62$export$3e15fc05ce864229 = new $5OpyM$restructure.Array($401800e36a580e62$var$ScriptRecord, $5OpyM$restructure.uint16);
let $401800e36a580e62$var$FeatureParams = new $5OpyM$restructure.Struct({
    version: $5OpyM$restructure.uint16,
    nameID: $5OpyM$restructure.uint16
});
let $401800e36a580e62$export$6e91cf7616333d5 = new $5OpyM$restructure.Struct({
    featureParams: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$var$FeatureParams),
    lookupCount: $5OpyM$restructure.uint16,
    lookupListIndexes: new $5OpyM$restructure.Array($5OpyM$restructure.uint16, 'lookupCount')
});
let $401800e36a580e62$var$FeatureRecord = new $5OpyM$restructure.Struct({
    tag: new $5OpyM$restructure.String(4),
    feature: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$6e91cf7616333d5, {
        type: 'parent'
    })
});
let $401800e36a580e62$export$aa18130def4b6cb4 = new $5OpyM$restructure.Array($401800e36a580e62$var$FeatureRecord, $5OpyM$restructure.uint16);
let $401800e36a580e62$var$LookupFlags = new $5OpyM$restructure.Struct({
    markAttachmentType: $5OpyM$restructure.uint8,
    flags: new $5OpyM$restructure.Bitfield($5OpyM$restructure.uint8, [
        'rightToLeft',
        'ignoreBaseGlyphs',
        'ignoreLigatures',
        'ignoreMarks',
        'useMarkFilteringSet'
    ])
});
function $401800e36a580e62$export$df0008c6ff2da22a(SubTable) {
    let Lookup = new $5OpyM$restructure.Struct({
        lookupType: $5OpyM$restructure.uint16,
        flags: $401800e36a580e62$var$LookupFlags,
        subTableCount: $5OpyM$restructure.uint16,
        subTables: new $5OpyM$restructure.Array(new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, SubTable), 'subTableCount'),
        markFilteringSet: new $5OpyM$restructure.Optional($5OpyM$restructure.uint16, (t)=>t.flags.flags.useMarkFilteringSet
        )
    });
    return new $5OpyM$restructure.LazyArray(new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, Lookup), $5OpyM$restructure.uint16);
}
let $401800e36a580e62$var$RangeRecord = new $5OpyM$restructure.Struct({
    start: $5OpyM$restructure.uint16,
    end: $5OpyM$restructure.uint16,
    startCoverageIndex: $5OpyM$restructure.uint16
});
let $401800e36a580e62$export$17608c3f81a6111 = new $5OpyM$restructure.VersionedStruct($5OpyM$restructure.uint16, {
    1: {
        glyphCount: $5OpyM$restructure.uint16,
        glyphs: new $5OpyM$restructure.Array($5OpyM$restructure.uint16, 'glyphCount')
    },
    2: {
        rangeCount: $5OpyM$restructure.uint16,
        rangeRecords: new $5OpyM$restructure.Array($401800e36a580e62$var$RangeRecord, 'rangeCount')
    }
});
let $401800e36a580e62$var$ClassRangeRecord = new $5OpyM$restructure.Struct({
    start: $5OpyM$restructure.uint16,
    end: $5OpyM$restructure.uint16,
    class: $5OpyM$restructure.uint16
});
let $401800e36a580e62$export$843d551fbbafef71 = new $5OpyM$restructure.VersionedStruct($5OpyM$restructure.uint16, {
    1: {
        startGlyph: $5OpyM$restructure.uint16,
        glyphCount: $5OpyM$restructure.uint16,
        classValueArray: new $5OpyM$restructure.Array($5OpyM$restructure.uint16, 'glyphCount')
    },
    2: {
        classRangeCount: $5OpyM$restructure.uint16,
        classRangeRecord: new $5OpyM$restructure.Array($401800e36a580e62$var$ClassRangeRecord, 'classRangeCount')
    }
});
let $401800e36a580e62$export$8215d14a63d9fb10 = new $5OpyM$restructure.Struct({
    a: $5OpyM$restructure.uint16,
    b: $5OpyM$restructure.uint16,
    deltaFormat: $5OpyM$restructure.uint16
});
let $401800e36a580e62$var$LookupRecord = new $5OpyM$restructure.Struct({
    sequenceIndex: $5OpyM$restructure.uint16,
    lookupListIndex: $5OpyM$restructure.uint16
});
let $401800e36a580e62$var$Rule = new $5OpyM$restructure.Struct({
    glyphCount: $5OpyM$restructure.uint16,
    lookupCount: $5OpyM$restructure.uint16,
    input: new $5OpyM$restructure.Array($5OpyM$restructure.uint16, (t)=>t.glyphCount - 1
    ),
    lookupRecords: new $5OpyM$restructure.Array($401800e36a580e62$var$LookupRecord, 'lookupCount')
});
let $401800e36a580e62$var$RuleSet = new $5OpyM$restructure.Array(new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$var$Rule), $5OpyM$restructure.uint16);
let $401800e36a580e62$var$ClassRule = new $5OpyM$restructure.Struct({
    glyphCount: $5OpyM$restructure.uint16,
    lookupCount: $5OpyM$restructure.uint16,
    classes: new $5OpyM$restructure.Array($5OpyM$restructure.uint16, (t)=>t.glyphCount - 1
    ),
    lookupRecords: new $5OpyM$restructure.Array($401800e36a580e62$var$LookupRecord, 'lookupCount')
});
let $401800e36a580e62$var$ClassSet = new $5OpyM$restructure.Array(new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$var$ClassRule), $5OpyM$restructure.uint16);
let $401800e36a580e62$export$841858b892ce1f4c = new $5OpyM$restructure.VersionedStruct($5OpyM$restructure.uint16, {
    1: {
        coverage: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$17608c3f81a6111),
        ruleSetCount: $5OpyM$restructure.uint16,
        ruleSets: new $5OpyM$restructure.Array(new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$var$RuleSet), 'ruleSetCount')
    },
    2: {
        coverage: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$17608c3f81a6111),
        classDef: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$843d551fbbafef71),
        classSetCnt: $5OpyM$restructure.uint16,
        classSet: new $5OpyM$restructure.Array(new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$var$ClassSet), 'classSetCnt')
    },
    3: {
        glyphCount: $5OpyM$restructure.uint16,
        lookupCount: $5OpyM$restructure.uint16,
        coverages: new $5OpyM$restructure.Array(new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$17608c3f81a6111), 'glyphCount'),
        lookupRecords: new $5OpyM$restructure.Array($401800e36a580e62$var$LookupRecord, 'lookupCount')
    }
});
let $401800e36a580e62$var$ChainRule = new $5OpyM$restructure.Struct({
    backtrackGlyphCount: $5OpyM$restructure.uint16,
    backtrack: new $5OpyM$restructure.Array($5OpyM$restructure.uint16, 'backtrackGlyphCount'),
    inputGlyphCount: $5OpyM$restructure.uint16,
    input: new $5OpyM$restructure.Array($5OpyM$restructure.uint16, (t)=>t.inputGlyphCount - 1
    ),
    lookaheadGlyphCount: $5OpyM$restructure.uint16,
    lookahead: new $5OpyM$restructure.Array($5OpyM$restructure.uint16, 'lookaheadGlyphCount'),
    lookupCount: $5OpyM$restructure.uint16,
    lookupRecords: new $5OpyM$restructure.Array($401800e36a580e62$var$LookupRecord, 'lookupCount')
});
let $401800e36a580e62$var$ChainRuleSet = new $5OpyM$restructure.Array(new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$var$ChainRule), $5OpyM$restructure.uint16);
let $401800e36a580e62$export$5e6d09e6861162f6 = new $5OpyM$restructure.VersionedStruct($5OpyM$restructure.uint16, {
    1: {
        coverage: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$17608c3f81a6111),
        chainCount: $5OpyM$restructure.uint16,
        chainRuleSets: new $5OpyM$restructure.Array(new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$var$ChainRuleSet), 'chainCount')
    },
    2: {
        coverage: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$17608c3f81a6111),
        backtrackClassDef: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$843d551fbbafef71),
        inputClassDef: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$843d551fbbafef71),
        lookaheadClassDef: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$843d551fbbafef71),
        chainCount: $5OpyM$restructure.uint16,
        chainClassSet: new $5OpyM$restructure.Array(new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$var$ChainRuleSet), 'chainCount')
    },
    3: {
        backtrackGlyphCount: $5OpyM$restructure.uint16,
        backtrackCoverage: new $5OpyM$restructure.Array(new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$17608c3f81a6111), 'backtrackGlyphCount'),
        inputGlyphCount: $5OpyM$restructure.uint16,
        inputCoverage: new $5OpyM$restructure.Array(new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$17608c3f81a6111), 'inputGlyphCount'),
        lookaheadGlyphCount: $5OpyM$restructure.uint16,
        lookaheadCoverage: new $5OpyM$restructure.Array(new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$17608c3f81a6111), 'lookaheadGlyphCount'),
        lookupCount: $5OpyM$restructure.uint16,
        lookupRecords: new $5OpyM$restructure.Array($401800e36a580e62$var$LookupRecord, 'lookupCount')
    }
});
 let $421a2456cdbaa0d8$var$F2DOT14 = new $5OpyM$restructure.Fixed(16, 'BE', 14);
let $421a2456cdbaa0d8$var$RegionAxisCoordinates = new $5OpyM$restructure.Struct({
    startCoord: $421a2456cdbaa0d8$var$F2DOT14,
    peakCoord: $421a2456cdbaa0d8$var$F2DOT14,
    endCoord: $421a2456cdbaa0d8$var$F2DOT14
});
let $421a2456cdbaa0d8$var$VariationRegionList = new $5OpyM$restructure.Struct({
    axisCount: $5OpyM$restructure.uint16,
    regionCount: $5OpyM$restructure.uint16,
    variationRegions: new $5OpyM$restructure.Array(new $5OpyM$restructure.Array($421a2456cdbaa0d8$var$RegionAxisCoordinates, 'axisCount'), 'regionCount')
});
let $421a2456cdbaa0d8$var$DeltaSet = new $5OpyM$restructure.Struct({
    shortDeltas: new $5OpyM$restructure.Array($5OpyM$restructure.int16, (t)=>t.parent.shortDeltaCount
    ),
    regionDeltas: new $5OpyM$restructure.Array($5OpyM$restructure.int8, (t)=>t.parent.regionIndexCount - t.parent.shortDeltaCount
    ),
    deltas: (t)=>t.shortDeltas.concat(t.regionDeltas)
});
let $421a2456cdbaa0d8$var$ItemVariationData = new $5OpyM$restructure.Struct({
    itemCount: $5OpyM$restructure.uint16,
    shortDeltaCount: $5OpyM$restructure.uint16,
    regionIndexCount: $5OpyM$restructure.uint16,
    regionIndexes: new $5OpyM$restructure.Array($5OpyM$restructure.uint16, 'regionIndexCount'),
    deltaSets: new $5OpyM$restructure.Array($421a2456cdbaa0d8$var$DeltaSet, 'itemCount')
});
let $421a2456cdbaa0d8$export$fe1b122a2710f241 = new $5OpyM$restructure.Struct({
    format: $5OpyM$restructure.uint16,
    variationRegionList: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, $421a2456cdbaa0d8$var$VariationRegionList),
    variationDataCount: $5OpyM$restructure.uint16,
    itemVariationData: new $5OpyM$restructure.Array(new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, $421a2456cdbaa0d8$var$ItemVariationData), 'variationDataCount')
});
 let $421a2456cdbaa0d8$var$ConditionTable = new $5OpyM$restructure.VersionedStruct($5OpyM$restructure.uint16, {
    1: {
        axisIndex: $5OpyM$restructure.uint16,
        axisIndex: $5OpyM$restructure.uint16,
        filterRangeMinValue: $421a2456cdbaa0d8$var$F2DOT14,
        filterRangeMaxValue: $421a2456cdbaa0d8$var$F2DOT14
    }
});
let $421a2456cdbaa0d8$var$ConditionSet = new $5OpyM$restructure.Struct({
    conditionCount: $5OpyM$restructure.uint16,
    conditionTable: new $5OpyM$restructure.Array(new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, $421a2456cdbaa0d8$var$ConditionTable), 'conditionCount')
});
let $421a2456cdbaa0d8$var$FeatureTableSubstitutionRecord = new $5OpyM$restructure.Struct({
    featureIndex: $5OpyM$restructure.uint16,
    alternateFeatureTable: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, $401800e36a580e62$export$6e91cf7616333d5, {
        type: 'parent'
    })
});
let $421a2456cdbaa0d8$var$FeatureTableSubstitution = new $5OpyM$restructure.Struct({
    version: $5OpyM$restructure.fixed32,
    substitutionCount: $5OpyM$restructure.uint16,
    substitutions: new $5OpyM$restructure.Array($421a2456cdbaa0d8$var$FeatureTableSubstitutionRecord, 'substitutionCount')
});
let $421a2456cdbaa0d8$var$FeatureVariationRecord = new $5OpyM$restructure.Struct({
    conditionSet: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, $421a2456cdbaa0d8$var$ConditionSet, {
        type: 'parent'
    }),
    featureTableSubstitution: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, $421a2456cdbaa0d8$var$FeatureTableSubstitution, {
        type: 'parent'
    })
});
let $421a2456cdbaa0d8$export$441b70b7971dd419 = new $5OpyM$restructure.Struct({
    majorVersion: $5OpyM$restructure.uint16,
    minorVersion: $5OpyM$restructure.uint16,
    featureVariationRecordCount: $5OpyM$restructure.uint32,
    featureVariationRecords: new $5OpyM$restructure.Array($421a2456cdbaa0d8$var$FeatureVariationRecord, 'featureVariationRecordCount')
});
class $3e41cd50e8921098$var$PredefinedOp {
    constructor(predefinedOps, type){
        this.predefinedOps = predefinedOps;
        this.type = type;
    }
    decode(stream, parent, operands) {
        if (this.predefinedOps[operands[0]]) return this.predefinedOps[operands[0]];
        return this.type.decode(stream, parent, operands);
    }
    size(value, ctx) {
        return this.type.size(value, ctx);
    }
    encode(stream, value, ctx) {
        let index = this.predefinedOps.indexOf(value);
        if (index !== -1) return index;
        return this.type.encode(stream, value, ctx);
    }
}
class $3e41cd50e8921098$var$CFFEncodingVersion extends $5OpyM$restructure.Number {
    constructor(){
        super('UInt8');
    }
    decode(stream) {
        return $5OpyM$restructure.uint8.decode(stream) & 0x7f;
    }
}
let $3e41cd50e8921098$var$Range1 = new $5OpyM$restructure.Struct({
    first: $5OpyM$restructure.uint16,
    nLeft: $5OpyM$restructure.uint8
});
let $3e41cd50e8921098$var$Range2 = new $5OpyM$restructure.Struct({
    first: $5OpyM$restructure.uint16,
    nLeft: $5OpyM$restructure.uint16
});
let $3e41cd50e8921098$var$CFFCustomEncoding = new $5OpyM$restructure.VersionedStruct(new $3e41cd50e8921098$var$CFFEncodingVersion(), {
    0: {
        nCodes: $5OpyM$restructure.uint8,
        codes: new $5OpyM$restructure.Array($5OpyM$restructure.uint8, 'nCodes')
    },
    1: {
        nRanges: $5OpyM$restructure.uint8,
        ranges: new $5OpyM$restructure.Array($3e41cd50e8921098$var$Range1, 'nRanges')
    }
});
let $3e41cd50e8921098$var$CFFEncoding = new $3e41cd50e8921098$var$PredefinedOp([
    $50148a3b88f16e26$export$dee0027060fa13bd,
    $50148a3b88f16e26$export$4f58f497e14a53c3
], new $6631a7581d654814$export$2e2bcd8739ae039($3e41cd50e8921098$var$CFFCustomEncoding, {
    lazy: true
}));
class $3e41cd50e8921098$var$RangeArray extends $5OpyM$restructure.Array {
    decode(stream, parent) {
        let length = resolveLength(this.length, stream, parent);
        let count = 0;
        let res = [];
        while(count < length){
            let range = this.type.decode(stream, parent);
            range.offset = count;
            count += range.nLeft + 1;
            res.push(range);
        }
        return res;
    }
}
let $3e41cd50e8921098$var$CFFCustomCharset = new $5OpyM$restructure.VersionedStruct($5OpyM$restructure.uint8, {
    0: {
        glyphs: new $5OpyM$restructure.Array($5OpyM$restructure.uint16, (t)=>t.parent.CharStrings.length - 1
        )
    },
    1: {
        ranges: new $3e41cd50e8921098$var$RangeArray($3e41cd50e8921098$var$Range1, (t)=>t.parent.CharStrings.length - 1
        )
    },
    2: {
        ranges: new $3e41cd50e8921098$var$RangeArray($3e41cd50e8921098$var$Range2, (t)=>t.parent.CharStrings.length - 1
        )
    }
});
let $3e41cd50e8921098$var$CFFCharset = new $3e41cd50e8921098$var$PredefinedOp([
    $a5fab60a6eadb8ed$export$c33b50336c234f16,
    $a5fab60a6eadb8ed$export$3ed0f9e1fee8d489,
    $a5fab60a6eadb8ed$export$dc28be11139d4120
], new $6631a7581d654814$export$2e2bcd8739ae039($3e41cd50e8921098$var$CFFCustomCharset, {
    lazy: true
}));
let $3e41cd50e8921098$var$FDRange3 = new $5OpyM$restructure.Struct({
    first: $5OpyM$restructure.uint16,
    fd: $5OpyM$restructure.uint8
});
let $3e41cd50e8921098$var$FDRange4 = new $5OpyM$restructure.Struct({
    first: $5OpyM$restructure.uint32,
    fd: $5OpyM$restructure.uint16
});
let $3e41cd50e8921098$var$FDSelect = new $5OpyM$restructure.VersionedStruct($5OpyM$restructure.uint8, {
    0: {
        fds: new $5OpyM$restructure.Array($5OpyM$restructure.uint8, (t)=>t.parent.CharStrings.length
        )
    },
    3: {
        nRanges: $5OpyM$restructure.uint16,
        ranges: new $5OpyM$restructure.Array($3e41cd50e8921098$var$FDRange3, 'nRanges'),
        sentinel: $5OpyM$restructure.uint16
    },
    4: {
        nRanges: $5OpyM$restructure.uint32,
        ranges: new $5OpyM$restructure.Array($3e41cd50e8921098$var$FDRange4, 'nRanges'),
        sentinel: $5OpyM$restructure.uint32
    }
});
let $3e41cd50e8921098$var$ptr = new $6631a7581d654814$export$2e2bcd8739ae039($94c2c7ed7c236891$export$2e2bcd8739ae039);
class $3e41cd50e8921098$var$CFFPrivateOp {
    decode(stream, parent, operands) {
        parent.length = operands[0];
        return $3e41cd50e8921098$var$ptr.decode(stream, parent, [
            operands[1]
        ]);
    }
    size(dict, ctx) {
        return [
            $94c2c7ed7c236891$export$2e2bcd8739ae039.size(dict, ctx, false),
            $3e41cd50e8921098$var$ptr.size(dict, ctx)[0]
        ];
    }
    encode(stream, dict, ctx) {
        return [
            $94c2c7ed7c236891$export$2e2bcd8739ae039.size(dict, ctx, false),
            $3e41cd50e8921098$var$ptr.encode(stream, dict, ctx)[0]
        ];
    }
}
let $3e41cd50e8921098$var$FontDict = new $1694c4b242cd1a66$export$2e2bcd8739ae039([
    [
        18,
        'Private',
        new $3e41cd50e8921098$var$CFFPrivateOp,
        null
    ],
    [
        [
            12,
            38
        ],
        'FontName',
        'sid',
        null
    ],
    [
        [
            12,
            7
        ],
        'FontMatrix',
        'array',
        [
            0.001,
            0,
            0,
            0.001,
            0,
            0
        ]
    ],
    [
        [
            12,
            5
        ],
        'PaintType',
        'number',
        0
    ],
]);
let $3e41cd50e8921098$var$CFFTopDict = new $1694c4b242cd1a66$export$2e2bcd8739ae039([
    [
        [
            12,
            30
        ],
        'ROS',
        [
            'sid',
            'sid',
            'number'
        ],
        null
    ],
    [
        0,
        'version',
        'sid',
        null
    ],
    [
        1,
        'Notice',
        'sid',
        null
    ],
    [
        [
            12,
            0
        ],
        'Copyright',
        'sid',
        null
    ],
    [
        2,
        'FullName',
        'sid',
        null
    ],
    [
        3,
        'FamilyName',
        'sid',
        null
    ],
    [
        4,
        'Weight',
        'sid',
        null
    ],
    [
        [
            12,
            1
        ],
        'isFixedPitch',
        'boolean',
        false
    ],
    [
        [
            12,
            2
        ],
        'ItalicAngle',
        'number',
        0
    ],
    [
        [
            12,
            3
        ],
        'UnderlinePosition',
        'number',
        -100
    ],
    [
        [
            12,
            4
        ],
        'UnderlineThickness',
        'number',
        50
    ],
    [
        [
            12,
            5
        ],
        'PaintType',
        'number',
        0
    ],
    [
        [
            12,
            6
        ],
        'CharstringType',
        'number',
        2
    ],
    [
        [
            12,
            7
        ],
        'FontMatrix',
        'array',
        [
            0.001,
            0,
            0,
            0.001,
            0,
            0
        ]
    ],
    [
        13,
        'UniqueID',
        'number',
        null
    ],
    [
        5,
        'FontBBox',
        'array',
        [
            0,
            0,
            0,
            0
        ]
    ],
    [
        [
            12,
            8
        ],
        'StrokeWidth',
        'number',
        0
    ],
    [
        14,
        'XUID',
        'array',
        null
    ],
    [
        15,
        'charset',
        $3e41cd50e8921098$var$CFFCharset,
        $a5fab60a6eadb8ed$export$c33b50336c234f16
    ],
    [
        16,
        'Encoding',
        $3e41cd50e8921098$var$CFFEncoding,
        $50148a3b88f16e26$export$dee0027060fa13bd
    ],
    [
        17,
        'CharStrings',
        new $6631a7581d654814$export$2e2bcd8739ae039(new $6333f51d822e64a1$export$2e2bcd8739ae039),
        null
    ],
    [
        18,
        'Private',
        new $3e41cd50e8921098$var$CFFPrivateOp,
        null
    ],
    [
        [
            12,
            20
        ],
        'SyntheticBase',
        'number',
        null
    ],
    [
        [
            12,
            21
        ],
        'PostScript',
        'sid',
        null
    ],
    [
        [
            12,
            22
        ],
        'BaseFontName',
        'sid',
        null
    ],
    [
        [
            12,
            23
        ],
        'BaseFontBlend',
        'delta',
        null
    ],
    [
        [
            12,
            31
        ],
        'CIDFontVersion',
        'number',
        0
    ],
    [
        [
            12,
            32
        ],
        'CIDFontRevision',
        'number',
        0
    ],
    [
        [
            12,
            33
        ],
        'CIDFontType',
        'number',
        0
    ],
    [
        [
            12,
            34
        ],
        'CIDCount',
        'number',
        8720
    ],
    [
        [
            12,
            35
        ],
        'UIDBase',
        'number',
        null
    ],
    [
        [
            12,
            37
        ],
        'FDSelect',
        new $6631a7581d654814$export$2e2bcd8739ae039($3e41cd50e8921098$var$FDSelect),
        null
    ],
    [
        [
            12,
            36
        ],
        'FDArray',
        new $6631a7581d654814$export$2e2bcd8739ae039(new $6333f51d822e64a1$export$2e2bcd8739ae039($3e41cd50e8921098$var$FontDict)),
        null
    ],
    [
        [
            12,
            38
        ],
        'FontName',
        'sid',
        null
    ]
]);
let $3e41cd50e8921098$var$VariationStore = new $5OpyM$restructure.Struct({
    length: $5OpyM$restructure.uint16,
    itemVariationStore: $421a2456cdbaa0d8$export$fe1b122a2710f241
});
let $3e41cd50e8921098$var$CFF2TopDict = new $1694c4b242cd1a66$export$2e2bcd8739ae039([
    [
        [
            12,
            7
        ],
        'FontMatrix',
        'array',
        [
            0.001,
            0,
            0,
            0.001,
            0,
            0
        ]
    ],
    [
        17,
        'CharStrings',
        new $6631a7581d654814$export$2e2bcd8739ae039(new $6333f51d822e64a1$export$2e2bcd8739ae039),
        null
    ],
    [
        [
            12,
            37
        ],
        'FDSelect',
        new $6631a7581d654814$export$2e2bcd8739ae039($3e41cd50e8921098$var$FDSelect),
        null
    ],
    [
        [
            12,
            36
        ],
        'FDArray',
        new $6631a7581d654814$export$2e2bcd8739ae039(new $6333f51d822e64a1$export$2e2bcd8739ae039($3e41cd50e8921098$var$FontDict)),
        null
    ],
    [
        24,
        'vstore',
        new $6631a7581d654814$export$2e2bcd8739ae039($3e41cd50e8921098$var$VariationStore),
        null
    ],
    [
        25,
        'maxstack',
        'number',
        193
    ]
]);
let $3e41cd50e8921098$var$CFFTop = new $5OpyM$restructure.VersionedStruct($5OpyM$restructure.fixed16, {
    1: {
        hdrSize: $5OpyM$restructure.uint8,
        offSize: $5OpyM$restructure.uint8,
        nameIndex: new $6333f51d822e64a1$export$2e2bcd8739ae039(new $5OpyM$restructure.String('length')),
        topDictIndex: new $6333f51d822e64a1$export$2e2bcd8739ae039($3e41cd50e8921098$var$CFFTopDict),
        stringIndex: new $6333f51d822e64a1$export$2e2bcd8739ae039(new $5OpyM$restructure.String('length')),
        globalSubrIndex: new $6333f51d822e64a1$export$2e2bcd8739ae039
    },
    2: {
        hdrSize: $5OpyM$restructure.uint8,
        length: $5OpyM$restructure.uint16,
        topDict: $3e41cd50e8921098$var$CFF2TopDict,
        globalSubrIndex: new $6333f51d822e64a1$export$2e2bcd8739ae039
    }
});
var $3e41cd50e8921098$export$2e2bcd8739ae039 = $3e41cd50e8921098$var$CFFTop;
class $8770fc79268fa3c2$var$CFFFont {
    constructor(stream){
        this.stream = stream;
        this.decode();
    }
    static decode(stream) {
        return new $8770fc79268fa3c2$var$CFFFont(stream);
    }
    decode() {
        this.stream.pos;
        let top = $3e41cd50e8921098$export$2e2bcd8739ae039.decode(this.stream);
        for(let key in top){
            let val = top[key];
            this[key] = val;
        }
        if (this.version < 2) {
            if (this.topDictIndex.length !== 1) throw new Error("Only a single font is allowed in CFF");
            this.topDict = this.topDictIndex[0];
        }
        this.isCIDFont = this.topDict.ROS != null;
        return this;
    }
    string(sid) {
        if (this.version >= 2) return null;
        if (sid < $276d3ff37a4362c9$export$2e2bcd8739ae039.length) return $276d3ff37a4362c9$export$2e2bcd8739ae039[sid];
        return this.stringIndex[sid - $276d3ff37a4362c9$export$2e2bcd8739ae039.length];
    }
    get postscriptName() {
        if (this.version < 2) return this.nameIndex[0];
        return null;
    }
    get fullName() {
        return this.string(this.topDict.FullName);
    }
    get familyName() {
        return this.string(this.topDict.FamilyName);
    }
    getCharString(glyph) {
        this.stream.pos = this.topDict.CharStrings[glyph].offset;
        return this.stream.readBuffer(this.topDict.CharStrings[glyph].length);
    }
    getGlyphName(gid) {
        if (this.version >= 2) return null;
        if (this.isCIDFont) return null;
        let { charset: charset  } = this.topDict;
        if (Array.isArray(charset)) return charset[gid];
        if (gid === 0) return '.notdef';
        gid -= 1;
        switch(charset.version){
            case 0:
                return this.string(charset.glyphs[gid]);
            case 1:
            case 2:
                for(let i = 0; i < charset.ranges.length; i++){
                    let range = charset.ranges[i];
                    if (range.offset <= gid && gid <= range.offset + range.nLeft) return this.string(range.first + (gid - range.offset));
                }
                break;
        }
        return null;
    }
    fdForGlyph(gid) {
        if (!this.topDict.FDSelect) return null;
        switch(this.topDict.FDSelect.version){
            case 0:
                return this.topDict.FDSelect.fds[gid];
            case 3:
            case 4:
                let { ranges: ranges  } = this.topDict.FDSelect;
                let low = 0;
                let high = ranges.length - 1;
                while(low <= high){
                    let mid = low + high >> 1;
                    if (gid < ranges[mid].first) high = mid - 1;
                    else if (mid < high && gid >= ranges[mid + 1].first) low = mid + 1;
                    else return ranges[mid].fd;
                }
            default:
                throw new Error(`Unknown FDSelect version: ${this.topDict.FDSelect.version}`);
        }
    }
    privateDictForGlyph(gid) {
        if (this.topDict.FDSelect) {
            let fd = this.fdForGlyph(gid);
            if (this.topDict.FDArray[fd]) return this.topDict.FDArray[fd].Private;
            return null;
        }
        if (this.version < 2) return this.topDict.Private;
        return this.topDict.FDArray[0].Private;
    }
}
var $8770fc79268fa3c2$export$2e2bcd8739ae039 = $8770fc79268fa3c2$var$CFFFont;
let $79f2eb50e4490e51$var$VerticalOrigin = new $5OpyM$restructure.Struct({
    glyphIndex: $5OpyM$restructure.uint16,
    vertOriginY: $5OpyM$restructure.int16
});
var $79f2eb50e4490e51$export$2e2bcd8739ae039 = new $5OpyM$restructure.Struct({
    majorVersion: $5OpyM$restructure.uint16,
    minorVersion: $5OpyM$restructure.uint16,
    defaultVertOriginY: $5OpyM$restructure.int16,
    numVertOriginYMetrics: $5OpyM$restructure.uint16,
    metrics: new $5OpyM$restructure.Array($79f2eb50e4490e51$var$VerticalOrigin, 'numVertOriginYMetrics')
});
let $9dd3c2ae0a322c53$export$16b227cb15d716a0 = new $5OpyM$restructure.Struct({
    height: $5OpyM$restructure.uint8,
    width: $5OpyM$restructure.uint8,
    horiBearingX: $5OpyM$restructure.int8,
    horiBearingY: $5OpyM$restructure.int8,
    horiAdvance: $5OpyM$restructure.uint8,
    vertBearingX: $5OpyM$restructure.int8,
    vertBearingY: $5OpyM$restructure.int8,
    vertAdvance: $5OpyM$restructure.uint8
});
let $9dd3c2ae0a322c53$export$62c53e75f69bfe12 = new $5OpyM$restructure.Struct({
    height: $5OpyM$restructure.uint8,
    width: $5OpyM$restructure.uint8,
    bearingX: $5OpyM$restructure.int8,
    bearingY: $5OpyM$restructure.int8,
    advance: $5OpyM$restructure.uint8
});
let $9dd3c2ae0a322c53$var$EBDTComponent = new $5OpyM$restructure.Struct({
    glyph: $5OpyM$restructure.uint16,
    xOffset: $5OpyM$restructure.int8,
    yOffset: $5OpyM$restructure.int8
});
class $9dd3c2ae0a322c53$var$ByteAligned {
}
class $9dd3c2ae0a322c53$var$BitAligned {
}
new $5OpyM$restructure.VersionedStruct('version', {
    1: {
        metrics: $9dd3c2ae0a322c53$export$62c53e75f69bfe12,
        data: $9dd3c2ae0a322c53$var$ByteAligned
    },
    2: {
        metrics: $9dd3c2ae0a322c53$export$62c53e75f69bfe12,
        data: $9dd3c2ae0a322c53$var$BitAligned
    },
    5: {
        data: $9dd3c2ae0a322c53$var$BitAligned
    },
    6: {
        metrics: $9dd3c2ae0a322c53$export$16b227cb15d716a0,
        data: $9dd3c2ae0a322c53$var$ByteAligned
    },
    7: {
        metrics: $9dd3c2ae0a322c53$export$16b227cb15d716a0,
        data: $9dd3c2ae0a322c53$var$BitAligned
    },
    8: {
        metrics: $9dd3c2ae0a322c53$export$62c53e75f69bfe12,
        pad: new $5OpyM$restructure.Reserved($5OpyM$restructure.uint8),
        numComponents: $5OpyM$restructure.uint16,
        components: new $5OpyM$restructure.Array($9dd3c2ae0a322c53$var$EBDTComponent, 'numComponents')
    },
    9: {
        metrics: $9dd3c2ae0a322c53$export$16b227cb15d716a0,
        pad: new $5OpyM$restructure.Reserved($5OpyM$restructure.uint8),
        numComponents: $5OpyM$restructure.uint16,
        components: new $5OpyM$restructure.Array($9dd3c2ae0a322c53$var$EBDTComponent, 'numComponents')
    },
    17: {
        metrics: $9dd3c2ae0a322c53$export$62c53e75f69bfe12,
        dataLen: $5OpyM$restructure.uint32,
        data: new $5OpyM$restructure.Buffer('dataLen')
    },
    18: {
        metrics: $9dd3c2ae0a322c53$export$16b227cb15d716a0,
        dataLen: $5OpyM$restructure.uint32,
        data: new $5OpyM$restructure.Buffer('dataLen')
    },
    19: {
        dataLen: $5OpyM$restructure.uint32,
        data: new $5OpyM$restructure.Buffer('dataLen')
    }
});
let $234c291eab07e474$var$SBitLineMetrics = new $5OpyM$restructure.Struct({
    ascender: $5OpyM$restructure.int8,
    descender: $5OpyM$restructure.int8,
    widthMax: $5OpyM$restructure.uint8,
    caretSlopeNumerator: $5OpyM$restructure.int8,
    caretSlopeDenominator: $5OpyM$restructure.int8,
    caretOffset: $5OpyM$restructure.int8,
    minOriginSB: $5OpyM$restructure.int8,
    minAdvanceSB: $5OpyM$restructure.int8,
    maxBeforeBL: $5OpyM$restructure.int8,
    minAfterBL: $5OpyM$restructure.int8,
    pad: new $5OpyM$restructure.Reserved($5OpyM$restructure.int8, 2)
});
let $234c291eab07e474$var$CodeOffsetPair = new $5OpyM$restructure.Struct({
    glyphCode: $5OpyM$restructure.uint16,
    offset: $5OpyM$restructure.uint16
});
let $234c291eab07e474$var$IndexSubtable = new $5OpyM$restructure.VersionedStruct($5OpyM$restructure.uint16, {
    header: {
        imageFormat: $5OpyM$restructure.uint16,
        imageDataOffset: $5OpyM$restructure.uint32
    },
    1: {
        offsetArray: new $5OpyM$restructure.Array($5OpyM$restructure.uint32, (t)=>t.parent.lastGlyphIndex - t.parent.firstGlyphIndex + 1
        )
    },
    2: {
        imageSize: $5OpyM$restructure.uint32,
        bigMetrics: $9dd3c2ae0a322c53$export$16b227cb15d716a0
    },
    3: {
        offsetArray: new $5OpyM$restructure.Array($5OpyM$restructure.uint16, (t)=>t.parent.lastGlyphIndex - t.parent.firstGlyphIndex + 1
        )
    },
    4: {
        numGlyphs: $5OpyM$restructure.uint32,
        glyphArray: new $5OpyM$restructure.Array($234c291eab07e474$var$CodeOffsetPair, (t)=>t.numGlyphs + 1
        )
    },
    5: {
        imageSize: $5OpyM$restructure.uint32,
        bigMetrics: $9dd3c2ae0a322c53$export$16b227cb15d716a0,
        numGlyphs: $5OpyM$restructure.uint32,
        glyphCodeArray: new $5OpyM$restructure.Array($5OpyM$restructure.uint16, 'numGlyphs')
    }
});
let $234c291eab07e474$var$IndexSubtableArray = new $5OpyM$restructure.Struct({
    firstGlyphIndex: $5OpyM$restructure.uint16,
    lastGlyphIndex: $5OpyM$restructure.uint16,
    subtable: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, $234c291eab07e474$var$IndexSubtable)
});
let $234c291eab07e474$var$BitmapSizeTable = new $5OpyM$restructure.Struct({
    indexSubTableArray: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, new $5OpyM$restructure.Array($234c291eab07e474$var$IndexSubtableArray, 1), {
        type: 'parent'
    }),
    indexTablesSize: $5OpyM$restructure.uint32,
    numberOfIndexSubTables: $5OpyM$restructure.uint32,
    colorRef: $5OpyM$restructure.uint32,
    hori: $234c291eab07e474$var$SBitLineMetrics,
    vert: $234c291eab07e474$var$SBitLineMetrics,
    startGlyphIndex: $5OpyM$restructure.uint16,
    endGlyphIndex: $5OpyM$restructure.uint16,
    ppemX: $5OpyM$restructure.uint8,
    ppemY: $5OpyM$restructure.uint8,
    bitDepth: $5OpyM$restructure.uint8,
    flags: new $5OpyM$restructure.Bitfield($5OpyM$restructure.uint8, [
        'horizontal',
        'vertical'
    ])
});
var $234c291eab07e474$export$2e2bcd8739ae039 = new $5OpyM$restructure.Struct({
    version: $5OpyM$restructure.uint32,
    numSizes: $5OpyM$restructure.uint32,
    sizes: new $5OpyM$restructure.Array($234c291eab07e474$var$BitmapSizeTable, 'numSizes')
});
let $55d04373f0cac44e$var$ImageTable = new $5OpyM$restructure.Struct({
    ppem: $5OpyM$restructure.uint16,
    resolution: $5OpyM$restructure.uint16,
    imageOffsets: new $5OpyM$restructure.Array(new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, 'void'), (t)=>t.parent.parent.maxp.numGlyphs + 1
    )
});
var
$55d04373f0cac44e$export$2e2bcd8739ae039 = new $5OpyM$restructure.Struct({
    version: $5OpyM$restructure.uint16,
    flags: new $5OpyM$restructure.Bitfield($5OpyM$restructure.uint16, [
        'renderOutlines'
    ]),
    numImgTables: $5OpyM$restructure.uint32,
    imageTables: new $5OpyM$restructure.Array(new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, $55d04373f0cac44e$var$ImageTable), 'numImgTables')
});
let $0e59eccfa3005d9d$var$LayerRecord = new $5OpyM$restructure.Struct({
    gid: $5OpyM$restructure.uint16,
    paletteIndex: $5OpyM$restructure.uint16
});
let $0e59eccfa3005d9d$var$BaseGlyphRecord = new $5OpyM$restructure.Struct({
    gid: $5OpyM$restructure.uint16,
    firstLayerIndex: $5OpyM$restructure.uint16,
    numLayers: $5OpyM$restructure.uint16
});
var $0e59eccfa3005d9d$export$2e2bcd8739ae039 = new $5OpyM$restructure.Struct({
    version: $5OpyM$restructure.uint16,
    numBaseGlyphRecords: $5OpyM$restructure.uint16,
    baseGlyphRecord: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, new $5OpyM$restructure.Array($0e59eccfa3005d9d$var$BaseGlyphRecord, 'numBaseGlyphRecords')),
    layerRecords: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, new $5OpyM$restructure.Array($0e59eccfa3005d9d$var$LayerRecord, 'numLayerRecords'), {
        lazy: true
    }),
    numLayerRecords: $5OpyM$restructure.uint16
});
let $23affa36a12f7915$var$ColorRecord = new $5OpyM$restructure.Struct({
    blue: $5OpyM$restructure.uint8,
    green: $5OpyM$restructure.uint8,
    red: $5OpyM$restructure.uint8,
    alpha: $5OpyM$restructure.uint8
});
var $23affa36a12f7915$export$2e2bcd8739ae039 = new $5OpyM$restructure.VersionedStruct($5OpyM$restructure.uint16, {
    header: {
        numPaletteEntries: $5OpyM$restructure.uint16,
        numPalettes: $5OpyM$restructure.uint16,
        numColorRecords: $5OpyM$restructure.uint16,
        colorRecords: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, new $5OpyM$restructure.Array($23affa36a12f7915$var$ColorRecord, 'numColorRecords')),
        colorRecordIndices: new $5OpyM$restructure.Array($5OpyM$restructure.uint16, 'numPalettes')
    },
    0: {},
    1: {
        offsetPaletteTypeArray: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, new $5OpyM$restructure.Array($5OpyM$restructure.uint32, 'numPalettes')),
        offsetPaletteLabelArray: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, new $5OpyM$restructure.Array($5OpyM$restructure.uint16, 'numPalettes')),
        offsetPaletteEntryLabelArray: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, new $5OpyM$restructure.Array($5OpyM$restructure.uint16, 'numPaletteEntries'))
    }
});
let $9fffe61eb0785f74$var$BaseCoord = new $5OpyM$restructure.VersionedStruct($5OpyM$restructure.uint16, {
    1: {
        coordinate: $5OpyM$restructure.int16
    },
    2: {
        coordinate: $5OpyM$restructure.int16,
        referenceGlyph: $5OpyM$restructure.uint16,
        baseCoordPoint: $5OpyM$restructure.uint16
    },
    3: {
        coordinate: $5OpyM$restructure.int16,
        deviceTable: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$8215d14a63d9fb10)
    }
});
let $9fffe61eb0785f74$var$BaseValues = new $5OpyM$restructure.Struct({
    defaultIndex: $5OpyM$restructure.uint16,
    baseCoordCount: $5OpyM$restructure.uint16,
    baseCoords: new $5OpyM$restructure.Array(new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $9fffe61eb0785f74$var$BaseCoord), 'baseCoordCount')
});
let $9fffe61eb0785f74$var$FeatMinMaxRecord = new $5OpyM$restructure.Struct({
    tag: new $5OpyM$restructure.String(4),
    minCoord: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $9fffe61eb0785f74$var$BaseCoord, {
        type: 'parent'
    }),
    maxCoord: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $9fffe61eb0785f74$var$BaseCoord, {
        type: 'parent'
    })
});
let $9fffe61eb0785f74$var$MinMax = new $5OpyM$restructure.Struct({
    minCoord: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $9fffe61eb0785f74$var$BaseCoord),
    maxCoord: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $9fffe61eb0785f74$var$BaseCoord),
    featMinMaxCount: $5OpyM$restructure.uint16,
    featMinMaxRecords: new $5OpyM$restructure.Array($9fffe61eb0785f74$var$FeatMinMaxRecord, 'featMinMaxCount')
});
let $9fffe61eb0785f74$var$BaseLangSysRecord = new $5OpyM$restructure.Struct({
    tag: new $5OpyM$restructure.String(4),
    minMax: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $9fffe61eb0785f74$var$MinMax, {
        type: 'parent'
    })
});
let $9fffe61eb0785f74$var$BaseScript = new $5OpyM$restructure.Struct({
    baseValues: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $9fffe61eb0785f74$var$BaseValues),
    defaultMinMax: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $9fffe61eb0785f74$var$MinMax),
    baseLangSysCount: $5OpyM$restructure.uint16,
    baseLangSysRecords: new $5OpyM$restructure.Array($9fffe61eb0785f74$var$BaseLangSysRecord, 'baseLangSysCount')
});
let $9fffe61eb0785f74$var$BaseScriptRecord = new $5OpyM$restructure.Struct({
    tag: new $5OpyM$restructure.String(4),
    script: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $9fffe61eb0785f74$var$BaseScript, {
        type: 'parent'
    })
});
let $9fffe61eb0785f74$var$BaseScriptList = new $5OpyM$restructure.Array($9fffe61eb0785f74$var$BaseScriptRecord, $5OpyM$restructure.uint16);
let $9fffe61eb0785f74$var$BaseTagList = new $5OpyM$restructure.Array(new $5OpyM$restructure.String(4), $5OpyM$restructure.uint16);
let $9fffe61eb0785f74$var$Axis = new $5OpyM$restructure.Struct({
    baseTagList: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $9fffe61eb0785f74$var$BaseTagList),
    baseScriptList: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $9fffe61eb0785f74$var$BaseScriptList)
});
var $9fffe61eb0785f74$export$2e2bcd8739ae039 = new $5OpyM$restructure.VersionedStruct($5OpyM$restructure.uint32, {
    header: {
        horizAxis: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $9fffe61eb0785f74$var$Axis),
        vertAxis: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $9fffe61eb0785f74$var$Axis)
    },
    0x00010000: {},
    0x00010001: {
        itemVariationStore: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, $421a2456cdbaa0d8$export$fe1b122a2710f241)
    }
});
let $418face38567ee6e$var$AttachPoint = new $5OpyM$restructure.Array($5OpyM$restructure.uint16, $5OpyM$restructure.uint16);
let $418face38567ee6e$var$AttachList = new $5OpyM$restructure.Struct({
    coverage: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$17608c3f81a6111),
    glyphCount: $5OpyM$restructure.uint16,
    attachPoints: new $5OpyM$restructure.Array(new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $418face38567ee6e$var$AttachPoint), 'glyphCount')
});
let $418face38567ee6e$var$CaretValue = new $5OpyM$restructure.VersionedStruct($5OpyM$restructure.uint16, {
    1: {
        coordinate: $5OpyM$restructure.int16
    },
    2: {
        caretValuePoint: $5OpyM$restructure.uint16
    },
    3: {
        coordinate: $5OpyM$restructure.int16,
        deviceTable: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$8215d14a63d9fb10)
    }
});
let $418face38567ee6e$var$LigGlyph = new $5OpyM$restructure.Array(new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $418face38567ee6e$var$CaretValue), $5OpyM$restructure.uint16);
let $418face38567ee6e$var$LigCaretList = new $5OpyM$restructure.Struct({
    coverage: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$17608c3f81a6111),
    ligGlyphCount: $5OpyM$restructure.uint16,
    ligGlyphs: new $5OpyM$restructure.Array(new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $418face38567ee6e$var$LigGlyph), 'ligGlyphCount')
});
let $418face38567ee6e$var$MarkGlyphSetsDef = new $5OpyM$restructure.Struct({
    markSetTableFormat: $5OpyM$restructure.uint16,
    markSetCount: $5OpyM$restructure.uint16,
    coverage: new $5OpyM$restructure.Array(new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, $401800e36a580e62$export$17608c3f81a6111), 'markSetCount')
});
var $418face38567ee6e$export$2e2bcd8739ae039 = new $5OpyM$restructure.VersionedStruct($5OpyM$restructure.uint32, {
    header: {
        glyphClassDef: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$843d551fbbafef71),
        attachList: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $418face38567ee6e$var$AttachList),
        ligCaretList: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $418face38567ee6e$var$LigCaretList),
        markAttachClassDef: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$843d551fbbafef71)
    },
    0x00010000: {},
    0x00010002: {
        markGlyphSetsDef: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $418face38567ee6e$var$MarkGlyphSetsDef)
    },
    0x00010003: {
        markGlyphSetsDef: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $418face38567ee6e$var$MarkGlyphSetsDef),
        itemVariationStore: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, $421a2456cdbaa0d8$export$fe1b122a2710f241)
    }
});
let $010e157f6d8a40e9$var$ValueFormat = new $5OpyM$restructure.Bitfield($5OpyM$restructure.uint16, [
    'xPlacement',
    'yPlacement',
    'xAdvance',
    'yAdvance',
    'xPlaDevice',
    'yPlaDevice',
    'xAdvDevice',
    'yAdvDevice'
]);
let $010e157f6d8a40e9$var$types = {
    xPlacement: $5OpyM$restructure.int16,
    yPlacement: $5OpyM$restructure.int16,
    xAdvance: $5OpyM$restructure.int16,
    yAdvance: $5OpyM$restructure.int16,
    xPlaDevice: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$8215d14a63d9fb10, {
        type: 'global',
        relativeTo: (ctx)=>ctx.rel
    }),
    yPlaDevice: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$8215d14a63d9fb10, {
        type: 'global',
        relativeTo: (ctx)=>ctx.rel
    }),
    xAdvDevice: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$8215d14a63d9fb10, {
        type: 'global',
        relativeTo: (ctx)=>ctx.rel
    }),
    yAdvDevice: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$8215d14a63d9fb10, {
        type: 'global',
        relativeTo: (ctx)=>ctx.rel
    })
};
class $010e157f6d8a40e9$var$ValueRecord {
    constructor(key = 'valueFormat'){
        this.key = key;
    }
    buildStruct(parent) {
        let struct = parent;
        while(!struct[this.key] && struct.parent)struct = struct.parent;
        if (!struct[this.key]) return;
        let fields = {};
        fields.rel = ()=>struct._startOffset
        ;
        let format = struct[this.key];
        for(let key in format)if (format[key]) fields[key] = $010e157f6d8a40e9$var$types[key];
        return new $5OpyM$restructure.Struct(fields);
    }
    size(val, ctx) {
        return this.buildStruct(ctx).size(val, ctx);
    }
    decode(stream, parent) {
        let res = this.buildStruct(parent).decode(stream, parent);
        delete res.rel;
        return res;
    }
}
let $010e157f6d8a40e9$var$PairValueRecord = new $5OpyM$restructure.Struct({
    secondGlyph: $5OpyM$restructure.uint16,
    value1: new $010e157f6d8a40e9$var$ValueRecord('valueFormat1'),
    value2: new $010e157f6d8a40e9$var$ValueRecord('valueFormat2')
});
let $010e157f6d8a40e9$var$PairSet = new $5OpyM$restructure.Array($010e157f6d8a40e9$var$PairValueRecord, $5OpyM$restructure.uint16);
let $010e157f6d8a40e9$var$Class2Record = new $5OpyM$restructure.Struct({
    value1: new $010e157f6d8a40e9$var$ValueRecord('valueFormat1'),
    value2: new $010e157f6d8a40e9$var$ValueRecord('valueFormat2')
});
let $010e157f6d8a40e9$var$Anchor = new $5OpyM$restructure.VersionedStruct($5OpyM$restructure.uint16, {
    1: {
        xCoordinate: $5OpyM$restructure.int16,
        yCoordinate: $5OpyM$restructure.int16
    },
    2: {
        xCoordinate: $5OpyM$restructure.int16,
        yCoordinate: $5OpyM$restructure.int16,
        anchorPoint: $5OpyM$restructure.uint16
    },
    3: {
        xCoordinate: $5OpyM$restructure.int16,
        yCoordinate: $5OpyM$restructure.int16,
        xDeviceTable: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$8215d14a63d9fb10),
        yDeviceTable: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$8215d14a63d9fb10)
    }
});
let $010e157f6d8a40e9$var$EntryExitRecord = new $5OpyM$restructure.Struct({
    entryAnchor: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $010e157f6d8a40e9$var$Anchor, {
        type: 'parent'
    }),
    exitAnchor: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $010e157f6d8a40e9$var$Anchor, {
        type: 'parent'
    })
});
let $010e157f6d8a40e9$var$MarkRecord = new $5OpyM$restructure.Struct({
    class: $5OpyM$restructure.uint16,
    markAnchor: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $010e157f6d8a40e9$var$Anchor, {
        type: 'parent'
    })
});
let $010e157f6d8a40e9$var$MarkArray = new $5OpyM$restructure.Array($010e157f6d8a40e9$var$MarkRecord, $5OpyM$restructure.uint16);
let $010e157f6d8a40e9$var$BaseRecord = new $5OpyM$restructure.Array(new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $010e157f6d8a40e9$var$Anchor), (t)=>t.parent.classCount
);
let $010e157f6d8a40e9$var$BaseArray = new $5OpyM$restructure.Array($010e157f6d8a40e9$var$BaseRecord, $5OpyM$restructure.uint16);
let $010e157f6d8a40e9$var$ComponentRecord = new $5OpyM$restructure.Array(new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $010e157f6d8a40e9$var$Anchor), (t)=>t.parent.parent.classCount
);
let $010e157f6d8a40e9$var$LigatureAttach = new $5OpyM$restructure.Array($010e157f6d8a40e9$var$ComponentRecord, $5OpyM$restructure.uint16);
let $010e157f6d8a40e9$var$LigatureArray = new $5OpyM$restructure.Array(new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $010e157f6d8a40e9$var$LigatureAttach), $5OpyM$restructure.uint16);
let $010e157f6d8a40e9$export$73a8cfb19cd43a0f = new $5OpyM$restructure.VersionedStruct('lookupType', {
    1: new $5OpyM$restructure.VersionedStruct($5OpyM$restructure.uint16, {
        1: {
            coverage: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$17608c3f81a6111),
            valueFormat: $010e157f6d8a40e9$var$ValueFormat,
            value: new $010e157f6d8a40e9$var$ValueRecord()
        },
        2: {
            coverage: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$17608c3f81a6111),
            valueFormat: $010e157f6d8a40e9$var$ValueFormat,
            valueCount: $5OpyM$restructure.uint16,
            values: new $5OpyM$restructure.LazyArray(new $010e157f6d8a40e9$var$ValueRecord(), 'valueCount')
        }
    }),
    2: new $5OpyM$restructure.VersionedStruct($5OpyM$restructure.uint16, {
        1: {
            coverage: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$17608c3f81a6111),
            valueFormat1: $010e157f6d8a40e9$var$ValueFormat,
            valueFormat2: $010e157f6d8a40e9$var$ValueFormat,
            pairSetCount: $5OpyM$restructure.uint16,
            pairSets: new $5OpyM$restructure.LazyArray(new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $010e157f6d8a40e9$var$PairSet), 'pairSetCount')
        },
        2: {
            coverage: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$17608c3f81a6111),
            valueFormat1: $010e157f6d8a40e9$var$ValueFormat,
            valueFormat2: $010e157f6d8a40e9$var$ValueFormat,
            classDef1: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$843d551fbbafef71),
            classDef2: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$843d551fbbafef71),
            class1Count: $5OpyM$restructure.uint16,
            class2Count: $5OpyM$restructure.uint16,
            classRecords: new $5OpyM$restructure.LazyArray(new $5OpyM$restructure.LazyArray($010e157f6d8a40e9$var$Class2Record, 'class2Count'), 'class1Count')
        }
    }),
    3: {
        format: $5OpyM$restructure.uint16,
        coverage: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$17608c3f81a6111),
        entryExitCount: $5OpyM$restructure.uint16,
        entryExitRecords: new $5OpyM$restructure.Array($010e157f6d8a40e9$var$EntryExitRecord, 'entryExitCount')
    },
    4: {
        format: $5OpyM$restructure.uint16,
        markCoverage: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$17608c3f81a6111),
        baseCoverage: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$17608c3f81a6111),
        classCount: $5OpyM$restructure.uint16,
        markArray: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $010e157f6d8a40e9$var$MarkArray),
        baseArray: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $010e157f6d8a40e9$var$BaseArray)
    },
    5: {
        format: $5OpyM$restructure.uint16,
        markCoverage: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$17608c3f81a6111),
        ligatureCoverage: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$17608c3f81a6111),
        classCount: $5OpyM$restructure.uint16,
        markArray: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $010e157f6d8a40e9$var$MarkArray),
        ligatureArray: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $010e157f6d8a40e9$var$LigatureArray)
    },
    6: {
        format: $5OpyM$restructure.uint16,
        mark1Coverage: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$17608c3f81a6111),
        mark2Coverage: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$17608c3f81a6111),
        classCount: $5OpyM$restructure.uint16,
        mark1Array: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $010e157f6d8a40e9$var$MarkArray),
        mark2Array: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $010e157f6d8a40e9$var$BaseArray)
    },
    7: $401800e36a580e62$export$841858b892ce1f4c,
    8: $401800e36a580e62$export$5e6d09e6861162f6,
    9: {
        posFormat: $5OpyM$restructure.uint16,
        lookupType: $5OpyM$restructure.uint16,
        extension: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, null)
    }
});
$010e157f6d8a40e9$export$73a8cfb19cd43a0f.versions[9].extension.type = $010e157f6d8a40e9$export$73a8cfb19cd43a0f;
var $010e157f6d8a40e9$export$2e2bcd8739ae039 = new $5OpyM$restructure.VersionedStruct($5OpyM$restructure.uint32, {
    header: {
        scriptList: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$3e15fc05ce864229),
        featureList: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$aa18130def4b6cb4),
        lookupList: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, new $401800e36a580e62$export$df0008c6ff2da22a($010e157f6d8a40e9$export$73a8cfb19cd43a0f))
    },
    0x00010000: {},
    0x00010001: {
        featureVariations: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, $421a2456cdbaa0d8$export$441b70b7971dd419)
    }
});
let $7176ea6bb7dcf1c6$var$Sequence = new $5OpyM$restructure.Array($5OpyM$restructure.uint16, $5OpyM$restructure.uint16);
let $7176ea6bb7dcf1c6$var$AlternateSet = $7176ea6bb7dcf1c6$var$Sequence;
let $7176ea6bb7dcf1c6$var$Ligature = new $5OpyM$restructure.Struct({
    glyph: $5OpyM$restructure.uint16,
    compCount: $5OpyM$restructure.uint16,
    components: new $5OpyM$restructure.Array($5OpyM$restructure.uint16, (t)=>t.compCount - 1
    )
});
let $7176ea6bb7dcf1c6$var$LigatureSet = new $5OpyM$restructure.Array(new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $7176ea6bb7dcf1c6$var$Ligature), $5OpyM$restructure.uint16);
let $7176ea6bb7dcf1c6$var$GSUBLookup = new $5OpyM$restructure.VersionedStruct('lookupType', {
    1: new $5OpyM$restructure.VersionedStruct($5OpyM$restructure.uint16, {
        1: {
            coverage: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$17608c3f81a6111),
            deltaGlyphID: $5OpyM$restructure.int16
        },
        2: {
            coverage: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$17608c3f81a6111),
            glyphCount: $5OpyM$restructure.uint16,
            substitute: new $5OpyM$restructure.LazyArray($5OpyM$restructure.uint16, 'glyphCount')
        }
    }),
    2: {
        substFormat: $5OpyM$restructure.uint16,
        coverage: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$17608c3f81a6111),
        count: $5OpyM$restructure.uint16,
        sequences: new $5OpyM$restructure.LazyArray(new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $7176ea6bb7dcf1c6$var$Sequence), 'count')
    },
    3: {
        substFormat: $5OpyM$restructure.uint16,
        coverage: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$17608c3f81a6111),
        count: $5OpyM$restructure.uint16,
        alternateSet: new $5OpyM$restructure.LazyArray(new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $7176ea6bb7dcf1c6$var$AlternateSet), 'count')
    },
    4: {
        substFormat: $5OpyM$restructure.uint16,
        coverage: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$17608c3f81a6111),
        count: $5OpyM$restructure.uint16,
        ligatureSets: new $5OpyM$restructure.LazyArray(new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $7176ea6bb7dcf1c6$var$LigatureSet), 'count')
    },
    5: $401800e36a580e62$export$841858b892ce1f4c,
    6: $401800e36a580e62$export$5e6d09e6861162f6,
    7: {
        substFormat: $5OpyM$restructure.uint16,
        lookupType: $5OpyM$restructure.uint16,
        extension: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, null)
    },
    8: {
        substFormat: $5OpyM$restructure.uint16,
        coverage: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$17608c3f81a6111),
        backtrackCoverage: new $5OpyM$restructure.Array(new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$17608c3f81a6111), 'backtrackGlyphCount'),
        lookaheadGlyphCount: $5OpyM$restructure.uint16,
        lookaheadCoverage: new $5OpyM$restructure.Array(new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$17608c3f81a6111), 'lookaheadGlyphCount'),
        glyphCount: $5OpyM$restructure.uint16,
        substitutes: new $5OpyM$restructure.Array($5OpyM$restructure.uint16, 'glyphCount')
    }
});
$7176ea6bb7dcf1c6$var$GSUBLookup.versions[7].extension.type = $7176ea6bb7dcf1c6$var$GSUBLookup;
var $7176ea6bb7dcf1c6$export$2e2bcd8739ae039 = new $5OpyM$restructure.VersionedStruct($5OpyM$restructure.uint32, {
    header: {
        scriptList: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$3e15fc05ce864229),
        featureList: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$aa18130def4b6cb4),
        lookupList: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, new $401800e36a580e62$export$df0008c6ff2da22a($7176ea6bb7dcf1c6$var$GSUBLookup))
    },
    0x00010000: {},
    0x00010001: {
        featureVariations: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, $421a2456cdbaa0d8$export$441b70b7971dd419)
    }
});
let $71e9e74bb6366bce$var$JstfGSUBModList = new $5OpyM$restructure.Array($5OpyM$restructure.uint16, $5OpyM$restructure.uint16);
let $71e9e74bb6366bce$var$JstfPriority = new $5OpyM$restructure.Struct({
    shrinkageEnableGSUB: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $71e9e74bb6366bce$var$JstfGSUBModList),
    shrinkageDisableGSUB: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $71e9e74bb6366bce$var$JstfGSUBModList),
    shrinkageEnableGPOS: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $71e9e74bb6366bce$var$JstfGSUBModList),
    shrinkageDisableGPOS: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $71e9e74bb6366bce$var$JstfGSUBModList),
    shrinkageJstfMax: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, new $401800e36a580e62$export$df0008c6ff2da22a($010e157f6d8a40e9$export$73a8cfb19cd43a0f)),
    extensionEnableGSUB: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $71e9e74bb6366bce$var$JstfGSUBModList),
    extensionDisableGSUB: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $71e9e74bb6366bce$var$JstfGSUBModList),
    extensionEnableGPOS: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $71e9e74bb6366bce$var$JstfGSUBModList),
    extensionDisableGPOS: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $71e9e74bb6366bce$var$JstfGSUBModList),
    extensionJstfMax: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, new $401800e36a580e62$export$df0008c6ff2da22a($010e157f6d8a40e9$export$73a8cfb19cd43a0f))
});
let $71e9e74bb6366bce$var$JstfLangSys = new $5OpyM$restructure.Array(new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $71e9e74bb6366bce$var$JstfPriority), $5OpyM$restructure.uint16);
let $71e9e74bb6366bce$var$JstfLangSysRecord = new $5OpyM$restructure.Struct({
    tag: new $5OpyM$restructure.String(4),
    jstfLangSys: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $71e9e74bb6366bce$var$JstfLangSys)
});
let $71e9e74bb6366bce$var$JstfScript = new $5OpyM$restructure.Struct({
    extenderGlyphs: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, new $5OpyM$restructure.Array($5OpyM$restructure.uint16, $5OpyM$restructure.uint16)),
    defaultLangSys: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $71e9e74bb6366bce$var$JstfLangSys),
    langSysCount: $5OpyM$restructure.uint16,
    langSysRecords: new $5OpyM$restructure.Array($71e9e74bb6366bce$var$JstfLangSysRecord, 'langSysCount')
});
let $71e9e74bb6366bce$var$JstfScriptRecord = new $5OpyM$restructure.Struct({
    tag: new $5OpyM$restructure.String(4),
    script: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $71e9e74bb6366bce$var$JstfScript, {
        type: 'parent'
    })
});
var $71e9e74bb6366bce$export$2e2bcd8739ae039 = new $5OpyM$restructure.Struct({
    version: $5OpyM$restructure.uint32,
    scriptCount: $5OpyM$restructure.uint16,
    scriptList: new $5OpyM$restructure.Array($71e9e74bb6366bce$var$JstfScriptRecord, 'scriptCount')
});
class $706225b6909f9418$var$VariableSizeNumber {
    constructor(size){
        this._size = size;
    }
    decode(stream, parent) {
        switch(this.size(0, parent)){
            case 1:
                return stream.readUInt8();
            case 2:
                return stream.readUInt16BE();
            case 3:
                return stream.readUInt24BE();
            case 4:
                return stream.readUInt32BE();
        }
    }
    size(val, parent) {
        return resolveLength(this._size, null, parent);
    }
}
let $706225b6909f9418$var$MapDataEntry = new $5OpyM$restructure.Struct({
    entry: new $706225b6909f9418$var$VariableSizeNumber((t)=>((t.parent.entryFormat & 0x0030) >> 4) + 1
    ),
    outerIndex: (t)=>t.entry >> (t.parent.entryFormat & 0x000F) + 1
    ,
    innerIndex: (t)=>t.entry & (1 << (t.parent.entryFormat & 0x000F) + 1) - 1
});
let $706225b6909f9418$var$DeltaSetIndexMap = new $5OpyM$restructure.Struct({
    entryFormat: $5OpyM$restructure.uint16,
    mapCount: $5OpyM$restructure.uint16,
    mapData: new $5OpyM$restructure.Array($706225b6909f9418$var$MapDataEntry, 'mapCount')
});
var $706225b6909f9418$export$2e2bcd8739ae039 = new $5OpyM$restructure.Struct({
    majorVersion: $5OpyM$restructure.uint16,
    minorVersion: $5OpyM$restructure.uint16,
    itemVariationStore: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, $421a2456cdbaa0d8$export$fe1b122a2710f241),
    advanceWidthMapping: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, $706225b6909f9418$var$DeltaSetIndexMap),
    LSBMapping: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, $706225b6909f9418$var$DeltaSetIndexMap),
    RSBMapping: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, $706225b6909f9418$var$DeltaSetIndexMap)
});
let $4a144b8ae6f53b7c$var$Signature = new $5OpyM$restructure.Struct({
    format: $5OpyM$restructure.uint32,
    length: $5OpyM$restructure.uint32,
    offset: $5OpyM$restructure.uint32
});
let $4a144b8ae6f53b7c$var$SignatureBlock = new $5OpyM$restructure.Struct({
    reserved: new $5OpyM$restructure.Reserved($5OpyM$restructure.uint16, 2),
    cbSignature: $5OpyM$restructure.uint32,
    signature: new $5OpyM$restructure.Buffer('cbSignature')
});
var $4a144b8ae6f53b7c$export$2e2bcd8739ae039 = new $5OpyM$restructure.Struct({
    ulVersion: $5OpyM$restructure.uint32,
    usNumSigs: $5OpyM$restructure.uint16,
    usFlag: $5OpyM$restructure.uint16,
    signatures: new $5OpyM$restructure.Array($4a144b8ae6f53b7c$var$Signature, 'usNumSigs'),
    signatureBlocks: new $5OpyM$restructure.Array($4a144b8ae6f53b7c$var$SignatureBlock, 'usNumSigs')
});
let $a2086c3965d7b105$var$GaspRange = new $5OpyM$restructure.Struct({
    rangeMaxPPEM: $5OpyM$restructure.uint16,
    rangeGaspBehavior: new $5OpyM$restructure.Bitfield($5OpyM$restructure.uint16, [
        'grayscale',
        'gridfit',
        'symmetricSmoothing',
        'symmetricGridfit'
    ])
});
var $a2086c3965d7b105$export$2e2bcd8739ae039 = new $5OpyM$restructure.Struct({
    version: $5OpyM$restructure.uint16,
    numRanges: $5OpyM$restructure.uint16,
    gaspRanges: new $5OpyM$restructure.Array($a2086c3965d7b105$var$GaspRange, 'numRanges')
});
let $de83746c6c1c8559$var$DeviceRecord = new $5OpyM$restructure.Struct({
    pixelSize: $5OpyM$restructure.uint8,
    maximumWidth: $5OpyM$restructure.uint8,
    widths: new $5OpyM$restructure.Array($5OpyM$restructure.uint8, (t)=>t.parent.parent.maxp.numGlyphs
    )
});
var
$de83746c6c1c8559$export$2e2bcd8739ae039 = new $5OpyM$restructure.Struct({
    version: $5OpyM$restructure.uint16,
    numRecords: $5OpyM$restructure.int16,
    sizeDeviceRecord: $5OpyM$restructure.int32,
    records: new $5OpyM$restructure.Array($de83746c6c1c8559$var$DeviceRecord, 'numRecords')
});
let $5a2237650c44652a$var$KernPair = new $5OpyM$restructure.Struct({
    left: $5OpyM$restructure.uint16,
    right: $5OpyM$restructure.uint16,
    value: $5OpyM$restructure.int16
});
let $5a2237650c44652a$var$ClassTable = new $5OpyM$restructure.Struct({
    firstGlyph: $5OpyM$restructure.uint16,
    nGlyphs: $5OpyM$restructure.uint16,
    offsets: new $5OpyM$restructure.Array($5OpyM$restructure.uint16, 'nGlyphs'),
    max: (t)=>t.offsets.length && Math.max.apply(Math, t.offsets)
});
let $5a2237650c44652a$var$Kern2Array = new $5OpyM$restructure.Struct({
    off: (t)=>t._startOffset - t.parent.parent._startOffset
    ,
    len: (t)=>((t.parent.leftTable.max - t.off) / t.parent.rowWidth + 1) * (t.parent.rowWidth / 2)
    ,
    values: new $5OpyM$restructure.LazyArray($5OpyM$restructure.int16, 'len')
});
let $5a2237650c44652a$var$KernSubtable = new $5OpyM$restructure.VersionedStruct('format', {
    0: {
        nPairs: $5OpyM$restructure.uint16,
        searchRange: $5OpyM$restructure.uint16,
        entrySelector: $5OpyM$restructure.uint16,
        rangeShift: $5OpyM$restructure.uint16,
        pairs: new $5OpyM$restructure.Array($5a2237650c44652a$var$KernPair, 'nPairs')
    },
    2: {
        rowWidth: $5OpyM$restructure.uint16,
        leftTable: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $5a2237650c44652a$var$ClassTable, {
            type: 'parent'
        }),
        rightTable: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $5a2237650c44652a$var$ClassTable, {
            type: 'parent'
        }),
        array: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $5a2237650c44652a$var$Kern2Array, {
            type: 'parent'
        })
    },
    3: {
        glyphCount: $5OpyM$restructure.uint16,
        kernValueCount: $5OpyM$restructure.uint8,
        leftClassCount: $5OpyM$restructure.uint8,
        rightClassCount: $5OpyM$restructure.uint8,
        flags: $5OpyM$restructure.uint8,
        kernValue: new $5OpyM$restructure.Array($5OpyM$restructure.int16, 'kernValueCount'),
        leftClass: new $5OpyM$restructure.Array($5OpyM$restructure.uint8, 'glyphCount'),
        rightClass: new $5OpyM$restructure.Array($5OpyM$restructure.uint8, 'glyphCount'),
        kernIndex: new $5OpyM$restructure.Array($5OpyM$restructure.uint8, (t)=>t.leftClassCount * t.rightClassCount
        )
    }
});
let $5a2237650c44652a$var$KernTable = new $5OpyM$restructure.VersionedStruct('version', {
    0: {
        subVersion: $5OpyM$restructure.uint16,
        length: $5OpyM$restructure.uint16,
        format: $5OpyM$restructure.uint8,
        coverage: new $5OpyM$restructure.Bitfield($5OpyM$restructure.uint8, [
            'horizontal',
            'minimum',
            'crossStream',
            'override'
        ]),
        subtable: $5a2237650c44652a$var$KernSubtable,
        padding: new $5OpyM$restructure.Reserved($5OpyM$restructure.uint8, (t)=>t.length - t._currentOffset
        )
    },
    1: {
        length: $5OpyM$restructure.uint32,
        coverage: new $5OpyM$restructure.Bitfield($5OpyM$restructure.uint8, [
            null,
            null,
            null,
            null,
            null,
            'variation',
            'crossStream',
            'vertical'
        ]),
        format: $5OpyM$restructure.uint8,
        tupleIndex: $5OpyM$restructure.uint16,
        subtable: $5a2237650c44652a$var$KernSubtable,
        padding: new $5OpyM$restructure.Reserved($5OpyM$restructure.uint8, (t)=>t.length - t._currentOffset
        )
    }
});
var $5a2237650c44652a$export$2e2bcd8739ae039 = new $5OpyM$restructure.VersionedStruct($5OpyM$restructure.uint16, {
    0: {
        nTables: $5OpyM$restructure.uint16,
        tables: new $5OpyM$restructure.Array($5a2237650c44652a$var$KernTable, 'nTables')
    },
    1: {
        reserved: new $5OpyM$restructure.Reserved($5OpyM$restructure.uint16),
        nTables: $5OpyM$restructure.uint32,
        tables: new $5OpyM$restructure.Array($5a2237650c44652a$var$KernTable, 'nTables')
    }
});
var
$1eadf070c8b34e48$export$2e2bcd8739ae039 = new $5OpyM$restructure.Struct({
    version: $5OpyM$restructure.uint16,
    numGlyphs: $5OpyM$restructure.uint16,
    yPels: new $5OpyM$restructure.Array($5OpyM$restructure.uint8, 'numGlyphs')
});
var
$8eb2f7302ef75084$export$2e2bcd8739ae039 = new $5OpyM$restructure.Struct({
    version: $5OpyM$restructure.uint16,
    fontNumber: $5OpyM$restructure.uint32,
    pitch: $5OpyM$restructure.uint16,
    xHeight: $5OpyM$restructure.uint16,
    style: $5OpyM$restructure.uint16,
    typeFamily: $5OpyM$restructure.uint16,
    capHeight: $5OpyM$restructure.uint16,
    symbolSet: $5OpyM$restructure.uint16,
    typeface: new $5OpyM$restructure.String(16),
    characterComplement: new $5OpyM$restructure.String(8),
    fileName: new $5OpyM$restructure.String(6),
    strokeWeight: new $5OpyM$restructure.String(1),
    widthType: new $5OpyM$restructure.String(1),
    serifStyle: $5OpyM$restructure.uint8,
    reserved: new $5OpyM$restructure.Reserved($5OpyM$restructure.uint8)
});
let $8223b0d67f5fd7c9$var$Ratio = new $5OpyM$restructure.Struct({
    bCharSet: $5OpyM$restructure.uint8,
    xRatio: $5OpyM$restructure.uint8,
    yStartRatio: $5OpyM$restructure.uint8,
    yEndRatio: $5OpyM$restructure.uint8
});
let $8223b0d67f5fd7c9$var$vTable = new $5OpyM$restructure.Struct({
    yPelHeight: $5OpyM$restructure.uint16,
    yMax: $5OpyM$restructure.int16,
    yMin: $5OpyM$restructure.int16
});
let $8223b0d67f5fd7c9$var$VdmxGroup = new $5OpyM$restructure.Struct({
    recs: $5OpyM$restructure.uint16,
    startsz: $5OpyM$restructure.uint8,
    endsz: $5OpyM$restructure.uint8,
    entries: new $5OpyM$restructure.Array($8223b0d67f5fd7c9$var$vTable, 'recs')
});
var $8223b0d67f5fd7c9$export$2e2bcd8739ae039 = new $5OpyM$restructure.Struct({
    version: $5OpyM$restructure.uint16,
    numRecs: $5OpyM$restructure.uint16,
    numRatios: $5OpyM$restructure.uint16,
    ratioRanges: new $5OpyM$restructure.Array($8223b0d67f5fd7c9$var$Ratio, 'numRatios'),
    offsets: new $5OpyM$restructure.Array($5OpyM$restructure.uint16, 'numRatios'),
    groups: new $5OpyM$restructure.Array($8223b0d67f5fd7c9$var$VdmxGroup, 'numRecs')
});
var
$4b17ac6a75c85897$export$2e2bcd8739ae039 = new $5OpyM$restructure.Struct({
    version: $5OpyM$restructure.uint16,
    ascent: $5OpyM$restructure.int16,
    descent: $5OpyM$restructure.int16,
    lineGap: $5OpyM$restructure.int16,
    advanceHeightMax: $5OpyM$restructure.int16,
    minTopSideBearing: $5OpyM$restructure.int16,
    minBottomSideBearing: $5OpyM$restructure.int16,
    yMaxExtent: $5OpyM$restructure.int16,
    caretSlopeRise: $5OpyM$restructure.int16,
    caretSlopeRun: $5OpyM$restructure.int16,
    caretOffset: $5OpyM$restructure.int16,
    reserved: new $5OpyM$restructure.Reserved($5OpyM$restructure.int16, 4),
    metricDataFormat: $5OpyM$restructure.int16,
    numberOfMetrics: $5OpyM$restructure.uint16
});
let $a9f9c5185d84186d$var$VmtxEntry = new $5OpyM$restructure.Struct({
    advance: $5OpyM$restructure.uint16,
    bearing: $5OpyM$restructure.int16
});
var
$a9f9c5185d84186d$export$2e2bcd8739ae039 = new $5OpyM$restructure.Struct({
    metrics: new $5OpyM$restructure.LazyArray($a9f9c5185d84186d$var$VmtxEntry, (t)=>t.parent.vhea.numberOfMetrics
    ),
    bearings: new $5OpyM$restructure.LazyArray($5OpyM$restructure.int16, (t)=>t.parent.maxp.numGlyphs - t.parent.vhea.numberOfMetrics
    )
});
let $d9cf6d6467871d68$var$shortFrac = new $5OpyM$restructure.Fixed(16, 'BE', 14);
let $d9cf6d6467871d68$var$Correspondence = new $5OpyM$restructure.Struct({
    fromCoord: $d9cf6d6467871d68$var$shortFrac,
    toCoord: $d9cf6d6467871d68$var$shortFrac
});
let $d9cf6d6467871d68$var$Segment = new $5OpyM$restructure.Struct({
    pairCount: $5OpyM$restructure.uint16,
    correspondence: new $5OpyM$restructure.Array($d9cf6d6467871d68$var$Correspondence, 'pairCount')
});
var $d9cf6d6467871d68$export$2e2bcd8739ae039 = new $5OpyM$restructure.Struct({
    version: $5OpyM$restructure.fixed32,
    axisCount: $5OpyM$restructure.uint32,
    segment: new $5OpyM$restructure.Array($d9cf6d6467871d68$var$Segment, 'axisCount')
});
class $c35aa0a165e05d15$var$UnboundedArrayAccessor {
    constructor(type, stream, parent){
        this.type = type;
        this.stream = stream;
        this.parent = parent;
        this.base = this.stream.pos;
        this._items = [];
    }
    getItem(index) {
        if (this._items[index] == null) {
            let pos = this.stream.pos;
            this.stream.pos = this.base + this.type.size(null, this.parent) * index;
            this._items[index] = this.type.decode(this.stream, this.parent);
            this.stream.pos = pos;
        }
        return this._items[index];
    }
    inspect() {
        return `[UnboundedArray ${this.type.constructor.name}]`;
    }
}
class $c35aa0a165e05d15$export$c5af1eebc882e39a extends $5OpyM$restructure.Array {
    constructor(type){
        super(type, 0);
    }
    decode(stream, parent) {
        return new $c35aa0a165e05d15$var$UnboundedArrayAccessor(this.type, stream, parent);
    }
}
let $c35aa0a165e05d15$export$8351f8c2ae2f103c = function(ValueType = $5OpyM$restructure.uint16) {
    class Shadow {
        constructor(type){
            this.type = type;
        }
        decode(stream, ctx) {
            ctx = ctx.parent.parent;
            return this.type.decode(stream, ctx);
        }
        size(val, ctx) {
            ctx = ctx.parent.parent;
            return this.type.size(val, ctx);
        }
        encode(stream, val, ctx) {
            ctx = ctx.parent.parent;
            return this.type.encode(stream, val, ctx);
        }
    }
    ValueType = new Shadow(ValueType);
    let BinarySearchHeader = new $5OpyM$restructure.Struct({
        unitSize: $5OpyM$restructure.uint16,
        nUnits: $5OpyM$restructure.uint16,
        searchRange: $5OpyM$restructure.uint16,
        entrySelector: $5OpyM$restructure.uint16,
        rangeShift: $5OpyM$restructure.uint16
    });
    let LookupSegmentSingle = new $5OpyM$restructure.Struct({
        lastGlyph: $5OpyM$restructure.uint16,
        firstGlyph: $5OpyM$restructure.uint16,
        value: ValueType
    });
    let LookupSegmentArray = new $5OpyM$restructure.Struct({
        lastGlyph: $5OpyM$restructure.uint16,
        firstGlyph: $5OpyM$restructure.uint16,
        values: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, new $5OpyM$restructure.Array(ValueType, (t)=>t.lastGlyph - t.firstGlyph + 1
        ), {
            type: 'parent'
        })
    });
    let LookupSingle = new $5OpyM$restructure.Struct({
        glyph: $5OpyM$restructure.uint16,
        value: ValueType
    });
    return new $5OpyM$restructure.VersionedStruct($5OpyM$restructure.uint16, {
        0: {
            values: new $c35aa0a165e05d15$export$c5af1eebc882e39a(ValueType)
        },
        2: {
            binarySearchHeader: BinarySearchHeader,
            segments: new $5OpyM$restructure.Array(LookupSegmentSingle, (t)=>t.binarySearchHeader.nUnits
            )
        },
        4: {
            binarySearchHeader: BinarySearchHeader,
            segments: new $5OpyM$restructure.Array(LookupSegmentArray, (t)=>t.binarySearchHeader.nUnits
            )
        },
        6: {
            binarySearchHeader: BinarySearchHeader,
            segments: new $5OpyM$restructure.Array(LookupSingle, (t)=>t.binarySearchHeader.nUnits
            )
        },
        8: {
            firstGlyph: $5OpyM$restructure.uint16,
            count: $5OpyM$restructure.uint16,
            values: new $5OpyM$restructure.Array(ValueType, 'count')
        }
    });
};
function $c35aa0a165e05d15$export$79f7d93d790934ba(entryData = {}, lookupType = $5OpyM$restructure.uint16) {
    let entry = Object.assign({
        newState: $5OpyM$restructure.uint16,
        flags: $5OpyM$restructure.uint16
    }, entryData);
    let Entry = new $5OpyM$restructure.Struct(entry);
    let StateArray = new $c35aa0a165e05d15$export$c5af1eebc882e39a(new $5OpyM$restructure.Array($5OpyM$restructure.uint16, (t)=>t.nClasses
    ));
    let StateHeader = new $5OpyM$restructure.Struct({
        nClasses: $5OpyM$restructure.uint32,
        classTable: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, new $c35aa0a165e05d15$export$8351f8c2ae2f103c(lookupType)),
        stateArray: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, StateArray),
        entryTable: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, new $c35aa0a165e05d15$export$c5af1eebc882e39a(Entry))
    });
    return StateHeader;
}
function $c35aa0a165e05d15$export$105027425199cc51(entryData = {}, lookupType = $5OpyM$restructure.uint16) {
    let ClassLookupTable = new $5OpyM$restructure.Struct({
        version () {
            return 8;
        },
        firstGlyph: $5OpyM$restructure.uint16,
        values: new $5OpyM$restructure.Array($5OpyM$restructure.uint8, $5OpyM$restructure.uint16)
    });
    let entry = Object.assign({
        newStateOffset: $5OpyM$restructure.uint16,
        newState: (t)=>(t.newStateOffset - (t.parent.stateArray.base - t.parent._startOffset)) / t.parent.nClasses
        ,
        flags: $5OpyM$restructure.uint16
    }, entryData);
    let Entry = new $5OpyM$restructure.Struct(entry);
    let StateArray = new $c35aa0a165e05d15$export$c5af1eebc882e39a(new $5OpyM$restructure.Array($5OpyM$restructure.uint8, (t)=>t.nClasses
    ));
    let StateHeader1 = new $5OpyM$restructure.Struct({
        nClasses: $5OpyM$restructure.uint16,
        classTable: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, ClassLookupTable),
        stateArray: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, StateArray),
        entryTable: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, new $c35aa0a165e05d15$export$c5af1eebc882e39a(Entry))
    });
    return StateHeader1;
}
let $53e6946cfb72ad0c$var$BslnSubtable = new $5OpyM$restructure.VersionedStruct('format', {
    0: {
        deltas: new $5OpyM$restructure.Array($5OpyM$restructure.int16, 32)
    },
    1: {
        deltas: new $5OpyM$restructure.Array($5OpyM$restructure.int16, 32),
        mappingData: new $c35aa0a165e05d15$export$8351f8c2ae2f103c($5OpyM$restructure.uint16)
    },
    2: {
        standardGlyph: $5OpyM$restructure.uint16,
        controlPoints: new $5OpyM$restructure.Array($5OpyM$restructure.uint16, 32)
    },
    3: {
        standardGlyph: $5OpyM$restructure.uint16,
        controlPoints: new $5OpyM$restructure.Array($5OpyM$restructure.uint16, 32),
        mappingData: new $c35aa0a165e05d15$export$8351f8c2ae2f103c($5OpyM$restructure.uint16)
    }
});
var $53e6946cfb72ad0c$export$2e2bcd8739ae039 = new $5OpyM$restructure.Struct({
    version: $5OpyM$restructure.fixed32,
    format: $5OpyM$restructure.uint16,
    defaultBaseline: $5OpyM$restructure.uint16,
    subtable: $53e6946cfb72ad0c$var$BslnSubtable
});
let $117550c71e13cb3d$var$Setting = new $5OpyM$restructure.Struct({
    setting: $5OpyM$restructure.uint16,
    nameIndex: $5OpyM$restructure.int16,
    name: (t)=>t.parent.parent.parent.name.records.fontFeatures[t.nameIndex]
});
let $117550c71e13cb3d$var$FeatureName = new $5OpyM$restructure.Struct({
    feature: $5OpyM$restructure.uint16,
    nSettings: $5OpyM$restructure.uint16,
    settingTable: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, new $5OpyM$restructure.Array($117550c71e13cb3d$var$Setting, 'nSettings'), {
        type: 'parent'
    }),
    featureFlags: new $5OpyM$restructure.Bitfield($5OpyM$restructure.uint8, [
        null,
        null,
        null,
        null,
        null,
        null,
        'hasDefault',
        'exclusive'
    ]),
    defaultSetting: $5OpyM$restructure.uint8,
    nameIndex: $5OpyM$restructure.int16,
    name: (t)=>t.parent.parent.name.records.fontFeatures[t.nameIndex]
});
var $117550c71e13cb3d$export$2e2bcd8739ae039 = new $5OpyM$restructure.Struct({
    version: $5OpyM$restructure.fixed32,
    featureNameCount: $5OpyM$restructure.uint16,
    reserved1: new $5OpyM$restructure.Reserved($5OpyM$restructure.uint16),
    reserved2: new $5OpyM$restructure.Reserved($5OpyM$restructure.uint32),
    featureNames: new $5OpyM$restructure.Array($117550c71e13cb3d$var$FeatureName, 'featureNameCount')
});
let $551f92fdd501454e$var$Axis = new $5OpyM$restructure.Struct({
    axisTag: new $5OpyM$restructure.String(4),
    minValue: $5OpyM$restructure.fixed32,
    defaultValue: $5OpyM$restructure.fixed32,
    maxValue: $5OpyM$restructure.fixed32,
    flags: $5OpyM$restructure.uint16,
    nameID: $5OpyM$restructure.uint16,
    name: (t)=>t.parent.parent.name.records.fontFeatures[t.nameID]
});
let $551f92fdd501454e$var$Instance = new $5OpyM$restructure.Struct({
    nameID: $5OpyM$restructure.uint16,
    name: (t)=>t.parent.parent.name.records.fontFeatures[t.nameID]
    ,
    flags: $5OpyM$restructure.uint16,
    coord: new $5OpyM$restructure.Array($5OpyM$restructure.fixed32, (t)=>t.parent.axisCount
    ),
    postscriptNameID: new $5OpyM$restructure.Optional($5OpyM$restructure.uint16, (t)=>t.parent.instanceSize - t._currentOffset > 0
    )
});
var $551f92fdd501454e$export$2e2bcd8739ae039 = new $5OpyM$restructure.Struct({
    version: $5OpyM$restructure.fixed32,
    offsetToData: $5OpyM$restructure.uint16,
    countSizePairs: $5OpyM$restructure.uint16,
    axisCount: $5OpyM$restructure.uint16,
    axisSize: $5OpyM$restructure.uint16,
    instanceCount: $5OpyM$restructure.uint16,
    instanceSize: $5OpyM$restructure.uint16,
    axis: new $5OpyM$restructure.Array($551f92fdd501454e$var$Axis, 'axisCount'),
    instance: new $5OpyM$restructure.Array($551f92fdd501454e$var$Instance, 'instanceCount')
});
let $d03801ee7a5f4d7c$var$shortFrac = new $5OpyM$restructure.Fixed(16, 'BE', 14);
class $d03801ee7a5f4d7c$var$Offset {
    static decode(stream, parent) {
        return parent.flags ? stream.readUInt32BE() : stream.readUInt16BE() * 2;
    }
}
let $d03801ee7a5f4d7c$var$gvar = new $5OpyM$restructure.Struct({
    version: $5OpyM$restructure.uint16,
    reserved: new $5OpyM$restructure.Reserved($5OpyM$restructure.uint16),
    axisCount: $5OpyM$restructure.uint16,
    globalCoordCount: $5OpyM$restructure.uint16,
    globalCoords: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, new $5OpyM$restructure.Array(new $5OpyM$restructure.Array($d03801ee7a5f4d7c$var$shortFrac, 'axisCount'), 'globalCoordCount')),
    glyphCount: $5OpyM$restructure.uint16,
    flags: $5OpyM$restructure.uint16,
    offsetToData: $5OpyM$restructure.uint32,
    offsets: new $5OpyM$restructure.Array(new $5OpyM$restructure.Pointer($d03801ee7a5f4d7c$var$Offset, 'void', {
        relativeTo: (ctx)=>ctx.offsetToData
        ,
        allowNull: false
    }), (t)=>t.glyphCount + 1
    )
});
var $d03801ee7a5f4d7c$export$2e2bcd8739ae039 = $d03801ee7a5f4d7c$var$gvar;
let $70ffc7fec5b89b5e$var$ClassTable = new $5OpyM$restructure.Struct({
    length: $5OpyM$restructure.uint16,
    coverage: $5OpyM$restructure.uint16,
    subFeatureFlags: $5OpyM$restructure.uint32,
    stateTable: new $c35aa0a165e05d15$export$105027425199cc51
});
let $70ffc7fec5b89b5e$var$WidthDeltaRecord = new $5OpyM$restructure.Struct({
    justClass: $5OpyM$restructure.uint32,
    beforeGrowLimit: $5OpyM$restructure.fixed32,
    beforeShrinkLimit: $5OpyM$restructure.fixed32,
    afterGrowLimit: $5OpyM$restructure.fixed32,
    afterShrinkLimit: $5OpyM$restructure.fixed32,
    growFlags: $5OpyM$restructure.uint16,
    shrinkFlags: $5OpyM$restructure.uint16
});
let $70ffc7fec5b89b5e$var$WidthDeltaCluster = new $5OpyM$restructure.Array($70ffc7fec5b89b5e$var$WidthDeltaRecord, $5OpyM$restructure.uint32);
let $70ffc7fec5b89b5e$var$ActionData = new $5OpyM$restructure.VersionedStruct('actionType', {
    0: {
        lowerLimit: $5OpyM$restructure.fixed32,
        upperLimit: $5OpyM$restructure.fixed32,
        order: $5OpyM$restructure.uint16,
        glyphs: new $5OpyM$restructure.Array($5OpyM$restructure.uint16, $5OpyM$restructure.uint16)
    },
    1: {
        addGlyph: $5OpyM$restructure.uint16
    },
    2: {
        substThreshold: $5OpyM$restructure.fixed32,
        addGlyph: $5OpyM$restructure.uint16,
        substGlyph: $5OpyM$restructure.uint16
    },
    3: {},
    4: {
        variationAxis: $5OpyM$restructure.uint32,
        minimumLimit: $5OpyM$restructure.fixed32,
        noStretchValue: $5OpyM$restructure.fixed32,
        maximumLimit: $5OpyM$restructure.fixed32
    },
    5: {
        flags: $5OpyM$restructure.uint16,
        glyph: $5OpyM$restructure.uint16
    }
});
let $70ffc7fec5b89b5e$var$Action = new $5OpyM$restructure.Struct({
    actionClass: $5OpyM$restructure.uint16,
    actionType: $5OpyM$restructure.uint16,
    actionLength: $5OpyM$restructure.uint32,
    actionData: $70ffc7fec5b89b5e$var$ActionData,
    padding: new $5OpyM$restructure.Reserved($5OpyM$restructure.uint8, (t)=>t.actionLength - t._currentOffset
    )
});
let $70ffc7fec5b89b5e$var$PostcompensationAction = new $5OpyM$restructure.Array($70ffc7fec5b89b5e$var$Action, $5OpyM$restructure.uint32);
let $70ffc7fec5b89b5e$var$PostCompensationTable = new $5OpyM$restructure.Struct({
    lookupTable: new $c35aa0a165e05d15$export$8351f8c2ae2f103c(new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $70ffc7fec5b89b5e$var$PostcompensationAction))
});
let $70ffc7fec5b89b5e$var$JustificationTable = new $5OpyM$restructure.Struct({
    classTable: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $70ffc7fec5b89b5e$var$ClassTable, {
        type: 'parent'
    }),
    wdcOffset: $5OpyM$restructure.uint16,
    postCompensationTable: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $70ffc7fec5b89b5e$var$PostCompensationTable, {
        type: 'parent'
    }),
    widthDeltaClusters: new $c35aa0a165e05d15$export$8351f8c2ae2f103c(new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $70ffc7fec5b89b5e$var$WidthDeltaCluster, {
        type: 'parent',
        relativeTo: (ctx)=>ctx.wdcOffset
    }))
});
var $70ffc7fec5b89b5e$export$2e2bcd8739ae039 = new $5OpyM$restructure.Struct({
    version: $5OpyM$restructure.uint32,
    format: $5OpyM$restructure.uint16,
    horizontal: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $70ffc7fec5b89b5e$var$JustificationTable),
    vertical: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $70ffc7fec5b89b5e$var$JustificationTable)
});
let $dd743f90b6270daa$var$LigatureData = {
    action: $5OpyM$restructure.uint16
};
let $dd743f90b6270daa$var$ContextualData = {
    markIndex: $5OpyM$restructure.uint16,
    currentIndex: $5OpyM$restructure.uint16
};
let $dd743f90b6270daa$var$InsertionData = {
    currentInsertIndex: $5OpyM$restructure.uint16,
    markedInsertIndex: $5OpyM$restructure.uint16
};
let $dd743f90b6270daa$var$SubstitutionTable = new $5OpyM$restructure.Struct({
    items: new $c35aa0a165e05d15$export$c5af1eebc882e39a(new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, new $c35aa0a165e05d15$export$8351f8c2ae2f103c))
});
let $dd743f90b6270daa$var$SubtableData = new $5OpyM$restructure.VersionedStruct('type', {
    0: {
        stateTable: new $c35aa0a165e05d15$export$79f7d93d790934ba
    },
    1: {
        stateTable: new $c35aa0a165e05d15$export$79f7d93d790934ba($dd743f90b6270daa$var$ContextualData),
        substitutionTable: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, $dd743f90b6270daa$var$SubstitutionTable)
    },
    2: {
        stateTable: new $c35aa0a165e05d15$export$79f7d93d790934ba($dd743f90b6270daa$var$LigatureData),
        ligatureActions: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, new $c35aa0a165e05d15$export$c5af1eebc882e39a($5OpyM$restructure.uint32)),
        components: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, new $c35aa0a165e05d15$export$c5af1eebc882e39a($5OpyM$restructure.uint16)),
        ligatureList: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, new $c35aa0a165e05d15$export$c5af1eebc882e39a($5OpyM$restructure.uint16))
    },
    4: {
        lookupTable: new $c35aa0a165e05d15$export$8351f8c2ae2f103c
    },
    5: {
        stateTable: new $c35aa0a165e05d15$export$79f7d93d790934ba($dd743f90b6270daa$var$InsertionData),
        insertionActions: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, new $c35aa0a165e05d15$export$c5af1eebc882e39a($5OpyM$restructure.uint16))
    }
});
let $dd743f90b6270daa$var$Subtable = new $5OpyM$restructure.Struct({
    length: $5OpyM$restructure.uint32,
    coverage: $5OpyM$restructure.uint24,
    type: $5OpyM$restructure.uint8,
    subFeatureFlags: $5OpyM$restructure.uint32,
    table: $dd743f90b6270daa$var$SubtableData,
    padding: new $5OpyM$restructure.Reserved($5OpyM$restructure.uint8, (t)=>t.length - t._currentOffset
    )
});
let $dd743f90b6270daa$var$FeatureEntry = new $5OpyM$restructure.Struct({
    featureType: $5OpyM$restructure.uint16,
    featureSetting: $5OpyM$restructure.uint16,
    enableFlags: $5OpyM$restructure.uint32,
    disableFlags: $5OpyM$restructure.uint32
});
let $dd743f90b6270daa$var$MorxChain = new $5OpyM$restructure.Struct({
    defaultFlags: $5OpyM$restructure.uint32,
    chainLength: $5OpyM$restructure.uint32,
    nFeatureEntries: $5OpyM$restructure.uint32,
    nSubtables: $5OpyM$restructure.uint32,
    features: new $5OpyM$restructure.Array($dd743f90b6270daa$var$FeatureEntry, 'nFeatureEntries'),
    subtables: new $5OpyM$restructure.Array($dd743f90b6270daa$var$Subtable, 'nSubtables')
});
var $dd743f90b6270daa$export$2e2bcd8739ae039 = new $5OpyM$restructure.Struct({
    version: $5OpyM$restructure.uint16,
    unused: new $5OpyM$restructure.Reserved($5OpyM$restructure.uint16),
    nChains: $5OpyM$restructure.uint32,
    chains: new $5OpyM$restructure.Array($dd743f90b6270daa$var$MorxChain, 'nChains')
});
let $40e500cc5163d19f$var$OpticalBounds = new $5OpyM$restructure.Struct({
    left: $5OpyM$restructure.int16,
    top: $5OpyM$restructure.int16,
    right: $5OpyM$restructure.int16,
    bottom: $5OpyM$restructure.int16
});
var $40e500cc5163d19f$export$2e2bcd8739ae039 = new $5OpyM$restructure.Struct({
    version: $5OpyM$restructure.fixed32,
    format: $5OpyM$restructure.uint16,
    lookupTable: new $c35aa0a165e05d15$export$8351f8c2ae2f103c($40e500cc5163d19f$var$OpticalBounds)
});
let $60d88718e7e1fa97$var$tables = {};
var $60d88718e7e1fa97$export$2e2bcd8739ae039 = $60d88718e7e1fa97$var$tables;
$60d88718e7e1fa97$var$tables.cmap = $9aad45a64cf8e4b5$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.head = $b41847595480ce3a$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.hhea = $5fda302e2516d0c7$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.hmtx = $28788c978325a3e1$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.maxp = $9e68d972c1fae2a9$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.name = $866b9b7dd32d7242$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables['OS/2'] = $268023eac606db57$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.post = $5287343c85bea17e$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.fpgm = $6f2fae1f8d2b4b41$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.loca = $cae48a5e791773ec$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.prep = $7b12cfca10f7f884$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables['cvt '] = $5768e6ef8b1a512a$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.glyf = $06e9f2dae5795013$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables['CFF '] = $8770fc79268fa3c2$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables['CFF2'] = $8770fc79268fa3c2$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.VORG = $79f2eb50e4490e51$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.EBLC = $234c291eab07e474$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.CBLC = $60d88718e7e1fa97$var$tables.EBLC;
$60d88718e7e1fa97$var$tables.sbix = $55d04373f0cac44e$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.COLR = $0e59eccfa3005d9d$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.CPAL = $23affa36a12f7915$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.BASE = $9fffe61eb0785f74$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.GDEF = $418face38567ee6e$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.GPOS = $010e157f6d8a40e9$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.GSUB = $7176ea6bb7dcf1c6$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.JSTF = $71e9e74bb6366bce$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.HVAR = $706225b6909f9418$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.DSIG = $4a144b8ae6f53b7c$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.gasp = $a2086c3965d7b105$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.hdmx = $de83746c6c1c8559$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.kern = $5a2237650c44652a$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.LTSH = $1eadf070c8b34e48$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.PCLT = $8eb2f7302ef75084$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.VDMX = $8223b0d67f5fd7c9$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.vhea = $4b17ac6a75c85897$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.vmtx = $a9f9c5185d84186d$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.avar = $d9cf6d6467871d68$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.bsln = $53e6946cfb72ad0c$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.feat = $117550c71e13cb3d$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.fvar = $551f92fdd501454e$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.gvar = $d03801ee7a5f4d7c$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.just = $70ffc7fec5b89b5e$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.morx = $dd743f90b6270daa$export$2e2bcd8739ae039;
$60d88718e7e1fa97$var$tables.opbd = $40e500cc5163d19f$export$2e2bcd8739ae039;
let $d5e01a2298150c9a$var$TableEntry = new $5OpyM$restructure.Struct({
    tag: new $5OpyM$restructure.String(4),
    checkSum: $5OpyM$restructure.uint32,
    offset: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, 'void', {
        type: 'global'
    }),
    length: $5OpyM$restructure.uint32
});
let $d5e01a2298150c9a$var$Directory = new $5OpyM$restructure.Struct({
    tag: new $5OpyM$restructure.String(4),
    numTables: $5OpyM$restructure.uint16,
    searchRange: $5OpyM$restructure.uint16,
    entrySelector: $5OpyM$restructure.uint16,
    rangeShift: $5OpyM$restructure.uint16,
    tables: new $5OpyM$restructure.Array($d5e01a2298150c9a$var$TableEntry, 'numTables')
});
$d5e01a2298150c9a$var$Directory.process = function() {
    let tables = {};
    for (let table of this.tables)tables[table.tag] = table;
    this.tables = tables;
};
$d5e01a2298150c9a$var$Directory.preEncode = function(stream) {
    let tables = [];
    for(let tag in this.tables){
        let table = this.tables[tag];
        if (table) tables.push({
            tag: tag,
            checkSum: 0,
            offset: new $5OpyM$restructure.VoidPointer($60d88718e7e1fa97$export$2e2bcd8739ae039[tag], table),
            length: $60d88718e7e1fa97$export$2e2bcd8739ae039[tag].size(table)
        });
    }
    this.tag = 'true';
    this.numTables = tables.length;
    this.tables = tables;
    let maxExponentFor2 = Math.floor(Math.log(this.numTables) / Math.LN2);
    let maxPowerOf2 = Math.pow(2, maxExponentFor2);
    this.searchRange = maxPowerOf2 * 16;
    this.entrySelector = Math.log(maxPowerOf2) / Math.LN2;
    this.rangeShift = this.numTables * 16 - this.searchRange;
};
var $d5e01a2298150c9a$export$2e2bcd8739ae039 = $d5e01a2298150c9a$var$Directory;
function $f3ad94c9f84f4d57$export$2e0ae67339d5f1ac(arr, cmp) {
    let min = 0;
    let max = arr.length - 1;
    while(min <= max){
        let mid = min + max >> 1;
        let res = cmp(arr[mid]);
        if (res < 0) max = mid - 1;
        else if (res > 0) min = mid + 1;
        else return mid;
    }
    return -1;
}
function $f3ad94c9f84f4d57$export$d02631cccf789723(index, end) {
    let $f3ad94c9f84f4d57$export$d02631cccf789723 = [];
    while(index < end)$f3ad94c9f84f4d57$export$d02631cccf789723.push(index++);
    return $f3ad94c9f84f4d57$export$d02631cccf789723;
}
var _class;
let $5d24cfe1a4cd83bb$export$2e2bcd8739ae039 = (_class = class $5d24cfe1a4cd83bb$export$2e2bcd8739ae039 {
    constructor(cmapTable){
        this.encoding = null;
        this.cmap = this.findSubtable(cmapTable, [
            [
                3,
                10
            ],
            [
                0,
                6
            ],
            [
                0,
                4
            ],
            [
                3,
                1
            ],
            [
                0,
                3
            ],
            [
                0,
                2
            ],
            [
                0,
                1
            ],
            [
                0,
                0
            ]
        ]);
        if (!this.cmap && $5OpyM$iconvlitecjs) for (let cmap of cmapTable.tables){
            let encoding = $111d7d948974b54a$export$badc544e0651b6b1(cmap.platformID, cmap.encodingID, cmap.table.language - 1);
            if ($5OpyM$iconvlitecjs.encodingExists(encoding)) {
                this.cmap = cmap.table;
                this.encoding = encoding;
            }
        }
        if (!this.cmap) throw new Error("Could not find a supported cmap table");
        this.uvs = this.findSubtable(cmapTable, [
            [
                0,
                5
            ]
        ]);
        if (this.uvs && this.uvs.version !== 14) this.uvs = null;
    }
    findSubtable(cmapTable, pairs) {
        for (let [platformID, encodingID] of pairs)for (let cmap of cmapTable.tables){
            if (cmap.platformID === platformID && cmap.encodingID === encodingID) return cmap.table;
        }
        return null;
    }
    lookup(codepoint, variationSelector) {
        if (this.encoding) {
            let buf = $5OpyM$iconvlitecjs.encode(String.fromCodePoint(codepoint), this.encoding);
            codepoint = 0;
            for(let i = 0; i < buf.length; i++)codepoint = codepoint << 8 | buf[i];
        } else if (variationSelector) {
            let gid = this.getVariationSelector(codepoint, variationSelector);
            if (gid) return gid;
        }
        let cmap = this.cmap;
        switch(cmap.version){
            case 0:
                return cmap.codeMap.get(codepoint) || 0;
            case 4:
                {
                    let min = 0;
                    let max = cmap.segCount - 1;
                    while(min <= max){
                        let mid = min + max >> 1;
                        if (codepoint < cmap.startCode.get(mid)) max = mid - 1;
                        else if (codepoint > cmap.endCode.get(mid)) min = mid + 1;
                        else {
                            let rangeOffset = cmap.idRangeOffset.get(mid);
                            let gid;
                            if (rangeOffset === 0) gid = codepoint + cmap.idDelta.get(mid);
                            else {
                                let index = rangeOffset / 2 + (codepoint - cmap.startCode.get(mid)) - (cmap.segCount - mid);
                                gid = cmap.glyphIndexArray.get(index) || 0;
                                if (gid !== 0) gid += cmap.idDelta.get(mid);
                            }
                            return gid & 0xffff;
                        }
                    }
                    return 0;
                }
            case 8:
                throw new Error('TODO: cmap format 8');
            case 6:
            case 10:
                return cmap.glyphIndices.get(codepoint - cmap.firstCode) || 0;
            case 12:
            case 13:
                {
                    let min = 0;
                    let max = cmap.nGroups - 1;
                    while(min <= max){
                        let mid = min + max >> 1;
                        let group = cmap.groups.get(mid);
                        if (codepoint < group.startCharCode) max = mid - 1;
                        else if (codepoint > group.endCharCode) min = mid + 1;
                        else {
                            if (cmap.version === 12) return group.glyphID + (codepoint - group.startCharCode);
                            else return group.glyphID;
                        }
                    }
                    return 0;
                }
            case 14:
                throw new Error('TODO: cmap format 14');
            default:
                throw new Error(`Unknown cmap format ${cmap.version}`);
        }
    }
    getVariationSelector(codepoint, variationSelector) {
        if (!this.uvs) return 0;
        let selectors = this.uvs.varSelectors.toArray();
        let i = $f3ad94c9f84f4d57$export$2e0ae67339d5f1ac(selectors, (x)=>variationSelector - x.varSelector
        );
        let sel = selectors[i];
        if (i !== -1 && sel.defaultUVS) i = $f3ad94c9f84f4d57$export$2e0ae67339d5f1ac(sel.defaultUVS, (x)=>codepoint < x.startUnicodeValue ? -1 : codepoint > x.startUnicodeValue + x.additionalCount ? 1 : 0
        );
        if (i !== -1 && sel.nonDefaultUVS) {
            i = $f3ad94c9f84f4d57$export$2e0ae67339d5f1ac(sel.nonDefaultUVS, (x)=>codepoint - x.unicodeValue
            );
            if (i !== -1) return sel.nonDefaultUVS[i].glyphID;
        }
        return 0;
    }
    getCharacterSet() {
        let cmap = this.cmap;
        switch(cmap.version){
            case 0:
                return $f3ad94c9f84f4d57$export$d02631cccf789723(0, cmap.codeMap.length);
            case 4:
                {
                    let res = [];
                    let endCodes = cmap.endCode.toArray();
                    for(let i = 0; i < endCodes.length; i++){
                        let tail = endCodes[i] + 1;
                        let start = cmap.startCode.get(i);
                        res.push(...$f3ad94c9f84f4d57$export$d02631cccf789723(start, tail));
                    }
                    return res;
                }
            case 8:
                throw new Error('TODO: cmap format 8');
            case 6:
            case 10:
                return $f3ad94c9f84f4d57$export$d02631cccf789723(cmap.firstCode, cmap.firstCode + cmap.glyphIndices.length);
            case 12:
            case 13:
                {
                    let res = [];
                    for (let group of cmap.groups.toArray())res.push(...$f3ad94c9f84f4d57$export$d02631cccf789723(group.startCharCode, group.endCharCode + 1));
                    return res;
                }
            case 14:
                throw new Error('TODO: cmap format 14');
            default:
                throw new Error(`Unknown cmap format ${cmap.version}`);
        }
    }
    codePointsForGlyph(gid) {
        let cmap = this.cmap;
        switch(cmap.version){
            case 0:
                {
                    let res = [];
                    for(let i = 0; i < 256; i++)if (cmap.codeMap.get(i) === gid) res.push(i);
                    return res;
                }
            case 4:
                {
                    let res = [];
                    for(let i = 0; i < cmap.segCount; i++){
                        let end = cmap.endCode.get(i);
                        let start = cmap.startCode.get(i);
                        let rangeOffset = cmap.idRangeOffset.get(i);
                        let delta = cmap.idDelta.get(i);
                        for(var c = start; c <= end; c++){
                            let g = 0;
                            if (rangeOffset === 0) g = c + delta;
                            else {
                                let index = rangeOffset / 2 + (c - start) - (cmap.segCount - i);
                                g = cmap.glyphIndexArray.get(index) || 0;
                                if (g !== 0) g += delta;
                            }
                            if (g === gid) res.push(c);
                        }
                    }
                    return res;
                }
            case 12:
                {
                    let res = [];
                    for (let group of cmap.groups.toArray())if (gid >= group.glyphID && gid <= group.glyphID + (group.endCharCode - group.startCharCode)) res.push(group.startCharCode + (gid - group.glyphID));
                    return res;
                }
            case 13:
                {
                    let res = [];
                    for (let group of cmap.groups.toArray())if (gid === group.glyphID) res.push(...$f3ad94c9f84f4d57$export$d02631cccf789723(group.startCharCode, group.endCharCode + 1));
                    return res;
                }
            default:
                throw new Error(`Unknown cmap format ${cmap.version}`);
        }
    }
}, _applyDecoratedDescriptor(_class.prototype, "getCharacterSet", [
    $df9bc573962369ff$export$69a3209f1a06c04d
], Object.getOwnPropertyDescriptor(_class.prototype, "getCharacterSet"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "codePointsForGlyph", [
    $df9bc573962369ff$export$69a3209f1a06c04d
], Object.getOwnPropertyDescriptor(_class.prototype, "codePointsForGlyph"), _class.prototype), _class);
class $8526e21034212dc1$export$2e2bcd8739ae039 {
    constructor(font){
        this.kern = font.kern;
    }
    process(glyphs, positions) {
        for(let glyphIndex = 0; glyphIndex < glyphs.length - 1; glyphIndex++){
            let left = glyphs[glyphIndex].id;
            let right = glyphs[glyphIndex + 1].id;
            positions[glyphIndex].xAdvance += this.getKerning(left, right);
        }
    }
    getKerning(left, right) {
        let res = 0;
        for (let table of this.kern.tables){
            if (table.coverage.crossStream) continue;
            switch(table.version){
                case 0:
                    if (!table.coverage.horizontal) continue;
                    break;
                case 1:
                    if (table.coverage.vertical || table.coverage.variation) continue;
                    break;
                default:
                    throw new Error(`Unsupported kerning table version ${table.version}`);
            }
            let val = 0;
            let s = table.subtable;
            switch(table.format){
                case 0:
                    let pairIdx = $f3ad94c9f84f4d57$export$2e0ae67339d5f1ac(s.pairs, function(pair) {
                        return left - pair.left || right - pair.right;
                    });
                    if (pairIdx >= 0) val = s.pairs[pairIdx].value;
                    break;
                case 2:
                    let leftOffset = 0, rightOffset = 0;
                    if (left >= s.leftTable.firstGlyph && left < s.leftTable.firstGlyph + s.leftTable.nGlyphs) leftOffset = s.leftTable.offsets[left - s.leftTable.firstGlyph];
                    else leftOffset = s.array.off;
                    if (right >= s.rightTable.firstGlyph && right < s.rightTable.firstGlyph + s.rightTable.nGlyphs) rightOffset = s.rightTable.offsets[right - s.rightTable.firstGlyph];
                    let index = (leftOffset + rightOffset - s.array.off) / 2;
                    val = s.array.values.get(index);
                    break;
                case 3:
                    if (left >= s.glyphCount || right >= s.glyphCount) return 0;
                    val = s.kernValue[s.kernIndex[s.leftClass[left] * s.rightClassCount + s.rightClass[right]]];
                    break;
                default:
                    throw new Error(`Unsupported kerning sub-table format ${table.format}`);
            }
            if (table.coverage.override) res = val;
            else res += val;
        }
        return res;
    }
}
class $e4967fef9afc586a$export$2e2bcd8739ae039 {
    constructor(font){
        this.font = font;
    }
    positionGlyphs(glyphs, positions) {
        let clusterStart = 0;
        let clusterEnd = 0;
        for(let index = 0; index < glyphs.length; index++){
            let glyph = glyphs[index];
            if (glyph.isMark) clusterEnd = index;
            else {
                if (clusterStart !== clusterEnd) this.positionCluster(glyphs, positions, clusterStart, clusterEnd);
                clusterStart = clusterEnd = index;
            }
        }
        if (clusterStart !== clusterEnd) this.positionCluster(glyphs, positions, clusterStart, clusterEnd);
        return positions;
    }
    positionCluster(glyphs, positions, clusterStart, clusterEnd) {
        let base = glyphs[clusterStart];
        let baseBox = base.cbox.copy();
        if (base.codePoints.length > 1)
        baseBox.minX += (base.codePoints.length - 1) * baseBox.width / base.codePoints.length;
        let xOffset = -positions[clusterStart].xAdvance;
        let yOffset = 0;
        let yGap = this.font.unitsPerEm / 16;
        for(let index = clusterStart + 1; index <= clusterEnd; index++){
            let mark = glyphs[index];
            let markBox = mark.cbox;
            let position = positions[index];
            let combiningClass = this.getCombiningClass(mark.codePoints[0]);
            if (combiningClass !== 'Not_Reordered') {
                position.xOffset = position.yOffset = 0;
                switch(combiningClass){
                    case 'Double_Above':
                    case 'Double_Below':
                        position.xOffset += baseBox.minX - markBox.width / 2 - markBox.minX;
                        break;
                    case 'Attached_Below_Left':
                    case 'Below_Left':
                    case 'Above_Left':
                        position.xOffset += baseBox.minX - markBox.minX;
                        break;
                    case 'Attached_Above_Right':
                    case 'Below_Right':
                    case 'Above_Right':
                        position.xOffset += baseBox.maxX - markBox.width - markBox.minX;
                        break;
                    default:
                        position.xOffset += baseBox.minX + (baseBox.width - markBox.width) / 2 - markBox.minX;
                }
                switch(combiningClass){
                    case 'Double_Below':
                    case 'Below_Left':
                    case 'Below':
                    case 'Below_Right':
                    case 'Attached_Below_Left':
                    case 'Attached_Below':
                        if (combiningClass === 'Attached_Below_Left' || combiningClass === 'Attached_Below') baseBox.minY += yGap;
                        position.yOffset = -baseBox.minY - markBox.maxY;
                        baseBox.minY += markBox.height;
                        break;
                    case 'Double_Above':
                    case 'Above_Left':
                    case 'Above':
                    case 'Above_Right':
                    case 'Attached_Above':
                    case 'Attached_Above_Right':
                        if (combiningClass === 'Attached_Above' || combiningClass === 'Attached_Above_Right') baseBox.maxY += yGap;
                        position.yOffset = baseBox.maxY - markBox.minY;
                        baseBox.maxY += markBox.height;
                        break;
                }
                position.xAdvance = position.yAdvance = 0;
                position.xOffset += xOffset;
                position.yOffset += yOffset;
            } else {
                xOffset -= position.xAdvance;
                yOffset -= position.yAdvance;
            }
        }
        return;
    }
    getCombiningClass(codePoint) {
        let combiningClass = $747425b437e121da$export$2e2bcd8739ae039.getCombiningClass(codePoint);
        if ((codePoint & -256) === 0x0e00) {
            if (combiningClass === 'Not_Reordered') switch(codePoint){
                case 0x0e31:
                case 0x0e34:
                case 0x0e35:
                case 0x0e36:
                case 0x0e37:
                case 0x0e47:
                case 0x0e4c:
                case 0x0e3d:
                case 0x0e4e:
                    return 'Above_Right';
                case 0x0eb1:
                case 0x0eb4:
                case 0x0eb5:
                case 0x0eb6:
                case 0x0eb7:
                case 0x0ebb:
                case 0x0ecc:
                case 0x0ecd:
                    return 'Above';
                case 0x0ebc:
                    return 'Below';
            }
            else if (codePoint === 0x0e3a) return 'Below_Right';
        }
        switch(combiningClass){
            case 'CCC10':
            case 'CCC11':
            case 'CCC12':
            case 'CCC13':
            case 'CCC14':
            case 'CCC15':
            case 'CCC16':
            case 'CCC17':
            case 'CCC18':
            case 'CCC20':
            case 'CCC22':
                return 'Below';
            case 'CCC23':
                return 'Attached_Above';
            case 'CCC24':
                return 'Above_Right';
            case 'CCC25':
            case 'CCC19':
                return 'Above_Left';
            case 'CCC26':
                return 'Above';
            case 'CCC21':
                break;
            case 'CCC27':
            case 'CCC28':
            case 'CCC30':
            case 'CCC31':
            case 'CCC33':
            case 'CCC34':
            case 'CCC35':
            case 'CCC36':
                return 'Above';
            case 'CCC29':
            case 'CCC32':
                return 'Below';
            case 'CCC103':
                return 'Below_Right';
            case 'CCC107':
                return 'Above_Right';
            case 'CCC118':
                return 'Below';
            case 'CCC122':
                return 'Above';
            case 'CCC129':
            case 'CCC132':
                return 'Below';
            case 'CCC130':
                return 'Above';
        }
        return combiningClass;
    }
}
class $fcb46e14b01ea01f$export$2e2bcd8739ae039 {
    constructor(minX = Infinity, minY = Infinity, maxX = -Infinity, maxY = -Infinity){
 this.minX = minX;
 this.minY = minY;
 this.maxX = maxX;
 this.maxY = maxY;
    }
 get width() {
        return this.maxX - this.minX;
    }
 get height() {
        return this.maxY - this.minY;
    }
    addPoint(x, y) {
        if (Math.abs(x) !== Infinity) {
            if (x < this.minX) this.minX = x;
            if (x > this.maxX) this.maxX = x;
        }
        if (Math.abs(y) !== Infinity) {
            if (y < this.minY) this.minY = y;
            if (y > this.maxY) this.maxY = y;
        }
    }
    copy() {
        return new $fcb46e14b01ea01f$export$2e2bcd8739ae039(this.minX, this.minY, this.maxX, this.maxY);
    }
}
const $a5878e4f4663c9e2$var$UNICODE_SCRIPTS = {
    Caucasian_Albanian: 'aghb',
    Arabic: 'arab',
    Imperial_Aramaic: 'armi',
    Armenian: 'armn',
    Avestan: 'avst',
    Balinese: 'bali',
    Bamum: 'bamu',
    Bassa_Vah: 'bass',
    Batak: 'batk',
    Bengali: [
        'bng2',
        'beng'
    ],
    Bopomofo: 'bopo',
    Brahmi: 'brah',
    Braille: 'brai',
    Buginese: 'bugi',
    Buhid: 'buhd',
    Chakma: 'cakm',
    Canadian_Aboriginal: 'cans',
    Carian: 'cari',
    Cham: 'cham',
    Cherokee: 'cher',
    Coptic: 'copt',
    Cypriot: 'cprt',
    Cyrillic: 'cyrl',
    Devanagari: [
        'dev2',
        'deva'
    ],
    Deseret: 'dsrt',
    Duployan: 'dupl',
    Egyptian_Hieroglyphs: 'egyp',
    Elbasan: 'elba',
    Ethiopic: 'ethi',
    Georgian: 'geor',
    Glagolitic: 'glag',
    Gothic: 'goth',
    Grantha: 'gran',
    Greek: 'grek',
    Gujarati: [
        'gjr2',
        'gujr'
    ],
    Gurmukhi: [
        'gur2',
        'guru'
    ],
    Hangul: 'hang',
    Han: 'hani',
    Hanunoo: 'hano',
    Hebrew: 'hebr',
    Hiragana: 'hira',
    Pahawh_Hmong: 'hmng',
    Katakana_Or_Hiragana: 'hrkt',
    Old_Italic: 'ital',
    Javanese: 'java',
    Kayah_Li: 'kali',
    Katakana: 'kana',
    Kharoshthi: 'khar',
    Khmer: 'khmr',
    Khojki: 'khoj',
    Kannada: [
        'knd2',
        'knda'
    ],
    Kaithi: 'kthi',
    Tai_Tham: 'lana',
    Lao: 'lao ',
    Latin: 'latn',
    Lepcha: 'lepc',
    Limbu: 'limb',
    Linear_A: 'lina',
    Linear_B: 'linb',
    Lisu: 'lisu',
    Lycian: 'lyci',
    Lydian: 'lydi',
    Mahajani: 'mahj',
    Mandaic: 'mand',
    Manichaean: 'mani',
    Mende_Kikakui: 'mend',
    Meroitic_Cursive: 'merc',
    Meroitic_Hieroglyphs: 'mero',
    Malayalam: [
        'mlm2',
        'mlym'
    ],
    Modi: 'modi',
    Mongolian: 'mong',
    Mro: 'mroo',
    Meetei_Mayek: 'mtei',
    Myanmar: [
        'mym2',
        'mymr'
    ],
    Old_North_Arabian: 'narb',
    Nabataean: 'nbat',
    Nko: 'nko ',
    Ogham: 'ogam',
    Ol_Chiki: 'olck',
    Old_Turkic: 'orkh',
    Oriya: [
        'ory2',
        'orya'
    ],
    Osmanya: 'osma',
    Palmyrene: 'palm',
    Pau_Cin_Hau: 'pauc',
    Old_Permic: 'perm',
    Phags_Pa: 'phag',
    Inscriptional_Pahlavi: 'phli',
    Psalter_Pahlavi: 'phlp',
    Phoenician: 'phnx',
    Miao: 'plrd',
    Inscriptional_Parthian: 'prti',
    Rejang: 'rjng',
    Runic: 'runr',
    Samaritan: 'samr',
    Old_South_Arabian: 'sarb',
    Saurashtra: 'saur',
    Shavian: 'shaw',
    Sharada: 'shrd',
    Siddham: 'sidd',
    Khudawadi: 'sind',
    Sinhala: 'sinh',
    Sora_Sompeng: 'sora',
    Sundanese: 'sund',
    Syloti_Nagri: 'sylo',
    Syriac: 'syrc',
    Tagbanwa: 'tagb',
    Takri: 'takr',
    Tai_Le: 'tale',
    New_Tai_Lue: 'talu',
    Tamil: [
        'tml2',
        'taml'
    ],
    Tai_Viet: 'tavt',
    Telugu: [
        'tel2',
        'telu'
    ],
    Tifinagh: 'tfng',
    Tagalog: 'tglg',
    Thaana: 'thaa',
    Thai: 'thai',
    Tibetan: 'tibt',
    Tirhuta: 'tirh',
    Ugaritic: 'ugar',
    Vai: 'vai ',
    Warang_Citi: 'wara',
    Old_Persian: 'xpeo',
    Cuneiform: 'xsux',
    Yi: 'yi  ',
    Inherited: 'zinh',
    Common: 'zyyy',
    Unknown: 'zzzz'
};
const $a5878e4f4663c9e2$var$OPENTYPE_SCRIPTS = {};
for(let script in $a5878e4f4663c9e2$var$UNICODE_SCRIPTS){
    let tag = $a5878e4f4663c9e2$var$UNICODE_SCRIPTS[script];
    if (Array.isArray(tag)) for (let t of tag)$a5878e4f4663c9e2$var$OPENTYPE_SCRIPTS[t] = script;
    else $a5878e4f4663c9e2$var$OPENTYPE_SCRIPTS[tag] = script;
}
function $a5878e4f4663c9e2$export$ce50e82f12a827a4(tag) {
    return $a5878e4f4663c9e2$var$OPENTYPE_SCRIPTS[tag];
}
function $a5878e4f4663c9e2$export$e5cb25e204fb8450(string) {
    let len = string.length;
    let idx = 0;
    while(idx < len){
        let code = string.charCodeAt(idx++);
        if (0xd800 <= code && code <= 0xdbff && idx < len) {
            let next = string.charCodeAt(idx);
            if (0xdc00 <= next && next <= 0xdfff) {
                idx++;
                code = ((code & 0x3FF) << 10) + (next & 0x3FF) + 0x10000;
            }
        }
        let script2 = $747425b437e121da$export$2e2bcd8739ae039.getScript(code);
        if (script2 !== 'Common' && script2 !== 'Inherited' && script2 !== 'Unknown') return $a5878e4f4663c9e2$var$UNICODE_SCRIPTS[script2];
    }
    return $a5878e4f4663c9e2$var$UNICODE_SCRIPTS.Unknown;
}
function $a5878e4f4663c9e2$export$16fab0757cfc223d(codePoints) {
    for(let i = 0; i < codePoints.length; i++){
        let codePoint = codePoints[i];
        let script3 = $747425b437e121da$export$2e2bcd8739ae039.getScript(codePoint);
        if (script3 !== 'Common' && script3 !== 'Inherited' && script3 !== 'Unknown') return $a5878e4f4663c9e2$var$UNICODE_SCRIPTS[script3];
    }
    return $a5878e4f4663c9e2$var$UNICODE_SCRIPTS.Unknown;
}
const $a5878e4f4663c9e2$var$RTL = {
    arab: true,
    hebr: true,
    syrc: true,
    thaa: true,
    cprt: true,
    khar: true,
    phnx: true,
    'nko ': true,
    lydi: true,
    avst: true,
    armi: true,
    phli: true,
    prti: true,
    sarb: true,
    orkh: true,
    samr: true,
    mand: true,
    merc: true,
    mero: true,
    mani: true,
    mend: true,
    nbat: true,
    narb: true,
    palm: true,
    phlp: true
};
function $a5878e4f4663c9e2$export$9fddb9d0dd7d8a54(script4) {
    if ($a5878e4f4663c9e2$var$RTL[script4]) return 'rtl';
    return 'ltr';
}
class $5a6ae00fa7e614b0$export$2e2bcd8739ae039 {
    constructor(glyphs, features, script, language, direction){
 this.glyphs = glyphs;
 this.positions = null;
 this.script = script;
 this.language = language || null;
 this.direction = direction || $a5878e4f4663c9e2$export$9fddb9d0dd7d8a54(script);
 this.features = {};
        if (Array.isArray(features)) for (let tag of features)this.features[tag] = true;
        else if (typeof features === 'object') this.features = features;
    }
 get advanceWidth() {
        let width = 0;
        for (let position of this.positions)width += position.xAdvance;
        return width;
    }
 get advanceHeight() {
        let height = 0;
        for (let position of this.positions)height += position.yAdvance;
        return height;
    }
 get bbox() {
        let bbox = new $fcb46e14b01ea01f$export$2e2bcd8739ae039;
        let x = 0;
        let y = 0;
        for(let index = 0; index < this.glyphs.length; index++){
            let glyph = this.glyphs[index];
            let p = this.positions[index];
            let b = glyph.bbox;
            bbox.addPoint(b.minX + x + p.xOffset, b.minY + y + p.yOffset);
            bbox.addPoint(b.maxX + x + p.xOffset, b.maxY + y + p.yOffset);
            x += p.xAdvance;
            y += p.yAdvance;
        }
        return bbox;
    }
}
class $4bff5f854806c785$export$2e2bcd8739ae039 {
    constructor(xAdvance = 0, yAdvance = 0, xOffset = 0, yOffset = 0){
 this.xAdvance = xAdvance;
 this.yAdvance = yAdvance;
 this.xOffset = xOffset;
 this.yOffset = yOffset;
    }
}
const $b603e0ade09ad01e$var$features = {
    allTypographicFeatures: {
        code: 0,
        exclusive: false,
        allTypeFeatures: 0
    },
    ligatures: {
        code: 1,
        exclusive: false,
        requiredLigatures: 0,
        commonLigatures: 2,
        rareLigatures: 4,
        rebusPictures: 8,
        diphthongLigatures: 10,
        squaredLigatures: 12,
        abbrevSquaredLigatures: 14,
        symbolLigatures: 16,
        contextualLigatures: 18,
        historicalLigatures: 20
    },
    cursiveConnection: {
        code: 2,
        exclusive: true,
        unconnected: 0,
        partiallyConnected: 1,
        cursive: 2
    },
    letterCase: {
        code: 3,
        exclusive: true
    },
    verticalSubstitution: {
        code: 4,
        exclusive: false,
        substituteVerticalForms: 0
    },
    linguisticRearrangement: {
        code: 5,
        exclusive: false,
        linguisticRearrangement: 0
    },
    numberSpacing: {
        code: 6,
        exclusive: true,
        monospacedNumbers: 0,
        proportionalNumbers: 1,
        thirdWidthNumbers: 2,
        quarterWidthNumbers: 3
    },
    smartSwash: {
        code: 8,
        exclusive: false,
        wordInitialSwashes: 0,
        wordFinalSwashes: 2,
        nonFinalSwashes: 8
    },
    diacritics: {
        code: 9,
        exclusive: true,
        showDiacritics: 0,
        hideDiacritics: 1,
        decomposeDiacritics: 2
    },
    verticalPosition: {
        code: 10,
        exclusive: true,
        normalPosition: 0,
        superiors: 1,
        inferiors: 2,
        ordinals: 3,
        scientificInferiors: 4
    },
    fractions: {
        code: 11,
        exclusive: true,
        noFractions: 0,
        verticalFractions: 1,
        diagonalFractions: 2
    },
    overlappingCharacters: {
        code: 13,
        exclusive: false,
        preventOverlap: 0
    },
    typographicExtras: {
        code: 14,
        exclusive: false,
        slashedZero: 4
    },
    mathematicalExtras: {
        code: 15,
        exclusive: false,
        mathematicalGreek: 10
    },
    ornamentSets: {
        code: 16,
        exclusive: true,
        noOrnaments: 0,
        dingbats: 1,
        piCharacters: 2,
        fleurons: 3,
        decorativeBorders: 4,
        internationalSymbols: 5,
        mathSymbols: 6
    },
    characterAlternatives: {
        code: 17,
        exclusive: true,
        noAlternates: 0
    },
    designComplexity: {
        code: 18,
        exclusive: true,
        designLevel1: 0,
        designLevel2: 1,
        designLevel3: 2,
        designLevel4: 3,
        designLevel5: 4
    },
    styleOptions: {
        code: 19,
        exclusive: true,
        noStyleOptions: 0,
        displayText: 1,
        engravedText: 2,
        illuminatedCaps: 3,
        titlingCaps: 4,
        tallCaps: 5
    },
    characterShape: {
        code: 20,
        exclusive: true,
        traditionalCharacters: 0,
        simplifiedCharacters: 1,
        JIS1978Characters: 2,
        JIS1983Characters: 3,
        JIS1990Characters: 4,
        traditionalAltOne: 5,
        traditionalAltTwo: 6,
        traditionalAltThree: 7,
        traditionalAltFour: 8,
        traditionalAltFive: 9,
        expertCharacters: 10,
        JIS2004Characters: 11,
        hojoCharacters: 12,
        NLCCharacters: 13,
        traditionalNamesCharacters: 14
    },
    numberCase: {
        code: 21,
        exclusive: true,
        lowerCaseNumbers: 0,
        upperCaseNumbers: 1
    },
    textSpacing: {
        code: 22,
        exclusive: true,
        proportionalText: 0,
        monospacedText: 1,
        halfWidthText: 2,
        thirdWidthText: 3,
        quarterWidthText: 4,
        altProportionalText: 5,
        altHalfWidthText: 6
    },
    transliteration: {
        code: 23,
        exclusive: true,
        noTransliteration: 0
    },
    annotation: {
        code: 24,
        exclusive: true,
        noAnnotation: 0,
        boxAnnotation: 1,
        roundedBoxAnnotation: 2,
        circleAnnotation: 3,
        invertedCircleAnnotation: 4,
        parenthesisAnnotation: 5,
        periodAnnotation: 6,
        romanNumeralAnnotation: 7,
        diamondAnnotation: 8,
        invertedBoxAnnotation: 9,
        invertedRoundedBoxAnnotation: 10
    },
    kanaSpacing: {
        code: 25,
        exclusive: true,
        fullWidthKana: 0,
        proportionalKana: 1
    },
    ideographicSpacing: {
        code: 26,
        exclusive: true,
        fullWidthIdeographs: 0,
        proportionalIdeographs: 1,
        halfWidthIdeographs: 2
    },
    unicodeDecomposition: {
        code: 27,
        exclusive: false,
        canonicalComposition: 0,
        compatibilityComposition: 2,
        transcodingComposition: 4
    },
    rubyKana: {
        code: 28,
        exclusive: false,
        rubyKana: 2
    },
    CJKSymbolAlternatives: {
        code: 29,
        exclusive: true,
        noCJKSymbolAlternatives: 0,
        CJKSymbolAltOne: 1,
        CJKSymbolAltTwo: 2,
        CJKSymbolAltThree: 3,
        CJKSymbolAltFour: 4,
        CJKSymbolAltFive: 5
    },
    ideographicAlternatives: {
        code: 30,
        exclusive: true,
        noIdeographicAlternatives: 0,
        ideographicAltOne: 1,
        ideographicAltTwo: 2,
        ideographicAltThree: 3,
        ideographicAltFour: 4,
        ideographicAltFive: 5
    },
    CJKVerticalRomanPlacement: {
        code: 31,
        exclusive: true,
        CJKVerticalRomanCentered: 0,
        CJKVerticalRomanHBaseline: 1
    },
    italicCJKRoman: {
        code: 32,
        exclusive: false,
        CJKItalicRoman: 2
    },
    caseSensitiveLayout: {
        code: 33,
        exclusive: false,
        caseSensitiveLayout: 0,
        caseSensitiveSpacing: 2
    },
    alternateKana: {
        code: 34,
        exclusive: false,
        alternateHorizKana: 0,
        alternateVertKana: 2
    },
    stylisticAlternatives: {
        code: 35,
        exclusive: false,
        noStylisticAlternates: 0,
        stylisticAltOne: 2,
        stylisticAltTwo: 4,
        stylisticAltThree: 6,
        stylisticAltFour: 8,
        stylisticAltFive: 10,
        stylisticAltSix: 12,
        stylisticAltSeven: 14,
        stylisticAltEight: 16,
        stylisticAltNine: 18,
        stylisticAltTen: 20,
        stylisticAltEleven: 22,
        stylisticAltTwelve: 24,
        stylisticAltThirteen: 26,
        stylisticAltFourteen: 28,
        stylisticAltFifteen: 30,
        stylisticAltSixteen: 32,
        stylisticAltSeventeen: 34,
        stylisticAltEighteen: 36,
        stylisticAltNineteen: 38,
        stylisticAltTwenty: 40
    },
    contextualAlternates: {
        code: 36,
        exclusive: false,
        contextualAlternates: 0,
        swashAlternates: 2,
        contextualSwashAlternates: 4
    },
    lowerCase: {
        code: 37,
        exclusive: true,
        defaultLowerCase: 0,
        lowerCaseSmallCaps: 1,
        lowerCasePetiteCaps: 2
    },
    upperCase: {
        code: 38,
        exclusive: true,
        defaultUpperCase: 0,
        upperCaseSmallCaps: 1,
        upperCasePetiteCaps: 2
    },
    languageTag: {
        code: 39,
        exclusive: true
    },
    CJKRomanSpacing: {
        code: 103,
        exclusive: true,
        halfWidthCJKRoman: 0,
        proportionalCJKRoman: 1,
        defaultCJKRoman: 2,
        fullWidthCJKRoman: 3
    }
};
const $b603e0ade09ad01e$var$feature = (name, selector)=>[
        $b603e0ade09ad01e$var$features[name].code,
        $b603e0ade09ad01e$var$features[name][selector]
    ]
;
const $b603e0ade09ad01e$var$OTMapping = {
    rlig: $b603e0ade09ad01e$var$feature('ligatures', 'requiredLigatures'),
    clig: $b603e0ade09ad01e$var$feature('ligatures', 'contextualLigatures'),
    dlig: $b603e0ade09ad01e$var$feature('ligatures', 'rareLigatures'),
    hlig: $b603e0ade09ad01e$var$feature('ligatures', 'historicalLigatures'),
    liga: $b603e0ade09ad01e$var$feature('ligatures', 'commonLigatures'),
    hist: $b603e0ade09ad01e$var$feature('ligatures', 'historicalLigatures'),
    smcp: $b603e0ade09ad01e$var$feature('lowerCase', 'lowerCaseSmallCaps'),
    pcap: $b603e0ade09ad01e$var$feature('lowerCase', 'lowerCasePetiteCaps'),
    frac: $b603e0ade09ad01e$var$feature('fractions', 'diagonalFractions'),
    dnom: $b603e0ade09ad01e$var$feature('fractions', 'diagonalFractions'),
    numr: $b603e0ade09ad01e$var$feature('fractions', 'diagonalFractions'),
    afrc: $b603e0ade09ad01e$var$feature('fractions', 'verticalFractions'),
    case: $b603e0ade09ad01e$var$feature('caseSensitiveLayout', 'caseSensitiveLayout'),
    ccmp: $b603e0ade09ad01e$var$feature('unicodeDecomposition', 'canonicalComposition'),
    cpct: $b603e0ade09ad01e$var$feature('CJKVerticalRomanPlacement', 'CJKVerticalRomanCentered'),
    valt: $b603e0ade09ad01e$var$feature('CJKVerticalRomanPlacement', 'CJKVerticalRomanCentered'),
    swsh: $b603e0ade09ad01e$var$feature('contextualAlternates', 'swashAlternates'),
    cswh: $b603e0ade09ad01e$var$feature('contextualAlternates', 'contextualSwashAlternates'),
    curs: $b603e0ade09ad01e$var$feature('cursiveConnection', 'cursive'),
    c2pc: $b603e0ade09ad01e$var$feature('upperCase', 'upperCasePetiteCaps'),
    c2sc: $b603e0ade09ad01e$var$feature('upperCase', 'upperCaseSmallCaps'),
    init: $b603e0ade09ad01e$var$feature('smartSwash', 'wordInitialSwashes'),
    fin2: $b603e0ade09ad01e$var$feature('smartSwash', 'wordFinalSwashes'),
    medi: $b603e0ade09ad01e$var$feature('smartSwash', 'nonFinalSwashes'),
    med2: $b603e0ade09ad01e$var$feature('smartSwash', 'nonFinalSwashes'),
    fin3: $b603e0ade09ad01e$var$feature('smartSwash', 'wordFinalSwashes'),
    fina: $b603e0ade09ad01e$var$feature('smartSwash', 'wordFinalSwashes'),
    pkna: $b603e0ade09ad01e$var$feature('kanaSpacing', 'proportionalKana'),
    half: $b603e0ade09ad01e$var$feature('textSpacing', 'halfWidthText'),
    halt: $b603e0ade09ad01e$var$feature('textSpacing', 'altHalfWidthText'),
    hkna: $b603e0ade09ad01e$var$feature('alternateKana', 'alternateHorizKana'),
    vkna: $b603e0ade09ad01e$var$feature('alternateKana', 'alternateVertKana'),
    ital: $b603e0ade09ad01e$var$feature('italicCJKRoman', 'CJKItalicRoman'),
    lnum: $b603e0ade09ad01e$var$feature('numberCase', 'upperCaseNumbers'),
    onum: $b603e0ade09ad01e$var$feature('numberCase', 'lowerCaseNumbers'),
    mgrk: $b603e0ade09ad01e$var$feature('mathematicalExtras', 'mathematicalGreek'),
    calt: $b603e0ade09ad01e$var$feature('contextualAlternates', 'contextualAlternates'),
    vrt2: $b603e0ade09ad01e$var$feature('verticalSubstitution', 'substituteVerticalForms'),
    vert: $b603e0ade09ad01e$var$feature('verticalSubstitution', 'substituteVerticalForms'),
    tnum: $b603e0ade09ad01e$var$feature('numberSpacing', 'monospacedNumbers'),
    pnum: $b603e0ade09ad01e$var$feature('numberSpacing', 'proportionalNumbers'),
    sups: $b603e0ade09ad01e$var$feature('verticalPosition', 'superiors'),
    subs: $b603e0ade09ad01e$var$feature('verticalPosition', 'inferiors'),
    ordn: $b603e0ade09ad01e$var$feature('verticalPosition', 'ordinals'),
    pwid: $b603e0ade09ad01e$var$feature('textSpacing', 'proportionalText'),
    hwid: $b603e0ade09ad01e$var$feature('textSpacing', 'halfWidthText'),
    qwid: $b603e0ade09ad01e$var$feature('textSpacing', 'quarterWidthText'),
    twid: $b603e0ade09ad01e$var$feature('textSpacing', 'thirdWidthText'),
    fwid: $b603e0ade09ad01e$var$feature('textSpacing', 'proportionalText'),
    palt: $b603e0ade09ad01e$var$feature('textSpacing', 'altProportionalText'),
    trad: $b603e0ade09ad01e$var$feature('characterShape', 'traditionalCharacters'),
    smpl: $b603e0ade09ad01e$var$feature('characterShape', 'simplifiedCharacters'),
    jp78: $b603e0ade09ad01e$var$feature('characterShape', 'JIS1978Characters'),
    jp83: $b603e0ade09ad01e$var$feature('characterShape', 'JIS1983Characters'),
    jp90: $b603e0ade09ad01e$var$feature('characterShape', 'JIS1990Characters'),
    jp04: $b603e0ade09ad01e$var$feature('characterShape', 'JIS2004Characters'),
    expt: $b603e0ade09ad01e$var$feature('characterShape', 'expertCharacters'),
    hojo: $b603e0ade09ad01e$var$feature('characterShape', 'hojoCharacters'),
    nlck: $b603e0ade09ad01e$var$feature('characterShape', 'NLCCharacters'),
    tnam: $b603e0ade09ad01e$var$feature('characterShape', 'traditionalNamesCharacters'),
    ruby: $b603e0ade09ad01e$var$feature('rubyKana', 'rubyKana'),
    titl: $b603e0ade09ad01e$var$feature('styleOptions', 'titlingCaps'),
    zero: $b603e0ade09ad01e$var$feature('typographicExtras', 'slashedZero'),
    ss01: $b603e0ade09ad01e$var$feature('stylisticAlternatives', 'stylisticAltOne'),
    ss02: $b603e0ade09ad01e$var$feature('stylisticAlternatives', 'stylisticAltTwo'),
    ss03: $b603e0ade09ad01e$var$feature('stylisticAlternatives', 'stylisticAltThree'),
    ss04: $b603e0ade09ad01e$var$feature('stylisticAlternatives', 'stylisticAltFour'),
    ss05: $b603e0ade09ad01e$var$feature('stylisticAlternatives', 'stylisticAltFive'),
    ss06: $b603e0ade09ad01e$var$feature('stylisticAlternatives', 'stylisticAltSix'),
    ss07: $b603e0ade09ad01e$var$feature('stylisticAlternatives', 'stylisticAltSeven'),
    ss08: $b603e0ade09ad01e$var$feature('stylisticAlternatives', 'stylisticAltEight'),
    ss09: $b603e0ade09ad01e$var$feature('stylisticAlternatives', 'stylisticAltNine'),
    ss10: $b603e0ade09ad01e$var$feature('stylisticAlternatives', 'stylisticAltTen'),
    ss11: $b603e0ade09ad01e$var$feature('stylisticAlternatives', 'stylisticAltEleven'),
    ss12: $b603e0ade09ad01e$var$feature('stylisticAlternatives', 'stylisticAltTwelve'),
    ss13: $b603e0ade09ad01e$var$feature('stylisticAlternatives', 'stylisticAltThirteen'),
    ss14: $b603e0ade09ad01e$var$feature('stylisticAlternatives', 'stylisticAltFourteen'),
    ss15: $b603e0ade09ad01e$var$feature('stylisticAlternatives', 'stylisticAltFifteen'),
    ss16: $b603e0ade09ad01e$var$feature('stylisticAlternatives', 'stylisticAltSixteen'),
    ss17: $b603e0ade09ad01e$var$feature('stylisticAlternatives', 'stylisticAltSeventeen'),
    ss18: $b603e0ade09ad01e$var$feature('stylisticAlternatives', 'stylisticAltEighteen'),
    ss19: $b603e0ade09ad01e$var$feature('stylisticAlternatives', 'stylisticAltNineteen'),
    ss20: $b603e0ade09ad01e$var$feature('stylisticAlternatives', 'stylisticAltTwenty')
};
for(let i = 1; i <= 99; i++)$b603e0ade09ad01e$var$OTMapping[`cv${`00${i}`.slice(-2)}`] = [
    $b603e0ade09ad01e$var$features.characterAlternatives.code,
    i
];
let $b603e0ade09ad01e$var$AATMapping = {};
for(let ot in $b603e0ade09ad01e$var$OTMapping){
    let aat = $b603e0ade09ad01e$var$OTMapping[ot];
    if ($b603e0ade09ad01e$var$AATMapping[aat[0]] == null) $b603e0ade09ad01e$var$AATMapping[aat[0]] = {};
    $b603e0ade09ad01e$var$AATMapping[aat[0]][aat[1]] = ot;
}
function $b603e0ade09ad01e$export$b813f7d2a1677c16(features) {
    let res = {};
    for(let k in features){
        let r;
        if (r = $b603e0ade09ad01e$var$OTMapping[k]) {
            if (res[r[0]] == null) res[r[0]] = {};
            res[r[0]][r[1]] = features[k];
        }
    }
    return res;
}
function $b603e0ade09ad01e$var$mapFeatureStrings(f) {
    let [type, setting] = f;
    if (isNaN(type)) var typeCode = $b603e0ade09ad01e$var$features[type] && $b603e0ade09ad01e$var$features[type].code;
    else var typeCode = type;
    if (isNaN(setting)) var settingCode = $b603e0ade09ad01e$var$features[type] && $b603e0ade09ad01e$var$features[type][setting];
    else var settingCode = setting;
    return [
        typeCode,
        settingCode
    ];
}
function $b603e0ade09ad01e$export$bd6df347a4f391c4(features) {
    let res = {};
    if (Array.isArray(features)) for(let k = 0; k < features.length; k++){
        let r;
        let f = $b603e0ade09ad01e$var$mapFeatureStrings(features[k]);
        if (r = $b603e0ade09ad01e$var$AATMapping[f[0]] && $b603e0ade09ad01e$var$AATMapping[f[0]][f[1]]) res[r] = true;
    }
    else if (typeof features === 'object') for(let type in features){
        let feature = features[type];
        for(let setting in feature){
            let r;
            let f = $b603e0ade09ad01e$var$mapFeatureStrings([
                type,
                setting
            ]);
            if (feature[setting] && (r = $b603e0ade09ad01e$var$AATMapping[f[0]] && $b603e0ade09ad01e$var$AATMapping[f[0]][f[1]])) res[r] = true;
        }
    }
    return Object.keys(res);
}
var _class;
let $16667a2c0f0b1be5$export$2e2bcd8739ae039 = (_class = class $16667a2c0f0b1be5$export$2e2bcd8739ae039 {
    constructor(table){
        this.table = table;
    }
    lookup(glyph) {
        switch(this.table.version){
            case 0:
                return this.table.values.getItem(glyph);
            case 2:
            case 4:
                {
                    let min = 0;
                    let max = this.table.binarySearchHeader.nUnits - 1;
                    while(min <= max){
                        var mid = min + max >> 1;
                        var seg = this.table.segments[mid];
                        if (seg.firstGlyph === 0xffff) return null;
                        if (glyph < seg.firstGlyph) max = mid - 1;
                        else if (glyph > seg.lastGlyph) min = mid + 1;
                        else {
                            if (this.table.version === 2) return seg.value;
                            else return seg.values[glyph - seg.firstGlyph];
                        }
                    }
                    return null;
                }
            case 6:
                {
                    let min = 0;
                    let max = this.table.binarySearchHeader.nUnits - 1;
                    while(min <= max){
                        var mid = min + max >> 1;
                        var seg = this.table.segments[mid];
                        if (seg.glyph === 0xffff) return null;
                        if (glyph < seg.glyph) max = mid - 1;
                        else if (glyph > seg.glyph) min = mid + 1;
                        else return seg.value;
                    }
                    return null;
                }
            case 8:
                return this.table.values[glyph - this.table.firstGlyph];
            default:
                throw new Error(`Unknown lookup table format: ${this.table.version}`);
        }
    }
    glyphsForValue(classValue) {
        let res = [];
        switch(this.table.version){
            case 2:
            case 4:
                for (let segment of this.table.segments)if (this.table.version === 2 && segment.value === classValue) res.push(...$f3ad94c9f84f4d57$export$d02631cccf789723(segment.firstGlyph, segment.lastGlyph + 1));
                else {
                    for(let index = 0; index < segment.values.length; index++)if (segment.values[index] === classValue) res.push(segment.firstGlyph + index);
                }
                break;
            case 6:
                for (let segment1 of this.table.segments)if (segment1.value === classValue) res.push(segment1.glyph);
                break;
            case 8:
                for(let i = 0; i < this.table.values.length; i++)if (this.table.values[i] === classValue) res.push(this.table.firstGlyph + i);
                break;
            default:
                throw new Error(`Unknown lookup table format: ${this.table.version}`);
        }
        return res;
    }
}, _applyDecoratedDescriptor(_class.prototype, "glyphsForValue", [
    $df9bc573962369ff$export$69a3209f1a06c04d
], Object.getOwnPropertyDescriptor(_class.prototype, "glyphsForValue"), _class.prototype), _class);
const $de324b614d9ee26c$var$START_OF_TEXT_STATE = 0;
const $de324b614d9ee26c$var$END_OF_TEXT_CLASS = 0;
const $de324b614d9ee26c$var$OUT_OF_BOUNDS_CLASS = 1;
const $de324b614d9ee26c$var$DELETED_GLYPH_CLASS = 2;
const $de324b614d9ee26c$var$DONT_ADVANCE = 0x4000;
class $de324b614d9ee26c$export$2e2bcd8739ae039 {
    constructor(stateTable){
        this.stateTable = stateTable;
        this.lookupTable = new $16667a2c0f0b1be5$export$2e2bcd8739ae039(stateTable.classTable);
    }
    process(glyphs, reverse, processEntry) {
        let currentState = $de324b614d9ee26c$var$START_OF_TEXT_STATE;
        let index = reverse ? glyphs.length - 1 : 0;
        let dir = reverse ? -1 : 1;
        while(dir === 1 && index <= glyphs.length || dir === -1 && index >= -1){
            let glyph = null;
            let classCode = $de324b614d9ee26c$var$OUT_OF_BOUNDS_CLASS;
            let shouldAdvance = true;
            if (index === glyphs.length || index === -1) classCode = $de324b614d9ee26c$var$END_OF_TEXT_CLASS;
            else {
                glyph = glyphs[index];
                if (glyph.id === 0xffff) classCode = $de324b614d9ee26c$var$DELETED_GLYPH_CLASS;
                else {
                    classCode = this.lookupTable.lookup(glyph.id);
                    if (classCode == null) classCode = $de324b614d9ee26c$var$OUT_OF_BOUNDS_CLASS;
                }
            }
            let row = this.stateTable.stateArray.getItem(currentState);
            let entryIndex = row[classCode];
            let entry = this.stateTable.entryTable.getItem(entryIndex);
            if (classCode !== $de324b614d9ee26c$var$END_OF_TEXT_CLASS && classCode !== $de324b614d9ee26c$var$DELETED_GLYPH_CLASS) {
                processEntry(glyph, entry, index);
                shouldAdvance = !(entry.flags & $de324b614d9ee26c$var$DONT_ADVANCE);
            }
            currentState = entry.newState;
            if (shouldAdvance) index += dir;
        }
        return glyphs;
    }
 traverse(opts, state = 0, visited = new Set) {
        if (visited.has(state)) return;
        visited.add(state);
        let { nClasses: nClasses , stateArray: stateArray , entryTable: entryTable  } = this.stateTable;
        let row = stateArray.getItem(state);
        for(let classCode = 4; classCode < nClasses; classCode++){
            let entryIndex = row[classCode];
            let entry = entryTable.getItem(entryIndex);
            for (let glyph of this.lookupTable.glyphsForValue(classCode)){
                if (opts.enter) opts.enter(glyph, entry);
                if (entry.newState !== 0) this.traverse(opts, entry.newState, visited);
                if (opts.exit) opts.exit(glyph, entry);
            }
        }
    }
}
var _class;
const $696c050512749a50$var$MARK_FIRST = 0x8000;
const $696c050512749a50$var$MARK_LAST = 0x2000;
const $696c050512749a50$var$VERB = 0x000F;
const $696c050512749a50$var$SET_MARK = 0x8000;
const $696c050512749a50$var$SET_COMPONENT = 0x8000;
const $696c050512749a50$var$PERFORM_ACTION = 0x2000;
const $696c050512749a50$var$LAST_MASK = 0x80000000;
const $696c050512749a50$var$STORE_MASK = 0x40000000;
const $696c050512749a50$var$OFFSET_MASK = 0x3FFFFFFF;
const $696c050512749a50$var$REVERSE_DIRECTION = 0x400000;
const $696c050512749a50$var$CURRENT_INSERT_BEFORE = 0x0800;
const $696c050512749a50$var$MARKED_INSERT_BEFORE = 0x0400;
const $696c050512749a50$var$CURRENT_INSERT_COUNT = 0x03E0;
const $696c050512749a50$var$MARKED_INSERT_COUNT = 0x001F;
let $696c050512749a50$export$2e2bcd8739ae039 = (_class = class $696c050512749a50$export$2e2bcd8739ae039 {
    constructor(font){
        this.processIndicRearragement = this.processIndicRearragement.bind(this);
        this.processContextualSubstitution = this.processContextualSubstitution.bind(this);
        this.processLigature = this.processLigature.bind(this);
        this.processNoncontextualSubstitutions = this.processNoncontextualSubstitutions.bind(this);
        this.processGlyphInsertion = this.processGlyphInsertion.bind(this);
        this.font = font;
        this.morx = font.morx;
        this.inputCache = null;
    }
    process(glyphs, features = {}) {
        for (let chain of this.morx.chains){
            let flags = chain.defaultFlags;
            for (let feature of chain.features){
                let f;
                if (f = features[feature.featureType]) {
                    if (f[feature.featureSetting]) {
                        flags &= feature.disableFlags;
                        flags |= feature.enableFlags;
                    } else if (f[feature.featureSetting] === false) {
                        flags |= ~feature.disableFlags;
                        flags &= ~feature.enableFlags;
                    }
                }
            }
            for (let subtable of chain.subtables)if (subtable.subFeatureFlags & flags) this.processSubtable(subtable, glyphs);
        }
        let index = glyphs.length - 1;
        while(index >= 0){
            if (glyphs[index].id === 0xffff) glyphs.splice(index, 1);
            index--;
        }
        return glyphs;
    }
    processSubtable(subtable, glyphs) {
        this.subtable = subtable;
        this.glyphs = glyphs;
        if (this.subtable.type === 4) {
            this.processNoncontextualSubstitutions(this.subtable, this.glyphs);
            return;
        }
        this.ligatureStack = [];
        this.markedGlyph = null;
        this.firstGlyph = null;
        this.lastGlyph = null;
        this.markedIndex = null;
        let stateMachine = this.getStateMachine(subtable);
        let process = this.getProcessor();
        let reverse = !!(this.subtable.coverage & $696c050512749a50$var$REVERSE_DIRECTION);
        return stateMachine.process(this.glyphs, reverse, process);
    }
    getStateMachine(subtable) {
        return new $de324b614d9ee26c$export$2e2bcd8739ae039(subtable.table.stateTable);
    }
    getProcessor() {
        switch(this.subtable.type){
            case 0:
                return this.processIndicRearragement;
            case 1:
                return this.processContextualSubstitution;
            case 2:
                return this.processLigature;
            case 4:
                return this.processNoncontextualSubstitutions;
            case 5:
                return this.processGlyphInsertion;
            default:
                throw new Error(`Invalid morx subtable type: ${this.subtable.type}`);
        }
    }
    processIndicRearragement(glyph, entry, index) {
        if (entry.flags & $696c050512749a50$var$MARK_FIRST) this.firstGlyph = index;
        if (entry.flags & $696c050512749a50$var$MARK_LAST) this.lastGlyph = index;
        $696c050512749a50$var$reorderGlyphs(this.glyphs, entry.flags & $696c050512749a50$var$VERB, this.firstGlyph, this.lastGlyph);
    }
    processContextualSubstitution(glyph, entry, index) {
        let subsitutions = this.subtable.table.substitutionTable.items;
        if (entry.markIndex !== 0xffff) {
            let lookup = subsitutions.getItem(entry.markIndex);
            let lookupTable = new $16667a2c0f0b1be5$export$2e2bcd8739ae039(lookup);
            glyph = this.glyphs[this.markedGlyph];
            var gid = lookupTable.lookup(glyph.id);
            if (gid) this.glyphs[this.markedGlyph] = this.font.getGlyph(gid, glyph.codePoints);
        }
        if (entry.currentIndex !== 0xffff) {
            let lookup = subsitutions.getItem(entry.currentIndex);
            let lookupTable = new $16667a2c0f0b1be5$export$2e2bcd8739ae039(lookup);
            glyph = this.glyphs[index];
            var gid = lookupTable.lookup(glyph.id);
            if (gid) this.glyphs[index] = this.font.getGlyph(gid, glyph.codePoints);
        }
        if (entry.flags & $696c050512749a50$var$SET_MARK) this.markedGlyph = index;
    }
    processLigature(glyph, entry, index) {
        if (entry.flags & $696c050512749a50$var$SET_COMPONENT) this.ligatureStack.push(index);
        if (entry.flags & $696c050512749a50$var$PERFORM_ACTION) {
            let actions = this.subtable.table.ligatureActions;
            let components = this.subtable.table.components;
            let ligatureList = this.subtable.table.ligatureList;
            let actionIndex = entry.action;
            let last = false;
            let ligatureIndex = 0;
            let codePoints = [];
            let ligatureGlyphs = [];
            while(!last){
                let componentGlyph = this.ligatureStack.pop();
                codePoints.unshift(...this.glyphs[componentGlyph].codePoints);
                let action = actions.getItem(actionIndex++);
                last = !!(action & $696c050512749a50$var$LAST_MASK);
                let store = !!(action & $696c050512749a50$var$STORE_MASK);
                let offset = (action & $696c050512749a50$var$OFFSET_MASK) << 2 >> 2;
                offset += this.glyphs[componentGlyph].id;
                let component = components.getItem(offset);
                ligatureIndex += component;
                if (last || store) {
                    let ligatureEntry = ligatureList.getItem(ligatureIndex);
                    this.glyphs[componentGlyph] = this.font.getGlyph(ligatureEntry, codePoints);
                    ligatureGlyphs.push(componentGlyph);
                    ligatureIndex = 0;
                    codePoints = [];
                } else this.glyphs[componentGlyph] = this.font.getGlyph(0xffff);
            }
            this.ligatureStack.push(...ligatureGlyphs);
        }
    }
    processNoncontextualSubstitutions(subtable, glyphs, index) {
        let lookupTable = new $16667a2c0f0b1be5$export$2e2bcd8739ae039(subtable.table.lookupTable);
        for(index = 0; index < glyphs.length; index++){
            let glyph = glyphs[index];
            if (glyph.id !== 0xffff) {
                let gid = lookupTable.lookup(glyph.id);
                if (gid) glyphs[index] = this.font.getGlyph(gid, glyph.codePoints);
            }
        }
    }
    _insertGlyphs(glyphIndex, insertionActionIndex, count, isBefore) {
        let insertions = [];
        while(count--){
            let gid = this.subtable.table.insertionActions.getItem(insertionActionIndex++);
            insertions.push(this.font.getGlyph(gid));
        }
        if (!isBefore) glyphIndex++;
        this.glyphs.splice(glyphIndex, 0, ...insertions);
    }
    processGlyphInsertion(glyph, entry, index) {
        if (entry.flags & $696c050512749a50$var$SET_MARK) this.markedIndex = index;
        if (entry.markedInsertIndex !== 0xffff) {
            let count = (entry.flags & $696c050512749a50$var$MARKED_INSERT_COUNT) >>> 5;
            let isBefore = !!(entry.flags & $696c050512749a50$var$MARKED_INSERT_BEFORE);
            this._insertGlyphs(this.markedIndex, entry.markedInsertIndex, count, isBefore);
        }
        if (entry.currentInsertIndex !== 0xffff) {
            let count = (entry.flags & $696c050512749a50$var$CURRENT_INSERT_COUNT) >>> 5;
            let isBefore = !!(entry.flags & $696c050512749a50$var$CURRENT_INSERT_BEFORE);
            this._insertGlyphs(index, entry.currentInsertIndex, count, isBefore);
        }
    }
    getSupportedFeatures() {
        let features = [];
        for (let chain of this.morx.chains)for (let feature of chain.features)features.push([
            feature.featureType,
            feature.featureSetting
        ]);
        return features;
    }
    generateInputs(gid) {
        if (!this.inputCache) this.generateInputCache();
        return this.inputCache[gid] || [];
    }
    generateInputCache() {
        this.inputCache = {};
        for (let chain of this.morx.chains){
            let flags = chain.defaultFlags;
            for (let subtable of chain.subtables)if (subtable.subFeatureFlags & flags) this.generateInputsForSubtable(subtable);
        }
    }
    generateInputsForSubtable(subtable) {
        if (subtable.type !== 2) return;
        let reverse = !!(subtable.coverage & $696c050512749a50$var$REVERSE_DIRECTION);
        if (reverse) throw new Error('Reverse subtable, not supported.');
        this.subtable = subtable;
        this.ligatureStack = [];
        let stateMachine = this.getStateMachine(subtable);
        let process = this.getProcessor();
        let input = [];
        let stack = [];
        this.glyphs = [];
        stateMachine.traverse({
            enter: (glyph, entry)=>{
                let glyphs = this.glyphs;
                stack.push({
                    glyphs: glyphs.slice(),
                    ligatureStack: this.ligatureStack.slice()
                });
                let g1 = this.font.getGlyph(glyph);
                input.push(g1);
                glyphs.push(input[input.length - 1]);
                process(glyphs[glyphs.length - 1], entry, glyphs.length - 1);
                let count = 0;
                let found = 0;
                for(let i = 0; i < glyphs.length && count <= 1; i++)if (glyphs[i].id !== 0xffff) {
                    count++;
                    found = glyphs[i].id;
                }
                if (count === 1) {
                    let result = input.map((g)=>g.id
                    );
                    let cache = this.inputCache[found];
                    if (cache) cache.push(result);
                    else this.inputCache[found] = [
                        result
                    ];
                }
            },
            exit: ()=>{
                ({ glyphs: this.glyphs , ligatureStack: this.ligatureStack  } = stack.pop());
                input.pop();
            }
        });
    }
}, _applyDecoratedDescriptor(_class.prototype, "getStateMachine", [
    $df9bc573962369ff$export$69a3209f1a06c04d
], Object.getOwnPropertyDescriptor(_class.prototype, "getStateMachine"), _class.prototype), _class);
function $696c050512749a50$var$swap(glyphs, rangeA, rangeB, reverseA = false, reverseB = false) {
    let end = glyphs.splice(rangeB[0] - (rangeB[1] - 1), rangeB[1]);
    if (reverseB) end.reverse();
    let start = glyphs.splice(rangeA[0], rangeA[1], ...end);
    if (reverseA) start.reverse();
    glyphs.splice(rangeB[0] - (rangeA[1] - 1), 0, ...start);
    return glyphs;
}
function $696c050512749a50$var$reorderGlyphs(glyphs, verb, firstGlyph, lastGlyph) {
    switch(verb){
        case 0:
            return glyphs;
        case 1:
            return $696c050512749a50$var$swap(glyphs, [
                firstGlyph,
                1
            ], [
                lastGlyph,
                0
            ]);
        case 2:
            return $696c050512749a50$var$swap(glyphs, [
                firstGlyph,
                0
            ], [
                lastGlyph,
                1
            ]);
        case 3:
            return $696c050512749a50$var$swap(glyphs, [
                firstGlyph,
                1
            ], [
                lastGlyph,
                1
            ]);
        case 4:
            return $696c050512749a50$var$swap(glyphs, [
                firstGlyph,
                2
            ], [
                lastGlyph,
                0
            ]);
        case 5:
            return $696c050512749a50$var$swap(glyphs, [
                firstGlyph,
                2
            ], [
                lastGlyph,
                0
            ], true, false);
        case 6:
            return $696c050512749a50$var$swap(glyphs, [
                firstGlyph,
                0
            ], [
                lastGlyph,
                2
            ]);
        case 7:
            return $696c050512749a50$var$swap(glyphs, [
                firstGlyph,
                0
            ], [
                lastGlyph,
                2
            ], false, true);
        case 8:
            return $696c050512749a50$var$swap(glyphs, [
                firstGlyph,
                1
            ], [
                lastGlyph,
                2
            ]);
        case 9:
            return $696c050512749a50$var$swap(glyphs, [
                firstGlyph,
                1
            ], [
                lastGlyph,
                2
            ], false, true);
        case 10:
            return $696c050512749a50$var$swap(glyphs, [
                firstGlyph,
                2
            ], [
                lastGlyph,
                1
            ]);
        case 11:
            return $696c050512749a50$var$swap(glyphs, [
                firstGlyph,
                2
            ], [
                lastGlyph,
                1
            ], true, false);
        case 12:
            return $696c050512749a50$var$swap(glyphs, [
                firstGlyph,
                2
            ], [
                lastGlyph,
                2
            ]);
        case 13:
            return $696c050512749a50$var$swap(glyphs, [
                firstGlyph,
                2
            ], [
                lastGlyph,
                2
            ], true, false);
        case 14:
            return $696c050512749a50$var$swap(glyphs, [
                firstGlyph,
                2
            ], [
                lastGlyph,
                2
            ], false, true);
        case 15:
            return $696c050512749a50$var$swap(glyphs, [
                firstGlyph,
                2
            ], [
                lastGlyph,
                2
            ], true, true);
        default:
            throw new Error(`Unknown verb: ${verb}`);
    }
}
class $9273c77bc46b13e0$export$2e2bcd8739ae039 {
    constructor(font){
        this.font = font;
        this.morxProcessor = new $696c050512749a50$export$2e2bcd8739ae039(font);
        this.fallbackPosition = false;
    }
    substitute(glyphRun) {
        if (glyphRun.direction === 'rtl') glyphRun.glyphs.reverse();
        this.morxProcessor.process(glyphRun.glyphs, $b603e0ade09ad01e$export$b813f7d2a1677c16(glyphRun.features));
    }
    getAvailableFeatures(script, language) {
        return $b603e0ade09ad01e$export$bd6df347a4f391c4(this.morxProcessor.getSupportedFeatures());
    }
    stringsForGlyph(gid) {
        let glyphStrings = this.morxProcessor.generateInputs(gid);
        let result = new Set;
        for (let glyphs of glyphStrings)this._addStrings(glyphs, 0, result, '');
        return result;
    }
    _addStrings(glyphs, index, strings, string) {
        let codePoints = this.font._cmapProcessor.codePointsForGlyph(glyphs[index]);
        for (let codePoint of codePoints){
            let s = string + String.fromCodePoint(codePoint);
            if (index < glyphs.length - 1) this._addStrings(glyphs, index + 1, strings, s);
            else strings.add(s);
        }
    }
}
class $d208953d14e55e3c$export$2e2bcd8739ae039 {
    constructor(font, script, direction){
        this.font = font;
        this.script = script;
        this.direction = direction;
        this.stages = [];
        this.globalFeatures = {};
        this.allFeatures = {};
    }
 _addFeatures(features, global) {
        let stageIndex = this.stages.length - 1;
        let stage = this.stages[stageIndex];
        for (let feature of features)if (this.allFeatures[feature] == null) {
            stage.push(feature);
            this.allFeatures[feature] = stageIndex;
            if (global) this.globalFeatures[feature] = true;
        }
    }
 add(arg, global = true) {
        if (this.stages.length === 0) this.stages.push([]);
        if (typeof arg === 'string') arg = [
            arg
        ];
        if (Array.isArray(arg)) this._addFeatures(arg, global);
        else if (typeof arg === 'object') {
            this._addFeatures(arg.global || [], true);
            this._addFeatures(arg.local || [], false);
        } else throw new Error("Unsupported argument to ShapingPlan#add");
    }
 addStage(arg, global) {
        if (typeof arg === 'function') this.stages.push(arg, []);
        else {
            this.stages.push([]);
            this.add(arg, global);
        }
    }
    setFeatureOverrides(features) {
        if (Array.isArray(features)) this.add(features);
        else if (typeof features === 'object') for(let tag in features){
            if (features[tag]) this.add(tag);
            else if (this.allFeatures[tag] != null) {
                let stage = this.stages[this.allFeatures[tag]];
                stage.splice(stage.indexOf(tag), 1);
                delete this.allFeatures[tag];
                delete this.globalFeatures[tag];
            }
        }
    }
 assignGlobalFeatures(glyphs) {
        for (let glyph of glyphs)for(let feature in this.globalFeatures)glyph.features[feature] = true;
    }
 process(processor, glyphs, positions) {
        for (let stage of this.stages){
            if (typeof stage === 'function') {
                if (!positions) stage(this.font, glyphs, this);
            } else if (stage.length > 0) processor.applyFeatures(stage, glyphs, positions);
        }
    }
}
const $5340de7a86f3ae85$var$VARIATION_FEATURES = [
    'rvrn'
];
const $5340de7a86f3ae85$var$COMMON_FEATURES = [
    'ccmp',
    'locl',
    'rlig',
    'mark',
    'mkmk'
];
const $5340de7a86f3ae85$var$FRACTIONAL_FEATURES = [
    'frac',
    'numr',
    'dnom'
];
const $5340de7a86f3ae85$var$HORIZONTAL_FEATURES = [
    'calt',
    'clig',
    'liga',
    'rclt',
    'curs',
    'kern'
];
const $5340de7a86f3ae85$var$DIRECTIONAL_FEATURES = {
    ltr: [
        'ltra',
        'ltrm'
    ],
    rtl: [
        'rtla',
        'rtlm'
    ]
};
class $5340de7a86f3ae85$export$2e2bcd8739ae039 {
    static zeroMarkWidths = 'AFTER_GPOS';
    static plan(plan, glyphs, features) {
        this.planPreprocessing(plan);
        this.planFeatures(plan);
        this.planPostprocessing(plan, features);
        plan.assignGlobalFeatures(glyphs);
        this.assignFeatures(plan, glyphs);
    }
    static planPreprocessing(plan) {
        plan.add({
            global: [
                ...$5340de7a86f3ae85$var$VARIATION_FEATURES,
                ...$5340de7a86f3ae85$var$DIRECTIONAL_FEATURES[plan.direction]
            ],
            local: $5340de7a86f3ae85$var$FRACTIONAL_FEATURES
        });
    }
    static planFeatures(plan) {
    }
    static planPostprocessing(plan, userFeatures) {
        plan.add([
            ...$5340de7a86f3ae85$var$COMMON_FEATURES,
            ...$5340de7a86f3ae85$var$HORIZONTAL_FEATURES
        ]);
        plan.setFeatureOverrides(userFeatures);
    }
    static assignFeatures(plan, glyphs) {
        for(let i = 0; i < glyphs.length; i++){
            let glyph = glyphs[i];
            if (glyph.codePoints[0] === 0x2044) {
                let start = i;
                let end = i + 1;
                while(start > 0 && $747425b437e121da$export$2e2bcd8739ae039.isDigit(glyphs[start - 1].codePoints[0])){
                    glyphs[start - 1].features.numr = true;
                    glyphs[start - 1].features.frac = true;
                    start--;
                }
                while(end < glyphs.length && $747425b437e121da$export$2e2bcd8739ae039.isDigit(glyphs[end].codePoints[0])){
                    glyphs[end].features.dnom = true;
                    glyphs[end].features.frac = true;
                    end++;
                }
                glyph.features.frac = true;
                i = end - 1;
            }
        }
    }
}
var $5cab828b3273a17c$require$Buffer = buffer.Buffer;
const $5cab828b3273a17c$var$trie = new $hJqJp$unicodetrie($5cab828b3273a17c$require$Buffer.from("ABABAAAAAACgMQAAAZUBav7t2CtPA0EUBeDZB00pin9AJZIEgyUEj0QhweDAgQOJxCBRBElQSBwSicLgkOAwnNKZ5GaY2c7uzj4o5yZfZrrbefbuIx2nSq3CGmzAWH/+K+UO7MIe7MMhHMMpnMMFXMIVXIt2t3CnP088iPqjqNN8e4Ij7Rle4LUH82rLm6i/92A+RERERERERERNmfz/89GDeRARERERzbN8ceps2Iwt9H0C9/AJ6yOlDkbTczcot5VSm8Pm1vcFWfb7+BKOLTuOd2UlTX4wGP85Eg953lWPFbnuN7PkjtLmalOWbNenkHOSa7T3KmR9MVTZ2zZkVj1kHa68MueVKH0R4zqQ44WEXLM8VjcWHP0PtKLfPzQnMtGn3W4QYf6qxFxceVI394r2xnV+1rih0fV1Vzf3fO1n3evL5J78ruvZ5ptX2Rwy92Tfb1wlEqut3U+sZ3HXOeJ7/zDrbyuP6+Zz0fqa6Nv3vhY7Yu1xWnGevmsvsUpTT/RYIe8waUH/rvHMWKFzLfN8L+rTfp645mfX7ftlnfDtYxN59w0=", "base64"));
const $5cab828b3273a17c$var$FEATURES = [
    'isol',
    'fina',
    'fin2',
    'fin3',
    'medi',
    'med2',
    'init'
];
const $5cab828b3273a17c$var$ShapingClasses = {
    Non_Joining: 0,
    Left_Joining: 1,
    Right_Joining: 2,
    Dual_Joining: 3,
    Join_Causing: 3,
    ALAPH: 4,
    'DALATH RISH': 5,
    Transparent: 6
};
const $5cab828b3273a17c$var$ISOL = 'isol';
const $5cab828b3273a17c$var$FINA = 'fina';
const $5cab828b3273a17c$var$FIN2 = 'fin2';
const $5cab828b3273a17c$var$FIN3 = 'fin3';
const $5cab828b3273a17c$var$MEDI = 'medi';
const $5cab828b3273a17c$var$MED2 = 'med2';
const $5cab828b3273a17c$var$INIT = 'init';
const $5cab828b3273a17c$var$NONE = null;
const $5cab828b3273a17c$var$STATE_TABLE = [
    [
        [
            $5cab828b3273a17c$var$NONE,
            $5cab828b3273a17c$var$NONE,
            0
        ],
        [
            $5cab828b3273a17c$var$NONE,
            $5cab828b3273a17c$var$ISOL,
            2
        ],
        [
            $5cab828b3273a17c$var$NONE,
            $5cab828b3273a17c$var$ISOL,
            1
        ],
        [
            $5cab828b3273a17c$var$NONE,
            $5cab828b3273a17c$var$ISOL,
            2
        ],
        [
            $5cab828b3273a17c$var$NONE,
            $5cab828b3273a17c$var$ISOL,
            1
        ],
        [
            $5cab828b3273a17c$var$NONE,
            $5cab828b3273a17c$var$ISOL,
            6
        ]
    ],
    [
        [
            $5cab828b3273a17c$var$NONE,
            $5cab828b3273a17c$var$NONE,
            0
        ],
        [
            $5cab828b3273a17c$var$NONE,
            $5cab828b3273a17c$var$ISOL,
            2
        ],
        [
            $5cab828b3273a17c$var$NONE,
            $5cab828b3273a17c$var$ISOL,
            1
        ],
        [
            $5cab828b3273a17c$var$NONE,
            $5cab828b3273a17c$var$ISOL,
            2
        ],
        [
            $5cab828b3273a17c$var$NONE,
            $5cab828b3273a17c$var$FIN2,
            5
        ],
        [
            $5cab828b3273a17c$var$NONE,
            $5cab828b3273a17c$var$ISOL,
            6
        ]
    ],
    [
        [
            $5cab828b3273a17c$var$NONE,
            $5cab828b3273a17c$var$NONE,
            0
        ],
        [
            $5cab828b3273a17c$var$NONE,
            $5cab828b3273a17c$var$ISOL,
            2
        ],
        [
            $5cab828b3273a17c$var$INIT,
            $5cab828b3273a17c$var$FINA,
            1
        ],
        [
            $5cab828b3273a17c$var$INIT,
            $5cab828b3273a17c$var$FINA,
            3
        ],
        [
            $5cab828b3273a17c$var$INIT,
            $5cab828b3273a17c$var$FINA,
            4
        ],
        [
            $5cab828b3273a17c$var$INIT,
            $5cab828b3273a17c$var$FINA,
            6
        ]
    ],
    [
        [
            $5cab828b3273a17c$var$NONE,
            $5cab828b3273a17c$var$NONE,
            0
        ],
        [
            $5cab828b3273a17c$var$NONE,
            $5cab828b3273a17c$var$ISOL,
            2
        ],
        [
            $5cab828b3273a17c$var$MEDI,
            $5cab828b3273a17c$var$FINA,
            1
        ],
        [
            $5cab828b3273a17c$var$MEDI,
            $5cab828b3273a17c$var$FINA,
            3
        ],
        [
            $5cab828b3273a17c$var$MEDI,
            $5cab828b3273a17c$var$FINA,
            4
        ],
        [
            $5cab828b3273a17c$var$MEDI,
            $5cab828b3273a17c$var$FINA,
            6
        ]
    ],
    [
        [
            $5cab828b3273a17c$var$NONE,
            $5cab828b3273a17c$var$NONE,
            0
        ],
        [
            $5cab828b3273a17c$var$NONE,
            $5cab828b3273a17c$var$ISOL,
            2
        ],
        [
            $5cab828b3273a17c$var$MED2,
            $5cab828b3273a17c$var$ISOL,
            1
        ],
        [
            $5cab828b3273a17c$var$MED2,
            $5cab828b3273a17c$var$ISOL,
            2
        ],
        [
            $5cab828b3273a17c$var$MED2,
            $5cab828b3273a17c$var$FIN2,
            5
        ],
        [
            $5cab828b3273a17c$var$MED2,
            $5cab828b3273a17c$var$ISOL,
            6
        ]
    ],
    [
        [
            $5cab828b3273a17c$var$NONE,
            $5cab828b3273a17c$var$NONE,
            0
        ],
        [
            $5cab828b3273a17c$var$NONE,
            $5cab828b3273a17c$var$ISOL,
            2
        ],
        [
            $5cab828b3273a17c$var$ISOL,
            $5cab828b3273a17c$var$ISOL,
            1
        ],
        [
            $5cab828b3273a17c$var$ISOL,
            $5cab828b3273a17c$var$ISOL,
            2
        ],
        [
            $5cab828b3273a17c$var$ISOL,
            $5cab828b3273a17c$var$FIN2,
            5
        ],
        [
            $5cab828b3273a17c$var$ISOL,
            $5cab828b3273a17c$var$ISOL,
            6
        ]
    ],
    [
        [
            $5cab828b3273a17c$var$NONE,
            $5cab828b3273a17c$var$NONE,
            0
        ],
        [
            $5cab828b3273a17c$var$NONE,
            $5cab828b3273a17c$var$ISOL,
            2
        ],
        [
            $5cab828b3273a17c$var$NONE,
            $5cab828b3273a17c$var$ISOL,
            1
        ],
        [
            $5cab828b3273a17c$var$NONE,
            $5cab828b3273a17c$var$ISOL,
            2
        ],
        [
            $5cab828b3273a17c$var$NONE,
            $5cab828b3273a17c$var$FIN3,
            5
        ],
        [
            $5cab828b3273a17c$var$NONE,
            $5cab828b3273a17c$var$ISOL,
            6
        ]
    ]
];
class $5cab828b3273a17c$export$2e2bcd8739ae039 extends $5340de7a86f3ae85$export$2e2bcd8739ae039 {
    static planFeatures(plan) {
        plan.add([
            'ccmp',
            'locl'
        ]);
        for(let i = 0; i < $5cab828b3273a17c$var$FEATURES.length; i++){
            let feature = $5cab828b3273a17c$var$FEATURES[i];
            plan.addStage(feature, false);
        }
        plan.addStage('mset');
    }
    static assignFeatures(plan, glyphs) {
        super.assignFeatures(plan, glyphs);
        let prev = -1;
        let state = 0;
        let actions = [];
        for(let i = 0; i < glyphs.length; i++){
            let curAction, prevAction;
            var glyph = glyphs[i];
            let type = $5cab828b3273a17c$var$getShapingClass(glyph.codePoints[0]);
            if (type === $5cab828b3273a17c$var$ShapingClasses.Transparent) {
                actions[i] = $5cab828b3273a17c$var$NONE;
                continue;
            }
            [prevAction, curAction, state] = $5cab828b3273a17c$var$STATE_TABLE[state][type];
            if (prevAction !== $5cab828b3273a17c$var$NONE && prev !== -1) actions[prev] = prevAction;
            actions[i] = curAction;
            prev = i;
        }
        for(let index = 0; index < glyphs.length; index++){
            let feature;
            var glyph = glyphs[index];
            if (feature = actions[index]) glyph.features[feature] = true;
        }
    }
}
function $5cab828b3273a17c$var$getShapingClass(codePoint) {
    let res = $5cab828b3273a17c$var$trie.get(codePoint);
    if (res) return res - 1;
    let category = $747425b437e121da$export$2e2bcd8739ae039.getCategory(codePoint);
    if (category === 'Mn' || category === 'Me' || category === 'Cf') return $5cab828b3273a17c$var$ShapingClasses.Transparent;
    return $5cab828b3273a17c$var$ShapingClasses.Non_Joining;
}
class $ab0ec2aaf85421fe$export$2e2bcd8739ae039 {
    constructor(glyphs, options){
        this.glyphs = glyphs;
        this.reset(options);
    }
    reset(options = {}, index = 0) {
        this.options = options;
        this.flags = options.flags || {};
        this.markAttachmentType = options.markAttachmentType || 0;
        this.index = index;
    }
    get cur() {
        return this.glyphs[this.index] || null;
    }
    shouldIgnore(glyph) {
        return this.flags.ignoreMarks && glyph.isMark || this.flags.ignoreBaseGlyphs && glyph.isBase || this.flags.ignoreLigatures && glyph.isLigature || this.markAttachmentType && glyph.isMark && glyph.markAttachmentType !== this.markAttachmentType;
    }
    move(dir) {
        this.index += dir;
        while(0 <= this.index && this.index < this.glyphs.length && this.shouldIgnore(this.glyphs[this.index]))this.index += dir;
        if (0 > this.index || this.index >= this.glyphs.length) return null;
        return this.glyphs[this.index];
    }
    next() {
        return this.move(1);
    }
    prev() {
        return this.move(-1);
    }
    peek(count = 1) {
        let idx = this.index;
        let res = this.increment(count);
        this.index = idx;
        return res;
    }
    peekIndex(count = 1) {
        let idx = this.index;
        this.increment(count);
        let res = this.index;
        this.index = idx;
        return res;
    }
    increment(count = 1) {
        let dir = count < 0 ? -1 : 1;
        count = Math.abs(count);
        while(count--)this.move(dir);
        return this.glyphs[this.index];
    }
}
const $cffd0e0e7e88a6c6$var$DEFAULT_SCRIPTS = [
    'DFLT',
    'dflt',
    'latn'
];
class $cffd0e0e7e88a6c6$export$2e2bcd8739ae039 {
    constructor(font, table){
        this.font = font;
        this.table = table;
        this.script = null;
        this.scriptTag = null;
        this.language = null;
        this.languageTag = null;
        this.features = {};
        this.lookups = {};
        this.variationsIndex = font._variationProcessor ? this.findVariationsIndex(font._variationProcessor.normalizedCoords) : -1;
        this.selectScript();
        this.glyphs = [];
        this.positions = [];
        this.ligatureID = 1;
        this.currentFeature = null;
    }
    findScript(script) {
        if (this.table.scriptList == null) return null;
        if (!Array.isArray(script)) script = [
            script
        ];
        for (let s of script)for (let entry of this.table.scriptList){
            if (entry.tag === s) return entry;
        }
        return null;
    }
    selectScript(script, language, direction) {
        let changed = false;
        let entry;
        if (!this.script || script !== this.scriptTag) {
            entry = this.findScript(script);
            if (!entry) entry = this.findScript($cffd0e0e7e88a6c6$var$DEFAULT_SCRIPTS);
            if (!entry) return this.scriptTag;
            this.scriptTag = entry.tag;
            this.script = entry.script;
            this.language = null;
            this.languageTag = null;
            changed = true;
        }
        if (!direction || direction !== this.direction) this.direction = direction || $a5878e4f4663c9e2$export$9fddb9d0dd7d8a54(script);
        if (language && language.length < 4) language += ' '.repeat(4 - language.length);
        if (!language || language !== this.languageTag) {
            this.language = null;
            for (let lang of this.script.langSysRecords)if (lang.tag === language) {
                this.language = lang.langSys;
                this.languageTag = lang.tag;
                break;
            }
            if (!this.language) {
                this.language = this.script.defaultLangSys;
                this.languageTag = null;
            }
            changed = true;
        }
        if (changed) {
            this.features = {};
            if (this.language) for (let featureIndex of this.language.featureIndexes){
                let record = this.table.featureList[featureIndex];
                let substituteFeature = this.substituteFeatureForVariations(featureIndex);
                this.features[record.tag] = substituteFeature || record.feature;
            }
        }
        return this.scriptTag;
    }
    lookupsForFeatures(userFeatures = [], exclude) {
        let lookups = [];
        for (let tag of userFeatures){
            let feature = this.features[tag];
            if (!feature) continue;
            for (let lookupIndex of feature.lookupListIndexes){
                if (exclude && exclude.indexOf(lookupIndex) !== -1) continue;
                lookups.push({
                    feature: tag,
                    index: lookupIndex,
                    lookup: this.table.lookupList.get(lookupIndex)
                });
            }
        }
        lookups.sort((a, b)=>a.index - b.index
        );
        return lookups;
    }
    substituteFeatureForVariations(featureIndex) {
        if (this.variationsIndex === -1) return null;
        let record = this.table.featureVariations.featureVariationRecords[this.variationsIndex];
        let substitutions = record.featureTableSubstitution.substitutions;
        for (let substitution of substitutions){
            if (substitution.featureIndex === featureIndex) return substitution.alternateFeatureTable;
        }
        return null;
    }
    findVariationsIndex(coords) {
        let variations = this.table.featureVariations;
        if (!variations) return -1;
        let records = variations.featureVariationRecords;
        for(let i = 0; i < records.length; i++){
            let conditions = records[i].conditionSet.conditionTable;
            if (this.variationConditionsMatch(conditions, coords)) return i;
        }
        return -1;
    }
    variationConditionsMatch(conditions, coords) {
        return conditions.every((condition)=>{
            let coord = condition.axisIndex < coords.length ? coords[condition.axisIndex] : 0;
            return condition.filterRangeMinValue <= coord && coord <= condition.filterRangeMaxValue;
        });
    }
    applyFeatures(userFeatures, glyphs, advances) {
        let lookups = this.lookupsForFeatures(userFeatures);
        this.applyLookups(lookups, glyphs, advances);
    }
    applyLookups(lookups, glyphs, positions) {
        this.glyphs = glyphs;
        this.positions = positions;
        this.glyphIterator = new $ab0ec2aaf85421fe$export$2e2bcd8739ae039(glyphs);
        for (let { feature: feature , lookup: lookup  } of lookups){
            this.currentFeature = feature;
            this.glyphIterator.reset(lookup.flags);
            while(this.glyphIterator.index < glyphs.length){
                if (!(feature in this.glyphIterator.cur.features)) {
                    this.glyphIterator.next();
                    continue;
                }
                for (let table of lookup.subTables){
                    let res = this.applyLookup(lookup.lookupType, table);
                    if (res) break;
                }
                this.glyphIterator.next();
            }
        }
    }
    applyLookup(lookup, table) {
        throw new Error("applyLookup must be implemented by subclasses");
    }
    applyLookupList(lookupRecords) {
        let options = this.glyphIterator.options;
        let glyphIndex = this.glyphIterator.index;
        for (let lookupRecord of lookupRecords){
            this.glyphIterator.reset(options, glyphIndex);
            this.glyphIterator.increment(lookupRecord.sequenceIndex);
            let lookup = this.table.lookupList.get(lookupRecord.lookupListIndex);
            this.glyphIterator.reset(lookup.flags, this.glyphIterator.index);
            for (let table of lookup.subTables){
                if (this.applyLookup(lookup.lookupType, table)) break;
            }
        }
        this.glyphIterator.reset(options, glyphIndex);
        return true;
    }
    coverageIndex(coverage, glyph) {
        if (glyph == null) glyph = this.glyphIterator.cur.id;
        switch(coverage.version){
            case 1:
                return coverage.glyphs.indexOf(glyph);
            case 2:
                for (let range of coverage.rangeRecords){
                    if (range.start <= glyph && glyph <= range.end) return range.startCoverageIndex + glyph - range.start;
                }
                break;
        }
        return -1;
    }
    match(sequenceIndex, sequence, fn, matched) {
        let pos = this.glyphIterator.index;
        let glyph = this.glyphIterator.increment(sequenceIndex);
        let idx = 0;
        while(idx < sequence.length && glyph && fn(sequence[idx], glyph)){
            if (matched) matched.push(this.glyphIterator.index);
            idx++;
            glyph = this.glyphIterator.next();
        }
        this.glyphIterator.index = pos;
        if (idx < sequence.length) return false;
        return matched || true;
    }
    sequenceMatches(sequenceIndex, sequence) {
        return this.match(sequenceIndex, sequence, (component, glyph)=>component === glyph.id
        );
    }
    sequenceMatchIndices(sequenceIndex, sequence) {
        return this.match(sequenceIndex, sequence, (component, glyph)=>{
            if (!(this.currentFeature in glyph.features)) return false;
            return component === glyph.id;
        }, []);
    }
    coverageSequenceMatches(sequenceIndex, sequence) {
        return this.match(sequenceIndex, sequence, (coverage, glyph)=>this.coverageIndex(coverage, glyph.id) >= 0
        );
    }
    getClassID(glyph, classDef) {
        switch(classDef.version){
            case 1:
                let i = glyph - classDef.startGlyph;
                if (i >= 0 && i < classDef.classValueArray.length) return classDef.classValueArray[i];
                break;
            case 2:
                for (let range of classDef.classRangeRecord){
                    if (range.start <= glyph && glyph <= range.end) return range.class;
                }
                break;
        }
        return 0;
    }
    classSequenceMatches(sequenceIndex, sequence, classDef) {
        return this.match(sequenceIndex, sequence, (classID, glyph)=>classID === this.getClassID(glyph.id, classDef)
        );
    }
    applyContext(table) {
        let index, set;
        switch(table.version){
            case 1:
                index = this.coverageIndex(table.coverage);
                if (index === -1) return false;
                set = table.ruleSets[index];
                for (let rule of set){
                    if (this.sequenceMatches(1, rule.input)) return this.applyLookupList(rule.lookupRecords);
                }
                break;
            case 2:
                if (this.coverageIndex(table.coverage) === -1) return false;
                index = this.getClassID(this.glyphIterator.cur.id, table.classDef);
                if (index === -1) return false;
                set = table.classSet[index];
                for (let rule1 of set){
                    if (this.classSequenceMatches(1, rule1.classes, table.classDef)) return this.applyLookupList(rule1.lookupRecords);
                }
                break;
            case 3:
                if (this.coverageSequenceMatches(0, table.coverages)) return this.applyLookupList(table.lookupRecords);
                break;
        }
        return false;
    }
    applyChainingContext(table) {
        let index;
        switch(table.version){
            case 1:
                index = this.coverageIndex(table.coverage);
                if (index === -1) return false;
                let set = table.chainRuleSets[index];
                for (let rule of set){
                    if (this.sequenceMatches(-rule.backtrack.length, rule.backtrack) && this.sequenceMatches(1, rule.input) && this.sequenceMatches(1 + rule.input.length, rule.lookahead)) return this.applyLookupList(rule.lookupRecords);
                }
                break;
            case 2:
                if (this.coverageIndex(table.coverage) === -1) return false;
                index = this.getClassID(this.glyphIterator.cur.id, table.inputClassDef);
                let rules = table.chainClassSet[index];
                if (!rules) return false;
                for (let rule2 of rules){
                    if (this.classSequenceMatches(-rule2.backtrack.length, rule2.backtrack, table.backtrackClassDef) && this.classSequenceMatches(1, rule2.input, table.inputClassDef) && this.classSequenceMatches(1 + rule2.input.length, rule2.lookahead, table.lookaheadClassDef)) return this.applyLookupList(rule2.lookupRecords);
                }
                break;
            case 3:
                if (this.coverageSequenceMatches(-table.backtrackGlyphCount, table.backtrackCoverage) && this.coverageSequenceMatches(0, table.inputCoverage) && this.coverageSequenceMatches(table.inputGlyphCount, table.lookaheadCoverage)) return this.applyLookupList(table.lookupRecords);
                break;
        }
        return false;
    }
}
class $8cba766f534deddd$export$2e2bcd8739ae039 {
    constructor(font, id, codePoints = [], features){
        this._font = font;
        this.codePoints = codePoints;
        this.id = id;
        this.features = {};
        if (Array.isArray(features)) for(let i = 0; i < features.length; i++){
            let feature = features[i];
            this.features[feature] = true;
        }
        else if (typeof features === 'object') Object.assign(this.features, features);
        this.ligatureID = null;
        this.ligatureComponent = null;
        this.isLigated = false;
        this.cursiveAttachment = null;
        this.markAttachment = null;
        this.shaperInfo = null;
        this.substituted = false;
        this.isMultiplied = false;
    }
    get id() {
        return this._id;
    }
    set id(id) {
        this._id = id;
        this.substituted = true;
        let GDEF = this._font.GDEF;
        if (GDEF && GDEF.glyphClassDef) {
            let classID = $cffd0e0e7e88a6c6$export$2e2bcd8739ae039.prototype.getClassID(id, GDEF.glyphClassDef);
            this.isBase = classID === 1;
            this.isLigature = classID === 2;
            this.isMark = classID === 3;
            this.markAttachmentType = GDEF.markAttachClassDef ? $cffd0e0e7e88a6c6$export$2e2bcd8739ae039.prototype.getClassID(id, GDEF.markAttachClassDef) : 0;
        } else {
            this.isMark = this.codePoints.length > 0 && this.codePoints.every($747425b437e121da$export$2e2bcd8739ae039.isMark);
            this.isBase = !this.isMark;
            this.isLigature = this.codePoints.length > 1;
            this.markAttachmentType = 0;
        }
    }
    copy() {
        return new $8cba766f534deddd$export$2e2bcd8739ae039(this._font, this.id, this.codePoints, this.features);
    }
}
class $ce39c5154631fd0c$export$2e2bcd8739ae039 extends $5340de7a86f3ae85$export$2e2bcd8739ae039 {
    static zeroMarkWidths = 'NONE';
    static planFeatures(plan) {
        plan.add([
            'ljmo',
            'vjmo',
            'tjmo'
        ], false);
    }
    static assignFeatures(plan, glyphs) {
        let state = 0;
        let i = 0;
        while(i < glyphs.length){
            let action;
            let glyph = glyphs[i];
            let code = glyph.codePoints[0];
            let type = $ce39c5154631fd0c$var$getType(code);
            [action, state] = $ce39c5154631fd0c$var$STATE_TABLE[state][type];
            switch(action){
                case $ce39c5154631fd0c$var$DECOMPOSE:
                    if (!plan.font.hasGlyphForCodePoint(code)) i = $ce39c5154631fd0c$var$decompose(glyphs, i, plan.font);
                    break;
                case $ce39c5154631fd0c$var$COMPOSE:
                    i = $ce39c5154631fd0c$var$compose(glyphs, i, plan.font);
                    break;
                case $ce39c5154631fd0c$var$TONE_MARK:
                    $ce39c5154631fd0c$var$reorderToneMark(glyphs, i, plan.font);
                    break;
                case $ce39c5154631fd0c$var$INVALID:
                    i = $ce39c5154631fd0c$var$insertDottedCircle(glyphs, i, plan.font);
                    break;
            }
            i++;
        }
    }
}
const $ce39c5154631fd0c$var$HANGUL_BASE = 0xac00;
const $ce39c5154631fd0c$var$HANGUL_END = 0xd7a4;
const $ce39c5154631fd0c$var$HANGUL_COUNT = $ce39c5154631fd0c$var$HANGUL_END - $ce39c5154631fd0c$var$HANGUL_BASE + 1;
const $ce39c5154631fd0c$var$L_BASE = 0x1100;
const $ce39c5154631fd0c$var$V_BASE = 0x1161;
const $ce39c5154631fd0c$var$T_BASE = 0x11a7;
const $ce39c5154631fd0c$var$L_COUNT = 19;
const $ce39c5154631fd0c$var$V_COUNT = 21;
const $ce39c5154631fd0c$var$T_COUNT = 28;
const $ce39c5154631fd0c$var$L_END = $ce39c5154631fd0c$var$L_BASE + $ce39c5154631fd0c$var$L_COUNT - 1;
const $ce39c5154631fd0c$var$V_END = $ce39c5154631fd0c$var$V_BASE + $ce39c5154631fd0c$var$V_COUNT - 1;
const $ce39c5154631fd0c$var$T_END = $ce39c5154631fd0c$var$T_BASE + $ce39c5154631fd0c$var$T_COUNT - 1;
const $ce39c5154631fd0c$var$DOTTED_CIRCLE = 0x25cc;
const $ce39c5154631fd0c$var$isL = (code)=>0x1100 <= code && code <= 0x115f || 0xa960 <= code && code <= 0xa97c
;
const $ce39c5154631fd0c$var$isV = (code)=>0x1160 <= code && code <= 0x11a7 || 0xd7b0 <= code && code <= 0xd7c6
;
const $ce39c5154631fd0c$var$isT = (code)=>0x11a8 <= code && code <= 0x11ff || 0xd7cb <= code && code <= 0xd7fb
;
const $ce39c5154631fd0c$var$isTone = (code)=>0x302e <= code && code <= 0x302f
;
const $ce39c5154631fd0c$var$isLVT = (code)=>$ce39c5154631fd0c$var$HANGUL_BASE <= code && code <= $ce39c5154631fd0c$var$HANGUL_END
;
const $ce39c5154631fd0c$var$isLV = (code)=>code - $ce39c5154631fd0c$var$HANGUL_BASE < $ce39c5154631fd0c$var$HANGUL_COUNT && (code - $ce39c5154631fd0c$var$HANGUL_BASE) % $ce39c5154631fd0c$var$T_COUNT === 0
;
const $ce39c5154631fd0c$var$isCombiningL = (code)=>$ce39c5154631fd0c$var$L_BASE <= code && code <= $ce39c5154631fd0c$var$L_END
;
const $ce39c5154631fd0c$var$isCombiningV = (code)=>$ce39c5154631fd0c$var$V_BASE <= code && code <= $ce39c5154631fd0c$var$V_END
;
const $ce39c5154631fd0c$var$isCombiningT = (code)=>1 <= code && code <= $ce39c5154631fd0c$var$T_END
;
const $ce39c5154631fd0c$var$X = 0;
const $ce39c5154631fd0c$var$L = 1;
const $ce39c5154631fd0c$var$V = 2;
const $ce39c5154631fd0c$var$T = 3;
const $ce39c5154631fd0c$var$LV = 4;
const $ce39c5154631fd0c$var$LVT = 5;
const $ce39c5154631fd0c$var$M = 6;
function $ce39c5154631fd0c$var$getType(code) {
    if ($ce39c5154631fd0c$var$isL(code)) return $ce39c5154631fd0c$var$L;
    if ($ce39c5154631fd0c$var$isV(code)) return $ce39c5154631fd0c$var$V;
    if ($ce39c5154631fd0c$var$isT(code)) return $ce39c5154631fd0c$var$T;
    if ($ce39c5154631fd0c$var$isLV(code)) return $ce39c5154631fd0c$var$LV;
    if ($ce39c5154631fd0c$var$isLVT(code)) return $ce39c5154631fd0c$var$LVT;
    if ($ce39c5154631fd0c$var$isTone(code)) return $ce39c5154631fd0c$var$M;
    return $ce39c5154631fd0c$var$X;
}
const $ce39c5154631fd0c$var$NO_ACTION = 0;
const $ce39c5154631fd0c$var$DECOMPOSE = 1;
const $ce39c5154631fd0c$var$COMPOSE = 2;
const $ce39c5154631fd0c$var$TONE_MARK = 4;
const $ce39c5154631fd0c$var$INVALID = 5;
const $ce39c5154631fd0c$var$STATE_TABLE = [
    [
        [
            $ce39c5154631fd0c$var$NO_ACTION,
            0
        ],
        [
            $ce39c5154631fd0c$var$NO_ACTION,
            1
        ],
        [
            $ce39c5154631fd0c$var$NO_ACTION,
            0
        ],
        [
            $ce39c5154631fd0c$var$NO_ACTION,
            0
        ],
        [
            $ce39c5154631fd0c$var$DECOMPOSE,
            2
        ],
        [
            $ce39c5154631fd0c$var$DECOMPOSE,
            3
        ],
        [
            $ce39c5154631fd0c$var$INVALID,
            0
        ]
    ],
    [
        [
            $ce39c5154631fd0c$var$NO_ACTION,
            0
        ],
        [
            $ce39c5154631fd0c$var$NO_ACTION,
            1
        ],
        [
            $ce39c5154631fd0c$var$COMPOSE,
            2
        ],
        [
            $ce39c5154631fd0c$var$NO_ACTION,
            0
        ],
        [
            $ce39c5154631fd0c$var$DECOMPOSE,
            2
        ],
        [
            $ce39c5154631fd0c$var$DECOMPOSE,
            3
        ],
        [
            $ce39c5154631fd0c$var$INVALID,
            0
        ]
    ],
    [
        [
            $ce39c5154631fd0c$var$NO_ACTION,
            0
        ],
        [
            $ce39c5154631fd0c$var$NO_ACTION,
            1
        ],
        [
            $ce39c5154631fd0c$var$NO_ACTION,
            0
        ],
        [
            $ce39c5154631fd0c$var$COMPOSE,
            3
        ],
        [
            $ce39c5154631fd0c$var$DECOMPOSE,
            2
        ],
        [
            $ce39c5154631fd0c$var$DECOMPOSE,
            3
        ],
        [
            $ce39c5154631fd0c$var$TONE_MARK,
            0
        ]
    ],
    [
        [
            $ce39c5154631fd0c$var$NO_ACTION,
            0
        ],
        [
            $ce39c5154631fd0c$var$NO_ACTION,
            1
        ],
        [
            $ce39c5154631fd0c$var$NO_ACTION,
            0
        ],
        [
            $ce39c5154631fd0c$var$NO_ACTION,
            0
        ],
        [
            $ce39c5154631fd0c$var$DECOMPOSE,
            2
        ],
        [
            $ce39c5154631fd0c$var$DECOMPOSE,
            3
        ],
        [
            $ce39c5154631fd0c$var$TONE_MARK,
            0
        ]
    ]
];
function $ce39c5154631fd0c$var$getGlyph(font, code, features) {
    return new $8cba766f534deddd$export$2e2bcd8739ae039(font, font.glyphForCodePoint(code).id, [
        code
    ], features);
}
function $ce39c5154631fd0c$var$decompose(glyphs, i, font) {
    let glyph = glyphs[i];
    let code = glyph.codePoints[0];
    let s = code - $ce39c5154631fd0c$var$HANGUL_BASE;
    let t = $ce39c5154631fd0c$var$T_BASE + s % $ce39c5154631fd0c$var$T_COUNT;
    s = s / $ce39c5154631fd0c$var$T_COUNT | 0;
    let l = $ce39c5154631fd0c$var$L_BASE + s / $ce39c5154631fd0c$var$V_COUNT | 0;
    let v = $ce39c5154631fd0c$var$V_BASE + s % $ce39c5154631fd0c$var$V_COUNT;
    if (!font.hasGlyphForCodePoint(l) || !font.hasGlyphForCodePoint(v) || t !== $ce39c5154631fd0c$var$T_BASE && !font.hasGlyphForCodePoint(t)) return i;
    let ljmo = $ce39c5154631fd0c$var$getGlyph(font, l, glyph.features);
    ljmo.features.ljmo = true;
    let vjmo = $ce39c5154631fd0c$var$getGlyph(font, v, glyph.features);
    vjmo.features.vjmo = true;
    let insert = [
        ljmo,
        vjmo
    ];
    if (t > $ce39c5154631fd0c$var$T_BASE) {
        let tjmo = $ce39c5154631fd0c$var$getGlyph(font, t, glyph.features);
        tjmo.features.tjmo = true;
        insert.push(tjmo);
    }
    glyphs.splice(i, 1, ...insert);
    return i + insert.length - 1;
}
function $ce39c5154631fd0c$var$compose(glyphs, i, font) {
    let glyph = glyphs[i];
    let code = glyphs[i].codePoints[0];
    let type = $ce39c5154631fd0c$var$getType(code);
    let prev = glyphs[i - 1].codePoints[0];
    let prevType = $ce39c5154631fd0c$var$getType(prev);
    let lv, ljmo, vjmo, tjmo;
    if (prevType === $ce39c5154631fd0c$var$LV && type === $ce39c5154631fd0c$var$T) {
        lv = prev;
        tjmo = glyph;
    } else {
        if (type === $ce39c5154631fd0c$var$V) {
            ljmo = glyphs[i - 1];
            vjmo = glyph;
        } else {
            ljmo = glyphs[i - 2];
            vjmo = glyphs[i - 1];
            tjmo = glyph;
        }
        let l = ljmo.codePoints[0];
        let v = vjmo.codePoints[0];
        if ($ce39c5154631fd0c$var$isCombiningL(l) && $ce39c5154631fd0c$var$isCombiningV(v)) lv = $ce39c5154631fd0c$var$HANGUL_BASE + ((l - $ce39c5154631fd0c$var$L_BASE) * $ce39c5154631fd0c$var$V_COUNT + (v - $ce39c5154631fd0c$var$V_BASE)) * $ce39c5154631fd0c$var$T_COUNT;
    }
    let t = tjmo && tjmo.codePoints[0] || $ce39c5154631fd0c$var$T_BASE;
    if (lv != null && (t === $ce39c5154631fd0c$var$T_BASE || $ce39c5154631fd0c$var$isCombiningT(t))) {
        let s = lv + (t - $ce39c5154631fd0c$var$T_BASE);
        if (font.hasGlyphForCodePoint(s)) {
            let del = prevType === $ce39c5154631fd0c$var$V ? 3 : 2;
            glyphs.splice(i - del + 1, del, $ce39c5154631fd0c$var$getGlyph(font, s, glyph.features));
            return i - del + 1;
        }
    }
    if (ljmo) ljmo.features.ljmo = true;
    if (vjmo) vjmo.features.vjmo = true;
    if (tjmo) tjmo.features.tjmo = true;
    if (prevType === $ce39c5154631fd0c$var$LV) {
        $ce39c5154631fd0c$var$decompose(glyphs, i - 1, font);
        return i + 1;
    }
    return i;
}
function $ce39c5154631fd0c$var$getLength(code) {
    switch($ce39c5154631fd0c$var$getType(code)){
        case $ce39c5154631fd0c$var$LV:
        case $ce39c5154631fd0c$var$LVT:
            return 1;
        case $ce39c5154631fd0c$var$V:
            return 2;
        case $ce39c5154631fd0c$var$T:
            return 3;
    }
}
function $ce39c5154631fd0c$var$reorderToneMark(glyphs, i, font) {
    let glyph = glyphs[i];
    let code = glyphs[i].codePoints[0];
    if (font.glyphForCodePoint(code).advanceWidth === 0) return;
    let prev = glyphs[i - 1].codePoints[0];
    let len = $ce39c5154631fd0c$var$getLength(prev);
    glyphs.splice(i, 1);
    return glyphs.splice(i - len, 0, glyph);
}
function $ce39c5154631fd0c$var$insertDottedCircle(glyphs, i, font) {
    let glyph = glyphs[i];
    let code = glyphs[i].codePoints[0];
    if (font.hasGlyphForCodePoint($ce39c5154631fd0c$var$DOTTED_CIRCLE)) {
        let dottedCircle = $ce39c5154631fd0c$var$getGlyph(font, $ce39c5154631fd0c$var$DOTTED_CIRCLE, glyph.features);
        let idx = font.glyphForCodePoint(code).advanceWidth === 0 ? i : i + 1;
        glyphs.splice(idx, 0, dottedCircle);
        i++;
    }
    return i;
}
var $a550b6039b7700b3$exports = {};
$a550b6039b7700b3$exports = JSON.parse("{\"stateTable\":[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,2,3,4,5,6,7,8,9,0,10,11,11,12,13,14,15,16,17],[0,0,0,18,19,20,21,22,23,0,24,0,0,25,26,0,0,27,0],[0,0,0,28,29,30,31,32,33,0,34,0,0,35,36,0,0,37,0],[0,0,0,38,5,7,7,8,9,0,10,0,0,0,13,0,0,16,0],[0,39,0,0,0,40,41,0,9,0,10,0,0,0,42,0,39,0,0],[0,0,0,0,43,44,44,8,9,0,0,0,0,12,43,0,0,0,0],[0,0,0,0,43,44,44,8,9,0,0,0,0,0,43,0,0,0,0],[0,0,0,45,46,47,48,49,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,50,0,0,51,0,10,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,52,0,0,0,0,0,0,0,0],[0,0,0,53,54,55,56,57,58,0,59,0,0,60,61,0,0,62,0],[0,0,0,4,5,7,7,8,9,0,10,0,0,0,13,0,0,16,0],[0,63,64,0,0,40,41,0,9,0,10,0,0,0,42,0,63,0,0],[0,2,3,4,5,6,7,8,9,0,10,11,11,12,13,0,2,16,0],[0,0,0,18,65,20,21,22,23,0,24,0,0,25,26,0,0,27,0],[0,0,0,0,66,67,67,8,9,0,10,0,0,0,68,0,0,0,0],[0,0,0,69,0,70,70,0,71,0,72,0,0,0,0,0,0,0,0],[0,0,0,73,19,74,74,22,23,0,24,0,0,0,26,0,0,27,0],[0,75,0,0,0,76,77,0,23,0,24,0,0,0,78,0,75,0,0],[0,0,0,0,79,80,80,22,23,0,0,0,0,25,79,0,0,0,0],[0,0,0,18,19,20,74,22,23,0,24,0,0,25,26,0,0,27,0],[0,0,0,81,82,83,84,85,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,86,0,0,87,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,88,0,0,0,0,0,0,0,0],[0,0,0,18,19,74,74,22,23,0,24,0,0,0,26,0,0,27,0],[0,89,90,0,0,76,77,0,23,0,24,0,0,0,78,0,89,0,0],[0,0,0,0,91,92,92,22,23,0,24,0,0,0,93,0,0,0,0],[0,0,0,94,29,95,31,32,33,0,34,0,0,0,36,0,0,37,0],[0,96,0,0,0,97,98,0,33,0,34,0,0,0,99,0,96,0,0],[0,0,0,0,100,101,101,32,33,0,0,0,0,35,100,0,0,0,0],[0,0,0,0,100,101,101,32,33,0,0,0,0,0,100,0,0,0,0],[0,0,0,102,103,104,105,106,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,107,0,0,108,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,109,0,0,0,0,0,0,0,0],[0,0,0,28,29,95,31,32,33,0,34,0,0,0,36,0,0,37,0],[0,110,111,0,0,97,98,0,33,0,34,0,0,0,99,0,110,0,0],[0,0,0,0,112,113,113,32,33,0,34,0,0,0,114,0,0,0,0],[0,0,0,0,5,7,7,8,9,0,10,0,0,0,13,0,0,16,0],[0,0,0,115,116,117,118,8,9,0,10,0,0,119,120,0,0,16,0],[0,0,0,0,0,121,121,0,9,0,10,0,0,0,42,0,0,0,0],[0,39,0,122,0,123,123,8,9,0,10,0,0,0,42,0,39,0,0],[0,124,64,0,0,0,0,0,0,0,0,0,0,0,0,0,124,0,0],[0,39,0,0,0,121,125,0,9,0,10,0,0,0,42,0,39,0,0],[0,0,0,0,0,126,126,8,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,46,47,48,49,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,47,47,49,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,127,127,49,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,128,127,127,49,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,129,130,131,132,133,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0],[0,0,0,0,0,50,0,0,0,0,10,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,134,0,0,0,0,0,0,0,0],[0,0,0,135,54,56,56,57,58,0,59,0,0,0,61,0,0,62,0],[0,136,0,0,0,137,138,0,58,0,59,0,0,0,139,0,136,0,0],[0,0,0,0,140,141,141,57,58,0,0,0,0,60,140,0,0,0,0],[0,0,0,0,140,141,141,57,58,0,0,0,0,0,140,0,0,0,0],[0,0,0,142,143,144,145,146,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,147,0,0,148,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,149,0,0,0,0,0,0,0,0],[0,0,0,53,54,56,56,57,58,0,59,0,0,0,61,0,0,62,0],[0,150,151,0,0,137,138,0,58,0,59,0,0,0,139,0,150,0,0],[0,0,0,0,152,153,153,57,58,0,59,0,0,0,154,0,0,0,0],[0,0,0,155,116,156,157,8,9,0,10,0,0,158,120,0,0,16,0],[0,0,0,0,0,121,121,0,9,0,10,0,0,0,0,0,0,0,0],[0,75,3,4,5,159,160,8,161,0,162,0,11,12,163,0,75,16,0],[0,0,0,0,0,40,164,0,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,165,44,44,8,9,0,0,0,0,0,165,0,0,0,0],[0,124,64,0,0,40,164,0,9,0,10,0,0,0,42,0,124,0,0],[0,0,0,0,0,70,70,0,71,0,72,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,71,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,166,0,0,167,0,72,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,168,0,0,0,0,0,0,0,0],[0,0,0,0,19,74,74,22,23,0,24,0,0,0,26,0,0,27,0],[0,0,0,0,79,80,80,22,23,0,0,0,0,0,79,0,0,0,0],[0,0,0,169,170,171,172,22,23,0,24,0,0,173,174,0,0,27,0],[0,0,0,0,0,175,175,0,23,0,24,0,0,0,78,0,0,0,0],[0,75,0,176,0,177,177,22,23,0,24,0,0,0,78,0,75,0,0],[0,178,90,0,0,0,0,0,0,0,0,0,0,0,0,0,178,0,0],[0,75,0,0,0,175,179,0,23,0,24,0,0,0,78,0,75,0,0],[0,0,0,0,0,180,180,22,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,82,83,84,85,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,83,83,85,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,181,181,85,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,182,181,181,85,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,183,184,185,186,187,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,86,0,0,0,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,188,0,0,0,0,0,0,0,0],[0,0,0,189,170,190,191,22,23,0,24,0,0,192,174,0,0,27,0],[0,0,0,0,0,175,175,0,23,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,76,193,0,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,194,80,80,22,23,0,0,0,0,0,194,0,0,0,0],[0,178,90,0,0,76,193,0,23,0,24,0,0,0,78,0,178,0,0],[0,0,0,0,29,95,31,32,33,0,34,0,0,0,36,0,0,37,0],[0,0,0,0,100,101,101,32,33,0,0,0,0,0,100,0,0,0,0],[0,0,0,195,196,197,198,32,33,0,34,0,0,199,200,0,0,37,0],[0,0,0,0,0,201,201,0,33,0,34,0,0,0,99,0,0,0,0],[0,96,0,202,0,203,203,32,33,0,34,0,0,0,99,0,96,0,0],[0,204,111,0,0,0,0,0,0,0,0,0,0,0,0,0,204,0,0],[0,96,0,0,0,201,205,0,33,0,34,0,0,0,99,0,96,0,0],[0,0,0,0,0,206,206,32,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,103,104,105,106,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,104,104,106,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,207,207,106,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,208,207,207,106,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,209,210,211,212,213,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,107,0,0,0,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,214,0,0,0,0,0,0,0,0],[0,0,0,215,196,216,217,32,33,0,34,0,0,218,200,0,0,37,0],[0,0,0,0,0,201,201,0,33,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,97,219,0,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,220,101,101,32,33,0,0,0,0,0,220,0,0,0,0],[0,204,111,0,0,97,219,0,33,0,34,0,0,0,99,0,204,0,0],[0,0,0,221,116,222,222,8,9,0,10,0,0,0,120,0,0,16,0],[0,223,0,0,0,40,224,0,9,0,10,0,0,0,42,0,223,0,0],[0,0,0,0,225,44,44,8,9,0,0,0,0,119,225,0,0,0,0],[0,0,0,115,116,117,222,8,9,0,10,0,0,119,120,0,0,16,0],[0,0,0,115,116,222,222,8,9,0,10,0,0,0,120,0,0,16,0],[0,226,64,0,0,40,224,0,9,0,10,0,0,0,42,0,226,0,0],[0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0],[0,39,0,0,0,121,121,0,9,0,10,0,0,0,42,0,39,0,0],[0,0,0,0,0,44,44,8,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,227,0,228,229,0,9,0,10,0,0,230,0,0,0,0,0],[0,39,0,122,0,121,121,0,9,0,10,0,0,0,42,0,39,0,0],[0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,231,231,49,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,232,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,130,131,132,133,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,131,131,133,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,233,233,133,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,234,233,233,133,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,235,236,237,238,239,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,54,56,56,57,58,0,59,0,0,0,61,0,0,62,0],[0,0,0,240,241,242,243,57,58,0,59,0,0,244,245,0,0,62,0],[0,0,0,0,0,246,246,0,58,0,59,0,0,0,139,0,0,0,0],[0,136,0,247,0,248,248,57,58,0,59,0,0,0,139,0,136,0,0],[0,249,151,0,0,0,0,0,0,0,0,0,0,0,0,0,249,0,0],[0,136,0,0,0,246,250,0,58,0,59,0,0,0,139,0,136,0,0],[0,0,0,0,0,251,251,57,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,143,144,145,146,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,144,144,146,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,252,252,146,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,253,252,252,146,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,254,255,256,257,258,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,147,0,0,0,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,259,0,0,0,0,0,0,0,0],[0,0,0,260,241,261,262,57,58,0,59,0,0,263,245,0,0,62,0],[0,0,0,0,0,246,246,0,58,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,137,264,0,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,265,141,141,57,58,0,0,0,0,0,265,0,0,0,0],[0,249,151,0,0,137,264,0,58,0,59,0,0,0,139,0,249,0,0],[0,0,0,221,116,222,222,8,9,0,10,0,0,0,120,0,0,16,0],[0,0,0,0,225,44,44,8,9,0,0,0,0,158,225,0,0,0,0],[0,0,0,155,116,156,222,8,9,0,10,0,0,158,120,0,0,16,0],[0,0,0,155,116,222,222,8,9,0,10,0,0,0,120,0,0,16,0],[0,0,0,0,43,266,266,8,161,0,24,0,0,12,267,0,0,0,0],[0,75,0,176,43,268,268,269,161,0,24,0,0,0,267,0,75,0,0],[0,0,0,0,0,270,0,0,271,0,162,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,272,0,0,0,0,0,0,0,0],[0,273,274,0,0,40,41,0,9,0,10,0,0,0,42,0,273,0,0],[0,0,0,40,0,123,123,8,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,121,275,0,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,0],[0,0,0,0,0,166,0,0,0,0,72,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,276,0,0,0,0,0,0,0,0],[0,0,0,277,170,278,278,22,23,0,24,0,0,0,174,0,0,27,0],[0,279,0,0,0,76,280,0,23,0,24,0,0,0,78,0,279,0,0],[0,0,0,0,281,80,80,22,23,0,0,0,0,173,281,0,0,0,0],[0,0,0,169,170,171,278,22,23,0,24,0,0,173,174,0,0,27,0],[0,0,0,169,170,278,278,22,23,0,24,0,0,0,174,0,0,27,0],[0,282,90,0,0,76,280,0,23,0,24,0,0,0,78,0,282,0,0],[0,0,0,0,0,0,0,0,23,0,0,0,0,0,0,0,0,0,0],[0,75,0,0,0,175,175,0,23,0,24,0,0,0,78,0,75,0,0],[0,0,0,0,0,80,80,22,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,283,0,284,285,0,23,0,24,0,0,286,0,0,0,0,0],[0,75,0,176,0,175,175,0,23,0,24,0,0,0,78,0,75,0,0],[0,0,0,0,0,0,0,22,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,287,287,85,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,288,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,184,185,186,187,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,185,185,187,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,289,289,187,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,290,289,289,187,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,291,292,293,294,295,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,277,170,278,278,22,23,0,24,0,0,0,174,0,0,27,0],[0,0,0,0,281,80,80,22,23,0,0,0,0,192,281,0,0,0,0],[0,0,0,189,170,190,278,22,23,0,24,0,0,192,174,0,0,27,0],[0,0,0,189,170,278,278,22,23,0,24,0,0,0,174,0,0,27,0],[0,0,0,76,0,177,177,22,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,175,296,0,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,297,196,298,298,32,33,0,34,0,0,0,200,0,0,37,0],[0,299,0,0,0,97,300,0,33,0,34,0,0,0,99,0,299,0,0],[0,0,0,0,301,101,101,32,33,0,0,0,0,199,301,0,0,0,0],[0,0,0,195,196,197,298,32,33,0,34,0,0,199,200,0,0,37,0],[0,0,0,195,196,298,298,32,33,0,34,0,0,0,200,0,0,37,0],[0,302,111,0,0,97,300,0,33,0,34,0,0,0,99,0,302,0,0],[0,0,0,0,0,0,0,0,33,0,0,0,0,0,0,0,0,0,0],[0,96,0,0,0,201,201,0,33,0,34,0,0,0,99,0,96,0,0],[0,0,0,0,0,101,101,32,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,303,0,304,305,0,33,0,34,0,0,306,0,0,0,0,0],[0,96,0,202,0,201,201,0,33,0,34,0,0,0,99,0,96,0,0],[0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,307,307,106,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,308,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,210,211,212,213,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,211,211,213,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,309,309,213,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,310,309,309,213,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,311,312,313,314,315,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,297,196,298,298,32,33,0,34,0,0,0,200,0,0,37,0],[0,0,0,0,301,101,101,32,33,0,0,0,0,218,301,0,0,0,0],[0,0,0,215,196,216,298,32,33,0,34,0,0,218,200,0,0,37,0],[0,0,0,215,196,298,298,32,33,0,34,0,0,0,200,0,0,37,0],[0,0,0,97,0,203,203,32,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,201,316,0,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,116,222,222,8,9,0,10,0,0,0,120,0,0,16,0],[0,0,0,0,225,44,44,8,9,0,0,0,0,0,225,0,0,0,0],[0,0,0,317,318,319,320,8,9,0,10,0,0,321,322,0,0,16,0],[0,223,0,323,0,123,123,8,9,0,10,0,0,0,42,0,223,0,0],[0,223,0,0,0,121,324,0,9,0,10,0,0,0,42,0,223,0,0],[0,0,0,325,318,326,327,8,9,0,10,0,0,328,322,0,0,16,0],[0,0,0,64,0,121,121,0,9,0,10,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,9,0,0,0,0,230,0,0,0,0,0],[0,0,0,227,0,228,121,0,9,0,10,0,0,230,0,0,0,0,0],[0,0,0,227,0,121,121,0,9,0,10,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,49,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,0,0],[0,0,0,0,0,329,329,133,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,330,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,236,237,238,239,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,237,237,239,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,331,331,239,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,332,331,331,239,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,333,40,121,334,0,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,335,241,336,336,57,58,0,59,0,0,0,245,0,0,62,0],[0,337,0,0,0,137,338,0,58,0,59,0,0,0,139,0,337,0,0],[0,0,0,0,339,141,141,57,58,0,0,0,0,244,339,0,0,0,0],[0,0,0,240,241,242,336,57,58,0,59,0,0,244,245,0,0,62,0],[0,0,0,240,241,336,336,57,58,0,59,0,0,0,245,0,0,62,0],[0,340,151,0,0,137,338,0,58,0,59,0,0,0,139,0,340,0,0],[0,0,0,0,0,0,0,0,58,0,0,0,0,0,0,0,0,0,0],[0,136,0,0,0,246,246,0,58,0,59,0,0,0,139,0,136,0,0],[0,0,0,0,0,141,141,57,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,341,0,342,343,0,58,0,59,0,0,344,0,0,0,0,0],[0,136,0,247,0,246,246,0,58,0,59,0,0,0,139,0,136,0,0],[0,0,0,0,0,0,0,57,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,345,345,146,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,346,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,255,256,257,258,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,256,256,258,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,347,347,258,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,348,347,347,258,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,349,350,351,352,353,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,335,241,336,336,57,58,0,59,0,0,0,245,0,0,62,0],[0,0,0,0,339,141,141,57,58,0,0,0,0,263,339,0,0,0,0],[0,0,0,260,241,261,336,57,58,0,59,0,0,263,245,0,0,62,0],[0,0,0,260,241,336,336,57,58,0,59,0,0,0,245,0,0,62,0],[0,0,0,137,0,248,248,57,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,246,354,0,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,126,126,8,23,0,0,0,0,0,0,0,0,0,0],[0,355,90,0,0,121,125,0,9,0,10,0,0,0,42,0,355,0,0],[0,0,0,0,0,356,356,269,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,357,358,359,360,361,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,162,0,0,0,0,0,0,0,0],[0,0,0,0,0,270,0,0,0,0,162,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,0,0,0,0],[0,0,0,364,116,365,366,8,161,0,162,0,0,367,120,0,0,16,0],[0,0,0,0,0,368,368,0,161,0,162,0,0,0,0,0,0,0,0],[0,0,0,40,0,121,121,0,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,170,278,278,22,23,0,24,0,0,0,174,0,0,27,0],[0,0,0,0,281,80,80,22,23,0,0,0,0,0,281,0,0,0,0],[0,0,0,369,370,371,372,22,23,0,24,0,0,373,374,0,0,27,0],[0,279,0,375,0,177,177,22,23,0,24,0,0,0,78,0,279,0,0],[0,279,0,0,0,175,376,0,23,0,24,0,0,0,78,0,279,0,0],[0,0,0,377,370,378,379,22,23,0,24,0,0,380,374,0,0,27,0],[0,0,0,90,0,175,175,0,23,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,23,0,0,0,0,286,0,0,0,0,0],[0,0,0,283,0,284,175,0,23,0,24,0,0,286,0,0,0,0,0],[0,0,0,283,0,175,175,0,23,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,85,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,82,0,0],[0,0,0,0,0,381,381,187,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,382,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,292,293,294,295,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,293,293,295,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,383,383,295,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,384,383,383,295,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,385,76,175,386,0,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,76,0,175,175,0,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,196,298,298,32,33,0,34,0,0,0,200,0,0,37,0],[0,0,0,0,301,101,101,32,33,0,0,0,0,0,301,0,0,0,0],[0,0,0,387,388,389,390,32,33,0,34,0,0,391,392,0,0,37,0],[0,299,0,393,0,203,203,32,33,0,34,0,0,0,99,0,299,0,0],[0,299,0,0,0,201,394,0,33,0,34,0,0,0,99,0,299,0,0],[0,0,0,395,388,396,397,32,33,0,34,0,0,398,392,0,0,37,0],[0,0,0,111,0,201,201,0,33,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,33,0,0,0,0,306,0,0,0,0,0],[0,0,0,303,0,304,201,0,33,0,34,0,0,306,0,0,0,0,0],[0,0,0,303,0,201,201,0,33,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,103,0,0],[0,0,0,0,0,399,399,213,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,400,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,312,313,314,315,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,313,313,315,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,401,401,315,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,402,401,401,315,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,403,97,201,404,0,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,97,0,201,201,0,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,405,318,406,406,8,9,0,10,0,0,0,322,0,0,16,0],[0,407,0,0,0,40,408,0,9,0,10,0,0,0,42,0,407,0,0],[0,0,0,0,409,44,44,8,9,0,0,0,0,321,409,0,0,0,0],[0,0,0,317,318,319,406,8,9,0,10,0,0,321,322,0,0,16,0],[0,0,0,317,318,406,406,8,9,0,10,0,0,0,322,0,0,16,0],[0,410,64,0,0,40,408,0,9,0,10,0,0,0,42,0,410,0,0],[0,223,0,0,0,121,121,0,9,0,10,0,0,0,42,0,223,0,0],[0,223,0,323,0,121,121,0,9,0,10,0,0,0,42,0,223,0,0],[0,0,0,405,318,406,406,8,9,0,10,0,0,0,322,0,0,16,0],[0,0,0,0,409,44,44,8,9,0,0,0,0,328,409,0,0,0,0],[0,0,0,325,318,326,406,8,9,0,10,0,0,328,322,0,0,16,0],[0,0,0,325,318,406,406,8,9,0,10,0,0,0,322,0,0,16,0],[0,0,0,0,0,0,0,133,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,130,0,0],[0,0,0,0,0,411,411,239,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,412,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,40,121,334,0,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,413,0,0,0,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,241,336,336,57,58,0,59,0,0,0,245,0,0,62,0],[0,0,0,0,339,141,141,57,58,0,0,0,0,0,339,0,0,0,0],[0,0,0,414,415,416,417,57,58,0,59,0,0,418,419,0,0,62,0],[0,337,0,420,0,248,248,57,58,0,59,0,0,0,139,0,337,0,0],[0,337,0,0,0,246,421,0,58,0,59,0,0,0,139,0,337,0,0],[0,0,0,422,415,423,424,57,58,0,59,0,0,425,419,0,0,62,0],[0,0,0,151,0,246,246,0,58,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,58,0,0,0,0,344,0,0,0,0,0],[0,0,0,341,0,342,246,0,58,0,59,0,0,344,0,0,0,0,0],[0,0,0,341,0,246,246,0,58,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,146,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,143,0,0],[0,0,0,0,0,426,426,258,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,427,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,350,351,352,353,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,351,351,353,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,428,428,353,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,429,428,428,353,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,430,137,246,431,0,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,137,0,246,246,0,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,432,116,433,434,8,161,0,162,0,0,435,120,0,0,16,0],[0,0,0,0,0,180,180,269,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,358,359,360,361,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,359,359,361,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,436,436,361,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,437,436,436,361,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,438,439,440,441,442,161,0,162,0,0,0,362,0,0,0,0],[0,443,274,0,0,0,0,0,0,0,0,0,0,0,0,0,443,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,444,116,445,445,8,161,0,162,0,0,0,120,0,0,16,0],[0,0,0,0,225,44,44,8,161,0,0,0,0,367,225,0,0,0,0],[0,0,0,364,116,365,445,8,161,0,162,0,0,367,120,0,0,16,0],[0,0,0,364,116,445,445,8,161,0,162,0,0,0,120,0,0,16,0],[0,0,0,0,0,0,0,0,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,446,370,447,447,22,23,0,24,0,0,0,374,0,0,27,0],[0,448,0,0,0,76,449,0,23,0,24,0,0,0,78,0,448,0,0],[0,0,0,0,450,80,80,22,23,0,0,0,0,373,450,0,0,0,0],[0,0,0,369,370,371,447,22,23,0,24,0,0,373,374,0,0,27,0],[0,0,0,369,370,447,447,22,23,0,24,0,0,0,374,0,0,27,0],[0,451,90,0,0,76,449,0,23,0,24,0,0,0,78,0,451,0,0],[0,279,0,0,0,175,175,0,23,0,24,0,0,0,78,0,279,0,0],[0,279,0,375,0,175,175,0,23,0,24,0,0,0,78,0,279,0,0],[0,0,0,446,370,447,447,22,23,0,24,0,0,0,374,0,0,27,0],[0,0,0,0,450,80,80,22,23,0,0,0,0,380,450,0,0,0,0],[0,0,0,377,370,378,447,22,23,0,24,0,0,380,374,0,0,27,0],[0,0,0,377,370,447,447,22,23,0,24,0,0,0,374,0,0,27,0],[0,0,0,0,0,0,0,187,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,0,0],[0,0,0,0,0,452,452,295,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,453,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,76,175,386,0,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,454,0,0,0,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,455,388,456,456,32,33,0,34,0,0,0,392,0,0,37,0],[0,457,0,0,0,97,458,0,33,0,34,0,0,0,99,0,457,0,0],[0,0,0,0,459,101,101,32,33,0,0,0,0,391,459,0,0,0,0],[0,0,0,387,388,389,456,32,33,0,34,0,0,391,392,0,0,37,0],[0,0,0,387,388,456,456,32,33,0,34,0,0,0,392,0,0,37,0],[0,460,111,0,0,97,458,0,33,0,34,0,0,0,99,0,460,0,0],[0,299,0,0,0,201,201,0,33,0,34,0,0,0,99,0,299,0,0],[0,299,0,393,0,201,201,0,33,0,34,0,0,0,99,0,299,0,0],[0,0,0,455,388,456,456,32,33,0,34,0,0,0,392,0,0,37,0],[0,0,0,0,459,101,101,32,33,0,0,0,0,398,459,0,0,0,0],[0,0,0,395,388,396,456,32,33,0,34,0,0,398,392,0,0,37,0],[0,0,0,395,388,456,456,32,33,0,34,0,0,0,392,0,0,37,0],[0,0,0,0,0,0,0,213,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,210,0,0],[0,0,0,0,0,461,461,315,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,462,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,97,201,404,0,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,463,0,0,0,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,318,406,406,8,9,0,10,0,0,0,322,0,0,16,0],[0,0,0,0,409,44,44,8,9,0,0,0,0,0,409,0,0,0,0],[0,0,0,464,465,466,467,8,9,0,10,0,0,468,469,0,0,16,0],[0,407,0,470,0,123,123,8,9,0,10,0,0,0,42,0,407,0,0],[0,407,0,0,0,121,471,0,9,0,10,0,0,0,42,0,407,0,0],[0,0,0,472,465,473,474,8,9,0,10,0,0,475,469,0,0,16,0],[0,0,0,0,0,0,0,239,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,236,0,0],[0,0,0,0,0,0,476,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,477,415,478,478,57,58,0,59,0,0,0,419,0,0,62,0],[0,479,0,0,0,137,480,0,58,0,59,0,0,0,139,0,479,0,0],[0,0,0,0,481,141,141,57,58,0,0,0,0,418,481,0,0,0,0],[0,0,0,414,415,416,478,57,58,0,59,0,0,418,419,0,0,62,0],[0,0,0,414,415,478,478,57,58,0,59,0,0,0,419,0,0,62,0],[0,482,151,0,0,137,480,0,58,0,59,0,0,0,139,0,482,0,0],[0,337,0,0,0,246,246,0,58,0,59,0,0,0,139,0,337,0,0],[0,337,0,420,0,246,246,0,58,0,59,0,0,0,139,0,337,0,0],[0,0,0,477,415,478,478,57,58,0,59,0,0,0,419,0,0,62,0],[0,0,0,0,481,141,141,57,58,0,0,0,0,425,481,0,0,0,0],[0,0,0,422,415,423,478,57,58,0,59,0,0,425,419,0,0,62,0],[0,0,0,422,415,478,478,57,58,0,59,0,0,0,419,0,0,62,0],[0,0,0,0,0,0,0,258,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0],[0,0,0,0,0,483,483,353,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,484,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,137,246,431,0,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,485,0,0,0,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,444,116,445,445,8,161,0,162,0,0,0,120,0,0,16,0],[0,0,0,0,225,44,44,8,161,0,0,0,0,435,225,0,0,0,0],[0,0,0,432,116,433,445,8,161,0,162,0,0,435,120,0,0,16,0],[0,0,0,432,116,445,445,8,161,0,162,0,0,0,120,0,0,16,0],[0,0,0,0,0,486,486,361,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,487,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,439,440,441,442,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,440,440,442,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,488,488,442,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,489,488,488,442,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,490,491,492,493,494,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,495,0,496,497,0,161,0,162,0,0,498,0,0,0,0,0],[0,0,0,0,116,445,445,8,161,0,162,0,0,0,120,0,0,16,0],[0,0,0,0,225,44,44,8,161,0,0,0,0,0,225,0,0,0,0],[0,0,0,0,370,447,447,22,23,0,24,0,0,0,374,0,0,27,0],[0,0,0,0,450,80,80,22,23,0,0,0,0,0,450,0,0,0,0],[0,0,0,499,500,501,502,22,23,0,24,0,0,503,504,0,0,27,0],[0,448,0,505,0,177,177,22,23,0,24,0,0,0,78,0,448,0,0],[0,448,0,0,0,175,506,0,23,0,24,0,0,0,78,0,448,0,0],[0,0,0,507,500,508,509,22,23,0,24,0,0,510,504,0,0,27,0],[0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,292,0,0],[0,0,0,0,0,0,511,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,388,456,456,32,33,0,34,0,0,0,392,0,0,37,0],[0,0,0,0,459,101,101,32,33,0,0,0,0,0,459,0,0,0,0],[0,0,0,512,513,514,515,32,33,0,34,0,0,516,517,0,0,37,0],[0,457,0,518,0,203,203,32,33,0,34,0,0,0,99,0,457,0,0],[0,457,0,0,0,201,519,0,33,0,34,0,0,0,99,0,457,0,0],[0,0,0,520,513,521,522,32,33,0,34,0,0,523,517,0,0,37,0],[0,0,0,0,0,0,0,315,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,312,0,0],[0,0,0,0,0,0,524,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,525,465,526,526,8,9,0,10,0,0,0,469,0,0,16,0],[0,527,0,0,0,40,528,0,9,0,10,0,0,0,42,0,527,0,0],[0,0,0,0,529,44,44,8,9,0,0,0,0,468,529,0,0,0,0],[0,0,0,464,465,466,526,8,9,0,10,0,0,468,469,0,0,16,0],[0,0,0,464,465,526,526,8,9,0,10,0,0,0,469,0,0,16,0],[0,530,64,0,0,40,528,0,9,0,10,0,0,0,42,0,530,0,0],[0,407,0,0,0,121,121,0,9,0,10,0,0,0,42,0,407,0,0],[0,407,0,470,0,121,121,0,9,0,10,0,0,0,42,0,407,0,0],[0,0,0,525,465,526,526,8,9,0,10,0,0,0,469,0,0,16,0],[0,0,0,0,529,44,44,8,9,0,0,0,0,475,529,0,0,0,0],[0,0,0,472,465,473,526,8,9,0,10,0,0,475,469,0,0,16,0],[0,0,0,472,465,526,526,8,9,0,10,0,0,0,469,0,0,16,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,0,0],[0,0,0,0,415,478,478,57,58,0,59,0,0,0,419,0,0,62,0],[0,0,0,0,481,141,141,57,58,0,0,0,0,0,481,0,0,0,0],[0,0,0,531,532,533,534,57,58,0,59,0,0,535,536,0,0,62,0],[0,479,0,537,0,248,248,57,58,0,59,0,0,0,139,0,479,0,0],[0,479,0,0,0,246,538,0,58,0,59,0,0,0,139,0,479,0,0],[0,0,0,539,532,540,541,57,58,0,59,0,0,542,536,0,0,62,0],[0,0,0,0,0,0,0,353,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,350,0,0],[0,0,0,0,0,0,543,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,361,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,358,0,0],[0,0,0,0,0,544,544,442,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,545,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,491,492,493,494,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,492,492,494,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,546,546,494,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,547,546,546,494,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,548,549,368,550,0,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,274,0,368,368,0,161,0,162,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,161,0,0,0,0,498,0,0,0,0,0],[0,0,0,495,0,496,368,0,161,0,162,0,0,498,0,0,0,0,0],[0,0,0,495,0,368,368,0,161,0,162,0,0,0,0,0,0,0,0],[0,0,0,551,500,552,552,22,23,0,24,0,0,0,504,0,0,27,0],[0,553,0,0,0,76,554,0,23,0,24,0,0,0,78,0,553,0,0],[0,0,0,0,555,80,80,22,23,0,0,0,0,503,555,0,0,0,0],[0,0,0,499,500,501,552,22,23,0,24,0,0,503,504,0,0,27,0],[0,0,0,499,500,552,552,22,23,0,24,0,0,0,504,0,0,27,0],[0,556,90,0,0,76,554,0,23,0,24,0,0,0,78,0,556,0,0],[0,448,0,0,0,175,175,0,23,0,24,0,0,0,78,0,448,0,0],[0,448,0,505,0,175,175,0,23,0,24,0,0,0,78,0,448,0,0],[0,0,0,551,500,552,552,22,23,0,24,0,0,0,504,0,0,27,0],[0,0,0,0,555,80,80,22,23,0,0,0,0,510,555,0,0,0,0],[0,0,0,507,500,508,552,22,23,0,24,0,0,510,504,0,0,27,0],[0,0,0,507,500,552,552,22,23,0,24,0,0,0,504,0,0,27,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,0,0],[0,0,0,557,513,558,558,32,33,0,34,0,0,0,517,0,0,37,0],[0,559,0,0,0,97,560,0,33,0,34,0,0,0,99,0,559,0,0],[0,0,0,0,561,101,101,32,33,0,0,0,0,516,561,0,0,0,0],[0,0,0,512,513,514,558,32,33,0,34,0,0,516,517,0,0,37,0],[0,0,0,512,513,558,558,32,33,0,34,0,0,0,517,0,0,37,0],[0,562,111,0,0,97,560,0,33,0,34,0,0,0,99,0,562,0,0],[0,457,0,0,0,201,201,0,33,0,34,0,0,0,99,0,457,0,0],[0,457,0,518,0,201,201,0,33,0,34,0,0,0,99,0,457,0,0],[0,0,0,557,513,558,558,32,33,0,34,0,0,0,517,0,0,37,0],[0,0,0,0,561,101,101,32,33,0,0,0,0,523,561,0,0,0,0],[0,0,0,520,513,521,558,32,33,0,34,0,0,523,517,0,0,37,0],[0,0,0,520,513,558,558,32,33,0,34,0,0,0,517,0,0,37,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,0,0],[0,0,0,0,465,526,526,8,9,0,10,0,0,0,469,0,0,16,0],[0,0,0,0,529,44,44,8,9,0,0,0,0,0,529,0,0,0,0],[0,0,0,563,66,564,565,8,9,0,10,0,0,566,68,0,0,16,0],[0,527,0,567,0,123,123,8,9,0,10,0,0,0,42,0,527,0,0],[0,527,0,0,0,121,568,0,9,0,10,0,0,0,42,0,527,0,0],[0,0,0,569,66,570,571,8,9,0,10,0,0,572,68,0,0,16,0],[0,0,0,573,532,574,574,57,58,0,59,0,0,0,536,0,0,62,0],[0,575,0,0,0,137,576,0,58,0,59,0,0,0,139,0,575,0,0],[0,0,0,0,577,141,141,57,58,0,0,0,0,535,577,0,0,0,0],[0,0,0,531,532,533,574,57,58,0,59,0,0,535,536,0,0,62,0],[0,0,0,531,532,574,574,57,58,0,59,0,0,0,536,0,0,62,0],[0,578,151,0,0,137,576,0,58,0,59,0,0,0,139,0,578,0,0],[0,479,0,0,0,246,246,0,58,0,59,0,0,0,139,0,479,0,0],[0,479,0,537,0,246,246,0,58,0,59,0,0,0,139,0,479,0,0],[0,0,0,573,532,574,574,57,58,0,59,0,0,0,536,0,0,62,0],[0,0,0,0,577,141,141,57,58,0,0,0,0,542,577,0,0,0,0],[0,0,0,539,532,540,574,57,58,0,59,0,0,542,536,0,0,62,0],[0,0,0,539,532,574,574,57,58,0,59,0,0,0,536,0,0,62,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,137,0,0],[0,0,0,0,0,0,0,442,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,439,0,0],[0,0,0,0,0,579,579,494,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,580,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,549,368,550,0,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,368,368,0,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,581,0,0,0,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,500,552,552,22,23,0,24,0,0,0,504,0,0,27,0],[0,0,0,0,555,80,80,22,23,0,0,0,0,0,555,0,0,0,0],[0,0,0,582,91,583,584,22,23,0,24,0,0,585,93,0,0,27,0],[0,553,0,586,0,177,177,22,23,0,24,0,0,0,78,0,553,0,0],[0,553,0,0,0,175,587,0,23,0,24,0,0,0,78,0,553,0,0],[0,0,0,588,91,589,590,22,23,0,24,0,0,591,93,0,0,27,0],[0,0,0,0,513,558,558,32,33,0,34,0,0,0,517,0,0,37,0],[0,0,0,0,561,101,101,32,33,0,0,0,0,0,561,0,0,0,0],[0,0,0,592,112,593,594,32,33,0,34,0,0,595,114,0,0,37,0],[0,559,0,596,0,203,203,32,33,0,34,0,0,0,99,0,559,0,0],[0,559,0,0,0,201,597,0,33,0,34,0,0,0,99,0,559,0,0],[0,0,0,598,112,599,600,32,33,0,34,0,0,601,114,0,0,37,0],[0,0,0,602,66,67,67,8,9,0,10,0,0,0,68,0,0,16,0],[0,0,0,0,165,44,44,8,9,0,0,0,0,566,165,0,0,0,0],[0,0,0,563,66,564,67,8,9,0,10,0,0,566,68,0,0,16,0],[0,0,0,563,66,67,67,8,9,0,10,0,0,0,68,0,0,16,0],[0,527,0,0,0,121,121,0,9,0,10,0,0,0,42,0,527,0,0],[0,527,0,567,0,121,121,0,9,0,10,0,0,0,42,0,527,0,0],[0,0,0,602,66,67,67,8,9,0,10,0,0,0,68,0,0,16,0],[0,0,0,0,165,44,44,8,9,0,0,0,0,572,165,0,0,0,0],[0,0,0,569,66,570,67,8,9,0,10,0,0,572,68,0,0,16,0],[0,0,0,569,66,67,67,8,9,0,10,0,0,0,68,0,0,16,0],[0,0,0,0,532,574,574,57,58,0,59,0,0,0,536,0,0,62,0],[0,0,0,0,577,141,141,57,58,0,0,0,0,0,577,0,0,0,0],[0,0,0,603,152,604,605,57,58,0,59,0,0,606,154,0,0,62,0],[0,575,0,607,0,248,248,57,58,0,59,0,0,0,139,0,575,0,0],[0,575,0,0,0,246,608,0,58,0,59,0,0,0,139,0,575,0,0],[0,0,0,609,152,610,611,57,58,0,59,0,0,612,154,0,0,62,0],[0,0,0,0,0,0,0,494,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,491,0,0],[0,0,0,0,0,0,613,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,614,91,92,92,22,23,0,24,0,0,0,93,0,0,27,0],[0,0,0,0,194,80,80,22,23,0,0,0,0,585,194,0,0,0,0],[0,0,0,582,91,583,92,22,23,0,24,0,0,585,93,0,0,27,0],[0,0,0,582,91,92,92,22,23,0,24,0,0,0,93,0,0,27,0],[0,553,0,0,0,175,175,0,23,0,24,0,0,0,78,0,553,0,0],[0,553,0,586,0,175,175,0,23,0,24,0,0,0,78,0,553,0,0],[0,0,0,614,91,92,92,22,23,0,24,0,0,0,93,0,0,27,0],[0,0,0,0,194,80,80,22,23,0,0,0,0,591,194,0,0,0,0],[0,0,0,588,91,589,92,22,23,0,24,0,0,591,93,0,0,27,0],[0,0,0,588,91,92,92,22,23,0,24,0,0,0,93,0,0,27,0],[0,0,0,615,112,113,113,32,33,0,34,0,0,0,114,0,0,37,0],[0,0,0,0,220,101,101,32,33,0,0,0,0,595,220,0,0,0,0],[0,0,0,592,112,593,113,32,33,0,34,0,0,595,114,0,0,37,0],[0,0,0,592,112,113,113,32,33,0,34,0,0,0,114,0,0,37,0],[0,559,0,0,0,201,201,0,33,0,34,0,0,0,99,0,559,0,0],[0,559,0,596,0,201,201,0,33,0,34,0,0,0,99,0,559,0,0],[0,0,0,615,112,113,113,32,33,0,34,0,0,0,114,0,0,37,0],[0,0,0,0,220,101,101,32,33,0,0,0,0,601,220,0,0,0,0],[0,0,0,598,112,599,113,32,33,0,34,0,0,601,114,0,0,37,0],[0,0,0,598,112,113,113,32,33,0,34,0,0,0,114,0,0,37,0],[0,0,0,0,66,67,67,8,9,0,10,0,0,0,68,0,0,16,0],[0,0,0,616,152,153,153,57,58,0,59,0,0,0,154,0,0,62,0],[0,0,0,0,265,141,141,57,58,0,0,0,0,606,265,0,0,0,0],[0,0,0,603,152,604,153,57,58,0,59,0,0,606,154,0,0,62,0],[0,0,0,603,152,153,153,57,58,0,59,0,0,0,154,0,0,62,0],[0,575,0,0,0,246,246,0,58,0,59,0,0,0,139,0,575,0,0],[0,575,0,607,0,246,246,0,58,0,59,0,0,0,139,0,575,0,0],[0,0,0,616,152,153,153,57,58,0,59,0,0,0,154,0,0,62,0],[0,0,0,0,265,141,141,57,58,0,0,0,0,612,265,0,0,0,0],[0,0,0,609,152,610,153,57,58,0,59,0,0,612,154,0,0,62,0],[0,0,0,609,152,153,153,57,58,0,59,0,0,0,154,0,0,62,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,549,0,0],[0,0,0,0,91,92,92,22,23,0,24,0,0,0,93,0,0,27,0],[0,0,0,0,112,113,113,32,33,0,34,0,0,0,114,0,0,37,0],[0,0,0,0,152,153,153,57,58,0,59,0,0,0,154,0,0,62,0]],\"accepting\":[false,true,true,true,true,true,false,false,true,true,true,true,true,true,true,true,true,true,true,true,false,true,true,true,true,true,true,true,true,true,false,true,true,true,true,true,true,true,true,true,true,true,false,true,false,true,true,false,false,true,true,true,true,true,true,false,false,true,true,true,true,true,true,true,true,true,true,false,true,true,false,true,true,true,false,true,true,true,false,true,false,true,true,false,false,true,true,true,true,true,true,true,false,true,true,false,true,true,true,false,true,false,true,true,false,false,true,true,true,true,true,true,true,false,true,true,true,false,true,true,true,false,true,false,true,true,false,false,false,true,true,false,false,true,true,true,true,true,true,false,true,false,true,true,false,false,true,true,true,true,true,true,true,false,true,true,false,true,true,true,true,true,true,true,true,true,true,true,true,true,true,false,true,true,true,false,true,false,true,true,false,false,false,true,true,false,false,true,true,true,false,true,true,true,true,true,true,false,true,true,true,false,true,false,true,true,false,false,false,true,true,false,false,true,true,true,false,true,true,true,true,true,false,true,true,true,true,true,false,true,true,false,false,false,false,true,true,false,false,true,true,true,false,true,true,true,false,true,false,true,true,false,false,false,true,true,false,false,true,true,true,false,true,true,true,true,false,true,false,true,true,true,true,true,true,true,true,true,false,true,true,true,true,true,false,true,true,false,false,false,false,true,true,false,false,true,true,true,false,true,true,true,true,true,false,true,true,false,false,false,false,true,true,false,false,true,true,true,true,false,true,true,true,true,true,true,false,true,true,false,false,false,false,true,false,true,false,true,true,true,true,true,false,true,true,false,false,false,false,true,true,false,false,true,true,true,false,true,true,false,false,true,false,true,true,false,true,true,false,true,true,false,true,true,true,true,true,true,false,true,true,false,false,false,false,true,false,true,true,false,true,true,true,true,true,true,false,true,true,false,false,false,false,true,false,true,false,true,true,true,true,false,false,false,true,true,false,true,true,true,true,true,true,false,true,true,false,false,false,false,true,false,true,false,true,true,false,false,true,true,false,false,true,true,true,false,true,false,true,true,true,true,false,false,false,true,false,true,true,true,true,false,false,false,true,true,false,true,true,true,true,true,true,false,true,true,false,true,false,true,true,true,true,false,false,false,false,false,false,false,true,true,false,false,true,true,false,true,true,true,true,false,true,true,true,true,true,true,false,true,true,false,true,true,false,true,true,true,true,true,true,false,true,true,false,true,false,true,true,true,true,true,true,false,true,true,true,true,true,true,false,true,true,false,false,false,false,false,true,true,false,true,false,true,true,true,true,true,false,true,true,true,true,true,false,true,true,true,true,true,false,true,true,true,false,true,true,true,true,false,false,false,true,false,true,true,true,true,true,false,true,true,true,false,true,true,true,true,true,false,true,true,true,true,false,true,true,true,true,true,false,true,true,false,true,true,true],\"tags\":[[],[\"broken_cluster\"],[\"consonant_syllable\"],[\"vowel_syllable\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"standalone_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"consonant_syllable\"],[\"broken_cluster\"],[\"symbol_cluster\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"symbol_cluster\"],[],[\"symbol_cluster\"],[\"symbol_cluster\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[],[],[],[\"broken_cluster\"],[\"broken_cluster\"],[],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"symbol_cluster\"],[\"symbol_cluster\"],[\"symbol_cluster\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[],[],[],[],[\"broken_cluster\"],[\"broken_cluster\"],[],[],[\"broken_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"broken_cluster\"],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[\"broken_cluster\"],[\"symbol_cluster\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[],[],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[],[],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[],[],[],[],[\"broken_cluster\"],[],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[],[],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[],[],[\"consonant_syllable\",\"broken_cluster\"],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[],[],[],[\"consonant_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[],[],[],[\"vowel_syllable\"],[],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[],[],[],[\"standalone_cluster\"],[],[\"consonant_syllable\",\"broken_cluster\"],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[],[],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[],[],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[],[],[],[],[],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[],[],[],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[],[],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"broken_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"consonant_syllable\"],[\"vowel_syllable\"],[\"standalone_cluster\"]]}");
var $f3bd27a8c88f3f53$exports = {};
$f3bd27a8c88f3f53$exports = JSON.parse("{\"categories\":[\"O\",\"IND\",\"S\",\"GB\",\"B\",\"FM\",\"CGJ\",\"VMAbv\",\"VMPst\",\"VAbv\",\"VPst\",\"CMBlw\",\"VPre\",\"VBlw\",\"H\",\"VMBlw\",\"CMAbv\",\"MBlw\",\"CS\",\"R\",\"SUB\",\"MPst\",\"MPre\",\"FAbv\",\"FPst\",\"FBlw\",\"SMAbv\",\"SMBlw\",\"VMPre\",\"ZWNJ\",\"ZWJ\",\"WJ\",\"VS\",\"N\",\"HN\",\"MAbv\"],\"decompositions\":{\"2507\":[2503,2494],\"2508\":[2503,2519],\"2888\":[2887,2902],\"2891\":[2887,2878],\"2892\":[2887,2903],\"3018\":[3014,3006],\"3019\":[3015,3006],\"3020\":[3014,3031],\"3144\":[3142,3158],\"3264\":[3263,3285],\"3271\":[3270,3285],\"3272\":[3270,3286],\"3274\":[3270,3266],\"3275\":[3270,3266,3285],\"3402\":[3398,3390],\"3403\":[3399,3390],\"3404\":[3398,3415],\"3546\":[3545,3530],\"3548\":[3545,3535],\"3549\":[3545,3535,3530],\"3550\":[3545,3551],\"3635\":[3661,3634],\"3763\":[3789,3762],\"3955\":[3953,3954],\"3957\":[3953,3956],\"3958\":[4018,3968],\"3959\":[4018,3953,3968],\"3960\":[4019,3968],\"3961\":[4019,3953,3968],\"3969\":[3953,3968],\"6971\":[6970,6965],\"6973\":[6972,6965],\"6976\":[6974,6965],\"6977\":[6975,6965],\"6979\":[6978,6965],\"69934\":[69937,69927],\"69935\":[69938,69927],\"70475\":[70471,70462],\"70476\":[70471,70487],\"70843\":[70841,70842],\"70844\":[70841,70832],\"70846\":[70841,70845],\"71098\":[71096,71087],\"71099\":[71097,71087]},\"stateTable\":[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[2,2,3,4,4,5,0,6,7,8,9,10,11,12,13,14,15,16,0,17,18,11,19,20,21,22,0,0,23,0,0,2,0,24,0,25],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,28,0,0,0,0,27,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,34,35,36,37,38,39,40,0,0,41,35,42,43,44,45,0,0,46,0,0,0,39,0,0,47],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,0,0,0,0,0,0,14,0,0,0,0,0,0,0,20,21,22,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,21,22,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,8,9,0,0,12,0,14,0,0,0,0,0,0,0,20,21,22,0,0,23,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,0,9,0,0,0,0,14,0,0,0,0,0,0,0,20,21,22,0,0,23,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,8,9,10,11,12,13,14,0,16,0,0,18,11,19,20,21,22,0,0,23,0,0,0,0,0,0,25],[0,0,0,0,0,5,0,6,7,8,9,0,11,12,0,14,0,0,0,0,0,0,0,20,21,22,0,0,23,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,0,9,0,0,12,0,14,0,0,0,0,0,0,0,20,21,22,0,0,23,0,0,0,0,0,0,0],[0,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,0,7,0,0,0,0,0,0,14,0,0,0,0,0,0,0,20,21,22,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,8,9,10,11,12,13,14,15,16,0,0,18,11,19,20,21,22,0,0,23,0,0,0,0,0,0,25],[0,0,0,0,0,5,0,6,7,8,9,0,11,12,0,14,0,0,0,0,0,11,0,20,21,22,0,0,23,0,0,0,0,0,0,0],[0,0,0,4,4,5,0,6,7,8,9,10,11,12,13,14,15,16,0,0,18,11,19,20,21,22,0,0,23,0,0,0,0,0,0,25],[0,0,0,0,0,5,0,6,7,8,9,48,11,12,13,14,48,16,0,0,18,11,19,20,21,22,0,0,23,0,0,0,49,0,0,25],[0,0,0,0,0,5,0,6,7,8,9,0,11,12,0,14,0,16,0,0,0,11,0,20,21,22,0,0,23,0,0,0,0,0,0,25],[0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,21,22,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,22,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,0,0,0,0,0,0,14,0,0,0,0,0,0,0,20,21,22,0,0,23,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,0,51,0],[0,0,0,0,0,5,0,6,7,8,9,0,11,12,0,14,0,16,0,0,0,11,0,20,21,22,0,0,23,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,28,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,0,0,0,0,0,0,38,0,0,0,0,0,0,0,43,44,45,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,44,45,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,0,0,36,0,38,0,0,0,0,0,0,0,43,44,45,0,0,46,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,0,33,0,0,0,0,38,0,0,0,0,0,0,0,43,44,45,0,0,46,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,34,35,36,37,38,0,40,0,0,41,35,42,43,44,45,0,0,46,0,0,0,0,0,0,47],[0,0,0,0,0,29,0,30,31,32,33,0,35,36,0,38,0,0,0,0,0,0,0,43,44,45,0,0,46,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,0,33,0,0,36,0,38,0,0,0,0,0,0,0,43,44,45,0,0,46,0,0,0,0,0,0,0],[0,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,0,31,0,0,0,0,0,0,38,0,0,0,0,0,0,0,43,44,45,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,34,35,36,37,38,39,40,0,0,41,35,42,43,44,45,0,0,46,0,0,0,0,0,0,47],[0,0,0,0,0,29,0,30,31,32,33,0,35,36,0,38,0,0,0,0,0,35,0,43,44,45,0,0,46,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,52,35,36,37,38,52,40,0,0,41,35,42,43,44,45,0,0,46,0,0,0,53,0,0,47],[0,0,0,0,0,29,0,30,31,32,33,0,35,36,0,38,0,40,0,0,0,35,0,43,44,45,0,0,46,0,0,0,0,0,0,47],[0,0,0,0,0,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,44,45,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,45,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,0,0,0,0,0,0,38,0,0,0,0,0,0,0,43,44,45,0,0,46,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,0,35,36,0,38,0,40,0,0,0,35,0,43,44,45,0,0,46,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,8,9,48,11,12,13,14,0,16,0,0,18,11,19,20,21,22,0,0,23,0,0,0,0,0,0,25],[0,0,0,0,0,5,0,6,7,8,9,48,11,12,13,14,48,16,0,0,18,11,19,20,21,22,0,0,23,0,0,0,0,0,0,25],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,0,0],[0,0,0,0,0,29,0,30,31,32,33,52,35,36,37,38,0,40,0,0,41,35,42,43,44,45,0,0,46,0,0,0,0,0,0,47],[0,0,0,0,0,29,0,30,31,32,33,52,35,36,37,38,52,40,0,0,41,35,42,43,44,45,0,0,46,0,0,0,0,0,0,47],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,0,51,0]],\"accepting\":[false,true,true,true,true,true,true,true,true,true,true,true,true,false,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],\"tags\":[[],[\"broken_cluster\"],[\"independent_cluster\"],[\"symbol_cluster\"],[\"standard_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"numeral_cluster\"],[\"broken_cluster\"],[\"independent_cluster\"],[\"symbol_cluster\"],[\"symbol_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"virama_terminated_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"numeral_cluster\"],[\"number_joiner_terminated_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"numeral_cluster\"]]}");
const $b9778c6b60232cf0$export$a513ea61a7bee91c = {
    X: 1,
    C: 2,
    V: 4,
    N: 8,
    H: 16,
    ZWNJ: 32,
    ZWJ: 64,
    M: 128,
    SM: 256,
    VD: 512,
    A: 1024,
    Placeholder: 2048,
    Dotted_Circle: 4096,
    RS: 8192,
    Coeng: 16384,
    Repha: 32768,
    Ra: 65536,
    CM: 131072,
    Symbol: 262144
};
const $b9778c6b60232cf0$export$1a1f61c9c4dd9df0 = {
    Start: 1,
    Ra_To_Become_Reph: 2,
    Pre_M: 4,
    Pre_C: 8,
    Base_C: 16,
    After_Main: 32,
    Above_C: 64,
    Before_Sub: 128,
    Below_C: 256,
    After_Sub: 512,
    Before_Post: 1024,
    Post_C: 2048,
    After_Post: 4096,
    Final_C: 8192,
    SMVD: 16384,
    End: 32768
};
const $b9778c6b60232cf0$export$8519deaa7de2b07 = $b9778c6b60232cf0$export$a513ea61a7bee91c.C | $b9778c6b60232cf0$export$a513ea61a7bee91c.Ra | $b9778c6b60232cf0$export$a513ea61a7bee91c.CM | $b9778c6b60232cf0$export$a513ea61a7bee91c.V | $b9778c6b60232cf0$export$a513ea61a7bee91c.Placeholder | $b9778c6b60232cf0$export$a513ea61a7bee91c.Dotted_Circle;
const $b9778c6b60232cf0$export$bbcd928767338e0d = $b9778c6b60232cf0$export$a513ea61a7bee91c.ZWJ | $b9778c6b60232cf0$export$a513ea61a7bee91c.ZWNJ;
const $b9778c6b60232cf0$export$ca9599b2a300afc = $b9778c6b60232cf0$export$a513ea61a7bee91c.H | $b9778c6b60232cf0$export$a513ea61a7bee91c.Coeng;
const $b9778c6b60232cf0$export$e99d119da76a0fc5 = {
    Default: {
        hasOldSpec: false,
        virama: 0,
        basePos: 'Last',
        rephPos: $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Before_Post,
        rephMode: 'Implicit',
        blwfMode: 'Pre_And_Post'
    },
    Devanagari: {
        hasOldSpec: true,
        virama: 0x094D,
        basePos: 'Last',
        rephPos: $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Before_Post,
        rephMode: 'Implicit',
        blwfMode: 'Pre_And_Post'
    },
    Bengali: {
        hasOldSpec: true,
        virama: 0x09CD,
        basePos: 'Last',
        rephPos: $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.After_Sub,
        rephMode: 'Implicit',
        blwfMode: 'Pre_And_Post'
    },
    Gurmukhi: {
        hasOldSpec: true,
        virama: 0x0A4D,
        basePos: 'Last',
        rephPos: $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Before_Sub,
        rephMode: 'Implicit',
        blwfMode: 'Pre_And_Post'
    },
    Gujarati: {
        hasOldSpec: true,
        virama: 0x0ACD,
        basePos: 'Last',
        rephPos: $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Before_Post,
        rephMode: 'Implicit',
        blwfMode: 'Pre_And_Post'
    },
    Oriya: {
        hasOldSpec: true,
        virama: 0x0B4D,
        basePos: 'Last',
        rephPos: $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.After_Main,
        rephMode: 'Implicit',
        blwfMode: 'Pre_And_Post'
    },
    Tamil: {
        hasOldSpec: true,
        virama: 0x0BCD,
        basePos: 'Last',
        rephPos: $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.After_Post,
        rephMode: 'Implicit',
        blwfMode: 'Pre_And_Post'
    },
    Telugu: {
        hasOldSpec: true,
        virama: 0x0C4D,
        basePos: 'Last',
        rephPos: $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.After_Post,
        rephMode: 'Explicit',
        blwfMode: 'Post_Only'
    },
    Kannada: {
        hasOldSpec: true,
        virama: 0x0CCD,
        basePos: 'Last',
        rephPos: $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.After_Post,
        rephMode: 'Implicit',
        blwfMode: 'Post_Only'
    },
    Malayalam: {
        hasOldSpec: true,
        virama: 0x0D4D,
        basePos: 'Last',
        rephPos: $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.After_Main,
        rephMode: 'Log_Repha',
        blwfMode: 'Pre_And_Post'
    },
    Khmer: {
        hasOldSpec: false,
        virama: 0x17D2,
        basePos: 'First',
        rephPos: $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Ra_To_Become_Reph,
        rephMode: 'Vis_Repha',
        blwfMode: 'Pre_And_Post'
    }
};
const $b9778c6b60232cf0$export$f647c9cfdd77d95a = {
    0x17BE: [
        0x17C1,
        0x17BE
    ],
    0x17BF: [
        0x17C1,
        0x17BF
    ],
    0x17C0: [
        0x17C1,
        0x17C0
    ],
    0x17C4: [
        0x17C1,
        0x17C4
    ],
    0x17C5: [
        0x17C1,
        0x17C5
    ]
};
var $c6b883ac45fa55f1$require$Buffer = buffer.Buffer;
const { decompositions: $c6b883ac45fa55f1$var$decompositions  } = ($parcel$interopDefault($f3bd27a8c88f3f53$exports));
const $c6b883ac45fa55f1$var$trie = new $hJqJp$unicodetrie($c6b883ac45fa55f1$require$Buffer.from("AAARAAAAAACgwgAAAbENTvLtnX+sHUUVx/f13nd/vHf7bl+FRGL7R0OJMcWYphBrimkVCSJR2xiEaLEGQ7AkBGowbYRSgj8K2B/GkpRYE6wlQSyJKCagrSlGkmqsqUZMY7S2CWkgqQViQSkt4Hfuzrx77tyZ2fm1u+/RPcknuzs7O3PmnDOzs7N73zteS5KXwKvgDTCnniTvBfPBJeAVpP2vFr69GGUtAkvAModyr0DeT4BrwCpwPVgDbga3ga+DjYbyluLcCvBN8F2wGWwHO8Ej4DjyPIbtz0DCeZpvD4CD4E/gb+AoOAFOgtPgLKiNJkkbTIKLwALwfvAh8GGwHFwFPg2uAzeCm8Ft4E5wN7gPPAi+D34AfgR+Ap7kx8+AZ8HvwZ/BEXAMvAheAa+Bc6OpzvVGknTABY30eB62C8GlYDFYCpaDq/n5z2J7PVgDbgG3N1KbrOdbWzby/N/G9i6wlR8/wLebUNcOll7vX7PLsQ4bdpAy92B/L3gK7AO/A38EfwX/AC+AkyT/m3x7mqdtYz7Gfq2ZJOPgPc3UXu/D9uJmmmcRT1uC7TJwZTONJxFL1+J4JbgBrAG3gNv5Nev5dhO2m3l54rqtON7RNLd1V8Z5auMfI+8Wbvv12P4Ux78AvyZl/Bb7fwD34HwH/EVR/t8t6rRlrYgFlHnMsdyXIupRFP+Gzv8Bb4CklSSjrTR9bz21uZx/Nj8v+uIFOJ4HFnJo3kWtNG6WkPSzBl1YbC8jeVfx+q+R9Pg48lxN8jFdhd8+01LrLTCdq6io8GNb1a8qKioqKioqKioc2cbXGcrWQ2Ynf9a9rmV/zVua9Dc16V/gz8pfxvar4A6wAdwL7gdbwUPgh+BR8AR4qpWuLe3D9gA4CA6DI+AoOAFOtdL1nNexfYs937fxDA8ubKf1zmv3dViI/Uvb9m2sqKioqAiHrVtehrH3TK2/3l4WZduioqIiDq+Rd1Jbef9ehnHmSnCtNNf7nOPcr8PHilO8jrfBF9v996lfwf6tUpl3tPvvdSjsvcwGnLt3Gsw/kzkpK8CdYH83my3Id0iT91WkL5xMktXgIfD85OD54zjfmYu5OFgN7h1LkmdBMg5fgbvAChzv49ujfEuZ3xlOk7kReTaSfL/B/jl+fMXsJLkb7AcPj8TlHC/zsgnYcyLd3zSh1vGAJr2ioqKiIn/eKXkMjn3/cWF5t/z6y37+K5urwP2YB36vPfw8yr7zeRjpu8g8cTf2H2+n89EtivLE93fs27Ez/Br2vM2+qWPl/ZyX9StFfQxW5v724PPxzXz7XHu4Pps5Jvtmiq13szmzfP0hlHkYHGn358bHeD0vYvsy+K+kz9vt/jy8gT40G1w4Rua0PN98nnaGf/e1G+mXIO2DY8P6Xz7WPz7Ky/7omJ0PBff4+B91fAqsAp8HXwI3gR04txbbdWDDWDpP/g7Yxs6BXWAP2AueJHo+M5bOpw+Cw+AIOApOgFMW7Xkdec6AkXH1+QfgyzbOTY73jy/C/gJ+/CCOP4D9xfz4I9h+TFMWtf9SRWzZwq7f0yi/L9voWSRbDfV/clx/3TuKfjoT26/iX813URx4tiVG3ay/sfFuJenb7J50A4mr1di/CZzLKZ6y2reunup4qzT+fM0wHp0PUD9+A7bYNJ5fn3eNP/Ft5bc0+S4n9/l1Gj+K82zesd1wfj3fZ79h2YyyVvLj7djfCR4xjJEyuy1+S/FyDt/MPwodn5hB8axrxy9nSBtYjOyHrs+BQ+B58E+u+wsWbWBtpb/hYL8RuA/pJ8fT2GffX+wl+daSa08jz9nxNG2k4963XBG/ZVhpUS573mh3BtPo7x/Eb7pE2yd5XvZssY/M/RZLc9SLeDsfD5gfTidi9//pwrzWu7t9lKcN7dxynthAh8vcKrQu1frHTGKBNF662KfoOXU1FsaFxe6x2kjClkBnGvXxwX0bytZ5unK+S9n2jxabTc5M0HUaIyTrfFa+Ljmflc9Xz7JtNdPa4eKz6WAPlb5l6xfLBzopWxcfncvSf7rHRJk2KSN2bKRsvcu2UZmxVIb9qd551e8rZcTERGuQ+qwIjERkjl2+djOlhWfpibnp/qxmP92FVr1/bc9GYxxuI5o3UzdukzYpj+H6nOxra9nHiaksjhDdsasPe9ca/CvOU1GVwUT4t8P921H4T8gsnkdIh+dn/pXrU0mnOZw21CbJv1P5LP0r4jtkbLH171BbCvavnFfeZ8L8K2wv/CuQRU6n/qWSNSbr2mO8xtK/U+Mq6Y/1yQyFJHHtv8Kn2uOC/Gvbf2VEPxJ9SvhY5d+Q+y21iRxLruOzsY6MWGrOkPHZ1b+jFuPzqEX/VcmoZkyIPT53k36/DZnrMd+K/Dbjs6kv6+6VYl9OU+WT07TplvMvWWhfVo3f4t48S+rbjIZl/1b5Xyd5vJdQiTyf7tUdMlbn0J9d/cn6c7M5DO1TNF0+bmT0Z3qdKaaoXeg1Lv7NEhufzyT/6vIKEeO1jX/psdi38a889qpkStcI/u12U3zE1Re+/Yv6QNwvdTDJGi9t2ps1XtKYDJ0PmcZKcU812sRxvms7J47mZ5c+SWJD5LPRg4qqj+nWL8Q5sRVrGar1EG0sOI6ndH3DVWL7wpeuwaY6O1Nh19N+Oqs5uI7Eto3aICxNrCn5rAuZ7Cn2bdJtfZPlL/k8Ld+ki6v9E56XPUvT52mV/YVvmMj2Zz8TEuNMTxfHuFfFUJ60OLrz1utODnFG47fLbSjXy0xSy4gN63EywlhMxWcNmK71svszi5OGTvdJe3rtd8ifB6I/mKBr1ap7uU/sqqTsMb+H5fxBFyuq+yqLnd7cmj33TwyOVVOwuj3nVXRtQtUGWR9jzI6kecZrKSKPuFakU2hZmXXZMDlsS1W9jBavv6eHpf3EtfJ7mKwYV0lX2g9FVY5N+Ung9aH1590+n3KLgEredfiez6u9svisY/Suk9Jsnkli1a+C1m/T7rzqd5UY9mfiXX9R92ibdZUIawTC96b1GBn6rDG1JsPv/b392SkiXVUGmyN0LO5LYi46Zf/Adc/QMaCo8TtG/bH1Z/TsW1QfUPRjm2cZee5PRaT33lEbnhlMax4qe1o/Y8a0icdaoOv9bsh+Hj6jonueoGtHumcMlX9lxLxXq7/D84fSzznGt6rtUerXxYU47/IcPeG3vqBbJ1StETZqg9fS2Akd/0Ovp+/CxD3P+/6bQwzJtsvyh5w+XjeXH9KfXGH3/VbSX4tS4XoftPZbnvcyxX1G5QvW1wbWTkbs7c3mTco6NWODbdxk3R9lGZo/aGxhiknTmETXLVs1c90u9+mBGCf6hs6fsmTq29sxPv8d82CuhCpNjGNjg31blGHrz1i41hd6nuYzbU3XhLQzj7Jt67Otw0uXUdDoH8e4F/joMdVui2dMJc3E+Tetvr6jEtPnPhJaVwz9Y7TDVlx1qnfitlEbtzlTVD0qX/pcm1esxI65PO3mU4eNrr5SZMz46FDE+aIlb5tntb1o/WOUETsW847pvNpaZH225eUpNnrS9yDy9wTysyr9XVOe63+qd3M6e4X6Ptd1Dpc1SdV53ZqFag1hpP+bE5f4ivY74BzXilzWWW1+S0TjJng91Gd9wmbNgpMVz6W8d7GJZwWtWp8p++c8fpjW0Vzff3dJfzGuoersEtnmpjVLupY48H6o7n8/C+kvJn+Lcd6q3QHx3usvZax3W8apvP6rev+UJSHfiCYe/h2aTwTaRi5DO28ZSd9zNhTfJ8b2je7drOo9HtNNbPMW03zOpq2qNqnKFN+0huhlMye2Pe9TdzfCedfxMlRfG7xjncaJ7fiXMYZk3X+ZvuKbXCGh8y8XH8TybajPTfq4tjG2/qb0RJO3SB19ba2SMuoNbW8R/g653qa9sdsRYsssu+ZxPss+tnayFd94yjofEi+hZdvo73q9jd3yisUYbfEpQ9XmMqUIm2fFZh4xkZeE1BNDL5v+ZcqXh/90bSwjflz8U0QcFWHzPOpy0amM+stqf1ad7LltVPqWmG3p3+GiIvLJf8duYA3NcBwbWRpkDXmo7RP+z5E6+8Xswz512dbrW2aMNrpKaBt9y45VR2j9efhAQL/PF38Xadq907NYC5dpZLy3kMX6PUHgeGGS3nfoPn9rObJ9s/4uMntnSt/J5TX+2ZRhtFcB8ZgVmyZbit8GCd/7/C7EOcYK7LdyjNhIlL81nqN/Xf9mOHt/anovP4X0tyem/OUZF9TmscY2nzEulq96ZeVwv2Bxxnwk3s9njT8m/YWOKl199fe53tTXyu5DLojfKWXej6R3RAPtDf1ex/PvtdJ8Q7aP7Ht6XpdXSJf8/wMdQuS/j0/HtKny9KbT+oT2K2ETuW7Tt09Uss5nCdWhjPuMTXzrztO4FHMy+V6TJaH9I6+2C5HPq9oc8xlKRva5rF8M/7tC26/6BsNFivQ//e1pVsyP19VrNrH1D5Wi7oUDdVp8Q5HVr1ztlzXPtH2Gc30+lMX3edH3ecm3fp0+Ps/IPvWH6OpiV7meEMlbzyIkpi1jtDU0Pmm6nMd0jU8bXK7N0jWkb/joHyNebfWgtrJpc0h7QiQP24aKqcwYPnTRIUmG63fRQ5VXLsekgy5NtVXVadLfpjzV9S6xYnuNri159ZmsmLCpJ8/6XSRGOaH659H+GLYtwhd51xvq31B9Qm0UavM84qhoKaNOnfwf", "base64"));
const $c6b883ac45fa55f1$var$stateMachine = new $5OpyM$dfa(($parcel$interopDefault($a550b6039b7700b3$exports)));
class $c6b883ac45fa55f1$export$2e2bcd8739ae039 extends $5340de7a86f3ae85$export$2e2bcd8739ae039 {
    static zeroMarkWidths = 'NONE';
    static planFeatures(plan) {
        plan.addStage($c6b883ac45fa55f1$var$setupSyllables);
        plan.addStage([
            'locl',
            'ccmp'
        ]);
        plan.addStage($c6b883ac45fa55f1$var$initialReordering);
        plan.addStage('nukt');
        plan.addStage('akhn');
        plan.addStage('rphf', false);
        plan.addStage('rkrf');
        plan.addStage('pref', false);
        plan.addStage('blwf', false);
        plan.addStage('abvf', false);
        plan.addStage('half', false);
        plan.addStage('pstf', false);
        plan.addStage('vatu');
        plan.addStage('cjct');
        plan.addStage('cfar', false);
        plan.addStage($c6b883ac45fa55f1$var$finalReordering);
        plan.addStage({
            local: [
                'init'
            ],
            global: [
                'pres',
                'abvs',
                'blws',
                'psts',
                'haln',
                'dist',
                'abvm',
                'blwm',
                'calt',
                'clig'
            ]
        });
        plan.unicodeScript = $a5878e4f4663c9e2$export$ce50e82f12a827a4(plan.script);
        plan.indicConfig = $b9778c6b60232cf0$export$e99d119da76a0fc5[plan.unicodeScript] || $b9778c6b60232cf0$export$e99d119da76a0fc5.Default;
        plan.isOldSpec = plan.indicConfig.hasOldSpec && plan.script[plan.script.length - 1] !== '2';
    }
    static assignFeatures(plan, glyphs) {
        for(let i = glyphs.length - 1; i >= 0; i--){
            let codepoint = glyphs[i].codePoints[0];
            let d = $b9778c6b60232cf0$export$f647c9cfdd77d95a[codepoint] || $c6b883ac45fa55f1$var$decompositions[codepoint];
            if (d) {
                let decomposed = d.map((c)=>{
                    let g = plan.font.glyphForCodePoint(c);
                    return new $8cba766f534deddd$export$2e2bcd8739ae039(plan.font, g.id, [
                        c
                    ], glyphs[i].features);
                });
                glyphs.splice(i, 1, ...decomposed);
            }
        }
    }
}
function $c6b883ac45fa55f1$var$indicCategory(glyph) {
    return $c6b883ac45fa55f1$var$trie.get(glyph.codePoints[0]) >> 8;
}
function $c6b883ac45fa55f1$var$indicPosition(glyph) {
    return 1 << ($c6b883ac45fa55f1$var$trie.get(glyph.codePoints[0]) & 0xff);
}
class $c6b883ac45fa55f1$var$IndicInfo {
    constructor(category, position, syllableType, syllable){
        this.category = category;
        this.position = position;
        this.syllableType = syllableType;
        this.syllable = syllable;
    }
}
function $c6b883ac45fa55f1$var$setupSyllables(font, glyphs) {
    let syllable = 0;
    let last = 0;
    for (let [start, end, tags] of $c6b883ac45fa55f1$var$stateMachine.match(glyphs.map($c6b883ac45fa55f1$var$indicCategory))){
        if (start > last) {
            ++syllable;
            for(let i = last; i < start; i++)glyphs[i].shaperInfo = new $c6b883ac45fa55f1$var$IndicInfo($b9778c6b60232cf0$export$a513ea61a7bee91c.X, $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.End, 'non_indic_cluster', syllable);
        }
        ++syllable;
        for(let i = start; i <= end; i++)glyphs[i].shaperInfo = new $c6b883ac45fa55f1$var$IndicInfo(1 << $c6b883ac45fa55f1$var$indicCategory(glyphs[i]), $c6b883ac45fa55f1$var$indicPosition(glyphs[i]), tags[0], syllable);
        last = end + 1;
    }
    if (last < glyphs.length) {
        ++syllable;
        for(let i = last; i < glyphs.length; i++)glyphs[i].shaperInfo = new $c6b883ac45fa55f1$var$IndicInfo($b9778c6b60232cf0$export$a513ea61a7bee91c.X, $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.End, 'non_indic_cluster', syllable);
    }
}
function $c6b883ac45fa55f1$var$isConsonant(glyph) {
    return glyph.shaperInfo.category & $b9778c6b60232cf0$export$8519deaa7de2b07;
}
function $c6b883ac45fa55f1$var$isJoiner(glyph) {
    return glyph.shaperInfo.category & $b9778c6b60232cf0$export$bbcd928767338e0d;
}
function $c6b883ac45fa55f1$var$isHalantOrCoeng(glyph) {
    return glyph.shaperInfo.category & $b9778c6b60232cf0$export$ca9599b2a300afc;
}
function $c6b883ac45fa55f1$var$wouldSubstitute(glyphs, feature) {
    for (let glyph of glyphs)glyph.features = {
        [feature]: true
    };
    let GSUB = glyphs[0]._font._layoutEngine.engine.GSUBProcessor;
    GSUB.applyFeatures([
        feature
    ], glyphs);
    return glyphs.length === 1;
}
function $c6b883ac45fa55f1$var$consonantPosition(font, consonant, virama) {
    let glyphs = [
        virama,
        consonant,
        virama
    ];
    if ($c6b883ac45fa55f1$var$wouldSubstitute(glyphs.slice(0, 2), 'blwf') || $c6b883ac45fa55f1$var$wouldSubstitute(glyphs.slice(1, 3), 'blwf')) return $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Below_C;
    else if ($c6b883ac45fa55f1$var$wouldSubstitute(glyphs.slice(0, 2), 'pstf') || $c6b883ac45fa55f1$var$wouldSubstitute(glyphs.slice(1, 3), 'pstf')) return $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Post_C;
    else if ($c6b883ac45fa55f1$var$wouldSubstitute(glyphs.slice(0, 2), 'pref') || $c6b883ac45fa55f1$var$wouldSubstitute(glyphs.slice(1, 3), 'pref')) return $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Post_C;
    return $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Base_C;
}
function $c6b883ac45fa55f1$var$initialReordering(font, glyphs, plan) {
    let indicConfig = plan.indicConfig;
    let features = font._layoutEngine.engine.GSUBProcessor.features;
    let dottedCircle = font.glyphForCodePoint(0x25cc).id;
    let virama = font.glyphForCodePoint(indicConfig.virama).id;
    if (virama) {
        let info = new $8cba766f534deddd$export$2e2bcd8739ae039(font, virama, [
            indicConfig.virama
        ]);
        for(let i = 0; i < glyphs.length; i++)if (glyphs[i].shaperInfo.position === $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Base_C) glyphs[i].shaperInfo.position = $c6b883ac45fa55f1$var$consonantPosition(font, glyphs[i].copy(), info);
    }
    for(let start = 0, end = $c6b883ac45fa55f1$var$nextSyllable(glyphs, 0); start < glyphs.length; start = end, end = $c6b883ac45fa55f1$var$nextSyllable(glyphs, start)){
        let { category: category , syllableType: syllableType  } = glyphs[start].shaperInfo;
        if (syllableType === 'symbol_cluster' || syllableType === 'non_indic_cluster') continue;
        if (syllableType === 'broken_cluster' && dottedCircle) {
            let g = new $8cba766f534deddd$export$2e2bcd8739ae039(font, dottedCircle, [
                0x25cc
            ]);
            g.shaperInfo = new $c6b883ac45fa55f1$var$IndicInfo(1 << $c6b883ac45fa55f1$var$indicCategory(g), $c6b883ac45fa55f1$var$indicPosition(g), glyphs[start].shaperInfo.syllableType, glyphs[start].shaperInfo.syllable);
            let i = start;
            while(i < end && glyphs[i].shaperInfo.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.Repha)i++;
            glyphs.splice(i++, 0, g);
            end++;
        }
        let base = end;
        let limit = start;
        let hasReph = false;
        if (indicConfig.rephPos !== $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Ra_To_Become_Reph && features.rphf && start + 3 <= end && (indicConfig.rephMode === 'Implicit' && !$c6b883ac45fa55f1$var$isJoiner(glyphs[start + 2]) || indicConfig.rephMode === 'Explicit' && glyphs[start + 2].shaperInfo.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.ZWJ)) {
            let g = [
                glyphs[start].copy(),
                glyphs[start + 1].copy(),
                glyphs[start + 2].copy()
            ];
            if ($c6b883ac45fa55f1$var$wouldSubstitute(g.slice(0, 2), 'rphf') || indicConfig.rephMode === 'Explicit' && $c6b883ac45fa55f1$var$wouldSubstitute(g, 'rphf')) {
                limit += 2;
                while(limit < end && $c6b883ac45fa55f1$var$isJoiner(glyphs[limit]))limit++;
                base = start;
                hasReph = true;
            }
        } else if (indicConfig.rephMode === 'Log_Repha' && glyphs[start].shaperInfo.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.Repha) {
            limit++;
            while(limit < end && $c6b883ac45fa55f1$var$isJoiner(glyphs[limit]))limit++;
            base = start;
            hasReph = true;
        }
        switch(indicConfig.basePos){
            case 'Last':
                {
                    let i = end;
                    let seenBelow = false;
                    do {
                        let info = glyphs[--i].shaperInfo;
                        if ($c6b883ac45fa55f1$var$isConsonant(glyphs[i])) {
                            if (info.position !== $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Below_C && (info.position !== $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Post_C || seenBelow)) {
                                base = i;
                                break;
                            }
                            if (info.position === $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Below_C) seenBelow = true;
                            base = i;
                        } else if (start < i && info.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.ZWJ && glyphs[i - 1].shaperInfo.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.H) break;
                    }while (i > limit)
                    break;
                }
            case 'First':
                base = start;
                for(let i = base + 1; i < end; i++)if ($c6b883ac45fa55f1$var$isConsonant(glyphs[i])) glyphs[i].shaperInfo.position = $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Below_C;
        }
        if (hasReph && base === start && limit - base <= 2) hasReph = false;
        for(let i1 = start; i1 < base; i1++){
            let info = glyphs[i1].shaperInfo;
            info.position = Math.min($b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Pre_C, info.position);
        }
        if (base < end) glyphs[base].shaperInfo.position = $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Base_C;
        for(let i2 = base + 1; i2 < end; i2++)if (glyphs[i2].shaperInfo.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.M) {
            for(let j = i2 + 1; j < end; j++)if ($c6b883ac45fa55f1$var$isConsonant(glyphs[j])) {
                glyphs[j].shaperInfo.position = $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Final_C;
                break;
            }
            break;
        }
        if (hasReph) glyphs[start].shaperInfo.position = $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Ra_To_Become_Reph;
        if (plan.isOldSpec) {
            let disallowDoubleHalants = plan.unicodeScript !== 'Malayalam';
            for(let i = base + 1; i < end; i++)if (glyphs[i].shaperInfo.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.H) {
                let j;
                for(j = end - 1; j > i; j--){
                    if ($c6b883ac45fa55f1$var$isConsonant(glyphs[j]) || disallowDoubleHalants && glyphs[j].shaperInfo.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.H) break;
                }
                if (glyphs[j].shaperInfo.category !== $b9778c6b60232cf0$export$a513ea61a7bee91c.H && j > i) {
                    let t = glyphs[i];
                    glyphs.splice(i, 0, ...glyphs.splice(i + 1, j - i));
                    glyphs[j] = t;
                }
                break;
            }
        }
        let lastPos = $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Start;
        for(let i3 = start; i3 < end; i3++){
            let info = glyphs[i3].shaperInfo;
            if (info.category & ($b9778c6b60232cf0$export$bbcd928767338e0d | $b9778c6b60232cf0$export$a513ea61a7bee91c.N | $b9778c6b60232cf0$export$a513ea61a7bee91c.RS | $b9778c6b60232cf0$export$a513ea61a7bee91c.CM | $b9778c6b60232cf0$export$ca9599b2a300afc & info.category)) {
                info.position = lastPos;
                if (info.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.H && info.position === $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Pre_M) {
                    for(let j = i3; j > start; j--)if (glyphs[j - 1].shaperInfo.position !== $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Pre_M) {
                        info.position = glyphs[j - 1].shaperInfo.position;
                        break;
                    }
                }
            } else if (info.position !== $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.SMVD) lastPos = info.position;
        }
        let last = base;
        for(let i4 = base + 1; i4 < end; i4++){
            if ($c6b883ac45fa55f1$var$isConsonant(glyphs[i4])) {
                for(let j = last + 1; j < i4; j++)if (glyphs[j].shaperInfo.position < $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.SMVD) glyphs[j].shaperInfo.position = glyphs[i4].shaperInfo.position;
                last = i4;
            } else if (glyphs[i4].shaperInfo.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.M) last = i4;
        }
        let arr = glyphs.slice(start, end);
        arr.sort((a, b)=>a.shaperInfo.position - b.shaperInfo.position
        );
        glyphs.splice(start, arr.length, ...arr);
        for(let i5 = start; i5 < end; i5++)if (glyphs[i5].shaperInfo.position === $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Base_C) {
            base = i5;
            break;
        }
        for(let i6 = start; i6 < end && glyphs[i6].shaperInfo.position === $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Ra_To_Become_Reph; i6++)glyphs[i6].features.rphf = true;
        let blwf = !plan.isOldSpec && indicConfig.blwfMode === 'Pre_And_Post';
        for(let i7 = start; i7 < base; i7++){
            glyphs[i7].features.half = true;
            if (blwf) glyphs[i7].features.blwf = true;
        }
        for(let i8 = base + 1; i8 < end; i8++){
            glyphs[i8].features.abvf = true;
            glyphs[i8].features.pstf = true;
            glyphs[i8].features.blwf = true;
        }
        if (plan.isOldSpec && plan.unicodeScript === 'Devanagari') {
            for(let i = start; i + 1 < base; i++)if (glyphs[i].shaperInfo.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.Ra && glyphs[i + 1].shaperInfo.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.H && (i + 1 === base || glyphs[i + 2].shaperInfo.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.ZWJ)) {
                glyphs[i].features.blwf = true;
                glyphs[i + 1].features.blwf = true;
            }
        }
        let prefLen = 2;
        if (features.pref && base + prefLen < end)
        for(let i9 = base + 1; i9 + prefLen - 1 < end; i9++){
            let g = [
                glyphs[i9].copy(),
                glyphs[i9 + 1].copy()
            ];
            if ($c6b883ac45fa55f1$var$wouldSubstitute(g, 'pref')) {
                for(let j = 0; j < prefLen; j++)glyphs[i9++].features.pref = true;
                if (features.cfar) for(; i9 < end; i9++)glyphs[i9].features.cfar = true;
                break;
            }
        }
        for(let i10 = start + 1; i10 < end; i10++)if ($c6b883ac45fa55f1$var$isJoiner(glyphs[i10])) {
            let nonJoiner = glyphs[i10].shaperInfo.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.ZWNJ;
            let j = i10;
            do {
                j--;
                if (nonJoiner) delete glyphs[j].features.half;
            }while (j > start && !$c6b883ac45fa55f1$var$isConsonant(glyphs[j]))
        }
    }
}
function $c6b883ac45fa55f1$var$finalReordering(font, glyphs, plan) {
    let indicConfig = plan.indicConfig;
    let features = font._layoutEngine.engine.GSUBProcessor.features;
    for(let start = 0, end = $c6b883ac45fa55f1$var$nextSyllable(glyphs, 0); start < glyphs.length; start = end, end = $c6b883ac45fa55f1$var$nextSyllable(glyphs, start)){
        let tryPref = !!features.pref;
        let base = start;
        for(; base < end; base++)if (glyphs[base].shaperInfo.position >= $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Base_C) {
            if (tryPref && base + 1 < end) {
                for(let i = base + 1; i < end; i++)if (glyphs[i].features.pref) {
                    if (!(glyphs[i].substituted && glyphs[i].isLigated && !glyphs[i].isMultiplied)) {
                        base = i;
                        while(base < end && $c6b883ac45fa55f1$var$isHalantOrCoeng(glyphs[base]))base++;
                        glyphs[base].shaperInfo.position = $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.BASE_C;
                        tryPref = false;
                    }
                    break;
                }
            }
            if (plan.unicodeScript === 'Malayalam') for(let i = base + 1; i < end; i++){
                while(i < end && $c6b883ac45fa55f1$var$isJoiner(glyphs[i]))i++;
                if (i === end || !$c6b883ac45fa55f1$var$isHalantOrCoeng(glyphs[i])) break;
                i++;
                while(i < end && $c6b883ac45fa55f1$var$isJoiner(glyphs[i]))i++;
                if (i < end && $c6b883ac45fa55f1$var$isConsonant(glyphs[i]) && glyphs[i].shaperInfo.position === $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Below_C) {
                    base = i;
                    glyphs[base].shaperInfo.position = $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Base_C;
                }
            }
            if (start < base && glyphs[base].shaperInfo.position > $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Base_C) base--;
            break;
        }
        if (base === end && start < base && glyphs[base - 1].shaperInfo.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.ZWJ) base--;
        if (base < end) while(start < base && glyphs[base].shaperInfo.category & ($b9778c6b60232cf0$export$a513ea61a7bee91c.N | $b9778c6b60232cf0$export$ca9599b2a300afc))base--;
        if (start + 1 < end && start < base) {
            let newPos = base === end ? base - 2 : base - 1;
            if (plan.unicodeScript !== 'Malayalam' && plan.unicodeScript !== 'Tamil') {
                while(newPos > start && !(glyphs[newPos].shaperInfo.category & ($b9778c6b60232cf0$export$a513ea61a7bee91c.M | $b9778c6b60232cf0$export$ca9599b2a300afc)))newPos--;
                if ($c6b883ac45fa55f1$var$isHalantOrCoeng(glyphs[newPos]) && glyphs[newPos].shaperInfo.position !== $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Pre_M)
                {
                    if (newPos + 1 < end && $c6b883ac45fa55f1$var$isJoiner(glyphs[newPos + 1])) newPos++;
                } else newPos = start;
            }
            if (start < newPos && glyphs[newPos].shaperInfo.position !== $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Pre_M) {
                for(let i = newPos; i > start; i--)if (glyphs[i - 1].shaperInfo.position === $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Pre_M) {
                    let oldPos = i - 1;
                    if (oldPos < base && base <= newPos) base--;
                    let tmp = glyphs[oldPos];
                    glyphs.splice(oldPos, 0, ...glyphs.splice(oldPos + 1, newPos - oldPos));
                    glyphs[newPos] = tmp;
                    newPos--;
                }
            }
        }
        if (start + 1 < end && glyphs[start].shaperInfo.position === $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Ra_To_Become_Reph && glyphs[start].shaperInfo.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.Repha !== (glyphs[start].isLigated && !glyphs[start].isMultiplied)) {
            let newRephPos;
            let rephPos = indicConfig.rephPos;
            let found = false;
            if (rephPos !== $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.After_Post) {
                newRephPos = start + 1;
                while(newRephPos < base && !$c6b883ac45fa55f1$var$isHalantOrCoeng(glyphs[newRephPos]))newRephPos++;
                if (newRephPos < base && $c6b883ac45fa55f1$var$isHalantOrCoeng(glyphs[newRephPos])) {
                    if (newRephPos + 1 < base && $c6b883ac45fa55f1$var$isJoiner(glyphs[newRephPos + 1])) newRephPos++;
                    found = true;
                }
                if (!found && rephPos === $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.After_Main) {
                    newRephPos = base;
                    while(newRephPos + 1 < end && glyphs[newRephPos + 1].shaperInfo.position <= $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.After_Main)newRephPos++;
                    found = newRephPos < end;
                }
                if (!found && rephPos === $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.After_Sub) {
                    newRephPos = base;
                    while(newRephPos + 1 < end && !(glyphs[newRephPos + 1].shaperInfo.position & ($b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Post_C | $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.After_Post | $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.SMVD)))newRephPos++;
                    found = newRephPos < end;
                }
            }
            if (!found) {
                newRephPos = start + 1;
                while(newRephPos < base && !$c6b883ac45fa55f1$var$isHalantOrCoeng(glyphs[newRephPos]))newRephPos++;
                if (newRephPos < base && $c6b883ac45fa55f1$var$isHalantOrCoeng(glyphs[newRephPos])) {
                    if (newRephPos + 1 < base && $c6b883ac45fa55f1$var$isJoiner(glyphs[newRephPos + 1])) newRephPos++;
                    found = true;
                }
            }
            if (!found) {
                newRephPos = end - 1;
                while(newRephPos > start && glyphs[newRephPos].shaperInfo.position === $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.SMVD)newRephPos--;
                if ($c6b883ac45fa55f1$var$isHalantOrCoeng(glyphs[newRephPos])) {
                    for(let i = base + 1; i < newRephPos; i++)if (glyphs[i].shaperInfo.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.M) newRephPos--;
                }
            }
            let reph = glyphs[start];
            glyphs.splice(start, 0, ...glyphs.splice(start + 1, newRephPos - start));
            glyphs[newRephPos] = reph;
            if (start < base && base <= newRephPos) base--;
        }
        if (tryPref && base + 1 < end) {
            for(let i = base + 1; i < end; i++)if (glyphs[i].features.pref) {
                if (glyphs[i].isLigated && !glyphs[i].isMultiplied) {
                    let newPos = base;
                    if (plan.unicodeScript !== 'Malayalam' && plan.unicodeScript !== 'Tamil') {
                        while(newPos > start && !(glyphs[newPos - 1].shaperInfo.category & ($b9778c6b60232cf0$export$a513ea61a7bee91c.M | $b9778c6b60232cf0$export$ca9599b2a300afc)))newPos--;
                        if (newPos > start && glyphs[newPos - 1].shaperInfo.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.M) {
                            let oldPos = i;
                            for(let j = base + 1; j < oldPos; j++)if (glyphs[j].shaperInfo.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.M) {
                                newPos--;
                                break;
                            }
                        }
                    }
                    if (newPos > start && $c6b883ac45fa55f1$var$isHalantOrCoeng(glyphs[newPos - 1]))
                    {
                        if (newPos < end && $c6b883ac45fa55f1$var$isJoiner(glyphs[newPos])) newPos++;
                    }
                    let oldPos = i;
                    let tmp = glyphs[oldPos];
                    glyphs.splice(newPos + 1, 0, ...glyphs.splice(newPos, oldPos - newPos));
                    glyphs[newPos] = tmp;
                    if (newPos <= base && base < oldPos) base++;
                }
                break;
            }
        }
        if (glyphs[start].shaperInfo.position === $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Pre_M && (!start || !/Cf|Mn/.test($747425b437e121da$export$2e2bcd8739ae039.getCategory(glyphs[start - 1].codePoints[0])))) glyphs[start].features.init = true;
    }
}
function $c6b883ac45fa55f1$var$nextSyllable(glyphs, start) {
    if (start >= glyphs.length) return start;
    let syllable = glyphs[start].shaperInfo.syllable;
    while(++start < glyphs.length && glyphs[start].shaperInfo.syllable === syllable);
    return start;
}
var $7eb6a55cb7a2526f$require$Buffer = buffer.Buffer;
const { categories: $7eb6a55cb7a2526f$var$categories , decompositions: $7eb6a55cb7a2526f$var$decompositions  } = ($parcel$interopDefault($f3bd27a8c88f3f53$exports));
const $7eb6a55cb7a2526f$var$trie = new $hJqJp$unicodetrie($7eb6a55cb7a2526f$require$Buffer.from("AAACAAAAAADQqQAAAVEMrvPtnH+oHUcVx+fd99799W5e8mx+9NkYm7YUI2KtimkVDG3FWgVTFY1Fqa2VJirYB0IaUFLBaKGJViXir6oxKCSBoi0UTKtg2yA26h+milYNtMH+0WK1VQyvtBS/487hnncyMzuzu7N7n7kHPszu7OzMmTNzdmdmfzzfUmpiUqkemAMbwSZwKbjcxM1XEL4VvB28G3zAk+56cLMlfgdYADvBbvBF8GWwH9xl+CFLfwj8BPwU/MKS38/AMfA86v9ro9ucQcdR+CjCP4CT4EnwDPg3eAFMTik1A+bAPNgINoFLwGawZSpLfzXCrWAb+AjYDm4BO8FusAfsA/vBXeAgOALuNfv3g4fAcXACPAaeAE+B58Bp8NJUpnN7WqlZsHY629+A8GLwWvAG8BZwJXinOf5ehB8EN4AdYGE6q7dmF9uugs8hvz0V58nZK/L+Kva/BX4ADoN7prP6HgUPgkfA73L0eQzHnwBPgX+Y80+DF8FUW6lBO4tbjXA9uAi8pj3sS2/E9mawBVwNtoJt5pzrTXgzwk+B7awP7sT+7nY6WxFfQBlfAl8H3wU/Anezcu/D9s/BMRN3HOEJ8EdwMkC/J5HmmXZmq2fBIjgEVEepbieLX4Fw0MnSrzRxmrVsm7MB8ReDV4vjr3ekJy7rZGVPMb196Xm6oug83oRyt4CrwDVgK9gGPtzxn3uTOD6YPDPNJ5Hm0+AznazffJ7Z4KSnXncg3VfAN8EBhx42/z/UGdbrx52sr9yH8AFTrt5+2GzfnWPbKuw7ZszZyNh/xowZM2bMmDFjxsQyZ5lPNs3h9nBNYHuAfr9ic9ffiHnsJzznU91/j3P+2snWYf6G8O/gn+A0eMnEt7vQp5ulX4NwHmwEm7rZ8UsRXg6uMPvXIHwPuK7rLl+nu9FzfMyYMWPGpGVuslmarv+YMWPSkNq/d2D8uNDNngvdivA2y3jy9m72bF9v3ymOf2MExp8fG2TsAcfA2wJYBJetWBq3i+0fwPafwLmzSl0LFmZNPMLHZ4fpnsX2AdjgcXB+T6kPge+AG7D/vXYW/tLsc9r9M+MkVyLNR1m6g9g+ZfYvmMExcHCm+ftP0+T5y/e17Uw/PYLwHnC0m80TH+zG30/3mjSDnPS2/B4pUJ4rX3n+b5H3o92l6UjfvZ7y/oJzToGnu8O66XTPYf8/Jr8XWL6TPXf9bPnHtmVs+89AnxVgDVgPLgKvAg+Y/F6H7c1gC7jKHH8XeJ/x15vAjt4wvwVs7wKfBXvAPvA18G1wsJevj36f5gjS3etIq+ft9+PYQ73h/nFsn2D7f+5l75bo/VPYftpTblFb2/Jo2pdjfL0uXOX/qxfnp8vZVk2Xv9hbmu+LxvYt3A/7/WZsPoptPkr9bdCv1ya+d4TuMO8Tre5n4XkILwSbzP4l/WHazX1//r2O/z7cFHnvSYW8R/Vm02ZXIHxHze1Xdf9bbn7p0z2kDroNr2X9WL+7937sX9fP+v9h9n6jTrfI3jG9EfsfN3G35PR/G4uRfY3eMTwdkFa/C3hrf2kcfy/xYTOmprrfZsLbEe7rDPW/U9Rrv9k/ahmTL0cWWxP/YxRkgtES+zwNhZPs+FQgMj/liEsto2HxsZBQX2pZoLZqWc5riXDaQBLSt1L3hcnE+Vct7aYVKCEhbXk2+b7NZ84mmXAwCiL14Ne85S62MYPcXi5StM/YxlJF2lfabznZsC6/C807xvZV+yFve9d1KY//d3HNO8pKUXuTDh0Gpp7B852q6QFMgdWM2dfbAxOuEPQEfcEsO5fquJLZrMfyCtWP0heZF6oSdiH9u4aQvJRIJ/eL6BBynItLp5D2JRkY5L5u3xAf6lviXHWSZcfaKO/+5zvO/c9Xtq8uRXSObd+8bS0zJrS1rxTyX7k/a0nrk5D+mHeOC90uq1Q216X57lykfqHt62uTGJ2rat+i/kttyq/RSi29PlclZf2Xxq55ZeSV34T96d5X5PqZJ9I3ZX2lnkXt3xL1Kyrav/LutbZ6uGxuS6ss6V3pXOXY4kP7EBfyJT7+4TJQS9uf74f6n+3+6ZIi9bCtieatFfCxUMx4KMYfy/pzrB30vm88q9SZ11K+n9eeNN612UFKWX8uI9TmRca7TbWvKy2JvF6naF+b/0uRupZp35cZikhZvyniY2R/CbdB3vXynIC6hbRBHf4l1xps6w4x/lVEtxRtGZMuRA8uNh/jfYV8kdpsBUszcODrD7E2JT2KrB3V6XMhbdNjcXItxzaOJWkpf976/I5glQn1sbLP86U9FQvz4l0S28/lcWUJbbrE2l+Z/TlHvi4/kvZXLMyrmy1PW7x8hl6UFgvlmNM1Jq3aJ3Se0yJcpdwS6mOp/ZgLX5N1rdFKaIzH9ztquMbqq+/qCFRk+hRoyZvrTHuO8fNd/djmEzZJ3TdisN1bNQNl7y96DV/3mVkTtwasVdk1ai6ybGlDek8nT1fXc4M5tVSPvhqOsWQeXQs8L1n3IradU8OxCeVjK7dr7Dpl0cMHnUvt18TzfVsfb/pZY56fV2GnVPVIYaOi9xcZJ8cmKcu3wcuPsVHV5cdKFfZXNZefp5sWft+wzR1cczKCxh99NRx76HvwOpWNv6YZtAajt6WPyPswtVVs/VOJ7xpYx3VR31er7gMxNuV9Q443CDlW43KuYSXblsybfKYt58trfez7A1X7Tdm+V7TcoudL+LpVGf2khN63U5OyD5Af0NoUv06l7Jc0Rte+so4xL9Ayy3Rz+SufY5Jf267xcm7J4dd3kumIOrmk7Pl549bUY1puI91Gdb8Tpu+9tjmhXFdwtfVsTv5SQvXKW0cK4eXgPBO6iJ07NNVOHH7/tF1jyJdnWbrU/Uau3VNI156QZ2ZaZFu76i6vQXy9YJ2H9QZ97aF3p1xlx1yfuYRcd0Kl7NyaX190+pUOKI0tvus5j7/nSWKLo3FER8R3LHEx8gqwge1POgi1l1yfirV3zHpISHxs3vLeFXOellcG1DFGbGP00PPkeKEOaXIsqhzbruOh9Qk5L08nW2grJ0avsvWocv0zRh/fGCG0TV35hB4v0rds5Vddjm/sFCKx+aXSt2yalPZsolxXW46CDnXp0YQ0rdso9OUYPSYT6+yzuxxzlrVfFfavQ/LKqsP+dbVzE/0qRb8pKin6V9U6Fnn24pqHufLMWy90nV+0DkXmcrb0Uq+6pU7/qcs/67SHTeTaaBk9ipyXQvLqW1U7uPKpux/ESlP9umydR8H3UjzHoXxj0/J1Yr5ubHsPrWOJqxK+hk5r+EVtH3pe1XWIXa+1vQ9YJ/oZre1bGReh3xKWeX7BxfYstwh5errGJi59be8482cSsfUPQT4Xlc9K+XMmatcY0fo2+SxYQs/4XO8M03Ng/TxujYH+FRELSdH+6mtveu8itb1Cy7C9X8GfsVOcfN86RHg56wJ0ob5qOz/E/rIdq7YhF34/0cfoeWKVftJjIbWDbDfXeXR/prBOKWJ/3dd43+sr+32TvgEIEZ6/7Zt5/l7ghMm77u+ey4gcz5xfktA5vE9C5vy2Y3lpXeX40tHcLMX42qZHS/ltZluXiSlDxillt3VdIvufbc0j75wy5aWaOxWRUZmfl5nDSh3LzoWbXJOg8uumKkndp1PnH2IPfe+U33z7vjWhdPQuWMh4raqxWMh9X89RZtSZ7/JpyXs3NWQcETN3CZHU/lmVnstZB1+ZfM5A/1VJ2V9t8wTXN1S+f27mzaulbCxJHePwC1Tz/0K1/VdPvtOsba+vL7ZxM1/jakJ/V9/yfdtNx+i7bhVRRll/rrK+sk3qLt/3T0afH+tzz1HDfxzZ/HlGDduK1y/GL21zvKptQGWFSpVlFm0z+ZxD/vdAt9EqQ971NkRHW7qytog53+cfVfeFGLStfddfYka5x6dl+yi//4z6/559aUn4/+/k2pv8BqfM/0qVCnu+If2OJPRZUcyzJF/5RQm5xtM9ln+LRN+8U9+iMQS1Veg9q2z/TlV3Ett3/rLOIXOookidy/5X3GYD+S8a1z2e0vH695T9vhEqdbY//0dU3jWZ2rYq/cvCRT8r08/NLlT5/zySdSurv1ybLiup5tAp5+NNzfPJ5r61warapajItfTQNeK610/rWEMPyb+uOo/ierRNbGU01Z+rqneIPWNsT9t1rD+OYr8rm0eKvp/Ch1P4Yepyy+hWVD/f+VWXX5X+TZdfZZ+KLb9J+S8=", "base64"));
const $7eb6a55cb7a2526f$var$stateMachine = new $5OpyM$dfa(($parcel$interopDefault($f3bd27a8c88f3f53$exports)));
class $7eb6a55cb7a2526f$export$2e2bcd8739ae039 extends $5340de7a86f3ae85$export$2e2bcd8739ae039 {
    static zeroMarkWidths = 'BEFORE_GPOS';
    static planFeatures(plan) {
        plan.addStage($7eb6a55cb7a2526f$var$setupSyllables);
        plan.addStage([
            'locl',
            'ccmp',
            'nukt',
            'akhn'
        ]);
        plan.addStage($7eb6a55cb7a2526f$var$clearSubstitutionFlags);
        plan.addStage([
            'rphf'
        ], false);
        plan.addStage($7eb6a55cb7a2526f$var$recordRphf);
        plan.addStage($7eb6a55cb7a2526f$var$clearSubstitutionFlags);
        plan.addStage([
            'pref'
        ]);
        plan.addStage($7eb6a55cb7a2526f$var$recordPref);
        plan.addStage([
            'rkrf',
            'abvf',
            'blwf',
            'half',
            'pstf',
            'vatu',
            'cjct'
        ]);
        plan.addStage($7eb6a55cb7a2526f$var$reorder);
        plan.addStage([
            'abvs',
            'blws',
            'pres',
            'psts',
            'dist',
            'abvm',
            'blwm'
        ]);
    }
    static assignFeatures(plan, glyphs) {
        for(let i = glyphs.length - 1; i >= 0; i--){
            let codepoint = glyphs[i].codePoints[0];
            if ($7eb6a55cb7a2526f$var$decompositions[codepoint]) {
                let decomposed = $7eb6a55cb7a2526f$var$decompositions[codepoint].map((c)=>{
                    let g = plan.font.glyphForCodePoint(c);
                    return new $8cba766f534deddd$export$2e2bcd8739ae039(plan.font, g.id, [
                        c
                    ], glyphs[i].features);
                });
                glyphs.splice(i, 1, ...decomposed);
            }
        }
    }
}
function $7eb6a55cb7a2526f$var$useCategory(glyph) {
    return $7eb6a55cb7a2526f$var$trie.get(glyph.codePoints[0]);
}
class $7eb6a55cb7a2526f$var$USEInfo {
    constructor(category, syllableType, syllable){
        this.category = category;
        this.syllableType = syllableType;
        this.syllable = syllable;
    }
}
function $7eb6a55cb7a2526f$var$setupSyllables(font, glyphs) {
    let syllable = 0;
    for (let [start, end, tags] of $7eb6a55cb7a2526f$var$stateMachine.match(glyphs.map($7eb6a55cb7a2526f$var$useCategory))){
        ++syllable;
        for(let i = start; i <= end; i++)glyphs[i].shaperInfo = new $7eb6a55cb7a2526f$var$USEInfo($7eb6a55cb7a2526f$var$categories[$7eb6a55cb7a2526f$var$useCategory(glyphs[i])], tags[0], syllable);
        let limit = glyphs[start].shaperInfo.category === 'R' ? 1 : Math.min(3, end - start);
        for(let i1 = start; i1 < start + limit; i1++)glyphs[i1].features.rphf = true;
    }
}
function $7eb6a55cb7a2526f$var$clearSubstitutionFlags(font, glyphs) {
    for (let glyph of glyphs)glyph.substituted = false;
}
function $7eb6a55cb7a2526f$var$recordRphf(font, glyphs) {
    for (let glyph of glyphs)if (glyph.substituted && glyph.features.rphf)
    glyph.shaperInfo.category = 'R';
}
function $7eb6a55cb7a2526f$var$recordPref(font, glyphs) {
    for (let glyph of glyphs)if (glyph.substituted)
    glyph.shaperInfo.category = 'VPre';
}
function $7eb6a55cb7a2526f$var$reorder(font, glyphs) {
    let dottedCircle = font.glyphForCodePoint(0x25cc).id;
    for(let start = 0, end = $7eb6a55cb7a2526f$var$nextSyllable(glyphs, 0); start < glyphs.length; start = end, end = $7eb6a55cb7a2526f$var$nextSyllable(glyphs, start)){
        let i, j;
        let info = glyphs[start].shaperInfo;
        let type = info.syllableType;
        if (type !== 'virama_terminated_cluster' && type !== 'standard_cluster' && type !== 'broken_cluster') continue;
        if (type === 'broken_cluster' && dottedCircle) {
            let g = new $8cba766f534deddd$export$2e2bcd8739ae039(font, dottedCircle, [
                0x25cc
            ]);
            g.shaperInfo = info;
            for(i = start; i < end && glyphs[i].shaperInfo.category === 'R'; i++);
            glyphs.splice(++i, 0, g);
            end++;
        }
        if (info.category === 'R' && end - start > 1)
        for(i = start + 1; i < end; i++){
            info = glyphs[i].shaperInfo;
            if ($7eb6a55cb7a2526f$var$isBase(info) || $7eb6a55cb7a2526f$var$isHalant(glyphs[i])) {
                if ($7eb6a55cb7a2526f$var$isHalant(glyphs[i])) i--;
                glyphs.splice(start, 0, ...glyphs.splice(start + 1, i - start), glyphs[i]);
                break;
            }
        }
        for(i = start, j = end; i < end; i++){
            info = glyphs[i].shaperInfo;
            if ($7eb6a55cb7a2526f$var$isBase(info) || $7eb6a55cb7a2526f$var$isHalant(glyphs[i]))
            j = $7eb6a55cb7a2526f$var$isHalant(glyphs[i]) ? i + 1 : i;
            else if ((info.category === 'VPre' || info.category === 'VMPre') && j < i) glyphs.splice(j, 1, glyphs[i], ...glyphs.splice(j, i - j));
        }
    }
}
function $7eb6a55cb7a2526f$var$nextSyllable(glyphs, start) {
    if (start >= glyphs.length) return start;
    let syllable = glyphs[start].shaperInfo.syllable;
    while(++start < glyphs.length && glyphs[start].shaperInfo.syllable === syllable);
    return start;
}
function $7eb6a55cb7a2526f$var$isHalant(glyph) {
    return glyph.shaperInfo.category === 'H' && !glyph.isLigated;
}
function $7eb6a55cb7a2526f$var$isBase(info) {
    return info.category === 'B' || info.category === 'GB';
}
const $a1d926e2c804f4db$var$SHAPERS = {
    arab: $5cab828b3273a17c$export$2e2bcd8739ae039,
    mong: $5cab828b3273a17c$export$2e2bcd8739ae039,
    syrc: $5cab828b3273a17c$export$2e2bcd8739ae039,
    'nko ': $5cab828b3273a17c$export$2e2bcd8739ae039,
    phag: $5cab828b3273a17c$export$2e2bcd8739ae039,
    mand: $5cab828b3273a17c$export$2e2bcd8739ae039,
    mani: $5cab828b3273a17c$export$2e2bcd8739ae039,
    phlp: $5cab828b3273a17c$export$2e2bcd8739ae039,
    hang: $ce39c5154631fd0c$export$2e2bcd8739ae039,
    bng2: $c6b883ac45fa55f1$export$2e2bcd8739ae039,
    beng: $c6b883ac45fa55f1$export$2e2bcd8739ae039,
    dev2: $c6b883ac45fa55f1$export$2e2bcd8739ae039,
    deva: $c6b883ac45fa55f1$export$2e2bcd8739ae039,
    gjr2: $c6b883ac45fa55f1$export$2e2bcd8739ae039,
    gujr: $c6b883ac45fa55f1$export$2e2bcd8739ae039,
    guru: $c6b883ac45fa55f1$export$2e2bcd8739ae039,
    gur2: $c6b883ac45fa55f1$export$2e2bcd8739ae039,
    knda: $c6b883ac45fa55f1$export$2e2bcd8739ae039,
    knd2: $c6b883ac45fa55f1$export$2e2bcd8739ae039,
    mlm2: $c6b883ac45fa55f1$export$2e2bcd8739ae039,
    mlym: $c6b883ac45fa55f1$export$2e2bcd8739ae039,
    ory2: $c6b883ac45fa55f1$export$2e2bcd8739ae039,
    orya: $c6b883ac45fa55f1$export$2e2bcd8739ae039,
    taml: $c6b883ac45fa55f1$export$2e2bcd8739ae039,
    tml2: $c6b883ac45fa55f1$export$2e2bcd8739ae039,
    telu: $c6b883ac45fa55f1$export$2e2bcd8739ae039,
    tel2: $c6b883ac45fa55f1$export$2e2bcd8739ae039,
    khmr: $c6b883ac45fa55f1$export$2e2bcd8739ae039,
    bali: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
    batk: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
    brah: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
    bugi: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
    buhd: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
    cakm: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
    cham: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
    dupl: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
    egyp: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
    gran: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
    hano: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
    java: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
    kthi: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
    kali: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
    khar: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
    khoj: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
    sind: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
    lepc: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
    limb: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
    mahj: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
    mtei: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
    modi: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
    hmng: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
    rjng: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
    saur: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
    shrd: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
    sidd: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
    sinh: $c6b883ac45fa55f1$export$2e2bcd8739ae039,
    sund: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
    sylo: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
    tglg: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
    tagb: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
    tale: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
    lana: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
    tavt: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
    takr: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
    tibt: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
    tfng: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
    tirh: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,
    latn: $5340de7a86f3ae85$export$2e2bcd8739ae039,
    DFLT: $5340de7a86f3ae85$export$2e2bcd8739ae039
};
function $a1d926e2c804f4db$export$7877a478dd30fd3d(script) {
    if (!Array.isArray(script)) script = [
        script
    ];
    for (let s of script){
        let shaper = $a1d926e2c804f4db$var$SHAPERS[s];
        if (shaper) return shaper;
    }
    return $5340de7a86f3ae85$export$2e2bcd8739ae039;
}
class $ec0cc8d4808a62ff$export$2e2bcd8739ae039 extends $cffd0e0e7e88a6c6$export$2e2bcd8739ae039 {
    applyLookup(lookupType, table) {
        switch(lookupType){
            case 1:
                {
                    let index = this.coverageIndex(table.coverage);
                    if (index === -1) return false;
                    let glyph = this.glyphIterator.cur;
                    switch(table.version){
                        case 1:
                            glyph.id = glyph.id + table.deltaGlyphID & 0xffff;
                            break;
                        case 2:
                            glyph.id = table.substitute.get(index);
                            break;
                    }
                    return true;
                }
            case 2:
                {
                    let index = this.coverageIndex(table.coverage);
                    if (index !== -1) {
                        let sequence = table.sequences.get(index);
                        if (sequence.length === 0) {
                            this.glyphs.splice(this.glyphIterator.index, 1);
                            return true;
                        }
                        this.glyphIterator.cur.id = sequence[0];
                        this.glyphIterator.cur.ligatureComponent = 0;
                        let features = this.glyphIterator.cur.features;
                        let curGlyph = this.glyphIterator.cur;
                        let replacement = sequence.slice(1).map((gid, i)=>{
                            let glyph = new $8cba766f534deddd$export$2e2bcd8739ae039(this.font, gid, undefined, features);
                            glyph.shaperInfo = curGlyph.shaperInfo;
                            glyph.isLigated = curGlyph.isLigated;
                            glyph.ligatureComponent = i + 1;
                            glyph.substituted = true;
                            glyph.isMultiplied = true;
                            return glyph;
                        });
                        this.glyphs.splice(this.glyphIterator.index + 1, 0, ...replacement);
                        return true;
                    }
                    return false;
                }
            case 3:
                {
                    let index = this.coverageIndex(table.coverage);
                    if (index !== -1) {
                        let USER_INDEX = 0;
                        this.glyphIterator.cur.id = table.alternateSet.get(index)[USER_INDEX];
                        return true;
                    }
                    return false;
                }
            case 4:
                {
                    let index = this.coverageIndex(table.coverage);
                    if (index === -1) return false;
                    for (let ligature of table.ligatureSets.get(index)){
                        let matched = this.sequenceMatchIndices(1, ligature.components);
                        if (!matched) continue;
                        let curGlyph = this.glyphIterator.cur;
                        let characters = curGlyph.codePoints.slice();
                        for (let index of matched)characters.push(...this.glyphs[index].codePoints);
                        let ligatureGlyph = new $8cba766f534deddd$export$2e2bcd8739ae039(this.font, ligature.glyph, characters, curGlyph.features);
                        ligatureGlyph.shaperInfo = curGlyph.shaperInfo;
                        ligatureGlyph.isLigated = true;
                        ligatureGlyph.substituted = true;
                        let isMarkLigature = curGlyph.isMark;
                        for(let i = 0; i < matched.length && isMarkLigature; i++)isMarkLigature = this.glyphs[matched[i]].isMark;
                        ligatureGlyph.ligatureID = isMarkLigature ? null : this.ligatureID++;
                        let lastLigID = curGlyph.ligatureID;
                        let lastNumComps = curGlyph.codePoints.length;
                        let curComps = lastNumComps;
                        let idx = this.glyphIterator.index + 1;
                        for (let matchIndex of matched){
                            if (isMarkLigature) idx = matchIndex;
                            else while(idx < matchIndex){
                                var ligatureComponent = curComps - lastNumComps + Math.min(this.glyphs[idx].ligatureComponent || 1, lastNumComps);
                                this.glyphs[idx].ligatureID = ligatureGlyph.ligatureID;
                                this.glyphs[idx].ligatureComponent = ligatureComponent;
                                idx++;
                            }
                            lastLigID = this.glyphs[idx].ligatureID;
                            lastNumComps = this.glyphs[idx].codePoints.length;
                            curComps += lastNumComps;
                            idx++;
                        }
                        if (lastLigID && !isMarkLigature) for(let i1 = idx; i1 < this.glyphs.length; i1++){
                            if (this.glyphs[i1].ligatureID === lastLigID) {
                                var ligatureComponent = curComps - lastNumComps + Math.min(this.glyphs[i1].ligatureComponent || 1, lastNumComps);
                                this.glyphs[i1].ligatureComponent = ligatureComponent;
                            } else break;
                        }
                        for(let i2 = matched.length - 1; i2 >= 0; i2--)this.glyphs.splice(matched[i2], 1);
                        this.glyphs[this.glyphIterator.index] = ligatureGlyph;
                        return true;
                    }
                    return false;
                }
            case 5:
                return this.applyContext(table);
            case 6:
                return this.applyChainingContext(table);
            case 7:
                return this.applyLookup(table.lookupType, table.extension);
            default:
                throw new Error(`GSUB lookupType ${lookupType} is not supported`);
        }
    }
}
class $d1645ec9e32ddac0$export$2e2bcd8739ae039 extends $cffd0e0e7e88a6c6$export$2e2bcd8739ae039 {
    applyPositionValue(sequenceIndex, value) {
        let position = this.positions[this.glyphIterator.peekIndex(sequenceIndex)];
        if (value.xAdvance != null) position.xAdvance += value.xAdvance;
        if (value.yAdvance != null) position.yAdvance += value.yAdvance;
        if (value.xPlacement != null) position.xOffset += value.xPlacement;
        if (value.yPlacement != null) position.yOffset += value.yPlacement;
        let variationProcessor = this.font._variationProcessor;
        let variationStore = this.font.GDEF && this.font.GDEF.itemVariationStore;
        if (variationProcessor && variationStore) {
            if (value.xPlaDevice) position.xOffset += variationProcessor.getDelta(variationStore, value.xPlaDevice.a, value.xPlaDevice.b);
            if (value.yPlaDevice) position.yOffset += variationProcessor.getDelta(variationStore, value.yPlaDevice.a, value.yPlaDevice.b);
            if (value.xAdvDevice) position.xAdvance += variationProcessor.getDelta(variationStore, value.xAdvDevice.a, value.xAdvDevice.b);
            if (value.yAdvDevice) position.yAdvance += variationProcessor.getDelta(variationStore, value.yAdvDevice.a, value.yAdvDevice.b);
        }
    }
    applyLookup(lookupType, table) {
        switch(lookupType){
            case 1:
                {
                    let index = this.coverageIndex(table.coverage);
                    if (index === -1) return false;
                    switch(table.version){
                        case 1:
                            this.applyPositionValue(0, table.value);
                            break;
                        case 2:
                            this.applyPositionValue(0, table.values.get(index));
                            break;
                    }
                    return true;
                }
            case 2:
                {
                    let nextGlyph = this.glyphIterator.peek();
                    if (!nextGlyph) return false;
                    let index = this.coverageIndex(table.coverage);
                    if (index === -1) return false;
                    switch(table.version){
                        case 1:
                            let set = table.pairSets.get(index);
                            for (let pair of set)if (pair.secondGlyph === nextGlyph.id) {
                                this.applyPositionValue(0, pair.value1);
                                this.applyPositionValue(1, pair.value2);
                                return true;
                            }
                            return false;
                        case 2:
                            let class1 = this.getClassID(this.glyphIterator.cur.id, table.classDef1);
                            let class2 = this.getClassID(nextGlyph.id, table.classDef2);
                            if (class1 === -1 || class2 === -1) return false;
                            var pair1 = table.classRecords.get(class1).get(class2);
                            this.applyPositionValue(0, pair1.value1);
                            this.applyPositionValue(1, pair1.value2);
                            return true;
                    }
                }
            case 3:
                {
                    let nextIndex = this.glyphIterator.peekIndex();
                    let nextGlyph = this.glyphs[nextIndex];
                    if (!nextGlyph) return false;
                    let curRecord = table.entryExitRecords[this.coverageIndex(table.coverage)];
                    if (!curRecord || !curRecord.exitAnchor) return false;
                    let nextRecord = table.entryExitRecords[this.coverageIndex(table.coverage, nextGlyph.id)];
                    if (!nextRecord || !nextRecord.entryAnchor) return false;
                    let entry = this.getAnchor(nextRecord.entryAnchor);
                    let exit = this.getAnchor(curRecord.exitAnchor);
                    let cur = this.positions[this.glyphIterator.index];
                    let next = this.positions[nextIndex];
                    let d;
                    switch(this.direction){
                        case 'ltr':
                            cur.xAdvance = exit.x + cur.xOffset;
                            d = entry.x + next.xOffset;
                            next.xAdvance -= d;
                            next.xOffset -= d;
                            break;
                        case 'rtl':
                            d = exit.x + cur.xOffset;
                            cur.xAdvance -= d;
                            cur.xOffset -= d;
                            next.xAdvance = entry.x + next.xOffset;
                            break;
                    }
                    if (this.glyphIterator.flags.rightToLeft) {
                        this.glyphIterator.cur.cursiveAttachment = nextIndex;
                        cur.yOffset = entry.y - exit.y;
                    } else {
                        nextGlyph.cursiveAttachment = this.glyphIterator.index;
                        cur.yOffset = exit.y - entry.y;
                    }
                    return true;
                }
            case 4:
                {
                    let markIndex = this.coverageIndex(table.markCoverage);
                    if (markIndex === -1) return false;
                    let baseGlyphIndex = this.glyphIterator.index;
                    while(--baseGlyphIndex >= 0 && (this.glyphs[baseGlyphIndex].isMark || this.glyphs[baseGlyphIndex].ligatureComponent > 0));
                    if (baseGlyphIndex < 0) return false;
                    let baseIndex = this.coverageIndex(table.baseCoverage, this.glyphs[baseGlyphIndex].id);
                    if (baseIndex === -1) return false;
                    let markRecord = table.markArray[markIndex];
                    let baseAnchor = table.baseArray[baseIndex][markRecord.class];
                    this.applyAnchor(markRecord, baseAnchor, baseGlyphIndex);
                    return true;
                }
            case 5:
                {
                    let markIndex = this.coverageIndex(table.markCoverage);
                    if (markIndex === -1) return false;
                    let baseGlyphIndex = this.glyphIterator.index;
                    while(--baseGlyphIndex >= 0 && this.glyphs[baseGlyphIndex].isMark);
                    if (baseGlyphIndex < 0) return false;
                    let ligIndex = this.coverageIndex(table.ligatureCoverage, this.glyphs[baseGlyphIndex].id);
                    if (ligIndex === -1) return false;
                    let ligAttach = table.ligatureArray[ligIndex];
                    let markGlyph = this.glyphIterator.cur;
                    let ligGlyph = this.glyphs[baseGlyphIndex];
                    let compIndex = ligGlyph.ligatureID && ligGlyph.ligatureID === markGlyph.ligatureID && markGlyph.ligatureComponent > 0 ? Math.min(markGlyph.ligatureComponent, ligGlyph.codePoints.length) - 1 : ligGlyph.codePoints.length - 1;
                    let markRecord = table.markArray[markIndex];
                    let baseAnchor = ligAttach[compIndex][markRecord.class];
                    this.applyAnchor(markRecord, baseAnchor, baseGlyphIndex);
                    return true;
                }
            case 6:
                {
                    let mark1Index = this.coverageIndex(table.mark1Coverage);
                    if (mark1Index === -1) return false;
                    let prevIndex = this.glyphIterator.peekIndex(-1);
                    let prev = this.glyphs[prevIndex];
                    if (!prev || !prev.isMark) return false;
                    let cur = this.glyphIterator.cur;
                    let good = false;
                    if (cur.ligatureID === prev.ligatureID) {
                        if (!cur.ligatureID) good = true;
                        else if (cur.ligatureComponent === prev.ligatureComponent) good = true;
                    } else
                    if (cur.ligatureID && !cur.ligatureComponent || prev.ligatureID && !prev.ligatureComponent) good = true;
                    if (!good) return false;
                    let mark2Index = this.coverageIndex(table.mark2Coverage, prev.id);
                    if (mark2Index === -1) return false;
                    let markRecord = table.mark1Array[mark1Index];
                    let baseAnchor = table.mark2Array[mark2Index][markRecord.class];
                    this.applyAnchor(markRecord, baseAnchor, prevIndex);
                    return true;
                }
            case 7:
                return this.applyContext(table);
            case 8:
                return this.applyChainingContext(table);
            case 9:
                return this.applyLookup(table.lookupType, table.extension);
            default:
                throw new Error(`Unsupported GPOS table: ${lookupType}`);
        }
    }
    applyAnchor(markRecord, baseAnchor, baseGlyphIndex) {
        let baseCoords = this.getAnchor(baseAnchor);
        let markCoords = this.getAnchor(markRecord.markAnchor);
        this.positions[baseGlyphIndex];
        let markPos = this.positions[this.glyphIterator.index];
        markPos.xOffset = baseCoords.x - markCoords.x;
        markPos.yOffset = baseCoords.y - markCoords.y;
        this.glyphIterator.cur.markAttachment = baseGlyphIndex;
    }
    getAnchor(anchor) {
        let x = anchor.xCoordinate;
        let y = anchor.yCoordinate;
        let variationProcessor = this.font._variationProcessor;
        let variationStore = this.font.GDEF && this.font.GDEF.itemVariationStore;
        if (variationProcessor && variationStore) {
            if (anchor.xDeviceTable) x += variationProcessor.getDelta(variationStore, anchor.xDeviceTable.a, anchor.xDeviceTable.b);
            if (anchor.yDeviceTable) y += variationProcessor.getDelta(variationStore, anchor.yDeviceTable.a, anchor.yDeviceTable.b);
        }
        return {
            x: x,
            y: y
        };
    }
    applyFeatures(userFeatures, glyphs, advances) {
        super.applyFeatures(userFeatures, glyphs, advances);
        for(var i = 0; i < this.glyphs.length; i++)this.fixCursiveAttachment(i);
        this.fixMarkAttachment();
    }
    fixCursiveAttachment(i) {
        let glyph = this.glyphs[i];
        if (glyph.cursiveAttachment != null) {
            let j = glyph.cursiveAttachment;
            glyph.cursiveAttachment = null;
            this.fixCursiveAttachment(j);
            this.positions[i].yOffset += this.positions[j].yOffset;
        }
    }
    fixMarkAttachment() {
        for(let i = 0; i < this.glyphs.length; i++){
            let glyph = this.glyphs[i];
            if (glyph.markAttachment != null) {
                let j = glyph.markAttachment;
                this.positions[i].xOffset += this.positions[j].xOffset;
                this.positions[i].yOffset += this.positions[j].yOffset;
                if (this.direction === 'ltr') for(let k = j; k < i; k++){
                    this.positions[i].xOffset -= this.positions[k].xAdvance;
                    this.positions[i].yOffset -= this.positions[k].yAdvance;
                }
                else for(let k1 = j + 1; k1 < i + 1; k1++){
                    this.positions[i].xOffset += this.positions[k1].xAdvance;
                    this.positions[i].yOffset += this.positions[k1].yAdvance;
                }
            }
        }
    }
}
class $805414ed4cd3125e$export$2e2bcd8739ae039 {
    constructor(font){
        this.font = font;
        this.glyphInfos = null;
        this.plan = null;
        this.GSUBProcessor = null;
        this.GPOSProcessor = null;
        this.fallbackPosition = true;
        if (font.GSUB) this.GSUBProcessor = new $ec0cc8d4808a62ff$export$2e2bcd8739ae039(font, font.GSUB);
        if (font.GPOS) this.GPOSProcessor = new $d1645ec9e32ddac0$export$2e2bcd8739ae039(font, font.GPOS);
    }
    setup(glyphRun) {
        this.glyphInfos = glyphRun.glyphs.map((glyph)=>new $8cba766f534deddd$export$2e2bcd8739ae039(this.font, glyph.id, [
                ...glyph.codePoints
            ])
        );
        let script = null;
        if (this.GPOSProcessor) script = this.GPOSProcessor.selectScript(glyphRun.script, glyphRun.language, glyphRun.direction);
        if (this.GSUBProcessor) script = this.GSUBProcessor.selectScript(glyphRun.script, glyphRun.language, glyphRun.direction);
        this.shaper = $a1d926e2c804f4db$export$7877a478dd30fd3d(script);
        this.plan = new $d208953d14e55e3c$export$2e2bcd8739ae039(this.font, script, glyphRun.direction);
        this.shaper.plan(this.plan, this.glyphInfos, glyphRun.features);
        for(let key in this.plan.allFeatures)glyphRun.features[key] = true;
    }
    substitute(glyphRun) {
        if (this.GSUBProcessor) {
            this.plan.process(this.GSUBProcessor, this.glyphInfos);
            glyphRun.glyphs = this.glyphInfos.map((glyphInfo)=>this.font.getGlyph(glyphInfo.id, glyphInfo.codePoints)
            );
        }
    }
    position(glyphRun) {
        if (this.shaper.zeroMarkWidths === 'BEFORE_GPOS') this.zeroMarkAdvances(glyphRun.positions);
        if (this.GPOSProcessor) this.plan.process(this.GPOSProcessor, this.glyphInfos, glyphRun.positions);
        if (this.shaper.zeroMarkWidths === 'AFTER_GPOS') this.zeroMarkAdvances(glyphRun.positions);
        if (glyphRun.direction === 'rtl') {
            glyphRun.glyphs.reverse();
            glyphRun.positions.reverse();
        }
        return this.GPOSProcessor && this.GPOSProcessor.features;
    }
    zeroMarkAdvances(positions) {
        for(let i = 0; i < this.glyphInfos.length; i++)if (this.glyphInfos[i].isMark) {
            positions[i].xAdvance = 0;
            positions[i].yAdvance = 0;
        }
    }
    cleanup() {
        this.glyphInfos = null;
        this.plan = null;
        this.shaper = null;
    }
    getAvailableFeatures(script, language) {
        let features = [];
        if (this.GSUBProcessor) {
            this.GSUBProcessor.selectScript(script, language);
            features.push(...Object.keys(this.GSUBProcessor.features));
        }
        if (this.GPOSProcessor) {
            this.GPOSProcessor.selectScript(script, language);
            features.push(...Object.keys(this.GPOSProcessor.features));
        }
        return features;
    }
}
class $2df783177c3b5db5$export$2e2bcd8739ae039 {
    constructor(font){
        this.font = font;
        this.unicodeLayoutEngine = null;
        this.kernProcessor = null;
        if (this.font.morx) this.engine = new $9273c77bc46b13e0$export$2e2bcd8739ae039(this.font);
        else if (this.font.GSUB || this.font.GPOS) this.engine = new $805414ed4cd3125e$export$2e2bcd8739ae039(this.font);
    }
    layout(string, features, script, language, direction) {
        if (typeof features === 'string') {
            direction = language;
            language = script;
            script = features;
            features = [];
        }
        if (typeof string === 'string') {
            if (script == null) script = $a5878e4f4663c9e2$export$e5cb25e204fb8450(string);
            var glyphs = this.font.glyphsForString(string);
        } else {
            if (script == null) {
                let codePoints = [];
                for (let glyph of string)codePoints.push(...glyph.codePoints);
                script = $a5878e4f4663c9e2$export$16fab0757cfc223d(codePoints);
            }
            var glyphs = string;
        }
        let glyphRun = new $5a6ae00fa7e614b0$export$2e2bcd8739ae039(glyphs, features, script, language, direction);
        if (glyphs.length === 0) {
            glyphRun.positions = [];
            return glyphRun;
        }
        if (this.engine && this.engine.setup) this.engine.setup(glyphRun);
        this.substitute(glyphRun);
        this.position(glyphRun);
        this.hideDefaultIgnorables(glyphRun.glyphs, glyphRun.positions);
        if (this.engine && this.engine.cleanup) this.engine.cleanup();
        return glyphRun;
    }
    substitute(glyphRun) {
        if (this.engine && this.engine.substitute) this.engine.substitute(glyphRun);
    }
    position(glyphRun) {
        glyphRun.positions = glyphRun.glyphs.map((glyph)=>new $4bff5f854806c785$export$2e2bcd8739ae039(glyph.advanceWidth)
        );
        let positioned = null;
        if (this.engine && this.engine.position) positioned = this.engine.position(glyphRun);
        if (!positioned && (!this.engine || this.engine.fallbackPosition)) {
            if (!this.unicodeLayoutEngine) this.unicodeLayoutEngine = new $e4967fef9afc586a$export$2e2bcd8739ae039(this.font);
            this.unicodeLayoutEngine.positionGlyphs(glyphRun.glyphs, glyphRun.positions);
        }
        if ((!positioned || !positioned.kern) && glyphRun.features.kern !== false && this.font.kern) {
            if (!this.kernProcessor) this.kernProcessor = new $8526e21034212dc1$export$2e2bcd8739ae039(this.font);
            this.kernProcessor.process(glyphRun.glyphs, glyphRun.positions);
            glyphRun.features.kern = true;
        }
    }
    hideDefaultIgnorables(glyphs, positions) {
        let space = this.font.glyphForCodePoint(0x20);
        for(let i = 0; i < glyphs.length; i++)if (this.isDefaultIgnorable(glyphs[i].codePoints[0])) {
            glyphs[i] = space;
            positions[i].xAdvance = 0;
            positions[i].yAdvance = 0;
        }
    }
    isDefaultIgnorable(ch) {
        let plane = ch >> 16;
        if (plane === 0)
        switch(ch >> 8){
            case 0x00:
                return ch === 0x00AD;
            case 0x03:
                return ch === 0x034F;
            case 0x06:
                return ch === 0x061C;
            case 0x17:
                return 0x17B4 <= ch && ch <= 0x17B5;
            case 0x18:
                return 0x180B <= ch && ch <= 0x180E;
            case 0x20:
                return 0x200B <= ch && ch <= 0x200F || 0x202A <= ch && ch <= 0x202E || 0x2060 <= ch && ch <= 0x206F;
            case 0xFE:
                return 0xFE00 <= ch && ch <= 0xFE0F || ch === 0xFEFF;
            case 0xFF:
                return 0xFFF0 <= ch && ch <= 0xFFF8;
            default:
                return false;
        }
        else
        switch(plane){
            case 0x01:
                return 0x1BCA0 <= ch && ch <= 0x1BCA3 || 0x1D173 <= ch && ch <= 0x1D17A;
            case 0x0E:
                return 0xE0000 <= ch && ch <= 0xE0FFF;
            default:
                return false;
        }
    }
    getAvailableFeatures(script, language) {
        let features = [];
        if (this.engine) features.push(...this.engine.getAvailableFeatures(script, language));
        if (this.font.kern && features.indexOf('kern') === -1) features.push('kern');
        return features;
    }
    stringsForGlyph(gid) {
        let result = new Set;
        let codePoints = this.font._cmapProcessor.codePointsForGlyph(gid);
        for (let codePoint of codePoints)result.add(String.fromCodePoint(codePoint));
        if (this.engine && this.engine.stringsForGlyph) for (let string of this.engine.stringsForGlyph(gid))result.add(string);
        return Array.from(result);
    }
}
const $af5e1fcddefe17a2$var$SVG_COMMANDS = {
    moveTo: 'M',
    lineTo: 'L',
    quadraticCurveTo: 'Q',
    bezierCurveTo: 'C',
    closePath: 'Z'
};
class $af5e1fcddefe17a2$export$2e2bcd8739ae039 {
    constructor(){
        this.commands = [];
        this._bbox = null;
        this._cbox = null;
    }
 toFunction() {
        return (ctx)=>{
            this.commands.forEach((c)=>{
                return ctx[c.command].apply(ctx, c.args);
            });
        };
    }
 toSVG() {
        let cmds = this.commands.map((c)=>{
            let args = c.args.map((arg)=>Math.round(arg * 100) / 100
            );
            return `${$af5e1fcddefe17a2$var$SVG_COMMANDS[c.command]}${args.join(' ')}`;
        });
        return cmds.join('');
    }
 get cbox() {
        if (!this._cbox) {
            let cbox = new $fcb46e14b01ea01f$export$2e2bcd8739ae039;
            for (let command1 of this.commands)for(let i = 0; i < command1.args.length; i += 2)cbox.addPoint(command1.args[i], command1.args[i + 1]);
            this._cbox = Object.freeze(cbox);
        }
        return this._cbox;
    }
 get bbox() {
        if (this._bbox) return this._bbox;
        let bbox = new $fcb46e14b01ea01f$export$2e2bcd8739ae039;
        let cx = 0, cy = 0;
        let f = (t)=>Math.pow(1 - t, 3) * p0[i] + 3 * Math.pow(1 - t, 2) * t * p1[i] + 3 * (1 - t) * Math.pow(t, 2) * p2[i] + Math.pow(t, 3) * p3[i]
        ;
        for (let c of this.commands)switch(c.command){
            case 'moveTo':
            case 'lineTo':
                let [x, y] = c.args;
                bbox.addPoint(x, y);
                cx = x;
                cy = y;
                break;
            case 'quadraticCurveTo':
            case 'bezierCurveTo':
                if (c.command === 'quadraticCurveTo') {
                    var [qp1x, qp1y, p3x, p3y] = c.args;
                    var cp1x = cx + 2 / 3 * (qp1x - cx);
                    var cp1y = cy + 2 / 3 * (qp1y - cy);
                    var cp2x = p3x + 2 / 3 * (qp1x - p3x);
                    var cp2y = p3y + 2 / 3 * (qp1y - p3y);
                } else var [cp1x, cp1y, cp2x, cp2y, p3x, p3y] = c.args;
                bbox.addPoint(p3x, p3y);
                var p0 = [
                    cx,
                    cy
                ];
                var p1 = [
                    cp1x,
                    cp1y
                ];
                var p2 = [
                    cp2x,
                    cp2y
                ];
                var p3 = [
                    p3x,
                    p3y
                ];
                for(var i = 0; i <= 1; i++){
                    let b = 6 * p0[i] - 12 * p1[i] + 6 * p2[i];
                    let a = -3 * p0[i] + 9 * p1[i] - 9 * p2[i] + 3 * p3[i];
                    c = 3 * p1[i] - 3 * p0[i];
                    if (a === 0) {
                        if (b === 0) continue;
                        let t = -c / b;
                        if (0 < t && t < 1) {
                            if (i === 0) bbox.addPoint(f(t), bbox.maxY);
                            else if (i === 1) bbox.addPoint(bbox.maxX, f(t));
                        }
                        continue;
                    }
                    let b2ac = Math.pow(b, 2) - 4 * c * a;
                    if (b2ac < 0) continue;
                    let t1 = (-b + Math.sqrt(b2ac)) / (2 * a);
                    if (0 < t1 && t1 < 1) {
                        if (i === 0) bbox.addPoint(f(t1), bbox.maxY);
                        else if (i === 1) bbox.addPoint(bbox.maxX, f(t1));
                    }
                    let t2 = (-b - Math.sqrt(b2ac)) / (2 * a);
                    if (0 < t2 && t2 < 1) {
                        if (i === 0) bbox.addPoint(f(t2), bbox.maxY);
                        else if (i === 1) bbox.addPoint(bbox.maxX, f(t2));
                    }
                }
                cx = p3x;
                cy = p3y;
                break;
        }
        return this._bbox = Object.freeze(bbox);
    }
 mapPoints(fn) {
        let path = new $af5e1fcddefe17a2$export$2e2bcd8739ae039;
        for (let c of this.commands){
            let args = [];
            for(let i = 0; i < c.args.length; i += 2){
                let [x, y] = fn(c.args[i], c.args[i + 1]);
                args.push(x, y);
            }
            path[c.command](...args);
        }
        return path;
    }
 transform(m0, m1, m2, m3, m4, m5) {
        return this.mapPoints((x, y)=>{
            const tx = m0 * x + m2 * y + m4;
            const ty = m1 * x + m3 * y + m5;
            return [
                tx,
                ty
            ];
        });
    }
 translate(x, y) {
        return this.transform(1, 0, 0, 1, x, y);
    }
 rotate(angle) {
        let cos = Math.cos(angle);
        let sin = Math.sin(angle);
        return this.transform(cos, sin, -sin, cos, 0, 0);
    }
 scale(scaleX, scaleY = scaleX) {
        return this.transform(scaleX, 0, 0, scaleY, 0, 0);
    }
}
for (let command of [
    'moveTo',
    'lineTo',
    'quadraticCurveTo',
    'bezierCurveTo',
    'closePath'
])$af5e1fcddefe17a2$export$2e2bcd8739ae039.prototype[command] = function(...args) {
    this._bbox = this._cbox = null;
    this.commands.push({
        command: command,
        args: args
    });
    return this;
};
var $c55d37cb83b3ceea$export$2e2bcd8739ae039 = [
    '.notdef',
    '.null',
    'nonmarkingreturn',
    'space',
    'exclam',
    'quotedbl',
    'numbersign',
    'dollar',
    'percent',
    'ampersand',
    'quotesingle',
    'parenleft',
    'parenright',
    'asterisk',
    'plus',
    'comma',
    'hyphen',
    'period',
    'slash',
    'zero',
    'one',
    'two',
    'three',
    'four',
    'five',
    'six',
    'seven',
    'eight',
    'nine',
    'colon',
    'semicolon',
    'less',
    'equal',
    'greater',
    'question',
    'at',
    'A',
    'B',
    'C',
    'D',
    'E',
    'F',
    'G',
    'H',
    'I',
    'J',
    'K',
    'L',
    'M',
    'N',
    'O',
    'P',
    'Q',
    'R',
    'S',
    'T',
    'U',
    'V',
    'W',
    'X',
    'Y',
    'Z',
    'bracketleft',
    'backslash',
    'bracketright',
    'asciicircum',
    'underscore',
    'grave',
    'a',
    'b',
    'c',
    'd',
    'e',
    'f',
    'g',
    'h',
    'i',
    'j',
    'k',
    'l',
    'm',
    'n',
    'o',
    'p',
    'q',
    'r',
    's',
    't',
    'u',
    'v',
    'w',
    'x',
    'y',
    'z',
    'braceleft',
    'bar',
    'braceright',
    'asciitilde',
    'Adieresis',
    'Aring',
    'Ccedilla',
    'Eacute',
    'Ntilde',
    'Odieresis',
    'Udieresis',
    'aacute',
    'agrave',
    'acircumflex',
    'adieresis',
    'atilde',
    'aring',
    'ccedilla',
    'eacute',
    'egrave',
    'ecircumflex',
    'edieresis',
    'iacute',
    'igrave',
    'icircumflex',
    'idieresis',
    'ntilde',
    'oacute',
    'ograve',
    'ocircumflex',
    'odieresis',
    'otilde',
    'uacute',
    'ugrave',
    'ucircumflex',
    'udieresis',
    'dagger',
    'degree',
    'cent',
    'sterling',
    'section',
    'bullet',
    'paragraph',
    'germandbls',
    'registered',
    'copyright',
    'trademark',
    'acute',
    'dieresis',
    'notequal',
    'AE',
    'Oslash',
    'infinity',
    'plusminus',
    'lessequal',
    'greaterequal',
    'yen',
    'mu',
    'partialdiff',
    'summation',
    'product',
    'pi',
    'integral',
    'ordfeminine',
    'ordmasculine',
    'Omega',
    'ae',
    'oslash',
    'questiondown',
    'exclamdown',
    'logicalnot',
    'radical',
    'florin',
    'approxequal',
    'Delta',
    'guillemotleft',
    'guillemotright',
    'ellipsis',
    'nonbreakingspace',
    'Agrave',
    'Atilde',
    'Otilde',
    'OE',
    'oe',
    'endash',
    'emdash',
    'quotedblleft',
    'quotedblright',
    'quoteleft',
    'quoteright',
    'divide',
    'lozenge',
    'ydieresis',
    'Ydieresis',
    'fraction',
    'currency',
    'guilsinglleft',
    'guilsinglright',
    'fi',
    'fl',
    'daggerdbl',
    'periodcentered',
    'quotesinglbase',
    'quotedblbase',
    'perthousand',
    'Acircumflex',
    'Ecircumflex',
    'Aacute',
    'Edieresis',
    'Egrave',
    'Iacute',
    'Icircumflex',
    'Idieresis',
    'Igrave',
    'Oacute',
    'Ocircumflex',
    'apple',
    'Ograve',
    'Uacute',
    'Ucircumflex',
    'Ugrave',
    'dotlessi',
    'circumflex',
    'tilde',
    'macron',
    'breve',
    'dotaccent',
    'ring',
    'cedilla',
    'hungarumlaut',
    'ogonek',
    'caron',
    'Lslash',
    'lslash',
    'Scaron',
    'scaron',
    'Zcaron',
    'zcaron',
    'brokenbar',
    'Eth',
    'eth',
    'Yacute',
    'yacute',
    'Thorn',
    'thorn',
    'minus',
    'multiply',
    'onesuperior',
    'twosuperior',
    'threesuperior',
    'onehalf',
    'onequarter',
    'threequarters',
    'franc',
    'Gbreve',
    'gbreve',
    'Idotaccent',
    'Scedilla',
    'scedilla',
    'Cacute',
    'cacute',
    'Ccaron',
    'ccaron',
    'dcroat'
];
var _class;
let $e1a34a692932ba79$export$2e2bcd8739ae039 = (_class = class $e1a34a692932ba79$export$2e2bcd8739ae039 {
    constructor(id, codePoints, font){
 this.id = id;
 this.codePoints = codePoints;
        this._font = font;
        this.isMark = this.codePoints.length > 0 && this.codePoints.every($747425b437e121da$export$2e2bcd8739ae039.isMark);
        this.isLigature = this.codePoints.length > 1;
    }
    _getPath() {
        return new $af5e1fcddefe17a2$export$2e2bcd8739ae039();
    }
    _getCBox() {
        return this.path.cbox;
    }
    _getBBox() {
        return this.path.bbox;
    }
    _getTableMetrics(table) {
        if (this.id < table.metrics.length) return table.metrics.get(this.id);
        let metric = table.metrics.get(table.metrics.length - 1);
        let res = {
            advance: metric ? metric.advance : 0,
            bearing: table.bearings.get(this.id - table.metrics.length) || 0
        };
        return res;
    }
    _getMetrics(cbox) {
        if (this._metrics) return this._metrics;
        let { advance: advanceWidth , bearing: leftBearing  } = this._getTableMetrics(this._font.hmtx);
        if (this._font.vmtx) var { advance: advanceHeight , bearing: topBearing  } = this._getTableMetrics(this._font.vmtx);
        else {
            let os2;
            if (typeof cbox === 'undefined' || cbox === null) ({ cbox: cbox  } = this);
            if ((os2 = this._font['OS/2']) && os2.version > 0) {
                var advanceHeight = Math.abs(os2.typoAscender - os2.typoDescender);
                var topBearing = os2.typoAscender - cbox.maxY;
            } else {
                let { hhea: hhea  } = this._font;
                var advanceHeight = Math.abs(hhea.ascent - hhea.descent);
                var topBearing = hhea.ascent - cbox.maxY;
            }
        }
        if (this._font._variationProcessor && this._font.HVAR) advanceWidth += this._font._variationProcessor.getAdvanceAdjustment(this.id, this._font.HVAR);
        return this._metrics = {
            advanceWidth: advanceWidth,
            advanceHeight: advanceHeight,
            leftBearing: leftBearing,
            topBearing: topBearing
        };
    }
 get cbox() {
        return this._getCBox();
    }
 get bbox() {
        return this._getBBox();
    }
 get path() {
        return this._getPath();
    }
 getScaledPath(size) {
        let scale = 1 / this._font.unitsPerEm * size;
        return this.path.scale(scale);
    }
 get advanceWidth() {
        return this._getMetrics().advanceWidth;
    }
 get advanceHeight() {
        return this._getMetrics().advanceHeight;
    }
    get ligatureCaretPositions() {}
    _getName() {
        let { post: post  } = this._font;
        if (!post) return null;
        switch(post.version){
            case 1:
                return $c55d37cb83b3ceea$export$2e2bcd8739ae039[this.id];
            case 2:
                let id = post.glyphNameIndex[this.id];
                if (id < $c55d37cb83b3ceea$export$2e2bcd8739ae039.length) return $c55d37cb83b3ceea$export$2e2bcd8739ae039[id];
                return post.names[id - $c55d37cb83b3ceea$export$2e2bcd8739ae039.length];
            case 2.5:
                return $c55d37cb83b3ceea$export$2e2bcd8739ae039[this.id + post.offsets[this.id]];
            case 4:
                return String.fromCharCode(post.map[this.id]);
        }
    }
 get name() {
        return this._getName();
    }
 render(ctx, size) {
        ctx.save();
        let scale = 1 / this._font.head.unitsPerEm * size;
        ctx.scale(scale, scale);
        let fn = this.path.toFunction();
        fn(ctx);
        ctx.fill();
        ctx.restore();
    }
}, _applyDecoratedDescriptor(_class.prototype, "cbox", [
    $df9bc573962369ff$export$69a3209f1a06c04d
], Object.getOwnPropertyDescriptor(_class.prototype, "cbox"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "bbox", [
    $df9bc573962369ff$export$69a3209f1a06c04d
], Object.getOwnPropertyDescriptor(_class.prototype, "bbox"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "path", [
    $df9bc573962369ff$export$69a3209f1a06c04d
], Object.getOwnPropertyDescriptor(_class.prototype, "path"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "advanceWidth", [
    $df9bc573962369ff$export$69a3209f1a06c04d
], Object.getOwnPropertyDescriptor(_class.prototype, "advanceWidth"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "advanceHeight", [
    $df9bc573962369ff$export$69a3209f1a06c04d
], Object.getOwnPropertyDescriptor(_class.prototype, "advanceHeight"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "name", [
    $df9bc573962369ff$export$69a3209f1a06c04d
], Object.getOwnPropertyDescriptor(_class.prototype, "name"), _class.prototype), _class);
let $e20fdd09923e4c19$var$GlyfHeader = new $5OpyM$restructure.Struct({
    numberOfContours: $5OpyM$restructure.int16,
    xMin: $5OpyM$restructure.int16,
    yMin: $5OpyM$restructure.int16,
    xMax: $5OpyM$restructure.int16,
    yMax: $5OpyM$restructure.int16
});
const $e20fdd09923e4c19$var$ON_CURVE = 1;
const $e20fdd09923e4c19$var$X_SHORT_VECTOR = 2;
const $e20fdd09923e4c19$var$Y_SHORT_VECTOR = 4;
const $e20fdd09923e4c19$var$REPEAT = 8;
const $e20fdd09923e4c19$var$SAME_X = 16;
const $e20fdd09923e4c19$var$SAME_Y = 32;
const $e20fdd09923e4c19$var$ARG_1_AND_2_ARE_WORDS = 1;
const $e20fdd09923e4c19$var$WE_HAVE_A_SCALE = 8;
const $e20fdd09923e4c19$var$MORE_COMPONENTS = 32;
const $e20fdd09923e4c19$var$WE_HAVE_AN_X_AND_Y_SCALE = 64;
const $e20fdd09923e4c19$var$WE_HAVE_A_TWO_BY_TWO = 128;
const $e20fdd09923e4c19$var$WE_HAVE_INSTRUCTIONS = 256;
class $e20fdd09923e4c19$export$baf26146a414f24a {
    constructor(onCurve, endContour, x = 0, y = 0){
        this.onCurve = onCurve;
        this.endContour = endContour;
        this.x = x;
        this.y = y;
    }
    copy() {
        return new $e20fdd09923e4c19$export$baf26146a414f24a(this.onCurve, this.endContour, this.x, this.y);
    }
}
class $e20fdd09923e4c19$var$Component {
    constructor(glyphID, dx, dy){
        this.glyphID = glyphID;
        this.dx = dx;
        this.dy = dy;
        this.pos = 0;
        this.scaleX = this.scaleY = 1;
        this.scale01 = this.scale10 = 0;
    }
}
class $e20fdd09923e4c19$export$2e2bcd8739ae039 extends $e1a34a692932ba79$export$2e2bcd8739ae039 {
    type = 'TTF';
    _getCBox(internal) {
        if (this._font._variationProcessor && !internal) return this.path.cbox;
        let stream = this._font._getTableStream('glyf');
        stream.pos += this._font.loca.offsets[this.id];
        let glyph = $e20fdd09923e4c19$var$GlyfHeader.decode(stream);
        let cbox = new $fcb46e14b01ea01f$export$2e2bcd8739ae039(glyph.xMin, glyph.yMin, glyph.xMax, glyph.yMax);
        return Object.freeze(cbox);
    }
    _parseGlyphCoord(stream, prev, short, same) {
        if (short) {
            var val = stream.readUInt8();
            if (!same) val = -val;
            val += prev;
        } else if (same) var val = prev;
        else var val = prev + stream.readInt16BE();
        return val;
    }
    _decode() {
        let glyfPos = this._font.loca.offsets[this.id];
        let nextPos = this._font.loca.offsets[this.id + 1];
        if (glyfPos === nextPos) return null;
        let stream = this._font._getTableStream('glyf');
        stream.pos += glyfPos;
        let startPos = stream.pos;
        let glyph = $e20fdd09923e4c19$var$GlyfHeader.decode(stream);
        if (glyph.numberOfContours > 0) this._decodeSimple(glyph, stream);
        else if (glyph.numberOfContours < 0) this._decodeComposite(glyph, stream, startPos);
        return glyph;
    }
    _decodeSimple(glyph, stream) {
        glyph.points = [];
        let endPtsOfContours = new $5OpyM$restructure.Array($5OpyM$restructure.uint16, glyph.numberOfContours).decode(stream);
        glyph.instructions = new $5OpyM$restructure.Array($5OpyM$restructure.uint8, $5OpyM$restructure.uint16).decode(stream);
        let flags = [];
        let numCoords = endPtsOfContours[endPtsOfContours.length - 1] + 1;
        while(flags.length < numCoords){
            var flag = stream.readUInt8();
            flags.push(flag);
            if (flag & $e20fdd09923e4c19$var$REPEAT) {
                let count = stream.readUInt8();
                for(let j = 0; j < count; j++)flags.push(flag);
            }
        }
        for(var i = 0; i < flags.length; i++){
            var flag = flags[i];
            let point = new $e20fdd09923e4c19$export$baf26146a414f24a(!!(flag & $e20fdd09923e4c19$var$ON_CURVE), endPtsOfContours.indexOf(i) >= 0, 0, 0);
            glyph.points.push(point);
        }
        let px = 0;
        for(var i = 0; i < flags.length; i++){
            var flag = flags[i];
            glyph.points[i].x = px = this._parseGlyphCoord(stream, px, flag & $e20fdd09923e4c19$var$X_SHORT_VECTOR, flag & $e20fdd09923e4c19$var$SAME_X);
        }
        let py = 0;
        for(var i = 0; i < flags.length; i++){
            var flag = flags[i];
            glyph.points[i].y = py = this._parseGlyphCoord(stream, py, flag & $e20fdd09923e4c19$var$Y_SHORT_VECTOR, flag & $e20fdd09923e4c19$var$SAME_Y);
        }
        if (this._font._variationProcessor) {
            let points = glyph.points.slice();
            points.push(...this._getPhantomPoints(glyph));
            this._font._variationProcessor.transformPoints(this.id, points);
            glyph.phantomPoints = points.slice(-4);
        }
        return;
    }
    _decodeComposite(glyph, stream, offset = 0) {
        glyph.components = [];
        let haveInstructions = false;
        let flags = $e20fdd09923e4c19$var$MORE_COMPONENTS;
        while(flags & $e20fdd09923e4c19$var$MORE_COMPONENTS){
            flags = stream.readUInt16BE();
            let gPos = stream.pos - offset;
            let glyphID = stream.readUInt16BE();
            if (!haveInstructions) haveInstructions = (flags & $e20fdd09923e4c19$var$WE_HAVE_INSTRUCTIONS) !== 0;
            if (flags & $e20fdd09923e4c19$var$ARG_1_AND_2_ARE_WORDS) {
                var dx = stream.readInt16BE();
                var dy = stream.readInt16BE();
            } else {
                var dx = stream.readInt8();
                var dy = stream.readInt8();
            }
            var component = new $e20fdd09923e4c19$var$Component(glyphID, dx, dy);
            component.pos = gPos;
            if (flags & $e20fdd09923e4c19$var$WE_HAVE_A_SCALE)
            component.scaleX = component.scaleY = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;
            else if (flags & $e20fdd09923e4c19$var$WE_HAVE_AN_X_AND_Y_SCALE) {
                component.scaleX = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;
                component.scaleY = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;
            } else if (flags & $e20fdd09923e4c19$var$WE_HAVE_A_TWO_BY_TWO) {
                component.scaleX = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;
                component.scale01 = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;
                component.scale10 = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;
                component.scaleY = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;
            }
            glyph.components.push(component);
        }
        if (this._font._variationProcessor) {
            let points = [];
            for(let j = 0; j < glyph.components.length; j++){
                var component = glyph.components[j];
                points.push(new $e20fdd09923e4c19$export$baf26146a414f24a(true, true, component.dx, component.dy));
            }
            points.push(...this._getPhantomPoints(glyph));
            this._font._variationProcessor.transformPoints(this.id, points);
            glyph.phantomPoints = points.splice(-4, 4);
            for(let i = 0; i < points.length; i++){
                let point = points[i];
                glyph.components[i].dx = point.x;
                glyph.components[i].dy = point.y;
            }
        }
        return haveInstructions;
    }
    _getPhantomPoints(glyph) {
        let cbox = this._getCBox(true);
        if (this._metrics == null) this._metrics = $e1a34a692932ba79$export$2e2bcd8739ae039.prototype._getMetrics.call(this, cbox);
        let { advanceWidth: advanceWidth , advanceHeight: advanceHeight , leftBearing: leftBearing , topBearing: topBearing  } = this._metrics;
        return [
            new $e20fdd09923e4c19$export$baf26146a414f24a(false, true, glyph.xMin - leftBearing, 0),
            new $e20fdd09923e4c19$export$baf26146a414f24a(false, true, glyph.xMin - leftBearing + advanceWidth, 0),
            new $e20fdd09923e4c19$export$baf26146a414f24a(false, true, 0, glyph.yMax + topBearing),
            new $e20fdd09923e4c19$export$baf26146a414f24a(false, true, 0, glyph.yMax + topBearing + advanceHeight)
        ];
    }
    _getContours() {
        let glyph = this._decode();
        if (!glyph) return [];
        let points = [];
        if (glyph.numberOfContours < 0)
        for (let component of glyph.components){
            let contours = this._font.getGlyph(component.glyphID)._getContours();
            for(let i = 0; i < contours.length; i++){
                let contour = contours[i];
                for(let j = 0; j < contour.length; j++){
                    let point = contour[j];
                    let x = point.x * component.scaleX + point.y * component.scale01 + component.dx;
                    let y = point.y * component.scaleY + point.x * component.scale10 + component.dy;
                    points.push(new $e20fdd09923e4c19$export$baf26146a414f24a(point.onCurve, point.endContour, x, y));
                }
            }
        }
        else points = glyph.points || [];
        if (glyph.phantomPoints && !this._font.directory.tables.HVAR) {
            this._metrics.advanceWidth = glyph.phantomPoints[1].x - glyph.phantomPoints[0].x;
            this._metrics.advanceHeight = glyph.phantomPoints[3].y - glyph.phantomPoints[2].y;
            this._metrics.leftBearing = glyph.xMin - glyph.phantomPoints[0].x;
            this._metrics.topBearing = glyph.phantomPoints[2].y - glyph.yMax;
        }
        let contours = [];
        let cur = [];
        for(let k = 0; k < points.length; k++){
            var point = points[k];
            cur.push(point);
            if (point.endContour) {
                contours.push(cur);
                cur = [];
            }
        }
        return contours;
    }
    _getMetrics() {
        if (this._metrics) return this._metrics;
        let cbox = this._getCBox(true);
        super._getMetrics(cbox);
        if (this._font._variationProcessor && !this._font.HVAR)
        this.path;
        return this._metrics;
    }
    _getPath() {
        let contours = this._getContours();
        let path = new $af5e1fcddefe17a2$export$2e2bcd8739ae039;
        for(let i = 0; i < contours.length; i++){
            let contour = contours[i];
            let firstPt = contour[0];
            let lastPt = contour[contour.length - 1];
            let start = 0;
            if (firstPt.onCurve) {
                var curvePt = null;
                start = 1;
            } else {
                if (lastPt.onCurve)
                firstPt = lastPt;
                else
                firstPt = new $e20fdd09923e4c19$export$baf26146a414f24a(false, false, (firstPt.x + lastPt.x) / 2, (firstPt.y + lastPt.y) / 2);
                var curvePt = firstPt;
            }
            path.moveTo(firstPt.x, firstPt.y);
            for(let j = start; j < contour.length; j++){
                let pt = contour[j];
                let prevPt = j === 0 ? firstPt : contour[j - 1];
                if (prevPt.onCurve && pt.onCurve) path.lineTo(pt.x, pt.y);
                else if (prevPt.onCurve && !pt.onCurve) var curvePt = pt;
                else if (!prevPt.onCurve && !pt.onCurve) {
                    let midX = (prevPt.x + pt.x) / 2;
                    let midY = (prevPt.y + pt.y) / 2;
                    path.quadraticCurveTo(prevPt.x, prevPt.y, midX, midY);
                    var curvePt = pt;
                } else if (!prevPt.onCurve && pt.onCurve) {
                    path.quadraticCurveTo(curvePt.x, curvePt.y, pt.x, pt.y);
                    var curvePt = null;
                } else throw new Error("Unknown TTF path state");
            }
            if (curvePt) path.quadraticCurveTo(curvePt.x, curvePt.y, firstPt.x, firstPt.y);
            path.closePath();
        }
        return path;
    }
}
class $efcf21464e1e0f88$export$2e2bcd8739ae039 extends $e1a34a692932ba79$export$2e2bcd8739ae039 {
    type = 'CFF';
    _getName() {
        if (this._font.CFF2) return super._getName();
        return this._font['CFF '].getGlyphName(this.id);
    }
    bias(s) {
        if (s.length < 1240) return 107;
        else if (s.length < 33900) return 1131;
        else return 32768;
    }
    _getPath() {
        let cff = this._font.CFF2 || this._font['CFF '];
        let { stream: stream  } = cff;
        let str = cff.topDict.CharStrings[this.id];
        let end = str.offset + str.length;
        stream.pos = str.offset;
        let path = new $af5e1fcddefe17a2$export$2e2bcd8739ae039;
        let stack = [];
        let trans = [];
        let width = null;
        let nStems = 0;
        let x1 = 0, y1 = 0;
        let usedGsubrs;
        let usedSubrs;
        let open = false;
        this._usedGsubrs = usedGsubrs = {};
        this._usedSubrs = usedSubrs = {};
        let gsubrs = cff.globalSubrIndex || [];
        let gsubrsBias = this.bias(gsubrs);
        let privateDict = cff.privateDictForGlyph(this.id) || {};
        let subrs = privateDict.Subrs || [];
        let subrsBias = this.bias(subrs);
        let vstore = cff.topDict.vstore && cff.topDict.vstore.itemVariationStore;
        let vsindex = privateDict.vsindex;
        let variationProcessor = this._font._variationProcessor;
        function checkWidth() {
            if (width == null) width = stack.shift() + privateDict.nominalWidthX;
        }
        function parseStems() {
            if (stack.length % 2 !== 0) checkWidth();
            nStems += stack.length >> 1;
            return stack.length = 0;
        }
        function moveTo(x, y) {
            if (open) path.closePath();
            path.moveTo(x, y);
            open = true;
        }
        let parse = function() {
            while(stream.pos < end){
                let op = stream.readUInt8();
                if (op < 32) {
                    let index, subr, phase;
                    switch(op){
                        case 1:
                        case 3:
                        case 18:
                        case 23:
                            parseStems();
                            break;
                        case 4:
                            if (stack.length > 1) checkWidth();
                            y1 += stack.shift();
                            moveTo(x1, y1);
                            break;
                        case 5:
                            while(stack.length >= 2){
                                x1 += stack.shift();
                                y1 += stack.shift();
                                path.lineTo(x1, y1);
                            }
                            break;
                        case 6:
                        case 7:
                            phase = op === 6;
                            while(stack.length >= 1){
                                if (phase) x1 += stack.shift();
                                else y1 += stack.shift();
                                path.lineTo(x1, y1);
                                phase = !phase;
                            }
                            break;
                        case 8:
                            while(stack.length > 0){
                                var c1x = x1 + stack.shift();
                                var c1y = y1 + stack.shift();
                                var c2x = c1x + stack.shift();
                                var c2y = c1y + stack.shift();
                                x1 = c2x + stack.shift();
                                y1 = c2y + stack.shift();
                                path.bezierCurveTo(c1x, c1y, c2x, c2y, x1, y1);
                            }
                            break;
                        case 10:
                            index = stack.pop() + subrsBias;
                            subr = subrs[index];
                            if (subr) {
                                usedSubrs[index] = true;
                                var p = stream.pos;
                                var e = end;
                                stream.pos = subr.offset;
                                end = subr.offset + subr.length;
                                parse();
                                stream.pos = p;
                                end = e;
                            }
                            break;
                        case 11:
                            if (cff.version >= 2) break;
                            return;
                        case 14:
                            if (cff.version >= 2) break;
                            if (stack.length > 0) checkWidth();
                            if (open) {
                                path.closePath();
                                open = false;
                            }
                            break;
                        case 15:
                            if (cff.version < 2) throw new Error('vsindex operator not supported in CFF v1');
                            vsindex = stack.pop();
                            break;
                        case 16:
                            {
                                if (cff.version < 2) throw new Error('blend operator not supported in CFF v1');
                                if (!variationProcessor) throw new Error('blend operator in non-variation font');
                                let blendVector = variationProcessor.getBlendVector(vstore, vsindex);
                                let numBlends = stack.pop();
                                let numOperands = numBlends * blendVector.length;
                                let delta = stack.length - numOperands;
                                let base = delta - numBlends;
                                for(let i = 0; i < numBlends; i++){
                                    let sum = stack[base + i];
                                    for(let j = 0; j < blendVector.length; j++)sum += blendVector[j] * stack[delta++];
                                    stack[base + i] = sum;
                                }
                                while(numOperands--)stack.pop();
                                break;
                            }
                        case 19:
                        case 20:
                            parseStems();
                            stream.pos += nStems + 7 >> 3;
                            break;
                        case 21:
                            if (stack.length > 2) checkWidth();
                            x1 += stack.shift();
                            y1 += stack.shift();
                            moveTo(x1, y1);
                            break;
                        case 22:
                            if (stack.length > 1) checkWidth();
                            x1 += stack.shift();
                            moveTo(x1, y1);
                            break;
                        case 24:
                            while(stack.length >= 8){
                                var c1x = x1 + stack.shift();
                                var c1y = y1 + stack.shift();
                                var c2x = c1x + stack.shift();
                                var c2y = c1y + stack.shift();
                                x1 = c2x + stack.shift();
                                y1 = c2y + stack.shift();
                                path.bezierCurveTo(c1x, c1y, c2x, c2y, x1, y1);
                            }
                            x1 += stack.shift();
                            y1 += stack.shift();
                            path.lineTo(x1, y1);
                            break;
                        case 25:
                            while(stack.length >= 8){
                                x1 += stack.shift();
                                y1 += stack.shift();
                                path.lineTo(x1, y1);
                            }
                            var c1x = x1 + stack.shift();
                            var c1y = y1 + stack.shift();
                            var c2x = c1x + stack.shift();
                            var c2y = c1y + stack.shift();
                            x1 = c2x + stack.shift();
                            y1 = c2y + stack.shift();
                            path.bezierCurveTo(c1x, c1y, c2x, c2y, x1, y1);
                            break;
                        case 26:
                            if (stack.length % 2) x1 += stack.shift();
                            while(stack.length >= 4){
                                c1x = x1;
                                c1y = y1 + stack.shift();
                                c2x = c1x + stack.shift();
                                c2y = c1y + stack.shift();
                                x1 = c2x;
                                y1 = c2y + stack.shift();
                                path.bezierCurveTo(c1x, c1y, c2x, c2y, x1, y1);
                            }
                            break;
                        case 27:
                            if (stack.length % 2) y1 += stack.shift();
                            while(stack.length >= 4){
                                c1x = x1 + stack.shift();
                                c1y = y1;
                                c2x = c1x + stack.shift();
                                c2y = c1y + stack.shift();
                                x1 = c2x + stack.shift();
                                y1 = c2y;
                                path.bezierCurveTo(c1x, c1y, c2x, c2y, x1, y1);
                            }
                            break;
                        case 28:
                            stack.push(stream.readInt16BE());
                            break;
                        case 29:
                            index = stack.pop() + gsubrsBias;
                            subr = gsubrs[index];
                            if (subr) {
                                usedGsubrs[index] = true;
                                var p = stream.pos;
                                var e = end;
                                stream.pos = subr.offset;
                                end = subr.offset + subr.length;
                                parse();
                                stream.pos = p;
                                end = e;
                            }
                            break;
                        case 30:
                        case 31:
                            phase = op === 31;
                            while(stack.length >= 4){
                                if (phase) {
                                    c1x = x1 + stack.shift();
                                    c1y = y1;
                                    c2x = c1x + stack.shift();
                                    c2y = c1y + stack.shift();
                                    y1 = c2y + stack.shift();
                                    x1 = c2x + (stack.length === 1 ? stack.shift() : 0);
                                } else {
                                    c1x = x1;
                                    c1y = y1 + stack.shift();
                                    c2x = c1x + stack.shift();
                                    c2y = c1y + stack.shift();
                                    x1 = c2x + stack.shift();
                                    y1 = c2y + (stack.length === 1 ? stack.shift() : 0);
                                }
                                path.bezierCurveTo(c1x, c1y, c2x, c2y, x1, y1);
                                phase = !phase;
                            }
                            break;
                        case 12:
                            op = stream.readUInt8();
                            switch(op){
                                case 3:
                                    let a = stack.pop();
                                    let b = stack.pop();
                                    stack.push(a && b ? 1 : 0);
                                    break;
                                case 4:
                                    a = stack.pop();
                                    b = stack.pop();
                                    stack.push(a || b ? 1 : 0);
                                    break;
                                case 5:
                                    a = stack.pop();
                                    stack.push(a ? 0 : 1);
                                    break;
                                case 9:
                                    a = stack.pop();
                                    stack.push(Math.abs(a));
                                    break;
                                case 10:
                                    a = stack.pop();
                                    b = stack.pop();
                                    stack.push(a + b);
                                    break;
                                case 11:
                                    a = stack.pop();
                                    b = stack.pop();
                                    stack.push(a - b);
                                    break;
                                case 12:
                                    a = stack.pop();
                                    b = stack.pop();
                                    stack.push(a / b);
                                    break;
                                case 14:
                                    a = stack.pop();
                                    stack.push(-a);
                                    break;
                                case 15:
                                    a = stack.pop();
                                    b = stack.pop();
                                    stack.push(a === b ? 1 : 0);
                                    break;
                                case 18:
                                    stack.pop();
                                    break;
                                case 20:
                                    let val = stack.pop();
                                    let idx = stack.pop();
                                    trans[idx] = val;
                                    break;
                                case 21:
                                    idx = stack.pop();
                                    stack.push(trans[idx] || 0);
                                    break;
                                case 22:
                                    let s1 = stack.pop();
                                    let s2 = stack.pop();
                                    let v1 = stack.pop();
                                    let v2 = stack.pop();
                                    stack.push(v1 <= v2 ? s1 : s2);
                                    break;
                                case 23:
                                    stack.push(Math.random());
                                    break;
                                case 24:
                                    a = stack.pop();
                                    b = stack.pop();
                                    stack.push(a * b);
                                    break;
                                case 26:
                                    a = stack.pop();
                                    stack.push(Math.sqrt(a));
                                    break;
                                case 27:
                                    a = stack.pop();
                                    stack.push(a, a);
                                    break;
                                case 28:
                                    a = stack.pop();
                                    b = stack.pop();
                                    stack.push(b, a);
                                    break;
                                case 29:
                                    idx = stack.pop();
                                    if (idx < 0) idx = 0;
                                    else if (idx > stack.length - 1) idx = stack.length - 1;
                                    stack.push(stack[idx]);
                                    break;
                                case 30:
                                    let n = stack.pop();
                                    let j = stack.pop();
                                    if (j >= 0) while(j > 0){
                                        var t = stack[n - 1];
                                        for(let i = n - 2; i >= 0; i--)stack[i + 1] = stack[i];
                                        stack[0] = t;
                                        j--;
                                    }
                                    else while(j < 0){
                                        var t = stack[0];
                                        for(let i = 0; i <= n; i++)stack[i] = stack[i + 1];
                                        stack[n - 1] = t;
                                        j++;
                                    }
                                    break;
                                case 34:
                                    c1x = x1 + stack.shift();
                                    c1y = y1;
                                    c2x = c1x + stack.shift();
                                    c2y = c1y + stack.shift();
                                    let c3x = c2x + stack.shift();
                                    let c3y = c2y;
                                    let c4x = c3x + stack.shift();
                                    let c4y = c3y;
                                    let c5x = c4x + stack.shift();
                                    let c5y = c4y;
                                    let c6x = c5x + stack.shift();
                                    let c6y = c5y;
                                    x1 = c6x;
                                    y1 = c6y;
                                    path.bezierCurveTo(c1x, c1y, c2x, c2y, c3x, c3y);
                                    path.bezierCurveTo(c4x, c4y, c5x, c5y, c6x, c6y);
                                    break;
                                case 35:
                                    let pts = [];
                                    for(let i = 0; i <= 5; i++){
                                        x1 += stack.shift();
                                        y1 += stack.shift();
                                        pts.push(x1, y1);
                                    }
                                    path.bezierCurveTo(...pts.slice(0, 6));
                                    path.bezierCurveTo(...pts.slice(6));
                                    stack.shift();
                                    break;
                                case 36:
                                    c1x = x1 + stack.shift();
                                    c1y = y1 + stack.shift();
                                    c2x = c1x + stack.shift();
                                    c2y = c1y + stack.shift();
                                    c3x = c2x + stack.shift();
                                    c3y = c2y;
                                    c4x = c3x + stack.shift();
                                    c4y = c3y;
                                    c5x = c4x + stack.shift();
                                    c5y = c4y + stack.shift();
                                    c6x = c5x + stack.shift();
                                    c6y = c5y;
                                    x1 = c6x;
                                    y1 = c6y;
                                    path.bezierCurveTo(c1x, c1y, c2x, c2y, c3x, c3y);
                                    path.bezierCurveTo(c4x, c4y, c5x, c5y, c6x, c6y);
                                    break;
                                case 37:
                                    let startx = x1;
                                    let starty = y1;
                                    pts = [];
                                    for(let i1 = 0; i1 <= 4; i1++){
                                        x1 += stack.shift();
                                        y1 += stack.shift();
                                        pts.push(x1, y1);
                                    }
                                    if (Math.abs(x1 - startx) > Math.abs(y1 - starty)) {
                                        x1 += stack.shift();
                                        y1 = starty;
                                    } else {
                                        x1 = startx;
                                        y1 += stack.shift();
                                    }
                                    pts.push(x1, y1);
                                    path.bezierCurveTo(...pts.slice(0, 6));
                                    path.bezierCurveTo(...pts.slice(6));
                                    break;
                                default:
                                    throw new Error(`Unknown op: 12 ${op}`);
                            }
                            break;
                        default:
                            throw new Error(`Unknown op: ${op}`);
                    }
                } else if (op < 247) stack.push(op - 139);
                else if (op < 251) {
                    var b1 = stream.readUInt8();
                    stack.push((op - 247) * 256 + b1 + 108);
                } else if (op < 255) {
                    var b1 = stream.readUInt8();
                    stack.push(-(op - 251) * 256 - b1 - 108);
                } else stack.push(stream.readInt32BE() / 65536);
            }
        };
        parse();
        if (open) path.closePath();
        return path;
    }
}
let $df50792647a3d5cf$var$SBIXImage = new $5OpyM$restructure.Struct({
    originX: $5OpyM$restructure.uint16,
    originY: $5OpyM$restructure.uint16,
    type: new $5OpyM$restructure.String(4),
    data: new $5OpyM$restructure.Buffer((t)=>t.parent.buflen - t._currentOffset
    )
});
class $df50792647a3d5cf$export$2e2bcd8739ae039 extends $e20fdd09923e4c19$export$2e2bcd8739ae039 {
    type = 'SBIX';
 getImageForSize(size) {
        for(let i = 0; i < this._font.sbix.imageTables.length; i++){
            var table = this._font.sbix.imageTables[i];
            if (table.ppem >= size) break;
        }
        let offsets = table.imageOffsets;
        let start = offsets[this.id];
        let end = offsets[this.id + 1];
        if (start === end) return null;
        this._font.stream.pos = start;
        return $df50792647a3d5cf$var$SBIXImage.decode(this._font.stream, {
            buflen: end - start
        });
    }
    render(ctx, size) {
        let img = this.getImageForSize(size);
        if (img != null) {
            let scale = size / this._font.unitsPerEm;
            ctx.image(img.data, {
                height: size,
                x: img.originX,
                y: (this.bbox.minY - img.originY) * scale
            });
        }
        if (this._font.sbix.flags.renderOutlines) super.render(ctx, size);
    }
}
class $729b375ce67e8a00$var$COLRLayer {
    constructor(glyph, color){
        this.glyph = glyph;
        this.color = color;
    }
}
class $729b375ce67e8a00$export$2e2bcd8739ae039 extends $e1a34a692932ba79$export$2e2bcd8739ae039 {
    type = 'COLR';
    _getBBox() {
        let bbox = new $fcb46e14b01ea01f$export$2e2bcd8739ae039;
        for(let i = 0; i < this.layers.length; i++){
            let layer = this.layers[i];
            let b = layer.glyph.bbox;
            bbox.addPoint(b.minX, b.minY);
            bbox.addPoint(b.maxX, b.maxY);
        }
        return bbox;
    }
 get layers() {
        let cpal = this._font.CPAL;
        let colr = this._font.COLR;
        let low = 0;
        let high = colr.baseGlyphRecord.length - 1;
        while(low <= high){
            let mid = low + high >> 1;
            var rec = colr.baseGlyphRecord[mid];
            if (this.id < rec.gid) high = mid - 1;
            else if (this.id > rec.gid) low = mid + 1;
            else {
                var baseLayer = rec;
                break;
            }
        }
        if (baseLayer == null) {
            var g = this._font._getBaseGlyph(this.id);
            var color = {
                red: 0,
                green: 0,
                blue: 0,
                alpha: 255
            };
            return [
                new $729b375ce67e8a00$var$COLRLayer(g, color)
            ];
        }
        let layers = [];
        for(let i = baseLayer.firstLayerIndex; i < baseLayer.firstLayerIndex + baseLayer.numLayers; i++){
            var rec = colr.layerRecords[i];
            var color = cpal.colorRecords[rec.paletteIndex];
            var g = this._font._getBaseGlyph(rec.gid);
            layers.push(new $729b375ce67e8a00$var$COLRLayer(g, color));
        }
        return layers;
    }
    render(ctx, size) {
        for (let { glyph: glyph , color: color  } of this.layers){
            ctx.fillColor([
                color.red,
                color.green,
                color.blue
            ], color.alpha / 255 * 100);
            glyph.render(ctx, size);
        }
        return;
    }
}
const $62b2d77b45b438f3$var$TUPLES_SHARE_POINT_NUMBERS = 0x8000;
const $62b2d77b45b438f3$var$TUPLE_COUNT_MASK = 0x0fff;
const $62b2d77b45b438f3$var$EMBEDDED_TUPLE_COORD = 0x8000;
const $62b2d77b45b438f3$var$INTERMEDIATE_TUPLE = 0x4000;
const $62b2d77b45b438f3$var$PRIVATE_POINT_NUMBERS = 0x2000;
const $62b2d77b45b438f3$var$TUPLE_INDEX_MASK = 0x0fff;
const $62b2d77b45b438f3$var$POINTS_ARE_WORDS = 0x80;
const $62b2d77b45b438f3$var$POINT_RUN_COUNT_MASK = 0x7f;
const $62b2d77b45b438f3$var$DELTAS_ARE_ZERO = 0x80;
const $62b2d77b45b438f3$var$DELTAS_ARE_WORDS = 0x40;
const $62b2d77b45b438f3$var$DELTA_RUN_COUNT_MASK = 0x3f;
class $62b2d77b45b438f3$export$2e2bcd8739ae039 {
    constructor(font, coords){
        this.font = font;
        this.normalizedCoords = this.normalizeCoords(coords);
        this.blendVectors = new Map;
    }
    normalizeCoords(coords) {
        let normalized = [];
        for(var i = 0; i < this.font.fvar.axis.length; i++){
            let axis = this.font.fvar.axis[i];
            if (coords[i] < axis.defaultValue) normalized.push((coords[i] - axis.defaultValue + Number.EPSILON) / (axis.defaultValue - axis.minValue + Number.EPSILON));
            else normalized.push((coords[i] - axis.defaultValue + Number.EPSILON) / (axis.maxValue - axis.defaultValue + Number.EPSILON));
        }
        if (this.font.avar) for(var i = 0; i < this.font.avar.segment.length; i++){
            let segment = this.font.avar.segment[i];
            for(let j = 0; j < segment.correspondence.length; j++){
                let pair = segment.correspondence[j];
                if (j >= 1 && normalized[i] < pair.fromCoord) {
                    let prev = segment.correspondence[j - 1];
                    normalized[i] = ((normalized[i] - prev.fromCoord) * (pair.toCoord - prev.toCoord) + Number.EPSILON) / (pair.fromCoord - prev.fromCoord + Number.EPSILON) + prev.toCoord;
                    break;
                }
            }
        }
        return normalized;
    }
    transformPoints(gid, glyphPoints) {
        if (!this.font.fvar || !this.font.gvar) return;
        let { gvar: gvar  } = this.font;
        if (gid >= gvar.glyphCount) return;
        let offset = gvar.offsets[gid];
        if (offset === gvar.offsets[gid + 1]) return;
        let { stream: stream  } = this.font;
        stream.pos = offset;
        if (stream.pos >= stream.length) return;
        let tupleCount = stream.readUInt16BE();
        let offsetToData = offset + stream.readUInt16BE();
        if (tupleCount & $62b2d77b45b438f3$var$TUPLES_SHARE_POINT_NUMBERS) {
            var here = stream.pos;
            stream.pos = offsetToData;
            var sharedPoints = this.decodePoints();
            offsetToData = stream.pos;
            stream.pos = here;
        }
        let origPoints = glyphPoints.map((pt)=>pt.copy()
        );
        tupleCount &= $62b2d77b45b438f3$var$TUPLE_COUNT_MASK;
        for(let i = 0; i < tupleCount; i++){
            let tupleDataSize = stream.readUInt16BE();
            let tupleIndex = stream.readUInt16BE();
            if (tupleIndex & $62b2d77b45b438f3$var$EMBEDDED_TUPLE_COORD) {
                var tupleCoords = [];
                for(let a = 0; a < gvar.axisCount; a++)tupleCoords.push(stream.readInt16BE() / 16384);
            } else {
                if ((tupleIndex & $62b2d77b45b438f3$var$TUPLE_INDEX_MASK) >= gvar.globalCoordCount) throw new Error('Invalid gvar table');
                var tupleCoords = gvar.globalCoords[tupleIndex & $62b2d77b45b438f3$var$TUPLE_INDEX_MASK];
            }
            if (tupleIndex & $62b2d77b45b438f3$var$INTERMEDIATE_TUPLE) {
                var startCoords = [];
                for(let a = 0; a < gvar.axisCount; a++)startCoords.push(stream.readInt16BE() / 16384);
                var endCoords = [];
                for(let a1 = 0; a1 < gvar.axisCount; a1++)endCoords.push(stream.readInt16BE() / 16384);
            }
            let factor = this.tupleFactor(tupleIndex, tupleCoords, startCoords, endCoords);
            if (factor === 0) {
                offsetToData += tupleDataSize;
                continue;
            }
            var here = stream.pos;
            stream.pos = offsetToData;
            if (tupleIndex & $62b2d77b45b438f3$var$PRIVATE_POINT_NUMBERS) var points = this.decodePoints();
            else var points = sharedPoints;
            let nPoints = points.length === 0 ? glyphPoints.length : points.length;
            let xDeltas = this.decodeDeltas(nPoints);
            let yDeltas = this.decodeDeltas(nPoints);
            if (points.length === 0) for(let i = 0; i < glyphPoints.length; i++){
                var point = glyphPoints[i];
                point.x += Math.round(xDeltas[i] * factor);
                point.y += Math.round(yDeltas[i] * factor);
            }
            else {
                let outPoints = origPoints.map((pt)=>pt.copy()
                );
                let hasDelta = glyphPoints.map(()=>false
                );
                for(let i = 0; i < points.length; i++){
                    let idx = points[i];
                    if (idx < glyphPoints.length) {
                        let point = outPoints[idx];
                        hasDelta[idx] = true;
                        point.x += Math.round(xDeltas[i] * factor);
                        point.y += Math.round(yDeltas[i] * factor);
                    }
                }
                this.interpolateMissingDeltas(outPoints, origPoints, hasDelta);
                for(let i1 = 0; i1 < glyphPoints.length; i1++){
                    let deltaX = outPoints[i1].x - origPoints[i1].x;
                    let deltaY = outPoints[i1].y - origPoints[i1].y;
                    glyphPoints[i1].x += deltaX;
                    glyphPoints[i1].y += deltaY;
                }
            }
            offsetToData += tupleDataSize;
            stream.pos = here;
        }
    }
    decodePoints() {
        let stream = this.font.stream;
        let count = stream.readUInt8();
        if (count & $62b2d77b45b438f3$var$POINTS_ARE_WORDS) count = (count & $62b2d77b45b438f3$var$POINT_RUN_COUNT_MASK) << 8 | stream.readUInt8();
        let points = new Uint16Array(count);
        let i = 0;
        let point = 0;
        while(i < count){
            let run = stream.readUInt8();
            let runCount = (run & $62b2d77b45b438f3$var$POINT_RUN_COUNT_MASK) + 1;
            let fn = run & $62b2d77b45b438f3$var$POINTS_ARE_WORDS ? stream.readUInt16 : stream.readUInt8;
            for(let j = 0; j < runCount && i < count; j++){
                point += fn.call(stream);
                points[i++] = point;
            }
        }
        return points;
    }
    decodeDeltas(count) {
        let stream = this.font.stream;
        let i = 0;
        let deltas = new Int16Array(count);
        while(i < count){
            let run = stream.readUInt8();
            let runCount = (run & $62b2d77b45b438f3$var$DELTA_RUN_COUNT_MASK) + 1;
            if (run & $62b2d77b45b438f3$var$DELTAS_ARE_ZERO) i += runCount;
            else {
                let fn = run & $62b2d77b45b438f3$var$DELTAS_ARE_WORDS ? stream.readInt16BE : stream.readInt8;
                for(let j = 0; j < runCount && i < count; j++)deltas[i++] = fn.call(stream);
            }
        }
        return deltas;
    }
    tupleFactor(tupleIndex, tupleCoords, startCoords, endCoords) {
        let normalized = this.normalizedCoords;
        let { gvar: gvar  } = this.font;
        let factor = 1;
        for(let i = 0; i < gvar.axisCount; i++){
            if (tupleCoords[i] === 0) continue;
            if (normalized[i] === 0) return 0;
            if ((tupleIndex & $62b2d77b45b438f3$var$INTERMEDIATE_TUPLE) === 0) {
                if (normalized[i] < Math.min(0, tupleCoords[i]) || normalized[i] > Math.max(0, tupleCoords[i])) return 0;
                factor = (factor * normalized[i] + Number.EPSILON) / (tupleCoords[i] + Number.EPSILON);
            } else {
                if (normalized[i] < startCoords[i] || normalized[i] > endCoords[i]) return 0;
                else if (normalized[i] < tupleCoords[i]) factor = factor * (normalized[i] - startCoords[i] + Number.EPSILON) / (tupleCoords[i] - startCoords[i] + Number.EPSILON);
                else factor = factor * (endCoords[i] - normalized[i] + Number.EPSILON) / (endCoords[i] - tupleCoords[i] + Number.EPSILON);
            }
        }
        return factor;
    }
    interpolateMissingDeltas(points, inPoints, hasDelta) {
        if (points.length === 0) return;
        let point = 0;
        while(point < points.length){
            let firstPoint = point;
            let endPoint = point;
            let pt = points[endPoint];
            while(!pt.endContour)pt = points[++endPoint];
            while(point <= endPoint && !hasDelta[point])point++;
            if (point > endPoint) continue;
            let firstDelta = point;
            let curDelta = point;
            point++;
            while(point <= endPoint){
                if (hasDelta[point]) {
                    this.deltaInterpolate(curDelta + 1, point - 1, curDelta, point, inPoints, points);
                    curDelta = point;
                }
                point++;
            }
            if (curDelta === firstDelta) this.deltaShift(firstPoint, endPoint, curDelta, inPoints, points);
            else {
                this.deltaInterpolate(curDelta + 1, endPoint, curDelta, firstDelta, inPoints, points);
                if (firstDelta > 0) this.deltaInterpolate(firstPoint, firstDelta - 1, curDelta, firstDelta, inPoints, points);
            }
            point = endPoint + 1;
        }
    }
    deltaInterpolate(p1, p2, ref1, ref2, inPoints, outPoints) {
        if (p1 > p2) return;
        let iterable = [
            'x',
            'y'
        ];
        for(let i = 0; i < iterable.length; i++){
            let k = iterable[i];
            if (inPoints[ref1][k] > inPoints[ref2][k]) {
                var p = ref1;
                ref1 = ref2;
                ref2 = p;
            }
            let in1 = inPoints[ref1][k];
            let in2 = inPoints[ref2][k];
            let out1 = outPoints[ref1][k];
            let out2 = outPoints[ref2][k];
            if (in1 !== in2 || out1 === out2) {
                let scale = in1 === in2 ? 0 : (out2 - out1) / (in2 - in1);
                for(let p = p1; p <= p2; p++){
                    let out = inPoints[p][k];
                    if (out <= in1) out += out1 - in1;
                    else if (out >= in2) out += out2 - in2;
                    else out = out1 + (out - in1) * scale;
                    outPoints[p][k] = out;
                }
            }
        }
    }
    deltaShift(p1, p2, ref, inPoints, outPoints) {
        let deltaX = outPoints[ref].x - inPoints[ref].x;
        let deltaY = outPoints[ref].y - inPoints[ref].y;
        if (deltaX === 0 && deltaY === 0) return;
        for(let p = p1; p <= p2; p++)if (p !== ref) {
            outPoints[p].x += deltaX;
            outPoints[p].y += deltaY;
        }
    }
    getAdvanceAdjustment(gid, table) {
        let outerIndex, innerIndex;
        if (table.advanceWidthMapping) {
            let idx = gid;
            if (idx >= table.advanceWidthMapping.mapCount) idx = table.advanceWidthMapping.mapCount - 1;
            table.advanceWidthMapping.entryFormat;
            ({ outerIndex: outerIndex , innerIndex: innerIndex  } = table.advanceWidthMapping.mapData[idx]);
        } else {
            outerIndex = 0;
            innerIndex = gid;
        }
        return this.getDelta(table.itemVariationStore, outerIndex, innerIndex);
    }
    getDelta(itemStore, outerIndex, innerIndex) {
        if (outerIndex >= itemStore.itemVariationData.length) return 0;
        let varData = itemStore.itemVariationData[outerIndex];
        if (innerIndex >= varData.deltaSets.length) return 0;
        let deltaSet = varData.deltaSets[innerIndex];
        let blendVector = this.getBlendVector(itemStore, outerIndex);
        let netAdjustment = 0;
        for(let master = 0; master < varData.regionIndexCount; master++)netAdjustment += deltaSet.deltas[master] * blendVector[master];
        return netAdjustment;
    }
    getBlendVector(itemStore, outerIndex) {
        let varData = itemStore.itemVariationData[outerIndex];
        if (this.blendVectors.has(varData)) return this.blendVectors.get(varData);
        let normalizedCoords = this.normalizedCoords;
        let blendVector = [];
        for(let master = 0; master < varData.regionIndexCount; master++){
            let scalar = 1;
            let regionIndex = varData.regionIndexes[master];
            let axes = itemStore.variationRegionList.variationRegions[regionIndex];
            for(let j = 0; j < axes.length; j++){
                let axis = axes[j];
                let axisScalar;
                if (axis.startCoord > axis.peakCoord || axis.peakCoord > axis.endCoord) axisScalar = 1;
                else if (axis.startCoord < 0 && axis.endCoord > 0 && axis.peakCoord !== 0) axisScalar = 1;
                else if (axis.peakCoord === 0) axisScalar = 1;
                else if (normalizedCoords[j] < axis.startCoord || normalizedCoords[j] > axis.endCoord) axisScalar = 0;
                else {
                    if (normalizedCoords[j] === axis.peakCoord) axisScalar = 1;
                    else if (normalizedCoords[j] < axis.peakCoord) axisScalar = (normalizedCoords[j] - axis.startCoord + Number.EPSILON) / (axis.peakCoord - axis.startCoord + Number.EPSILON);
                    else axisScalar = (axis.endCoord - normalizedCoords[j] + Number.EPSILON) / (axis.endCoord - axis.peakCoord + Number.EPSILON);
                }
                scalar *= axisScalar;
            }
            blendVector[master] = scalar;
        }
        this.blendVectors.set(varData, blendVector);
        return blendVector;
    }
}
const $7768c4d2aa7d03a3$var$resolved = Promise.resolve();
class $7768c4d2aa7d03a3$export$2e2bcd8739ae039 {
    constructor(font){
        this.font = font;
        this.glyphs = [];
        this.mapping = {};
        this.includeGlyph(0);
    }
    includeGlyph(glyph) {
        if (typeof glyph === 'object') glyph = glyph.id;
        if (this.mapping[glyph] == null) {
            this.glyphs.push(glyph);
            this.mapping[glyph] = this.glyphs.length - 1;
        }
        return this.mapping[glyph];
    }
    encodeStream() {
        let s = new $5OpyM$restructure.EncodeStream();
        $7768c4d2aa7d03a3$var$resolved.then(()=>{
            this.encode(s);
            return s.end();
        });
        return s;
    }
}
const $681deff774310865$var$ON_CURVE = 1;
const $681deff774310865$var$X_SHORT_VECTOR = 2;
const $681deff774310865$var$Y_SHORT_VECTOR = 4;
const $681deff774310865$var$REPEAT = 8;
const $681deff774310865$var$SAME_X = 16;
const $681deff774310865$var$SAME_Y = 32;
class $681deff774310865$var$Point {
    static size(val) {
        return val >= 0 && val <= 255 ? 1 : 2;
    }
    static encode(stream, value) {
        if (value >= 0 && value <= 255) stream.writeUInt8(value);
        else stream.writeInt16BE(value);
    }
}
let $681deff774310865$var$Glyf = new $5OpyM$restructure.Struct({
    numberOfContours: $5OpyM$restructure.int16,
    xMin: $5OpyM$restructure.int16,
    yMin: $5OpyM$restructure.int16,
    xMax: $5OpyM$restructure.int16,
    yMax: $5OpyM$restructure.int16,
    endPtsOfContours: new $5OpyM$restructure.Array($5OpyM$restructure.uint16, 'numberOfContours'),
    instructions: new $5OpyM$restructure.Array($5OpyM$restructure.uint8, $5OpyM$restructure.uint16),
    flags: new $5OpyM$restructure.Array($5OpyM$restructure.uint8, 0),
    xPoints: new $5OpyM$restructure.Array($681deff774310865$var$Point, 0),
    yPoints: new $5OpyM$restructure.Array($681deff774310865$var$Point, 0)
});
class $681deff774310865$export$2e2bcd8739ae039 {
    encodeSimple(path, instructions = []) {
        let endPtsOfContours = [];
        let xPoints = [];
        let yPoints = [];
        let flags = [];
        let same = 0;
        let lastX = 0, lastY = 0, lastFlag = 0;
        let pointCount = 0;
        for(let i = 0; i < path.commands.length; i++){
            let c = path.commands[i];
            for(let j = 0; j < c.args.length; j += 2){
                let x = c.args[j];
                let y = c.args[j + 1];
                let flag = 0;
                if (c.command === 'quadraticCurveTo' && j === 2) {
                    let next = path.commands[i + 1];
                    if (next && next.command === 'quadraticCurveTo') {
                        let midX = (lastX + next.args[0]) / 2;
                        let midY = (lastY + next.args[1]) / 2;
                        if (x === midX && y === midY) continue;
                    }
                }
                if (!(c.command === 'quadraticCurveTo' && j === 0)) flag |= $681deff774310865$var$ON_CURVE;
                flag = this._encodePoint(x, lastX, xPoints, flag, $681deff774310865$var$X_SHORT_VECTOR, $681deff774310865$var$SAME_X);
                flag = this._encodePoint(y, lastY, yPoints, flag, $681deff774310865$var$Y_SHORT_VECTOR, $681deff774310865$var$SAME_Y);
                if (flag === lastFlag && same < 255) {
                    flags[flags.length - 1] |= $681deff774310865$var$REPEAT;
                    same++;
                } else {
                    if (same > 0) {
                        flags.push(same);
                        same = 0;
                    }
                    flags.push(flag);
                    lastFlag = flag;
                }
                lastX = x;
                lastY = y;
                pointCount++;
            }
            if (c.command === 'closePath') endPtsOfContours.push(pointCount - 1);
        }
        if (path.commands.length > 1 && path.commands[path.commands.length - 1].command !== 'closePath') endPtsOfContours.push(pointCount - 1);
        let bbox = path.bbox;
        let glyf = {
            numberOfContours: endPtsOfContours.length,
            xMin: bbox.minX,
            yMin: bbox.minY,
            xMax: bbox.maxX,
            yMax: bbox.maxY,
            endPtsOfContours: endPtsOfContours,
            instructions: instructions,
            flags: flags,
            xPoints: xPoints,
            yPoints: yPoints
        };
        let size = $681deff774310865$var$Glyf.size(glyf);
        let tail = 4 - size % 4;
        let stream = new $5OpyM$restructure.EncodeStream(size + tail);
        $681deff774310865$var$Glyf.encode(stream, glyf);
        if (tail !== 0) stream.fill(0, tail);
        return stream.buffer;
    }
    _encodePoint(value, last, points, flag, shortFlag, sameFlag) {
        let diff = value - last;
        if (value === last) flag |= sameFlag;
        else {
            if (-255 <= diff && diff <= 255) {
                flag |= shortFlag;
                if (diff < 0) diff = -diff;
                else flag |= sameFlag;
            }
            points.push(diff);
        }
        return flag;
    }
}
var $06433914835b8dd7$require$Buffer = buffer.Buffer;
class $06433914835b8dd7$export$2e2bcd8739ae039 extends $7768c4d2aa7d03a3$export$2e2bcd8739ae039 {
    constructor(font){
        super(font);
        this.glyphEncoder = new $681deff774310865$export$2e2bcd8739ae039;
    }
    _addGlyph(gid) {
        let glyph = this.font.getGlyph(gid);
        let glyf = glyph._decode();
        let curOffset = this.font.loca.offsets[gid];
        let nextOffset = this.font.loca.offsets[gid + 1];
        let stream = this.font._getTableStream('glyf');
        stream.pos += curOffset;
        let buffer = stream.readBuffer(nextOffset - curOffset);
        if (glyf && glyf.numberOfContours < 0) {
            buffer = $06433914835b8dd7$require$Buffer.from(buffer);
            for (let component of glyf.components){
                gid = this.includeGlyph(component.glyphID);
                buffer.writeUInt16BE(gid, component.pos);
            }
        } else if (glyf && this.font._variationProcessor)
        buffer = this.glyphEncoder.encodeSimple(glyph.path, glyf.instructions);
        this.glyf.push(buffer);
        this.loca.offsets.push(this.offset);
        this.hmtx.metrics.push({
            advance: glyph.advanceWidth,
            bearing: glyph._getMetrics().leftBearing
        });
        this.offset += buffer.length;
        return this.glyf.length - 1;
    }
    encode(stream) {
        this.glyf = [];
        this.offset = 0;
        this.loca = {
            offsets: [],
            version: this.font.loca.version
        };
        this.hmtx = {
            metrics: [],
            bearings: []
        };
        let i = 0;
        while(i < this.glyphs.length)this._addGlyph(this.glyphs[i++]);
        let maxp = $5OpyM$clone(this.font.maxp);
        maxp.numGlyphs = this.glyf.length;
        this.loca.offsets.push(this.offset);
        let head = $5OpyM$clone(this.font.head);
        head.indexToLocFormat = this.loca.version;
        let hhea = $5OpyM$clone(this.font.hhea);
        hhea.numberOfMetrics = this.hmtx.metrics.length;
        $d5e01a2298150c9a$export$2e2bcd8739ae039.encode(stream, {
            tables: {
                head: head,
                hhea: hhea,
                loca: this.loca,
                maxp: maxp,
                'cvt ': this.font['cvt '],
                prep: this.font.prep,
                glyf: this.glyf,
                hmtx: this.hmtx,
                fpgm: this.font.fpgm
            }
        });
    }
}
var $2d910ac31fc0baf3$require$Buffer = buffer.Buffer;
class $2d910ac31fc0baf3$export$2e2bcd8739ae039 extends $7768c4d2aa7d03a3$export$2e2bcd8739ae039 {
    constructor(font){
        super(font);
        this.cff = this.font['CFF '];
        if (!this.cff) throw new Error('Not a CFF Font');
    }
    subsetCharstrings() {
        this.charstrings = [];
        let gsubrs = {};
        for (let gid of this.glyphs){
            this.charstrings.push(this.cff.getCharString(gid));
            let glyph = this.font.getGlyph(gid);
            glyph.path;
            for(let subr in glyph._usedGsubrs)gsubrs[subr] = true;
        }
        this.gsubrs = this.subsetSubrs(this.cff.globalSubrIndex, gsubrs);
    }
    subsetSubrs(subrs, used) {
        let res = [];
        for(let i = 0; i < subrs.length; i++){
            let subr = subrs[i];
            if (used[i]) {
                this.cff.stream.pos = subr.offset;
                res.push(this.cff.stream.readBuffer(subr.length));
            } else res.push($2d910ac31fc0baf3$require$Buffer.from([
                11
            ]));
        }
        return res;
    }
    subsetFontdict(topDict) {
        topDict.FDArray = [];
        topDict.FDSelect = {
            version: 0,
            fds: []
        };
        let used_fds = {};
        let used_subrs = [];
        let fd_select = {};
        for (let gid of this.glyphs){
            let fd = this.cff.fdForGlyph(gid);
            if (fd == null) continue;
            if (!used_fds[fd]) {
                topDict.FDArray.push(Object.assign({}, this.cff.topDict.FDArray[fd]));
                used_subrs.push({});
                fd_select[fd] = topDict.FDArray.length - 1;
            }
            used_fds[fd] = true;
            topDict.FDSelect.fds.push(fd_select[fd]);
            let glyph = this.font.getGlyph(gid);
            glyph.path;
            for(let subr in glyph._usedSubrs)used_subrs[fd_select[fd]][subr] = true;
        }
        for(let i = 0; i < topDict.FDArray.length; i++){
            let dict = topDict.FDArray[i];
            delete dict.FontName;
            if (dict.Private && dict.Private.Subrs) {
                dict.Private = Object.assign({}, dict.Private);
                dict.Private.Subrs = this.subsetSubrs(dict.Private.Subrs, used_subrs[i]);
            }
        }
        return;
    }
    createCIDFontdict(topDict) {
        let used_subrs = {};
        for (let gid of this.glyphs){
            let glyph = this.font.getGlyph(gid);
            glyph.path;
            for(let subr in glyph._usedSubrs)used_subrs[subr] = true;
        }
        let privateDict = Object.assign({}, this.cff.topDict.Private);
        if (this.cff.topDict.Private && this.cff.topDict.Private.Subrs) privateDict.Subrs = this.subsetSubrs(this.cff.topDict.Private.Subrs, used_subrs);
        topDict.FDArray = [
            {
                Private: privateDict
            }
        ];
        return topDict.FDSelect = {
            version: 3,
            nRanges: 1,
            ranges: [
                {
                    first: 0,
                    fd: 0
                }
            ],
            sentinel: this.charstrings.length
        };
    }
    addString(string) {
        if (!string) return null;
        if (!this.strings) this.strings = [];
        this.strings.push(string);
        return $276d3ff37a4362c9$export$2e2bcd8739ae039.length + this.strings.length - 1;
    }
    encode(stream) {
        this.subsetCharstrings();
        let charset = {
            version: this.charstrings.length > 255 ? 2 : 1,
            ranges: [
                {
                    first: 1,
                    nLeft: this.charstrings.length - 2
                }
            ]
        };
        let topDict = Object.assign({}, this.cff.topDict);
        topDict.Private = null;
        topDict.charset = charset;
        topDict.Encoding = null;
        topDict.CharStrings = this.charstrings;
        for (let key of [
            'version',
            'Notice',
            'Copyright',
            'FullName',
            'FamilyName',
            'Weight',
            'PostScript',
            'BaseFontName',
            'FontName'
        ])topDict[key] = this.addString(this.cff.string(topDict[key]));
        topDict.ROS = [
            this.addString('Adobe'),
            this.addString('Identity'),
            0
        ];
        topDict.CIDCount = this.charstrings.length;
        if (this.cff.isCIDFont) this.subsetFontdict(topDict);
        else this.createCIDFontdict(topDict);
        let top = {
            version: 1,
            hdrSize: this.cff.hdrSize,
            offSize: 4,
            header: this.cff.header,
            nameIndex: [
                this.cff.postscriptName
            ],
            topDictIndex: [
                topDict
            ],
            stringIndex: this.strings,
            globalSubrIndex: this.gsubrs
        };
        $3e41cd50e8921098$export$2e2bcd8739ae039.encode(stream, top);
    }
}
var _class;
let $7de97f725b51e05a$export$2e2bcd8739ae039 = (_class = class $7de97f725b51e05a$export$2e2bcd8739ae039 {
    type = 'TTF';
    static probe(buffer) {
        let format = buffer.toString('ascii', 0, 4);
        return format === 'true' || format === 'OTTO' || format === String.fromCharCode(0, 1, 0, 0);
    }
    constructor(stream, variationCoords = null){
        this.defaultLanguage = null;
        this.stream = stream;
        this.variationCoords = variationCoords;
        this._directoryPos = this.stream.pos;
        this._tables = {};
        this._glyphs = {};
        this._decodeDirectory();
        for(let tag in this.directory.tables){
            let table = this.directory.tables[tag];
            if ($60d88718e7e1fa97$export$2e2bcd8739ae039[tag] && table.length > 0) Object.defineProperty(this, tag, {
                get: this._getTable.bind(this, table)
            });
        }
    }
    setDefaultLanguage(lang = null) {
        this.defaultLanguage = lang;
    }
    _getTable(table) {
        if (!(table.tag in this._tables)) try {
            this._tables[table.tag] = this._decodeTable(table);
        } catch (e) {
        }
        return this._tables[table.tag];
    }
    _getTableStream(tag) {
        let table = this.directory.tables[tag];
        if (table) {
            this.stream.pos = table.offset;
            return this.stream;
        }
        return null;
    }
    _decodeDirectory() {
        return this.directory = $d5e01a2298150c9a$export$2e2bcd8739ae039.decode(this.stream, {
            _startOffset: 0
        });
    }
    _decodeTable(table) {
        let pos = this.stream.pos;
        let stream = this._getTableStream(table.tag);
        let result = $60d88718e7e1fa97$export$2e2bcd8739ae039[table.tag].decode(stream, this, table.length);
        this.stream.pos = pos;
        return result;
    }
 getName(key, lang = this.defaultLanguage || $8857867ee3ddfad5$export$42940898df819940) {
        let record = this.name && this.name.records[key];
        if (record)
        return record[lang] || record[this.defaultLanguage] || record[$8857867ee3ddfad5$export$42940898df819940] || record['en'] || record[Object.keys(record)[0]]
         || null;
        return null;
    }
 get postscriptName() {
        return this.getName('postscriptName');
    }
 get fullName() {
        return this.getName('fullName');
    }
 get familyName() {
        return this.getName('fontFamily');
    }
 get subfamilyName() {
        return this.getName('fontSubfamily');
    }
 get copyright() {
        return this.getName('copyright');
    }
 get version() {
        return this.getName('version');
    }
 get ascent() {
        return this.hhea.ascent;
    }
 get descent() {
        return this.hhea.descent;
    }
 get lineGap() {
        return this.hhea.lineGap;
    }
 get underlinePosition() {
        return this.post.underlinePosition;
    }
 get underlineThickness() {
        return this.post.underlineThickness;
    }
 get italicAngle() {
        return this.post.italicAngle;
    }
 get capHeight() {
        let os2 = this['OS/2'];
        return os2 ? os2.capHeight : this.ascent;
    }
 get xHeight() {
        let os2 = this['OS/2'];
        return os2 ? os2.xHeight : 0;
    }
 get numGlyphs() {
        return this.maxp.numGlyphs;
    }
 get unitsPerEm() {
        return this.head.unitsPerEm;
    }
 get bbox() {
        return Object.freeze(new $fcb46e14b01ea01f$export$2e2bcd8739ae039(this.head.xMin, this.head.yMin, this.head.xMax, this.head.yMax));
    }
    get _cmapProcessor() {
        return new $5d24cfe1a4cd83bb$export$2e2bcd8739ae039(this.cmap);
    }
 get characterSet() {
        return this._cmapProcessor.getCharacterSet();
    }
 hasGlyphForCodePoint(codePoint) {
        return !!this._cmapProcessor.lookup(codePoint);
    }
 glyphForCodePoint(codePoint) {
        return this.getGlyph(this._cmapProcessor.lookup(codePoint), [
            codePoint
        ]);
    }
 glyphsForString(string) {
        let glyphs = [];
        let len = string.length;
        let idx = 0;
        let last = -1;
        let state = -1;
        while(idx <= len){
            let code = 0;
            let nextState = 0;
            if (idx < len) {
                code = string.charCodeAt(idx++);
                if (0xd800 <= code && code <= 0xdbff && idx < len) {
                    let next = string.charCodeAt(idx);
                    if (0xdc00 <= next && next <= 0xdfff) {
                        idx++;
                        code = ((code & 0x3ff) << 10) + (next & 0x3ff) + 0x10000;
                    }
                }
                nextState = 0xfe00 <= code && code <= 0xfe0f || 0xe0100 <= code && code <= 0xe01ef ? 1 : 0;
            } else idx++;
            if (state === 0 && nextState === 1)
            glyphs.push(this.getGlyph(this._cmapProcessor.lookup(last, code), [
                last,
                code
            ]));
            else if (state === 0 && nextState === 0)
            glyphs.push(this.glyphForCodePoint(last));
            last = code;
            state = nextState;
        }
        return glyphs;
    }
    get _layoutEngine() {
        return new $2df783177c3b5db5$export$2e2bcd8739ae039(this);
    }
 layout(string, userFeatures, script, language, direction) {
        return this._layoutEngine.layout(string, userFeatures, script, language, direction);
    }
 stringsForGlyph(gid) {
        return this._layoutEngine.stringsForGlyph(gid);
    }
 get availableFeatures() {
        return this._layoutEngine.getAvailableFeatures();
    }
    getAvailableFeatures(script, language) {
        return this._layoutEngine.getAvailableFeatures(script, language);
    }
    _getBaseGlyph(glyph, characters = []) {
        if (!this._glyphs[glyph]) {
            if (this.directory.tables.glyf) this._glyphs[glyph] = new $e20fdd09923e4c19$export$2e2bcd8739ae039(glyph, characters, this);
            else if (this.directory.tables['CFF '] || this.directory.tables.CFF2) this._glyphs[glyph] = new $efcf21464e1e0f88$export$2e2bcd8739ae039(glyph, characters, this);
        }
        return this._glyphs[glyph] || null;
    }
 getGlyph(glyph, characters = []) {
        if (!this._glyphs[glyph]) {
            if (this.directory.tables.sbix) this._glyphs[glyph] = new $df50792647a3d5cf$export$2e2bcd8739ae039(glyph, characters, this);
            else if (this.directory.tables.COLR && this.directory.tables.CPAL) this._glyphs[glyph] = new $729b375ce67e8a00$export$2e2bcd8739ae039(glyph, characters, this);
            else this._getBaseGlyph(glyph, characters);
        }
        return this._glyphs[glyph] || null;
    }
 createSubset() {
        if (this.directory.tables['CFF ']) return new $2d910ac31fc0baf3$export$2e2bcd8739ae039(this);
        return new $06433914835b8dd7$export$2e2bcd8739ae039(this);
    }
 get variationAxes() {
        let res = {};
        if (!this.fvar) return res;
        for (let axis of this.fvar.axis)res[axis.axisTag.trim()] = {
            name: axis.name.en,
            min: axis.minValue,
            default: axis.defaultValue,
            max: axis.maxValue
        };
        return res;
    }
 get namedVariations() {
        let res = {};
        if (!this.fvar) return res;
        for (let instance of this.fvar.instance){
            let settings = {};
            for(let i = 0; i < this.fvar.axis.length; i++){
                let axis = this.fvar.axis[i];
                settings[axis.axisTag.trim()] = instance.coord[i];
            }
            res[instance.name.en] = settings;
        }
        return res;
    }
 getVariation(settings) {
        if (!(this.directory.tables.fvar && (this.directory.tables.gvar && this.directory.tables.glyf || this.directory.tables.CFF2))) throw new Error('Variations require a font with the fvar, gvar and glyf, or CFF2 tables.');
        if (typeof settings === 'string') settings = this.namedVariations[settings];
        if (typeof settings !== 'object') throw new Error('Variation settings must be either a variation name or settings object.');
        let coords = this.fvar.axis.map((axis, i)=>{
            let axisTag = axis.axisTag.trim();
            if (axisTag in settings) return Math.max(axis.minValue, Math.min(axis.maxValue, settings[axisTag]));
            else return axis.defaultValue;
        });
        let stream = new $5OpyM$restructure.DecodeStream(this.stream.buffer);
        stream.pos = this._directoryPos;
        let font = new $7de97f725b51e05a$export$2e2bcd8739ae039(stream, coords);
        font._tables = this._tables;
        return font;
    }
    get _variationProcessor() {
        if (!this.fvar) return null;
        let variationCoords = this.variationCoords;
        if (!variationCoords && !this.CFF2) return null;
        if (!variationCoords) variationCoords = this.fvar.axis.map((axis)=>axis.defaultValue
        );
        return new $62b2d77b45b438f3$export$2e2bcd8739ae039(this, variationCoords);
    }
    getFont(name) {
        return this.getVariation(name);
    }
}, _applyDecoratedDescriptor(_class.prototype, "bbox", [
    $df9bc573962369ff$export$69a3209f1a06c04d
], Object.getOwnPropertyDescriptor(_class.prototype, "bbox"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "_cmapProcessor", [
    $df9bc573962369ff$export$69a3209f1a06c04d
], Object.getOwnPropertyDescriptor(_class.prototype, "_cmapProcessor"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "characterSet", [
    $df9bc573962369ff$export$69a3209f1a06c04d
], Object.getOwnPropertyDescriptor(_class.prototype, "characterSet"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "_layoutEngine", [
    $df9bc573962369ff$export$69a3209f1a06c04d
], Object.getOwnPropertyDescriptor(_class.prototype, "_layoutEngine"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "variationAxes", [
    $df9bc573962369ff$export$69a3209f1a06c04d
], Object.getOwnPropertyDescriptor(_class.prototype, "variationAxes"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "namedVariations", [
    $df9bc573962369ff$export$69a3209f1a06c04d
], Object.getOwnPropertyDescriptor(_class.prototype, "namedVariations"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "_variationProcessor", [
    $df9bc573962369ff$export$69a3209f1a06c04d
], Object.getOwnPropertyDescriptor(_class.prototype, "_variationProcessor"), _class.prototype), _class);
let $ab5f467accf33238$var$WOFFDirectoryEntry = new $5OpyM$restructure.Struct({
    tag: new $5OpyM$restructure.String(4),
    offset: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, 'void', {
        type: 'global'
    }),
    compLength: $5OpyM$restructure.uint32,
    length: $5OpyM$restructure.uint32,
    origChecksum: $5OpyM$restructure.uint32
});
let $ab5f467accf33238$var$WOFFDirectory = new $5OpyM$restructure.Struct({
    tag: new $5OpyM$restructure.String(4),
    flavor: $5OpyM$restructure.uint32,
    length: $5OpyM$restructure.uint32,
    numTables: $5OpyM$restructure.uint16,
    reserved: new $5OpyM$restructure.Reserved($5OpyM$restructure.uint16),
    totalSfntSize: $5OpyM$restructure.uint32,
    majorVersion: $5OpyM$restructure.uint16,
    minorVersion: $5OpyM$restructure.uint16,
    metaOffset: $5OpyM$restructure.uint32,
    metaLength: $5OpyM$restructure.uint32,
    metaOrigLength: $5OpyM$restructure.uint32,
    privOffset: $5OpyM$restructure.uint32,
    privLength: $5OpyM$restructure.uint32,
    tables: new $5OpyM$restructure.Array($ab5f467accf33238$var$WOFFDirectoryEntry, 'numTables')
});
$ab5f467accf33238$var$WOFFDirectory.process = function() {
    let tables = {};
    for (let table of this.tables)tables[table.tag] = table;
    this.tables = tables;
};
var $ab5f467accf33238$export$2e2bcd8739ae039 = $ab5f467accf33238$var$WOFFDirectory;
var $fce99fef0398d8c8$require$Buffer = buffer.Buffer;
class $fce99fef0398d8c8$export$2e2bcd8739ae039 extends $7de97f725b51e05a$export$2e2bcd8739ae039 {
    type = 'WOFF';
    static probe(buffer) {
        return buffer.toString('ascii', 0, 4) === 'wOFF';
    }
    _decodeDirectory() {
        this.directory = $ab5f467accf33238$export$2e2bcd8739ae039.decode(this.stream, {
            _startOffset: 0
        });
    }
    _getTableStream(tag) {
        let table = this.directory.tables[tag];
        if (table) {
            this.stream.pos = table.offset;
            if (table.compLength < table.length) {
                this.stream.pos += 2;
                let outBuffer = $fce99fef0398d8c8$require$Buffer.alloc(table.length);
                let buf = $5OpyM$tinyinflate(this.stream.readBuffer(table.compLength - 2), outBuffer);
                return new $5OpyM$restructure.DecodeStream(buf);
            } else return this.stream;
        }
        return null;
    }
}
class $f6f1feff1ba0de68$export$2e2bcd8739ae039 extends $e20fdd09923e4c19$export$2e2bcd8739ae039 {
    type = 'WOFF2';
    _decode() {
        return this._font._transformedGlyphs[this.id];
    }
    _getCBox() {
        return this.path.bbox;
    }
}
const $4965cf368c868bf6$var$Base128 = {
    decode (stream) {
        let result = 0;
        let iterable = [
            0,
            1,
            2,
            3,
            4
        ];
        for(let j = 0; j < iterable.length; j++){
            let code = stream.readUInt8();
            if (result & 0xe0000000) throw new Error('Overflow');
            result = result << 7 | code & 0x7f;
            if ((code & 0x80) === 0) return result;
        }
        throw new Error('Bad base 128 number');
    }
};
let $4965cf368c868bf6$var$knownTags = [
    'cmap',
    'head',
    'hhea',
    'hmtx',
    'maxp',
    'name',
    'OS/2',
    'post',
    'cvt ',
    'fpgm',
    'glyf',
    'loca',
    'prep',
    'CFF ',
    'VORG',
    'EBDT',
    'EBLC',
    'gasp',
    'hdmx',
    'kern',
    'LTSH',
    'PCLT',
    'VDMX',
    'vhea',
    'vmtx',
    'BASE',
    'GDEF',
    'GPOS',
    'GSUB',
    'EBSC',
    'JSTF',
    'MATH',
    'CBDT',
    'CBLC',
    'COLR',
    'CPAL',
    'SVG ',
    'sbix',
    'acnt',
    'avar',
    'bdat',
    'bloc',
    'bsln',
    'cvar',
    'fdsc',
    'feat',
    'fmtx',
    'fvar',
    'gvar',
    'hsty',
    'just',
    'lcar',
    'mort',
    'morx',
    'opbd',
    'prop',
    'trak',
    'Zapf',
    'Silf',
    'Glat',
    'Gloc',
    'Feat',
    'Sill'
];
let $4965cf368c868bf6$var$WOFF2DirectoryEntry = new $5OpyM$restructure.Struct({
    flags: $5OpyM$restructure.uint8,
    customTag: new $5OpyM$restructure.Optional(new $5OpyM$restructure.String(4), (t)=>(t.flags & 0x3f) === 0x3f
    ),
    tag: (t)=>t.customTag || $4965cf368c868bf6$var$knownTags[t.flags & 0x3f]
    ,
    length: $4965cf368c868bf6$var$Base128,
    transformVersion: (t)=>t.flags >>> 6 & 0x03
    ,
    transformed: (t)=>t.tag === 'glyf' || t.tag === 'loca' ? t.transformVersion === 0 : t.transformVersion !== 0
    ,
    transformLength: new $5OpyM$restructure.Optional($4965cf368c868bf6$var$Base128, (t)=>t.transformed
    )
});
let $4965cf368c868bf6$var$WOFF2Directory = new $5OpyM$restructure.Struct({
    tag: new $5OpyM$restructure.String(4),
    flavor: $5OpyM$restructure.uint32,
    length: $5OpyM$restructure.uint32,
    numTables: $5OpyM$restructure.uint16,
    reserved: new $5OpyM$restructure.Reserved($5OpyM$restructure.uint16),
    totalSfntSize: $5OpyM$restructure.uint32,
    totalCompressedSize: $5OpyM$restructure.uint32,
    majorVersion: $5OpyM$restructure.uint16,
    minorVersion: $5OpyM$restructure.uint16,
    metaOffset: $5OpyM$restructure.uint32,
    metaLength: $5OpyM$restructure.uint32,
    metaOrigLength: $5OpyM$restructure.uint32,
    privOffset: $5OpyM$restructure.uint32,
    privLength: $5OpyM$restructure.uint32,
    tables: new $5OpyM$restructure.Array($4965cf368c868bf6$var$WOFF2DirectoryEntry, 'numTables')
});
$4965cf368c868bf6$var$WOFF2Directory.process = function() {
    let tables = {};
    for(let i = 0; i < this.tables.length; i++){
        let table = this.tables[i];
        tables[table.tag] = table;
    }
    return this.tables = tables;
};
var $4965cf368c868bf6$export$2e2bcd8739ae039 = $4965cf368c868bf6$var$WOFF2Directory;
var $b6deb9db8685274b$require$Buffer = buffer.Buffer;
class $b6deb9db8685274b$export$2e2bcd8739ae039 extends $7de97f725b51e05a$export$2e2bcd8739ae039 {
    type = 'WOFF2';
    static probe(buffer) {
        return buffer.toString('ascii', 0, 4) === 'wOF2';
    }
    _decodeDirectory() {
        this.directory = $4965cf368c868bf6$export$2e2bcd8739ae039.decode(this.stream);
        this._dataPos = this.stream.pos;
    }
    _decompress() {
        if (!this._decompressed) {
            this.stream.pos = this._dataPos;
            let buffer = this.stream.readBuffer(this.directory.totalCompressedSize);
            let decompressedSize = 0;
            for(let tag in this.directory.tables){
                let entry = this.directory.tables[tag];
                entry.offset = decompressedSize;
                decompressedSize += entry.transformLength != null ? entry.transformLength : entry.length;
            }
            let decompressed = $5OpyM$brotlidecompressjs(buffer, decompressedSize);
            if (!decompressed) throw new Error('Error decoding compressed data in WOFF2');
            this.stream = new $5OpyM$restructure.DecodeStream($b6deb9db8685274b$require$Buffer.from(decompressed));
            this._decompressed = true;
        }
    }
    _decodeTable(table) {
        this._decompress();
        return super._decodeTable(table);
    }
    _getBaseGlyph(glyph, characters = []) {
        if (!this._glyphs[glyph]) {
            if (this.directory.tables.glyf && this.directory.tables.glyf.transformed) {
                if (!this._transformedGlyphs) this._transformGlyfTable();
                return this._glyphs[glyph] = new $f6f1feff1ba0de68$export$2e2bcd8739ae039(glyph, characters, this);
            } else return super._getBaseGlyph(glyph, characters);
        }
    }
    _transformGlyfTable() {
        this._decompress();
        this.stream.pos = this.directory.tables.glyf.offset;
        let table = $b6deb9db8685274b$var$GlyfTable.decode(this.stream);
        let glyphs = [];
        for(let index = 0; index < table.numGlyphs; index++){
            let glyph = {};
            let nContours = table.nContours.readInt16BE();
            glyph.numberOfContours = nContours;
            if (nContours > 0) {
                let nPoints = [];
                let totalPoints = 0;
                for(let i = 0; i < nContours; i++){
                    let r = $b6deb9db8685274b$var$read255UInt16(table.nPoints);
                    totalPoints += r;
                    nPoints.push(totalPoints);
                }
                glyph.points = $b6deb9db8685274b$var$decodeTriplet(table.flags, table.glyphs, totalPoints);
                for(let i1 = 0; i1 < nContours; i1++)glyph.points[nPoints[i1] - 1].endContour = true;
                var instructionSize = $b6deb9db8685274b$var$read255UInt16(table.glyphs);
            } else if (nContours < 0) {
                let haveInstructions = $e20fdd09923e4c19$export$2e2bcd8739ae039.prototype._decodeComposite.call({
                    _font: this
                }, glyph, table.composites);
                if (haveInstructions) var instructionSize = $b6deb9db8685274b$var$read255UInt16(table.glyphs);
            }
            glyphs.push(glyph);
        }
        this._transformedGlyphs = glyphs;
    }
}
class $b6deb9db8685274b$var$Substream {
    constructor(length){
        this.length = length;
        this._buf = new $5OpyM$restructure.Buffer(length);
    }
    decode(stream, parent) {
        return new $5OpyM$restructure.DecodeStream(this._buf.decode(stream, parent));
    }
}
let $b6deb9db8685274b$var$GlyfTable = new $5OpyM$restructure.Struct({
    version: $5OpyM$restructure.uint32,
    numGlyphs: $5OpyM$restructure.uint16,
    indexFormat: $5OpyM$restructure.uint16,
    nContourStreamSize: $5OpyM$restructure.uint32,
    nPointsStreamSize: $5OpyM$restructure.uint32,
    flagStreamSize: $5OpyM$restructure.uint32,
    glyphStreamSize: $5OpyM$restructure.uint32,
    compositeStreamSize: $5OpyM$restructure.uint32,
    bboxStreamSize: $5OpyM$restructure.uint32,
    instructionStreamSize: $5OpyM$restructure.uint32,
    nContours: new $b6deb9db8685274b$var$Substream('nContourStreamSize'),
    nPoints: new $b6deb9db8685274b$var$Substream('nPointsStreamSize'),
    flags: new $b6deb9db8685274b$var$Substream('flagStreamSize'),
    glyphs: new $b6deb9db8685274b$var$Substream('glyphStreamSize'),
    composites: new $b6deb9db8685274b$var$Substream('compositeStreamSize'),
    bboxes: new $b6deb9db8685274b$var$Substream('bboxStreamSize'),
    instructions: new $b6deb9db8685274b$var$Substream('instructionStreamSize')
});
const $b6deb9db8685274b$var$WORD_CODE = 253;
const $b6deb9db8685274b$var$ONE_MORE_BYTE_CODE2 = 254;
const $b6deb9db8685274b$var$ONE_MORE_BYTE_CODE1 = 255;
const $b6deb9db8685274b$var$LOWEST_U_CODE = 253;
function $b6deb9db8685274b$var$read255UInt16(stream) {
    let code = stream.readUInt8();
    if (code === $b6deb9db8685274b$var$WORD_CODE) return stream.readUInt16BE();
    if (code === $b6deb9db8685274b$var$ONE_MORE_BYTE_CODE1) return stream.readUInt8() + $b6deb9db8685274b$var$LOWEST_U_CODE;
    if (code === $b6deb9db8685274b$var$ONE_MORE_BYTE_CODE2) return stream.readUInt8() + $b6deb9db8685274b$var$LOWEST_U_CODE * 2;
    return code;
}
function $b6deb9db8685274b$var$withSign(flag, baseval) {
    return flag & 1 ? baseval : -baseval;
}
function $b6deb9db8685274b$var$decodeTriplet(flags, glyphs, nPoints) {
    let y;
    let x = y = 0;
    let res = [];
    for(let i = 0; i < nPoints; i++){
        let dx = 0, dy = 0;
        let flag = flags.readUInt8();
        let onCurve = !(flag >> 7);
        flag &= 0x7f;
        if (flag < 10) {
            dx = 0;
            dy = $b6deb9db8685274b$var$withSign(flag, ((flag & 14) << 7) + glyphs.readUInt8());
        } else if (flag < 20) {
            dx = $b6deb9db8685274b$var$withSign(flag, ((flag - 10 & 14) << 7) + glyphs.readUInt8());
            dy = 0;
        } else if (flag < 84) {
            var b0 = flag - 20;
            var b1 = glyphs.readUInt8();
            dx = $b6deb9db8685274b$var$withSign(flag, 1 + (b0 & 0x30) + (b1 >> 4));
            dy = $b6deb9db8685274b$var$withSign(flag >> 1, 1 + ((b0 & 0x0c) << 2) + (b1 & 0x0f));
        } else if (flag < 120) {
            var b0 = flag - 84;
            dx = $b6deb9db8685274b$var$withSign(flag, 1 + (b0 / 12 << 8) + glyphs.readUInt8());
            dy = $b6deb9db8685274b$var$withSign(flag >> 1, 1 + (b0 % 12 >> 2 << 8) + glyphs.readUInt8());
        } else if (flag < 124) {
            var b1 = glyphs.readUInt8();
            let b2 = glyphs.readUInt8();
            dx = $b6deb9db8685274b$var$withSign(flag, (b1 << 4) + (b2 >> 4));
            dy = $b6deb9db8685274b$var$withSign(flag >> 1, ((b2 & 0x0f) << 8) + glyphs.readUInt8());
        } else {
            dx = $b6deb9db8685274b$var$withSign(flag, glyphs.readUInt16BE());
            dy = $b6deb9db8685274b$var$withSign(flag >> 1, glyphs.readUInt16BE());
        }
        x += dx;
        y += dy;
        res.push(new $e20fdd09923e4c19$export$baf26146a414f24a(onCurve, false, x, y));
    }
    return res;
}
var $313c698c6d2649a4$require$Buffer = buffer.Buffer;
let $313c698c6d2649a4$var$TTCHeader = new $5OpyM$restructure.VersionedStruct($5OpyM$restructure.uint32, {
    0x00010000: {
        numFonts: $5OpyM$restructure.uint32,
        offsets: new $5OpyM$restructure.Array($5OpyM$restructure.uint32, 'numFonts')
    },
    0x00020000: {
        numFonts: $5OpyM$restructure.uint32,
        offsets: new $5OpyM$restructure.Array($5OpyM$restructure.uint32, 'numFonts'),
        dsigTag: $5OpyM$restructure.uint32,
        dsigLength: $5OpyM$restructure.uint32,
        dsigOffset: $5OpyM$restructure.uint32
    }
});
class $313c698c6d2649a4$export$2e2bcd8739ae039 {
    type = 'TTC';
    static probe(buffer) {
        return buffer.toString('ascii', 0, 4) === 'ttcf';
    }
    constructor(stream){
        this.stream = stream;
        if (stream.readString(4) !== 'ttcf') throw new Error('Not a TrueType collection');
        this.header = $313c698c6d2649a4$var$TTCHeader.decode(stream);
    }
    getFont(name) {
        for (let offset of this.header.offsets){
            let stream = new $5OpyM$restructure.DecodeStream(this.stream.buffer);
            stream.pos = offset;
            let font = new $7de97f725b51e05a$export$2e2bcd8739ae039(stream);
            if ($313c698c6d2649a4$require$Buffer.isBuffer(font.postscriptName) && font.postscriptName.equals(name) || font.postscriptName === name) return font;
        }
        return null;
    }
    get fonts() {
        let fonts = [];
        for (let offset of this.header.offsets){
            let stream = new $5OpyM$restructure.DecodeStream(this.stream.buffer);
            stream.pos = offset;
            fonts.push(new $7de97f725b51e05a$export$2e2bcd8739ae039(stream));
        }
        return fonts;
    }
}
var $7db119589c227f03$require$Buffer = buffer.Buffer;
let $7db119589c227f03$var$DFontName = new $5OpyM$restructure.String($5OpyM$restructure.uint8);
new $5OpyM$restructure.Struct({
    len: $5OpyM$restructure.uint32,
    buf: new $5OpyM$restructure.Buffer('len')
});
let $7db119589c227f03$var$Ref = new $5OpyM$restructure.Struct({
    id: $5OpyM$restructure.uint16,
    nameOffset: $5OpyM$restructure.int16,
    attr: $5OpyM$restructure.uint8,
    dataOffset: $5OpyM$restructure.uint24,
    handle: $5OpyM$restructure.uint32
});
let $7db119589c227f03$var$Type = new $5OpyM$restructure.Struct({
    name: new $5OpyM$restructure.String(4),
    maxTypeIndex: $5OpyM$restructure.uint16,
    refList: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, new $5OpyM$restructure.Array($7db119589c227f03$var$Ref, (t)=>t.maxTypeIndex + 1
    ), {
        type: 'parent'
    })
});
let $7db119589c227f03$var$TypeList = new $5OpyM$restructure.Struct({
    length: $5OpyM$restructure.uint16,
    types: new $5OpyM$restructure.Array($7db119589c227f03$var$Type, (t)=>t.length + 1
    )
});
let $7db119589c227f03$var$DFontMap = new $5OpyM$restructure.Struct({
    reserved: new $5OpyM$restructure.Reserved($5OpyM$restructure.uint8, 24),
    typeList: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $7db119589c227f03$var$TypeList),
    nameListOffset: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, 'void')
});
let $7db119589c227f03$var$DFontHeader = new $5OpyM$restructure.Struct({
    dataOffset: $5OpyM$restructure.uint32,
    map: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, $7db119589c227f03$var$DFontMap),
    dataLength: $5OpyM$restructure.uint32,
    mapLength: $5OpyM$restructure.uint32
});
class $7db119589c227f03$export$2e2bcd8739ae039 {
    type = 'DFont';
    static probe(buffer) {
        let stream = new $5OpyM$restructure.DecodeStream(buffer);
        try {
            var header = $7db119589c227f03$var$DFontHeader.decode(stream);
        } catch (e) {
            return false;
        }
        for (let type of header.map.typeList.types){
            if (type.name === 'sfnt') return true;
        }
        return false;
    }
    constructor(stream){
        this.stream = stream;
        this.header = $7db119589c227f03$var$DFontHeader.decode(this.stream);
        for (let type of this.header.map.typeList.types){
            for (let ref of type.refList)if (ref.nameOffset >= 0) {
                this.stream.pos = ref.nameOffset + this.header.map.nameListOffset;
                ref.name = $7db119589c227f03$var$DFontName.decode(this.stream);
            } else ref.name = null;
            if (type.name === 'sfnt') this.sfnt = type;
        }
    }
    getFont(name) {
        if (!this.sfnt) return null;
        for (let ref of this.sfnt.refList){
            let pos = this.header.dataOffset + ref.dataOffset + 4;
            let stream = new $5OpyM$restructure.DecodeStream(this.stream.buffer.slice(pos));
            let font = new $7de97f725b51e05a$export$2e2bcd8739ae039(stream);
            if ($7db119589c227f03$require$Buffer.isBuffer(font.postscriptName) && font.postscriptName.equals(name) || font.postscriptName === name) return font;
        }
        return null;
    }
    get fonts() {
        let fonts = [];
        for (let ref of this.sfnt.refList){
            let pos = this.header.dataOffset + ref.dataOffset + 4;
            let stream = new $5OpyM$restructure.DecodeStream(this.stream.buffer.slice(pos));
            fonts.push(new $7de97f725b51e05a$export$2e2bcd8739ae039(stream));
        }
        return fonts;
    }
}
$8857867ee3ddfad5$export$36b2f24e97d43be($7de97f725b51e05a$export$2e2bcd8739ae039);
$8857867ee3ddfad5$export$36b2f24e97d43be($fce99fef0398d8c8$export$2e2bcd8739ae039);
$8857867ee3ddfad5$export$36b2f24e97d43be($b6deb9db8685274b$export$2e2bcd8739ae039);
$8857867ee3ddfad5$export$36b2f24e97d43be($313c698c6d2649a4$export$2e2bcd8739ae039);
$8857867ee3ddfad5$export$36b2f24e97d43be($7db119589c227f03$export$2e2bcd8739ae039);
var
$cf838c15c8b009ba$export$2e2bcd8739ae039 = {
    registerFormat: $8857867ee3ddfad5$export$36b2f24e97d43be,
    openSync: $8857867ee3ddfad5$export$fa5499edb1ab414a,
    open: $8857867ee3ddfad5$export$3ce6949f20cea765,
    create: $8857867ee3ddfad5$export$185802fd694ee1f5,
    defaultLanguage: $8857867ee3ddfad5$export$42940898df819940,
    setDefaultLanguage: $8857867ee3ddfad5$export$5157e7780d44cc36
};

var b64 = {};

(function (exports) {
	var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
(function (exports) {
	  var Arr = (typeof Uint8Array !== 'undefined')
	    ? Uint8Array
	    : Array;
		var PLUS   = '+'.charCodeAt(0);
		var SLASH  = '/'.charCodeAt(0);
		var NUMBER = '0'.charCodeAt(0);
		var LOWER  = 'a'.charCodeAt(0);
		var UPPER  = 'A'.charCodeAt(0);
		var PLUS_URL_SAFE = '-'.charCodeAt(0);
		var SLASH_URL_SAFE = '_'.charCodeAt(0);
		function decode (elt) {
			var code = elt.charCodeAt(0);
			if (code === PLUS ||
			    code === PLUS_URL_SAFE)
				return 62
			if (code === SLASH ||
			    code === SLASH_URL_SAFE)
				return 63
			if (code < NUMBER)
				return -1
			if (code < NUMBER + 10)
				return code - NUMBER + 26 + 26
			if (code < UPPER + 26)
				return code - UPPER
			if (code < LOWER + 26)
				return code - LOWER + 26
		}
		function b64ToByteArray (b64) {
			var i, j, l, tmp, placeHolders, arr;
			if (b64.length % 4 > 0) {
				throw new Error('Invalid string. Length must be a multiple of 4')
			}
			var len = b64.length;
			placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0;
			arr = new Arr(b64.length * 3 / 4 - placeHolders);
			l = placeHolders > 0 ? b64.length - 4 : b64.length;
			var L = 0;
			function push (v) {
				arr[L++] = v;
			}
			for (i = 0, j = 0; i < l; i += 4, j += 3) {
				tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3));
				push((tmp & 0xFF0000) >> 16);
				push((tmp & 0xFF00) >> 8);
				push(tmp & 0xFF);
			}
			if (placeHolders === 2) {
				tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4);
				push(tmp & 0xFF);
			} else if (placeHolders === 1) {
				tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2);
				push((tmp >> 8) & 0xFF);
				push(tmp & 0xFF);
			}
			return arr
		}
		function uint8ToBase64 (uint8) {
			var i,
				extraBytes = uint8.length % 3,
				output = "",
				temp, length;
			function encode (num) {
				return lookup.charAt(num)
			}
			function tripletToBase64 (num) {
				return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)
			}
			for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
				temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2]);
				output += tripletToBase64(temp);
			}
			switch (extraBytes) {
				case 1:
					temp = uint8[uint8.length - 1];
					output += encode(temp >> 2);
					output += encode((temp << 4) & 0x3F);
					output += '==';
					break
				case 2:
					temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1]);
					output += encode(temp >> 10);
					output += encode((temp >> 4) & 0x3F);
					output += encode((temp << 2) & 0x3F);
					output += '=';
					break
			}
			return output
		}
		exports.toByteArray = b64ToByteArray;
		exports.fromByteArray = uint8ToBase64;
	}(exports)); 
} (b64));

var $hJqJp$base64js = /*@__PURE__*/getDefaultExportFromCjs$1(b64);

var $557adaaeb0c7885f$exports = {};
const $1627905f8be2ef3f$export$fb4028874a74450 = 5;
const $1627905f8be2ef3f$export$1bb1140fe1358b00 = 12;
const $1627905f8be2ef3f$export$f3e416a182673355 = 13;
const $1627905f8be2ef3f$export$24aa617c849a894a = 16;
const $1627905f8be2ef3f$export$a73c4d14459b698d = 17;
const $1627905f8be2ef3f$export$9e5d732f3676a9ba = 22;
const $1627905f8be2ef3f$export$1dff41d5c0caca01 = 28;
const $1627905f8be2ef3f$export$30a74a373318dec6 = 31;
const $1627905f8be2ef3f$export$d710c5f50fc7496a = 33;
const $1627905f8be2ef3f$export$66498d28055820a9 = 34;
const $1627905f8be2ef3f$export$eb6c6d0b7c8826f2 = 35;
const $1627905f8be2ef3f$export$de92be486109a1df = 36;
const $1627905f8be2ef3f$export$606cfc2a8896c91f = 37;
const $1627905f8be2ef3f$export$e51d3c675bb0140d = 38;
const $1627905f8be2ef3f$export$da51c6332ad11d7b = 39;
const $1627905f8be2ef3f$export$bea437c40441867d = 40;
const $1627905f8be2ef3f$export$c4c7eecbfed13dc9 = 41;
const $1627905f8be2ef3f$export$98e1f8a379849661 = 42;
const $32627af916ac1b00$export$98f50d781a474745 = 0;
const $32627af916ac1b00$export$12ee1f8f5315ca7e = 1;
const $32627af916ac1b00$export$e4965ce242860454 = 2;
const $32627af916ac1b00$export$8f14048969dcd45e = 3;
const $32627af916ac1b00$export$133eb141bf58aff4 = 4;
const $32627af916ac1b00$export$5bdb8ccbf5c57afc = [
    [
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$8f14048969dcd45e,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4
    ],
    [
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$e4965ce242860454,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$98f50d781a474745
    ],
    [
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$e4965ce242860454,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$98f50d781a474745
    ],
    [
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$e4965ce242860454,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e
    ],
    [
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$e4965ce242860454,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e
    ],
    [
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$e4965ce242860454,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$98f50d781a474745
    ],
    [
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$e4965ce242860454,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$98f50d781a474745
    ],
    [
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$e4965ce242860454,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$98f50d781a474745
    ],
    [
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$e4965ce242860454,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$98f50d781a474745
    ],
    [
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$e4965ce242860454,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$98f50d781a474745
    ],
    [
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$e4965ce242860454,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$98f50d781a474745
    ],
    [
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$e4965ce242860454,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$98f50d781a474745
    ],
    [
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$e4965ce242860454,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$98f50d781a474745
    ],
    [
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$e4965ce242860454,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$98f50d781a474745
    ],
    [
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$e4965ce242860454,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$98f50d781a474745
    ],
    [
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$e4965ce242860454,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$98f50d781a474745
    ],
    [
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$e4965ce242860454,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$98f50d781a474745
    ],
    [
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$e4965ce242860454,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$98f50d781a474745
    ],
    [
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$e4965ce242860454,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$98f50d781a474745
    ],
    [
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$e4965ce242860454,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$98f50d781a474745
    ],
    [
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745
    ],
    [
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$e4965ce242860454,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$98f50d781a474745
    ],
    [
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$e4965ce242860454,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e
    ],
    [
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$e4965ce242860454,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$98f50d781a474745
    ],
    [
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$e4965ce242860454,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$98f50d781a474745
    ],
    [
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$e4965ce242860454,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$98f50d781a474745
    ],
    [
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$e4965ce242860454,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$98f50d781a474745
    ],
    [
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$e4965ce242860454,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$98f50d781a474745
    ],
    [
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$e4965ce242860454,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$98f50d781a474745
    ],
    [
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$e4965ce242860454,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$98f50d781a474745
    ],
    [
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$e4965ce242860454,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$98f50d781a474745
    ],
    [
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$e4965ce242860454,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$98f50d781a474745
    ],
    [
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$e4965ce242860454,
        $32627af916ac1b00$export$133eb141bf58aff4,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$98f50d781a474745,
        $32627af916ac1b00$export$12ee1f8f5315ca7e,
        $32627af916ac1b00$export$98f50d781a474745
    ]
];
const $557adaaeb0c7885f$var$data = $hJqJp$base64js.toByteArray("AAgOAAAAAAAQ4QAAAQ0P8vDtnQuMXUUZx+eyu7d7797d9m5bHoWltKVUlsjLWE0VJNigQoMVqkStEoNQQUl5GIo1KKmogEgqkKbBRki72lYabZMGKoGAjQRtJJDaCCIRiiigREBQS3z+xzOTnZ3O+3HOhd5NfpkzZx7fN9988zivu2M9hGwB28F94DnwEngd/Asc1EtIs9c/bIPDwCxwLDgezHcodyo4w5C+CCwBS8FnwSXgCnA1uFbI93XwbXAbWAfWgx+CzWAb+An4KfgFeAzsYWWfYuFz4CXwGvgb+Dfo6yNkEEwGh4CZYB44FpwI3g1OY+kfBItZOo2fB84Hy8DF4HJwNbiWpV8PVoO1LH4n2NRXyN+KcAd4kNVP9XsY4aPgcfAbsBfs6SniL4K/sPjfEf6HlanXCRkCw2BGvUh/keWfXS/CY+pFXs7x9XHmM94LTmWIeU2cgbxnS/k/B3kf86jDhU8L9V2E40vAFWAlWFUfb++NOL4F3C7JX4/4GiE+hvgWsF0oS7mXldspnN+F493gyXrh9xTav0cg3EvzgVfBG6wsmVSEkxBOBgdPGpd7JI6PnqRvJ68/xlbHof53gPeA94OzwLngk+ACsAwsByvASrAK3MB0Ws3CtQjvBJvAVrADPMDSHkb4CNijaccTwvnf4fiPEs8Lxy+D18A/QU8/xjgYBjPAbDAKTgYLwOngTHAO+EQ/8wuEF4EvsPiVCFf2+9tsFStzA8LVHuXXBsi6QyqzUYiPMR/7Mc7dAx7oL8bzw/3u/Bw8Bp4Az4AXwCtgHzsmDXP5fiF9iiVvly5d0sHngar16NKlS5cuXbp06fLmYlqHXrcd3ph4P0THUY3iXh49novju4S0tzfs5d+JPKewfAsRntZb3K9ZhOMlrO6lCC8An28U9+OuovcPcPxlVu5rCL/VmHh/iHIrzn3fIPu7SN8Axmg+8AOwEWwCm7tp3bRuWjetm5Y8bSu4B9zbKO6ZVsnORrVU3f4uXTqZ2H3sLoyx3eDXjfDndE9qyj6L838CfwVvgFpzYnof4oNgOhgBc8Fos9DrZIQLmtXPP1MmF6wGj4H+KXoWguvADkXaPil+YpuQy8Am8Ey7ODdtmJDF4HowBp4De6HDTNjhfHAHeBr0DBBy0kDxfPbcgSIusgrcWhtnJ8vL+TPix7UIOQtcBq4C28Cr4KRBnANbwSuDE+s50JgyNNFuXbp06XIgsXjIvPafjvXozKY+fVFz/z0LT1uCtKVSWbrOLWPnztG8e0Xfy7ol8XtZJi7WtG+5od2UFXQ/A12vUeS7jp27yVKHjdsU9lXB869TyNvAzt0lpP2oWbwLdjiO78bx/Sz+EMJHwK9Y/LcIfw+eZ3F67/Hl5vh9xX80J+rwX8SvRDhpgL17iPAQMHNArfPrqHPewLheI+AERV6efwV418B4nOZ/H+IfYHV8GOF5LJ3eAz0fx8sM9S0fUNud39O9CulfGZhY5huI3wzWgNvBelbHZoTbNPVpfYjKQpkHwUNgl0LWblbnk0LbbDxr0OMFpL3iqWdu9nWYPlVAWkXY39LnGdCkDbeqv1YNbfcMQ3t9oe8lzm6NH9N1ZB6Ln4BwfkJZJk7RyFnYKt6b/JDQXx9p5X+eFdqOjzM9P9MB/lUlFzr20aXIdzlY4dmn9F3YqtvoO76/2hp/D/xA5Zue88nNyL8GbFbs075X0tyUig3Qd2MCnf//HjnzpbsR3g9+1kHzzVjdnE71/qVBX9rGPUh/ysNWe1neFzvIDi5zAufV1sT0N0poR22wkFUfTOPfA4N2mbZ5fSrqOHSw+IbkSBbOGSzSRgf91/GTUWYBOB2cIZQ/G8cfBZ8CFwrnL8XxF8FKcA24jqXdiPA7Qr61OF7H4mMItwzuv2/YLth1ISt3Hzu3k4W7EH5JqPdRHD/O4k+z8A8IX5Lq3y7Z4nXE9xn6kX6vQ4bKfy+ok+hH+xf3hq9dnTTHhjKd2GmDuWA242iHMq4cC7A8kJ7i8o1+skSa7Jieo38HCWnoNjKFhdSFBxzpZ7QE6lI8N4S14aASZcryaV/WWHw66f6NHuCoxuQxmvM56GX9QMd8Q4D65ywGP+ZzRJuM+zQvx/MOS2VFeqQ4IXnH26zM9Xe6/E6D+4foAzzuajPZp8Qyw5ayZVDWuH0z0BtYRkeIDqH9KO9VbH1btd/lhNqCzvl8zeLnG0S/hnU6baHfpiuO6yy0rd+DHURo/zYF5H26j03rQsip2ndzz82u1z9N4VjWKWeb68Tedpt95HRVXp7H1R6p+/Wt4FPy/PpWwscOLRJ+PVWF/+W0iVyGzs18TIvXkOJ1Wxm66vSXz+vylenrZcj1ub439W+K8RNCGTJi2p/TJ1K23VaXr35tRpnzmjxequgfcfyk6B/TGBVlyedsNgpdd/h+W1U3P99QyFPNo1X3TwpM/WLTIWYfoBqXrv6iskHZ/RFr79R6hIyHBrH3f1nrUVnjP8SnZZ+rYtzr9Exld5MNbPNErusAPg+77u/eDOPftU9yj39TH7rezxd1LvsZQJlzkWlOirG/79zjMj/mtHUKu7vKy+3/LnXr9okyKedjX5/0He9iP/j63LwOQdarEVlfy8OO/Lqw023j6xcqmwxLiOd6heM2i9cV9LJy8jMJ23yQ+rpbfu7EQ/pXE8KYvUSqvVnb4XzZa6LrHMXHR+zcLvqWbm/Bn0/HzIs6fWPHoat8XfnDKmZGxRxeMbn2UqZ5Q94nmcZRbqqUXbZ8+lcjE+cPX11t814orvvAXNcG8vqj2vvk1MGn3anlj0bIT72v47bvE+Lc98T9b6r7AKn6j+8Duf7D0nnZx/j7Zjn0j9nbpSTndaLr9WNLivP+iN23xF7L+fqv6ZouFyb78jxVXvv5jJ9YUs9/sddO8h7KNg5jrhfaJGztT6G7KF+1d6yCmD5Kdb2fan60rSc552fZr3zeQ9DpnPp+Si5cx5Ktv2QfSzF/mMbWdOm46rFI4XstnU9xeqX4NKb7TKEdcr6pZOK3ID1k/LvFHkVczEuZLEDr499YqvqBym1aEHWgcvoYOtv0M91qQl5TfpO/in6rWx8OVpT1Wedkv3f5xom3T/xeR/6Gx6V86PWAOB4bBpqWdN+yTcVxjIyGRz/FrDGu6w/3d7kPm8StX8RyPu+uuvpNju/vTLJV37GpvoM0oZPnW87VLnL/5pDno1NoW1R6yedU6TyUv3u19a3KFnIbTLYz+ZCLP4T0tU1uivFgso0pnsJ/UtXvarNY28Xq5cvkBDrQP/E5ZaiuQwwfmTlsOiQRU1fMuqrDd/3ISSuwjOwXOfTyGUMpZIXq4GpLn3pUcdfzch2x7XO1u2uZHOPb1G6b3Xg9PH1IIWeEpJlPQtqos2EKW8b0u8rnuP1UeVLoXJb9be0uG9nnbchjU+XTszT5VeNBThPHnc5OKj1U9aj0GTHIVaGy1YhEWT4ixns00DT+XEzWn/7VAsIc63Cov3OdyhwjrnaqQqZvWKXdypRdlq+k8msZ031U+Rm4fA+3TtyeR9hwfW9G9yxDN0fZMN33F+9TE6md4hwoxumfaUzI9fN3PFT3xVV2msrQ3UsnChm6Nulk8TndpS28D3zX9tTIPsF/z7Am5OkTjm1tI1JZW74+4VgsZ0N3L1yXV3WeP5uR7TGHHdvC3JQlxybfpd22tDlk/2eofRK8TzrN/qnar/K/OUTth6I/+jAnEptNbPvFHP2gs40N3+dfMWtwqvVct7/wfd8gtQ7imifial9ZJ9/3IHLYU6eDj3+4PhsNhX+vwvcWLnu6kGfEMe8DuciPfUfGZB8X/7HJy/Gefe5n+VRGFd/wyP2ta7/LO4yh/sbLV/k9lev6kfO9Dt/5U67b1/6u/epqB1U9Me23jfHY9sscAg4tkbLl+e4/U36rJ9ddxfd6sg5vq5ice42Wpk/pb9FOJ36/W9tpv4kbC79nUbZceX8Zu6/qJ+P3WvhvA8v3reh7Jbn2d6rrNC7XNZTLma4Ba0JI9efX2uLzF5scG/w9UNU1ZxW+ymUfzELeTllXlQ1rUuhzjS5fp9c964iFBOqeSz63bU065nZKdU+mDEz3qHIjjifquw0pnb/raRtvrnsYcb46ihT3taoYz6brdNW9l6rWRnE/navdPn1XlR1km7hcz1WlH/elKuSOSvLLuE8U6m8uzwRdfcGl73VyTHuyMvzJ1Sa2cWDTP/Z63Kc94n2B1PYr24dz1JlyHLlcP+S4B6vD1c9EW4q2LWstCvUjeVy63k/LMYdUNd5D1xQfvVTzX1VjkMsUv88N8VH5fReVn/Fjn++/h6X6Q8a6b1/q3g/i/ewi0/Scs8zxXeV6mWIOUPlPzBgdFerW+bZrm2P18dnjuK6HunEp+rHvPMXbr+sHVb/lnL+pTP57jPw9Cvk3PW178JD9qChfzuvTf7Htl38L1QUf/VKu9SFjwWbTWPvFEvu7Uq76y7+31g6QlYPc669pbsm9Xur2LWI9Pu8ypfDXqm3A2z8s1FWGn4ntL9NfQu2oSlftX9uetvTtv7J8Ql4zxfXGZ3zk8PeQ9w59x2uMfqI8/q5eKh/l9cb2rwsu9rSNl06ZP2Pmxtz+rNMx93yno0n2/82rVH7rQ+y9P15H6FyRun9ViH81ATmffI7nJ5r8uXXW6enbP6b/B8/l5OifVHYLnb9S39s2zcc+Ph+rh8+eQgVPS72elzGWY/tUtbbabBpDiI7yN1q6/4th2y+ErAc5+9BVvu/7KamJbWNZeuqI/R4tRf+YyD1HmOZM1bMV3/14Sn10c0Xu+Sj1nOXb5jL73ncdy02uvlXZNde65dOHYl7Vs4KYuS6FzWLn2zJlpZqPXPVPOa5yzKOyn1VhT9lmMfdbfH7D11Wf2PXN5h9y+dD287+qxgSnaYmnIrRtIb8pJe6/Uv9OVer6Whn0zfGO/BEloZI9ojmfAlUflClDd178bTmVHVTpZXOkAlk/lb42UujmI89HH5V+cl7XtowY6vTxLVWok6UrGzoGTHN+bB+6ri05687VNpvfuvRfaP2uMlNQth1D5JjGelm/8yn+9p3p/7qk9gnfeddXZmq/Sm333PJT659Kv1zjNbZ9uv2Oi//67CV8/N1nj1DmviyXDNVeJkaeaX8UsyesYg8cu2+NvdaPfb+lLDu5tvt/");
const $557adaaeb0c7885f$var$classTrie = new $hJqJp$unicodetrie($557adaaeb0c7885f$var$data);
const $557adaaeb0c7885f$var$mapClass = function(c) {
    switch(c){
        case $1627905f8be2ef3f$export$d710c5f50fc7496a:
            return $1627905f8be2ef3f$export$1bb1140fe1358b00;
        case $1627905f8be2ef3f$export$da51c6332ad11d7b:
        case $1627905f8be2ef3f$export$bea437c40441867d:
        case $1627905f8be2ef3f$export$98e1f8a379849661:
            return $1627905f8be2ef3f$export$1bb1140fe1358b00;
        case $1627905f8be2ef3f$export$eb6c6d0b7c8826f2:
            return $1627905f8be2ef3f$export$fb4028874a74450;
        default:
            return c;
    }
};
const $557adaaeb0c7885f$var$mapFirst = function(c) {
    switch(c){
        case $1627905f8be2ef3f$export$606cfc2a8896c91f:
        case $1627905f8be2ef3f$export$e51d3c675bb0140d:
            return $1627905f8be2ef3f$export$66498d28055820a9;
        case $1627905f8be2ef3f$export$c4c7eecbfed13dc9:
            return $1627905f8be2ef3f$export$9e5d732f3676a9ba;
        default:
            return c;
    }
};
class $557adaaeb0c7885f$var$Break {
    constructor(position, required = false){
        this.position = position;
        this.required = required;
    }
}
class $557adaaeb0c7885f$var$LineBreaker {
    nextCodePoint() {
        const code = this.string.charCodeAt(this.pos++);
        const next = this.string.charCodeAt(this.pos);
        if (0xd800 <= code && code <= 0xdbff && 0xdc00 <= next && next <= 0xdfff) {
            this.pos++;
            return (code - 0xd800) * 0x400 + (next - 0xdc00) + 0x10000;
        }
        return code;
    }
    nextCharClass() {
        return $557adaaeb0c7885f$var$mapClass($557adaaeb0c7885f$var$classTrie.get(this.nextCodePoint()));
    }
    getSimpleBreak() {
        switch(this.nextClass){
            case $1627905f8be2ef3f$export$c4c7eecbfed13dc9:
                return false;
            case $1627905f8be2ef3f$export$66498d28055820a9:
            case $1627905f8be2ef3f$export$606cfc2a8896c91f:
            case $1627905f8be2ef3f$export$e51d3c675bb0140d:
                this.curClass = $1627905f8be2ef3f$export$66498d28055820a9;
                return false;
            case $1627905f8be2ef3f$export$de92be486109a1df:
                this.curClass = $1627905f8be2ef3f$export$de92be486109a1df;
                return false;
        }
        return null;
    }
    getPairTableBreak(lastClass) {
        let shouldBreak = false;
        switch($32627af916ac1b00$export$5bdb8ccbf5c57afc[this.curClass][this.nextClass]){
            case $32627af916ac1b00$export$98f50d781a474745:
                shouldBreak = true;
                break;
            case $32627af916ac1b00$export$12ee1f8f5315ca7e:
                shouldBreak = lastClass === $1627905f8be2ef3f$export$c4c7eecbfed13dc9;
                break;
            case $32627af916ac1b00$export$e4965ce242860454:
                shouldBreak = lastClass === $1627905f8be2ef3f$export$c4c7eecbfed13dc9;
                if (!shouldBreak) {
                    shouldBreak = false;
                    return shouldBreak;
                }
                break;
            case $32627af916ac1b00$export$8f14048969dcd45e:
                if (lastClass !== $1627905f8be2ef3f$export$c4c7eecbfed13dc9) return shouldBreak;
                break;
        }
        if (this.LB8a) shouldBreak = false;
        if (this.LB21a && (this.curClass === $1627905f8be2ef3f$export$24aa617c849a894a || this.curClass === $1627905f8be2ef3f$export$a73c4d14459b698d)) {
            shouldBreak = false;
            this.LB21a = false;
        } else this.LB21a = this.curClass === $1627905f8be2ef3f$export$f3e416a182673355;
        if (this.curClass === $1627905f8be2ef3f$export$1dff41d5c0caca01) {
            this.LB30a++;
            if (this.LB30a == 2 && this.nextClass === $1627905f8be2ef3f$export$1dff41d5c0caca01) {
                shouldBreak = true;
                this.LB30a = 0;
            }
        } else this.LB30a = 0;
        this.curClass = this.nextClass;
        return shouldBreak;
    }
    nextBreak() {
        if (this.curClass == null) {
            let firstClass = this.nextCharClass();
            this.curClass = $557adaaeb0c7885f$var$mapFirst(firstClass);
            this.nextClass = firstClass;
            this.LB8a = firstClass === $1627905f8be2ef3f$export$30a74a373318dec6;
            this.LB30a = 0;
        }
        while(this.pos < this.string.length){
            this.lastPos = this.pos;
            const lastClass = this.nextClass;
            this.nextClass = this.nextCharClass();
            if (this.curClass === $1627905f8be2ef3f$export$66498d28055820a9 || this.curClass === $1627905f8be2ef3f$export$de92be486109a1df && this.nextClass !== $1627905f8be2ef3f$export$606cfc2a8896c91f) {
                this.curClass = $557adaaeb0c7885f$var$mapFirst($557adaaeb0c7885f$var$mapClass(this.nextClass));
                return new $557adaaeb0c7885f$var$Break(this.lastPos, true);
            }
            let shouldBreak = this.getSimpleBreak();
            if (shouldBreak === null) shouldBreak = this.getPairTableBreak(lastClass);
            this.LB8a = this.nextClass === $1627905f8be2ef3f$export$30a74a373318dec6;
            if (shouldBreak) return new $557adaaeb0c7885f$var$Break(this.lastPos);
        }
        if (this.lastPos < this.string.length) {
            this.lastPos = this.string.length;
            return new $557adaaeb0c7885f$var$Break(this.string.length);
        }
        return null;
    }
    constructor(string){
        this.string = string;
        this.pos = 0;
        this.lastPos = 0;
        this.curClass = null;
        this.nextClass = null;
        this.LB8a = false;
        this.LB21a = false;
        this.LB30a = 0;
    }
}
$557adaaeb0c7885f$exports = $557adaaeb0c7885f$var$LineBreaker;

const fs = virtualFs_1;
const zlib = lib;
var pngNode = class PNG {
  static decode(path, fn) {
    return fs.readFile(path, function(err, file) {
      const png = new PNG(file);
      return png.decode(pixels => fn(pixels));
    });
  }
  static load(path) {
    const file = fs.readFileSync(path);
    return new PNG(file);
  }
  constructor(data) {
    let i;
    this.data = data;
    this.pos = 8;
    this.palette = [];
    this.imgData = [];
    this.transparency = {};
    this.text = {};
    while (true) {
      const chunkSize = this.readUInt32();
      let section = '';
      for (i = 0; i < 4; i++) {
        section += String.fromCharCode(this.data[this.pos++]);
      }
      switch (section) {
        case 'IHDR':
          this.width = this.readUInt32();
          this.height = this.readUInt32();
          this.bits = this.data[this.pos++];
          this.colorType = this.data[this.pos++];
          this.compressionMethod = this.data[this.pos++];
          this.filterMethod = this.data[this.pos++];
          this.interlaceMethod = this.data[this.pos++];
          break;
        case 'PLTE':
          this.palette = this.read(chunkSize);
          break;
        case 'IDAT':
          for (i = 0; i < chunkSize; i++) {
            this.imgData.push(this.data[this.pos++]);
          }
          break;
        case 'tRNS':
          this.transparency = {};
          switch (this.colorType) {
            case 3:
              this.transparency.indexed = this.read(chunkSize);
              var short = 255 - this.transparency.indexed.length;
              if (short > 0) {
                for (i = 0; i < short; i++) {
                  this.transparency.indexed.push(255);
                }
              }
              break;
            case 0:
              this.transparency.grayscale = this.read(chunkSize)[0];
              break;
            case 2:
              this.transparency.rgb = this.read(chunkSize);
              break;
          }
          break;
        case 'tEXt':
          var text = this.read(chunkSize);
          var index = text.indexOf(0);
          var key = String.fromCharCode.apply(String, text.slice(0, index));
          this.text[key] = String.fromCharCode.apply(
            String,
            text.slice(index + 1)
          );
          break;
        case 'IEND':
          switch (this.colorType) {
            case 0:
            case 3:
            case 4:
              this.colors = 1;
              break;
            case 2:
            case 6:
              this.colors = 3;
              break;
          }
          this.hasAlphaChannel = [4, 6].includes(this.colorType);
          var colors = this.colors + (this.hasAlphaChannel ? 1 : 0);
          this.pixelBitlength = this.bits * colors;
          switch (this.colors) {
            case 1:
              this.colorSpace = 'DeviceGray';
              break;
            case 3:
              this.colorSpace = 'DeviceRGB';
              break;
          }
          this.imgData = new buffer.Buffer(this.imgData);
          return;
        default:
          this.pos += chunkSize;
      }
      this.pos += 4;
      if (this.pos > this.data.length) {
        throw new Error('Incomplete or corrupt PNG file');
      }
    }
  }
  read(bytes) {
    const result = new Array(bytes);
    for (let i = 0; i < bytes; i++) {
      result[i] = this.data[this.pos++];
    }
    return result;
  }
  readUInt32() {
    const b1 = this.data[this.pos++] << 24;
    const b2 = this.data[this.pos++] << 16;
    const b3 = this.data[this.pos++] << 8;
    const b4 = this.data[this.pos++];
    return b1 | b2 | b3 | b4;
  }
  readUInt16() {
    const b1 = this.data[this.pos++] << 8;
    const b2 = this.data[this.pos++];
    return b1 | b2;
  }
  decodePixels(fn) {
    return zlib.inflate(this.imgData, (err, data) => {
      if (err) {
        throw err;
      }
      const { width, height } = this;
      const pixelBytes = this.pixelBitlength / 8;
      const pixels = new buffer.Buffer(width * height * pixelBytes);
      const { length } = data;
      let pos = 0;
      function pass(x0, y0, dx, dy, singlePass = false) {
        const w = Math.ceil((width - x0) / dx);
        const h = Math.ceil((height - y0) / dy);
        const scanlineLength = pixelBytes * w;
        const buffer$1 = singlePass ? pixels : new buffer.Buffer(scanlineLength * h);
        let row = 0;
        let c = 0;
        while (row < h && pos < length) {
          var byte, col, i, left, upper;
          switch (data[pos++]) {
            case 0:
              for (i = 0; i < scanlineLength; i++) {
                buffer$1[c++] = data[pos++];
              }
              break;
            case 1:
              for (i = 0; i < scanlineLength; i++) {
                byte = data[pos++];
                left = i < pixelBytes ? 0 : buffer$1[c - pixelBytes];
                buffer$1[c++] = (byte + left) % 256;
              }
              break;
            case 2:
              for (i = 0; i < scanlineLength; i++) {
                byte = data[pos++];
                col = (i - (i % pixelBytes)) / pixelBytes;
                upper =
                  row &&
                  buffer$1[
                    (row - 1) * scanlineLength +
                      col * pixelBytes +
                      (i % pixelBytes)
                  ];
                buffer$1[c++] = (upper + byte) % 256;
              }
              break;
            case 3:
              for (i = 0; i < scanlineLength; i++) {
                byte = data[pos++];
                col = (i - (i % pixelBytes)) / pixelBytes;
                left = i < pixelBytes ? 0 : buffer$1[c - pixelBytes];
                upper =
                  row &&
                  buffer$1[
                    (row - 1) * scanlineLength +
                      col * pixelBytes +
                      (i % pixelBytes)
                  ];
                buffer$1[c++] = (byte + Math.floor((left + upper) / 2)) % 256;
              }
              break;
            case 4:
              for (i = 0; i < scanlineLength; i++) {
                var paeth, upperLeft;
                byte = data[pos++];
                col = (i - (i % pixelBytes)) / pixelBytes;
                left = i < pixelBytes ? 0 : buffer$1[c - pixelBytes];
                if (row === 0) {
                  upper = upperLeft = 0;
                } else {
                  upper =
                    buffer$1[
                      (row - 1) * scanlineLength +
                        col * pixelBytes +
                        (i % pixelBytes)
                    ];
                  upperLeft =
                    col &&
                    buffer$1[
                      (row - 1) * scanlineLength +
                        (col - 1) * pixelBytes +
                        (i % pixelBytes)
                    ];
                }
                const p = left + upper - upperLeft;
                const pa = Math.abs(p - left);
                const pb = Math.abs(p - upper);
                const pc = Math.abs(p - upperLeft);
                if (pa <= pb && pa <= pc) {
                  paeth = left;
                } else if (pb <= pc) {
                  paeth = upper;
                } else {
                  paeth = upperLeft;
                }
                buffer$1[c++] = (byte + paeth) % 256;
              }
              break;
            default:
              throw new Error(`Invalid filter algorithm: ${data[pos - 1]}`);
          }
          if (!singlePass) {
            let pixelsPos = ((y0 + row * dy) * width + x0) * pixelBytes;
            let bufferPos = row * scanlineLength;
            for (i = 0; i < w; i++) {
              for (let j = 0; j < pixelBytes; j++)
                pixels[pixelsPos++] = buffer$1[bufferPos++];
              pixelsPos += (dx - 1) * pixelBytes;
            }
          }
          row++;
        }
      }
      if (this.interlaceMethod === 1) {
        pass(0, 0, 8, 8);
        pass(4, 0, 8, 8);
        pass(0, 4, 4, 8);
        pass(2, 0, 4, 4);
        pass(0, 2, 2, 4);
        pass(1, 0, 2, 2);
        pass(0, 1, 1, 2);
      } else {
        pass(0, 0, 1, 1, true);
      }
      return fn(pixels);
    });
  }
  decodePalette() {
    const { palette } = this;
    const { length } = palette;
    const transparency = this.transparency.indexed || [];
    const ret = new buffer.Buffer(transparency.length + length);
    let pos = 0;
    let c = 0;
    for (let i = 0; i < length; i += 3) {
      var left;
      ret[pos++] = palette[i];
      ret[pos++] = palette[i + 1];
      ret[pos++] = palette[i + 2];
      ret[pos++] = (left = transparency[c++]) != null ? left : 255;
    }
    return ret;
  }
  copyToImageData(imageData, pixels) {
    let j, k;
    let { colors } = this;
    let palette = null;
    let alpha = this.hasAlphaChannel;
    if (this.palette.length) {
      palette =
        this._decodedPalette || (this._decodedPalette = this.decodePalette());
      colors = 4;
      alpha = true;
    }
    const data = imageData.data || imageData;
    const { length } = data;
    const input = palette || pixels;
    let i = (j = 0);
    if (colors === 1) {
      while (i < length) {
        k = palette ? pixels[i / 4] * 4 : j;
        const v = input[k++];
        data[i++] = v;
        data[i++] = v;
        data[i++] = v;
        data[i++] = alpha ? input[k++] : 255;
        j = k;
      }
    } else {
      while (i < length) {
        k = palette ? pixels[i / 4] * 4 : j;
        data[i++] = input[k++];
        data[i++] = input[k++];
        data[i++] = input[k++];
        data[i++] = alpha ? input[k++] : 255;
        j = k;
      }
    }
  }
  decode(fn) {
    const ret = new buffer.Buffer(this.width * this.height * 4);
    return this.decodePixels(pixels => {
      this.copyToImageData(ret, pixels);
      return fn(ret);
    });
  }
};

var PNG = /*@__PURE__*/getDefaultExportFromCjs$1(pngNode);

function _classCallCheck$1(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}
function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };
  return _setPrototypeOf(o, p);
}
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;
  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}
function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized(self);
}
function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}
function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
}
function _iterableToArrayLimit(arr, i) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;
  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }
  return _arr;
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _createForOfIteratorHelper(o, allowArrayLike) {
  var it;
  if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it) o = it;
      var i = 0;
      var F = function () {};
      return {
        s: F,
        n: function () {
          if (i >= o.length) return {
            done: true
          };
          return {
            done: false,
            value: o[i++]
          };
        },
        e: function (e) {
          throw e;
        },
        f: F
      };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var normalCompletion = true,
      didErr = false,
      err;
  return {
    s: function () {
      it = o[Symbol.iterator]();
    },
    n: function () {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    },
    e: function (e) {
      didErr = true;
      err = e;
    },
    f: function () {
      try {
        if (!normalCompletion && it.return != null) it.return();
      } finally {
        if (didErr) throw err;
      }
    }
  };
}
var PDFAbstractReference = function () {
  function PDFAbstractReference() {
    _classCallCheck$1(this, PDFAbstractReference);
  }
  _createClass(PDFAbstractReference, [{
    key: "toString",
    value: function toString() {
      throw new Error('Must be implemented by subclasses');
    }
  }]);
  return PDFAbstractReference;
}();
var PDFTree = function () {
  function PDFTree() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    _classCallCheck$1(this, PDFTree);
    this._items = {};
    this.limits = typeof options.limits === 'boolean' ? options.limits : true;
  }
  _createClass(PDFTree, [{
    key: "add",
    value: function add(key, val) {
      return this._items[key] = val;
    }
  }, {
    key: "get",
    value: function get(key) {
      return this._items[key];
    }
  }, {
    key: "toString",
    value: function toString() {
      var _this = this;
      var sortedKeys = Object.keys(this._items).sort(function (a, b) {
        return _this._compareKeys(a, b);
      });
      var out = ['<<'];
      if (this.limits && sortedKeys.length > 1) {
        var first = sortedKeys[0],
            last = sortedKeys[sortedKeys.length - 1];
        out.push("  /Limits ".concat(PDFObject.convert([this._dataForKey(first), this._dataForKey(last)])));
      }
      out.push("  /".concat(this._keysName(), " ["));
      var _iterator = _createForOfIteratorHelper(sortedKeys),
          _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var key = _step.value;
          out.push("    ".concat(PDFObject.convert(this._dataForKey(key)), " ").concat(PDFObject.convert(this._items[key])));
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      out.push(']');
      out.push('>>');
      return out.join('\n');
    }
  }, {
    key: "_compareKeys",
    value: function _compareKeys()
    {
      throw new Error('Must be implemented by subclasses');
    }
  }, {
    key: "_keysName",
    value: function _keysName() {
      throw new Error('Must be implemented by subclasses');
    }
  }, {
    key: "_dataForKey",
    value: function _dataForKey()
    {
      throw new Error('Must be implemented by subclasses');
    }
  }]);
  return PDFTree;
}();
var pad = function pad(str, length) {
  return (Array(length + 1).join('0') + str).slice(-length);
};
var escapableRe = /[\n\r\t\b\f()\\]/g;
var escapable = {
  '\n': '\\n',
  '\r': '\\r',
  '\t': '\\t',
  '\b': '\\b',
  '\f': '\\f',
  '\\': '\\\\',
  '(': '\\(',
  ')': '\\)'
};
var swapBytes = function swapBytes(buff) {
  var l = buff.length;
  if (l & 0x01) {
    throw new Error('Buffer length must be even');
  } else {
    for (var i = 0, end = l - 1; i < end; i += 2) {
      var a = buff[i];
      buff[i] = buff[i + 1];
      buff[i + 1] = a;
    }
  }
  return buff;
};
var PDFObject = function () {
  function PDFObject() {
    _classCallCheck$1(this, PDFObject);
  }
  _createClass(PDFObject, null, [{
    key: "convert",
    value: function convert(object) {
      var encryptFn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      if (typeof object === 'string') {
        return "/".concat(object);
      } else if (object instanceof String) {
        var string = object;
        var isUnicode = false;
        for (var i = 0, end = string.length; i < end; i++) {
          if (string.charCodeAt(i) > 0x7f) {
            isUnicode = true;
            break;
          }
        }
        var stringBuffer;
        if (isUnicode) {
          stringBuffer = swapBytes(buffer.Buffer.from("\uFEFF".concat(string), 'utf16le'));
        } else {
          stringBuffer = buffer.Buffer.from(string.valueOf(), 'ascii');
        }
        if (encryptFn) {
          string = encryptFn(stringBuffer).toString('binary');
        } else {
          string = stringBuffer.toString('binary');
        }
        string = string.replace(escapableRe, function (c) {
          return escapable[c];
        });
        return "(".concat(string, ")");
      } else if (buffer.Buffer.isBuffer(object)) {
        return "<".concat(object.toString('hex'), ">");
      } else if (object instanceof PDFAbstractReference || object instanceof PDFTree) {
        return object.toString();
      } else if (object instanceof Date) {
        var _string = "D:".concat(pad(object.getUTCFullYear(), 4)) + pad(object.getUTCMonth() + 1, 2) + pad(object.getUTCDate(), 2) + pad(object.getUTCHours(), 2) + pad(object.getUTCMinutes(), 2) + pad(object.getUTCSeconds(), 2) + 'Z';
        if (encryptFn) {
          _string = encryptFn(buffer.Buffer.from(_string, 'ascii')).toString('binary');
          _string = _string.replace(escapableRe, function (c) {
            return escapable[c];
          });
        }
        return "(".concat(_string, ")");
      } else if (Array.isArray(object)) {
        var items = object.map(function (e) {
          return PDFObject.convert(e, encryptFn);
        }).join(' ');
        return "[".concat(items, "]");
      } else if ({}.toString.call(object) === '[object Object]') {
        var out = ['<<'];
        for (var key in object) {
          var val = object[key];
          out.push("/".concat(key, " ").concat(PDFObject.convert(val, encryptFn)));
        }
        out.push('>>');
        return out.join('\n');
      } else if (typeof object === 'number') {
        return PDFObject.number(object);
      } else {
        return "".concat(object);
      }
    }
  }, {
    key: "number",
    value: function number(n) {
      if (n > -1e21 && n < 1e21) {
        return Math.round(n * 1e6) / 1e6;
      }
      throw new Error("unsupported number: ".concat(n));
    }
  }]);
  return PDFObject;
}();
var PDFReference = function (_PDFAbstractReference) {
  _inherits(PDFReference, _PDFAbstractReference);
  var _super = _createSuper(PDFReference);
  function PDFReference(document, id) {
    var _this;
    var data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    _classCallCheck$1(this, PDFReference);
    _this = _super.call(this);
    _this.document = document;
    _this.id = id;
    _this.data = data;
    _this.gen = 0;
    _this.compress = _this.document.compress && !_this.data.Filter;
    _this.uncompressedLength = 0;
    _this.buffer = [];
    return _this;
  }
  _createClass(PDFReference, [{
    key: "write",
    value: function write(chunk) {
      if (!buffer.Buffer.isBuffer(chunk)) {
        chunk = buffer.Buffer.from(chunk + '\n', 'binary');
      }
      this.uncompressedLength += chunk.length;
      if (this.data.Length == null) {
        this.data.Length = 0;
      }
      this.buffer.push(chunk);
      this.data.Length += chunk.length;
      if (this.compress) {
        return this.data.Filter = 'FlateDecode';
      }
    }
  }, {
    key: "end",
    value: function end(chunk) {
      if (chunk) {
        this.write(chunk);
      }
      return this.finalize();
    }
  }, {
    key: "finalize",
    value: function finalize() {
      this.offset = this.document._offset;
      var encryptFn = this.document._security ? this.document._security.getEncryptFn(this.id, this.gen) : null;
      if (this.buffer.length) {
        this.buffer = buffer.Buffer.concat(this.buffer);
        if (this.compress) {
          this.buffer = zlib$1.deflateSync(this.buffer);
        }
        if (encryptFn) {
          this.buffer = encryptFn(this.buffer);
        }
        this.data.Length = this.buffer.length;
      }
      this.document._write("".concat(this.id, " ").concat(this.gen, " obj"));
      this.document._write(PDFObject.convert(this.data, encryptFn));
      if (this.buffer.length) {
        this.document._write('stream');
        this.document._write(this.buffer);
        this.buffer = [];
        this.document._write('\nendstream');
      }
      this.document._write('endobj');
      this.document._refEnd(this);
    }
  }, {
    key: "toString",
    value: function toString() {
      return "".concat(this.id, " ").concat(this.gen, " R");
    }
  }]);
  return PDFReference;
}(PDFAbstractReference);
var DEFAULT_MARGINS = {
  top: 72,
  left: 72,
  bottom: 72,
  right: 72
};
var SIZES = {
  '4A0': [4767.87, 6740.79],
  '2A0': [3370.39, 4767.87],
  A0: [2383.94, 3370.39],
  A1: [1683.78, 2383.94],
  A2: [1190.55, 1683.78],
  A3: [841.89, 1190.55],
  A4: [595.28, 841.89],
  A5: [419.53, 595.28],
  A6: [297.64, 419.53],
  A7: [209.76, 297.64],
  A8: [147.4, 209.76],
  A9: [104.88, 147.4],
  A10: [73.7, 104.88],
  B0: [2834.65, 4008.19],
  B1: [2004.09, 2834.65],
  B2: [1417.32, 2004.09],
  B3: [1000.63, 1417.32],
  B4: [708.66, 1000.63],
  B5: [498.9, 708.66],
  B6: [354.33, 498.9],
  B7: [249.45, 354.33],
  B8: [175.75, 249.45],
  B9: [124.72, 175.75],
  B10: [87.87, 124.72],
  C0: [2599.37, 3676.54],
  C1: [1836.85, 2599.37],
  C2: [1298.27, 1836.85],
  C3: [918.43, 1298.27],
  C4: [649.13, 918.43],
  C5: [459.21, 649.13],
  C6: [323.15, 459.21],
  C7: [229.61, 323.15],
  C8: [161.57, 229.61],
  C9: [113.39, 161.57],
  C10: [79.37, 113.39],
  RA0: [2437.8, 3458.27],
  RA1: [1729.13, 2437.8],
  RA2: [1218.9, 1729.13],
  RA3: [864.57, 1218.9],
  RA4: [609.45, 864.57],
  SRA0: [2551.18, 3628.35],
  SRA1: [1814.17, 2551.18],
  SRA2: [1275.59, 1814.17],
  SRA3: [907.09, 1275.59],
  SRA4: [637.8, 907.09],
  EXECUTIVE: [521.86, 756.0],
  FOLIO: [612.0, 936.0],
  LEGAL: [612.0, 1008.0],
  LETTER: [612.0, 792.0],
  TABLOID: [792.0, 1224.0]
};
var PDFPage = function () {
  function PDFPage(document) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    _classCallCheck$1(this, PDFPage);
    this.document = document;
    this.size = options.size || 'letter';
    this.layout = options.layout || 'portrait';
    if (typeof options.margin === 'number') {
      this.margins = {
        top: options.margin,
        left: options.margin,
        bottom: options.margin,
        right: options.margin
      };
    } else {
      this.margins = options.margins || DEFAULT_MARGINS;
    }
    var dimensions = Array.isArray(this.size) ? this.size : SIZES[this.size.toUpperCase()];
    this.width = dimensions[this.layout === 'portrait' ? 0 : 1];
    this.height = dimensions[this.layout === 'portrait' ? 1 : 0];
    this.content = this.document.ref();
    this.resources = this.document.ref({
      ProcSet: ['PDF', 'Text', 'ImageB', 'ImageC', 'ImageI']
    });
    this.dictionary = this.document.ref({
      Type: 'Page',
      Parent: this.document._root.data.Pages,
      MediaBox: [0, 0, this.width, this.height],
      Contents: this.content,
      Resources: this.resources
    });
    this.markings = [];
  }
  _createClass(PDFPage, [{
    key: "maxY",
    value: function maxY() {
      return this.height - this.margins.bottom;
    }
  }, {
    key: "write",
    value: function write(chunk) {
      return this.content.write(chunk);
    }
  }, {
    key: "end",
    value: function end() {
      this.dictionary.end();
      this.resources.end();
      return this.content.end();
    }
  }, {
    key: "fonts",
    get: function get() {
      var data = this.resources.data;
      return data.Font != null ? data.Font : data.Font = {};
    }
  }, {
    key: "xobjects",
    get: function get() {
      var data = this.resources.data;
      return data.XObject != null ? data.XObject : data.XObject = {};
    }
  }, {
    key: "ext_gstates",
    get: function get() {
      var data = this.resources.data;
      return data.ExtGState != null ? data.ExtGState : data.ExtGState = {};
    }
  }, {
    key: "patterns",
    get: function get() {
      var data = this.resources.data;
      return data.Pattern != null ? data.Pattern : data.Pattern = {};
    }
  }, {
    key: "colorSpaces",
    get: function get() {
      var data = this.resources.data;
      return data.ColorSpace || (data.ColorSpace = {});
    }
  }, {
    key: "annotations",
    get: function get() {
      var data = this.dictionary.data;
      return data.Annots != null ? data.Annots : data.Annots = [];
    }
  }, {
    key: "structParentTreeKey",
    get: function get() {
      var data = this.dictionary.data;
      return data.StructParents != null ? data.StructParents : data.StructParents = this.document.createStructParentTreeNextKey();
    }
  }]);
  return PDFPage;
}();
var PDFNameTree = function (_PDFTree) {
  _inherits(PDFNameTree, _PDFTree);
  var _super = _createSuper(PDFNameTree);
  function PDFNameTree() {
    _classCallCheck$1(this, PDFNameTree);
    return _super.apply(this, arguments);
  }
  _createClass(PDFNameTree, [{
    key: "_compareKeys",
    value: function _compareKeys(a, b) {
      return a.localeCompare(b);
    }
  }, {
    key: "_keysName",
    value: function _keysName() {
      return "Names";
    }
  }, {
    key: "_dataForKey",
    value: function _dataForKey(k) {
      return new String(k);
    }
  }]);
  return PDFNameTree;
}(PDFTree);
function inRange(value, rangeGroup) {
  if (value < rangeGroup[0]) return false;
  var startRange = 0;
  var endRange = rangeGroup.length / 2;
  while (startRange <= endRange) {
    var middleRange = Math.floor((startRange + endRange) / 2);
    var arrayIndex = middleRange * 2;
    if (value >= rangeGroup[arrayIndex] && value <= rangeGroup[arrayIndex + 1]) {
      return true;
    }
    if (value > rangeGroup[arrayIndex + 1]) {
      startRange = middleRange + 1;
    } else {
      endRange = middleRange - 1;
    }
  }
  return false;
}
var unassigned_code_points = [0x0221, 0x0221, 0x0234, 0x024f, 0x02ae, 0x02af, 0x02ef, 0x02ff, 0x0350, 0x035f, 0x0370, 0x0373, 0x0376, 0x0379, 0x037b, 0x037d, 0x037f, 0x0383, 0x038b, 0x038b, 0x038d, 0x038d, 0x03a2, 0x03a2, 0x03cf, 0x03cf, 0x03f7, 0x03ff, 0x0487, 0x0487, 0x04cf, 0x04cf, 0x04f6, 0x04f7, 0x04fa, 0x04ff, 0x0510, 0x0530, 0x0557, 0x0558, 0x0560, 0x0560, 0x0588, 0x0588, 0x058b, 0x0590, 0x05a2, 0x05a2, 0x05ba, 0x05ba, 0x05c5, 0x05cf, 0x05eb, 0x05ef, 0x05f5, 0x060b, 0x060d, 0x061a, 0x061c, 0x061e, 0x0620, 0x0620, 0x063b, 0x063f, 0x0656, 0x065f, 0x06ee, 0x06ef, 0x06ff, 0x06ff, 0x070e, 0x070e, 0x072d, 0x072f, 0x074b, 0x077f, 0x07b2, 0x0900, 0x0904, 0x0904, 0x093a, 0x093b, 0x094e, 0x094f, 0x0955, 0x0957, 0x0971, 0x0980, 0x0984, 0x0984, 0x098d, 0x098e, 0x0991, 0x0992, 0x09a9, 0x09a9, 0x09b1, 0x09b1, 0x09b3, 0x09b5, 0x09ba, 0x09bb, 0x09bd, 0x09bd, 0x09c5, 0x09c6, 0x09c9, 0x09ca, 0x09ce, 0x09d6, 0x09d8, 0x09db, 0x09de, 0x09de, 0x09e4, 0x09e5, 0x09fb, 0x0a01, 0x0a03, 0x0a04, 0x0a0b, 0x0a0e, 0x0a11, 0x0a12, 0x0a29, 0x0a29, 0x0a31, 0x0a31, 0x0a34, 0x0a34, 0x0a37, 0x0a37, 0x0a3a, 0x0a3b, 0x0a3d, 0x0a3d, 0x0a43, 0x0a46, 0x0a49, 0x0a4a, 0x0a4e, 0x0a58, 0x0a5d, 0x0a5d, 0x0a5f, 0x0a65, 0x0a75, 0x0a80, 0x0a84, 0x0a84, 0x0a8c, 0x0a8c, 0x0a8e, 0x0a8e, 0x0a92, 0x0a92, 0x0aa9, 0x0aa9, 0x0ab1, 0x0ab1, 0x0ab4, 0x0ab4, 0x0aba, 0x0abb, 0x0ac6, 0x0ac6, 0x0aca, 0x0aca, 0x0ace, 0x0acf, 0x0ad1, 0x0adf, 0x0ae1, 0x0ae5, 0x0af0, 0x0b00, 0x0b04, 0x0b04, 0x0b0d, 0x0b0e, 0x0b11, 0x0b12, 0x0b29, 0x0b29, 0x0b31, 0x0b31, 0x0b34, 0x0b35, 0x0b3a, 0x0b3b, 0x0b44, 0x0b46, 0x0b49, 0x0b4a, 0x0b4e, 0x0b55, 0x0b58, 0x0b5b, 0x0b5e, 0x0b5e, 0x0b62, 0x0b65, 0x0b71, 0x0b81, 0x0b84, 0x0b84, 0x0b8b, 0x0b8d, 0x0b91, 0x0b91, 0x0b96, 0x0b98, 0x0b9b, 0x0b9b, 0x0b9d, 0x0b9d, 0x0ba0, 0x0ba2, 0x0ba5, 0x0ba7, 0x0bab, 0x0bad, 0x0bb6, 0x0bb6, 0x0bba, 0x0bbd, 0x0bc3, 0x0bc5, 0x0bc9, 0x0bc9, 0x0bce, 0x0bd6, 0x0bd8, 0x0be6, 0x0bf3, 0x0c00, 0x0c04, 0x0c04, 0x0c0d, 0x0c0d, 0x0c11, 0x0c11, 0x0c29, 0x0c29, 0x0c34, 0x0c34, 0x0c3a, 0x0c3d, 0x0c45, 0x0c45, 0x0c49, 0x0c49, 0x0c4e, 0x0c54, 0x0c57, 0x0c5f, 0x0c62, 0x0c65, 0x0c70, 0x0c81, 0x0c84, 0x0c84, 0x0c8d, 0x0c8d, 0x0c91, 0x0c91, 0x0ca9, 0x0ca9, 0x0cb4, 0x0cb4, 0x0cba, 0x0cbd, 0x0cc5, 0x0cc5, 0x0cc9, 0x0cc9, 0x0cce, 0x0cd4, 0x0cd7, 0x0cdd, 0x0cdf, 0x0cdf, 0x0ce2, 0x0ce5, 0x0cf0, 0x0d01, 0x0d04, 0x0d04, 0x0d0d, 0x0d0d, 0x0d11, 0x0d11, 0x0d29, 0x0d29, 0x0d3a, 0x0d3d, 0x0d44, 0x0d45, 0x0d49, 0x0d49, 0x0d4e, 0x0d56, 0x0d58, 0x0d5f, 0x0d62, 0x0d65, 0x0d70, 0x0d81, 0x0d84, 0x0d84, 0x0d97, 0x0d99, 0x0db2, 0x0db2, 0x0dbc, 0x0dbc, 0x0dbe, 0x0dbf, 0x0dc7, 0x0dc9, 0x0dcb, 0x0dce, 0x0dd5, 0x0dd5, 0x0dd7, 0x0dd7, 0x0de0, 0x0df1, 0x0df5, 0x0e00, 0x0e3b, 0x0e3e, 0x0e5c, 0x0e80, 0x0e83, 0x0e83, 0x0e85, 0x0e86, 0x0e89, 0x0e89, 0x0e8b, 0x0e8c, 0x0e8e, 0x0e93, 0x0e98, 0x0e98, 0x0ea0, 0x0ea0, 0x0ea4, 0x0ea4, 0x0ea6, 0x0ea6, 0x0ea8, 0x0ea9, 0x0eac, 0x0eac, 0x0eba, 0x0eba, 0x0ebe, 0x0ebf, 0x0ec5, 0x0ec5, 0x0ec7, 0x0ec7, 0x0ece, 0x0ecf, 0x0eda, 0x0edb, 0x0ede, 0x0eff, 0x0f48, 0x0f48, 0x0f6b, 0x0f70, 0x0f8c, 0x0f8f, 0x0f98, 0x0f98, 0x0fbd, 0x0fbd, 0x0fcd, 0x0fce, 0x0fd0, 0x0fff, 0x1022, 0x1022, 0x1028, 0x1028, 0x102b, 0x102b, 0x1033, 0x1035, 0x103a, 0x103f, 0x105a, 0x109f, 0x10c6, 0x10cf, 0x10f9, 0x10fa, 0x10fc, 0x10ff, 0x115a, 0x115e, 0x11a3, 0x11a7, 0x11fa, 0x11ff, 0x1207, 0x1207, 0x1247, 0x1247, 0x1249, 0x1249, 0x124e, 0x124f, 0x1257, 0x1257, 0x1259, 0x1259, 0x125e, 0x125f, 0x1287, 0x1287, 0x1289, 0x1289, 0x128e, 0x128f, 0x12af, 0x12af, 0x12b1, 0x12b1, 0x12b6, 0x12b7, 0x12bf, 0x12bf, 0x12c1, 0x12c1, 0x12c6, 0x12c7, 0x12cf, 0x12cf, 0x12d7, 0x12d7, 0x12ef, 0x12ef, 0x130f, 0x130f, 0x1311, 0x1311, 0x1316, 0x1317, 0x131f, 0x131f, 0x1347, 0x1347, 0x135b, 0x1360, 0x137d, 0x139f, 0x13f5, 0x1400, 0x1677, 0x167f, 0x169d, 0x169f, 0x16f1, 0x16ff, 0x170d, 0x170d, 0x1715, 0x171f, 0x1737, 0x173f, 0x1754, 0x175f, 0x176d, 0x176d, 0x1771, 0x1771, 0x1774, 0x177f, 0x17dd, 0x17df, 0x17ea, 0x17ff, 0x180f, 0x180f, 0x181a, 0x181f, 0x1878, 0x187f, 0x18aa, 0x1dff, 0x1e9c, 0x1e9f, 0x1efa, 0x1eff, 0x1f16, 0x1f17, 0x1f1e, 0x1f1f, 0x1f46, 0x1f47, 0x1f4e, 0x1f4f, 0x1f58, 0x1f58, 0x1f5a, 0x1f5a, 0x1f5c, 0x1f5c, 0x1f5e, 0x1f5e, 0x1f7e, 0x1f7f, 0x1fb5, 0x1fb5, 0x1fc5, 0x1fc5, 0x1fd4, 0x1fd5, 0x1fdc, 0x1fdc, 0x1ff0, 0x1ff1, 0x1ff5, 0x1ff5, 0x1fff, 0x1fff, 0x2053, 0x2056, 0x2058, 0x205e, 0x2064, 0x2069, 0x2072, 0x2073, 0x208f, 0x209f, 0x20b2, 0x20cf, 0x20eb, 0x20ff, 0x213b, 0x213c, 0x214c, 0x2152, 0x2184, 0x218f, 0x23cf, 0x23ff, 0x2427, 0x243f, 0x244b, 0x245f, 0x24ff, 0x24ff, 0x2614, 0x2615, 0x2618, 0x2618, 0x267e, 0x267f, 0x268a, 0x2700, 0x2705, 0x2705, 0x270a, 0x270b, 0x2728, 0x2728, 0x274c, 0x274c, 0x274e, 0x274e, 0x2753, 0x2755, 0x2757, 0x2757, 0x275f, 0x2760, 0x2795, 0x2797, 0x27b0, 0x27b0, 0x27bf, 0x27cf, 0x27ec, 0x27ef, 0x2b00, 0x2e7f, 0x2e9a, 0x2e9a, 0x2ef4, 0x2eff, 0x2fd6, 0x2fef, 0x2ffc, 0x2fff, 0x3040, 0x3040, 0x3097, 0x3098, 0x3100, 0x3104, 0x312d, 0x3130, 0x318f, 0x318f, 0x31b8, 0x31ef, 0x321d, 0x321f, 0x3244, 0x3250, 0x327c, 0x327e, 0x32cc, 0x32cf, 0x32ff, 0x32ff, 0x3377, 0x337a, 0x33de, 0x33df, 0x33ff, 0x33ff, 0x4db6, 0x4dff, 0x9fa6, 0x9fff, 0xa48d, 0xa48f, 0xa4c7, 0xabff, 0xd7a4, 0xd7ff, 0xfa2e, 0xfa2f, 0xfa6b, 0xfaff, 0xfb07, 0xfb12, 0xfb18, 0xfb1c, 0xfb37, 0xfb37, 0xfb3d, 0xfb3d, 0xfb3f, 0xfb3f, 0xfb42, 0xfb42, 0xfb45, 0xfb45, 0xfbb2, 0xfbd2, 0xfd40, 0xfd4f, 0xfd90, 0xfd91, 0xfdc8, 0xfdcf, 0xfdfd, 0xfdff, 0xfe10, 0xfe1f, 0xfe24, 0xfe2f, 0xfe47, 0xfe48, 0xfe53, 0xfe53, 0xfe67, 0xfe67, 0xfe6c, 0xfe6f, 0xfe75, 0xfe75, 0xfefd, 0xfefe, 0xff00, 0xff00, 0xffbf, 0xffc1, 0xffc8, 0xffc9, 0xffd0, 0xffd1, 0xffd8, 0xffd9, 0xffdd, 0xffdf, 0xffe7, 0xffe7, 0xffef, 0xfff8, 0x10000, 0x102ff, 0x1031f, 0x1031f, 0x10324, 0x1032f, 0x1034b, 0x103ff, 0x10426, 0x10427, 0x1044e, 0x1cfff, 0x1d0f6, 0x1d0ff, 0x1d127, 0x1d129, 0x1d1de, 0x1d3ff, 0x1d455, 0x1d455, 0x1d49d, 0x1d49d, 0x1d4a0, 0x1d4a1, 0x1d4a3, 0x1d4a4, 0x1d4a7, 0x1d4a8, 0x1d4ad, 0x1d4ad, 0x1d4ba, 0x1d4ba, 0x1d4bc, 0x1d4bc, 0x1d4c1, 0x1d4c1, 0x1d4c4, 0x1d4c4, 0x1d506, 0x1d506, 0x1d50b, 0x1d50c, 0x1d515, 0x1d515, 0x1d51d, 0x1d51d, 0x1d53a, 0x1d53a, 0x1d53f, 0x1d53f, 0x1d545, 0x1d545, 0x1d547, 0x1d549, 0x1d551, 0x1d551, 0x1d6a4, 0x1d6a7, 0x1d7ca, 0x1d7cd, 0x1d800, 0x1fffd, 0x2a6d7, 0x2f7ff, 0x2fa1e, 0x2fffd, 0x30000, 0x3fffd, 0x40000, 0x4fffd, 0x50000, 0x5fffd, 0x60000, 0x6fffd, 0x70000, 0x7fffd, 0x80000, 0x8fffd, 0x90000, 0x9fffd, 0xa0000, 0xafffd, 0xb0000, 0xbfffd, 0xc0000, 0xcfffd, 0xd0000, 0xdfffd, 0xe0000, 0xe0000, 0xe0002, 0xe001f, 0xe0080, 0xefffd];
var isUnassignedCodePoint = function isUnassignedCodePoint(character) {
  return inRange(character, unassigned_code_points);
};
var commonly_mapped_to_nothing = [0x00ad, 0x00ad, 0x034f, 0x034f, 0x1806, 0x1806, 0x180b, 0x180b, 0x180c, 0x180c, 0x180d, 0x180d, 0x200b, 0x200b, 0x200c, 0x200c, 0x200d, 0x200d, 0x2060, 0x2060, 0xfe00, 0xfe00, 0xfe01, 0xfe01, 0xfe02, 0xfe02, 0xfe03, 0xfe03, 0xfe04, 0xfe04, 0xfe05, 0xfe05, 0xfe06, 0xfe06, 0xfe07, 0xfe07, 0xfe08, 0xfe08, 0xfe09, 0xfe09, 0xfe0a, 0xfe0a, 0xfe0b, 0xfe0b, 0xfe0c, 0xfe0c, 0xfe0d, 0xfe0d, 0xfe0e, 0xfe0e, 0xfe0f, 0xfe0f, 0xfeff, 0xfeff];
var isCommonlyMappedToNothing = function isCommonlyMappedToNothing(character) {
  return inRange(character, commonly_mapped_to_nothing);
};
var non_ASCII_space_characters = [0x00a0, 0x00a0
, 0x1680, 0x1680
, 0x2000, 0x2000
, 0x2001, 0x2001
, 0x2002, 0x2002
, 0x2003, 0x2003
, 0x2004, 0x2004
, 0x2005, 0x2005
, 0x2006, 0x2006
, 0x2007, 0x2007
, 0x2008, 0x2008
, 0x2009, 0x2009
, 0x200a, 0x200a
, 0x200b, 0x200b
, 0x202f, 0x202f
, 0x205f, 0x205f
, 0x3000, 0x3000
];
var isNonASCIISpaceCharacter = function isNonASCIISpaceCharacter(character) {
  return inRange(character, non_ASCII_space_characters);
};
var non_ASCII_controls_characters = [
0x0080, 0x009f
, 0x06dd, 0x06dd
, 0x070f, 0x070f
, 0x180e, 0x180e
, 0x200c, 0x200c
, 0x200d, 0x200d
, 0x2028, 0x2028
, 0x2029, 0x2029
, 0x2060, 0x2060
, 0x2061, 0x2061
, 0x2062, 0x2062
, 0x2063, 0x2063
, 0x206a, 0x206f
, 0xfeff, 0xfeff
, 0xfff9, 0xfffc
, 0x1d173, 0x1d17a
];
var non_character_codepoints = [
0xfdd0, 0xfdef
, 0xfffe, 0xffff
, 0x1fffe, 0x1ffff
, 0x2fffe, 0x2ffff
, 0x3fffe, 0x3ffff
, 0x4fffe, 0x4ffff
, 0x5fffe, 0x5ffff
, 0x6fffe, 0x6ffff
, 0x7fffe, 0x7ffff
, 0x8fffe, 0x8ffff
, 0x9fffe, 0x9ffff
, 0xafffe, 0xaffff
, 0xbfffe, 0xbffff
, 0xcfffe, 0xcffff
, 0xdfffe, 0xdffff
, 0xefffe, 0xeffff
, 0x10fffe, 0x10ffff
];
var prohibited_characters = [
0, 0x001f
, 0x007f, 0x007f
,
0x0340, 0x0340
, 0x0341, 0x0341
, 0x200e, 0x200e
, 0x200f, 0x200f
, 0x202a, 0x202a
, 0x202b, 0x202b
, 0x202c, 0x202c
, 0x202d, 0x202d
, 0x202e, 0x202e
, 0x206a, 0x206a
, 0x206b, 0x206b
, 0x206c, 0x206c
, 0x206d, 0x206d
, 0x206e, 0x206e
, 0x206f, 0x206f
,
0x2ff0, 0x2ffb
,
0xd800, 0xdfff,
0xe000, 0xf8ff
,
0xfff9, 0xfff9
, 0xfffa, 0xfffa
, 0xfffb, 0xfffb
, 0xfffc, 0xfffc
, 0xfffd, 0xfffd
,
0xe0001, 0xe0001
, 0xe0020, 0xe007f
,
0xf0000, 0xffffd
, 0x100000, 0x10fffd
];
var isProhibitedCharacter = function isProhibitedCharacter(character) {
  return inRange(character, non_ASCII_space_characters) || inRange(character, prohibited_characters) || inRange(character, non_ASCII_controls_characters) || inRange(character, non_character_codepoints);
};
var bidirectional_r_al = [0x05be, 0x05be, 0x05c0, 0x05c0, 0x05c3, 0x05c3, 0x05d0, 0x05ea, 0x05f0, 0x05f4, 0x061b, 0x061b, 0x061f, 0x061f, 0x0621, 0x063a, 0x0640, 0x064a, 0x066d, 0x066f, 0x0671, 0x06d5, 0x06dd, 0x06dd, 0x06e5, 0x06e6, 0x06fa, 0x06fe, 0x0700, 0x070d, 0x0710, 0x0710, 0x0712, 0x072c, 0x0780, 0x07a5, 0x07b1, 0x07b1, 0x200f, 0x200f, 0xfb1d, 0xfb1d, 0xfb1f, 0xfb28, 0xfb2a, 0xfb36, 0xfb38, 0xfb3c, 0xfb3e, 0xfb3e, 0xfb40, 0xfb41, 0xfb43, 0xfb44, 0xfb46, 0xfbb1, 0xfbd3, 0xfd3d, 0xfd50, 0xfd8f, 0xfd92, 0xfdc7, 0xfdf0, 0xfdfc, 0xfe70, 0xfe74, 0xfe76, 0xfefc];
var isBidirectionalRAL = function isBidirectionalRAL(character) {
  return inRange(character, bidirectional_r_al);
};
var bidirectional_l = [0x0041, 0x005a, 0x0061, 0x007a, 0x00aa, 0x00aa, 0x00b5, 0x00b5, 0x00ba, 0x00ba, 0x00c0, 0x00d6, 0x00d8, 0x00f6, 0x00f8, 0x0220, 0x0222, 0x0233, 0x0250, 0x02ad, 0x02b0, 0x02b8, 0x02bb, 0x02c1, 0x02d0, 0x02d1, 0x02e0, 0x02e4, 0x02ee, 0x02ee, 0x037a, 0x037a, 0x0386, 0x0386, 0x0388, 0x038a, 0x038c, 0x038c, 0x038e, 0x03a1, 0x03a3, 0x03ce, 0x03d0, 0x03f5, 0x0400, 0x0482, 0x048a, 0x04ce, 0x04d0, 0x04f5, 0x04f8, 0x04f9, 0x0500, 0x050f, 0x0531, 0x0556, 0x0559, 0x055f, 0x0561, 0x0587, 0x0589, 0x0589, 0x0903, 0x0903, 0x0905, 0x0939, 0x093d, 0x0940, 0x0949, 0x094c, 0x0950, 0x0950, 0x0958, 0x0961, 0x0964, 0x0970, 0x0982, 0x0983, 0x0985, 0x098c, 0x098f, 0x0990, 0x0993, 0x09a8, 0x09aa, 0x09b0, 0x09b2, 0x09b2, 0x09b6, 0x09b9, 0x09be, 0x09c0, 0x09c7, 0x09c8, 0x09cb, 0x09cc, 0x09d7, 0x09d7, 0x09dc, 0x09dd, 0x09df, 0x09e1, 0x09e6, 0x09f1, 0x09f4, 0x09fa, 0x0a05, 0x0a0a, 0x0a0f, 0x0a10, 0x0a13, 0x0a28, 0x0a2a, 0x0a30, 0x0a32, 0x0a33, 0x0a35, 0x0a36, 0x0a38, 0x0a39, 0x0a3e, 0x0a40, 0x0a59, 0x0a5c, 0x0a5e, 0x0a5e, 0x0a66, 0x0a6f, 0x0a72, 0x0a74, 0x0a83, 0x0a83, 0x0a85, 0x0a8b, 0x0a8d, 0x0a8d, 0x0a8f, 0x0a91, 0x0a93, 0x0aa8, 0x0aaa, 0x0ab0, 0x0ab2, 0x0ab3, 0x0ab5, 0x0ab9, 0x0abd, 0x0ac0, 0x0ac9, 0x0ac9, 0x0acb, 0x0acc, 0x0ad0, 0x0ad0, 0x0ae0, 0x0ae0, 0x0ae6, 0x0aef, 0x0b02, 0x0b03, 0x0b05, 0x0b0c, 0x0b0f, 0x0b10, 0x0b13, 0x0b28, 0x0b2a, 0x0b30, 0x0b32, 0x0b33, 0x0b36, 0x0b39, 0x0b3d, 0x0b3e, 0x0b40, 0x0b40, 0x0b47, 0x0b48, 0x0b4b, 0x0b4c, 0x0b57, 0x0b57, 0x0b5c, 0x0b5d, 0x0b5f, 0x0b61, 0x0b66, 0x0b70, 0x0b83, 0x0b83, 0x0b85, 0x0b8a, 0x0b8e, 0x0b90, 0x0b92, 0x0b95, 0x0b99, 0x0b9a, 0x0b9c, 0x0b9c, 0x0b9e, 0x0b9f, 0x0ba3, 0x0ba4, 0x0ba8, 0x0baa, 0x0bae, 0x0bb5, 0x0bb7, 0x0bb9, 0x0bbe, 0x0bbf, 0x0bc1, 0x0bc2, 0x0bc6, 0x0bc8, 0x0bca, 0x0bcc, 0x0bd7, 0x0bd7, 0x0be7, 0x0bf2, 0x0c01, 0x0c03, 0x0c05, 0x0c0c, 0x0c0e, 0x0c10, 0x0c12, 0x0c28, 0x0c2a, 0x0c33, 0x0c35, 0x0c39, 0x0c41, 0x0c44, 0x0c60, 0x0c61, 0x0c66, 0x0c6f, 0x0c82, 0x0c83, 0x0c85, 0x0c8c, 0x0c8e, 0x0c90, 0x0c92, 0x0ca8, 0x0caa, 0x0cb3, 0x0cb5, 0x0cb9, 0x0cbe, 0x0cbe, 0x0cc0, 0x0cc4, 0x0cc7, 0x0cc8, 0x0cca, 0x0ccb, 0x0cd5, 0x0cd6, 0x0cde, 0x0cde, 0x0ce0, 0x0ce1, 0x0ce6, 0x0cef, 0x0d02, 0x0d03, 0x0d05, 0x0d0c, 0x0d0e, 0x0d10, 0x0d12, 0x0d28, 0x0d2a, 0x0d39, 0x0d3e, 0x0d40, 0x0d46, 0x0d48, 0x0d4a, 0x0d4c, 0x0d57, 0x0d57, 0x0d60, 0x0d61, 0x0d66, 0x0d6f, 0x0d82, 0x0d83, 0x0d85, 0x0d96, 0x0d9a, 0x0db1, 0x0db3, 0x0dbb, 0x0dbd, 0x0dbd, 0x0dc0, 0x0dc6, 0x0dcf, 0x0dd1, 0x0dd8, 0x0ddf, 0x0df2, 0x0df4, 0x0e01, 0x0e30, 0x0e32, 0x0e33, 0x0e40, 0x0e46, 0x0e4f, 0x0e5b, 0x0e81, 0x0e82, 0x0e84, 0x0e84, 0x0e87, 0x0e88, 0x0e8a, 0x0e8a, 0x0e8d, 0x0e8d, 0x0e94, 0x0e97, 0x0e99, 0x0e9f, 0x0ea1, 0x0ea3, 0x0ea5, 0x0ea5, 0x0ea7, 0x0ea7, 0x0eaa, 0x0eab, 0x0ead, 0x0eb0, 0x0eb2, 0x0eb3, 0x0ebd, 0x0ebd, 0x0ec0, 0x0ec4, 0x0ec6, 0x0ec6, 0x0ed0, 0x0ed9, 0x0edc, 0x0edd, 0x0f00, 0x0f17, 0x0f1a, 0x0f34, 0x0f36, 0x0f36, 0x0f38, 0x0f38, 0x0f3e, 0x0f47, 0x0f49, 0x0f6a, 0x0f7f, 0x0f7f, 0x0f85, 0x0f85, 0x0f88, 0x0f8b, 0x0fbe, 0x0fc5, 0x0fc7, 0x0fcc, 0x0fcf, 0x0fcf, 0x1000, 0x1021, 0x1023, 0x1027, 0x1029, 0x102a, 0x102c, 0x102c, 0x1031, 0x1031, 0x1038, 0x1038, 0x1040, 0x1057, 0x10a0, 0x10c5, 0x10d0, 0x10f8, 0x10fb, 0x10fb, 0x1100, 0x1159, 0x115f, 0x11a2, 0x11a8, 0x11f9, 0x1200, 0x1206, 0x1208, 0x1246, 0x1248, 0x1248, 0x124a, 0x124d, 0x1250, 0x1256, 0x1258, 0x1258, 0x125a, 0x125d, 0x1260, 0x1286, 0x1288, 0x1288, 0x128a, 0x128d, 0x1290, 0x12ae, 0x12b0, 0x12b0, 0x12b2, 0x12b5, 0x12b8, 0x12be, 0x12c0, 0x12c0, 0x12c2, 0x12c5, 0x12c8, 0x12ce, 0x12d0, 0x12d6, 0x12d8, 0x12ee, 0x12f0, 0x130e, 0x1310, 0x1310, 0x1312, 0x1315, 0x1318, 0x131e, 0x1320, 0x1346, 0x1348, 0x135a, 0x1361, 0x137c, 0x13a0, 0x13f4, 0x1401, 0x1676, 0x1681, 0x169a, 0x16a0, 0x16f0, 0x1700, 0x170c, 0x170e, 0x1711, 0x1720, 0x1731, 0x1735, 0x1736, 0x1740, 0x1751, 0x1760, 0x176c, 0x176e, 0x1770, 0x1780, 0x17b6, 0x17be, 0x17c5, 0x17c7, 0x17c8, 0x17d4, 0x17da, 0x17dc, 0x17dc, 0x17e0, 0x17e9, 0x1810, 0x1819, 0x1820, 0x1877, 0x1880, 0x18a8, 0x1e00, 0x1e9b, 0x1ea0, 0x1ef9, 0x1f00, 0x1f15, 0x1f18, 0x1f1d, 0x1f20, 0x1f45, 0x1f48, 0x1f4d, 0x1f50, 0x1f57, 0x1f59, 0x1f59, 0x1f5b, 0x1f5b, 0x1f5d, 0x1f5d, 0x1f5f, 0x1f7d, 0x1f80, 0x1fb4, 0x1fb6, 0x1fbc, 0x1fbe, 0x1fbe, 0x1fc2, 0x1fc4, 0x1fc6, 0x1fcc, 0x1fd0, 0x1fd3, 0x1fd6, 0x1fdb, 0x1fe0, 0x1fec, 0x1ff2, 0x1ff4, 0x1ff6, 0x1ffc, 0x200e, 0x200e, 0x2071, 0x2071, 0x207f, 0x207f, 0x2102, 0x2102, 0x2107, 0x2107, 0x210a, 0x2113, 0x2115, 0x2115, 0x2119, 0x211d, 0x2124, 0x2124, 0x2126, 0x2126, 0x2128, 0x2128, 0x212a, 0x212d, 0x212f, 0x2131, 0x2133, 0x2139, 0x213d, 0x213f, 0x2145, 0x2149, 0x2160, 0x2183, 0x2336, 0x237a, 0x2395, 0x2395, 0x249c, 0x24e9, 0x3005, 0x3007, 0x3021, 0x3029, 0x3031, 0x3035, 0x3038, 0x303c, 0x3041, 0x3096, 0x309d, 0x309f, 0x30a1, 0x30fa, 0x30fc, 0x30ff, 0x3105, 0x312c, 0x3131, 0x318e, 0x3190, 0x31b7, 0x31f0, 0x321c, 0x3220, 0x3243, 0x3260, 0x327b, 0x327f, 0x32b0, 0x32c0, 0x32cb, 0x32d0, 0x32fe, 0x3300, 0x3376, 0x337b, 0x33dd, 0x33e0, 0x33fe, 0x3400, 0x4db5, 0x4e00, 0x9fa5, 0xa000, 0xa48c, 0xac00, 0xd7a3, 0xd800, 0xfa2d, 0xfa30, 0xfa6a, 0xfb00, 0xfb06, 0xfb13, 0xfb17, 0xff21, 0xff3a, 0xff41, 0xff5a, 0xff66, 0xffbe, 0xffc2, 0xffc7, 0xffca, 0xffcf, 0xffd2, 0xffd7, 0xffda, 0xffdc, 0x10300, 0x1031e, 0x10320, 0x10323, 0x10330, 0x1034a, 0x10400, 0x10425, 0x10428, 0x1044d, 0x1d000, 0x1d0f5, 0x1d100, 0x1d126, 0x1d12a, 0x1d166, 0x1d16a, 0x1d172, 0x1d183, 0x1d184, 0x1d18c, 0x1d1a9, 0x1d1ae, 0x1d1dd, 0x1d400, 0x1d454, 0x1d456, 0x1d49c, 0x1d49e, 0x1d49f, 0x1d4a2, 0x1d4a2, 0x1d4a5, 0x1d4a6, 0x1d4a9, 0x1d4ac, 0x1d4ae, 0x1d4b9, 0x1d4bb, 0x1d4bb, 0x1d4bd, 0x1d4c0, 0x1d4c2, 0x1d4c3, 0x1d4c5, 0x1d505, 0x1d507, 0x1d50a, 0x1d50d, 0x1d514, 0x1d516, 0x1d51c, 0x1d51e, 0x1d539, 0x1d53b, 0x1d53e, 0x1d540, 0x1d544, 0x1d546, 0x1d546, 0x1d54a, 0x1d550, 0x1d552, 0x1d6a3, 0x1d6a8, 0x1d7c9, 0x20000, 0x2a6d6, 0x2f800, 0x2fa1d, 0xf0000, 0xffffd, 0x100000, 0x10fffd];
var isBidirectionalL = function isBidirectionalL(character) {
  return inRange(character, bidirectional_l);
};
var mapping2space = isNonASCIISpaceCharacter;
var mapping2nothing = isCommonlyMappedToNothing;
var getCodePoint = function getCodePoint(character) {
  return character.codePointAt(0);
};
var first = function first(x) {
  return x[0];
};
var last = function last(x) {
  return x[x.length - 1];
};
function toCodePoints(input) {
  var codepoints = [];
  var size = input.length;
  for (var i = 0; i < size; i += 1) {
    var before = input.charCodeAt(i);
    if (before >= 0xd800 && before <= 0xdbff && size > i + 1) {
      var next = input.charCodeAt(i + 1);
      if (next >= 0xdc00 && next <= 0xdfff) {
        codepoints.push((before - 0xd800) * 0x400 + next - 0xdc00 + 0x10000);
        i += 1;
        continue;
      }
    }
    codepoints.push(before);
  }
  return codepoints;
}
function saslprep(input) {
  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  if (typeof input !== 'string') {
    throw new TypeError('Expected string.');
  }
  if (input.length === 0) {
    return '';
  }
  var mapped_input = toCodePoints(input)
  .map(function (character) {
    return mapping2space(character) ? 0x20 : character;
  })
  .filter(function (character) {
    return !mapping2nothing(character);
  });
  var normalized_input = String.fromCodePoint.apply(null, mapped_input).normalize('NFKC');
  var normalized_map = toCodePoints(normalized_input);
  var hasProhibited = normalized_map.some(isProhibitedCharacter);
  if (hasProhibited) {
    throw new Error('Prohibited character, see https://tools.ietf.org/html/rfc4013#section-2.3');
  }
  if (opts.allowUnassigned !== true) {
    var hasUnassigned = normalized_map.some(isUnassignedCodePoint);
    if (hasUnassigned) {
      throw new Error('Unassigned code point, see https://tools.ietf.org/html/rfc4013#section-2.5');
    }
  }
  var hasBidiRAL = normalized_map.some(isBidirectionalRAL);
  var hasBidiL = normalized_map.some(isBidirectionalL);
  if (hasBidiRAL && hasBidiL) {
    throw new Error('String must not contain RandALCat and LCat at the same time,' + ' see https://tools.ietf.org/html/rfc3454#section-6');
  }
  var isFirstBidiRAL = isBidirectionalRAL(getCodePoint(first(normalized_input)));
  var isLastBidiRAL = isBidirectionalRAL(getCodePoint(last(normalized_input)));
  if (hasBidiRAL && !(isFirstBidiRAL && isLastBidiRAL)) {
    throw new Error('Bidirectional RandALCat character must be the first and the last' + ' character of the string, see https://tools.ietf.org/html/rfc3454#section-6');
  }
  return normalized_input;
}
var PDFSecurity = function () {
  _createClass(PDFSecurity, null, [{
    key: "generateFileID",
    value: function generateFileID() {
      var info = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var infoStr = "".concat(info.CreationDate.getTime(), "\n");
      for (var key in info) {
        if (!info.hasOwnProperty(key)) {
          continue;
        }
        infoStr += "".concat(key, ": ").concat(info[key].valueOf(), "\n");
      }
      return wordArrayToBuffer(CryptoJS.MD5(infoStr));
    }
  }, {
    key: "generateRandomWordArray",
    value: function generateRandomWordArray(bytes) {
      return CryptoJS.lib.WordArray.random(bytes);
    }
  }, {
    key: "create",
    value: function create(document) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      if (!options.ownerPassword && !options.userPassword) {
        return null;
      }
      return new PDFSecurity(document, options);
    }
  }]);
  function PDFSecurity(document) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    _classCallCheck$1(this, PDFSecurity);
    if (!options.ownerPassword && !options.userPassword) {
      throw new Error('None of owner password and user password is defined.');
    }
    this.document = document;
    this._setupEncryption(options);
  }
  _createClass(PDFSecurity, [{
    key: "_setupEncryption",
    value: function _setupEncryption(options) {
      switch (options.pdfVersion) {
        case '1.4':
        case '1.5':
          this.version = 2;
          break;
        case '1.6':
        case '1.7':
          this.version = 4;
          break;
        case '1.7ext3':
          this.version = 5;
          break;
        default:
          this.version = 1;
          break;
      }
      var encDict = {
        Filter: 'Standard'
      };
      switch (this.version) {
        case 1:
        case 2:
        case 4:
          this._setupEncryptionV1V2V4(this.version, encDict, options);
          break;
        case 5:
          this._setupEncryptionV5(encDict, options);
          break;
      }
      this.dictionary = this.document.ref(encDict);
    }
  }, {
    key: "_setupEncryptionV1V2V4",
    value: function _setupEncryptionV1V2V4(v, encDict, options) {
      var r, permissions;
      switch (v) {
        case 1:
          r = 2;
          this.keyBits = 40;
          permissions = getPermissionsR2(options.permissions);
          break;
        case 2:
          r = 3;
          this.keyBits = 128;
          permissions = getPermissionsR3(options.permissions);
          break;
        case 4:
          r = 4;
          this.keyBits = 128;
          permissions = getPermissionsR3(options.permissions);
          break;
      }
      var paddedUserPassword = processPasswordR2R3R4(options.userPassword);
      var paddedOwnerPassword = options.ownerPassword ? processPasswordR2R3R4(options.ownerPassword) : paddedUserPassword;
      var ownerPasswordEntry = getOwnerPasswordR2R3R4(r, this.keyBits, paddedUserPassword, paddedOwnerPassword);
      this.encryptionKey = getEncryptionKeyR2R3R4(r, this.keyBits, this.document._id, paddedUserPassword, ownerPasswordEntry, permissions);
      var userPasswordEntry;
      if (r === 2) {
        userPasswordEntry = getUserPasswordR2(this.encryptionKey);
      } else {
        userPasswordEntry = getUserPasswordR3R4(this.document._id, this.encryptionKey);
      }
      encDict.V = v;
      if (v >= 2) {
        encDict.Length = this.keyBits;
      }
      if (v === 4) {
        encDict.CF = {
          StdCF: {
            AuthEvent: 'DocOpen',
            CFM: 'AESV2',
            Length: this.keyBits / 8
          }
        };
        encDict.StmF = 'StdCF';
        encDict.StrF = 'StdCF';
      }
      encDict.R = r;
      encDict.O = wordArrayToBuffer(ownerPasswordEntry);
      encDict.U = wordArrayToBuffer(userPasswordEntry);
      encDict.P = permissions;
    }
  }, {
    key: "_setupEncryptionV5",
    value: function _setupEncryptionV5(encDict, options) {
      this.keyBits = 256;
      var permissions = getPermissionsR3(options.permissions);
      var processedUserPassword = processPasswordR5(options.userPassword);
      var processedOwnerPassword = options.ownerPassword ? processPasswordR5(options.ownerPassword) : processedUserPassword;
      this.encryptionKey = getEncryptionKeyR5(PDFSecurity.generateRandomWordArray);
      var userPasswordEntry = getUserPasswordR5(processedUserPassword, PDFSecurity.generateRandomWordArray);
      var userKeySalt = CryptoJS.lib.WordArray.create(userPasswordEntry.words.slice(10, 12), 8);
      var userEncryptionKeyEntry = getUserEncryptionKeyR5(processedUserPassword, userKeySalt, this.encryptionKey);
      var ownerPasswordEntry = getOwnerPasswordR5(processedOwnerPassword, userPasswordEntry, PDFSecurity.generateRandomWordArray);
      var ownerKeySalt = CryptoJS.lib.WordArray.create(ownerPasswordEntry.words.slice(10, 12), 8);
      var ownerEncryptionKeyEntry = getOwnerEncryptionKeyR5(processedOwnerPassword, ownerKeySalt, userPasswordEntry, this.encryptionKey);
      var permsEntry = getEncryptedPermissionsR5(permissions, this.encryptionKey, PDFSecurity.generateRandomWordArray);
      encDict.V = 5;
      encDict.Length = this.keyBits;
      encDict.CF = {
        StdCF: {
          AuthEvent: 'DocOpen',
          CFM: 'AESV3',
          Length: this.keyBits / 8
        }
      };
      encDict.StmF = 'StdCF';
      encDict.StrF = 'StdCF';
      encDict.R = 5;
      encDict.O = wordArrayToBuffer(ownerPasswordEntry);
      encDict.OE = wordArrayToBuffer(ownerEncryptionKeyEntry);
      encDict.U = wordArrayToBuffer(userPasswordEntry);
      encDict.UE = wordArrayToBuffer(userEncryptionKeyEntry);
      encDict.P = permissions;
      encDict.Perms = wordArrayToBuffer(permsEntry);
    }
  }, {
    key: "getEncryptFn",
    value: function getEncryptFn(obj, gen) {
      var digest;
      if (this.version < 5) {
        digest = this.encryptionKey.clone().concat(CryptoJS.lib.WordArray.create([(obj & 0xff) << 24 | (obj & 0xff00) << 8 | obj >> 8 & 0xff00 | gen & 0xff, (gen & 0xff00) << 16], 5));
      }
      if (this.version === 1 || this.version === 2) {
        var _key = CryptoJS.MD5(digest);
        _key.sigBytes = Math.min(16, this.keyBits / 8 + 5);
        return function (buffer) {
          return wordArrayToBuffer(CryptoJS.RC4.encrypt(CryptoJS.lib.WordArray.create(buffer), _key).ciphertext);
        };
      }
      var key;
      if (this.version === 4) {
        key = CryptoJS.MD5(digest.concat(CryptoJS.lib.WordArray.create([0x73416c54], 4)));
      } else {
        key = this.encryptionKey;
      }
      var iv = PDFSecurity.generateRandomWordArray(16);
      var options = {
        mode: CryptoJS.mode.CBC,
        padding: CryptoJS.pad.Pkcs7,
        iv: iv
      };
      return function (buffer) {
        return wordArrayToBuffer(iv.clone().concat(CryptoJS.AES.encrypt(CryptoJS.lib.WordArray.create(buffer), key, options).ciphertext));
      };
    }
  }, {
    key: "end",
    value: function end() {
      this.dictionary.end();
    }
  }]);
  return PDFSecurity;
}();
function getPermissionsR2() {
  var permissionObject = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var permissions = 0xffffffc0 >> 0;
  if (permissionObject.printing) {
    permissions |= 4;
  }
  if (permissionObject.modifying) {
    permissions |= 8;
  }
  if (permissionObject.copying) {
    permissions |= 16;
  }
  if (permissionObject.annotating) {
    permissions |= 32;
  }
  return permissions;
}
function getPermissionsR3() {
  var permissionObject = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var permissions = 0xfffff0c0 >> 0;
  if (permissionObject.printing === 'lowResolution') {
    permissions |= 4;
  }
  if (permissionObject.printing === 'highResolution') {
    permissions |= 2052;
  }
  if (permissionObject.modifying) {
    permissions |= 8;
  }
  if (permissionObject.copying) {
    permissions |= 16;
  }
  if (permissionObject.annotating) {
    permissions |= 32;
  }
  if (permissionObject.fillingForms) {
    permissions |= 256;
  }
  if (permissionObject.contentAccessibility) {
    permissions |= 512;
  }
  if (permissionObject.documentAssembly) {
    permissions |= 1024;
  }
  return permissions;
}
function getUserPasswordR2(encryptionKey) {
  return CryptoJS.RC4.encrypt(processPasswordR2R3R4(), encryptionKey).ciphertext;
}
function getUserPasswordR3R4(documentId, encryptionKey) {
  var key = encryptionKey.clone();
  var cipher = CryptoJS.MD5(processPasswordR2R3R4().concat(CryptoJS.lib.WordArray.create(documentId)));
  for (var i = 0; i < 20; i++) {
    var xorRound = Math.ceil(key.sigBytes / 4);
    for (var j = 0; j < xorRound; j++) {
      key.words[j] = encryptionKey.words[j] ^ (i | i << 8 | i << 16 | i << 24);
    }
    cipher = CryptoJS.RC4.encrypt(cipher, key).ciphertext;
  }
  return cipher.concat(CryptoJS.lib.WordArray.create(null, 16));
}
function getOwnerPasswordR2R3R4(r, keyBits, paddedUserPassword, paddedOwnerPassword) {
  var digest = paddedOwnerPassword;
  var round = r >= 3 ? 51 : 1;
  for (var i = 0; i < round; i++) {
    digest = CryptoJS.MD5(digest);
  }
  var key = digest.clone();
  key.sigBytes = keyBits / 8;
  var cipher = paddedUserPassword;
  round = r >= 3 ? 20 : 1;
  for (var _i = 0; _i < round; _i++) {
    var xorRound = Math.ceil(key.sigBytes / 4);
    for (var j = 0; j < xorRound; j++) {
      key.words[j] = digest.words[j] ^ (_i | _i << 8 | _i << 16 | _i << 24);
    }
    cipher = CryptoJS.RC4.encrypt(cipher, key).ciphertext;
  }
  return cipher;
}
function getEncryptionKeyR2R3R4(r, keyBits, documentId, paddedUserPassword, ownerPasswordEntry, permissions) {
  var key = paddedUserPassword.clone().concat(ownerPasswordEntry).concat(CryptoJS.lib.WordArray.create([lsbFirstWord(permissions)], 4)).concat(CryptoJS.lib.WordArray.create(documentId));
  var round = r >= 3 ? 51 : 1;
  for (var i = 0; i < round; i++) {
    key = CryptoJS.MD5(key);
    key.sigBytes = keyBits / 8;
  }
  return key;
}
function getUserPasswordR5(processedUserPassword, generateRandomWordArray) {
  var validationSalt = generateRandomWordArray(8);
  var keySalt = generateRandomWordArray(8);
  return CryptoJS.SHA256(processedUserPassword.clone().concat(validationSalt)).concat(validationSalt).concat(keySalt);
}
function getUserEncryptionKeyR5(processedUserPassword, userKeySalt, encryptionKey) {
  var key = CryptoJS.SHA256(processedUserPassword.clone().concat(userKeySalt));
  var options = {
    mode: CryptoJS.mode.CBC,
    padding: CryptoJS.pad.NoPadding,
    iv: CryptoJS.lib.WordArray.create(null, 16)
  };
  return CryptoJS.AES.encrypt(encryptionKey, key, options).ciphertext;
}
function getOwnerPasswordR5(processedOwnerPassword, userPasswordEntry, generateRandomWordArray) {
  var validationSalt = generateRandomWordArray(8);
  var keySalt = generateRandomWordArray(8);
  return CryptoJS.SHA256(processedOwnerPassword.clone().concat(validationSalt).concat(userPasswordEntry)).concat(validationSalt).concat(keySalt);
}
function getOwnerEncryptionKeyR5(processedOwnerPassword, ownerKeySalt, userPasswordEntry, encryptionKey) {
  var key = CryptoJS.SHA256(processedOwnerPassword.clone().concat(ownerKeySalt).concat(userPasswordEntry));
  var options = {
    mode: CryptoJS.mode.CBC,
    padding: CryptoJS.pad.NoPadding,
    iv: CryptoJS.lib.WordArray.create(null, 16)
  };
  return CryptoJS.AES.encrypt(encryptionKey, key, options).ciphertext;
}
function getEncryptionKeyR5(generateRandomWordArray) {
  return generateRandomWordArray(32);
}
function getEncryptedPermissionsR5(permissions, encryptionKey, generateRandomWordArray) {
  var cipher = CryptoJS.lib.WordArray.create([lsbFirstWord(permissions), 0xffffffff, 0x54616462], 12).concat(generateRandomWordArray(4));
  var options = {
    mode: CryptoJS.mode.ECB,
    padding: CryptoJS.pad.NoPadding
  };
  return CryptoJS.AES.encrypt(cipher, encryptionKey, options).ciphertext;
}
function processPasswordR2R3R4() {
  var password = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  var out = buffer.Buffer.alloc(32);
  var length = password.length;
  var index = 0;
  while (index < length && index < 32) {
    var code = password.charCodeAt(index);
    if (code > 0xff) {
      throw new Error('Password contains one or more invalid characters.');
    }
    out[index] = code;
    index++;
  }
  while (index < 32) {
    out[index] = PASSWORD_PADDING[index - length];
    index++;
  }
  return CryptoJS.lib.WordArray.create(out);
}
function processPasswordR5() {
  var password = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  password = unescape(encodeURIComponent(saslprep(password)));
  var length = Math.min(127, password.length);
  var out = buffer.Buffer.alloc(length);
  for (var i = 0; i < length; i++) {
    out[i] = password.charCodeAt(i);
  }
  return CryptoJS.lib.WordArray.create(out);
}
function lsbFirstWord(data) {
  return (data & 0xff) << 24 | (data & 0xff00) << 8 | data >> 8 & 0xff00 | data >> 24 & 0xff;
}
function wordArrayToBuffer(wordArray) {
  var byteArray = [];
  for (var i = 0; i < wordArray.sigBytes; i++) {
    byteArray.push(wordArray.words[Math.floor(i / 4)] >> 8 * (3 - i % 4) & 0xff);
  }
  return buffer.Buffer.from(byteArray);
}
var PASSWORD_PADDING = [0x28, 0xbf, 0x4e, 0x5e, 0x4e, 0x75, 0x8a, 0x41, 0x64, 0x00, 0x4e, 0x56, 0xff, 0xfa, 0x01, 0x08, 0x2e, 0x2e, 0x00, 0xb6, 0xd0, 0x68, 0x3e, 0x80, 0x2f, 0x0c, 0xa9, 0xfe, 0x64, 0x53, 0x69, 0x7a];
var number = PDFObject.number;
var PDFGradient = function () {
  function PDFGradient(doc) {
    _classCallCheck$1(this, PDFGradient);
    this.doc = doc;
    this.stops = [];
    this.embedded = false;
    this.transform = [1, 0, 0, 1, 0, 0];
  }
  _createClass(PDFGradient, [{
    key: "stop",
    value: function stop(pos, color, opacity) {
      if (opacity == null) {
        opacity = 1;
      }
      color = this.doc._normalizeColor(color);
      if (this.stops.length === 0) {
        if (color.length === 3) {
          this._colorSpace = 'DeviceRGB';
        } else if (color.length === 4) {
          this._colorSpace = 'DeviceCMYK';
        } else if (color.length === 1) {
          this._colorSpace = 'DeviceGray';
        } else {
          throw new Error('Unknown color space');
        }
      } else if (this._colorSpace === 'DeviceRGB' && color.length !== 3 || this._colorSpace === 'DeviceCMYK' && color.length !== 4 || this._colorSpace === 'DeviceGray' && color.length !== 1) {
        throw new Error('All gradient stops must use the same color space');
      }
      opacity = Math.max(0, Math.min(1, opacity));
      this.stops.push([pos, color, opacity]);
      return this;
    }
  }, {
    key: "setTransform",
    value: function setTransform(m11, m12, m21, m22, dx, dy) {
      this.transform = [m11, m12, m21, m22, dx, dy];
      return this;
    }
  }, {
    key: "embed",
    value: function embed(m) {
      var fn;
      var stopsLength = this.stops.length;
      if (stopsLength === 0) {
        return;
      }
      this.embedded = true;
      this.matrix = m;
      var last = this.stops[stopsLength - 1];
      if (last[0] < 1) {
        this.stops.push([1, last[1], last[2]]);
      }
      var bounds = [];
      var encode = [];
      var stops = [];
      for (var i = 0; i < stopsLength - 1; i++) {
        encode.push(0, 1);
        if (i + 2 !== stopsLength) {
          bounds.push(this.stops[i + 1][0]);
        }
        fn = this.doc.ref({
          FunctionType: 2,
          Domain: [0, 1],
          C0: this.stops[i + 0][1],
          C1: this.stops[i + 1][1],
          N: 1
        });
        stops.push(fn);
        fn.end();
      }
      if (stopsLength === 1) {
        fn = stops[0];
      } else {
        fn = this.doc.ref({
          FunctionType: 3,
          Domain: [0, 1],
          Functions: stops,
          Bounds: bounds,
          Encode: encode
        });
        fn.end();
      }
      this.id = "Sh".concat(++this.doc._gradCount);
      var shader = this.shader(fn);
      shader.end();
      var pattern = this.doc.ref({
        Type: 'Pattern',
        PatternType: 2,
        Shading: shader,
        Matrix: this.matrix.map(number)
      });
      pattern.end();
      if (this.stops.some(function (stop) {
        return stop[2] < 1;
      })) {
        var grad = this.opacityGradient();
        grad._colorSpace = 'DeviceGray';
        var _iterator = _createForOfIteratorHelper(this.stops),
            _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var stop = _step.value;
            grad.stop(stop[0], [stop[2]]);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
        grad = grad.embed(this.matrix);
        var pageBBox = [0, 0, this.doc.page.width, this.doc.page.height];
        var form = this.doc.ref({
          Type: 'XObject',
          Subtype: 'Form',
          FormType: 1,
          BBox: pageBBox,
          Group: {
            Type: 'Group',
            S: 'Transparency',
            CS: 'DeviceGray'
          },
          Resources: {
            ProcSet: ['PDF', 'Text', 'ImageB', 'ImageC', 'ImageI'],
            Pattern: {
              Sh1: grad
            }
          }
        });
        form.write('/Pattern cs /Sh1 scn');
        form.end("".concat(pageBBox.join(' '), " re f"));
        var gstate = this.doc.ref({
          Type: 'ExtGState',
          SMask: {
            Type: 'Mask',
            S: 'Luminosity',
            G: form
          }
        });
        gstate.end();
        var opacityPattern = this.doc.ref({
          Type: 'Pattern',
          PatternType: 1,
          PaintType: 1,
          TilingType: 2,
          BBox: pageBBox,
          XStep: pageBBox[2],
          YStep: pageBBox[3],
          Resources: {
            ProcSet: ['PDF', 'Text', 'ImageB', 'ImageC', 'ImageI'],
            Pattern: {
              Sh1: pattern
            },
            ExtGState: {
              Gs1: gstate
            }
          }
        });
        opacityPattern.write('/Gs1 gs /Pattern cs /Sh1 scn');
        opacityPattern.end("".concat(pageBBox.join(' '), " re f"));
        this.doc.page.patterns[this.id] = opacityPattern;
      } else {
        this.doc.page.patterns[this.id] = pattern;
      }
      return pattern;
    }
  }, {
    key: "apply",
    value: function apply(stroke) {
      var _this$doc$_ctm = _slicedToArray(this.doc._ctm, 6),
          m0 = _this$doc$_ctm[0],
          m1 = _this$doc$_ctm[1],
          m2 = _this$doc$_ctm[2],
          m3 = _this$doc$_ctm[3],
          m4 = _this$doc$_ctm[4],
          m5 = _this$doc$_ctm[5];
      var _this$transform = _slicedToArray(this.transform, 6),
          m11 = _this$transform[0],
          m12 = _this$transform[1],
          m21 = _this$transform[2],
          m22 = _this$transform[3],
          dx = _this$transform[4],
          dy = _this$transform[5];
      var m = [m0 * m11 + m2 * m12, m1 * m11 + m3 * m12, m0 * m21 + m2 * m22, m1 * m21 + m3 * m22, m0 * dx + m2 * dy + m4, m1 * dx + m3 * dy + m5];
      if (!this.embedded || m.join(' ') !== this.matrix.join(' ')) {
        this.embed(m);
      }
      this.doc._setColorSpace('Pattern', stroke);
      var op = stroke ? 'SCN' : 'scn';
      return this.doc.addContent("/".concat(this.id, " ").concat(op));
    }
  }]);
  return PDFGradient;
}();
var PDFLinearGradient = function (_PDFGradient) {
  _inherits(PDFLinearGradient, _PDFGradient);
  var _super = _createSuper(PDFLinearGradient);
  function PDFLinearGradient(doc, x1, y1, x2, y2) {
    var _this;
    _classCallCheck$1(this, PDFLinearGradient);
    _this = _super.call(this, doc);
    _this.x1 = x1;
    _this.y1 = y1;
    _this.x2 = x2;
    _this.y2 = y2;
    return _this;
  }
  _createClass(PDFLinearGradient, [{
    key: "shader",
    value: function shader(fn) {
      return this.doc.ref({
        ShadingType: 2,
        ColorSpace: this._colorSpace,
        Coords: [this.x1, this.y1, this.x2, this.y2],
        Function: fn,
        Extend: [true, true]
      });
    }
  }, {
    key: "opacityGradient",
    value: function opacityGradient() {
      return new PDFLinearGradient(this.doc, this.x1, this.y1, this.x2, this.y2);
    }
  }]);
  return PDFLinearGradient;
}(PDFGradient);
var PDFRadialGradient = function (_PDFGradient2) {
  _inherits(PDFRadialGradient, _PDFGradient2);
  var _super2 = _createSuper(PDFRadialGradient);
  function PDFRadialGradient(doc, x1, y1, r1, x2, y2, r2) {
    var _this2;
    _classCallCheck$1(this, PDFRadialGradient);
    _this2 = _super2.call(this, doc);
    _this2.doc = doc;
    _this2.x1 = x1;
    _this2.y1 = y1;
    _this2.r1 = r1;
    _this2.x2 = x2;
    _this2.y2 = y2;
    _this2.r2 = r2;
    return _this2;
  }
  _createClass(PDFRadialGradient, [{
    key: "shader",
    value: function shader(fn) {
      return this.doc.ref({
        ShadingType: 3,
        ColorSpace: this._colorSpace,
        Coords: [this.x1, this.y1, this.r1, this.x2, this.y2, this.r2],
        Function: fn,
        Extend: [true, true]
      });
    }
  }, {
    key: "opacityGradient",
    value: function opacityGradient() {
      return new PDFRadialGradient(this.doc, this.x1, this.y1, this.r1, this.x2, this.y2, this.r2);
    }
  }]);
  return PDFRadialGradient;
}(PDFGradient);
var Gradient = {
  PDFGradient: PDFGradient,
  PDFLinearGradient: PDFLinearGradient,
  PDFRadialGradient: PDFRadialGradient
};
var underlyingColorSpaces = ['DeviceCMYK', 'DeviceRGB'];
var PDFTilingPattern = function () {
  function PDFTilingPattern(doc, bBox, xStep, yStep, stream) {
    _classCallCheck$1(this, PDFTilingPattern);
    this.doc = doc;
    this.bBox = bBox;
    this.xStep = xStep;
    this.yStep = yStep;
    this.stream = stream;
  }
  _createClass(PDFTilingPattern, [{
    key: "createPattern",
    value: function createPattern() {
      var resources = this.doc.ref();
      resources.end();
      var _this$doc$_ctm = _slicedToArray(this.doc._ctm, 6),
          m0 = _this$doc$_ctm[0],
          m1 = _this$doc$_ctm[1],
          m2 = _this$doc$_ctm[2],
          m3 = _this$doc$_ctm[3],
          m4 = _this$doc$_ctm[4],
          m5 = _this$doc$_ctm[5];
      var m11 = 1,
          m12 = 0,
          m21 = 0,
          m22 = 1,
          dx = 0,
          dy = 0;
      var m = [m0 * m11 + m2 * m12, m1 * m11 + m3 * m12, m0 * m21 + m2 * m22, m1 * m21 + m3 * m22, m0 * dx + m2 * dy + m4, m1 * dx + m3 * dy + m5];
      var pattern = this.doc.ref({
        Type: 'Pattern',
        PatternType: 1,
        PaintType: 2,
        TilingType: 2,
        BBox: this.bBox,
        XStep: this.xStep,
        YStep: this.yStep,
        Matrix: m.map(function (v) {
          return +v.toFixed(5);
        }),
        Resources: resources
      });
      pattern.end(this.stream);
      return pattern;
    }
  }, {
    key: "embedPatternColorSpaces",
    value: function embedPatternColorSpaces() {
      var _this = this;
      underlyingColorSpaces.forEach(function (csName) {
        var csId = _this.getPatternColorSpaceId(csName);
        if (_this.doc.page.colorSpaces[csId]) return;
        var cs = _this.doc.ref(['Pattern', csName]);
        cs.end();
        _this.doc.page.colorSpaces[csId] = cs;
      });
    }
  }, {
    key: "getPatternColorSpaceId",
    value: function getPatternColorSpaceId(underlyingColorspace) {
      return "CsP".concat(underlyingColorspace);
    }
  }, {
    key: "embed",
    value: function embed() {
      if (!this.id) {
        this.doc._patternCount = this.doc._patternCount + 1;
        this.id = 'P' + this.doc._patternCount;
        this.pattern = this.createPattern();
      }
      if (!this.doc.page.patterns[this.id]) {
        this.doc.page.patterns[this.id] = this.pattern;
      }
    }
  }, {
    key: "apply",
    value: function apply(stroke, patternColor) {
      this.embedPatternColorSpaces();
      this.embed();
      var normalizedColor = this.doc._normalizeColor(patternColor);
      if (!normalizedColor) throw Error("invalid pattern color. (value: ".concat(patternColor, ")"));
      var csId = this.getPatternColorSpaceId(this.doc._getColorSpace(normalizedColor));
      this.doc._setColorSpace(csId, stroke);
      var op = stroke ? 'SCN' : 'scn';
      return this.doc.addContent("".concat(normalizedColor.join(' '), " /").concat(this.id, " ").concat(op));
    }
  }]);
  return PDFTilingPattern;
}();
var pattern = {
  PDFTilingPattern: PDFTilingPattern
};
var PDFGradient$1 = Gradient.PDFGradient,
    PDFLinearGradient$1 = Gradient.PDFLinearGradient,
    PDFRadialGradient$1 = Gradient.PDFRadialGradient;
var PDFTilingPattern$1 = pattern.PDFTilingPattern;
var ColorMixin = {
  initColor: function initColor() {
    this._opacityRegistry = {};
    this._opacityCount = 0;
    this._patternCount = 0;
    return this._gradCount = 0;
  },
  _normalizeColor: function _normalizeColor(color) {
    if (typeof color === 'string') {
      if (color.charAt(0) === '#') {
        if (color.length === 4) {
          color = color.replace(/#([0-9A-F])([0-9A-F])([0-9A-F])/i, '#$1$1$2$2$3$3');
        }
        var hex = parseInt(color.slice(1), 16);
        color = [hex >> 16, hex >> 8 & 0xff, hex & 0xff];
      } else if (namedColors[color]) {
        color = namedColors[color];
      }
    }
    if (Array.isArray(color)) {
      if (color.length === 3) {
        color = color.map(function (part) {
          return part / 255;
        });
      } else if (color.length === 4) {
        color = color.map(function (part) {
          return part / 100;
        });
      }
      return color;
    }
    return null;
  },
  _setColor: function _setColor(color, stroke) {
    if (color instanceof PDFGradient$1) {
      color.apply(stroke);
      return true;
    } else if (Array.isArray(color) && color[0] instanceof PDFTilingPattern$1) {
      color[0].apply(stroke, color[1]);
      return true;
    }
    return this._setColorCore(color, stroke);
  },
  _setColorCore: function _setColorCore(color, stroke) {
    color = this._normalizeColor(color);
    if (!color) {
      return false;
    }
    var op = stroke ? 'SCN' : 'scn';
    var space = this._getColorSpace(color);
    this._setColorSpace(space, stroke);
    color = color.join(' ');
    this.addContent("".concat(color, " ").concat(op));
    return true;
  },
  _setColorSpace: function _setColorSpace(space, stroke) {
    var op = stroke ? 'CS' : 'cs';
    return this.addContent("/".concat(space, " ").concat(op));
  },
  _getColorSpace: function _getColorSpace(color) {
    return color.length === 4 ? 'DeviceCMYK' : 'DeviceRGB';
  },
  fillColor: function fillColor(color, opacity) {
    var set = this._setColor(color, false);
    if (set) {
      this.fillOpacity(opacity);
    }
    this._fillColor = [color, opacity];
    return this;
  },
  strokeColor: function strokeColor(color, opacity) {
    var set = this._setColor(color, true);
    if (set) {
      this.strokeOpacity(opacity);
    }
    return this;
  },
  opacity: function opacity(_opacity) {
    this._doOpacity(_opacity, _opacity);
    return this;
  },
  fillOpacity: function fillOpacity(opacity) {
    this._doOpacity(opacity, null);
    return this;
  },
  strokeOpacity: function strokeOpacity(opacity) {
    this._doOpacity(null, opacity);
    return this;
  },
  _doOpacity: function _doOpacity(fillOpacity, strokeOpacity) {
    var dictionary, name;
    if (fillOpacity == null && strokeOpacity == null) {
      return;
    }
    if (fillOpacity != null) {
      fillOpacity = Math.max(0, Math.min(1, fillOpacity));
    }
    if (strokeOpacity != null) {
      strokeOpacity = Math.max(0, Math.min(1, strokeOpacity));
    }
    var key = "".concat(fillOpacity, "_").concat(strokeOpacity);
    if (this._opacityRegistry[key]) {
      var _this$_opacityRegistr = _slicedToArray(this._opacityRegistry[key], 2);
      dictionary = _this$_opacityRegistr[0];
      name = _this$_opacityRegistr[1];
    } else {
      dictionary = {
        Type: 'ExtGState'
      };
      if (fillOpacity != null) {
        dictionary.ca = fillOpacity;
      }
      if (strokeOpacity != null) {
        dictionary.CA = strokeOpacity;
      }
      dictionary = this.ref(dictionary);
      dictionary.end();
      var id = ++this._opacityCount;
      name = "Gs".concat(id);
      this._opacityRegistry[key] = [dictionary, name];
    }
    this.page.ext_gstates[name] = dictionary;
    return this.addContent("/".concat(name, " gs"));
  },
  linearGradient: function linearGradient(x1, y1, x2, y2) {
    return new PDFLinearGradient$1(this, x1, y1, x2, y2);
  },
  radialGradient: function radialGradient(x1, y1, r1, x2, y2, r2) {
    return new PDFRadialGradient$1(this, x1, y1, r1, x2, y2, r2);
  },
  pattern: function pattern(bbox, xStep, yStep, stream) {
    return new PDFTilingPattern$1(this, bbox, xStep, yStep, stream);
  }
};
var namedColors = {
  aliceblue: [240, 248, 255],
  antiquewhite: [250, 235, 215],
  aqua: [0, 255, 255],
  aquamarine: [127, 255, 212],
  azure: [240, 255, 255],
  beige: [245, 245, 220],
  bisque: [255, 228, 196],
  black: [0, 0, 0],
  blanchedalmond: [255, 235, 205],
  blue: [0, 0, 255],
  blueviolet: [138, 43, 226],
  brown: [165, 42, 42],
  burlywood: [222, 184, 135],
  cadetblue: [95, 158, 160],
  chartreuse: [127, 255, 0],
  chocolate: [210, 105, 30],
  coral: [255, 127, 80],
  cornflowerblue: [100, 149, 237],
  cornsilk: [255, 248, 220],
  crimson: [220, 20, 60],
  cyan: [0, 255, 255],
  darkblue: [0, 0, 139],
  darkcyan: [0, 139, 139],
  darkgoldenrod: [184, 134, 11],
  darkgray: [169, 169, 169],
  darkgreen: [0, 100, 0],
  darkgrey: [169, 169, 169],
  darkkhaki: [189, 183, 107],
  darkmagenta: [139, 0, 139],
  darkolivegreen: [85, 107, 47],
  darkorange: [255, 140, 0],
  darkorchid: [153, 50, 204],
  darkred: [139, 0, 0],
  darksalmon: [233, 150, 122],
  darkseagreen: [143, 188, 143],
  darkslateblue: [72, 61, 139],
  darkslategray: [47, 79, 79],
  darkslategrey: [47, 79, 79],
  darkturquoise: [0, 206, 209],
  darkviolet: [148, 0, 211],
  deeppink: [255, 20, 147],
  deepskyblue: [0, 191, 255],
  dimgray: [105, 105, 105],
  dimgrey: [105, 105, 105],
  dodgerblue: [30, 144, 255],
  firebrick: [178, 34, 34],
  floralwhite: [255, 250, 240],
  forestgreen: [34, 139, 34],
  fuchsia: [255, 0, 255],
  gainsboro: [220, 220, 220],
  ghostwhite: [248, 248, 255],
  gold: [255, 215, 0],
  goldenrod: [218, 165, 32],
  gray: [128, 128, 128],
  grey: [128, 128, 128],
  green: [0, 128, 0],
  greenyellow: [173, 255, 47],
  honeydew: [240, 255, 240],
  hotpink: [255, 105, 180],
  indianred: [205, 92, 92],
  indigo: [75, 0, 130],
  ivory: [255, 255, 240],
  khaki: [240, 230, 140],
  lavender: [230, 230, 250],
  lavenderblush: [255, 240, 245],
  lawngreen: [124, 252, 0],
  lemonchiffon: [255, 250, 205],
  lightblue: [173, 216, 230],
  lightcoral: [240, 128, 128],
  lightcyan: [224, 255, 255],
  lightgoldenrodyellow: [250, 250, 210],
  lightgray: [211, 211, 211],
  lightgreen: [144, 238, 144],
  lightgrey: [211, 211, 211],
  lightpink: [255, 182, 193],
  lightsalmon: [255, 160, 122],
  lightseagreen: [32, 178, 170],
  lightskyblue: [135, 206, 250],
  lightslategray: [119, 136, 153],
  lightslategrey: [119, 136, 153],
  lightsteelblue: [176, 196, 222],
  lightyellow: [255, 255, 224],
  lime: [0, 255, 0],
  limegreen: [50, 205, 50],
  linen: [250, 240, 230],
  magenta: [255, 0, 255],
  maroon: [128, 0, 0],
  mediumaquamarine: [102, 205, 170],
  mediumblue: [0, 0, 205],
  mediumorchid: [186, 85, 211],
  mediumpurple: [147, 112, 219],
  mediumseagreen: [60, 179, 113],
  mediumslateblue: [123, 104, 238],
  mediumspringgreen: [0, 250, 154],
  mediumturquoise: [72, 209, 204],
  mediumvioletred: [199, 21, 133],
  midnightblue: [25, 25, 112],
  mintcream: [245, 255, 250],
  mistyrose: [255, 228, 225],
  moccasin: [255, 228, 181],
  navajowhite: [255, 222, 173],
  navy: [0, 0, 128],
  oldlace: [253, 245, 230],
  olive: [128, 128, 0],
  olivedrab: [107, 142, 35],
  orange: [255, 165, 0],
  orangered: [255, 69, 0],
  orchid: [218, 112, 214],
  palegoldenrod: [238, 232, 170],
  palegreen: [152, 251, 152],
  paleturquoise: [175, 238, 238],
  palevioletred: [219, 112, 147],
  papayawhip: [255, 239, 213],
  peachpuff: [255, 218, 185],
  peru: [205, 133, 63],
  pink: [255, 192, 203],
  plum: [221, 160, 221],
  powderblue: [176, 224, 230],
  purple: [128, 0, 128],
  red: [255, 0, 0],
  rosybrown: [188, 143, 143],
  royalblue: [65, 105, 225],
  saddlebrown: [139, 69, 19],
  salmon: [250, 128, 114],
  sandybrown: [244, 164, 96],
  seagreen: [46, 139, 87],
  seashell: [255, 245, 238],
  sienna: [160, 82, 45],
  silver: [192, 192, 192],
  skyblue: [135, 206, 235],
  slateblue: [106, 90, 205],
  slategray: [112, 128, 144],
  slategrey: [112, 128, 144],
  snow: [255, 250, 250],
  springgreen: [0, 255, 127],
  steelblue: [70, 130, 180],
  tan: [210, 180, 140],
  teal: [0, 128, 128],
  thistle: [216, 191, 216],
  tomato: [255, 99, 71],
  turquoise: [64, 224, 208],
  violet: [238, 130, 238],
  wheat: [245, 222, 179],
  white: [255, 255, 255],
  whitesmoke: [245, 245, 245],
  yellow: [255, 255, 0],
  yellowgreen: [154, 205, 50]
};
var cx, cy, px, py, sx, sy;
cx = cy = px = py = sx = sy = 0;
var parameters = {
  A: 7,
  a: 7,
  C: 6,
  c: 6,
  H: 1,
  h: 1,
  L: 2,
  l: 2,
  M: 2,
  m: 2,
  Q: 4,
  q: 4,
  S: 4,
  s: 4,
  T: 2,
  t: 2,
  V: 1,
  v: 1,
  Z: 0,
  z: 0
};
var parse = function parse(path) {
  var cmd;
  var ret = [];
  var args = [];
  var curArg = '';
  var foundDecimal = false;
  var params = 0;
  var _iterator = _createForOfIteratorHelper(path),
      _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var c = _step.value;
      if (parameters[c] != null) {
        params = parameters[c];
        if (cmd) {
          if (curArg.length > 0) {
            args[args.length] = +curArg;
          }
          ret[ret.length] = {
            cmd: cmd,
            args: args
          };
          args = [];
          curArg = '';
          foundDecimal = false;
        }
        cmd = c;
      } else if ([' ', ','].includes(c) || c === '-' && curArg.length > 0 && curArg[curArg.length - 1] !== 'e' || c === '.' && foundDecimal) {
        if (curArg.length === 0) {
          continue;
        }
        if (args.length === params) {
          ret[ret.length] = {
            cmd: cmd,
            args: args
          };
          args = [+curArg];
          if (cmd === 'M') {
            cmd = 'L';
          }
          if (cmd === 'm') {
            cmd = 'l';
          }
        } else {
          args[args.length] = +curArg;
        }
        foundDecimal = c === '.';
        curArg = ['-', '.'].includes(c) ? c : '';
      } else {
        curArg += c;
        if (c === '.') {
          foundDecimal = true;
        }
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  if (curArg.length > 0) {
    if (args.length === params) {
      ret[ret.length] = {
        cmd: cmd,
        args: args
      };
      args = [+curArg];
      if (cmd === 'M') {
        cmd = 'L';
      }
      if (cmd === 'm') {
        cmd = 'l';
      }
    } else {
      args[args.length] = +curArg;
    }
  }
  ret[ret.length] = {
    cmd: cmd,
    args: args
  };
  return ret;
};
var _apply = function apply(commands, doc) {
  cx = cy = px = py = sx = sy = 0;
  for (var i = 0; i < commands.length; i++) {
    var c = commands[i];
    if (typeof runners[c.cmd] === 'function') {
      runners[c.cmd](doc, c.args);
    }
  }
};
var runners = {
  M: function M(doc, a) {
    cx = a[0];
    cy = a[1];
    px = py = null;
    sx = cx;
    sy = cy;
    return doc.moveTo(cx, cy);
  },
  m: function m(doc, a) {
    cx += a[0];
    cy += a[1];
    px = py = null;
    sx = cx;
    sy = cy;
    return doc.moveTo(cx, cy);
  },
  C: function C(doc, a) {
    cx = a[4];
    cy = a[5];
    px = a[2];
    py = a[3];
    return doc.bezierCurveTo.apply(doc, _toConsumableArray(a));
  },
  c: function c(doc, a) {
    doc.bezierCurveTo(a[0] + cx, a[1] + cy, a[2] + cx, a[3] + cy, a[4] + cx, a[5] + cy);
    px = cx + a[2];
    py = cy + a[3];
    cx += a[4];
    return cy += a[5];
  },
  S: function S(doc, a) {
    if (px === null) {
      px = cx;
      py = cy;
    }
    doc.bezierCurveTo(cx - (px - cx), cy - (py - cy), a[0], a[1], a[2], a[3]);
    px = a[0];
    py = a[1];
    cx = a[2];
    return cy = a[3];
  },
  s: function s(doc, a) {
    if (px === null) {
      px = cx;
      py = cy;
    }
    doc.bezierCurveTo(cx - (px - cx), cy - (py - cy), cx + a[0], cy + a[1], cx + a[2], cy + a[3]);
    px = cx + a[0];
    py = cy + a[1];
    cx += a[2];
    return cy += a[3];
  },
  Q: function Q(doc, a) {
    px = a[0];
    py = a[1];
    cx = a[2];
    cy = a[3];
    return doc.quadraticCurveTo(a[0], a[1], cx, cy);
  },
  q: function q(doc, a) {
    doc.quadraticCurveTo(a[0] + cx, a[1] + cy, a[2] + cx, a[3] + cy);
    px = cx + a[0];
    py = cy + a[1];
    cx += a[2];
    return cy += a[3];
  },
  T: function T(doc, a) {
    if (px === null) {
      px = cx;
      py = cy;
    } else {
      px = cx - (px - cx);
      py = cy - (py - cy);
    }
    doc.quadraticCurveTo(px, py, a[0], a[1]);
    px = cx - (px - cx);
    py = cy - (py - cy);
    cx = a[0];
    return cy = a[1];
  },
  t: function t(doc, a) {
    if (px === null) {
      px = cx;
      py = cy;
    } else {
      px = cx - (px - cx);
      py = cy - (py - cy);
    }
    doc.quadraticCurveTo(px, py, cx + a[0], cy + a[1]);
    cx += a[0];
    return cy += a[1];
  },
  A: function A(doc, a) {
    solveArc(doc, cx, cy, a);
    cx = a[5];
    return cy = a[6];
  },
  a: function a(doc, _a) {
    _a[5] += cx;
    _a[6] += cy;
    solveArc(doc, cx, cy, _a);
    cx = _a[5];
    return cy = _a[6];
  },
  L: function L(doc, a) {
    cx = a[0];
    cy = a[1];
    px = py = null;
    return doc.lineTo(cx, cy);
  },
  l: function l(doc, a) {
    cx += a[0];
    cy += a[1];
    px = py = null;
    return doc.lineTo(cx, cy);
  },
  H: function H(doc, a) {
    cx = a[0];
    px = py = null;
    return doc.lineTo(cx, cy);
  },
  h: function h(doc, a) {
    cx += a[0];
    px = py = null;
    return doc.lineTo(cx, cy);
  },
  V: function V(doc, a) {
    cy = a[0];
    px = py = null;
    return doc.lineTo(cx, cy);
  },
  v: function v(doc, a) {
    cy += a[0];
    px = py = null;
    return doc.lineTo(cx, cy);
  },
  Z: function Z(doc) {
    doc.closePath();
    cx = sx;
    return cy = sy;
  },
  z: function z(doc) {
    doc.closePath();
    cx = sx;
    return cy = sy;
  }
};
var solveArc = function solveArc(doc, x, y, coords) {
  var _coords = _slicedToArray(coords, 7),
      rx = _coords[0],
      ry = _coords[1],
      rot = _coords[2],
      large = _coords[3],
      sweep = _coords[4],
      ex = _coords[5],
      ey = _coords[6];
  var segs = arcToSegments(ex, ey, rx, ry, large, sweep, rot, x, y);
  var _iterator2 = _createForOfIteratorHelper(segs),
      _step2;
  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var seg = _step2.value;
      var bez = segmentToBezier.apply(void 0, _toConsumableArray(seg));
      doc.bezierCurveTo.apply(doc, _toConsumableArray(bez));
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
};
var arcToSegments = function arcToSegments(x, y, rx, ry, large, sweep, rotateX, ox, oy) {
  var th = rotateX * (Math.PI / 180);
  var sin_th = Math.sin(th);
  var cos_th = Math.cos(th);
  rx = Math.abs(rx);
  ry = Math.abs(ry);
  px = cos_th * (ox - x) * 0.5 + sin_th * (oy - y) * 0.5;
  py = cos_th * (oy - y) * 0.5 - sin_th * (ox - x) * 0.5;
  var pl = px * px / (rx * rx) + py * py / (ry * ry);
  if (pl > 1) {
    pl = Math.sqrt(pl);
    rx *= pl;
    ry *= pl;
  }
  var a00 = cos_th / rx;
  var a01 = sin_th / rx;
  var a10 = -sin_th / ry;
  var a11 = cos_th / ry;
  var x0 = a00 * ox + a01 * oy;
  var y0 = a10 * ox + a11 * oy;
  var x1 = a00 * x + a01 * y;
  var y1 = a10 * x + a11 * y;
  var d = (x1 - x0) * (x1 - x0) + (y1 - y0) * (y1 - y0);
  var sfactor_sq = 1 / d - 0.25;
  if (sfactor_sq < 0) {
    sfactor_sq = 0;
  }
  var sfactor = Math.sqrt(sfactor_sq);
  if (sweep === large) {
    sfactor = -sfactor;
  }
  var xc = 0.5 * (x0 + x1) - sfactor * (y1 - y0);
  var yc = 0.5 * (y0 + y1) + sfactor * (x1 - x0);
  var th0 = Math.atan2(y0 - yc, x0 - xc);
  var th1 = Math.atan2(y1 - yc, x1 - xc);
  var th_arc = th1 - th0;
  if (th_arc < 0 && sweep === 1) {
    th_arc += 2 * Math.PI;
  } else if (th_arc > 0 && sweep === 0) {
    th_arc -= 2 * Math.PI;
  }
  var segments = Math.ceil(Math.abs(th_arc / (Math.PI * 0.5 + 0.001)));
  var result = [];
  for (var i = 0; i < segments; i++) {
    var th2 = th0 + i * th_arc / segments;
    var th3 = th0 + (i + 1) * th_arc / segments;
    result[i] = [xc, yc, th2, th3, rx, ry, sin_th, cos_th];
  }
  return result;
};
var segmentToBezier = function segmentToBezier(cx, cy, th0, th1, rx, ry, sin_th, cos_th) {
  var a00 = cos_th * rx;
  var a01 = -sin_th * ry;
  var a10 = sin_th * rx;
  var a11 = cos_th * ry;
  var th_half = 0.5 * (th1 - th0);
  var t = 8 / 3 * Math.sin(th_half * 0.5) * Math.sin(th_half * 0.5) / Math.sin(th_half);
  var x1 = cx + Math.cos(th0) - t * Math.sin(th0);
  var y1 = cy + Math.sin(th0) + t * Math.cos(th0);
  var x3 = cx + Math.cos(th1);
  var y3 = cy + Math.sin(th1);
  var x2 = x3 + t * Math.sin(th1);
  var y2 = y3 - t * Math.cos(th1);
  return [a00 * x1 + a01 * y1, a10 * x1 + a11 * y1, a00 * x2 + a01 * y2, a10 * x2 + a11 * y2, a00 * x3 + a01 * y3, a10 * x3 + a11 * y3];
};
var SVGPath = function () {
  function SVGPath() {
    _classCallCheck$1(this, SVGPath);
  }
  _createClass(SVGPath, null, [{
    key: "apply",
    value: function apply(doc, path) {
      var commands = parse(path);
      _apply(commands, doc);
    }
  }]);
  return SVGPath;
}();
var number$1 = PDFObject.number;
var KAPPA = 4.0 * ((Math.sqrt(2) - 1.0) / 3.0);
var VectorMixin = {
  initVector: function initVector() {
    this._ctm = [1, 0, 0, 1, 0, 0];
    return this._ctmStack = [];
  },
  save: function save() {
    this._ctmStack.push(this._ctm.slice());
    return this.addContent('q');
  },
  restore: function restore() {
    this._ctm = this._ctmStack.pop() || [1, 0, 0, 1, 0, 0];
    return this.addContent('Q');
  },
  closePath: function closePath() {
    return this.addContent('h');
  },
  lineWidth: function lineWidth(w) {
    return this.addContent("".concat(number$1(w), " w"));
  },
  _CAP_STYLES: {
    BUTT: 0,
    ROUND: 1,
    SQUARE: 2
  },
  lineCap: function lineCap(c) {
    if (typeof c === 'string') {
      c = this._CAP_STYLES[c.toUpperCase()];
    }
    return this.addContent("".concat(c, " J"));
  },
  _JOIN_STYLES: {
    MITER: 0,
    ROUND: 1,
    BEVEL: 2
  },
  lineJoin: function lineJoin(j) {
    if (typeof j === 'string') {
      j = this._JOIN_STYLES[j.toUpperCase()];
    }
    return this.addContent("".concat(j, " j"));
  },
  miterLimit: function miterLimit(m) {
    return this.addContent("".concat(number$1(m), " M"));
  },
  dash: function dash(length) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var originalLength = length;
    if (!Array.isArray(length)) {
      length = [length, options.space || length];
    }
    var valid = length.every(function (x) {
      return Number.isFinite(x) && x > 0;
    });
    if (!valid) {
      throw new Error("dash(".concat(JSON.stringify(originalLength), ", ").concat(JSON.stringify(options), ") invalid, lengths must be numeric and greater than zero"));
    }
    length = length.map(number$1).join(' ');
    return this.addContent("[".concat(length, "] ").concat(number$1(options.phase || 0), " d"));
  },
  undash: function undash() {
    return this.addContent('[] 0 d');
  },
  moveTo: function moveTo(x, y) {
    return this.addContent("".concat(number$1(x), " ").concat(number$1(y), " m"));
  },
  lineTo: function lineTo(x, y) {
    return this.addContent("".concat(number$1(x), " ").concat(number$1(y), " l"));
  },
  bezierCurveTo: function bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y) {
    return this.addContent("".concat(number$1(cp1x), " ").concat(number$1(cp1y), " ").concat(number$1(cp2x), " ").concat(number$1(cp2y), " ").concat(number$1(x), " ").concat(number$1(y), " c"));
  },
  quadraticCurveTo: function quadraticCurveTo(cpx, cpy, x, y) {
    return this.addContent("".concat(number$1(cpx), " ").concat(number$1(cpy), " ").concat(number$1(x), " ").concat(number$1(y), " v"));
  },
  rect: function rect(x, y, w, h) {
    return this.addContent("".concat(number$1(x), " ").concat(number$1(y), " ").concat(number$1(w), " ").concat(number$1(h), " re"));
  },
  roundedRect: function roundedRect(x, y, w, h, r) {
    if (r == null) {
      r = 0;
    }
    r = Math.min(r, 0.5 * w, 0.5 * h);
    var c = r * (1.0 - KAPPA);
    this.moveTo(x + r, y);
    this.lineTo(x + w - r, y);
    this.bezierCurveTo(x + w - c, y, x + w, y + c, x + w, y + r);
    this.lineTo(x + w, y + h - r);
    this.bezierCurveTo(x + w, y + h - c, x + w - c, y + h, x + w - r, y + h);
    this.lineTo(x + r, y + h);
    this.bezierCurveTo(x + c, y + h, x, y + h - c, x, y + h - r);
    this.lineTo(x, y + r);
    this.bezierCurveTo(x, y + c, x + c, y, x + r, y);
    return this.closePath();
  },
  ellipse: function ellipse(x, y, r1, r2) {
    if (r2 == null) {
      r2 = r1;
    }
    x -= r1;
    y -= r2;
    var ox = r1 * KAPPA;
    var oy = r2 * KAPPA;
    var xe = x + r1 * 2;
    var ye = y + r2 * 2;
    var xm = x + r1;
    var ym = y + r2;
    this.moveTo(x, ym);
    this.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);
    this.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);
    this.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);
    this.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);
    return this.closePath();
  },
  circle: function circle(x, y, radius) {
    return this.ellipse(x, y, radius);
  },
  arc: function arc(x, y, radius, startAngle, endAngle, anticlockwise) {
    if (anticlockwise == null) {
      anticlockwise = false;
    }
    var TWO_PI = 2.0 * Math.PI;
    var HALF_PI = 0.5 * Math.PI;
    var deltaAng = endAngle - startAngle;
    if (Math.abs(deltaAng) > TWO_PI) {
      deltaAng = TWO_PI;
    } else if (deltaAng !== 0 && anticlockwise !== deltaAng < 0) {
      var dir = anticlockwise ? -1 : 1;
      deltaAng = dir * TWO_PI + deltaAng;
    }
    var numSegs = Math.ceil(Math.abs(deltaAng) / HALF_PI);
    var segAng = deltaAng / numSegs;
    var handleLen = segAng / HALF_PI * KAPPA * radius;
    var curAng = startAngle;
    var deltaCx = -Math.sin(curAng) * handleLen;
    var deltaCy = Math.cos(curAng) * handleLen;
    var ax = x + Math.cos(curAng) * radius;
    var ay = y + Math.sin(curAng) * radius;
    this.moveTo(ax, ay);
    for (var segIdx = 0; segIdx < numSegs; segIdx++) {
      var cp1x = ax + deltaCx;
      var cp1y = ay + deltaCy;
      curAng += segAng;
      ax = x + Math.cos(curAng) * radius;
      ay = y + Math.sin(curAng) * radius;
      deltaCx = -Math.sin(curAng) * handleLen;
      deltaCy = Math.cos(curAng) * handleLen;
      var cp2x = ax - deltaCx;
      var cp2y = ay - deltaCy;
      this.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, ax, ay);
    }
    return this;
  },
  polygon: function polygon() {
    for (var _len = arguments.length, points = new Array(_len), _key = 0; _key < _len; _key++) {
      points[_key] = arguments[_key];
    }
    this.moveTo.apply(this, _toConsumableArray(points.shift() || []));
    for (var _i = 0, _points = points; _i < _points.length; _i++) {
      var point = _points[_i];
      this.lineTo.apply(this, _toConsumableArray(point || []));
    }
    return this.closePath();
  },
  path: function path(_path) {
    SVGPath.apply(this, _path);
    return this;
  },
  _windingRule: function _windingRule(rule) {
    if (/even-?odd/.test(rule)) {
      return '*';
    }
    return '';
  },
  fill: function fill(color, rule) {
    if (/(even-?odd)|(non-?zero)/.test(color)) {
      rule = color;
      color = null;
    }
    if (color) {
      this.fillColor(color);
    }
    return this.addContent("f".concat(this._windingRule(rule)));
  },
  stroke: function stroke(color) {
    if (color) {
      this.strokeColor(color);
    }
    return this.addContent('S');
  },
  fillAndStroke: function fillAndStroke(fillColor, strokeColor, rule) {
    if (strokeColor == null) {
      strokeColor = fillColor;
    }
    var isFillRule = /(even-?odd)|(non-?zero)/;
    if (isFillRule.test(fillColor)) {
      rule = fillColor;
      fillColor = null;
    }
    if (isFillRule.test(strokeColor)) {
      rule = strokeColor;
      strokeColor = fillColor;
    }
    if (fillColor) {
      this.fillColor(fillColor);
      this.strokeColor(strokeColor);
    }
    return this.addContent("B".concat(this._windingRule(rule)));
  },
  clip: function clip(rule) {
    return this.addContent("W".concat(this._windingRule(rule), " n"));
  },
  transform: function transform(m11, m12, m21, m22, dx, dy) {
    var m = this._ctm;
    var _m = _slicedToArray(m, 6),
        m0 = _m[0],
        m1 = _m[1],
        m2 = _m[2],
        m3 = _m[3],
        m4 = _m[4],
        m5 = _m[5];
    m[0] = m0 * m11 + m2 * m12;
    m[1] = m1 * m11 + m3 * m12;
    m[2] = m0 * m21 + m2 * m22;
    m[3] = m1 * m21 + m3 * m22;
    m[4] = m0 * dx + m2 * dy + m4;
    m[5] = m1 * dx + m3 * dy + m5;
    var values = [m11, m12, m21, m22, dx, dy].map(function (v) {
      return number$1(v);
    }).join(' ');
    return this.addContent("".concat(values, " cm"));
  },
  translate: function translate(x, y) {
    return this.transform(1, 0, 0, 1, x, y);
  },
  rotate: function rotate(angle) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var y;
    var rad = angle * Math.PI / 180;
    var cos = Math.cos(rad);
    var sin = Math.sin(rad);
    var x = y = 0;
    if (options.origin != null) {
      var _options$origin = _slicedToArray(options.origin, 2);
      x = _options$origin[0];
      y = _options$origin[1];
      var x1 = x * cos - y * sin;
      var y1 = x * sin + y * cos;
      x -= x1;
      y -= y1;
    }
    return this.transform(cos, sin, -sin, cos, x, y);
  },
  scale: function scale(xFactor, yFactor) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var y;
    if (yFactor == null) {
      yFactor = xFactor;
    }
    if (typeof yFactor === 'object') {
      options = yFactor;
      yFactor = xFactor;
    }
    var x = y = 0;
    if (options.origin != null) {
      var _options$origin2 = _slicedToArray(options.origin, 2);
      x = _options$origin2[0];
      y = _options$origin2[1];
      x -= xFactor * x;
      y -= yFactor * y;
    }
    return this.transform(xFactor, 0, 0, yFactor, x, y);
  }
};
var WIN_ANSI_MAP = {
  402: 131,
  8211: 150,
  8212: 151,
  8216: 145,
  8217: 146,
  8218: 130,
  8220: 147,
  8221: 148,
  8222: 132,
  8224: 134,
  8225: 135,
  8226: 149,
  8230: 133,
  8364: 128,
  8240: 137,
  8249: 139,
  8250: 155,
  710: 136,
  8482: 153,
  338: 140,
  339: 156,
  732: 152,
  352: 138,
  353: 154,
  376: 159,
  381: 142,
  382: 158
};
var characters = ".notdef       .notdef        .notdef        .notdef\n.notdef       .notdef        .notdef        .notdef\n.notdef       .notdef        .notdef        .notdef\n.notdef       .notdef        .notdef        .notdef\n.notdef       .notdef        .notdef        .notdef\n.notdef       .notdef        .notdef        .notdef\n.notdef       .notdef        .notdef        .notdef\n.notdef       .notdef        .notdef        .notdef\n  \nspace         exclam         quotedbl       numbersign\ndollar        percent        ampersand      quotesingle\nparenleft     parenright     asterisk       plus\ncomma         hyphen         period         slash\nzero          one            two            three\nfour          five           six            seven\neight         nine           colon          semicolon\nless          equal          greater        question\n  \nat            A              B              C\nD             E              F              G\nH             I              J              K\nL             M              N              O\nP             Q              R              S\nT             U              V              W\nX             Y              Z              bracketleft\nbackslash     bracketright   asciicircum    underscore\n  \ngrave         a              b              c\nd             e              f              g\nh             i              j              k\nl             m              n              o\np             q              r              s\nt             u              v              w\nx             y              z              braceleft\nbar           braceright     asciitilde     .notdef\n  \nEuro          .notdef        quotesinglbase florin\nquotedblbase  ellipsis       dagger         daggerdbl\ncircumflex    perthousand    Scaron         guilsinglleft\nOE            .notdef        Zcaron         .notdef\n.notdef       quoteleft      quoteright     quotedblleft\nquotedblright bullet         endash         emdash\ntilde         trademark      scaron         guilsinglright\noe            .notdef        zcaron         ydieresis\n  \nspace         exclamdown     cent           sterling\ncurrency      yen            brokenbar      section\ndieresis      copyright      ordfeminine    guillemotleft\nlogicalnot    hyphen         registered     macron\ndegree        plusminus      twosuperior    threesuperior\nacute         mu             paragraph      periodcentered\ncedilla       onesuperior    ordmasculine   guillemotright\nonequarter    onehalf        threequarters  questiondown\n  \nAgrave        Aacute         Acircumflex    Atilde\nAdieresis     Aring          AE             Ccedilla\nEgrave        Eacute         Ecircumflex    Edieresis\nIgrave        Iacute         Icircumflex    Idieresis\nEth           Ntilde         Ograve         Oacute\nOcircumflex   Otilde         Odieresis      multiply\nOslash        Ugrave         Uacute         Ucircumflex\nUdieresis     Yacute         Thorn          germandbls\n  \nagrave        aacute         acircumflex    atilde\nadieresis     aring          ae             ccedilla\negrave        eacute         ecircumflex    edieresis\nigrave        iacute         icircumflex    idieresis\neth           ntilde         ograve         oacute\nocircumflex   otilde         odieresis      divide\noslash        ugrave         uacute         ucircumflex\nudieresis     yacute         thorn          ydieresis".split(/\s+/);
var AFMFont = function () {
  _createClass(AFMFont, null, [{
    key: "open",
    value: function open(filename) {
      return new AFMFont(fs$1.readFileSync(filename, 'utf8'));
    }
  }]);
  function AFMFont(contents) {
    _classCallCheck$1(this, AFMFont);
    this.contents = contents;
    this.attributes = {};
    this.glyphWidths = {};
    this.boundingBoxes = {};
    this.kernPairs = {};
    this.parse();
    this.charWidths = new Array(256);
    for (var char = 0; char <= 255; char++) {
      this.charWidths[char] = this.glyphWidths[characters[char]];
    }
    this.bbox = this.attributes['FontBBox'].split(/\s+/).map(function (e) {
      return +e;
    });
    this.ascender = +(this.attributes['Ascender'] || 0);
    this.descender = +(this.attributes['Descender'] || 0);
    this.xHeight = +(this.attributes['XHeight'] || 0);
    this.capHeight = +(this.attributes['CapHeight'] || 0);
    this.lineGap = this.bbox[3] - this.bbox[1] - (this.ascender - this.descender);
  }
  _createClass(AFMFont, [{
    key: "parse",
    value: function parse() {
      var section = '';
      var _iterator = _createForOfIteratorHelper(this.contents.split('\n')),
          _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var line = _step.value;
          var match;
          var a;
          if (match = line.match(/^Start(\w+)/)) {
            section = match[1];
            continue;
          } else if (match = line.match(/^End(\w+)/)) {
            section = '';
            continue;
          }
          switch (section) {
            case 'FontMetrics':
              match = line.match(/(^\w+)\s+(.*)/);
              var key = match[1];
              var value = match[2];
              if (a = this.attributes[key]) {
                if (!Array.isArray(a)) {
                  a = this.attributes[key] = [a];
                }
                a.push(value);
              } else {
                this.attributes[key] = value;
              }
              break;
            case 'CharMetrics':
              if (!/^CH?\s/.test(line)) {
                continue;
              }
              var name = line.match(/\bN\s+(\.?\w+)\s*;/)[1];
              this.glyphWidths[name] = +line.match(/\bWX\s+(\d+)\s*;/)[1];
              break;
            case 'KernPairs':
              match = line.match(/^KPX\s+(\.?\w+)\s+(\.?\w+)\s+(-?\d+)/);
              if (match) {
                this.kernPairs[match[1] + '\0' + match[2]] = parseInt(match[3]);
              }
              break;
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }, {
    key: "encodeText",
    value: function encodeText(text) {
      var res = [];
      for (var i = 0, len = text.length; i < len; i++) {
        var char = text.charCodeAt(i);
        char = WIN_ANSI_MAP[char] || char;
        res.push(char.toString(16));
      }
      return res;
    }
  }, {
    key: "glyphsForString",
    value: function glyphsForString(string) {
      var glyphs = [];
      for (var i = 0, len = string.length; i < len; i++) {
        var charCode = string.charCodeAt(i);
        glyphs.push(this.characterToGlyph(charCode));
      }
      return glyphs;
    }
  }, {
    key: "characterToGlyph",
    value: function characterToGlyph(character) {
      return characters[WIN_ANSI_MAP[character] || character] || '.notdef';
    }
  }, {
    key: "widthOfGlyph",
    value: function widthOfGlyph(glyph) {
      return this.glyphWidths[glyph] || 0;
    }
  }, {
    key: "getKernPair",
    value: function getKernPair(left, right) {
      return this.kernPairs[left + '\0' + right] || 0;
    }
  }, {
    key: "advancesForGlyphs",
    value: function advancesForGlyphs(glyphs) {
      var advances = [];
      for (var index = 0; index < glyphs.length; index++) {
        var left = glyphs[index];
        var right = glyphs[index + 1];
        advances.push(this.widthOfGlyph(left) + this.getKernPair(left, right));
      }
      return advances;
    }
  }]);
  return AFMFont;
}();
var PDFFont = function () {
  function PDFFont() {
    _classCallCheck$1(this, PDFFont);
  }
  _createClass(PDFFont, [{
    key: "encode",
    value: function encode() {
      throw new Error('Must be implemented by subclasses');
    }
  }, {
    key: "widthOfString",
    value: function widthOfString() {
      throw new Error('Must be implemented by subclasses');
    }
  }, {
    key: "ref",
    value: function ref() {
      return this.dictionary != null ? this.dictionary : this.dictionary = this.document.ref();
    }
  }, {
    key: "finalize",
    value: function finalize() {
      if (this.embedded || this.dictionary == null) {
        return;
      }
      this.embed();
      return this.embedded = true;
    }
  }, {
    key: "embed",
    value: function embed() {
      throw new Error('Must be implemented by subclasses');
    }
  }, {
    key: "lineHeight",
    value: function lineHeight(size, includeGap) {
      if (includeGap == null) {
        includeGap = false;
      }
      var gap = includeGap ? this.lineGap : 0;
      return (this.ascender + gap - this.descender) / 1000 * size;
    }
  }]);
  return PDFFont;
}();
var STANDARD_FONTS$1 = {
  Courier: function Courier() {
    return fs$1.readFileSync("" + '/data/Courier.afm', 'utf8');
  },
  'Courier-Bold': function CourierBold() {
    return fs$1.readFileSync("" + '/data/Courier-Bold.afm', 'utf8');
  },
  'Courier-Oblique': function CourierOblique() {
    return fs$1.readFileSync("" + '/data/Courier-Oblique.afm', 'utf8');
  },
  'Courier-BoldOblique': function CourierBoldOblique() {
    return fs$1.readFileSync("" + '/data/Courier-BoldOblique.afm', 'utf8');
  },
  Helvetica: function Helvetica() {
    return fs$1.readFileSync("" + '/data/Helvetica.afm', 'utf8');
  },
  'Helvetica-Bold': function HelveticaBold() {
    return fs$1.readFileSync("" + '/data/Helvetica-Bold.afm', 'utf8');
  },
  'Helvetica-Oblique': function HelveticaOblique() {
    return fs$1.readFileSync("" + '/data/Helvetica-Oblique.afm', 'utf8');
  },
  'Helvetica-BoldOblique': function HelveticaBoldOblique() {
    return fs$1.readFileSync("" + '/data/Helvetica-BoldOblique.afm', 'utf8');
  },
  'Times-Roman': function TimesRoman() {
    return fs$1.readFileSync("" + '/data/Times-Roman.afm', 'utf8');
  },
  'Times-Bold': function TimesBold() {
    return fs$1.readFileSync("" + '/data/Times-Bold.afm', 'utf8');
  },
  'Times-Italic': function TimesItalic() {
    return fs$1.readFileSync("" + '/data/Times-Italic.afm', 'utf8');
  },
  'Times-BoldItalic': function TimesBoldItalic() {
    return fs$1.readFileSync("" + '/data/Times-BoldItalic.afm', 'utf8');
  },
  Symbol: function Symbol() {
    return fs$1.readFileSync("" + '/data/Symbol.afm', 'utf8');
  },
  ZapfDingbats: function ZapfDingbats() {
    return fs$1.readFileSync("" + '/data/ZapfDingbats.afm', 'utf8');
  }
};
var StandardFont = function (_PDFFont) {
  _inherits(StandardFont, _PDFFont);
  var _super = _createSuper(StandardFont);
  function StandardFont(document, name, id) {
    var _this;
    _classCallCheck$1(this, StandardFont);
    _this = _super.call(this);
    _this.document = document;
    _this.name = name;
    _this.id = id;
    _this.font = new AFMFont(STANDARD_FONTS$1[_this.name]());
    var _this$font = _this.font;
    _this.ascender = _this$font.ascender;
    _this.descender = _this$font.descender;
    _this.bbox = _this$font.bbox;
    _this.lineGap = _this$font.lineGap;
    _this.xHeight = _this$font.xHeight;
    _this.capHeight = _this$font.capHeight;
    return _this;
  }
  _createClass(StandardFont, [{
    key: "embed",
    value: function embed() {
      this.dictionary.data = {
        Type: 'Font',
        BaseFont: this.name,
        Subtype: 'Type1',
        Encoding: 'WinAnsiEncoding'
      };
      return this.dictionary.end();
    }
  }, {
    key: "encode",
    value: function encode(text) {
      var encoded = this.font.encodeText(text);
      var glyphs = this.font.glyphsForString("".concat(text));
      var advances = this.font.advancesForGlyphs(glyphs);
      var positions = [];
      for (var i = 0; i < glyphs.length; i++) {
        var glyph = glyphs[i];
        positions.push({
          xAdvance: advances[i],
          yAdvance: 0,
          xOffset: 0,
          yOffset: 0,
          advanceWidth: this.font.widthOfGlyph(glyph)
        });
      }
      return [encoded, positions];
    }
  }, {
    key: "widthOfString",
    value: function widthOfString(string, size) {
      var glyphs = this.font.glyphsForString("".concat(string));
      var advances = this.font.advancesForGlyphs(glyphs);
      var width = 0;
      var _iterator = _createForOfIteratorHelper(advances),
          _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var advance = _step.value;
          width += advance;
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      var scale = size / 1000;
      return width * scale;
    }
  }], [{
    key: "isStandardFont",
    value: function isStandardFont(name) {
      return name in STANDARD_FONTS$1;
    }
  }]);
  return StandardFont;
}(PDFFont);
var toHex = function toHex(num) {
  return "0000".concat(num.toString(16)).slice(-4);
};
var EmbeddedFont = function (_PDFFont) {
  _inherits(EmbeddedFont, _PDFFont);
  var _super = _createSuper(EmbeddedFont);
  function EmbeddedFont(document, font, id) {
    var _this;
    _classCallCheck$1(this, EmbeddedFont);
    _this = _super.call(this);
    _this.document = document;
    _this.font = font;
    _this.id = id;
    _this.subset = _this.font.createSubset();
    _this.unicode = [[0]];
    _this.widths = [_this.font.getGlyph(0).advanceWidth];
    _this.name = _this.font.postscriptName;
    _this.scale = 1000 / _this.font.unitsPerEm;
    _this.ascender = _this.font.ascent * _this.scale;
    _this.descender = _this.font.descent * _this.scale;
    _this.xHeight = _this.font.xHeight * _this.scale;
    _this.capHeight = _this.font.capHeight * _this.scale;
    _this.lineGap = _this.font.lineGap * _this.scale;
    _this.bbox = _this.font.bbox;
    if (document.options.fontLayoutCache !== false) {
      _this.layoutCache = Object.create(null);
    }
    return _this;
  }
  _createClass(EmbeddedFont, [{
    key: "layoutRun",
    value: function layoutRun(text, features) {
      var run = this.font.layout(text, features);
      for (var i = 0; i < run.positions.length; i++) {
        var position = run.positions[i];
        for (var key in position) {
          position[key] *= this.scale;
        }
        position.advanceWidth = run.glyphs[i].advanceWidth * this.scale;
      }
      return run;
    }
  }, {
    key: "layoutCached",
    value: function layoutCached(text) {
      if (!this.layoutCache) {
        return this.layoutRun(text);
      }
      var cached;
      if (cached = this.layoutCache[text]) {
        return cached;
      }
      var run = this.layoutRun(text);
      this.layoutCache[text] = run;
      return run;
    }
  }, {
    key: "layout",
    value: function layout(text, features, onlyWidth) {
      if (features) {
        return this.layoutRun(text, features);
      }
      var glyphs = onlyWidth ? null : [];
      var positions = onlyWidth ? null : [];
      var advanceWidth = 0;
      var last = 0;
      var index = 0;
      while (index <= text.length) {
        var needle;
        if (index === text.length && last < index || (needle = text.charAt(index), [' ', '\t'].includes(needle))) {
          var run = this.layoutCached(text.slice(last, ++index));
          if (!onlyWidth) {
            glyphs = glyphs.concat(run.glyphs);
            positions = positions.concat(run.positions);
          }
          advanceWidth += run.advanceWidth;
          last = index;
        } else {
          index++;
        }
      }
      return {
        glyphs: glyphs,
        positions: positions,
        advanceWidth: advanceWidth
      };
    }
  }, {
    key: "encode",
    value: function encode(text, features) {
      var _this$layout = this.layout(text, features),
          glyphs = _this$layout.glyphs,
          positions = _this$layout.positions;
      var res = [];
      for (var i = 0; i < glyphs.length; i++) {
        var glyph = glyphs[i];
        var gid = this.subset.includeGlyph(glyph.id);
        res.push("0000".concat(gid.toString(16)).slice(-4));
        if (this.widths[gid] == null) {
          this.widths[gid] = glyph.advanceWidth * this.scale;
        }
        if (this.unicode[gid] == null) {
          this.unicode[gid] = glyph.codePoints;
        }
      }
      return [res, positions];
    }
  }, {
    key: "widthOfString",
    value: function widthOfString(string, size, features) {
      var width = this.layout(string, features, true).advanceWidth;
      var scale = size / 1000;
      return width * scale;
    }
  }, {
    key: "embed",
    value: function embed() {
      var _this2 = this;
      var isCFF = this.subset.cff != null;
      var fontFile = this.document.ref();
      if (isCFF) {
        fontFile.data.Subtype = 'CIDFontType0C';
      }
      this.subset.encodeStream().on('data', function (data) {
        return fontFile.write(data);
      }).on('end', function () {
        return fontFile.end();
      });
      var familyClass = ((this.font['OS/2'] != null ? this.font['OS/2'].sFamilyClass : undefined) || 0) >> 8;
      var flags = 0;
      if (this.font.post.isFixedPitch) {
        flags |= 1 << 0;
      }
      if (1 <= familyClass && familyClass <= 7) {
        flags |= 1 << 1;
      }
      flags |= 1 << 2;
      if (familyClass === 10) {
        flags |= 1 << 3;
      }
      if (this.font.head.macStyle.italic) {
        flags |= 1 << 6;
      }
      var tag = [1, 2, 3, 4, 5, 6].map(function (i) {
        return String.fromCharCode((_this2.id.charCodeAt(i) || 73) + 17);
      }).join('');
      var name = tag + '+' + this.font.postscriptName;
      var bbox = this.font.bbox;
      var descriptor = this.document.ref({
        Type: 'FontDescriptor',
        FontName: name,
        Flags: flags,
        FontBBox: [bbox.minX * this.scale, bbox.minY * this.scale, bbox.maxX * this.scale, bbox.maxY * this.scale],
        ItalicAngle: this.font.italicAngle,
        Ascent: this.ascender,
        Descent: this.descender,
        CapHeight: (this.font.capHeight || this.font.ascent) * this.scale,
        XHeight: (this.font.xHeight || 0) * this.scale,
        StemV: 0
      });
      if (isCFF) {
        descriptor.data.FontFile3 = fontFile;
      } else {
        descriptor.data.FontFile2 = fontFile;
      }
      if (this.document.subset) {
        var CIDSet = buffer.Buffer.from('FFFFFFFFC0', 'hex');
        var CIDSetRef = this.document.ref();
        CIDSetRef.write(CIDSet);
        CIDSetRef.end();
        descriptor.data.CIDSet = CIDSetRef;
      }
      descriptor.end();
      var descendantFontData = {
        Type: 'Font',
        Subtype: 'CIDFontType0',
        BaseFont: name,
        CIDSystemInfo: {
          Registry: new String('Adobe'),
          Ordering: new String('Identity'),
          Supplement: 0
        },
        FontDescriptor: descriptor,
        W: [0, this.widths]
      };
      if (!isCFF) {
        descendantFontData.Subtype = 'CIDFontType2';
        descendantFontData.CIDToGIDMap = 'Identity';
      }
      var descendantFont = this.document.ref(descendantFontData);
      descendantFont.end();
      this.dictionary.data = {
        Type: 'Font',
        Subtype: 'Type0',
        BaseFont: name,
        Encoding: 'Identity-H',
        DescendantFonts: [descendantFont],
        ToUnicode: this.toUnicodeCmap()
      };
      return this.dictionary.end();
    }
  }, {
    key: "toUnicodeCmap",
    value: function toUnicodeCmap() {
      var cmap = this.document.ref();
      var entries = [];
      var _iterator = _createForOfIteratorHelper(this.unicode),
          _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var codePoints = _step.value;
          var encoded = [];
          var _iterator2 = _createForOfIteratorHelper(codePoints),
              _step2;
          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var value = _step2.value;
              if (value > 0xffff) {
                value -= 0x10000;
                encoded.push(toHex(value >>> 10 & 0x3ff | 0xd800));
                value = 0xdc00 | value & 0x3ff;
              }
              encoded.push(toHex(value));
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
          entries.push("<".concat(encoded.join(' '), ">"));
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      cmap.end("/CIDInit /ProcSet findresource begin\n12 dict begin\nbegincmap\n/CIDSystemInfo <<\n  /Registry (Adobe)\n  /Ordering (UCS)\n  /Supplement 0\n>> def\n/CMapName /Adobe-Identity-UCS def\n/CMapType 2 def\n1 begincodespacerange\n<0000><ffff>\nendcodespacerange\n1 beginbfrange\n<0000> <".concat(toHex(entries.length - 1), "> [").concat(entries.join(' '), "]\nendbfrange\nendcmap\nCMapName currentdict /CMap defineresource pop\nend\nend"));
      return cmap;
    }
  }]);
  return EmbeddedFont;
}(PDFFont);
var PDFFontFactory = function () {
  function PDFFontFactory() {
    _classCallCheck$1(this, PDFFontFactory);
  }
  _createClass(PDFFontFactory, null, [{
    key: "open",
    value: function open(document, src, family, id) {
      var font;
      if (typeof src === 'string') {
        if (StandardFont.isStandardFont(src)) {
          return new StandardFont(document, src, id);
        }
        src = fs$1.readFileSync(src);
      }
      if (buffer.Buffer.isBuffer(src)) {
        font = $cf838c15c8b009ba$export$2e2bcd8739ae039.create(src, family);
      } else if (src instanceof Uint8Array) {
        font = $cf838c15c8b009ba$export$2e2bcd8739ae039.create(buffer.Buffer.from(src), family);
      } else if (src instanceof ArrayBuffer) {
        font = $cf838c15c8b009ba$export$2e2bcd8739ae039.create(buffer.Buffer.from(new Uint8Array(src)), family);
      }
      if (font == null) {
        throw new Error('Not a supported font format or standard PDF font.');
      }
      return new EmbeddedFont(document, font, id);
    }
  }]);
  return PDFFontFactory;
}();
var FontsMixin = {
  initFonts: function initFonts() {
    var defaultFont = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Helvetica';
    this._fontFamilies = {};
    this._fontCount = 0;
    this._fontSize = 12;
    this._font = null;
    this._registeredFonts = {};
    if (defaultFont) {
      this.font(defaultFont);
    }
  },
  font: function font(src, family, size) {
    var cacheKey, font;
    if (typeof family === 'number') {
      size = family;
      family = null;
    }
    if (typeof src === 'string' && this._registeredFonts[src]) {
      cacheKey = src;
      var _this$_registeredFont = this._registeredFonts[src];
      src = _this$_registeredFont.src;
      family = _this$_registeredFont.family;
    } else {
      cacheKey = family || src;
      if (typeof cacheKey !== 'string') {
        cacheKey = null;
      }
    }
    if (size != null) {
      this.fontSize(size);
    }
    if (font = this._fontFamilies[cacheKey]) {
      this._font = font;
      return this;
    }
    var id = "F".concat(++this._fontCount);
    this._font = PDFFontFactory.open(this, src, family, id);
    if (font = this._fontFamilies[this._font.name]) {
      this._font = font;
      return this;
    }
    if (cacheKey) {
      this._fontFamilies[cacheKey] = this._font;
    }
    if (this._font.name) {
      this._fontFamilies[this._font.name] = this._font;
    }
    return this;
  },
  fontSize: function fontSize(_fontSize) {
    this._fontSize = _fontSize;
    return this;
  },
  currentLineHeight: function currentLineHeight(includeGap) {
    if (includeGap == null) {
      includeGap = false;
    }
    return this._font.lineHeight(this._fontSize, includeGap);
  },
  registerFont: function registerFont(name, src, family) {
    this._registeredFonts[name] = {
      src: src,
      family: family
    };
    return this;
  }
};
var LineWrapper = function (_EventEmitter) {
  _inherits(LineWrapper, _EventEmitter);
  var _super = _createSuper(LineWrapper);
  function LineWrapper(document, options) {
    var _this;
    _classCallCheck$1(this, LineWrapper);
    _this = _super.call(this);
    _this.document = document;
    _this.indent = options.indent || 0;
    _this.characterSpacing = options.characterSpacing || 0;
    _this.wordSpacing = options.wordSpacing === 0;
    _this.columns = options.columns || 1;
    _this.columnGap = options.columnGap != null ? options.columnGap : 18;
    _this.lineWidth = (options.width - _this.columnGap * (_this.columns - 1)) / _this.columns;
    _this.spaceLeft = _this.lineWidth;
    _this.startX = _this.document.x;
    _this.startY = _this.document.y;
    _this.column = 1;
    _this.ellipsis = options.ellipsis;
    _this.continuedX = 0;
    _this.features = options.features;
    if (options.height != null) {
      _this.height = options.height;
      _this.maxY = _this.startY + options.height;
    } else {
      _this.maxY = _this.document.page.maxY();
    }
    _this.on('firstLine', function (options) {
      var indent = _this.continuedX || _this.indent;
      _this.document.x += indent;
      _this.lineWidth -= indent;
      return _this.once('line', function () {
        _this.document.x -= indent;
        _this.lineWidth += indent;
        if (options.continued && !_this.continuedX) {
          _this.continuedX = _this.indent;
        }
        if (!options.continued) {
          return _this.continuedX = 0;
        }
      });
    });
    _this.on('lastLine', function (options) {
      var align = options.align;
      if (align === 'justify') {
        options.align = 'left';
      }
      _this.lastLine = true;
      return _this.once('line', function () {
        _this.document.y += options.paragraphGap || 0;
        options.align = align;
        return _this.lastLine = false;
      });
    });
    return _this;
  }
  _createClass(LineWrapper, [{
    key: "wordWidth",
    value: function wordWidth(word) {
      return this.document.widthOfString(word, this) + this.characterSpacing + this.wordSpacing;
    }
  }, {
    key: "eachWord",
    value: function eachWord(text, fn) {
      var bk;
      var breaker = new $557adaaeb0c7885f$exports(text);
      var last = null;
      var wordWidths = Object.create(null);
      while (bk = breaker.nextBreak()) {
        var shouldContinue;
        var word = text.slice((last != null ? last.position : undefined) || 0, bk.position);
        var w = wordWidths[word] != null ? wordWidths[word] : wordWidths[word] = this.wordWidth(word);
        if (w > this.lineWidth + this.continuedX) {
          var lbk = last;
          var fbk = {};
          while (word.length) {
            var l, mightGrow;
            if (w > this.spaceLeft) {
              l = Math.ceil(this.spaceLeft / (w / word.length));
              w = this.wordWidth(word.slice(0, l));
              mightGrow = w <= this.spaceLeft && l < word.length;
            } else {
              l = word.length;
            }
            var mustShrink = w > this.spaceLeft && l > 0;
            while (mustShrink || mightGrow) {
              if (mustShrink) {
                w = this.wordWidth(word.slice(0, --l));
                mustShrink = w > this.spaceLeft && l > 0;
              } else {
                w = this.wordWidth(word.slice(0, ++l));
                mustShrink = w > this.spaceLeft && l > 0;
                mightGrow = w <= this.spaceLeft && l < word.length;
              }
            }
            if (l === 0 && this.spaceLeft === this.lineWidth) {
              l = 1;
            }
            fbk.required = bk.required || l < word.length;
            shouldContinue = fn(word.slice(0, l), w, fbk, lbk);
            lbk = {
              required: false
            };
            word = word.slice(l);
            w = this.wordWidth(word);
            if (shouldContinue === false) {
              break;
            }
          }
        } else {
          shouldContinue = fn(word, w, bk, last);
        }
        if (shouldContinue === false) {
          break;
        }
        last = bk;
      }
    }
  }, {
    key: "wrap",
    value: function wrap(text, options) {
      var _this2 = this;
      if (options.indent != null) {
        this.indent = options.indent;
      }
      if (options.characterSpacing != null) {
        this.characterSpacing = options.characterSpacing;
      }
      if (options.wordSpacing != null) {
        this.wordSpacing = options.wordSpacing;
      }
      if (options.ellipsis != null) {
        this.ellipsis = options.ellipsis;
      }
      var nextY = this.document.y + this.document.currentLineHeight(true);
      if (this.document.y > this.maxY || nextY > this.maxY) {
        this.nextSection();
      }
      var buffer = '';
      var textWidth = 0;
      var wc = 0;
      var lc = 0;
      var y = this.document.y;
      var emitLine = function emitLine() {
        options.textWidth = textWidth + _this2.wordSpacing * (wc - 1);
        options.wordCount = wc;
        options.lineWidth = _this2.lineWidth;
        y = _this2.document.y;
        _this2.emit('line', buffer, options, _this2);
        return lc++;
      };
      this.emit('sectionStart', options, this);
      this.eachWord(text, function (word, w, bk, last) {
        if (last == null || last.required) {
          _this2.emit('firstLine', options, _this2);
          _this2.spaceLeft = _this2.lineWidth;
        }
        if (w <= _this2.spaceLeft) {
          buffer += word;
          textWidth += w;
          wc++;
        }
        if (bk.required || w > _this2.spaceLeft) {
          var lh = _this2.document.currentLineHeight(true);
          if (_this2.height != null && _this2.ellipsis && _this2.document.y + lh * 2 > _this2.maxY && _this2.column >= _this2.columns) {
            if (_this2.ellipsis === true) {
              _this2.ellipsis = '…';
            }
            buffer = buffer.replace(/\s+$/, '');
            textWidth = _this2.wordWidth(buffer + _this2.ellipsis);
            while (buffer && textWidth > _this2.lineWidth) {
              buffer = buffer.slice(0, -1).replace(/\s+$/, '');
              textWidth = _this2.wordWidth(buffer + _this2.ellipsis);
            }
            if (textWidth <= _this2.lineWidth) {
              buffer = buffer + _this2.ellipsis;
            }
            textWidth = _this2.wordWidth(buffer);
          }
          if (bk.required) {
            if (w > _this2.spaceLeft) {
              emitLine();
              buffer = word;
              textWidth = w;
              wc = 1;
            }
            _this2.emit('lastLine', options, _this2);
          }
          emitLine();
          if (_this2.document.y + lh > _this2.maxY) {
            var shouldContinue = _this2.nextSection();
            if (!shouldContinue) {
              wc = 0;
              buffer = '';
              return false;
            }
          }
          if (bk.required) {
            _this2.spaceLeft = _this2.lineWidth;
            buffer = '';
            textWidth = 0;
            return wc = 0;
          } else {
            _this2.spaceLeft = _this2.lineWidth - w;
            buffer = word;
            textWidth = w;
            return wc = 1;
          }
        } else {
          return _this2.spaceLeft -= w;
        }
      });
      if (wc > 0) {
        this.emit('lastLine', options, this);
        emitLine();
      }
      this.emit('sectionEnd', options, this);
      if (options.continued === true) {
        if (lc > 1) {
          this.continuedX = 0;
        }
        this.continuedX += options.textWidth || 0;
        return this.document.y = y;
      } else {
        return this.document.x = this.startX;
      }
    }
  }, {
    key: "nextSection",
    value: function nextSection(options) {
      this.emit('sectionEnd', options, this);
      if (++this.column > this.columns) {
        if (this.height != null) {
          return false;
        }
        this.document.continueOnNewPage();
        this.column = 1;
        this.startY = this.document.page.margins.top;
        this.maxY = this.document.page.maxY();
        this.document.x = this.startX;
        if (this.document._fillColor) {
          var _this$document;
          (_this$document = this.document).fillColor.apply(_this$document, _toConsumableArray(this.document._fillColor));
        }
        this.emit('pageBreak', options, this);
      } else {
        this.document.x += this.lineWidth + this.columnGap;
        this.document.y = this.startY;
        this.emit('columnBreak', options, this);
      }
      this.emit('sectionStart', options, this);
      return true;
    }
  }]);
  return LineWrapper;
}(eventsExports.EventEmitter);
var number$2 = PDFObject.number;
var TextMixin = {
  initText: function initText() {
    this._line = this._line.bind(this);
    this.x = 0;
    this.y = 0;
    return this._lineGap = 0;
  },
  lineGap: function lineGap(_lineGap) {
    this._lineGap = _lineGap;
    return this;
  },
  moveDown: function moveDown(lines) {
    if (lines == null) {
      lines = 1;
    }
    this.y += this.currentLineHeight(true) * lines + this._lineGap;
    return this;
  },
  moveUp: function moveUp(lines) {
    if (lines == null) {
      lines = 1;
    }
    this.y -= this.currentLineHeight(true) * lines + this._lineGap;
    return this;
  },
  _text: function _text(text, x, y, options, lineCallback) {
    var _this = this;
    options = this._initOptions(x, y, options);
    text = text == null ? '' : "".concat(text);
    if (options.wordSpacing) {
      text = text.replace(/\s{2,}/g, ' ');
    }
    var addStructure = function addStructure() {
      if (options.structParent) {
        options.structParent.add(_this.struct(options.structType || 'P', [_this.markStructureContent(options.structType || 'P')]));
      }
    };
    if (options.width) {
      var wrapper = this._wrapper;
      if (!wrapper) {
        wrapper = new LineWrapper(this, options);
        wrapper.on('line', lineCallback);
        wrapper.on('firstLine', addStructure);
      }
      this._wrapper = options.continued ? wrapper : null;
      this._textOptions = options.continued ? options : null;
      wrapper.wrap(text, options);
    } else {
      var _iterator = _createForOfIteratorHelper(text.split('\n')),
          _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var line = _step.value;
          addStructure();
          lineCallback(line, options);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
    return this;
  },
  text: function text(_text2, x, y, options) {
    return this._text(_text2, x, y, options, this._line);
  },
  widthOfString: function widthOfString(string) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    return this._font.widthOfString(string, this._fontSize, options.features) + (options.characterSpacing || 0) * (string.length - 1);
  },
  heightOfString: function heightOfString(text, options) {
    var _this2 = this;
    var x = this.x,
        y = this.y;
    options = this._initOptions(options);
    options.height = Infinity;
    var lineGap = options.lineGap || this._lineGap || 0;
    this._text(text, this.x, this.y, options, function () {
      return _this2.y += _this2.currentLineHeight(true) + lineGap;
    });
    var height = this.y - y;
    this.x = x;
    this.y = y;
    return height;
  },
  list: function list(_list, x, y, options, wrapper) {
    var _this3 = this;
    options = this._initOptions(x, y, options);
    var listType = options.listType || 'bullet';
    var unit = Math.round(this._font.ascender / 1000 * this._fontSize);
    var midLine = unit / 2;
    var r = options.bulletRadius || unit / 3;
    var indent = options.textIndent || (listType === 'bullet' ? r * 5 : unit * 2);
    var itemIndent = options.bulletIndent || (listType === 'bullet' ? r * 8 : unit * 2);
    var level = 1;
    var items = [];
    var levels = [];
    var numbers = [];
    var flatten = function flatten(list) {
      var n = 1;
      for (var _i = 0; _i < list.length; _i++) {
        var item = list[_i];
        if (Array.isArray(item)) {
          level++;
          flatten(item);
          level--;
        } else {
          items.push(item);
          levels.push(level);
          if (listType !== 'bullet') {
            numbers.push(n++);
          }
        }
      }
    };
    flatten(_list);
    var label = function label(n) {
      switch (listType) {
        case 'numbered':
          return "".concat(n, ".");
        case 'lettered':
          var letter = String.fromCharCode((n - 1) % 26 + 65);
          var times = Math.floor((n - 1) / 26 + 1);
          var text = Array(times + 1).join(letter);
          return "".concat(text, ".");
      }
    };
    wrapper = new LineWrapper(this, options);
    wrapper.on('line', this._line);
    level = 1;
    var i = 0;
    wrapper.on('firstLine', function () {
      var item, itemType, labelType, bodyType;
      if (options.structParent) {
        if (options.structTypes) {
          var _options$structTypes = _slicedToArray(options.structTypes, 3);
          itemType = _options$structTypes[0];
          labelType = _options$structTypes[1];
          bodyType = _options$structTypes[2];
        } else {
          itemType = 'LI';
          labelType = 'Lbl';
          bodyType = 'LBody';
        }
      }
      if (itemType) {
        item = _this3.struct(itemType);
        options.structParent.add(item);
      } else if (options.structParent) {
        item = options.structParent;
      }
      var l;
      if ((l = levels[i++]) !== level) {
        var diff = itemIndent * (l - level);
        _this3.x += diff;
        wrapper.lineWidth -= diff;
        level = l;
      }
      if (item && (labelType || bodyType)) {
        item.add(_this3.struct(labelType || bodyType, [_this3.markStructureContent(labelType || bodyType)]));
      }
      switch (listType) {
        case 'bullet':
          _this3.circle(_this3.x - indent + r, _this3.y + midLine, r);
          _this3.fill();
          break;
        case 'numbered':
        case 'lettered':
          var text = label(numbers[i - 1]);
          _this3._fragment(text, _this3.x - indent, _this3.y, options);
          break;
      }
      if (item && labelType && bodyType) {
        item.add(_this3.struct(bodyType, [_this3.markStructureContent(bodyType)]));
      }
      if (item && item !== options.structParent) {
        item.end();
      }
    });
    wrapper.on('sectionStart', function () {
      var pos = indent + itemIndent * (level - 1);
      _this3.x += pos;
      return wrapper.lineWidth -= pos;
    });
    wrapper.on('sectionEnd', function () {
      var pos = indent + itemIndent * (level - 1);
      _this3.x -= pos;
      return wrapper.lineWidth += pos;
    });
    wrapper.wrap(items.join('\n'), options);
    return this;
  },
  _initOptions: function _initOptions() {
    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var y = arguments.length > 1 ? arguments[1] : undefined;
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    if (typeof x === 'object') {
      options = x;
      x = null;
    }
    var result = Object.assign({}, options);
    if (this._textOptions) {
      for (var key in this._textOptions) {
        var val = this._textOptions[key];
        if (key !== 'continued') {
          if (result[key] === undefined) {
            result[key] = val;
          }
        }
      }
    }
    if (x != null) {
      this.x = x;
    }
    if (y != null) {
      this.y = y;
    }
    if (result.lineBreak !== false) {
      if (result.width == null) {
        result.width = this.page.width - this.x - this.page.margins.right;
      }
      result.width = Math.max(result.width, 0);
    }
    if (!result.columns) {
      result.columns = 0;
    }
    if (result.columnGap == null) {
      result.columnGap = 18;
    }
    return result;
  },
  _line: function _line(text) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var wrapper = arguments.length > 2 ? arguments[2] : undefined;
    this._fragment(text, this.x, this.y, options);
    var lineGap = options.lineGap || this._lineGap || 0;
    if (!wrapper) {
      return this.x += this.widthOfString(text);
    } else {
      return this.y += this.currentLineHeight(true) + lineGap;
    }
  },
  _fragment: function _fragment(text, x, y, options) {
    var _this4 = this;
    var dy, encoded, i, positions, textWidth, words;
    text = "".concat(text).replace(/\n/g, '');
    if (text.length === 0) {
      return;
    }
    var align = options.align || 'left';
    var wordSpacing = options.wordSpacing || 0;
    var characterSpacing = options.characterSpacing || 0;
    if (options.width) {
      switch (align) {
        case 'right':
          textWidth = this.widthOfString(text.replace(/\s+$/, ''), options);
          x += options.lineWidth - textWidth;
          break;
        case 'center':
          x += options.lineWidth / 2 - options.textWidth / 2;
          break;
        case 'justify':
          words = text.trim().split(/\s+/);
          textWidth = this.widthOfString(text.replace(/\s+/g, ''), options);
          var spaceWidth = this.widthOfString(' ') + characterSpacing;
          wordSpacing = Math.max(0, (options.lineWidth - textWidth) / Math.max(1, words.length - 1) - spaceWidth);
          break;
      }
    }
    if (typeof options.baseline === 'number') {
      dy = -options.baseline;
    } else {
      switch (options.baseline) {
        case 'svg-middle':
          dy = 0.5 * this._font.xHeight;
          break;
        case 'middle':
        case 'svg-central':
          dy = 0.5 * (this._font.descender + this._font.ascender);
          break;
        case 'bottom':
        case 'ideographic':
          dy = this._font.descender;
          break;
        case 'alphabetic':
          dy = 0;
          break;
        case 'mathematical':
          dy = 0.5 * this._font.ascender;
          break;
        case 'hanging':
          dy = 0.8 * this._font.ascender;
          break;
        case 'top':
          dy = this._font.ascender;
          break;
        default:
          dy = this._font.ascender;
      }
      dy = dy / 1000 * this._fontSize;
    }
    var renderedWidth = options.textWidth + wordSpacing * (options.wordCount - 1) + characterSpacing * (text.length - 1);
    if (options.link != null) {
      this.link(x, y, renderedWidth, this.currentLineHeight(), options.link);
    }
    if (options.goTo != null) {
      this.goTo(x, y, renderedWidth, this.currentLineHeight(), options.goTo);
    }
    if (options.destination != null) {
      this.addNamedDestination(options.destination, 'XYZ', x, y, null);
    }
    if (options.underline) {
      this.save();
      if (!options.stroke) {
        this.strokeColor.apply(this, _toConsumableArray(this._fillColor || []));
      }
      var lineWidth = this._fontSize < 10 ? 0.5 : Math.floor(this._fontSize / 10);
      this.lineWidth(lineWidth);
      var lineY = y + this.currentLineHeight() - lineWidth;
      this.moveTo(x, lineY);
      this.lineTo(x + renderedWidth, lineY);
      this.stroke();
      this.restore();
    }
    if (options.strike) {
      this.save();
      if (!options.stroke) {
        this.strokeColor.apply(this, _toConsumableArray(this._fillColor || []));
      }
      var _lineWidth = this._fontSize < 10 ? 0.5 : Math.floor(this._fontSize / 10);
      this.lineWidth(_lineWidth);
      var _lineY = y + this.currentLineHeight() / 2;
      this.moveTo(x, _lineY);
      this.lineTo(x + renderedWidth, _lineY);
      this.stroke();
      this.restore();
    }
    this.save();
    if (options.oblique) {
      var skew;
      if (typeof options.oblique === 'number') {
        skew = -Math.tan(options.oblique * Math.PI / 180);
      } else {
        skew = -0.25;
      }
      this.transform(1, 0, 0, 1, x, y);
      this.transform(1, 0, skew, 1, -skew * dy, 0);
      this.transform(1, 0, 0, 1, -x, -y);
    }
    this.transform(1, 0, 0, -1, 0, this.page.height);
    y = this.page.height - y - dy;
    if (this.page.fonts[this._font.id] == null) {
      this.page.fonts[this._font.id] = this._font.ref();
    }
    this.addContent('BT');
    this.addContent("1 0 0 1 ".concat(number$2(x), " ").concat(number$2(y), " Tm"));
    this.addContent("/".concat(this._font.id, " ").concat(number$2(this._fontSize), " Tf"));
    var mode = options.fill && options.stroke ? 2 : options.stroke ? 1 : 0;
    if (mode) {
      this.addContent("".concat(mode, " Tr"));
    }
    if (characterSpacing) {
      this.addContent("".concat(number$2(characterSpacing), " Tc"));
    }
    if (wordSpacing) {
      words = text.trim().split(/\s+/);
      wordSpacing += this.widthOfString(' ') + characterSpacing;
      wordSpacing *= 1000 / this._fontSize;
      encoded = [];
      positions = [];
      var _iterator2 = _createForOfIteratorHelper(words),
          _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var word = _step2.value;
          var _this$_font$encode = this._font.encode(word, options.features),
              _this$_font$encode2 = _slicedToArray(_this$_font$encode, 2),
              encodedWord = _this$_font$encode2[0],
              positionsWord = _this$_font$encode2[1];
          encoded = encoded.concat(encodedWord);
          positions = positions.concat(positionsWord);
          var space = {};
          var object = positions[positions.length - 1];
          for (var key in object) {
            var val = object[key];
            space[key] = val;
          }
          space.xAdvance += wordSpacing;
          positions[positions.length - 1] = space;
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    } else {
      var _this$_font$encode3 = this._font.encode(text, options.features);
      var _this$_font$encode4 = _slicedToArray(_this$_font$encode3, 2);
      encoded = _this$_font$encode4[0];
      positions = _this$_font$encode4[1];
    }
    var scale = this._fontSize / 1000;
    var commands = [];
    var last = 0;
    var hadOffset = false;
    var addSegment = function addSegment(cur) {
      if (last < cur) {
        var hex = encoded.slice(last, cur).join('');
        var advance = positions[cur - 1].xAdvance - positions[cur - 1].advanceWidth;
        commands.push("<".concat(hex, "> ").concat(number$2(-advance)));
      }
      return last = cur;
    };
    var flush = function flush(i) {
      addSegment(i);
      if (commands.length > 0) {
        _this4.addContent("[".concat(commands.join(' '), "] TJ"));
        return commands.length = 0;
      }
    };
    for (i = 0; i < positions.length; i++) {
      var pos = positions[i];
      if (pos.xOffset || pos.yOffset) {
        flush(i);
        this.addContent("1 0 0 1 ".concat(number$2(x + pos.xOffset * scale), " ").concat(number$2(y + pos.yOffset * scale), " Tm"));
        flush(i + 1);
        hadOffset = true;
      } else {
        if (hadOffset) {
          this.addContent("1 0 0 1 ".concat(number$2(x), " ").concat(number$2(y), " Tm"));
          hadOffset = false;
        }
        if (pos.xAdvance - pos.advanceWidth !== 0) {
          addSegment(i + 1);
        }
      }
      x += pos.xAdvance * scale;
    }
    flush(i);
    this.addContent('ET');
    return this.restore();
  }
};
var MARKERS = [0xffc0, 0xffc1, 0xffc2, 0xffc3, 0xffc5, 0xffc6, 0xffc7, 0xffc8, 0xffc9, 0xffca, 0xffcb, 0xffcc, 0xffcd, 0xffce, 0xffcf];
var COLOR_SPACE_MAP = {
  1: 'DeviceGray',
  3: 'DeviceRGB',
  4: 'DeviceCMYK'
};
var JPEG = function () {
  function JPEG(data, label) {
    _classCallCheck$1(this, JPEG);
    var marker;
    this.data = data;
    this.label = label;
    if (this.data.readUInt16BE(0) !== 0xffd8) {
      throw 'SOI not found in JPEG';
    }
    var pos = 2;
    while (pos < this.data.length) {
      marker = this.data.readUInt16BE(pos);
      pos += 2;
      if (MARKERS.includes(marker)) {
        break;
      }
      pos += this.data.readUInt16BE(pos);
    }
    if (!MARKERS.includes(marker)) {
      throw 'Invalid JPEG.';
    }
    pos += 2;
    this.bits = this.data[pos++];
    this.height = this.data.readUInt16BE(pos);
    pos += 2;
    this.width = this.data.readUInt16BE(pos);
    pos += 2;
    var channels = this.data[pos++];
    this.colorSpace = COLOR_SPACE_MAP[channels];
    this.obj = null;
  }
  _createClass(JPEG, [{
    key: "embed",
    value: function embed(document) {
      if (this.obj) {
        return;
      }
      this.obj = document.ref({
        Type: 'XObject',
        Subtype: 'Image',
        BitsPerComponent: this.bits,
        Width: this.width,
        Height: this.height,
        ColorSpace: this.colorSpace,
        Filter: 'DCTDecode'
      });
      if (this.colorSpace === 'DeviceCMYK') {
        this.obj.data['Decode'] = [1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0];
      }
      this.obj.end(this.data);
      return this.data = null;
    }
  }]);
  return JPEG;
}();
var PNGImage = function () {
  function PNGImage(data, label) {
    _classCallCheck$1(this, PNGImage);
    this.label = label;
    this.image = new PNG(data);
    this.width = this.image.width;
    this.height = this.image.height;
    this.imgData = this.image.imgData;
    this.obj = null;
  }
  _createClass(PNGImage, [{
    key: "embed",
    value: function embed(document) {
      var dataDecoded = false;
      this.document = document;
      if (this.obj) {
        return;
      }
      var hasAlphaChannel = this.image.hasAlphaChannel;
      var isInterlaced = this.image.interlaceMethod === 1;
      this.obj = this.document.ref({
        Type: 'XObject',
        Subtype: 'Image',
        BitsPerComponent: hasAlphaChannel ? 8 : this.image.bits,
        Width: this.width,
        Height: this.height,
        Filter: 'FlateDecode'
      });
      if (!hasAlphaChannel) {
        var params = this.document.ref({
          Predictor: isInterlaced ? 1 : 15,
          Colors: this.image.colors,
          BitsPerComponent: this.image.bits,
          Columns: this.width
        });
        this.obj.data['DecodeParms'] = params;
        params.end();
      }
      if (this.image.palette.length === 0) {
        this.obj.data['ColorSpace'] = this.image.colorSpace;
      } else {
        var palette = this.document.ref();
        palette.end(buffer.Buffer.from(this.image.palette));
        this.obj.data['ColorSpace'] = ['Indexed', 'DeviceRGB', this.image.palette.length / 3 - 1, palette];
      }
      if (this.image.transparency.grayscale != null) {
        var val = this.image.transparency.grayscale;
        this.obj.data['Mask'] = [val, val];
      } else if (this.image.transparency.rgb) {
        var rgb = this.image.transparency.rgb;
        var mask = [];
        var _iterator = _createForOfIteratorHelper(rgb),
            _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var x = _step.value;
            mask.push(x, x);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
        this.obj.data['Mask'] = mask;
      } else if (this.image.transparency.indexed) {
        dataDecoded = true;
        return this.loadIndexedAlphaChannel();
      } else if (hasAlphaChannel) {
        dataDecoded = true;
        return this.splitAlphaChannel();
      }
      if (isInterlaced && !dataDecoded) {
        return this.decodeData();
      }
      this.finalize();
    }
  }, {
    key: "finalize",
    value: function finalize() {
      if (this.alphaChannel) {
        var sMask = this.document.ref({
          Type: 'XObject',
          Subtype: 'Image',
          Height: this.height,
          Width: this.width,
          BitsPerComponent: 8,
          Filter: 'FlateDecode',
          ColorSpace: 'DeviceGray',
          Decode: [0, 1]
        });
        sMask.end(this.alphaChannel);
        this.obj.data['SMask'] = sMask;
      }
      this.obj.end(this.imgData);
      this.image = null;
      return this.imgData = null;
    }
  }, {
    key: "splitAlphaChannel",
    value: function splitAlphaChannel() {
      var _this = this;
      return this.image.decodePixels(function (pixels) {
        var a, p;
        var colorCount = _this.image.colors;
        var pixelCount = _this.width * _this.height;
        var imgData = buffer.Buffer.alloc(pixelCount * colorCount);
        var alphaChannel = buffer.Buffer.alloc(pixelCount);
        var i = p = a = 0;
        var len = pixels.length;
        var skipByteCount = _this.image.bits === 16 ? 1 : 0;
        while (i < len) {
          for (var colorIndex = 0; colorIndex < colorCount; colorIndex++) {
            imgData[p++] = pixels[i++];
            i += skipByteCount;
          }
          alphaChannel[a++] = pixels[i++];
          i += skipByteCount;
        }
        _this.imgData = zlib$1.deflateSync(imgData);
        _this.alphaChannel = zlib$1.deflateSync(alphaChannel);
        return _this.finalize();
      });
    }
  }, {
    key: "loadIndexedAlphaChannel",
    value: function loadIndexedAlphaChannel() {
      var _this2 = this;
      var transparency = this.image.transparency.indexed;
      return this.image.decodePixels(function (pixels) {
        var alphaChannel = buffer.Buffer.alloc(_this2.width * _this2.height);
        var i = 0;
        for (var j = 0, end = pixels.length; j < end; j++) {
          alphaChannel[i++] = transparency[pixels[j]];
        }
        _this2.alphaChannel = zlib$1.deflateSync(alphaChannel);
        return _this2.finalize();
      });
    }
  }, {
    key: "decodeData",
    value: function decodeData() {
      var _this3 = this;
      this.image.decodePixels(function (pixels) {
        _this3.imgData = zlib$1.deflateSync(pixels);
        _this3.finalize();
      });
    }
  }]);
  return PNGImage;
}();
var PDFImage = function () {
  function PDFImage() {
    _classCallCheck$1(this, PDFImage);
  }
  _createClass(PDFImage, null, [{
    key: "open",
    value: function open(src, label) {
      var data;
      if (buffer.Buffer.isBuffer(src)) {
        data = src;
      } else if (src instanceof ArrayBuffer) {
        data = buffer.Buffer.from(new Uint8Array(src));
      } else {
        var match;
        if (match = /^data:.+;base64,(.*)$/.exec(src)) {
          data = buffer.Buffer.from(match[1], 'base64');
        } else {
          data = fs$1.readFileSync(src);
          if (!data) {
            return;
          }
        }
      }
      if (data[0] === 0xff && data[1] === 0xd8) {
        return new JPEG(data, label);
      } else if (data[0] === 0x89 && data.toString('ascii', 1, 4) === 'PNG') {
        return new PNGImage(data, label);
      } else {
        throw new Error('Unknown image format.');
      }
    }
  }]);
  return PDFImage;
}();
var ImagesMixin = {
  initImages: function initImages() {
    this._imageRegistry = {};
    return this._imageCount = 0;
  },
  image: function image(src, x, y) {
    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
    var bh, bp, bw, image, ip, left, left1;
    if (typeof x === 'object') {
      options = x;
      x = null;
    }
    x = (left = x != null ? x : options.x) != null ? left : this.x;
    y = (left1 = y != null ? y : options.y) != null ? left1 : this.y;
    if (typeof src === 'string') {
      image = this._imageRegistry[src];
    }
    if (!image) {
      if (src.width && src.height) {
        image = src;
      } else {
        image = this.openImage(src);
      }
    }
    if (!image.obj) {
      image.embed(this);
    }
    if (this.page.xobjects[image.label] == null) {
      this.page.xobjects[image.label] = image.obj;
    }
    var w = options.width || image.width;
    var h = options.height || image.height;
    if (options.width && !options.height) {
      var wp = w / image.width;
      w = image.width * wp;
      h = image.height * wp;
    } else if (options.height && !options.width) {
      var hp = h / image.height;
      w = image.width * hp;
      h = image.height * hp;
    } else if (options.scale) {
      w = image.width * options.scale;
      h = image.height * options.scale;
    } else if (options.fit) {
      var _options$fit = _slicedToArray(options.fit, 2);
      bw = _options$fit[0];
      bh = _options$fit[1];
      bp = bw / bh;
      ip = image.width / image.height;
      if (ip > bp) {
        w = bw;
        h = bw / ip;
      } else {
        h = bh;
        w = bh * ip;
      }
    } else if (options.cover) {
      var _options$cover = _slicedToArray(options.cover, 2);
      bw = _options$cover[0];
      bh = _options$cover[1];
      bp = bw / bh;
      ip = image.width / image.height;
      if (ip > bp) {
        h = bh;
        w = bh * ip;
      } else {
        w = bw;
        h = bw / ip;
      }
    }
    if (options.fit || options.cover) {
      if (options.align === 'center') {
        x = x + bw / 2 - w / 2;
      } else if (options.align === 'right') {
        x = x + bw - w;
      }
      if (options.valign === 'center') {
        y = y + bh / 2 - h / 2;
      } else if (options.valign === 'bottom') {
        y = y + bh - h;
      }
    }
    if (options.link != null) {
      this.link(x, y, w, h, options.link);
    }
    if (options.goTo != null) {
      this.goTo(x, y, w, h, options.goTo);
    }
    if (options.destination != null) {
      this.addNamedDestination(options.destination, 'XYZ', x, y, null);
    }
    if (this.y === y) {
      this.y += h;
    }
    this.save();
    this.transform(w, 0, 0, -h, x, y + h);
    this.addContent("/".concat(image.label, " Do"));
    this.restore();
    return this;
  },
  openImage: function openImage(src) {
    var image;
    if (typeof src === 'string') {
      image = this._imageRegistry[src];
    }
    if (!image) {
      image = PDFImage.open(src, "I".concat(++this._imageCount));
      if (typeof src === 'string') {
        this._imageRegistry[src] = image;
      }
    }
    return image;
  }
};
var AnnotationsMixin = {
  annotate: function annotate(x, y, w, h, options) {
    options.Type = 'Annot';
    options.Rect = this._convertRect(x, y, w, h);
    options.Border = [0, 0, 0];
    if (options.Subtype === 'Link' && typeof options.F === 'undefined') {
      options.F = 1 << 2;
    }
    if (options.Subtype !== 'Link') {
      if (options.C == null) {
        options.C = this._normalizeColor(options.color || [0, 0, 0]);
      }
    }
    delete options.color;
    if (typeof options.Dest === 'string') {
      options.Dest = new String(options.Dest);
    }
    for (var key in options) {
      var val = options[key];
      options[key[0].toUpperCase() + key.slice(1)] = val;
    }
    var ref = this.ref(options);
    this.page.annotations.push(ref);
    ref.end();
    return this;
  },
  note: function note(x, y, w, h, contents) {
    var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};
    options.Subtype = 'Text';
    options.Contents = new String(contents);
    options.Name = 'Comment';
    if (options.color == null) {
      options.color = [243, 223, 92];
    }
    return this.annotate(x, y, w, h, options);
  },
  goTo: function goTo(x, y, w, h, name) {
    var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};
    options.Subtype = 'Link';
    options.A = this.ref({
      S: 'GoTo',
      D: new String(name)
    });
    options.A.end();
    return this.annotate(x, y, w, h, options);
  },
  link: function link(x, y, w, h, url) {
    var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};
    options.Subtype = 'Link';
    if (typeof url === 'number') {
      var pages = this._root.data.Pages.data;
      if (url >= 0 && url < pages.Kids.length) {
        options.A = this.ref({
          S: 'GoTo',
          D: [pages.Kids[url], 'XYZ', null, null, null]
        });
        options.A.end();
      } else {
        throw new Error("The document has no page ".concat(url));
      }
    } else {
      options.A = this.ref({
        S: 'URI',
        URI: new String(url)
      });
      options.A.end();
    }
    return this.annotate(x, y, w, h, options);
  },
  _markup: function _markup(x, y, w, h) {
    var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
    var _this$_convertRect = this._convertRect(x, y, w, h),
        _this$_convertRect2 = _slicedToArray(_this$_convertRect, 4),
        x1 = _this$_convertRect2[0],
        y1 = _this$_convertRect2[1],
        x2 = _this$_convertRect2[2],
        y2 = _this$_convertRect2[3];
    options.QuadPoints = [x1, y2, x2, y2, x1, y1, x2, y1];
    options.Contents = new String();
    return this.annotate(x, y, w, h, options);
  },
  highlight: function highlight(x, y, w, h) {
    var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
    options.Subtype = 'Highlight';
    if (options.color == null) {
      options.color = [241, 238, 148];
    }
    return this._markup(x, y, w, h, options);
  },
  underline: function underline(x, y, w, h) {
    var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
    options.Subtype = 'Underline';
    return this._markup(x, y, w, h, options);
  },
  strike: function strike(x, y, w, h) {
    var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
    options.Subtype = 'StrikeOut';
    return this._markup(x, y, w, h, options);
  },
  lineAnnotation: function lineAnnotation(x1, y1, x2, y2) {
    var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
    options.Subtype = 'Line';
    options.Contents = new String();
    options.L = [x1, this.page.height - y1, x2, this.page.height - y2];
    return this.annotate(x1, y1, x2, y2, options);
  },
  rectAnnotation: function rectAnnotation(x, y, w, h) {
    var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
    options.Subtype = 'Square';
    options.Contents = new String();
    return this.annotate(x, y, w, h, options);
  },
  ellipseAnnotation: function ellipseAnnotation(x, y, w, h) {
    var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
    options.Subtype = 'Circle';
    options.Contents = new String();
    return this.annotate(x, y, w, h, options);
  },
  textAnnotation: function textAnnotation(x, y, w, h, text) {
    var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};
    options.Subtype = 'FreeText';
    options.Contents = new String(text);
    options.DA = new String();
    return this.annotate(x, y, w, h, options);
  },
  fileAnnotation: function fileAnnotation(x, y, w, h) {
    var file = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
    var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};
    var filespec = this.file(file.src, Object.assign({
      hidden: true
    }, file));
    options.Subtype = 'FileAttachment';
    options.FS = filespec;
    if (options.Contents) {
      options.Contents = new String(options.Contents);
    } else if (filespec.data.Desc) {
      options.Contents = filespec.data.Desc;
    }
    return this.annotate(x, y, w, h, options);
  },
  _convertRect: function _convertRect(x1, y1, w, h) {
    var y2 = y1;
    y1 += h;
    var x2 = x1 + w;
    var _this$_ctm = _slicedToArray(this._ctm, 6),
        m0 = _this$_ctm[0],
        m1 = _this$_ctm[1],
        m2 = _this$_ctm[2],
        m3 = _this$_ctm[3],
        m4 = _this$_ctm[4],
        m5 = _this$_ctm[5];
    x1 = m0 * x1 + m2 * y1 + m4;
    y1 = m1 * x1 + m3 * y1 + m5;
    x2 = m0 * x2 + m2 * y2 + m4;
    y2 = m1 * x2 + m3 * y2 + m5;
    return [x1, y1, x2, y2];
  }
};
var PDFOutline = function () {
  function PDFOutline(document, parent, title, dest) {
    var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {
      expanded: false
    };
    _classCallCheck$1(this, PDFOutline);
    this.document = document;
    this.options = options;
    this.outlineData = {};
    if (dest !== null) {
      this.outlineData['Dest'] = [dest.dictionary, 'Fit'];
    }
    if (parent !== null) {
      this.outlineData['Parent'] = parent;
    }
    if (title !== null) {
      this.outlineData['Title'] = new String(title);
    }
    this.dictionary = this.document.ref(this.outlineData);
    this.children = [];
  }
  _createClass(PDFOutline, [{
    key: "addItem",
    value: function addItem(title) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
        expanded: false
      };
      var result = new PDFOutline(this.document, this.dictionary, title, this.document.page, options);
      this.children.push(result);
      return result;
    }
  }, {
    key: "endOutline",
    value: function endOutline() {
      if (this.children.length > 0) {
        if (this.options.expanded) {
          this.outlineData.Count = this.children.length;
        }
        var first = this.children[0],
            last = this.children[this.children.length - 1];
        this.outlineData.First = first.dictionary;
        this.outlineData.Last = last.dictionary;
        for (var i = 0, len = this.children.length; i < len; i++) {
          var child = this.children[i];
          if (i > 0) {
            child.outlineData.Prev = this.children[i - 1].dictionary;
          }
          if (i < this.children.length - 1) {
            child.outlineData.Next = this.children[i + 1].dictionary;
          }
          child.endOutline();
        }
      }
      return this.dictionary.end();
    }
  }]);
  return PDFOutline;
}();
var OutlineMixin = {
  initOutline: function initOutline() {
    return this.outline = new PDFOutline(this, null, null, null);
  },
  endOutline: function endOutline() {
    this.outline.endOutline();
    if (this.outline.children.length > 0) {
      this._root.data.Outlines = this.outline.dictionary;
      return this._root.data.PageMode = 'UseOutlines';
    }
  }
};
var PDFStructureContent = function () {
  function PDFStructureContent(pageRef, mcid) {
    _classCallCheck$1(this, PDFStructureContent);
    this.refs = [{
      pageRef: pageRef,
      mcid: mcid
    }];
  }
  _createClass(PDFStructureContent, [{
    key: "push",
    value: function push(structContent) {
      var _this = this;
      structContent.refs.forEach(function (ref) {
        return _this.refs.push(ref);
      });
    }
  }]);
  return PDFStructureContent;
}();
var PDFStructureElement = function () {
  function PDFStructureElement(document, type) {
    var _this = this;
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var children = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
    _classCallCheck$1(this, PDFStructureElement);
    this.document = document;
    this._attached = false;
    this._ended = false;
    this._flushed = false;
    this.dictionary = document.ref({
      S: type
    });
    var data = this.dictionary.data;
    if (Array.isArray(options) || this._isValidChild(options)) {
      children = options;
      options = {};
    }
    if (typeof options.title !== 'undefined') {
      data.T = new String(options.title);
    }
    if (typeof options.lang !== 'undefined') {
      data.Lang = new String(options.lang);
    }
    if (typeof options.alt !== 'undefined') {
      data.Alt = new String(options.alt);
    }
    if (typeof options.expanded !== 'undefined') {
      data.E = new String(options.expanded);
    }
    if (typeof options.actual !== 'undefined') {
      data.ActualText = new String(options.actual);
    }
    this._children = [];
    if (children) {
      if (!Array.isArray(children)) {
        children = [children];
      }
      children.forEach(function (child) {
        return _this.add(child);
      });
      this.end();
    }
  }
  _createClass(PDFStructureElement, [{
    key: "add",
    value: function add(child) {
      if (this._ended) {
        throw new Error("Cannot add child to already-ended structure element");
      }
      if (!this._isValidChild(child)) {
        throw new Error("Invalid structure element child");
      }
      if (child instanceof PDFStructureElement) {
        child.setParent(this.dictionary);
        if (this._attached) {
          child.setAttached();
        }
      }
      if (child instanceof PDFStructureContent) {
        this._addContentToParentTree(child);
      }
      if (typeof child === 'function' && this._attached) {
        child = this._contentForClosure(child);
      }
      this._children.push(child);
      return this;
    }
  }, {
    key: "_addContentToParentTree",
    value: function _addContentToParentTree(content) {
      var _this2 = this;
      content.refs.forEach(function (_ref) {
        var pageRef = _ref.pageRef,
            mcid = _ref.mcid;
        var pageStructParents = _this2.document.getStructParentTree().get(pageRef.data.StructParents);
        pageStructParents[mcid] = _this2.dictionary;
      });
    }
  }, {
    key: "setParent",
    value: function setParent(parentRef) {
      if (this.dictionary.data.P) {
        throw new Error("Structure element added to more than one parent");
      }
      this.dictionary.data.P = parentRef;
      this._flush();
    }
  }, {
    key: "setAttached",
    value: function setAttached() {
      var _this3 = this;
      if (this._attached) {
        return;
      }
      this._children.forEach(function (child, index) {
        if (child instanceof PDFStructureElement) {
          child.setAttached();
        }
        if (typeof child === 'function') {
          _this3._children[index] = _this3._contentForClosure(child);
        }
      });
      this._attached = true;
      this._flush();
    }
  }, {
    key: "end",
    value: function end() {
      if (this._ended) {
        return;
      }
      this._children.filter(function (child) {
        return child instanceof PDFStructureElement;
      }).forEach(function (child) {
        return child.end();
      });
      this._ended = true;
      this._flush();
    }
  }, {
    key: "_isValidChild",
    value: function _isValidChild(child) {
      return child instanceof PDFStructureElement || child instanceof PDFStructureContent || typeof child === 'function';
    }
  }, {
    key: "_contentForClosure",
    value: function _contentForClosure(closure) {
      var content = this.document.markStructureContent(this.dictionary.data.S);
      closure();
      this.document.endMarkedContent();
      this._addContentToParentTree(content);
      return content;
    }
  }, {
    key: "_isFlushable",
    value: function _isFlushable() {
      if (!this.dictionary.data.P || !this._ended) {
        return false;
      }
      return this._children.every(function (child) {
        if (typeof child === 'function') {
          return false;
        }
        if (child instanceof PDFStructureElement) {
          return child._isFlushable();
        }
        return true;
      });
    }
  }, {
    key: "_flush",
    value: function _flush() {
      var _this4 = this;
      if (this._flushed || !this._isFlushable()) {
        return;
      }
      this.dictionary.data.K = [];
      this._children.forEach(function (child) {
        return _this4._flushChild(child);
      });
      this.dictionary.end();
      this._children = [];
      this.dictionary.data.K = null;
      this._flushed = true;
    }
  }, {
    key: "_flushChild",
    value: function _flushChild(child) {
      var _this5 = this;
      if (child instanceof PDFStructureElement) {
        this.dictionary.data.K.push(child.dictionary);
      }
      if (child instanceof PDFStructureContent) {
        child.refs.forEach(function (_ref2) {
          var pageRef = _ref2.pageRef,
              mcid = _ref2.mcid;
          if (!_this5.dictionary.data.Pg) {
            _this5.dictionary.data.Pg = pageRef;
          }
          if (_this5.dictionary.data.Pg === pageRef) {
            _this5.dictionary.data.K.push(mcid);
          } else {
            _this5.dictionary.data.K.push({
              Type: "MCR",
              Pg: pageRef,
              MCID: mcid
            });
          }
        });
      }
    }
  }]);
  return PDFStructureElement;
}();
var PDFNumberTree = function (_PDFTree) {
  _inherits(PDFNumberTree, _PDFTree);
  var _super = _createSuper(PDFNumberTree);
  function PDFNumberTree() {
    _classCallCheck$1(this, PDFNumberTree);
    return _super.apply(this, arguments);
  }
  _createClass(PDFNumberTree, [{
    key: "_compareKeys",
    value: function _compareKeys(a, b) {
      return parseInt(a) - parseInt(b);
    }
  }, {
    key: "_keysName",
    value: function _keysName() {
      return "Nums";
    }
  }, {
    key: "_dataForKey",
    value: function _dataForKey(k) {
      return parseInt(k);
    }
  }]);
  return PDFNumberTree;
}(PDFTree);
var MarkingsMixin = {
  initMarkings: function initMarkings(options) {
    this.structChildren = [];
    if (options.tagged) {
      this.getMarkInfoDictionary().data.Marked = true;
      this.getStructTreeRoot();
    }
  },
  markContent: function markContent(tag) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    if (tag === 'Artifact' || options && options.mcid) {
      var toClose = 0;
      this.page.markings.forEach(function (marking) {
        if (toClose || marking.structContent || marking.tag === 'Artifact') {
          toClose++;
        }
      });
      while (toClose--) {
        this.endMarkedContent();
      }
    }
    if (!options) {
      this.page.markings.push({
        tag: tag
      });
      this.addContent("/".concat(tag, " BMC"));
      return this;
    }
    this.page.markings.push({
      tag: tag,
      options: options
    });
    var dictionary = {};
    if (typeof options.mcid !== 'undefined') {
      dictionary.MCID = options.mcid;
    }
    if (tag === 'Artifact') {
      if (typeof options.type === 'string') {
        dictionary.Type = options.type;
      }
      if (Array.isArray(options.bbox)) {
        dictionary.BBox = [options.bbox[0], this.page.height - options.bbox[3], options.bbox[2], this.page.height - options.bbox[1]];
      }
      if (Array.isArray(options.attached) && options.attached.every(function (val) {
        return typeof val === 'string';
      })) {
        dictionary.Attached = options.attached;
      }
    }
    if (tag === 'Span') {
      if (options.lang) {
        dictionary.Lang = new String(options.lang);
      }
      if (options.alt) {
        dictionary.Alt = new String(options.alt);
      }
      if (options.expanded) {
        dictionary.E = new String(options.expanded);
      }
      if (options.actual) {
        dictionary.ActualText = new String(options.actual);
      }
    }
    this.addContent("/".concat(tag, " ").concat(PDFObject.convert(dictionary), " BDC"));
    return this;
  },
  markStructureContent: function markStructureContent(tag) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var pageStructParents = this.getStructParentTree().get(this.page.structParentTreeKey);
    var mcid = pageStructParents.length;
    pageStructParents.push(null);
    this.markContent(tag, _objectSpread2(_objectSpread2({}, options), {}, {
      mcid: mcid
    }));
    var structContent = new PDFStructureContent(this.page.dictionary, mcid);
    this.page.markings.slice(-1)[0].structContent = structContent;
    return structContent;
  },
  endMarkedContent: function endMarkedContent() {
    this.page.markings.pop();
    this.addContent('EMC');
    return this;
  },
  struct: function struct(type) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var children = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    return new PDFStructureElement(this, type, options, children);
  },
  addStructure: function addStructure(structElem) {
    var structTreeRoot = this.getStructTreeRoot();
    structElem.setParent(structTreeRoot);
    structElem.setAttached();
    this.structChildren.push(structElem);
    if (!structTreeRoot.data.K) {
      structTreeRoot.data.K = [];
    }
    structTreeRoot.data.K.push(structElem.dictionary);
    return this;
  },
  initPageMarkings: function initPageMarkings(pageMarkings) {
    var _this = this;
    pageMarkings.forEach(function (marking) {
      if (marking.structContent) {
        var structContent = marking.structContent;
        var newStructContent = _this.markStructureContent(marking.tag, marking.options);
        structContent.push(newStructContent);
        _this.page.markings.slice(-1)[0].structContent = structContent;
      } else {
        _this.markContent(marking.tag, marking.options);
      }
    });
  },
  endPageMarkings: function endPageMarkings(page) {
    var pageMarkings = page.markings;
    pageMarkings.forEach(function () {
      return page.write('EMC');
    });
    page.markings = [];
    return pageMarkings;
  },
  getMarkInfoDictionary: function getMarkInfoDictionary() {
    if (!this._root.data.MarkInfo) {
      this._root.data.MarkInfo = this.ref({});
    }
    return this._root.data.MarkInfo;
  },
  getStructTreeRoot: function getStructTreeRoot() {
    if (!this._root.data.StructTreeRoot) {
      this._root.data.StructTreeRoot = this.ref({
        Type: 'StructTreeRoot',
        ParentTree: new PDFNumberTree(),
        ParentTreeNextKey: 0
      });
    }
    return this._root.data.StructTreeRoot;
  },
  getStructParentTree: function getStructParentTree() {
    return this.getStructTreeRoot().data.ParentTree;
  },
  createStructParentTreeNextKey: function createStructParentTreeNextKey() {
    this.getMarkInfoDictionary();
    var structTreeRoot = this.getStructTreeRoot();
    var key = structTreeRoot.data.ParentTreeNextKey++;
    structTreeRoot.data.ParentTree.add(key, []);
    return key;
  },
  endMarkings: function endMarkings() {
    var structTreeRoot = this._root.data.StructTreeRoot;
    if (structTreeRoot) {
      structTreeRoot.end();
      this.structChildren.forEach(function (structElem) {
        return structElem.end();
      });
    }
    if (this._root.data.MarkInfo) {
      this._root.data.MarkInfo.end();
    }
  }
};
var FIELD_FLAGS = {
  readOnly: 1,
  required: 2,
  noExport: 4,
  multiline: 0x1000,
  password: 0x2000,
  toggleToOffButton: 0x4000,
  radioButton: 0x8000,
  pushButton: 0x10000,
  combo: 0x20000,
  edit: 0x40000,
  sort: 0x80000,
  multiSelect: 0x200000,
  noSpell: 0x400000
};
var FIELD_JUSTIFY = {
  left: 0,
  center: 1,
  right: 2
};
var VALUE_MAP = {
  value: 'V',
  defaultValue: 'DV'
};
var FORMAT_SPECIAL = {
  zip: '0',
  zipPlus4: '1',
  zip4: '1',
  phone: '2',
  ssn: '3'
};
var FORMAT_DEFAULT = {
  number: {
    nDec: 0,
    sepComma: false,
    negStyle: 'MinusBlack',
    currency: '',
    currencyPrepend: true
  },
  percent: {
    nDec: 0,
    sepComma: false
  }
};
var AcroFormMixin = {
  initForm: function initForm() {
    if (!this._font) {
      throw new Error('Must set a font before calling initForm method');
    }
    this._acroform = {
      fonts: {},
      defaultFont: this._font.name
    };
    this._acroform.fonts[this._font.id] = this._font.ref();
    var data = {
      Fields: [],
      NeedAppearances: true,
      DA: new String("/".concat(this._font.id, " 0 Tf 0 g")),
      DR: {
        Font: {}
      }
    };
    data.DR.Font[this._font.id] = this._font.ref();
    var AcroForm = this.ref(data);
    this._root.data.AcroForm = AcroForm;
    return this;
  },
  endAcroForm: function endAcroForm() {
    var _this = this;
    if (this._root.data.AcroForm) {
      if (!Object.keys(this._acroform.fonts).length && !this._acroform.defaultFont) {
        throw new Error('No fonts specified for PDF form');
      }
      var fontDict = this._root.data.AcroForm.data.DR.Font;
      Object.keys(this._acroform.fonts).forEach(function (name) {
        fontDict[name] = _this._acroform.fonts[name];
      });
      this._root.data.AcroForm.data.Fields.forEach(function (fieldRef) {
        _this._endChild(fieldRef);
      });
      this._root.data.AcroForm.end();
    }
    return this;
  },
  _endChild: function _endChild(ref) {
    var _this2 = this;
    if (Array.isArray(ref.data.Kids)) {
      ref.data.Kids.forEach(function (childRef) {
        _this2._endChild(childRef);
      });
      ref.end();
    }
    return this;
  },
  formField: function formField(name) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var fieldDict = this._fieldDict(name, null, options);
    var fieldRef = this.ref(fieldDict);
    this._addToParent(fieldRef);
    return fieldRef;
  },
  formAnnotation: function formAnnotation(name, type, x, y, w, h) {
    var options = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : {};
    var fieldDict = this._fieldDict(name, type, options);
    fieldDict.Subtype = 'Widget';
    if (fieldDict.F === undefined) {
      fieldDict.F = 4;
    }
    this.annotate(x, y, w, h, fieldDict);
    var annotRef = this.page.annotations[this.page.annotations.length - 1];
    return this._addToParent(annotRef);
  },
  formText: function formText(name, x, y, w, h) {
    var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};
    return this.formAnnotation(name, 'text', x, y, w, h, options);
  },
  formPushButton: function formPushButton(name, x, y, w, h) {
    var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};
    return this.formAnnotation(name, 'pushButton', x, y, w, h, options);
  },
  formCombo: function formCombo(name, x, y, w, h) {
    var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};
    return this.formAnnotation(name, 'combo', x, y, w, h, options);
  },
  formList: function formList(name, x, y, w, h) {
    var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};
    return this.formAnnotation(name, 'list', x, y, w, h, options);
  },
  formRadioButton: function formRadioButton(name, x, y, w, h) {
    var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};
    return this.formAnnotation(name, 'radioButton', x, y, w, h, options);
  },
  formCheckbox: function formCheckbox(name, x, y, w, h) {
    var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};
    return this.formAnnotation(name, 'checkbox', x, y, w, h, options);
  },
  _addToParent: function _addToParent(fieldRef) {
    var parent = fieldRef.data.Parent;
    if (parent) {
      if (!parent.data.Kids) {
        parent.data.Kids = [];
      }
      parent.data.Kids.push(fieldRef);
    } else {
      this._root.data.AcroForm.data.Fields.push(fieldRef);
    }
    return this;
  },
  _fieldDict: function _fieldDict(name, type) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    if (!this._acroform) {
      throw new Error('Call document.initForms() method before adding form elements to document');
    }
    var opts = Object.assign({}, options);
    if (type !== null) {
      opts = this._resolveType(type, options);
    }
    opts = this._resolveFlags(opts);
    opts = this._resolveJustify(opts);
    opts = this._resolveFont(opts);
    opts = this._resolveStrings(opts);
    opts = this._resolveColors(opts);
    opts = this._resolveFormat(opts);
    opts.T = new String(name);
    if (opts.parent) {
      opts.Parent = opts.parent;
      delete opts.parent;
    }
    return opts;
  },
  _resolveType: function _resolveType(type, opts) {
    if (type === 'text') {
      opts.FT = 'Tx';
    } else if (type === 'pushButton') {
      opts.FT = 'Btn';
      opts.pushButton = true;
    } else if (type === 'radioButton') {
      opts.FT = 'Btn';
      opts.radioButton = true;
    } else if (type === 'checkbox') {
      opts.FT = 'Btn';
    } else if (type === 'combo') {
      opts.FT = 'Ch';
      opts.combo = true;
    } else if (type === 'list') {
      opts.FT = 'Ch';
    } else {
      throw new Error("Invalid form annotation type '".concat(type, "'"));
    }
    return opts;
  },
  _resolveFormat: function _resolveFormat(opts) {
    var f = opts.format;
    if (f && f.type) {
      var fnKeystroke;
      var fnFormat;
      var params = '';
      if (FORMAT_SPECIAL[f.type] !== undefined) {
        fnKeystroke = "AFSpecial_Keystroke";
        fnFormat = "AFSpecial_Format";
        params = FORMAT_SPECIAL[f.type];
      } else {
        var format = f.type.charAt(0).toUpperCase() + f.type.slice(1);
        fnKeystroke = "AF".concat(format, "_Keystroke");
        fnFormat = "AF".concat(format, "_Format");
        if (f.type === 'date') {
          fnKeystroke += 'Ex';
          params = String(f.param);
        } else if (f.type === 'time') {
          params = String(f.param);
        } else if (f.type === 'number') {
          var p = Object.assign({}, FORMAT_DEFAULT.number, f);
          params = String([String(p.nDec), p.sepComma ? '0' : '1', '"' + p.negStyle + '"', 'null', '"' + p.currency + '"', String(p.currencyPrepend)].join(','));
        } else if (f.type === 'percent') {
          var _p = Object.assign({}, FORMAT_DEFAULT.percent, f);
          params = String([String(_p.nDec), _p.sepComma ? '0' : '1'].join(','));
        }
      }
      opts.AA = opts.AA ? opts.AA : {};
      opts.AA.K = {
        S: 'JavaScript',
        JS: new String("".concat(fnKeystroke, "(").concat(params, ");"))
      };
      opts.AA.F = {
        S: 'JavaScript',
        JS: new String("".concat(fnFormat, "(").concat(params, ");"))
      };
    }
    delete opts.format;
    return opts;
  },
  _resolveColors: function _resolveColors(opts) {
    var color = this._normalizeColor(opts.backgroundColor);
    if (color) {
      if (!opts.MK) {
        opts.MK = {};
      }
      opts.MK.BG = color;
    }
    color = this._normalizeColor(opts.borderColor);
    if (color) {
      if (!opts.MK) {
        opts.MK = {};
      }
      opts.MK.BC = color;
    }
    delete opts.backgroundColor;
    delete opts.borderColor;
    return opts;
  },
  _resolveFlags: function _resolveFlags(options) {
    var result = 0;
    Object.keys(options).forEach(function (key) {
      if (FIELD_FLAGS[key]) {
        result |= FIELD_FLAGS[key];
        delete options[key];
      }
    });
    if (result !== 0) {
      options.Ff = options.Ff ? options.Ff : 0;
      options.Ff |= result;
    }
    return options;
  },
  _resolveJustify: function _resolveJustify(options) {
    var result = 0;
    if (options.align !== undefined) {
      if (typeof FIELD_JUSTIFY[options.align] === 'number') {
        result = FIELD_JUSTIFY[options.align];
      }
      delete options.align;
    }
    if (result !== 0) {
      options.Q = result;
    }
    return options;
  },
  _resolveFont: function _resolveFont(options) {
    if (this._acroform.fonts[this._font.id] === null) {
      this._acroform.fonts[this._font.id] = this._font.ref();
    }
    if (this._acroform.defaultFont !== this._font.name) {
      options.DR = {
        Font: {}
      };
      var fontSize = options.fontSize || 0;
      options.DR.Font[this._font.id] = this._font.ref();
      options.DA = new String("/".concat(this._font.id, " ").concat(fontSize, " Tf 0 g"));
    }
    return options;
  },
  _resolveStrings: function _resolveStrings(options) {
    var select = [];
    function appendChoices(a) {
      if (Array.isArray(a)) {
        for (var idx = 0; idx < a.length; idx++) {
          if (typeof a[idx] === 'string') {
            select.push(new String(a[idx]));
          } else {
            select.push(a[idx]);
          }
        }
      }
    }
    appendChoices(options.Opt);
    if (options.select) {
      appendChoices(options.select);
      delete options.select;
    }
    if (select.length) {
      options.Opt = select;
    }
    Object.keys(VALUE_MAP).forEach(function (key) {
      if (options[key] !== undefined) {
        options[VALUE_MAP[key]] = options[key];
        delete options[key];
      }
    });
    ['V', 'DV'].forEach(function (key) {
      if (typeof options[key] === 'string') {
        options[key] = new String(options[key]);
      }
    });
    if (options.MK && options.MK.CA) {
      options.MK.CA = new String(options.MK.CA);
    }
    if (options.label) {
      options.MK = options.MK ? options.MK : {};
      options.MK.CA = new String(options.label);
      delete options.label;
    }
    return options;
  }
};
var AttachmentsMixin = {
  file: function file(src) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    options.name = options.name || src;
    var refBody = {
      Type: 'EmbeddedFile',
      Params: {}
    };
    var data;
    if (!src) {
      throw new Error('No src specified');
    }
    if (buffer.Buffer.isBuffer(src)) {
      data = src;
    } else if (src instanceof ArrayBuffer) {
      data = buffer.Buffer.from(new Uint8Array(src));
    } else {
      var match;
      if (match = /^data:(.*);base64,(.*)$/.exec(src)) {
        if (match[1]) {
          refBody.Subtype = match[1].replace('/', '#2F');
        }
        data = buffer.Buffer.from(match[2], 'base64');
      } else {
        data = fs$1.readFileSync(src);
        if (!data) {
          throw new Error("Could not read contents of file at filepath ".concat(src));
        }
        var _fs$statSync = fs$1.statSync(src),
            birthtime = _fs$statSync.birthtime,
            ctime = _fs$statSync.ctime;
        refBody.Params.CreationDate = birthtime;
        refBody.Params.ModDate = ctime;
      }
    }
    if (options.creationDate instanceof Date) {
      refBody.Params.CreationDate = options.creationDate;
    }
    if (options.modifiedDate instanceof Date) {
      refBody.Params.ModDate = options.modifiedDate;
    }
    if (options.type) {
      refBody.Subtype = options.type.replace('/', '#2F');
    }
    var checksum = CryptoJS.MD5(CryptoJS.lib.WordArray.create(new Uint8Array(data)));
    refBody.Params.CheckSum = new String(checksum);
    refBody.Params.Size = data.byteLength;
    var ref;
    if (!this._fileRegistry) this._fileRegistry = {};
    var file = this._fileRegistry[options.name];
    if (file && isEqual(refBody, file)) {
      ref = file.ref;
    } else {
      ref = this.ref(refBody);
      ref.end(data);
      this._fileRegistry[options.name] = _objectSpread2(_objectSpread2({}, refBody), {}, {
        ref: ref
      });
    }
    var fileSpecBody = {
      Type: 'Filespec',
      F: new String(options.name),
      EF: {
        F: ref
      },
      UF: new String(options.name)
    };
    if (options.description) {
      fileSpecBody.Desc = new String(options.description);
    }
    var filespec = this.ref(fileSpecBody);
    filespec.end();
    if (!options.hidden) {
      this.addNamedEmbeddedFile(options.name, filespec);
    }
    return filespec;
  }
};
function isEqual(a, b) {
  return a.Subtype === b.Subtype && a.Params.CheckSum.toString() === b.Params.CheckSum.toString() && a.Params.Size === b.Params.Size && a.Params.CreationDate === b.Params.CreationDate && a.Params.ModDate === b.Params.ModDate;
}
var PDFA = {
  initPDFA: function initPDFA(pSubset) {
    if (pSubset.charAt(pSubset.length - 3) === '-') {
      this.subset_conformance = pSubset.charAt(pSubset.length - 1).toUpperCase();
      this.subset = parseInt(pSubset.charAt(pSubset.length - 2));
    } else {
      this.subset_conformance = 'B';
      this.subset = parseInt(pSubset.charAt(pSubset.length - 1));
    }
  },
  endSubset: function endSubset() {
    this._addPdfaMetadata();
    var jsPath = "".concat("", "/data/sRGB_IEC61966_2_1.icc");
    var jestPath = "".concat("", "/../color_profiles/sRGB_IEC61966_2_1.icc");
    this._addColorOutputIntent(fs$1.existsSync(jsPath) ? jsPath : jestPath);
  },
  _addColorOutputIntent: function _addColorOutputIntent(pICCPath) {
    var iccProfile = fs$1.readFileSync(pICCPath);
    var colorProfileRef = this.ref({
      Length: iccProfile.length,
      N: 3
    });
    colorProfileRef.write(iccProfile);
    colorProfileRef.end();
    var intentRef = this.ref({
      Type: 'OutputIntent',
      S: 'GTS_PDFA1',
      Info: new String('sRGB IEC61966-2.1'),
      OutputConditionIdentifier: new String('sRGB IEC61966-2.1'),
      DestOutputProfile: colorProfileRef
    });
    intentRef.end();
    this._root.data.OutputIntents = [intentRef];
  },
  _getPdfaid: function _getPdfaid() {
    return "\n        <rdf:Description xmlns:pdfaid=\"http://www.aiim.org/pdfa/ns/id/\" rdf:about=\"\">\n            <pdfaid:part>".concat(this.subset, "</pdfaid:part>\n            <pdfaid:conformance>").concat(this.subset_conformance, "</pdfaid:conformance>\n        </rdf:Description>\n        ");
  },
  _addPdfaMetadata: function _addPdfaMetadata() {
    this.appendXML(this._getPdfaid());
  }
};
var SubsetMixin = {
  _importSubset: function _importSubset(subset) {
    Object.assign(this, subset);
  },
  initSubset: function initSubset(options) {
    switch (options.subset) {
      case 'PDF/A-1':
      case 'PDF/A-1a':
      case 'PDF/A-1b':
      case 'PDF/A-2':
      case 'PDF/A-2a':
      case 'PDF/A-2b':
      case 'PDF/A-3':
      case 'PDF/A-3a':
      case 'PDF/A-3b':
        this._importSubset(PDFA);
        this.initPDFA(options.subset);
        break;
    }
  }
};
var PDFMetadata = function () {
  function PDFMetadata() {
    _classCallCheck$1(this, PDFMetadata);
    this._metadata = "\n        <?xpacket begin=\"\uFEFF\" id=\"W5M0MpCehiHzreSzNTczkc9d\"?>\n            <x:xmpmeta xmlns:x=\"adobe:ns:meta/\">\n                <rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\">\n        ";
  }
  _createClass(PDFMetadata, [{
    key: "_closeTags",
    value: function _closeTags() {
      this._metadata = this._metadata.concat("\n                </rdf:RDF>\n            </x:xmpmeta>\n        <?xpacket end=\"w\"?>\n        ");
    }
  }, {
    key: "append",
    value: function append(xml) {
      var newline = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      this._metadata = this._metadata.concat(xml);
      if (newline) this._metadata = this._metadata.concat('\n');
    }
  }, {
    key: "getXML",
    value: function getXML() {
      return this._metadata;
    }
  }, {
    key: "getLength",
    value: function getLength() {
      return this._metadata.length;
    }
  }, {
    key: "end",
    value: function end() {
      this._closeTags();
      this._metadata = this._metadata.trim();
    }
  }]);
  return PDFMetadata;
}();
var MetadataMixin = {
  initMetadata: function initMetadata() {
    this.metadata = new PDFMetadata();
  },
  appendXML: function appendXML(xml) {
    var newline = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    this.metadata.append(xml, newline);
  },
  _addInfo: function _addInfo() {
    this.appendXML("\n        <rdf:Description rdf:about=\"\" xmlns:xmp=\"http://ns.adobe.com/xap/1.0/\">\n            <xmp:CreateDate>".concat(this.info.CreationDate.toISOString().split('.')[0] + "Z", "</xmp:CreateDate>\n            <xmp:CreatorTool>").concat(this.info.Creator, "</xmp:CreatorTool>\n        </rdf:Description>\n        "));
    if (this.info.Title || this.info.Author || this.info.Subject) {
      this.appendXML("\n            <rdf:Description rdf:about=\"\" xmlns:dc=\"http://purl.org/dc/elements/1.1/\">\n            ");
      if (this.info.Title) {
        this.appendXML("\n                <dc:title>\n                    <rdf:Alt>\n                        <rdf:li xml:lang=\"x-default\">".concat(this.info.Title, "</rdf:li>\n                    </rdf:Alt>\n                </dc:title>\n                "));
      }
      if (this.info.Author) {
        this.appendXML("\n                <dc:creator>\n                    <rdf:Seq>\n                        <rdf:li>".concat(this.info.Author, "</rdf:li>\n                    </rdf:Seq>\n                </dc:creator>\n                "));
      }
      if (this.info.Subject) {
        this.appendXML("\n                <dc:description>\n                    <rdf:Alt>\n                        <rdf:li xml:lang=\"x-default\">".concat(this.info.Subject, "</rdf:li>\n                    </rdf:Alt>\n                </dc:description>\n                "));
      }
      this.appendXML("\n            </rdf:Description>\n            ");
    }
    this.appendXML("\n        <rdf:Description rdf:about=\"\" xmlns:pdf=\"http://ns.adobe.com/pdf/1.3/\">\n            <pdf:Producer>".concat(this.info.Creator, "</pdf:Producer>"), false);
    if (this.info.Keywords) {
      this.appendXML("\n            <pdf:Keywords>".concat(this.info.Keywords, "</pdf:Keywords>"), false);
    }
    this.appendXML("\n        </rdf:Description>\n        ");
  },
  endMetadata: function endMetadata() {
    this._addInfo();
    this.metadata.end();
    if (this.version != 1.3) {
      this.metadataRef = this.ref({
        length: this.metadata.getLength(),
        Type: 'Metadata',
        Subtype: 'XML'
      });
      this.metadataRef.compress = false;
      this.metadataRef.write(buffer.Buffer.from(this.metadata.getXML(), 'utf-8'));
      this.metadataRef.end();
      this._root.data.Metadata = this.metadataRef;
    }
  }
};
var PDFDocument = function (_stream$Readable) {
  _inherits(PDFDocument, _stream$Readable);
  var _super = _createSuper(PDFDocument);
  function PDFDocument() {
    var _this;
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    _classCallCheck$1(this, PDFDocument);
    _this = _super.call(this, options);
    _this.options = options;
    switch (options.pdfVersion) {
      case '1.4':
        _this.version = 1.4;
        break;
      case '1.5':
        _this.version = 1.5;
        break;
      case '1.6':
        _this.version = 1.6;
        break;
      case '1.7':
      case '1.7ext3':
        _this.version = 1.7;
        break;
      default:
        _this.version = 1.3;
        break;
    }
    _this.compress = _this.options.compress != null ? _this.options.compress : true;
    _this._pageBuffer = [];
    _this._pageBufferStart = 0;
    _this._offsets = [];
    _this._waiting = 0;
    _this._ended = false;
    _this._offset = 0;
    var Pages = _this.ref({
      Type: 'Pages',
      Count: 0,
      Kids: []
    });
    var Names = _this.ref({
      Dests: new PDFNameTree()
    });
    _this._root = _this.ref({
      Type: 'Catalog',
      Pages: Pages,
      Names: Names
    });
    if (_this.options.lang) {
      _this._root.data.Lang = new String(_this.options.lang);
    }
    _this.page = null;
    _this.initMetadata();
    _this.initColor();
    _this.initVector();
    _this.initFonts(options.font);
    _this.initText();
    _this.initImages();
    _this.initOutline();
    _this.initMarkings(options);
    _this.initSubset(options);
    _this.info = {
      Producer: 'PDFKit',
      Creator: 'PDFKit',
      CreationDate: new Date()
    };
    if (_this.options.info) {
      for (var key in _this.options.info) {
        var val = _this.options.info[key];
        _this.info[key] = val;
      }
    }
    if (_this.options.displayTitle) {
      _this._root.data.ViewerPreferences = _this.ref({
        DisplayDocTitle: true
      });
    }
    _this._id = PDFSecurity.generateFileID(_this.info);
    _this._security = PDFSecurity.create(_assertThisInitialized(_this), options);
    _this._write("%PDF-".concat(_this.version));
    _this._write('%\xFF\xFF\xFF\xFF');
    if (_this.options.autoFirstPage !== false) {
      _this.addPage();
    }
    return _this;
  }
  _createClass(PDFDocument, [{
    key: "addPage",
    value: function addPage(options) {
      if (options == null) {
        options = this.options;
      }
      if (!this.options.bufferPages) {
        this.flushPages();
      }
      this.page = new PDFPage(this, options);
      this._pageBuffer.push(this.page);
      var pages = this._root.data.Pages.data;
      pages.Kids.push(this.page.dictionary);
      pages.Count++;
      this.x = this.page.margins.left;
      this.y = this.page.margins.top;
      this._ctm = [1, 0, 0, 1, 0, 0];
      this.transform(1, 0, 0, -1, 0, this.page.height);
      this.emit('pageAdded');
      return this;
    }
  }, {
    key: "continueOnNewPage",
    value: function continueOnNewPage(options) {
      var pageMarkings = this.endPageMarkings(this.page);
      this.addPage(options);
      this.initPageMarkings(pageMarkings);
      return this;
    }
  }, {
    key: "bufferedPageRange",
    value: function bufferedPageRange() {
      return {
        start: this._pageBufferStart,
        count: this._pageBuffer.length
      };
    }
  }, {
    key: "switchToPage",
    value: function switchToPage(n) {
      var page;
      if (!(page = this._pageBuffer[n - this._pageBufferStart])) {
        throw new Error("switchToPage(".concat(n, ") out of bounds, current buffer covers pages ").concat(this._pageBufferStart, " to ").concat(this._pageBufferStart + this._pageBuffer.length - 1));
      }
      return this.page = page;
    }
  }, {
    key: "flushPages",
    value: function flushPages() {
      var pages = this._pageBuffer;
      this._pageBuffer = [];
      this._pageBufferStart += pages.length;
      var _iterator = _createForOfIteratorHelper(pages),
          _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var page = _step.value;
          this.endPageMarkings(page);
          page.end();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }, {
    key: "addNamedDestination",
    value: function addNamedDestination(name) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      if (args.length === 0) {
        args = ['XYZ', null, null, null];
      }
      if (args[0] === 'XYZ' && args[2] !== null) {
        args[2] = this.page.height - args[2];
      }
      args.unshift(this.page.dictionary);
      this._root.data.Names.data.Dests.add(name, args);
    }
  }, {
    key: "addNamedEmbeddedFile",
    value: function addNamedEmbeddedFile(name, ref) {
      if (!this._root.data.Names.data.EmbeddedFiles) {
        this._root.data.Names.data.EmbeddedFiles = new PDFNameTree({
          limits: false
        });
      }
      this._root.data.Names.data.EmbeddedFiles.add(name, ref);
    }
  }, {
    key: "addNamedJavaScript",
    value: function addNamedJavaScript(name, js) {
      if (!this._root.data.Names.data.JavaScript) {
        this._root.data.Names.data.JavaScript = new PDFNameTree();
      }
      var data = {
        JS: new String(js),
        S: 'JavaScript'
      };
      this._root.data.Names.data.JavaScript.add(name, data);
    }
  }, {
    key: "ref",
    value: function ref(data) {
      var ref = new PDFReference(this, this._offsets.length + 1, data);
      this._offsets.push(null);
      this._waiting++;
      return ref;
    }
  }, {
    key: "_read",
    value: function _read() {}
  }, {
    key: "_write",
    value: function _write(data) {
      if (!buffer.Buffer.isBuffer(data)) {
        data = buffer.Buffer.from(data + '\n', 'binary');
      }
      this.push(data);
      return this._offset += data.length;
    }
  }, {
    key: "addContent",
    value: function addContent(data) {
      this.page.write(data);
      return this;
    }
  }, {
    key: "_refEnd",
    value: function _refEnd(ref) {
      this._offsets[ref.id - 1] = ref.offset;
      if (--this._waiting === 0 && this._ended) {
        this._finalize();
        return this._ended = false;
      }
    }
  }, {
    key: "write",
    value: function write(filename, fn) {
      var err = new Error("PDFDocument#write is deprecated, and will be removed in a future version of PDFKit. Please pipe the document into a Node stream.");
      console.warn(err.stack);
      this.pipe(fs$1.createWriteStream(filename));
      this.end();
      return this.once('end', fn);
    }
  }, {
    key: "end",
    value: function end() {
      this.flushPages();
      this._info = this.ref();
      for (var key in this.info) {
        var val = this.info[key];
        if (typeof val === 'string') {
          val = new String(val);
        }
        var entry = this.ref(val);
        entry.end();
        this._info.data[key] = entry;
      }
      this._info.end();
      for (var name in this._fontFamilies) {
        var font = this._fontFamilies[name];
        font.finalize();
      }
      this.endOutline();
      this.endMarkings();
      if (this.subset) {
        this.endSubset();
      }
      this.endMetadata();
      this._root.end();
      this._root.data.Pages.end();
      this._root.data.Names.end();
      this.endAcroForm();
      if (this._root.data.ViewerPreferences) {
        this._root.data.ViewerPreferences.end();
      }
      if (this._security) {
        this._security.end();
      }
      if (this._waiting === 0) {
        return this._finalize();
      } else {
        return this._ended = true;
      }
    }
  }, {
    key: "_finalize",
    value: function _finalize() {
      var xRefOffset = this._offset;
      this._write('xref');
      this._write("0 ".concat(this._offsets.length + 1));
      this._write('0000000000 65535 f ');
      var _iterator2 = _createForOfIteratorHelper(this._offsets),
          _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var offset = _step2.value;
          offset = "0000000000".concat(offset).slice(-10);
          this._write(offset + ' 00000 n ');
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
      var trailer = {
        Size: this._offsets.length + 1,
        Root: this._root,
        Info: this._info,
        ID: [this._id, this._id]
      };
      if (this._security) {
        trailer.Encrypt = this._security.dictionary;
      }
      this._write('trailer');
      this._write(PDFObject.convert(trailer));
      this._write('startxref');
      this._write("".concat(xRefOffset));
      this._write('%%EOF');
      return this.push(null);
    }
  }, {
    key: "toString",
    value: function toString() {
      return '[object PDFDocument]';
    }
  }]);
  return PDFDocument;
}(stream$1.Readable);
var mixin = function mixin(methods) {
  Object.assign(PDFDocument.prototype, methods);
};
mixin(MetadataMixin);
mixin(ColorMixin);
mixin(VectorMixin);
mixin(FontsMixin);
mixin(TextMixin);
mixin(ImagesMixin);
mixin(AnnotationsMixin);
mixin(OutlineMixin);
mixin(MarkingsMixin);
mixin(AcroFormMixin);
mixin(AttachmentsMixin);
mixin(SubsetMixin);
PDFDocument.LineWrapper = LineWrapper;

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};
function getDefaultExportFromCjs (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}
function commonjsRequire(path) {
	throw new Error('Could not dynamically require "' + path + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
}
var blobStream$1 = {exports: {}};
(function (module, exports) {
	!function(e){module.exports=e();}(function(){return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof commonjsRequire=="function"&&commonjsRequire;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r);}return n[o].exports}var i=typeof commonjsRequire=="function"&&commonjsRequire;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
	(function (global){
	var BlobBuilder = global.BlobBuilder
	  || global.WebKitBlobBuilder
	  || global.MSBlobBuilder
	  || global.MozBlobBuilder;
	var blobSupported = (function() {
	  try {
	    var a = new Blob(['hi']);
	    return a.size === 2;
	  } catch(e) {
	    return false;
	  }
	})();
	var blobSupportsArrayBufferView = blobSupported && (function() {
	  try {
	    var b = new Blob([new Uint8Array([1,2])]);
	    return b.size === 2;
	  } catch(e) {
	    return false;
	  }
	})();
	var blobBuilderSupported = BlobBuilder
	  && BlobBuilder.prototype.append
	  && BlobBuilder.prototype.getBlob;
	function mapArrayBufferViews(ary) {
	  for (var i = 0; i < ary.length; i++) {
	    var chunk = ary[i];
	    if (chunk.buffer instanceof ArrayBuffer) {
	      var buf = chunk.buffer;
	      if (chunk.byteLength !== buf.byteLength) {
	        var copy = new Uint8Array(chunk.byteLength);
	        copy.set(new Uint8Array(buf, chunk.byteOffset, chunk.byteLength));
	        buf = copy.buffer;
	      }
	      ary[i] = buf;
	    }
	  }
	}
	function BlobBuilderConstructor(ary, options) {
	  options = options || {};
	  var bb = new BlobBuilder();
	  mapArrayBufferViews(ary);
	  for (var i = 0; i < ary.length; i++) {
	    bb.append(ary[i]);
	  }
	  return (options.type) ? bb.getBlob(options.type) : bb.getBlob();
	}
	function BlobConstructor(ary, options) {
	  mapArrayBufferViews(ary);
	  return new Blob(ary, options || {});
	}
	module.exports = (function() {
	  if (blobSupported) {
	    return blobSupportsArrayBufferView ? global.Blob : BlobConstructor;
	  } else if (blobBuilderSupported) {
	    return BlobBuilderConstructor;
	  } else {
	    return undefined;
	  }
	})();
	}).call(this,typeof commonjsGlobal !== "undefined" ? commonjsGlobal : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
	},{}],2:[function(require,module,exports){
	(function (global){
	var WritableStream = require('stream').Writable;
	var util = require('util');
	var Blob = require('blob');
	var URL = global.URL || global.webkitURL || global.mozURL;
	function BlobStream() {
	  if (!(this instanceof BlobStream))
	    return new BlobStream;
	  WritableStream.call(this);
	  this._chunks = [];
	  this._blob = null;
	  this.length = 0;
	}
	util.inherits(BlobStream, WritableStream);
	BlobStream.prototype._write = function(chunk, encoding, callback) {
	  if (!(chunk instanceof Uint8Array))
	    chunk = new Uint8Array(chunk);
	  this.length += chunk.length;
	  this._chunks.push(chunk);
	  callback();
	};
	BlobStream.prototype.toBlob = function(type) {
	  type = type || 'application/octet-stream';
	  if (!this._blob) {
	    this._blob = new Blob(this._chunks, {
	      type: type
	    });
	    this._chunks = [];
	  }
	  if (this._blob.type !== type)
	    this._blob = new Blob([this._blob], { type: type });
	  return this._blob;
	};
	BlobStream.prototype.toBlobURL = function(type) {
	  return URL.createObjectURL(this.toBlob(type));
	};
	module.exports = BlobStream;
	}).call(this,typeof commonjsGlobal !== "undefined" ? commonjsGlobal : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
	},{"blob":1,"stream":22,"util":25}],3:[function(require,module,exports){
	/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */
	var base64 = require('base64-js');
	var ieee754 = require('ieee754');
	var isArray = require('is-array');
	exports.Buffer = Buffer;
	exports.SlowBuffer = Buffer;
	exports.INSPECT_MAX_BYTES = 50;
	Buffer.poolSize = 8192;
	var kMaxLength = 0x3fffffff;
	Buffer.TYPED_ARRAY_SUPPORT = (function () {
	  try {
	    var buf = new ArrayBuffer(0);
	    var arr = new Uint8Array(buf);
	    arr.foo = function () { return 42 };
	    return 42 === arr.foo() &&
	        typeof arr.subarray === 'function' &&
	        new Uint8Array(1).subarray(1, 1).byteLength === 0
	  } catch (e) {
	    return false
	  }
	})();
	function Buffer (subject, encoding, noZero) {
	  if (!(this instanceof Buffer))
	    return new Buffer(subject, encoding, noZero)
	  var type = typeof subject;
	  var length;
	  if (type === 'number')
	    length = subject > 0 ? subject >>> 0 : 0;
	  else if (type === 'string') {
	    if (encoding === 'base64')
	      subject = base64clean(subject);
	    length = Buffer.byteLength(subject, encoding);
	  } else if (type === 'object' && subject !== null) {
	    if (subject.type === 'Buffer' && isArray(subject.data))
	      subject = subject.data;
	    length = +subject.length > 0 ? Math.floor(+subject.length) : 0;
	  } else
	    throw new TypeError('must start with number, buffer, array or string')
	  if (this.length > kMaxLength)
	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
	      'size: 0x' + kMaxLength.toString(16) + ' bytes')
	  var buf;
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    buf = Buffer._augment(new Uint8Array(length));
	  } else {
	    buf = this;
	    buf.length = length;
	    buf._isBuffer = true;
	  }
	  var i;
	  if (Buffer.TYPED_ARRAY_SUPPORT && typeof subject.byteLength === 'number') {
	    buf._set(subject);
	  } else if (isArrayish(subject)) {
	    if (Buffer.isBuffer(subject)) {
	      for (i = 0; i < length; i++)
	        buf[i] = subject.readUInt8(i);
	    } else {
	      for (i = 0; i < length; i++)
	        buf[i] = ((subject[i] % 256) + 256) % 256;
	    }
	  } else if (type === 'string') {
	    buf.write(subject, 0, encoding);
	  } else if (type === 'number' && !Buffer.TYPED_ARRAY_SUPPORT && !noZero) {
	    for (i = 0; i < length; i++) {
	      buf[i] = 0;
	    }
	  }
	  return buf
	}
	Buffer.isBuffer = function (b) {
	  return !!(b != null && b._isBuffer)
	};
	Buffer.compare = function (a, b) {
	  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b))
	    throw new TypeError('Arguments must be Buffers')
	  var x = a.length;
	  var y = b.length;
	  for (var i = 0, len = Math.min(x, y); i < len && a[i] === b[i]; i++) {}
	  if (i !== len) {
	    x = a[i];
	    y = b[i];
	  }
	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	};
	Buffer.isEncoding = function (encoding) {
	  switch (String(encoding).toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'binary':
	    case 'base64':
	    case 'raw':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return true
	    default:
	      return false
	  }
	};
	Buffer.concat = function (list, totalLength) {
	  if (!isArray(list)) throw new TypeError('Usage: Buffer.concat(list[, length])')
	  if (list.length === 0) {
	    return new Buffer(0)
	  } else if (list.length === 1) {
	    return list[0]
	  }
	  var i;
	  if (totalLength === undefined) {
	    totalLength = 0;
	    for (i = 0; i < list.length; i++) {
	      totalLength += list[i].length;
	    }
	  }
	  var buf = new Buffer(totalLength);
	  var pos = 0;
	  for (i = 0; i < list.length; i++) {
	    var item = list[i];
	    item.copy(buf, pos);
	    pos += item.length;
	  }
	  return buf
	};
	Buffer.byteLength = function (str, encoding) {
	  var ret;
	  str = str + '';
	  switch (encoding || 'utf8') {
	    case 'ascii':
	    case 'binary':
	    case 'raw':
	      ret = str.length;
	      break
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      ret = str.length * 2;
	      break
	    case 'hex':
	      ret = str.length >>> 1;
	      break
	    case 'utf8':
	    case 'utf-8':
	      ret = utf8ToBytes(str).length;
	      break
	    case 'base64':
	      ret = base64ToBytes(str).length;
	      break
	    default:
	      ret = str.length;
	  }
	  return ret
	};
	Buffer.prototype.length = undefined;
	Buffer.prototype.parent = undefined;
	Buffer.prototype.toString = function (encoding, start, end) {
	  var loweredCase = false;
	  start = start >>> 0;
	  end = end === undefined || end === Infinity ? this.length : end >>> 0;
	  if (!encoding) encoding = 'utf8';
	  if (start < 0) start = 0;
	  if (end > this.length) end = this.length;
	  if (end <= start) return ''
	  while (true) {
	    switch (encoding) {
	      case 'hex':
	        return hexSlice(this, start, end)
	      case 'utf8':
	      case 'utf-8':
	        return utf8Slice(this, start, end)
	      case 'ascii':
	        return asciiSlice(this, start, end)
	      case 'binary':
	        return binarySlice(this, start, end)
	      case 'base64':
	        return base64Slice(this, start, end)
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return utf16leSlice(this, start, end)
	      default:
	        if (loweredCase)
	          throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = (encoding + '').toLowerCase();
	        loweredCase = true;
	    }
	  }
	};
	Buffer.prototype.equals = function (b) {
	  if(!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  return Buffer.compare(this, b) === 0
	};
	Buffer.prototype.inspect = function () {
	  var str = '';
	  var max = exports.INSPECT_MAX_BYTES;
	  if (this.length > 0) {
	    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
	    if (this.length > max)
	      str += ' ... ';
	  }
	  return '<Buffer ' + str + '>'
	};
	Buffer.prototype.compare = function (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  return Buffer.compare(this, b)
	};
	Buffer.prototype.get = function (offset) {
	  console.log('.get() is deprecated. Access using array indexes instead.');
	  return this.readUInt8(offset)
	};
	Buffer.prototype.set = function (v, offset) {
	  console.log('.set() is deprecated. Access using array indexes instead.');
	  return this.writeUInt8(v, offset)
	};
	function hexWrite (buf, string, offset, length) {
	  offset = Number(offset) || 0;
	  var remaining = buf.length - offset;
	  if (!length) {
	    length = remaining;
	  } else {
	    length = Number(length);
	    if (length > remaining) {
	      length = remaining;
	    }
	  }
	  var strLen = string.length;
	  if (strLen % 2 !== 0) throw new Error('Invalid hex string')
	  if (length > strLen / 2) {
	    length = strLen / 2;
	  }
	  for (var i = 0; i < length; i++) {
	    var byte = parseInt(string.substr(i * 2, 2), 16);
	    if (isNaN(byte)) throw new Error('Invalid hex string')
	    buf[offset + i] = byte;
	  }
	  return i
	}
	function utf8Write (buf, string, offset, length) {
	  var charsWritten = blitBuffer(utf8ToBytes(string), buf, offset, length);
	  return charsWritten
	}
	function asciiWrite (buf, string, offset, length) {
	  var charsWritten = blitBuffer(asciiToBytes(string), buf, offset, length);
	  return charsWritten
	}
	function binaryWrite (buf, string, offset, length) {
	  return asciiWrite(buf, string, offset, length)
	}
	function base64Write (buf, string, offset, length) {
	  var charsWritten = blitBuffer(base64ToBytes(string), buf, offset, length);
	  return charsWritten
	}
	function utf16leWrite (buf, string, offset, length) {
	  var charsWritten = blitBuffer(utf16leToBytes(string), buf, offset, length);
	  return charsWritten
	}
	Buffer.prototype.write = function (string, offset, length, encoding) {
	  if (isFinite(offset)) {
	    if (!isFinite(length)) {
	      encoding = length;
	      length = undefined;
	    }
	  } else {
	    var swap = encoding;
	    encoding = offset;
	    offset = length;
	    length = swap;
	  }
	  offset = Number(offset) || 0;
	  var remaining = this.length - offset;
	  if (!length) {
	    length = remaining;
	  } else {
	    length = Number(length);
	    if (length > remaining) {
	      length = remaining;
	    }
	  }
	  encoding = String(encoding || 'utf8').toLowerCase();
	  var ret;
	  switch (encoding) {
	    case 'hex':
	      ret = hexWrite(this, string, offset, length);
	      break
	    case 'utf8':
	    case 'utf-8':
	      ret = utf8Write(this, string, offset, length);
	      break
	    case 'ascii':
	      ret = asciiWrite(this, string, offset, length);
	      break
	    case 'binary':
	      ret = binaryWrite(this, string, offset, length);
	      break
	    case 'base64':
	      ret = base64Write(this, string, offset, length);
	      break
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      ret = utf16leWrite(this, string, offset, length);
	      break
	    default:
	      throw new TypeError('Unknown encoding: ' + encoding)
	  }
	  return ret
	};
	Buffer.prototype.toJSON = function () {
	  return {
	    type: 'Buffer',
	    data: Array.prototype.slice.call(this._arr || this, 0)
	  }
	};
	function base64Slice (buf, start, end) {
	  if (start === 0 && end === buf.length) {
	    return base64.fromByteArray(buf)
	  } else {
	    return base64.fromByteArray(buf.slice(start, end))
	  }
	}
	function utf8Slice (buf, start, end) {
	  var res = '';
	  var tmp = '';
	  end = Math.min(buf.length, end);
	  for (var i = start; i < end; i++) {
	    if (buf[i] <= 0x7F) {
	      res += decodeUtf8Char(tmp) + String.fromCharCode(buf[i]);
	      tmp = '';
	    } else {
	      tmp += '%' + buf[i].toString(16);
	    }
	  }
	  return res + decodeUtf8Char(tmp)
	}
	function asciiSlice (buf, start, end) {
	  var ret = '';
	  end = Math.min(buf.length, end);
	  for (var i = start; i < end; i++) {
	    ret += String.fromCharCode(buf[i]);
	  }
	  return ret
	}
	function binarySlice (buf, start, end) {
	  return asciiSlice(buf, start, end)
	}
	function hexSlice (buf, start, end) {
	  var len = buf.length;
	  if (!start || start < 0) start = 0;
	  if (!end || end < 0 || end > len) end = len;
	  var out = '';
	  for (var i = start; i < end; i++) {
	    out += toHex(buf[i]);
	  }
	  return out
	}
	function utf16leSlice (buf, start, end) {
	  var bytes = buf.slice(start, end);
	  var res = '';
	  for (var i = 0; i < bytes.length; i += 2) {
	    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
	  }
	  return res
	}
	Buffer.prototype.slice = function (start, end) {
	  var len = this.length;
	  start = ~~start;
	  end = end === undefined ? len : ~~end;
	  if (start < 0) {
	    start += len;
	    if (start < 0)
	      start = 0;
	  } else if (start > len) {
	    start = len;
	  }
	  if (end < 0) {
	    end += len;
	    if (end < 0)
	      end = 0;
	  } else if (end > len) {
	    end = len;
	  }
	  if (end < start)
	    end = start;
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    return Buffer._augment(this.subarray(start, end))
	  } else {
	    var sliceLen = end - start;
	    var newBuf = new Buffer(sliceLen, undefined, true);
	    for (var i = 0; i < sliceLen; i++) {
	      newBuf[i] = this[i + start];
	    }
	    return newBuf
	  }
	};
	function checkOffset (offset, ext, length) {
	  if ((offset % 1) !== 0 || offset < 0)
	    throw new RangeError('offset is not uint')
	  if (offset + ext > length)
	    throw new RangeError('Trying to access beyond buffer length')
	}
	Buffer.prototype.readUInt8 = function (offset, noAssert) {
	  if (!noAssert)
	    checkOffset(offset, 1, this.length);
	  return this[offset]
	};
	Buffer.prototype.readUInt16LE = function (offset, noAssert) {
	  if (!noAssert)
	    checkOffset(offset, 2, this.length);
	  return this[offset] | (this[offset + 1] << 8)
	};
	Buffer.prototype.readUInt16BE = function (offset, noAssert) {
	  if (!noAssert)
	    checkOffset(offset, 2, this.length);
	  return (this[offset] << 8) | this[offset + 1]
	};
	Buffer.prototype.readUInt32LE = function (offset, noAssert) {
	  if (!noAssert)
	    checkOffset(offset, 4, this.length);
	  return ((this[offset]) |
	      (this[offset + 1] << 8) |
	      (this[offset + 2] << 16)) +
	      (this[offset + 3] * 0x1000000)
	};
	Buffer.prototype.readUInt32BE = function (offset, noAssert) {
	  if (!noAssert)
	    checkOffset(offset, 4, this.length);
	  return (this[offset] * 0x1000000) +
	      ((this[offset + 1] << 16) |
	      (this[offset + 2] << 8) |
	      this[offset + 3])
	};
	Buffer.prototype.readInt8 = function (offset, noAssert) {
	  if (!noAssert)
	    checkOffset(offset, 1, this.length);
	  if (!(this[offset] & 0x80))
	    return (this[offset])
	  return ((0xff - this[offset] + 1) * -1)
	};
	Buffer.prototype.readInt16LE = function (offset, noAssert) {
	  if (!noAssert)
	    checkOffset(offset, 2, this.length);
	  var val = this[offset] | (this[offset + 1] << 8);
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	};
	Buffer.prototype.readInt16BE = function (offset, noAssert) {
	  if (!noAssert)
	    checkOffset(offset, 2, this.length);
	  var val = this[offset + 1] | (this[offset] << 8);
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	};
	Buffer.prototype.readInt32LE = function (offset, noAssert) {
	  if (!noAssert)
	    checkOffset(offset, 4, this.length);
	  return (this[offset]) |
	      (this[offset + 1] << 8) |
	      (this[offset + 2] << 16) |
	      (this[offset + 3] << 24)
	};
	Buffer.prototype.readInt32BE = function (offset, noAssert) {
	  if (!noAssert)
	    checkOffset(offset, 4, this.length);
	  return (this[offset] << 24) |
	      (this[offset + 1] << 16) |
	      (this[offset + 2] << 8) |
	      (this[offset + 3])
	};
	Buffer.prototype.readFloatLE = function (offset, noAssert) {
	  if (!noAssert)
	    checkOffset(offset, 4, this.length);
	  return ieee754.read(this, offset, true, 23, 4)
	};
	Buffer.prototype.readFloatBE = function (offset, noAssert) {
	  if (!noAssert)
	    checkOffset(offset, 4, this.length);
	  return ieee754.read(this, offset, false, 23, 4)
	};
	Buffer.prototype.readDoubleLE = function (offset, noAssert) {
	  if (!noAssert)
	    checkOffset(offset, 8, this.length);
	  return ieee754.read(this, offset, true, 52, 8)
	};
	Buffer.prototype.readDoubleBE = function (offset, noAssert) {
	  if (!noAssert)
	    checkOffset(offset, 8, this.length);
	  return ieee754.read(this, offset, false, 52, 8)
	};
	function checkInt (buf, value, offset, ext, max, min) {
	  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')
	  if (value > max || value < min) throw new TypeError('value is out of bounds')
	  if (offset + ext > buf.length) throw new TypeError('index out of range')
	}
	Buffer.prototype.writeUInt8 = function (value, offset, noAssert) {
	  value = +value;
	  offset = offset >>> 0;
	  if (!noAssert)
	    checkInt(this, value, offset, 1, 0xff, 0);
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
	  this[offset] = value;
	  return offset + 1
	};
	function objectWriteUInt16 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffff + value + 1;
	  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {
	    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
	      (littleEndian ? i : 1 - i) * 8;
	  }
	}
	Buffer.prototype.writeUInt16LE = function (value, offset, noAssert) {
	  value = +value;
	  offset = offset >>> 0;
	  if (!noAssert)
	    checkInt(this, value, offset, 2, 0xffff, 0);
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = value;
	    this[offset + 1] = (value >>> 8);
	  } else objectWriteUInt16(this, value, offset, true);
	  return offset + 2
	};
	Buffer.prototype.writeUInt16BE = function (value, offset, noAssert) {
	  value = +value;
	  offset = offset >>> 0;
	  if (!noAssert)
	    checkInt(this, value, offset, 2, 0xffff, 0);
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8);
	    this[offset + 1] = value;
	  } else objectWriteUInt16(this, value, offset, false);
	  return offset + 2
	};
	function objectWriteUInt32 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffffffff + value + 1;
	  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {
	    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff;
	  }
	}
	Buffer.prototype.writeUInt32LE = function (value, offset, noAssert) {
	  value = +value;
	  offset = offset >>> 0;
	  if (!noAssert)
	    checkInt(this, value, offset, 4, 0xffffffff, 0);
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset + 3] = (value >>> 24);
	    this[offset + 2] = (value >>> 16);
	    this[offset + 1] = (value >>> 8);
	    this[offset] = value;
	  } else objectWriteUInt32(this, value, offset, true);
	  return offset + 4
	};
	Buffer.prototype.writeUInt32BE = function (value, offset, noAssert) {
	  value = +value;
	  offset = offset >>> 0;
	  if (!noAssert)
	    checkInt(this, value, offset, 4, 0xffffffff, 0);
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24);
	    this[offset + 1] = (value >>> 16);
	    this[offset + 2] = (value >>> 8);
	    this[offset + 3] = value;
	  } else objectWriteUInt32(this, value, offset, false);
	  return offset + 4
	};
	Buffer.prototype.writeInt8 = function (value, offset, noAssert) {
	  value = +value;
	  offset = offset >>> 0;
	  if (!noAssert)
	    checkInt(this, value, offset, 1, 0x7f, -0x80);
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
	  if (value < 0) value = 0xff + value + 1;
	  this[offset] = value;
	  return offset + 1
	};
	Buffer.prototype.writeInt16LE = function (value, offset, noAssert) {
	  value = +value;
	  offset = offset >>> 0;
	  if (!noAssert)
	    checkInt(this, value, offset, 2, 0x7fff, -0x8000);
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = value;
	    this[offset + 1] = (value >>> 8);
	  } else objectWriteUInt16(this, value, offset, true);
	  return offset + 2
	};
	Buffer.prototype.writeInt16BE = function (value, offset, noAssert) {
	  value = +value;
	  offset = offset >>> 0;
	  if (!noAssert)
	    checkInt(this, value, offset, 2, 0x7fff, -0x8000);
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8);
	    this[offset + 1] = value;
	  } else objectWriteUInt16(this, value, offset, false);
	  return offset + 2
	};
	Buffer.prototype.writeInt32LE = function (value, offset, noAssert) {
	  value = +value;
	  offset = offset >>> 0;
	  if (!noAssert)
	    checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = value;
	    this[offset + 1] = (value >>> 8);
	    this[offset + 2] = (value >>> 16);
	    this[offset + 3] = (value >>> 24);
	  } else objectWriteUInt32(this, value, offset, true);
	  return offset + 4
	};
	Buffer.prototype.writeInt32BE = function (value, offset, noAssert) {
	  value = +value;
	  offset = offset >>> 0;
	  if (!noAssert)
	    checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
	  if (value < 0) value = 0xffffffff + value + 1;
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24);
	    this[offset + 1] = (value >>> 16);
	    this[offset + 2] = (value >>> 8);
	    this[offset + 3] = value;
	  } else objectWriteUInt32(this, value, offset, false);
	  return offset + 4
	};
	function checkIEEE754 (buf, value, offset, ext, max, min) {
	  if (value > max || value < min) throw new TypeError('value is out of bounds')
	  if (offset + ext > buf.length) throw new TypeError('index out of range')
	}
	function writeFloat (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert)
	    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);
	  ieee754.write(buf, value, offset, littleEndian, 23, 4);
	  return offset + 4
	}
	Buffer.prototype.writeFloatLE = function (value, offset, noAssert) {
	  return writeFloat(this, value, offset, true, noAssert)
	};
	Buffer.prototype.writeFloatBE = function (value, offset, noAssert) {
	  return writeFloat(this, value, offset, false, noAssert)
	};
	function writeDouble (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert)
	    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);
	  ieee754.write(buf, value, offset, littleEndian, 52, 8);
	  return offset + 8
	}
	Buffer.prototype.writeDoubleLE = function (value, offset, noAssert) {
	  return writeDouble(this, value, offset, true, noAssert)
	};
	Buffer.prototype.writeDoubleBE = function (value, offset, noAssert) {
	  return writeDouble(this, value, offset, false, noAssert)
	};
	Buffer.prototype.copy = function (target, target_start, start, end) {
	  var source = this;
	  if (!start) start = 0;
	  if (!end && end !== 0) end = this.length;
	  if (!target_start) target_start = 0;
	  if (end === start) return
	  if (target.length === 0 || source.length === 0) return
	  if (end < start) throw new TypeError('sourceEnd < sourceStart')
	  if (target_start < 0 || target_start >= target.length)
	    throw new TypeError('targetStart out of bounds')
	  if (start < 0 || start >= source.length) throw new TypeError('sourceStart out of bounds')
	  if (end < 0 || end > source.length) throw new TypeError('sourceEnd out of bounds')
	  if (end > this.length)
	    end = this.length;
	  if (target.length - target_start < end - start)
	    end = target.length - target_start + start;
	  var len = end - start;
	  if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < len; i++) {
	      target[i + target_start] = this[i + start];
	    }
	  } else {
	    target._set(this.subarray(start, start + len), target_start);
	  }
	};
	Buffer.prototype.fill = function (value, start, end) {
	  if (!value) value = 0;
	  if (!start) start = 0;
	  if (!end) end = this.length;
	  if (end < start) throw new TypeError('end < start')
	  if (end === start) return
	  if (this.length === 0) return
	  if (start < 0 || start >= this.length) throw new TypeError('start out of bounds')
	  if (end < 0 || end > this.length) throw new TypeError('end out of bounds')
	  var i;
	  if (typeof value === 'number') {
	    for (i = start; i < end; i++) {
	      this[i] = value;
	    }
	  } else {
	    var bytes = utf8ToBytes(value.toString());
	    var len = bytes.length;
	    for (i = start; i < end; i++) {
	      this[i] = bytes[i % len];
	    }
	  }
	  return this
	};
	Buffer.prototype.toArrayBuffer = function () {
	  if (typeof Uint8Array !== 'undefined') {
	    if (Buffer.TYPED_ARRAY_SUPPORT) {
	      return (new Buffer(this)).buffer
	    } else {
	      var buf = new Uint8Array(this.length);
	      for (var i = 0, len = buf.length; i < len; i += 1) {
	        buf[i] = this[i];
	      }
	      return buf.buffer
	    }
	  } else {
	    throw new TypeError('Buffer.toArrayBuffer not supported in this browser')
	  }
	};
	var BP = Buffer.prototype;
	Buffer._augment = function (arr) {
	  arr.constructor = Buffer;
	  arr._isBuffer = true;
	  arr._get = arr.get;
	  arr._set = arr.set;
	  arr.get = BP.get;
	  arr.set = BP.set;
	  arr.write = BP.write;
	  arr.toString = BP.toString;
	  arr.toLocaleString = BP.toString;
	  arr.toJSON = BP.toJSON;
	  arr.equals = BP.equals;
	  arr.compare = BP.compare;
	  arr.copy = BP.copy;
	  arr.slice = BP.slice;
	  arr.readUInt8 = BP.readUInt8;
	  arr.readUInt16LE = BP.readUInt16LE;
	  arr.readUInt16BE = BP.readUInt16BE;
	  arr.readUInt32LE = BP.readUInt32LE;
	  arr.readUInt32BE = BP.readUInt32BE;
	  arr.readInt8 = BP.readInt8;
	  arr.readInt16LE = BP.readInt16LE;
	  arr.readInt16BE = BP.readInt16BE;
	  arr.readInt32LE = BP.readInt32LE;
	  arr.readInt32BE = BP.readInt32BE;
	  arr.readFloatLE = BP.readFloatLE;
	  arr.readFloatBE = BP.readFloatBE;
	  arr.readDoubleLE = BP.readDoubleLE;
	  arr.readDoubleBE = BP.readDoubleBE;
	  arr.writeUInt8 = BP.writeUInt8;
	  arr.writeUInt16LE = BP.writeUInt16LE;
	  arr.writeUInt16BE = BP.writeUInt16BE;
	  arr.writeUInt32LE = BP.writeUInt32LE;
	  arr.writeUInt32BE = BP.writeUInt32BE;
	  arr.writeInt8 = BP.writeInt8;
	  arr.writeInt16LE = BP.writeInt16LE;
	  arr.writeInt16BE = BP.writeInt16BE;
	  arr.writeInt32LE = BP.writeInt32LE;
	  arr.writeInt32BE = BP.writeInt32BE;
	  arr.writeFloatLE = BP.writeFloatLE;
	  arr.writeFloatBE = BP.writeFloatBE;
	  arr.writeDoubleLE = BP.writeDoubleLE;
	  arr.writeDoubleBE = BP.writeDoubleBE;
	  arr.fill = BP.fill;
	  arr.inspect = BP.inspect;
	  arr.toArrayBuffer = BP.toArrayBuffer;
	  return arr
	};
	var INVALID_BASE64_RE = /[^+\/0-9A-z]/g;
	function base64clean (str) {
	  str = stringtrim(str).replace(INVALID_BASE64_RE, '');
	  while (str.length % 4 !== 0) {
	    str = str + '=';
	  }
	  return str
	}
	function stringtrim (str) {
	  if (str.trim) return str.trim()
	  return str.replace(/^\s+|\s+$/g, '')
	}
	function isArrayish (subject) {
	  return isArray(subject) || Buffer.isBuffer(subject) ||
	      subject && typeof subject === 'object' &&
	      typeof subject.length === 'number'
	}
	function toHex (n) {
	  if (n < 16) return '0' + n.toString(16)
	  return n.toString(16)
	}
	function utf8ToBytes (str) {
	  var byteArray = [];
	  for (var i = 0; i < str.length; i++) {
	    var b = str.charCodeAt(i);
	    if (b <= 0x7F) {
	      byteArray.push(b);
	    } else {
	      var start = i;
	      if (b >= 0xD800 && b <= 0xDFFF) i++;
	      var h = encodeURIComponent(str.slice(start, i+1)).substr(1).split('%');
	      for (var j = 0; j < h.length; j++) {
	        byteArray.push(parseInt(h[j], 16));
	      }
	    }
	  }
	  return byteArray
	}
	function asciiToBytes (str) {
	  var byteArray = [];
	  for (var i = 0; i < str.length; i++) {
	    byteArray.push(str.charCodeAt(i) & 0xFF);
	  }
	  return byteArray
	}
	function utf16leToBytes (str) {
	  var c, hi, lo;
	  var byteArray = [];
	  for (var i = 0; i < str.length; i++) {
	    c = str.charCodeAt(i);
	    hi = c >> 8;
	    lo = c % 256;
	    byteArray.push(lo);
	    byteArray.push(hi);
	  }
	  return byteArray
	}
	function base64ToBytes (str) {
	  return base64.toByteArray(str)
	}
	function blitBuffer (src, dst, offset, length) {
	  for (var i = 0; i < length; i++) {
	    if ((i + offset >= dst.length) || (i >= src.length))
	      break
	    dst[i + offset] = src[i];
	  }
	  return i
	}
	function decodeUtf8Char (str) {
	  try {
	    return decodeURIComponent(str)
	  } catch (err) {
	    return String.fromCharCode(0xFFFD)
	  }
	}
	},{"base64-js":4,"ieee754":5,"is-array":6}],4:[function(require,module,exports){
	var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
	(function (exports) {
	  var Arr = (typeof Uint8Array !== 'undefined')
	    ? Uint8Array
	    : Array;
		var PLUS   = '+'.charCodeAt(0);
		var SLASH  = '/'.charCodeAt(0);
		var NUMBER = '0'.charCodeAt(0);
		var LOWER  = 'a'.charCodeAt(0);
		var UPPER  = 'A'.charCodeAt(0);
		function decode (elt) {
			var code = elt.charCodeAt(0);
			if (code === PLUS)
				return 62
			if (code === SLASH)
				return 63
			if (code < NUMBER)
				return -1
			if (code < NUMBER + 10)
				return code - NUMBER + 26 + 26
			if (code < UPPER + 26)
				return code - UPPER
			if (code < LOWER + 26)
				return code - LOWER + 26
		}
		function b64ToByteArray (b64) {
			var i, j, l, tmp, placeHolders, arr;
			if (b64.length % 4 > 0) {
				throw new Error('Invalid string. Length must be a multiple of 4')
			}
			var len = b64.length;
			placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0;
			arr = new Arr(b64.length * 3 / 4 - placeHolders);
			l = placeHolders > 0 ? b64.length - 4 : b64.length;
			var L = 0;
			function push (v) {
				arr[L++] = v;
			}
			for (i = 0, j = 0; i < l; i += 4, j += 3) {
				tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3));
				push((tmp & 0xFF0000) >> 16);
				push((tmp & 0xFF00) >> 8);
				push(tmp & 0xFF);
			}
			if (placeHolders === 2) {
				tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4);
				push(tmp & 0xFF);
			} else if (placeHolders === 1) {
				tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2);
				push((tmp >> 8) & 0xFF);
				push(tmp & 0xFF);
			}
			return arr
		}
		function uint8ToBase64 (uint8) {
			var i,
				extraBytes = uint8.length % 3,
				output = "",
				temp, length;
			function encode (num) {
				return lookup.charAt(num)
			}
			function tripletToBase64 (num) {
				return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)
			}
			for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
				temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2]);
				output += tripletToBase64(temp);
			}
			switch (extraBytes) {
				case 1:
					temp = uint8[uint8.length - 1];
					output += encode(temp >> 2);
					output += encode((temp << 4) & 0x3F);
					output += '==';
					break
				case 2:
					temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1]);
					output += encode(temp >> 10);
					output += encode((temp >> 4) & 0x3F);
					output += encode((temp << 2) & 0x3F);
					output += '=';
					break
			}
			return output
		}
		exports.toByteArray = b64ToByteArray;
		exports.fromByteArray = uint8ToBase64;
	}(typeof exports === 'undefined' ? (this.base64js = {}) : exports));
	},{}],5:[function(require,module,exports){
	exports.read = function(buffer, offset, isLE, mLen, nBytes) {
	  var e, m,
	      eLen = nBytes * 8 - mLen - 1,
	      eMax = (1 << eLen) - 1,
	      eBias = eMax >> 1,
	      nBits = -7,
	      i = isLE ? (nBytes - 1) : 0,
	      d = isLE ? -1 : 1,
	      s = buffer[offset + i];
	  i += d;
	  e = s & ((1 << (-nBits)) - 1);
	  s >>= (-nBits);
	  nBits += eLen;
	  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);
	  m = e & ((1 << (-nBits)) - 1);
	  e >>= (-nBits);
	  nBits += mLen;
	  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);
	  if (e === 0) {
	    e = 1 - eBias;
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity);
	  } else {
	    m = m + Math.pow(2, mLen);
	    e = e - eBias;
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
	};
	exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c,
	      eLen = nBytes * 8 - mLen - 1,
	      eMax = (1 << eLen) - 1,
	      eBias = eMax >> 1,
	      rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0),
	      i = isLE ? 0 : (nBytes - 1),
	      d = isLE ? 1 : -1,
	      s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;
	  value = Math.abs(value);
	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0;
	    e = eMax;
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2);
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--;
	      c *= 2;
	    }
	    if (e + eBias >= 1) {
	      value += rt / c;
	    } else {
	      value += rt * Math.pow(2, 1 - eBias);
	    }
	    if (value * c >= 2) {
	      e++;
	      c /= 2;
	    }
	    if (e + eBias >= eMax) {
	      m = 0;
	      e = eMax;
	    } else if (e + eBias >= 1) {
	      m = (value * c - 1) * Math.pow(2, mLen);
	      e = e + eBias;
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
	      e = 0;
	    }
	  }
	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);
	  e = (e << mLen) | m;
	  eLen += mLen;
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);
	  buffer[offset + i - d] |= s * 128;
	};
	},{}],6:[function(require,module,exports){
	var isArray = Array.isArray;
	var str = Object.prototype.toString;
	module.exports = isArray || function (val) {
	  return !! val && '[object Array]' == str.call(val);
	};
	},{}],7:[function(require,module,exports){
	function EventEmitter() {
	  this._events = this._events || {};
	  this._maxListeners = this._maxListeners || undefined;
	}
	module.exports = EventEmitter;
	EventEmitter.EventEmitter = EventEmitter;
	EventEmitter.prototype._events = undefined;
	EventEmitter.prototype._maxListeners = undefined;
	EventEmitter.defaultMaxListeners = 10;
	EventEmitter.prototype.setMaxListeners = function(n) {
	  if (!isNumber(n) || n < 0 || isNaN(n))
	    throw TypeError('n must be a positive number');
	  this._maxListeners = n;
	  return this;
	};
	EventEmitter.prototype.emit = function(type) {
	  var er, handler, len, args, i, listeners;
	  if (!this._events)
	    this._events = {};
	  if (type === 'error') {
	    if (!this._events.error ||
	        (isObject(this._events.error) && !this._events.error.length)) {
	      er = arguments[1];
	      if (er instanceof Error) {
	        throw er;
	      }
	      throw TypeError('Uncaught, unspecified "error" event.');
	    }
	  }
	  handler = this._events[type];
	  if (isUndefined(handler))
	    return false;
	  if (isFunction(handler)) {
	    switch (arguments.length) {
	      case 1:
	        handler.call(this);
	        break;
	      case 2:
	        handler.call(this, arguments[1]);
	        break;
	      case 3:
	        handler.call(this, arguments[1], arguments[2]);
	        break;
	      default:
	        len = arguments.length;
	        args = new Array(len - 1);
	        for (i = 1; i < len; i++)
	          args[i - 1] = arguments[i];
	        handler.apply(this, args);
	    }
	  } else if (isObject(handler)) {
	    len = arguments.length;
	    args = new Array(len - 1);
	    for (i = 1; i < len; i++)
	      args[i - 1] = arguments[i];
	    listeners = handler.slice();
	    len = listeners.length;
	    for (i = 0; i < len; i++)
	      listeners[i].apply(this, args);
	  }
	  return true;
	};
	EventEmitter.prototype.addListener = function(type, listener) {
	  var m;
	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');
	  if (!this._events)
	    this._events = {};
	  if (this._events.newListener)
	    this.emit('newListener', type,
	              isFunction(listener.listener) ?
	              listener.listener : listener);
	  if (!this._events[type])
	    this._events[type] = listener;
	  else if (isObject(this._events[type]))
	    this._events[type].push(listener);
	  else
	    this._events[type] = [this._events[type], listener];
	  if (isObject(this._events[type]) && !this._events[type].warned) {
	    var m;
	    if (!isUndefined(this._maxListeners)) {
	      m = this._maxListeners;
	    } else {
	      m = EventEmitter.defaultMaxListeners;
	    }
	    if (m && m > 0 && this._events[type].length > m) {
	      this._events[type].warned = true;
	      console.error('(node) warning: possible EventEmitter memory ' +
	                    'leak detected. %d listeners added. ' +
	                    'Use emitter.setMaxListeners() to increase limit.',
	                    this._events[type].length);
	      if (typeof console.trace === 'function') {
	        console.trace();
	      }
	    }
	  }
	  return this;
	};
	EventEmitter.prototype.on = EventEmitter.prototype.addListener;
	EventEmitter.prototype.once = function(type, listener) {
	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');
	  var fired = false;
	  function g() {
	    this.removeListener(type, g);
	    if (!fired) {
	      fired = true;
	      listener.apply(this, arguments);
	    }
	  }
	  g.listener = listener;
	  this.on(type, g);
	  return this;
	};
	EventEmitter.prototype.removeListener = function(type, listener) {
	  var list, position, length, i;
	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');
	  if (!this._events || !this._events[type])
	    return this;
	  list = this._events[type];
	  length = list.length;
	  position = -1;
	  if (list === listener ||
	      (isFunction(list.listener) && list.listener === listener)) {
	    delete this._events[type];
	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);
	  } else if (isObject(list)) {
	    for (i = length; i-- > 0;) {
	      if (list[i] === listener ||
	          (list[i].listener && list[i].listener === listener)) {
	        position = i;
	        break;
	      }
	    }
	    if (position < 0)
	      return this;
	    if (list.length === 1) {
	      list.length = 0;
	      delete this._events[type];
	    } else {
	      list.splice(position, 1);
	    }
	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);
	  }
	  return this;
	};
	EventEmitter.prototype.removeAllListeners = function(type) {
	  var key, listeners;
	  if (!this._events)
	    return this;
	  if (!this._events.removeListener) {
	    if (arguments.length === 0)
	      this._events = {};
	    else if (this._events[type])
	      delete this._events[type];
	    return this;
	  }
	  if (arguments.length === 0) {
	    for (key in this._events) {
	      if (key === 'removeListener') continue;
	      this.removeAllListeners(key);
	    }
	    this.removeAllListeners('removeListener');
	    this._events = {};
	    return this;
	  }
	  listeners = this._events[type];
	  if (isFunction(listeners)) {
	    this.removeListener(type, listeners);
	  } else {
	    while (listeners.length)
	      this.removeListener(type, listeners[listeners.length - 1]);
	  }
	  delete this._events[type];
	  return this;
	};
	EventEmitter.prototype.listeners = function(type) {
	  var ret;
	  if (!this._events || !this._events[type])
	    ret = [];
	  else if (isFunction(this._events[type]))
	    ret = [this._events[type]];
	  else
	    ret = this._events[type].slice();
	  return ret;
	};
	EventEmitter.listenerCount = function(emitter, type) {
	  var ret;
	  if (!emitter._events || !emitter._events[type])
	    ret = 0;
	  else if (isFunction(emitter._events[type]))
	    ret = 1;
	  else
	    ret = emitter._events[type].length;
	  return ret;
	};
	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	function isUndefined(arg) {
	  return arg === void 0;
	}
	},{}],8:[function(require,module,exports){
	if (typeof Object.create === 'function') {
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor;
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor;
	    var TempCtor = function () {};
	    TempCtor.prototype = superCtor.prototype;
	    ctor.prototype = new TempCtor();
	    ctor.prototype.constructor = ctor;
	  };
	}
	},{}],9:[function(require,module,exports){
	module.exports = Array.isArray || function (arr) {
	  return Object.prototype.toString.call(arr) == '[object Array]';
	};
	},{}],10:[function(require,module,exports){
	var process = module.exports = {};
	process.nextTick = (function () {
	    var canSetImmediate = typeof window !== 'undefined'
	    && window.setImmediate;
	    var canMutationObserver = typeof window !== 'undefined'
	    && window.MutationObserver;
	    var canPost = typeof window !== 'undefined'
	    && window.postMessage && window.addEventListener
	    ;
	    if (canSetImmediate) {
	        return function (f) { return window.setImmediate(f) };
	    }
	    var queue = [];
	    if (canMutationObserver) {
	        var hiddenDiv = document.createElement("div");
	        var observer = new MutationObserver(function () {
	            var queueList = queue.slice();
	            queue.length = 0;
	            queueList.forEach(function (fn) {
	                fn();
	            });
	        });
	        observer.observe(hiddenDiv, { attributes: true });
	        return function nextTick(fn) {
	            if (!queue.length) {
	                hiddenDiv.setAttribute('yes', 'no');
	            }
	            queue.push(fn);
	        };
	    }
	    if (canPost) {
	        window.addEventListener('message', function (ev) {
	            var source = ev.source;
	            if ((source === window || source === null) && ev.data === 'process-tick') {
	                ev.stopPropagation();
	                if (queue.length > 0) {
	                    var fn = queue.shift();
	                    fn();
	                }
	            }
	        }, true);
	        return function nextTick(fn) {
	            queue.push(fn);
	            window.postMessage('process-tick', '*');
	        };
	    }
	    return function nextTick(fn) {
	        setTimeout(fn, 0);
	    };
	})();
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	function noop() {}
	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};
	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	},{}],11:[function(require,module,exports){
	module.exports = require("./lib/_stream_duplex.js");
	},{"./lib/_stream_duplex.js":12}],12:[function(require,module,exports){
	(function (process){
	module.exports = Duplex;
	var objectKeys = Object.keys || function (obj) {
	  var keys = [];
	  for (var key in obj) keys.push(key);
	  return keys;
	};
	var util = require('core-util-is');
	util.inherits = require('inherits');
	var Readable = require('./_stream_readable');
	var Writable = require('./_stream_writable');
	util.inherits(Duplex, Readable);
	forEach(objectKeys(Writable.prototype), function(method) {
	  if (!Duplex.prototype[method])
	    Duplex.prototype[method] = Writable.prototype[method];
	});
	function Duplex(options) {
	  if (!(this instanceof Duplex))
	    return new Duplex(options);
	  Readable.call(this, options);
	  Writable.call(this, options);
	  if (options && options.readable === false)
	    this.readable = false;
	  if (options && options.writable === false)
	    this.writable = false;
	  this.allowHalfOpen = true;
	  if (options && options.allowHalfOpen === false)
	    this.allowHalfOpen = false;
	  this.once('end', onend);
	}
	function onend() {
	  if (this.allowHalfOpen || this._writableState.ended)
	    return;
	  process.nextTick(this.end.bind(this));
	}
	function forEach (xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}
	}).call(this,require('_process'));
	},{"./_stream_readable":14,"./_stream_writable":16,"_process":10,"core-util-is":17,"inherits":8}],13:[function(require,module,exports){
	module.exports = PassThrough;
	var Transform = require('./_stream_transform');
	var util = require('core-util-is');
	util.inherits = require('inherits');
	util.inherits(PassThrough, Transform);
	function PassThrough(options) {
	  if (!(this instanceof PassThrough))
	    return new PassThrough(options);
	  Transform.call(this, options);
	}
	PassThrough.prototype._transform = function(chunk, encoding, cb) {
	  cb(null, chunk);
	};
	},{"./_stream_transform":15,"core-util-is":17,"inherits":8}],14:[function(require,module,exports){
	(function (process){
	module.exports = Readable;
	var isArray = require('isarray');
	var Buffer = require('buffer').Buffer;
	Readable.ReadableState = ReadableState;
	var EE = require('events').EventEmitter;
	if (!EE.listenerCount) EE.listenerCount = function(emitter, type) {
	  return emitter.listeners(type).length;
	};
	var Stream = require('stream');
	var util = require('core-util-is');
	util.inherits = require('inherits');
	var StringDecoder;
	util.inherits(Readable, Stream);
	function ReadableState(options, stream) {
	  options = options || {};
	  var hwm = options.highWaterMark;
	  this.highWaterMark = (hwm || hwm === 0) ? hwm : 16 * 1024;
	  this.highWaterMark = ~~this.highWaterMark;
	  this.buffer = [];
	  this.length = 0;
	  this.pipes = null;
	  this.pipesCount = 0;
	  this.flowing = false;
	  this.ended = false;
	  this.endEmitted = false;
	  this.reading = false;
	  this.calledRead = false;
	  this.sync = true;
	  this.needReadable = false;
	  this.emittedReadable = false;
	  this.readableListening = false;
	  this.objectMode = !!options.objectMode;
	  this.defaultEncoding = options.defaultEncoding || 'utf8';
	  this.ranOut = false;
	  this.awaitDrain = 0;
	  this.readingMore = false;
	  this.decoder = null;
	  this.encoding = null;
	  if (options.encoding) {
	    if (!StringDecoder)
	      StringDecoder = require('string_decoder/').StringDecoder;
	    this.decoder = new StringDecoder(options.encoding);
	    this.encoding = options.encoding;
	  }
	}
	function Readable(options) {
	  if (!(this instanceof Readable))
	    return new Readable(options);
	  this._readableState = new ReadableState(options);
	  this.readable = true;
	  Stream.call(this);
	}
	Readable.prototype.push = function(chunk, encoding) {
	  var state = this._readableState;
	  if (typeof chunk === 'string' && !state.objectMode) {
	    encoding = encoding || state.defaultEncoding;
	    if (encoding !== state.encoding) {
	      chunk = new Buffer(chunk, encoding);
	      encoding = '';
	    }
	  }
	  return readableAddChunk(this, state, chunk, encoding, false);
	};
	Readable.prototype.unshift = function(chunk) {
	  var state = this._readableState;
	  return readableAddChunk(this, state, chunk, '', true);
	};
	function readableAddChunk(stream, state, chunk, encoding, addToFront) {
	  var er = chunkInvalid(state, chunk);
	  if (er) {
	    stream.emit('error', er);
	  } else if (chunk === null || chunk === undefined) {
	    state.reading = false;
	    if (!state.ended)
	      onEofChunk(stream, state);
	  } else if (state.objectMode || chunk && chunk.length > 0) {
	    if (state.ended && !addToFront) {
	      var e = new Error('stream.push() after EOF');
	      stream.emit('error', e);
	    } else if (state.endEmitted && addToFront) {
	      var e = new Error('stream.unshift() after end event');
	      stream.emit('error', e);
	    } else {
	      if (state.decoder && !addToFront && !encoding)
	        chunk = state.decoder.write(chunk);
	      state.length += state.objectMode ? 1 : chunk.length;
	      if (addToFront) {
	        state.buffer.unshift(chunk);
	      } else {
	        state.reading = false;
	        state.buffer.push(chunk);
	      }
	      if (state.needReadable)
	        emitReadable(stream);
	      maybeReadMore(stream, state);
	    }
	  } else if (!addToFront) {
	    state.reading = false;
	  }
	  return needMoreData(state);
	}
	function needMoreData(state) {
	  return !state.ended &&
	         (state.needReadable ||
	          state.length < state.highWaterMark ||
	          state.length === 0);
	}
	Readable.prototype.setEncoding = function(enc) {
	  if (!StringDecoder)
	    StringDecoder = require('string_decoder/').StringDecoder;
	  this._readableState.decoder = new StringDecoder(enc);
	  this._readableState.encoding = enc;
	};
	var MAX_HWM = 0x800000;
	function roundUpToNextPowerOf2(n) {
	  if (n >= MAX_HWM) {
	    n = MAX_HWM;
	  } else {
	    n--;
	    for (var p = 1; p < 32; p <<= 1) n |= n >> p;
	    n++;
	  }
	  return n;
	}
	function howMuchToRead(n, state) {
	  if (state.length === 0 && state.ended)
	    return 0;
	  if (state.objectMode)
	    return n === 0 ? 0 : 1;
	  if (n === null || isNaN(n)) {
	    if (state.flowing && state.buffer.length)
	      return state.buffer[0].length;
	    else
	      return state.length;
	  }
	  if (n <= 0)
	    return 0;
	  if (n > state.highWaterMark)
	    state.highWaterMark = roundUpToNextPowerOf2(n);
	  if (n > state.length) {
	    if (!state.ended) {
	      state.needReadable = true;
	      return 0;
	    } else
	      return state.length;
	  }
	  return n;
	}
	Readable.prototype.read = function(n) {
	  var state = this._readableState;
	  state.calledRead = true;
	  var nOrig = n;
	  var ret;
	  if (typeof n !== 'number' || n > 0)
	    state.emittedReadable = false;
	  if (n === 0 &&
	      state.needReadable &&
	      (state.length >= state.highWaterMark || state.ended)) {
	    emitReadable(this);
	    return null;
	  }
	  n = howMuchToRead(n, state);
	  if (n === 0 && state.ended) {
	    ret = null;
	    if (state.length > 0 && state.decoder) {
	      ret = fromList(n, state);
	      state.length -= ret.length;
	    }
	    if (state.length === 0)
	      endReadable(this);
	    return ret;
	  }
	  var doRead = state.needReadable;
	  if (state.length - n <= state.highWaterMark)
	    doRead = true;
	  if (state.ended || state.reading)
	    doRead = false;
	  if (doRead) {
	    state.reading = true;
	    state.sync = true;
	    if (state.length === 0)
	      state.needReadable = true;
	    this._read(state.highWaterMark);
	    state.sync = false;
	  }
	  if (doRead && !state.reading)
	    n = howMuchToRead(nOrig, state);
	  if (n > 0)
	    ret = fromList(n, state);
	  else
	    ret = null;
	  if (ret === null) {
	    state.needReadable = true;
	    n = 0;
	  }
	  state.length -= n;
	  if (state.length === 0 && !state.ended)
	    state.needReadable = true;
	  if (state.ended && !state.endEmitted && state.length === 0)
	    endReadable(this);
	  return ret;
	};
	function chunkInvalid(state, chunk) {
	  var er = null;
	  if (!Buffer.isBuffer(chunk) &&
	      'string' !== typeof chunk &&
	      chunk !== null &&
	      chunk !== undefined &&
	      !state.objectMode) {
	    er = new TypeError('Invalid non-string/buffer chunk');
	  }
	  return er;
	}
	function onEofChunk(stream, state) {
	  if (state.decoder && !state.ended) {
	    var chunk = state.decoder.end();
	    if (chunk && chunk.length) {
	      state.buffer.push(chunk);
	      state.length += state.objectMode ? 1 : chunk.length;
	    }
	  }
	  state.ended = true;
	  if (state.length > 0)
	    emitReadable(stream);
	  else
	    endReadable(stream);
	}
	function emitReadable(stream) {
	  var state = stream._readableState;
	  state.needReadable = false;
	  if (state.emittedReadable)
	    return;
	  state.emittedReadable = true;
	  if (state.sync)
	    process.nextTick(function() {
	      emitReadable_(stream);
	    });
	  else
	    emitReadable_(stream);
	}
	function emitReadable_(stream) {
	  stream.emit('readable');
	}
	function maybeReadMore(stream, state) {
	  if (!state.readingMore) {
	    state.readingMore = true;
	    process.nextTick(function() {
	      maybeReadMore_(stream, state);
	    });
	  }
	}
	function maybeReadMore_(stream, state) {
	  var len = state.length;
	  while (!state.reading && !state.flowing && !state.ended &&
	         state.length < state.highWaterMark) {
	    stream.read(0);
	    if (len === state.length)
	      break;
	    else
	      len = state.length;
	  }
	  state.readingMore = false;
	}
	Readable.prototype._read = function(n) {
	  this.emit('error', new Error('not implemented'));
	};
	Readable.prototype.pipe = function(dest, pipeOpts) {
	  var src = this;
	  var state = this._readableState;
	  switch (state.pipesCount) {
	    case 0:
	      state.pipes = dest;
	      break;
	    case 1:
	      state.pipes = [state.pipes, dest];
	      break;
	    default:
	      state.pipes.push(dest);
	      break;
	  }
	  state.pipesCount += 1;
	  var doEnd = (!pipeOpts || pipeOpts.end !== false) &&
	              dest !== process.stdout &&
	              dest !== process.stderr;
	  var endFn = doEnd ? onend : cleanup;
	  if (state.endEmitted)
	    process.nextTick(endFn);
	  else
	    src.once('end', endFn);
	  dest.on('unpipe', onunpipe);
	  function onunpipe(readable) {
	    if (readable !== src) return;
	    cleanup();
	  }
	  function onend() {
	    dest.end();
	  }
	  var ondrain = pipeOnDrain(src);
	  dest.on('drain', ondrain);
	  function cleanup() {
	    dest.removeListener('close', onclose);
	    dest.removeListener('finish', onfinish);
	    dest.removeListener('drain', ondrain);
	    dest.removeListener('error', onerror);
	    dest.removeListener('unpipe', onunpipe);
	    src.removeListener('end', onend);
	    src.removeListener('end', cleanup);
	    if (!dest._writableState || dest._writableState.needDrain)
	      ondrain();
	  }
	  function onerror(er) {
	    unpipe();
	    dest.removeListener('error', onerror);
	    if (EE.listenerCount(dest, 'error') === 0)
	      dest.emit('error', er);
	  }
	  if (!dest._events || !dest._events.error)
	    dest.on('error', onerror);
	  else if (isArray(dest._events.error))
	    dest._events.error.unshift(onerror);
	  else
	    dest._events.error = [onerror, dest._events.error];
	  function onclose() {
	    dest.removeListener('finish', onfinish);
	    unpipe();
	  }
	  dest.once('close', onclose);
	  function onfinish() {
	    dest.removeListener('close', onclose);
	    unpipe();
	  }
	  dest.once('finish', onfinish);
	  function unpipe() {
	    src.unpipe(dest);
	  }
	  dest.emit('pipe', src);
	  if (!state.flowing) {
	    this.on('readable', pipeOnReadable);
	    state.flowing = true;
	    process.nextTick(function() {
	      flow(src);
	    });
	  }
	  return dest;
	};
	function pipeOnDrain(src) {
	  return function() {
	    var state = src._readableState;
	    state.awaitDrain--;
	    if (state.awaitDrain === 0)
	      flow(src);
	  };
	}
	function flow(src) {
	  var state = src._readableState;
	  var chunk;
	  state.awaitDrain = 0;
	  function write(dest, i, list) {
	    var written = dest.write(chunk);
	    if (false === written) {
	      state.awaitDrain++;
	    }
	  }
	  while (state.pipesCount && null !== (chunk = src.read())) {
	    if (state.pipesCount === 1)
	      write(state.pipes);
	    else
	      forEach(state.pipes, write);
	    src.emit('data', chunk);
	    if (state.awaitDrain > 0)
	      return;
	  }
	  if (state.pipesCount === 0) {
	    state.flowing = false;
	    if (EE.listenerCount(src, 'data') > 0)
	      emitDataEvents(src);
	    return;
	  }
	  state.ranOut = true;
	}
	function pipeOnReadable() {
	  if (this._readableState.ranOut) {
	    this._readableState.ranOut = false;
	    flow(this);
	  }
	}
	Readable.prototype.unpipe = function(dest) {
	  var state = this._readableState;
	  if (state.pipesCount === 0)
	    return this;
	  if (state.pipesCount === 1) {
	    if (dest && dest !== state.pipes)
	      return this;
	    if (!dest)
	      dest = state.pipes;
	    state.pipes = null;
	    state.pipesCount = 0;
	    this.removeListener('readable', pipeOnReadable);
	    state.flowing = false;
	    if (dest)
	      dest.emit('unpipe', this);
	    return this;
	  }
	  if (!dest) {
	    var dests = state.pipes;
	    var len = state.pipesCount;
	    state.pipes = null;
	    state.pipesCount = 0;
	    this.removeListener('readable', pipeOnReadable);
	    state.flowing = false;
	    for (var i = 0; i < len; i++)
	      dests[i].emit('unpipe', this);
	    return this;
	  }
	  var i = indexOf(state.pipes, dest);
	  if (i === -1)
	    return this;
	  state.pipes.splice(i, 1);
	  state.pipesCount -= 1;
	  if (state.pipesCount === 1)
	    state.pipes = state.pipes[0];
	  dest.emit('unpipe', this);
	  return this;
	};
	Readable.prototype.on = function(ev, fn) {
	  var res = Stream.prototype.on.call(this, ev, fn);
	  if (ev === 'data' && !this._readableState.flowing)
	    emitDataEvents(this);
	  if (ev === 'readable' && this.readable) {
	    var state = this._readableState;
	    if (!state.readableListening) {
	      state.readableListening = true;
	      state.emittedReadable = false;
	      state.needReadable = true;
	      if (!state.reading) {
	        this.read(0);
	      } else if (state.length) {
	        emitReadable(this);
	      }
	    }
	  }
	  return res;
	};
	Readable.prototype.addListener = Readable.prototype.on;
	Readable.prototype.resume = function() {
	  emitDataEvents(this);
	  this.read(0);
	  this.emit('resume');
	};
	Readable.prototype.pause = function() {
	  emitDataEvents(this, true);
	  this.emit('pause');
	};
	function emitDataEvents(stream, startPaused) {
	  var state = stream._readableState;
	  if (state.flowing) {
	    throw new Error('Cannot switch to old mode now.');
	  }
	  var paused = startPaused || false;
	  var readable = false;
	  stream.readable = true;
	  stream.pipe = Stream.prototype.pipe;
	  stream.on = stream.addListener = Stream.prototype.on;
	  stream.on('readable', function() {
	    readable = true;
	    var c;
	    while (!paused && (null !== (c = stream.read())))
	      stream.emit('data', c);
	    if (c === null) {
	      readable = false;
	      stream._readableState.needReadable = true;
	    }
	  });
	  stream.pause = function() {
	    paused = true;
	    this.emit('pause');
	  };
	  stream.resume = function() {
	    paused = false;
	    if (readable)
	      process.nextTick(function() {
	        stream.emit('readable');
	      });
	    else
	      this.read(0);
	    this.emit('resume');
	  };
	  stream.emit('readable');
	}
	Readable.prototype.wrap = function(stream) {
	  var state = this._readableState;
	  var paused = false;
	  var self = this;
	  stream.on('end', function() {
	    if (state.decoder && !state.ended) {
	      var chunk = state.decoder.end();
	      if (chunk && chunk.length)
	        self.push(chunk);
	    }
	    self.push(null);
	  });
	  stream.on('data', function(chunk) {
	    if (state.decoder)
	      chunk = state.decoder.write(chunk);
	    if (state.objectMode && (chunk === null || chunk === undefined))
	      return;
	    else if (!state.objectMode && (!chunk || !chunk.length))
	      return;
	    var ret = self.push(chunk);
	    if (!ret) {
	      paused = true;
	      stream.pause();
	    }
	  });
	  for (var i in stream) {
	    if (typeof stream[i] === 'function' &&
	        typeof this[i] === 'undefined') {
	      this[i] = function(method) { return function() {
	        return stream[method].apply(stream, arguments);
	      }}(i);
	    }
	  }
	  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
	  forEach(events, function(ev) {
	    stream.on(ev, self.emit.bind(self, ev));
	  });
	  self._read = function(n) {
	    if (paused) {
	      paused = false;
	      stream.resume();
	    }
	  };
	  return self;
	};
	Readable._fromList = fromList;
	function fromList(n, state) {
	  var list = state.buffer;
	  var length = state.length;
	  var stringMode = !!state.decoder;
	  var objectMode = !!state.objectMode;
	  var ret;
	  if (list.length === 0)
	    return null;
	  if (length === 0)
	    ret = null;
	  else if (objectMode)
	    ret = list.shift();
	  else if (!n || n >= length) {
	    if (stringMode)
	      ret = list.join('');
	    else
	      ret = Buffer.concat(list, length);
	    list.length = 0;
	  } else {
	    if (n < list[0].length) {
	      var buf = list[0];
	      ret = buf.slice(0, n);
	      list[0] = buf.slice(n);
	    } else if (n === list[0].length) {
	      ret = list.shift();
	    } else {
	      if (stringMode)
	        ret = '';
	      else
	        ret = new Buffer(n);
	      var c = 0;
	      for (var i = 0, l = list.length; i < l && c < n; i++) {
	        var buf = list[0];
	        var cpy = Math.min(n - c, buf.length);
	        if (stringMode)
	          ret += buf.slice(0, cpy);
	        else
	          buf.copy(ret, c, 0, cpy);
	        if (cpy < buf.length)
	          list[0] = buf.slice(cpy);
	        else
	          list.shift();
	        c += cpy;
	      }
	    }
	  }
	  return ret;
	}
	function endReadable(stream) {
	  var state = stream._readableState;
	  if (state.length > 0)
	    throw new Error('endReadable called on non-empty stream');
	  if (!state.endEmitted && state.calledRead) {
	    state.ended = true;
	    process.nextTick(function() {
	      if (!state.endEmitted && state.length === 0) {
	        state.endEmitted = true;
	        stream.readable = false;
	        stream.emit('end');
	      }
	    });
	  }
	}
	function forEach (xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}
	function indexOf (xs, x) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    if (xs[i] === x) return i;
	  }
	  return -1;
	}
	}).call(this,require('_process'));
	},{"_process":10,"buffer":3,"core-util-is":17,"events":7,"inherits":8,"isarray":9,"stream":22,"string_decoder/":23}],15:[function(require,module,exports){
	module.exports = Transform;
	var Duplex = require('./_stream_duplex');
	var util = require('core-util-is');
	util.inherits = require('inherits');
	util.inherits(Transform, Duplex);
	function TransformState(options, stream) {
	  this.afterTransform = function(er, data) {
	    return afterTransform(stream, er, data);
	  };
	  this.needTransform = false;
	  this.transforming = false;
	  this.writecb = null;
	  this.writechunk = null;
	}
	function afterTransform(stream, er, data) {
	  var ts = stream._transformState;
	  ts.transforming = false;
	  var cb = ts.writecb;
	  if (!cb)
	    return stream.emit('error', new Error('no writecb in Transform class'));
	  ts.writechunk = null;
	  ts.writecb = null;
	  if (data !== null && data !== undefined)
	    stream.push(data);
	  if (cb)
	    cb(er);
	  var rs = stream._readableState;
	  rs.reading = false;
	  if (rs.needReadable || rs.length < rs.highWaterMark) {
	    stream._read(rs.highWaterMark);
	  }
	}
	function Transform(options) {
	  if (!(this instanceof Transform))
	    return new Transform(options);
	  Duplex.call(this, options);
	  this._transformState = new TransformState(options, this);
	  var stream = this;
	  this._readableState.needReadable = true;
	  this._readableState.sync = false;
	  this.once('finish', function() {
	    if ('function' === typeof this._flush)
	      this._flush(function(er) {
	        done(stream, er);
	      });
	    else
	      done(stream);
	  });
	}
	Transform.prototype.push = function(chunk, encoding) {
	  this._transformState.needTransform = false;
	  return Duplex.prototype.push.call(this, chunk, encoding);
	};
	Transform.prototype._transform = function(chunk, encoding, cb) {
	  throw new Error('not implemented');
	};
	Transform.prototype._write = function(chunk, encoding, cb) {
	  var ts = this._transformState;
	  ts.writecb = cb;
	  ts.writechunk = chunk;
	  ts.writeencoding = encoding;
	  if (!ts.transforming) {
	    var rs = this._readableState;
	    if (ts.needTransform ||
	        rs.needReadable ||
	        rs.length < rs.highWaterMark)
	      this._read(rs.highWaterMark);
	  }
	};
	Transform.prototype._read = function(n) {
	  var ts = this._transformState;
	  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
	    ts.transforming = true;
	    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
	  } else {
	    ts.needTransform = true;
	  }
	};
	function done(stream, er) {
	  if (er)
	    return stream.emit('error', er);
	  var ws = stream._writableState;
	  stream._readableState;
	  var ts = stream._transformState;
	  if (ws.length)
	    throw new Error('calling transform done when ws.length != 0');
	  if (ts.transforming)
	    throw new Error('calling transform done when still transforming');
	  return stream.push(null);
	}
	},{"./_stream_duplex":12,"core-util-is":17,"inherits":8}],16:[function(require,module,exports){
	(function (process){
	module.exports = Writable;
	var Buffer = require('buffer').Buffer;
	Writable.WritableState = WritableState;
	var util = require('core-util-is');
	util.inherits = require('inherits');
	var Stream = require('stream');
	util.inherits(Writable, Stream);
	function WriteReq(chunk, encoding, cb) {
	  this.chunk = chunk;
	  this.encoding = encoding;
	  this.callback = cb;
	}
	function WritableState(options, stream) {
	  options = options || {};
	  var hwm = options.highWaterMark;
	  this.highWaterMark = (hwm || hwm === 0) ? hwm : 16 * 1024;
	  this.objectMode = !!options.objectMode;
	  this.highWaterMark = ~~this.highWaterMark;
	  this.needDrain = false;
	  this.ending = false;
	  this.ended = false;
	  this.finished = false;
	  var noDecode = options.decodeStrings === false;
	  this.decodeStrings = !noDecode;
	  this.defaultEncoding = options.defaultEncoding || 'utf8';
	  this.length = 0;
	  this.writing = false;
	  this.sync = true;
	  this.bufferProcessing = false;
	  this.onwrite = function(er) {
	    onwrite(stream, er);
	  };
	  this.writecb = null;
	  this.writelen = 0;
	  this.buffer = [];
	  this.errorEmitted = false;
	}
	function Writable(options) {
	  var Duplex = require('./_stream_duplex');
	  if (!(this instanceof Writable) && !(this instanceof Duplex))
	    return new Writable(options);
	  this._writableState = new WritableState(options, this);
	  this.writable = true;
	  Stream.call(this);
	}
	Writable.prototype.pipe = function() {
	  this.emit('error', new Error('Cannot pipe. Not readable.'));
	};
	function writeAfterEnd(stream, state, cb) {
	  var er = new Error('write after end');
	  stream.emit('error', er);
	  process.nextTick(function() {
	    cb(er);
	  });
	}
	function validChunk(stream, state, chunk, cb) {
	  var valid = true;
	  if (!Buffer.isBuffer(chunk) &&
	      'string' !== typeof chunk &&
	      chunk !== null &&
	      chunk !== undefined &&
	      !state.objectMode) {
	    var er = new TypeError('Invalid non-string/buffer chunk');
	    stream.emit('error', er);
	    process.nextTick(function() {
	      cb(er);
	    });
	    valid = false;
	  }
	  return valid;
	}
	Writable.prototype.write = function(chunk, encoding, cb) {
	  var state = this._writableState;
	  var ret = false;
	  if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }
	  if (Buffer.isBuffer(chunk))
	    encoding = 'buffer';
	  else if (!encoding)
	    encoding = state.defaultEncoding;
	  if (typeof cb !== 'function')
	    cb = function() {};
	  if (state.ended)
	    writeAfterEnd(this, state, cb);
	  else if (validChunk(this, state, chunk, cb))
	    ret = writeOrBuffer(this, state, chunk, encoding, cb);
	  return ret;
	};
	function decodeChunk(state, chunk, encoding) {
	  if (!state.objectMode &&
	      state.decodeStrings !== false &&
	      typeof chunk === 'string') {
	    chunk = new Buffer(chunk, encoding);
	  }
	  return chunk;
	}
	function writeOrBuffer(stream, state, chunk, encoding, cb) {
	  chunk = decodeChunk(state, chunk, encoding);
	  if (Buffer.isBuffer(chunk))
	    encoding = 'buffer';
	  var len = state.objectMode ? 1 : chunk.length;
	  state.length += len;
	  var ret = state.length < state.highWaterMark;
	  if (!ret)
	    state.needDrain = true;
	  if (state.writing)
	    state.buffer.push(new WriteReq(chunk, encoding, cb));
	  else
	    doWrite(stream, state, len, chunk, encoding, cb);
	  return ret;
	}
	function doWrite(stream, state, len, chunk, encoding, cb) {
	  state.writelen = len;
	  state.writecb = cb;
	  state.writing = true;
	  state.sync = true;
	  stream._write(chunk, encoding, state.onwrite);
	  state.sync = false;
	}
	function onwriteError(stream, state, sync, er, cb) {
	  if (sync)
	    process.nextTick(function() {
	      cb(er);
	    });
	  else
	    cb(er);
	  stream._writableState.errorEmitted = true;
	  stream.emit('error', er);
	}
	function onwriteStateUpdate(state) {
	  state.writing = false;
	  state.writecb = null;
	  state.length -= state.writelen;
	  state.writelen = 0;
	}
	function onwrite(stream, er) {
	  var state = stream._writableState;
	  var sync = state.sync;
	  var cb = state.writecb;
	  onwriteStateUpdate(state);
	  if (er)
	    onwriteError(stream, state, sync, er, cb);
	  else {
	    var finished = needFinish(stream, state);
	    if (!finished && !state.bufferProcessing && state.buffer.length)
	      clearBuffer(stream, state);
	    if (sync) {
	      process.nextTick(function() {
	        afterWrite(stream, state, finished, cb);
	      });
	    } else {
	      afterWrite(stream, state, finished, cb);
	    }
	  }
	}
	function afterWrite(stream, state, finished, cb) {
	  if (!finished)
	    onwriteDrain(stream, state);
	  cb();
	  if (finished)
	    finishMaybe(stream, state);
	}
	function onwriteDrain(stream, state) {
	  if (state.length === 0 && state.needDrain) {
	    state.needDrain = false;
	    stream.emit('drain');
	  }
	}
	function clearBuffer(stream, state) {
	  state.bufferProcessing = true;
	  for (var c = 0; c < state.buffer.length; c++) {
	    var entry = state.buffer[c];
	    var chunk = entry.chunk;
	    var encoding = entry.encoding;
	    var cb = entry.callback;
	    var len = state.objectMode ? 1 : chunk.length;
	    doWrite(stream, state, len, chunk, encoding, cb);
	    if (state.writing) {
	      c++;
	      break;
	    }
	  }
	  state.bufferProcessing = false;
	  if (c < state.buffer.length)
	    state.buffer = state.buffer.slice(c);
	  else
	    state.buffer.length = 0;
	}
	Writable.prototype._write = function(chunk, encoding, cb) {
	  cb(new Error('not implemented'));
	};
	Writable.prototype.end = function(chunk, encoding, cb) {
	  var state = this._writableState;
	  if (typeof chunk === 'function') {
	    cb = chunk;
	    chunk = null;
	    encoding = null;
	  } else if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }
	  if (typeof chunk !== 'undefined' && chunk !== null)
	    this.write(chunk, encoding);
	  if (!state.ending && !state.finished)
	    endWritable(this, state, cb);
	};
	function needFinish(stream, state) {
	  return (state.ending &&
	          state.length === 0 &&
	          !state.finished &&
	          !state.writing);
	}
	function finishMaybe(stream, state) {
	  var need = needFinish(stream, state);
	  if (need) {
	    state.finished = true;
	    stream.emit('finish');
	  }
	  return need;
	}
	function endWritable(stream, state, cb) {
	  state.ending = true;
	  finishMaybe(stream, state);
	  if (cb) {
	    if (state.finished)
	      process.nextTick(cb);
	    else
	      stream.once('finish', cb);
	  }
	  state.ended = true;
	}
	}).call(this,require('_process'));
	},{"./_stream_duplex":12,"_process":10,"buffer":3,"core-util-is":17,"inherits":8,"stream":22}],17:[function(require,module,exports){
	(function (Buffer){
	function isArray(ar) {
	  return Array.isArray(ar);
	}
	exports.isArray = isArray;
	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;
	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;
	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;
	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;
	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;
	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;
	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;
	function isRegExp(re) {
	  return isObject(re) && objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;
	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;
	function isDate(d) {
	  return isObject(d) && objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;
	function isError(e) {
	  return isObject(e) &&
	      (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;
	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;
	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;
	function isBuffer(arg) {
	  return Buffer.isBuffer(arg);
	}
	exports.isBuffer = isBuffer;
	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}
	}).call(this,require("buffer").Buffer);
	},{"buffer":3}],18:[function(require,module,exports){
	module.exports = require("./lib/_stream_passthrough.js");
	},{"./lib/_stream_passthrough.js":13}],19:[function(require,module,exports){
	var Stream = require('stream');
	exports = module.exports = require('./lib/_stream_readable.js');
	exports.Stream = Stream;
	exports.Readable = exports;
	exports.Writable = require('./lib/_stream_writable.js');
	exports.Duplex = require('./lib/_stream_duplex.js');
	exports.Transform = require('./lib/_stream_transform.js');
	exports.PassThrough = require('./lib/_stream_passthrough.js');
	},{"./lib/_stream_duplex.js":12,"./lib/_stream_passthrough.js":13,"./lib/_stream_readable.js":14,"./lib/_stream_transform.js":15,"./lib/_stream_writable.js":16,"stream":22}],20:[function(require,module,exports){
	module.exports = require("./lib/_stream_transform.js");
	},{"./lib/_stream_transform.js":15}],21:[function(require,module,exports){
	module.exports = require("./lib/_stream_writable.js");
	},{"./lib/_stream_writable.js":16}],22:[function(require,module,exports){
	module.exports = Stream;
	var EE = require('events').EventEmitter;
	var inherits = require('inherits');
	inherits(Stream, EE);
	Stream.Readable = require('readable-stream/readable.js');
	Stream.Writable = require('readable-stream/writable.js');
	Stream.Duplex = require('readable-stream/duplex.js');
	Stream.Transform = require('readable-stream/transform.js');
	Stream.PassThrough = require('readable-stream/passthrough.js');
	Stream.Stream = Stream;
	function Stream() {
	  EE.call(this);
	}
	Stream.prototype.pipe = function(dest, options) {
	  var source = this;
	  function ondata(chunk) {
	    if (dest.writable) {
	      if (false === dest.write(chunk) && source.pause) {
	        source.pause();
	      }
	    }
	  }
	  source.on('data', ondata);
	  function ondrain() {
	    if (source.readable && source.resume) {
	      source.resume();
	    }
	  }
	  dest.on('drain', ondrain);
	  if (!dest._isStdio && (!options || options.end !== false)) {
	    source.on('end', onend);
	    source.on('close', onclose);
	  }
	  var didOnEnd = false;
	  function onend() {
	    if (didOnEnd) return;
	    didOnEnd = true;
	    dest.end();
	  }
	  function onclose() {
	    if (didOnEnd) return;
	    didOnEnd = true;
	    if (typeof dest.destroy === 'function') dest.destroy();
	  }
	  function onerror(er) {
	    cleanup();
	    if (EE.listenerCount(this, 'error') === 0) {
	      throw er;
	    }
	  }
	  source.on('error', onerror);
	  dest.on('error', onerror);
	  function cleanup() {
	    source.removeListener('data', ondata);
	    dest.removeListener('drain', ondrain);
	    source.removeListener('end', onend);
	    source.removeListener('close', onclose);
	    source.removeListener('error', onerror);
	    dest.removeListener('error', onerror);
	    source.removeListener('end', cleanup);
	    source.removeListener('close', cleanup);
	    dest.removeListener('close', cleanup);
	  }
	  source.on('end', cleanup);
	  source.on('close', cleanup);
	  dest.on('close', cleanup);
	  dest.emit('pipe', source);
	  return dest;
	};
	},{"events":7,"inherits":8,"readable-stream/duplex.js":11,"readable-stream/passthrough.js":18,"readable-stream/readable.js":19,"readable-stream/transform.js":20,"readable-stream/writable.js":21}],23:[function(require,module,exports){
	var Buffer = require('buffer').Buffer;
	var isBufferEncoding = Buffer.isEncoding
	  || function(encoding) {
	       switch (encoding && encoding.toLowerCase()) {
	         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
	         default: return false;
	       }
	     };
	function assertEncoding(encoding) {
	  if (encoding && !isBufferEncoding(encoding)) {
	    throw new Error('Unknown encoding: ' + encoding);
	  }
	}
	var StringDecoder = exports.StringDecoder = function(encoding) {
	  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
	  assertEncoding(encoding);
	  switch (this.encoding) {
	    case 'utf8':
	      this.surrogateSize = 3;
	      break;
	    case 'ucs2':
	    case 'utf16le':
	      this.surrogateSize = 2;
	      this.detectIncompleteChar = utf16DetectIncompleteChar;
	      break;
	    case 'base64':
	      this.surrogateSize = 3;
	      this.detectIncompleteChar = base64DetectIncompleteChar;
	      break;
	    default:
	      this.write = passThroughWrite;
	      return;
	  }
	  this.charBuffer = new Buffer(6);
	  this.charReceived = 0;
	  this.charLength = 0;
	};
	StringDecoder.prototype.write = function(buffer) {
	  var charStr = '';
	  while (this.charLength) {
	    var available = (buffer.length >= this.charLength - this.charReceived) ?
	        this.charLength - this.charReceived :
	        buffer.length;
	    buffer.copy(this.charBuffer, this.charReceived, 0, available);
	    this.charReceived += available;
	    if (this.charReceived < this.charLength) {
	      return '';
	    }
	    buffer = buffer.slice(available, buffer.length);
	    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);
	    var charCode = charStr.charCodeAt(charStr.length - 1);
	    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	      this.charLength += this.surrogateSize;
	      charStr = '';
	      continue;
	    }
	    this.charReceived = this.charLength = 0;
	    if (buffer.length === 0) {
	      return charStr;
	    }
	    break;
	  }
	  this.detectIncompleteChar(buffer);
	  var end = buffer.length;
	  if (this.charLength) {
	    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
	    end -= this.charReceived;
	  }
	  charStr += buffer.toString(this.encoding, 0, end);
	  var end = charStr.length - 1;
	  var charCode = charStr.charCodeAt(end);
	  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	    var size = this.surrogateSize;
	    this.charLength += size;
	    this.charReceived += size;
	    this.charBuffer.copy(this.charBuffer, size, 0, size);
	    buffer.copy(this.charBuffer, 0, 0, size);
	    return charStr.substring(0, end);
	  }
	  return charStr;
	};
	StringDecoder.prototype.detectIncompleteChar = function(buffer) {
	  var i = (buffer.length >= 3) ? 3 : buffer.length;
	  for (; i > 0; i--) {
	    var c = buffer[buffer.length - i];
	    if (i == 1 && c >> 5 == 0x06) {
	      this.charLength = 2;
	      break;
	    }
	    if (i <= 2 && c >> 4 == 0x0E) {
	      this.charLength = 3;
	      break;
	    }
	    if (i <= 3 && c >> 3 == 0x1E) {
	      this.charLength = 4;
	      break;
	    }
	  }
	  this.charReceived = i;
	};
	StringDecoder.prototype.end = function(buffer) {
	  var res = '';
	  if (buffer && buffer.length)
	    res = this.write(buffer);
	  if (this.charReceived) {
	    var cr = this.charReceived;
	    var buf = this.charBuffer;
	    var enc = this.encoding;
	    res += buf.slice(0, cr).toString(enc);
	  }
	  return res;
	};
	function passThroughWrite(buffer) {
	  return buffer.toString(this.encoding);
	}
	function utf16DetectIncompleteChar(buffer) {
	  this.charReceived = buffer.length % 2;
	  this.charLength = this.charReceived ? 2 : 0;
	}
	function base64DetectIncompleteChar(buffer) {
	  this.charReceived = buffer.length % 3;
	  this.charLength = this.charReceived ? 3 : 0;
	}
	},{"buffer":3}],24:[function(require,module,exports){
	module.exports = function isBuffer(arg) {
	  return arg && typeof arg === 'object'
	    && typeof arg.copy === 'function'
	    && typeof arg.fill === 'function'
	    && typeof arg.readUInt8 === 'function';
	};
	},{}],25:[function(require,module,exports){
	(function (process,global){
	var formatRegExp = /%[sdj%]/g;
	exports.format = function(f) {
	  if (!isString(f)) {
	    var objects = [];
	    for (var i = 0; i < arguments.length; i++) {
	      objects.push(inspect(arguments[i]));
	    }
	    return objects.join(' ');
	  }
	  var i = 1;
	  var args = arguments;
	  var len = args.length;
	  var str = String(f).replace(formatRegExp, function(x) {
	    if (x === '%%') return '%';
	    if (i >= len) return x;
	    switch (x) {
	      case '%s': return String(args[i++]);
	      case '%d': return Number(args[i++]);
	      case '%j':
	        try {
	          return JSON.stringify(args[i++]);
	        } catch (_) {
	          return '[Circular]';
	        }
	      default:
	        return x;
	    }
	  });
	  for (var x = args[i]; i < len; x = args[++i]) {
	    if (isNull(x) || !isObject(x)) {
	      str += ' ' + x;
	    } else {
	      str += ' ' + inspect(x);
	    }
	  }
	  return str;
	};
	exports.deprecate = function(fn, msg) {
	  if (isUndefined(global.process)) {
	    return function() {
	      return exports.deprecate(fn, msg).apply(this, arguments);
	    };
	  }
	  if (process.noDeprecation === true) {
	    return fn;
	  }
	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (process.throwDeprecation) {
	        throw new Error(msg);
	      } else if (process.traceDeprecation) {
	        console.trace(msg);
	      } else {
	        console.error(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }
	  return deprecated;
	};
	var debugs = {};
	var debugEnviron;
	exports.debuglog = function(set) {
	  if (isUndefined(debugEnviron))
	    debugEnviron = process.env.NODE_DEBUG || '';
	  set = set.toUpperCase();
	  if (!debugs[set]) {
	    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
	      var pid = process.pid;
	      debugs[set] = function() {
	        var msg = exports.format.apply(exports, arguments);
	        console.error('%s %d: %s', set, pid, msg);
	      };
	    } else {
	      debugs[set] = function() {};
	    }
	  }
	  return debugs[set];
	};
	function inspect(obj, opts) {
	  var ctx = {
	    seen: [],
	    stylize: stylizeNoColor
	  };
	  if (arguments.length >= 3) ctx.depth = arguments[2];
	  if (arguments.length >= 4) ctx.colors = arguments[3];
	  if (isBoolean(opts)) {
	    ctx.showHidden = opts;
	  } else if (opts) {
	    exports._extend(ctx, opts);
	  }
	  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
	  if (isUndefined(ctx.depth)) ctx.depth = 2;
	  if (isUndefined(ctx.colors)) ctx.colors = false;
	  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
	  if (ctx.colors) ctx.stylize = stylizeWithColor;
	  return formatValue(ctx, obj, ctx.depth);
	}
	exports.inspect = inspect;
	inspect.colors = {
	  'bold' : [1, 22],
	  'italic' : [3, 23],
	  'underline' : [4, 24],
	  'inverse' : [7, 27],
	  'white' : [37, 39],
	  'grey' : [90, 39],
	  'black' : [30, 39],
	  'blue' : [34, 39],
	  'cyan' : [36, 39],
	  'green' : [32, 39],
	  'magenta' : [35, 39],
	  'red' : [31, 39],
	  'yellow' : [33, 39]
	};
	inspect.styles = {
	  'special': 'cyan',
	  'number': 'yellow',
	  'boolean': 'yellow',
	  'undefined': 'grey',
	  'null': 'bold',
	  'string': 'green',
	  'date': 'magenta',
	  'regexp': 'red'
	};
	function stylizeWithColor(str, styleType) {
	  var style = inspect.styles[styleType];
	  if (style) {
	    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
	           '\u001b[' + inspect.colors[style][1] + 'm';
	  } else {
	    return str;
	  }
	}
	function stylizeNoColor(str, styleType) {
	  return str;
	}
	function arrayToHash(array) {
	  var hash = {};
	  array.forEach(function(val, idx) {
	    hash[val] = true;
	  });
	  return hash;
	}
	function formatValue(ctx, value, recurseTimes) {
	  if (ctx.customInspect &&
	      value &&
	      isFunction(value.inspect) &&
	      value.inspect !== exports.inspect &&
	      !(value.constructor && value.constructor.prototype === value)) {
	    var ret = value.inspect(recurseTimes, ctx);
	    if (!isString(ret)) {
	      ret = formatValue(ctx, ret, recurseTimes);
	    }
	    return ret;
	  }
	  var primitive = formatPrimitive(ctx, value);
	  if (primitive) {
	    return primitive;
	  }
	  var keys = Object.keys(value);
	  var visibleKeys = arrayToHash(keys);
	  if (ctx.showHidden) {
	    keys = Object.getOwnPropertyNames(value);
	  }
	  if (isError(value)
	      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
	    return formatError(value);
	  }
	  if (keys.length === 0) {
	    if (isFunction(value)) {
	      var name = value.name ? ': ' + value.name : '';
	      return ctx.stylize('[Function' + name + ']', 'special');
	    }
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    }
	    if (isDate(value)) {
	      return ctx.stylize(Date.prototype.toString.call(value), 'date');
	    }
	    if (isError(value)) {
	      return formatError(value);
	    }
	  }
	  var base = '', array = false, braces = ['{', '}'];
	  if (isArray(value)) {
	    array = true;
	    braces = ['[', ']'];
	  }
	  if (isFunction(value)) {
	    var n = value.name ? ': ' + value.name : '';
	    base = ' [Function' + n + ']';
	  }
	  if (isRegExp(value)) {
	    base = ' ' + RegExp.prototype.toString.call(value);
	  }
	  if (isDate(value)) {
	    base = ' ' + Date.prototype.toUTCString.call(value);
	  }
	  if (isError(value)) {
	    base = ' ' + formatError(value);
	  }
	  if (keys.length === 0 && (!array || value.length == 0)) {
	    return braces[0] + base + braces[1];
	  }
	  if (recurseTimes < 0) {
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    } else {
	      return ctx.stylize('[Object]', 'special');
	    }
	  }
	  ctx.seen.push(value);
	  var output;
	  if (array) {
	    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
	  } else {
	    output = keys.map(function(key) {
	      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
	    });
	  }
	  ctx.seen.pop();
	  return reduceToSingleString(output, base, braces);
	}
	function formatPrimitive(ctx, value) {
	  if (isUndefined(value))
	    return ctx.stylize('undefined', 'undefined');
	  if (isString(value)) {
	    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
	                                             .replace(/'/g, "\\'")
	                                             .replace(/\\"/g, '"') + '\'';
	    return ctx.stylize(simple, 'string');
	  }
	  if (isNumber(value))
	    return ctx.stylize('' + value, 'number');
	  if (isBoolean(value))
	    return ctx.stylize('' + value, 'boolean');
	  if (isNull(value))
	    return ctx.stylize('null', 'null');
	}
	function formatError(value) {
	  return '[' + Error.prototype.toString.call(value) + ']';
	}
	function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
	  var output = [];
	  for (var i = 0, l = value.length; i < l; ++i) {
	    if (hasOwnProperty(value, String(i))) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          String(i), true));
	    } else {
	      output.push('');
	    }
	  }
	  keys.forEach(function(key) {
	    if (!key.match(/^\d+$/)) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          key, true));
	    }
	  });
	  return output;
	}
	function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
	  var name, str, desc;
	  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
	  if (desc.get) {
	    if (desc.set) {
	      str = ctx.stylize('[Getter/Setter]', 'special');
	    } else {
	      str = ctx.stylize('[Getter]', 'special');
	    }
	  } else {
	    if (desc.set) {
	      str = ctx.stylize('[Setter]', 'special');
	    }
	  }
	  if (!hasOwnProperty(visibleKeys, key)) {
	    name = '[' + key + ']';
	  }
	  if (!str) {
	    if (ctx.seen.indexOf(desc.value) < 0) {
	      if (isNull(recurseTimes)) {
	        str = formatValue(ctx, desc.value, null);
	      } else {
	        str = formatValue(ctx, desc.value, recurseTimes - 1);
	      }
	      if (str.indexOf('\n') > -1) {
	        if (array) {
	          str = str.split('\n').map(function(line) {
	            return '  ' + line;
	          }).join('\n').substr(2);
	        } else {
	          str = '\n' + str.split('\n').map(function(line) {
	            return '   ' + line;
	          }).join('\n');
	        }
	      }
	    } else {
	      str = ctx.stylize('[Circular]', 'special');
	    }
	  }
	  if (isUndefined(name)) {
	    if (array && key.match(/^\d+$/)) {
	      return str;
	    }
	    name = JSON.stringify('' + key);
	    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
	      name = name.substr(1, name.length - 2);
	      name = ctx.stylize(name, 'name');
	    } else {
	      name = name.replace(/'/g, "\\'")
	                 .replace(/\\"/g, '"')
	                 .replace(/(^"|"$)/g, "'");
	      name = ctx.stylize(name, 'string');
	    }
	  }
	  return name + ': ' + str;
	}
	function reduceToSingleString(output, base, braces) {
	  var length = output.reduce(function(prev, cur) {
	    if (cur.indexOf('\n') >= 0) ;
	    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
	  }, 0);
	  if (length > 60) {
	    return braces[0] +
	           (base === '' ? '' : base + '\n ') +
	           ' ' +
	           output.join(',\n  ') +
	           ' ' +
	           braces[1];
	  }
	  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
	}
	function isArray(ar) {
	  return Array.isArray(ar);
	}
	exports.isArray = isArray;
	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;
	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;
	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;
	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;
	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;
	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;
	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;
	function isRegExp(re) {
	  return isObject(re) && objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;
	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;
	function isDate(d) {
	  return isObject(d) && objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;
	function isError(e) {
	  return isObject(e) &&
	      (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;
	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;
	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;
	exports.isBuffer = require('./support/isBuffer');
	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}
	function pad(n) {
	  return n < 10 ? '0' + n.toString(10) : n.toString(10);
	}
	var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
	              'Oct', 'Nov', 'Dec'];
	function timestamp() {
	  var d = new Date();
	  var time = [pad(d.getHours()),
	              pad(d.getMinutes()),
	              pad(d.getSeconds())].join(':');
	  return [d.getDate(), months[d.getMonth()], time].join(' ');
	}
	exports.log = function() {
	  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
	};
	exports.inherits = require('inherits');
	exports._extend = function(origin, add) {
	  if (!add || !isObject(add)) return origin;
	  var keys = Object.keys(add);
	  var i = keys.length;
	  while (i--) {
	    origin[keys[i]] = add[keys[i]];
	  }
	  return origin;
	};
	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}
	}).call(this,require('_process'),typeof commonjsGlobal !== "undefined" ? commonjsGlobal : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
	},{"./support/isBuffer":24,"_process":10,"inherits":8}]},{},[2])(2)
	});
} (blobStream$1));
var blobStreamExports = blobStream$1.exports;
var blobStream = getDefaultExportFromCjs(blobStreamExports);

const STANDARD_FONTS = {
  'Courier.afm': "StartFontMetrics 4.1\r\nComment Copyright (c) 1989, 1990, 1991, 1992, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.\r\nComment Creation Date: Thu May  1 17:27:09 1997\r\nComment UniqueID 43050\r\nComment VMusage 39754 50779\r\nFontName Courier\r\nFullName Courier\r\nFamilyName Courier\r\nWeight Medium\r\nItalicAngle 0\r\nIsFixedPitch true\r\nCharacterSet ExtendedRoman\r\nFontBBox -23 -250 715 805 \r\nUnderlinePosition -100\r\nUnderlineThickness 50\r\nVersion 003.000\r\nNotice Copyright (c) 1989, 1990, 1991, 1992, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.\r\nEncodingScheme AdobeStandardEncoding\r\nCapHeight 562\r\nXHeight 426\r\nAscender 629\r\nDescender -157\r\nStdHW 51\r\nStdVW 51\r\nStartCharMetrics 315\r\nC 32 ; WX 600 ; N space ; B 0 0 0 0 ;\r\nC 33 ; WX 600 ; N exclam ; B 236 -15 364 572 ;\r\nC 34 ; WX 600 ; N quotedbl ; B 187 328 413 562 ;\r\nC 35 ; WX 600 ; N numbersign ; B 93 -32 507 639 ;\r\nC 36 ; WX 600 ; N dollar ; B 105 -126 496 662 ;\r\nC 37 ; WX 600 ; N percent ; B 81 -15 518 622 ;\r\nC 38 ; WX 600 ; N ampersand ; B 63 -15 538 543 ;\r\nC 39 ; WX 600 ; N quoteright ; B 213 328 376 562 ;\r\nC 40 ; WX 600 ; N parenleft ; B 269 -108 440 622 ;\r\nC 41 ; WX 600 ; N parenright ; B 160 -108 331 622 ;\r\nC 42 ; WX 600 ; N asterisk ; B 116 257 484 607 ;\r\nC 43 ; WX 600 ; N plus ; B 80 44 520 470 ;\r\nC 44 ; WX 600 ; N comma ; B 181 -112 344 122 ;\r\nC 45 ; WX 600 ; N hyphen ; B 103 231 497 285 ;\r\nC 46 ; WX 600 ; N period ; B 229 -15 371 109 ;\r\nC 47 ; WX 600 ; N slash ; B 125 -80 475 629 ;\r\nC 48 ; WX 600 ; N zero ; B 106 -15 494 622 ;\r\nC 49 ; WX 600 ; N one ; B 96 0 505 622 ;\r\nC 50 ; WX 600 ; N two ; B 70 0 471 622 ;\r\nC 51 ; WX 600 ; N three ; B 75 -15 466 622 ;\r\nC 52 ; WX 600 ; N four ; B 78 0 500 622 ;\r\nC 53 ; WX 600 ; N five ; B 92 -15 497 607 ;\r\nC 54 ; WX 600 ; N six ; B 111 -15 497 622 ;\r\nC 55 ; WX 600 ; N seven ; B 82 0 483 607 ;\r\nC 56 ; WX 600 ; N eight ; B 102 -15 498 622 ;\r\nC 57 ; WX 600 ; N nine ; B 96 -15 489 622 ;\r\nC 58 ; WX 600 ; N colon ; B 229 -15 371 385 ;\r\nC 59 ; WX 600 ; N semicolon ; B 181 -112 371 385 ;\r\nC 60 ; WX 600 ; N less ; B 41 42 519 472 ;\r\nC 61 ; WX 600 ; N equal ; B 80 138 520 376 ;\r\nC 62 ; WX 600 ; N greater ; B 66 42 544 472 ;\r\nC 63 ; WX 600 ; N question ; B 129 -15 492 572 ;\r\nC 64 ; WX 600 ; N at ; B 77 -15 533 622 ;\r\nC 65 ; WX 600 ; N A ; B 3 0 597 562 ;\r\nC 66 ; WX 600 ; N B ; B 43 0 559 562 ;\r\nC 67 ; WX 600 ; N C ; B 41 -18 540 580 ;\r\nC 68 ; WX 600 ; N D ; B 43 0 574 562 ;\r\nC 69 ; WX 600 ; N E ; B 53 0 550 562 ;\r\nC 70 ; WX 600 ; N F ; B 53 0 545 562 ;\r\nC 71 ; WX 600 ; N G ; B 31 -18 575 580 ;\r\nC 72 ; WX 600 ; N H ; B 32 0 568 562 ;\r\nC 73 ; WX 600 ; N I ; B 96 0 504 562 ;\r\nC 74 ; WX 600 ; N J ; B 34 -18 566 562 ;\r\nC 75 ; WX 600 ; N K ; B 38 0 582 562 ;\r\nC 76 ; WX 600 ; N L ; B 47 0 554 562 ;\r\nC 77 ; WX 600 ; N M ; B 4 0 596 562 ;\r\nC 78 ; WX 600 ; N N ; B 7 -13 593 562 ;\r\nC 79 ; WX 600 ; N O ; B 43 -18 557 580 ;\r\nC 80 ; WX 600 ; N P ; B 79 0 558 562 ;\r\nC 81 ; WX 600 ; N Q ; B 43 -138 557 580 ;\r\nC 82 ; WX 600 ; N R ; B 38 0 588 562 ;\r\nC 83 ; WX 600 ; N S ; B 72 -20 529 580 ;\r\nC 84 ; WX 600 ; N T ; B 38 0 563 562 ;\r\nC 85 ; WX 600 ; N U ; B 17 -18 583 562 ;\r\nC 86 ; WX 600 ; N V ; B -4 -13 604 562 ;\r\nC 87 ; WX 600 ; N W ; B -3 -13 603 562 ;\r\nC 88 ; WX 600 ; N X ; B 23 0 577 562 ;\r\nC 89 ; WX 600 ; N Y ; B 24 0 576 562 ;\r\nC 90 ; WX 600 ; N Z ; B 86 0 514 562 ;\r\nC 91 ; WX 600 ; N bracketleft ; B 269 -108 442 622 ;\r\nC 92 ; WX 600 ; N backslash ; B 118 -80 482 629 ;\r\nC 93 ; WX 600 ; N bracketright ; B 158 -108 331 622 ;\r\nC 94 ; WX 600 ; N asciicircum ; B 94 354 506 622 ;\r\nC 95 ; WX 600 ; N underscore ; B 0 -125 600 -75 ;\r\nC 96 ; WX 600 ; N quoteleft ; B 224 328 387 562 ;\r\nC 97 ; WX 600 ; N a ; B 53 -15 559 441 ;\r\nC 98 ; WX 600 ; N b ; B 14 -15 575 629 ;\r\nC 99 ; WX 600 ; N c ; B 66 -15 529 441 ;\r\nC 100 ; WX 600 ; N d ; B 45 -15 591 629 ;\r\nC 101 ; WX 600 ; N e ; B 66 -15 548 441 ;\r\nC 102 ; WX 600 ; N f ; B 114 0 531 629 ; L i fi ; L l fl ;\r\nC 103 ; WX 600 ; N g ; B 45 -157 566 441 ;\r\nC 104 ; WX 600 ; N h ; B 18 0 582 629 ;\r\nC 105 ; WX 600 ; N i ; B 95 0 505 657 ;\r\nC 106 ; WX 600 ; N j ; B 82 -157 410 657 ;\r\nC 107 ; WX 600 ; N k ; B 43 0 580 629 ;\r\nC 108 ; WX 600 ; N l ; B 95 0 505 629 ;\r\nC 109 ; WX 600 ; N m ; B -5 0 605 441 ;\r\nC 110 ; WX 600 ; N n ; B 26 0 575 441 ;\r\nC 111 ; WX 600 ; N o ; B 62 -15 538 441 ;\r\nC 112 ; WX 600 ; N p ; B 9 -157 555 441 ;\r\nC 113 ; WX 600 ; N q ; B 45 -157 591 441 ;\r\nC 114 ; WX 600 ; N r ; B 60 0 559 441 ;\r\nC 115 ; WX 600 ; N s ; B 80 -15 513 441 ;\r\nC 116 ; WX 600 ; N t ; B 87 -15 530 561 ;\r\nC 117 ; WX 600 ; N u ; B 21 -15 562 426 ;\r\nC 118 ; WX 600 ; N v ; B 10 -10 590 426 ;\r\nC 119 ; WX 600 ; N w ; B -4 -10 604 426 ;\r\nC 120 ; WX 600 ; N x ; B 20 0 580 426 ;\r\nC 121 ; WX 600 ; N y ; B 7 -157 592 426 ;\r\nC 122 ; WX 600 ; N z ; B 99 0 502 426 ;\r\nC 123 ; WX 600 ; N braceleft ; B 182 -108 437 622 ;\r\nC 124 ; WX 600 ; N bar ; B 275 -250 326 750 ;\r\nC 125 ; WX 600 ; N braceright ; B 163 -108 418 622 ;\r\nC 126 ; WX 600 ; N asciitilde ; B 63 197 540 320 ;\r\nC 161 ; WX 600 ; N exclamdown ; B 236 -157 364 430 ;\r\nC 162 ; WX 600 ; N cent ; B 96 -49 500 614 ;\r\nC 163 ; WX 600 ; N sterling ; B 84 -21 521 611 ;\r\nC 164 ; WX 600 ; N fraction ; B 92 -57 509 665 ;\r\nC 165 ; WX 600 ; N yen ; B 26 0 574 562 ;\r\nC 166 ; WX 600 ; N florin ; B 4 -143 539 622 ;\r\nC 167 ; WX 600 ; N section ; B 113 -78 488 580 ;\r\nC 168 ; WX 600 ; N currency ; B 73 58 527 506 ;\r\nC 169 ; WX 600 ; N quotesingle ; B 259 328 341 562 ;\r\nC 170 ; WX 600 ; N quotedblleft ; B 143 328 471 562 ;\r\nC 171 ; WX 600 ; N guillemotleft ; B 37 70 563 446 ;\r\nC 172 ; WX 600 ; N guilsinglleft ; B 149 70 451 446 ;\r\nC 173 ; WX 600 ; N guilsinglright ; B 149 70 451 446 ;\r\nC 174 ; WX 600 ; N fi ; B 3 0 597 629 ;\r\nC 175 ; WX 600 ; N fl ; B 3 0 597 629 ;\r\nC 177 ; WX 600 ; N endash ; B 75 231 525 285 ;\r\nC 178 ; WX 600 ; N dagger ; B 141 -78 459 580 ;\r\nC 179 ; WX 600 ; N daggerdbl ; B 141 -78 459 580 ;\r\nC 180 ; WX 600 ; N periodcentered ; B 222 189 378 327 ;\r\nC 182 ; WX 600 ; N paragraph ; B 50 -78 511 562 ;\r\nC 183 ; WX 600 ; N bullet ; B 172 130 428 383 ;\r\nC 184 ; WX 600 ; N quotesinglbase ; B 213 -134 376 100 ;\r\nC 185 ; WX 600 ; N quotedblbase ; B 143 -134 457 100 ;\r\nC 186 ; WX 600 ; N quotedblright ; B 143 328 457 562 ;\r\nC 187 ; WX 600 ; N guillemotright ; B 37 70 563 446 ;\r\nC 188 ; WX 600 ; N ellipsis ; B 37 -15 563 111 ;\r\nC 189 ; WX 600 ; N perthousand ; B 3 -15 600 622 ;\r\nC 191 ; WX 600 ; N questiondown ; B 108 -157 471 430 ;\r\nC 193 ; WX 600 ; N grave ; B 151 497 378 672 ;\r\nC 194 ; WX 600 ; N acute ; B 242 497 469 672 ;\r\nC 195 ; WX 600 ; N circumflex ; B 124 477 476 654 ;\r\nC 196 ; WX 600 ; N tilde ; B 105 489 503 606 ;\r\nC 197 ; WX 600 ; N macron ; B 120 525 480 565 ;\r\nC 198 ; WX 600 ; N breve ; B 153 501 447 609 ;\r\nC 199 ; WX 600 ; N dotaccent ; B 249 537 352 640 ;\r\nC 200 ; WX 600 ; N dieresis ; B 148 537 453 640 ;\r\nC 202 ; WX 600 ; N ring ; B 218 463 382 627 ;\r\nC 203 ; WX 600 ; N cedilla ; B 224 -151 362 10 ;\r\nC 205 ; WX 600 ; N hungarumlaut ; B 133 497 540 672 ;\r\nC 206 ; WX 600 ; N ogonek ; B 211 -172 407 4 ;\r\nC 207 ; WX 600 ; N caron ; B 124 492 476 669 ;\r\nC 208 ; WX 600 ; N emdash ; B 0 231 600 285 ;\r\nC 225 ; WX 600 ; N AE ; B 3 0 550 562 ;\r\nC 227 ; WX 600 ; N ordfeminine ; B 156 249 442 580 ;\r\nC 232 ; WX 600 ; N Lslash ; B 47 0 554 562 ;\r\nC 233 ; WX 600 ; N Oslash ; B 43 -80 557 629 ;\r\nC 234 ; WX 600 ; N OE ; B 7 0 567 562 ;\r\nC 235 ; WX 600 ; N ordmasculine ; B 157 249 443 580 ;\r\nC 241 ; WX 600 ; N ae ; B 19 -15 570 441 ;\r\nC 245 ; WX 600 ; N dotlessi ; B 95 0 505 426 ;\r\nC 248 ; WX 600 ; N lslash ; B 95 0 505 629 ;\r\nC 249 ; WX 600 ; N oslash ; B 62 -80 538 506 ;\r\nC 250 ; WX 600 ; N oe ; B 19 -15 559 441 ;\r\nC 251 ; WX 600 ; N germandbls ; B 48 -15 588 629 ;\r\nC -1 ; WX 600 ; N Idieresis ; B 96 0 504 753 ;\r\nC -1 ; WX 600 ; N eacute ; B 66 -15 548 672 ;\r\nC -1 ; WX 600 ; N abreve ; B 53 -15 559 609 ;\r\nC -1 ; WX 600 ; N uhungarumlaut ; B 21 -15 580 672 ;\r\nC -1 ; WX 600 ; N ecaron ; B 66 -15 548 669 ;\r\nC -1 ; WX 600 ; N Ydieresis ; B 24 0 576 753 ;\r\nC -1 ; WX 600 ; N divide ; B 87 48 513 467 ;\r\nC -1 ; WX 600 ; N Yacute ; B 24 0 576 805 ;\r\nC -1 ; WX 600 ; N Acircumflex ; B 3 0 597 787 ;\r\nC -1 ; WX 600 ; N aacute ; B 53 -15 559 672 ;\r\nC -1 ; WX 600 ; N Ucircumflex ; B 17 -18 583 787 ;\r\nC -1 ; WX 600 ; N yacute ; B 7 -157 592 672 ;\r\nC -1 ; WX 600 ; N scommaaccent ; B 80 -250 513 441 ;\r\nC -1 ; WX 600 ; N ecircumflex ; B 66 -15 548 654 ;\r\nC -1 ; WX 600 ; N Uring ; B 17 -18 583 760 ;\r\nC -1 ; WX 600 ; N Udieresis ; B 17 -18 583 753 ;\r\nC -1 ; WX 600 ; N aogonek ; B 53 -172 587 441 ;\r\nC -1 ; WX 600 ; N Uacute ; B 17 -18 583 805 ;\r\nC -1 ; WX 600 ; N uogonek ; B 21 -172 590 426 ;\r\nC -1 ; WX 600 ; N Edieresis ; B 53 0 550 753 ;\r\nC -1 ; WX 600 ; N Dcroat ; B 30 0 574 562 ;\r\nC -1 ; WX 600 ; N commaaccent ; B 198 -250 335 -58 ;\r\nC -1 ; WX 600 ; N copyright ; B 0 -18 600 580 ;\r\nC -1 ; WX 600 ; N Emacron ; B 53 0 550 698 ;\r\nC -1 ; WX 600 ; N ccaron ; B 66 -15 529 669 ;\r\nC -1 ; WX 600 ; N aring ; B 53 -15 559 627 ;\r\nC -1 ; WX 600 ; N Ncommaaccent ; B 7 -250 593 562 ;\r\nC -1 ; WX 600 ; N lacute ; B 95 0 505 805 ;\r\nC -1 ; WX 600 ; N agrave ; B 53 -15 559 672 ;\r\nC -1 ; WX 600 ; N Tcommaaccent ; B 38 -250 563 562 ;\r\nC -1 ; WX 600 ; N Cacute ; B 41 -18 540 805 ;\r\nC -1 ; WX 600 ; N atilde ; B 53 -15 559 606 ;\r\nC -1 ; WX 600 ; N Edotaccent ; B 53 0 550 753 ;\r\nC -1 ; WX 600 ; N scaron ; B 80 -15 513 669 ;\r\nC -1 ; WX 600 ; N scedilla ; B 80 -151 513 441 ;\r\nC -1 ; WX 600 ; N iacute ; B 95 0 505 672 ;\r\nC -1 ; WX 600 ; N lozenge ; B 18 0 443 706 ;\r\nC -1 ; WX 600 ; N Rcaron ; B 38 0 588 802 ;\r\nC -1 ; WX 600 ; N Gcommaaccent ; B 31 -250 575 580 ;\r\nC -1 ; WX 600 ; N ucircumflex ; B 21 -15 562 654 ;\r\nC -1 ; WX 600 ; N acircumflex ; B 53 -15 559 654 ;\r\nC -1 ; WX 600 ; N Amacron ; B 3 0 597 698 ;\r\nC -1 ; WX 600 ; N rcaron ; B 60 0 559 669 ;\r\nC -1 ; WX 600 ; N ccedilla ; B 66 -151 529 441 ;\r\nC -1 ; WX 600 ; N Zdotaccent ; B 86 0 514 753 ;\r\nC -1 ; WX 600 ; N Thorn ; B 79 0 538 562 ;\r\nC -1 ; WX 600 ; N Omacron ; B 43 -18 557 698 ;\r\nC -1 ; WX 600 ; N Racute ; B 38 0 588 805 ;\r\nC -1 ; WX 600 ; N Sacute ; B 72 -20 529 805 ;\r\nC -1 ; WX 600 ; N dcaron ; B 45 -15 715 629 ;\r\nC -1 ; WX 600 ; N Umacron ; B 17 -18 583 698 ;\r\nC -1 ; WX 600 ; N uring ; B 21 -15 562 627 ;\r\nC -1 ; WX 600 ; N threesuperior ; B 155 240 406 622 ;\r\nC -1 ; WX 600 ; N Ograve ; B 43 -18 557 805 ;\r\nC -1 ; WX 600 ; N Agrave ; B 3 0 597 805 ;\r\nC -1 ; WX 600 ; N Abreve ; B 3 0 597 732 ;\r\nC -1 ; WX 600 ; N multiply ; B 87 43 515 470 ;\r\nC -1 ; WX 600 ; N uacute ; B 21 -15 562 672 ;\r\nC -1 ; WX 600 ; N Tcaron ; B 38 0 563 802 ;\r\nC -1 ; WX 600 ; N partialdiff ; B 17 -38 459 710 ;\r\nC -1 ; WX 600 ; N ydieresis ; B 7 -157 592 620 ;\r\nC -1 ; WX 600 ; N Nacute ; B 7 -13 593 805 ;\r\nC -1 ; WX 600 ; N icircumflex ; B 94 0 505 654 ;\r\nC -1 ; WX 600 ; N Ecircumflex ; B 53 0 550 787 ;\r\nC -1 ; WX 600 ; N adieresis ; B 53 -15 559 620 ;\r\nC -1 ; WX 600 ; N edieresis ; B 66 -15 548 620 ;\r\nC -1 ; WX 600 ; N cacute ; B 66 -15 529 672 ;\r\nC -1 ; WX 600 ; N nacute ; B 26 0 575 672 ;\r\nC -1 ; WX 600 ; N umacron ; B 21 -15 562 565 ;\r\nC -1 ; WX 600 ; N Ncaron ; B 7 -13 593 802 ;\r\nC -1 ; WX 600 ; N Iacute ; B 96 0 504 805 ;\r\nC -1 ; WX 600 ; N plusminus ; B 87 44 513 558 ;\r\nC -1 ; WX 600 ; N brokenbar ; B 275 -175 326 675 ;\r\nC -1 ; WX 600 ; N registered ; B 0 -18 600 580 ;\r\nC -1 ; WX 600 ; N Gbreve ; B 31 -18 575 732 ;\r\nC -1 ; WX 600 ; N Idotaccent ; B 96 0 504 753 ;\r\nC -1 ; WX 600 ; N summation ; B 15 -10 585 706 ;\r\nC -1 ; WX 600 ; N Egrave ; B 53 0 550 805 ;\r\nC -1 ; WX 600 ; N racute ; B 60 0 559 672 ;\r\nC -1 ; WX 600 ; N omacron ; B 62 -15 538 565 ;\r\nC -1 ; WX 600 ; N Zacute ; B 86 0 514 805 ;\r\nC -1 ; WX 600 ; N Zcaron ; B 86 0 514 802 ;\r\nC -1 ; WX 600 ; N greaterequal ; B 98 0 502 710 ;\r\nC -1 ; WX 600 ; N Eth ; B 30 0 574 562 ;\r\nC -1 ; WX 600 ; N Ccedilla ; B 41 -151 540 580 ;\r\nC -1 ; WX 600 ; N lcommaaccent ; B 95 -250 505 629 ;\r\nC -1 ; WX 600 ; N tcaron ; B 87 -15 530 717 ;\r\nC -1 ; WX 600 ; N eogonek ; B 66 -172 548 441 ;\r\nC -1 ; WX 600 ; N Uogonek ; B 17 -172 583 562 ;\r\nC -1 ; WX 600 ; N Aacute ; B 3 0 597 805 ;\r\nC -1 ; WX 600 ; N Adieresis ; B 3 0 597 753 ;\r\nC -1 ; WX 600 ; N egrave ; B 66 -15 548 672 ;\r\nC -1 ; WX 600 ; N zacute ; B 99 0 502 672 ;\r\nC -1 ; WX 600 ; N iogonek ; B 95 -172 505 657 ;\r\nC -1 ; WX 600 ; N Oacute ; B 43 -18 557 805 ;\r\nC -1 ; WX 600 ; N oacute ; B 62 -15 538 672 ;\r\nC -1 ; WX 600 ; N amacron ; B 53 -15 559 565 ;\r\nC -1 ; WX 600 ; N sacute ; B 80 -15 513 672 ;\r\nC -1 ; WX 600 ; N idieresis ; B 95 0 505 620 ;\r\nC -1 ; WX 600 ; N Ocircumflex ; B 43 -18 557 787 ;\r\nC -1 ; WX 600 ; N Ugrave ; B 17 -18 583 805 ;\r\nC -1 ; WX 600 ; N Delta ; B 6 0 598 688 ;\r\nC -1 ; WX 600 ; N thorn ; B -6 -157 555 629 ;\r\nC -1 ; WX 600 ; N twosuperior ; B 177 249 424 622 ;\r\nC -1 ; WX 600 ; N Odieresis ; B 43 -18 557 753 ;\r\nC -1 ; WX 600 ; N mu ; B 21 -157 562 426 ;\r\nC -1 ; WX 600 ; N igrave ; B 95 0 505 672 ;\r\nC -1 ; WX 600 ; N ohungarumlaut ; B 62 -15 580 672 ;\r\nC -1 ; WX 600 ; N Eogonek ; B 53 -172 561 562 ;\r\nC -1 ; WX 600 ; N dcroat ; B 45 -15 591 629 ;\r\nC -1 ; WX 600 ; N threequarters ; B 8 -56 593 666 ;\r\nC -1 ; WX 600 ; N Scedilla ; B 72 -151 529 580 ;\r\nC -1 ; WX 600 ; N lcaron ; B 95 0 533 629 ;\r\nC -1 ; WX 600 ; N Kcommaaccent ; B 38 -250 582 562 ;\r\nC -1 ; WX 600 ; N Lacute ; B 47 0 554 805 ;\r\nC -1 ; WX 600 ; N trademark ; B -23 263 623 562 ;\r\nC -1 ; WX 600 ; N edotaccent ; B 66 -15 548 620 ;\r\nC -1 ; WX 600 ; N Igrave ; B 96 0 504 805 ;\r\nC -1 ; WX 600 ; N Imacron ; B 96 0 504 698 ;\r\nC -1 ; WX 600 ; N Lcaron ; B 47 0 554 562 ;\r\nC -1 ; WX 600 ; N onehalf ; B 0 -57 611 665 ;\r\nC -1 ; WX 600 ; N lessequal ; B 98 0 502 710 ;\r\nC -1 ; WX 600 ; N ocircumflex ; B 62 -15 538 654 ;\r\nC -1 ; WX 600 ; N ntilde ; B 26 0 575 606 ;\r\nC -1 ; WX 600 ; N Uhungarumlaut ; B 17 -18 590 805 ;\r\nC -1 ; WX 600 ; N Eacute ; B 53 0 550 805 ;\r\nC -1 ; WX 600 ; N emacron ; B 66 -15 548 565 ;\r\nC -1 ; WX 600 ; N gbreve ; B 45 -157 566 609 ;\r\nC -1 ; WX 600 ; N onequarter ; B 0 -57 600 665 ;\r\nC -1 ; WX 600 ; N Scaron ; B 72 -20 529 802 ;\r\nC -1 ; WX 600 ; N Scommaaccent ; B 72 -250 529 580 ;\r\nC -1 ; WX 600 ; N Ohungarumlaut ; B 43 -18 580 805 ;\r\nC -1 ; WX 600 ; N degree ; B 123 269 477 622 ;\r\nC -1 ; WX 600 ; N ograve ; B 62 -15 538 672 ;\r\nC -1 ; WX 600 ; N Ccaron ; B 41 -18 540 802 ;\r\nC -1 ; WX 600 ; N ugrave ; B 21 -15 562 672 ;\r\nC -1 ; WX 600 ; N radical ; B 3 -15 597 792 ;\r\nC -1 ; WX 600 ; N Dcaron ; B 43 0 574 802 ;\r\nC -1 ; WX 600 ; N rcommaaccent ; B 60 -250 559 441 ;\r\nC -1 ; WX 600 ; N Ntilde ; B 7 -13 593 729 ;\r\nC -1 ; WX 600 ; N otilde ; B 62 -15 538 606 ;\r\nC -1 ; WX 600 ; N Rcommaaccent ; B 38 -250 588 562 ;\r\nC -1 ; WX 600 ; N Lcommaaccent ; B 47 -250 554 562 ;\r\nC -1 ; WX 600 ; N Atilde ; B 3 0 597 729 ;\r\nC -1 ; WX 600 ; N Aogonek ; B 3 -172 608 562 ;\r\nC -1 ; WX 600 ; N Aring ; B 3 0 597 750 ;\r\nC -1 ; WX 600 ; N Otilde ; B 43 -18 557 729 ;\r\nC -1 ; WX 600 ; N zdotaccent ; B 99 0 502 620 ;\r\nC -1 ; WX 600 ; N Ecaron ; B 53 0 550 802 ;\r\nC -1 ; WX 600 ; N Iogonek ; B 96 -172 504 562 ;\r\nC -1 ; WX 600 ; N kcommaaccent ; B 43 -250 580 629 ;\r\nC -1 ; WX 600 ; N minus ; B 80 232 520 283 ;\r\nC -1 ; WX 600 ; N Icircumflex ; B 96 0 504 787 ;\r\nC -1 ; WX 600 ; N ncaron ; B 26 0 575 669 ;\r\nC -1 ; WX 600 ; N tcommaaccent ; B 87 -250 530 561 ;\r\nC -1 ; WX 600 ; N logicalnot ; B 87 108 513 369 ;\r\nC -1 ; WX 600 ; N odieresis ; B 62 -15 538 620 ;\r\nC -1 ; WX 600 ; N udieresis ; B 21 -15 562 620 ;\r\nC -1 ; WX 600 ; N notequal ; B 15 -16 540 529 ;\r\nC -1 ; WX 600 ; N gcommaaccent ; B 45 -157 566 708 ;\r\nC -1 ; WX 600 ; N eth ; B 62 -15 538 629 ;\r\nC -1 ; WX 600 ; N zcaron ; B 99 0 502 669 ;\r\nC -1 ; WX 600 ; N ncommaaccent ; B 26 -250 575 441 ;\r\nC -1 ; WX 600 ; N onesuperior ; B 172 249 428 622 ;\r\nC -1 ; WX 600 ; N imacron ; B 95 0 505 565 ;\r\nC -1 ; WX 600 ; N Euro ; B 0 0 0 0 ;\r\nEndCharMetrics\r\nEndFontMetrics\r\n",
  'Courier-Bold.afm': "StartFontMetrics 4.1\r\nComment Copyright (c) 1989, 1990, 1991, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.\r\nComment Creation Date: Mon Jun 23 16:28:00 1997\r\nComment UniqueID 43048\r\nComment VMusage 41139 52164\r\nFontName Courier-Bold\r\nFullName Courier Bold\r\nFamilyName Courier\r\nWeight Bold\r\nItalicAngle 0\r\nIsFixedPitch true\r\nCharacterSet ExtendedRoman\r\nFontBBox -113 -250 749 801 \r\nUnderlinePosition -100\r\nUnderlineThickness 50\r\nVersion 003.000\r\nNotice Copyright (c) 1989, 1990, 1991, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.\r\nEncodingScheme AdobeStandardEncoding\r\nCapHeight 562\r\nXHeight 439\r\nAscender 629\r\nDescender -157\r\nStdHW 84\r\nStdVW 106\r\nStartCharMetrics 315\r\nC 32 ; WX 600 ; N space ; B 0 0 0 0 ;\r\nC 33 ; WX 600 ; N exclam ; B 202 -15 398 572 ;\r\nC 34 ; WX 600 ; N quotedbl ; B 135 277 465 562 ;\r\nC 35 ; WX 600 ; N numbersign ; B 56 -45 544 651 ;\r\nC 36 ; WX 600 ; N dollar ; B 82 -126 519 666 ;\r\nC 37 ; WX 600 ; N percent ; B 5 -15 595 616 ;\r\nC 38 ; WX 600 ; N ampersand ; B 36 -15 546 543 ;\r\nC 39 ; WX 600 ; N quoteright ; B 171 277 423 562 ;\r\nC 40 ; WX 600 ; N parenleft ; B 219 -102 461 616 ;\r\nC 41 ; WX 600 ; N parenright ; B 139 -102 381 616 ;\r\nC 42 ; WX 600 ; N asterisk ; B 91 219 509 601 ;\r\nC 43 ; WX 600 ; N plus ; B 71 39 529 478 ;\r\nC 44 ; WX 600 ; N comma ; B 123 -111 393 174 ;\r\nC 45 ; WX 600 ; N hyphen ; B 100 203 500 313 ;\r\nC 46 ; WX 600 ; N period ; B 192 -15 408 171 ;\r\nC 47 ; WX 600 ; N slash ; B 98 -77 502 626 ;\r\nC 48 ; WX 600 ; N zero ; B 87 -15 513 616 ;\r\nC 49 ; WX 600 ; N one ; B 81 0 539 616 ;\r\nC 50 ; WX 600 ; N two ; B 61 0 499 616 ;\r\nC 51 ; WX 600 ; N three ; B 63 -15 501 616 ;\r\nC 52 ; WX 600 ; N four ; B 53 0 507 616 ;\r\nC 53 ; WX 600 ; N five ; B 70 -15 521 601 ;\r\nC 54 ; WX 600 ; N six ; B 90 -15 521 616 ;\r\nC 55 ; WX 600 ; N seven ; B 55 0 494 601 ;\r\nC 56 ; WX 600 ; N eight ; B 83 -15 517 616 ;\r\nC 57 ; WX 600 ; N nine ; B 79 -15 510 616 ;\r\nC 58 ; WX 600 ; N colon ; B 191 -15 407 425 ;\r\nC 59 ; WX 600 ; N semicolon ; B 123 -111 408 425 ;\r\nC 60 ; WX 600 ; N less ; B 66 15 523 501 ;\r\nC 61 ; WX 600 ; N equal ; B 71 118 529 398 ;\r\nC 62 ; WX 600 ; N greater ; B 77 15 534 501 ;\r\nC 63 ; WX 600 ; N question ; B 98 -14 501 580 ;\r\nC 64 ; WX 600 ; N at ; B 16 -15 584 616 ;\r\nC 65 ; WX 600 ; N A ; B -9 0 609 562 ;\r\nC 66 ; WX 600 ; N B ; B 30 0 573 562 ;\r\nC 67 ; WX 600 ; N C ; B 22 -18 560 580 ;\r\nC 68 ; WX 600 ; N D ; B 30 0 594 562 ;\r\nC 69 ; WX 600 ; N E ; B 25 0 560 562 ;\r\nC 70 ; WX 600 ; N F ; B 39 0 570 562 ;\r\nC 71 ; WX 600 ; N G ; B 22 -18 594 580 ;\r\nC 72 ; WX 600 ; N H ; B 20 0 580 562 ;\r\nC 73 ; WX 600 ; N I ; B 77 0 523 562 ;\r\nC 74 ; WX 600 ; N J ; B 37 -18 601 562 ;\r\nC 75 ; WX 600 ; N K ; B 21 0 599 562 ;\r\nC 76 ; WX 600 ; N L ; B 39 0 578 562 ;\r\nC 77 ; WX 600 ; N M ; B -2 0 602 562 ;\r\nC 78 ; WX 600 ; N N ; B 8 -12 610 562 ;\r\nC 79 ; WX 600 ; N O ; B 22 -18 578 580 ;\r\nC 80 ; WX 600 ; N P ; B 48 0 559 562 ;\r\nC 81 ; WX 600 ; N Q ; B 32 -138 578 580 ;\r\nC 82 ; WX 600 ; N R ; B 24 0 599 562 ;\r\nC 83 ; WX 600 ; N S ; B 47 -22 553 582 ;\r\nC 84 ; WX 600 ; N T ; B 21 0 579 562 ;\r\nC 85 ; WX 600 ; N U ; B 4 -18 596 562 ;\r\nC 86 ; WX 600 ; N V ; B -13 0 613 562 ;\r\nC 87 ; WX 600 ; N W ; B -18 0 618 562 ;\r\nC 88 ; WX 600 ; N X ; B 12 0 588 562 ;\r\nC 89 ; WX 600 ; N Y ; B 12 0 589 562 ;\r\nC 90 ; WX 600 ; N Z ; B 62 0 539 562 ;\r\nC 91 ; WX 600 ; N bracketleft ; B 245 -102 475 616 ;\r\nC 92 ; WX 600 ; N backslash ; B 99 -77 503 626 ;\r\nC 93 ; WX 600 ; N bracketright ; B 125 -102 355 616 ;\r\nC 94 ; WX 600 ; N asciicircum ; B 108 250 492 616 ;\r\nC 95 ; WX 600 ; N underscore ; B 0 -125 600 -75 ;\r\nC 96 ; WX 600 ; N quoteleft ; B 178 277 428 562 ;\r\nC 97 ; WX 600 ; N a ; B 35 -15 570 454 ;\r\nC 98 ; WX 600 ; N b ; B 0 -15 584 626 ;\r\nC 99 ; WX 600 ; N c ; B 40 -15 545 459 ;\r\nC 100 ; WX 600 ; N d ; B 20 -15 591 626 ;\r\nC 101 ; WX 600 ; N e ; B 40 -15 563 454 ;\r\nC 102 ; WX 600 ; N f ; B 83 0 547 626 ; L i fi ; L l fl ;\r\nC 103 ; WX 600 ; N g ; B 30 -146 580 454 ;\r\nC 104 ; WX 600 ; N h ; B 5 0 592 626 ;\r\nC 105 ; WX 600 ; N i ; B 77 0 523 658 ;\r\nC 106 ; WX 600 ; N j ; B 63 -146 440 658 ;\r\nC 107 ; WX 600 ; N k ; B 20 0 585 626 ;\r\nC 108 ; WX 600 ; N l ; B 77 0 523 626 ;\r\nC 109 ; WX 600 ; N m ; B -22 0 626 454 ;\r\nC 110 ; WX 600 ; N n ; B 18 0 592 454 ;\r\nC 111 ; WX 600 ; N o ; B 30 -15 570 454 ;\r\nC 112 ; WX 600 ; N p ; B -1 -142 570 454 ;\r\nC 113 ; WX 600 ; N q ; B 20 -142 591 454 ;\r\nC 114 ; WX 600 ; N r ; B 47 0 580 454 ;\r\nC 115 ; WX 600 ; N s ; B 68 -17 535 459 ;\r\nC 116 ; WX 600 ; N t ; B 47 -15 532 562 ;\r\nC 117 ; WX 600 ; N u ; B -1 -15 569 439 ;\r\nC 118 ; WX 600 ; N v ; B -1 0 601 439 ;\r\nC 119 ; WX 600 ; N w ; B -18 0 618 439 ;\r\nC 120 ; WX 600 ; N x ; B 6 0 594 439 ;\r\nC 121 ; WX 600 ; N y ; B -4 -142 601 439 ;\r\nC 122 ; WX 600 ; N z ; B 81 0 520 439 ;\r\nC 123 ; WX 600 ; N braceleft ; B 160 -102 464 616 ;\r\nC 124 ; WX 600 ; N bar ; B 255 -250 345 750 ;\r\nC 125 ; WX 600 ; N braceright ; B 136 -102 440 616 ;\r\nC 126 ; WX 600 ; N asciitilde ; B 71 153 530 356 ;\r\nC 161 ; WX 600 ; N exclamdown ; B 202 -146 398 449 ;\r\nC 162 ; WX 600 ; N cent ; B 66 -49 518 614 ;\r\nC 163 ; WX 600 ; N sterling ; B 72 -28 558 611 ;\r\nC 164 ; WX 600 ; N fraction ; B 25 -60 576 661 ;\r\nC 165 ; WX 600 ; N yen ; B 10 0 590 562 ;\r\nC 166 ; WX 600 ; N florin ; B -30 -131 572 616 ;\r\nC 167 ; WX 600 ; N section ; B 83 -70 517 580 ;\r\nC 168 ; WX 600 ; N currency ; B 54 49 546 517 ;\r\nC 169 ; WX 600 ; N quotesingle ; B 227 277 373 562 ;\r\nC 170 ; WX 600 ; N quotedblleft ; B 71 277 535 562 ;\r\nC 171 ; WX 600 ; N guillemotleft ; B 8 70 553 446 ;\r\nC 172 ; WX 600 ; N guilsinglleft ; B 141 70 459 446 ;\r\nC 173 ; WX 600 ; N guilsinglright ; B 141 70 459 446 ;\r\nC 174 ; WX 600 ; N fi ; B 12 0 593 626 ;\r\nC 175 ; WX 600 ; N fl ; B 12 0 593 626 ;\r\nC 177 ; WX 600 ; N endash ; B 65 203 535 313 ;\r\nC 178 ; WX 600 ; N dagger ; B 106 -70 494 580 ;\r\nC 179 ; WX 600 ; N daggerdbl ; B 106 -70 494 580 ;\r\nC 180 ; WX 600 ; N periodcentered ; B 196 165 404 351 ;\r\nC 182 ; WX 600 ; N paragraph ; B 6 -70 576 580 ;\r\nC 183 ; WX 600 ; N bullet ; B 140 132 460 430 ;\r\nC 184 ; WX 600 ; N quotesinglbase ; B 175 -142 427 143 ;\r\nC 185 ; WX 600 ; N quotedblbase ; B 65 -142 529 143 ;\r\nC 186 ; WX 600 ; N quotedblright ; B 61 277 525 562 ;\r\nC 187 ; WX 600 ; N guillemotright ; B 47 70 592 446 ;\r\nC 188 ; WX 600 ; N ellipsis ; B 26 -15 574 116 ;\r\nC 189 ; WX 600 ; N perthousand ; B -113 -15 713 616 ;\r\nC 191 ; WX 600 ; N questiondown ; B 99 -146 502 449 ;\r\nC 193 ; WX 600 ; N grave ; B 132 508 395 661 ;\r\nC 194 ; WX 600 ; N acute ; B 205 508 468 661 ;\r\nC 195 ; WX 600 ; N circumflex ; B 103 483 497 657 ;\r\nC 196 ; WX 600 ; N tilde ; B 89 493 512 636 ;\r\nC 197 ; WX 600 ; N macron ; B 88 505 512 585 ;\r\nC 198 ; WX 600 ; N breve ; B 83 468 517 631 ;\r\nC 199 ; WX 600 ; N dotaccent ; B 230 498 370 638 ;\r\nC 200 ; WX 600 ; N dieresis ; B 128 498 472 638 ;\r\nC 202 ; WX 600 ; N ring ; B 198 481 402 678 ;\r\nC 203 ; WX 600 ; N cedilla ; B 205 -206 387 0 ;\r\nC 205 ; WX 600 ; N hungarumlaut ; B 68 488 588 661 ;\r\nC 206 ; WX 600 ; N ogonek ; B 169 -199 400 0 ;\r\nC 207 ; WX 600 ; N caron ; B 103 493 497 667 ;\r\nC 208 ; WX 600 ; N emdash ; B -10 203 610 313 ;\r\nC 225 ; WX 600 ; N AE ; B -29 0 602 562 ;\r\nC 227 ; WX 600 ; N ordfeminine ; B 147 196 453 580 ;\r\nC 232 ; WX 600 ; N Lslash ; B 39 0 578 562 ;\r\nC 233 ; WX 600 ; N Oslash ; B 22 -22 578 584 ;\r\nC 234 ; WX 600 ; N OE ; B -25 0 595 562 ;\r\nC 235 ; WX 600 ; N ordmasculine ; B 147 196 453 580 ;\r\nC 241 ; WX 600 ; N ae ; B -4 -15 601 454 ;\r\nC 245 ; WX 600 ; N dotlessi ; B 77 0 523 439 ;\r\nC 248 ; WX 600 ; N lslash ; B 77 0 523 626 ;\r\nC 249 ; WX 600 ; N oslash ; B 30 -24 570 463 ;\r\nC 250 ; WX 600 ; N oe ; B -18 -15 611 454 ;\r\nC 251 ; WX 600 ; N germandbls ; B 22 -15 596 626 ;\r\nC -1 ; WX 600 ; N Idieresis ; B 77 0 523 761 ;\r\nC -1 ; WX 600 ; N eacute ; B 40 -15 563 661 ;\r\nC -1 ; WX 600 ; N abreve ; B 35 -15 570 661 ;\r\nC -1 ; WX 600 ; N uhungarumlaut ; B -1 -15 628 661 ;\r\nC -1 ; WX 600 ; N ecaron ; B 40 -15 563 667 ;\r\nC -1 ; WX 600 ; N Ydieresis ; B 12 0 589 761 ;\r\nC -1 ; WX 600 ; N divide ; B 71 16 529 500 ;\r\nC -1 ; WX 600 ; N Yacute ; B 12 0 589 784 ;\r\nC -1 ; WX 600 ; N Acircumflex ; B -9 0 609 780 ;\r\nC -1 ; WX 600 ; N aacute ; B 35 -15 570 661 ;\r\nC -1 ; WX 600 ; N Ucircumflex ; B 4 -18 596 780 ;\r\nC -1 ; WX 600 ; N yacute ; B -4 -142 601 661 ;\r\nC -1 ; WX 600 ; N scommaaccent ; B 68 -250 535 459 ;\r\nC -1 ; WX 600 ; N ecircumflex ; B 40 -15 563 657 ;\r\nC -1 ; WX 600 ; N Uring ; B 4 -18 596 801 ;\r\nC -1 ; WX 600 ; N Udieresis ; B 4 -18 596 761 ;\r\nC -1 ; WX 600 ; N aogonek ; B 35 -199 586 454 ;\r\nC -1 ; WX 600 ; N Uacute ; B 4 -18 596 784 ;\r\nC -1 ; WX 600 ; N uogonek ; B -1 -199 585 439 ;\r\nC -1 ; WX 600 ; N Edieresis ; B 25 0 560 761 ;\r\nC -1 ; WX 600 ; N Dcroat ; B 30 0 594 562 ;\r\nC -1 ; WX 600 ; N commaaccent ; B 205 -250 397 -57 ;\r\nC -1 ; WX 600 ; N copyright ; B 0 -18 600 580 ;\r\nC -1 ; WX 600 ; N Emacron ; B 25 0 560 708 ;\r\nC -1 ; WX 600 ; N ccaron ; B 40 -15 545 667 ;\r\nC -1 ; WX 600 ; N aring ; B 35 -15 570 678 ;\r\nC -1 ; WX 600 ; N Ncommaaccent ; B 8 -250 610 562 ;\r\nC -1 ; WX 600 ; N lacute ; B 77 0 523 801 ;\r\nC -1 ; WX 600 ; N agrave ; B 35 -15 570 661 ;\r\nC -1 ; WX 600 ; N Tcommaaccent ; B 21 -250 579 562 ;\r\nC -1 ; WX 600 ; N Cacute ; B 22 -18 560 784 ;\r\nC -1 ; WX 600 ; N atilde ; B 35 -15 570 636 ;\r\nC -1 ; WX 600 ; N Edotaccent ; B 25 0 560 761 ;\r\nC -1 ; WX 600 ; N scaron ; B 68 -17 535 667 ;\r\nC -1 ; WX 600 ; N scedilla ; B 68 -206 535 459 ;\r\nC -1 ; WX 600 ; N iacute ; B 77 0 523 661 ;\r\nC -1 ; WX 600 ; N lozenge ; B 66 0 534 740 ;\r\nC -1 ; WX 600 ; N Rcaron ; B 24 0 599 790 ;\r\nC -1 ; WX 600 ; N Gcommaaccent ; B 22 -250 594 580 ;\r\nC -1 ; WX 600 ; N ucircumflex ; B -1 -15 569 657 ;\r\nC -1 ; WX 600 ; N acircumflex ; B 35 -15 570 657 ;\r\nC -1 ; WX 600 ; N Amacron ; B -9 0 609 708 ;\r\nC -1 ; WX 600 ; N rcaron ; B 47 0 580 667 ;\r\nC -1 ; WX 600 ; N ccedilla ; B 40 -206 545 459 ;\r\nC -1 ; WX 600 ; N Zdotaccent ; B 62 0 539 761 ;\r\nC -1 ; WX 600 ; N Thorn ; B 48 0 557 562 ;\r\nC -1 ; WX 600 ; N Omacron ; B 22 -18 578 708 ;\r\nC -1 ; WX 600 ; N Racute ; B 24 0 599 784 ;\r\nC -1 ; WX 600 ; N Sacute ; B 47 -22 553 784 ;\r\nC -1 ; WX 600 ; N dcaron ; B 20 -15 727 626 ;\r\nC -1 ; WX 600 ; N Umacron ; B 4 -18 596 708 ;\r\nC -1 ; WX 600 ; N uring ; B -1 -15 569 678 ;\r\nC -1 ; WX 600 ; N threesuperior ; B 138 222 433 616 ;\r\nC -1 ; WX 600 ; N Ograve ; B 22 -18 578 784 ;\r\nC -1 ; WX 600 ; N Agrave ; B -9 0 609 784 ;\r\nC -1 ; WX 600 ; N Abreve ; B -9 0 609 784 ;\r\nC -1 ; WX 600 ; N multiply ; B 81 39 520 478 ;\r\nC -1 ; WX 600 ; N uacute ; B -1 -15 569 661 ;\r\nC -1 ; WX 600 ; N Tcaron ; B 21 0 579 790 ;\r\nC -1 ; WX 600 ; N partialdiff ; B 63 -38 537 728 ;\r\nC -1 ; WX 600 ; N ydieresis ; B -4 -142 601 638 ;\r\nC -1 ; WX 600 ; N Nacute ; B 8 -12 610 784 ;\r\nC -1 ; WX 600 ; N icircumflex ; B 73 0 523 657 ;\r\nC -1 ; WX 600 ; N Ecircumflex ; B 25 0 560 780 ;\r\nC -1 ; WX 600 ; N adieresis ; B 35 -15 570 638 ;\r\nC -1 ; WX 600 ; N edieresis ; B 40 -15 563 638 ;\r\nC -1 ; WX 600 ; N cacute ; B 40 -15 545 661 ;\r\nC -1 ; WX 600 ; N nacute ; B 18 0 592 661 ;\r\nC -1 ; WX 600 ; N umacron ; B -1 -15 569 585 ;\r\nC -1 ; WX 600 ; N Ncaron ; B 8 -12 610 790 ;\r\nC -1 ; WX 600 ; N Iacute ; B 77 0 523 784 ;\r\nC -1 ; WX 600 ; N plusminus ; B 71 24 529 515 ;\r\nC -1 ; WX 600 ; N brokenbar ; B 255 -175 345 675 ;\r\nC -1 ; WX 600 ; N registered ; B 0 -18 600 580 ;\r\nC -1 ; WX 600 ; N Gbreve ; B 22 -18 594 784 ;\r\nC -1 ; WX 600 ; N Idotaccent ; B 77 0 523 761 ;\r\nC -1 ; WX 600 ; N summation ; B 15 -10 586 706 ;\r\nC -1 ; WX 600 ; N Egrave ; B 25 0 560 784 ;\r\nC -1 ; WX 600 ; N racute ; B 47 0 580 661 ;\r\nC -1 ; WX 600 ; N omacron ; B 30 -15 570 585 ;\r\nC -1 ; WX 600 ; N Zacute ; B 62 0 539 784 ;\r\nC -1 ; WX 600 ; N Zcaron ; B 62 0 539 790 ;\r\nC -1 ; WX 600 ; N greaterequal ; B 26 0 523 696 ;\r\nC -1 ; WX 600 ; N Eth ; B 30 0 594 562 ;\r\nC -1 ; WX 600 ; N Ccedilla ; B 22 -206 560 580 ;\r\nC -1 ; WX 600 ; N lcommaaccent ; B 77 -250 523 626 ;\r\nC -1 ; WX 600 ; N tcaron ; B 47 -15 532 703 ;\r\nC -1 ; WX 600 ; N eogonek ; B 40 -199 563 454 ;\r\nC -1 ; WX 600 ; N Uogonek ; B 4 -199 596 562 ;\r\nC -1 ; WX 600 ; N Aacute ; B -9 0 609 784 ;\r\nC -1 ; WX 600 ; N Adieresis ; B -9 0 609 761 ;\r\nC -1 ; WX 600 ; N egrave ; B 40 -15 563 661 ;\r\nC -1 ; WX 600 ; N zacute ; B 81 0 520 661 ;\r\nC -1 ; WX 600 ; N iogonek ; B 77 -199 523 658 ;\r\nC -1 ; WX 600 ; N Oacute ; B 22 -18 578 784 ;\r\nC -1 ; WX 600 ; N oacute ; B 30 -15 570 661 ;\r\nC -1 ; WX 600 ; N amacron ; B 35 -15 570 585 ;\r\nC -1 ; WX 600 ; N sacute ; B 68 -17 535 661 ;\r\nC -1 ; WX 600 ; N idieresis ; B 77 0 523 618 ;\r\nC -1 ; WX 600 ; N Ocircumflex ; B 22 -18 578 780 ;\r\nC -1 ; WX 600 ; N Ugrave ; B 4 -18 596 784 ;\r\nC -1 ; WX 600 ; N Delta ; B 6 0 594 688 ;\r\nC -1 ; WX 600 ; N thorn ; B -14 -142 570 626 ;\r\nC -1 ; WX 600 ; N twosuperior ; B 143 230 436 616 ;\r\nC -1 ; WX 600 ; N Odieresis ; B 22 -18 578 761 ;\r\nC -1 ; WX 600 ; N mu ; B -1 -142 569 439 ;\r\nC -1 ; WX 600 ; N igrave ; B 77 0 523 661 ;\r\nC -1 ; WX 600 ; N ohungarumlaut ; B 30 -15 668 661 ;\r\nC -1 ; WX 600 ; N Eogonek ; B 25 -199 576 562 ;\r\nC -1 ; WX 600 ; N dcroat ; B 20 -15 591 626 ;\r\nC -1 ; WX 600 ; N threequarters ; B -47 -60 648 661 ;\r\nC -1 ; WX 600 ; N Scedilla ; B 47 -206 553 582 ;\r\nC -1 ; WX 600 ; N lcaron ; B 77 0 597 626 ;\r\nC -1 ; WX 600 ; N Kcommaaccent ; B 21 -250 599 562 ;\r\nC -1 ; WX 600 ; N Lacute ; B 39 0 578 784 ;\r\nC -1 ; WX 600 ; N trademark ; B -9 230 749 562 ;\r\nC -1 ; WX 600 ; N edotaccent ; B 40 -15 563 638 ;\r\nC -1 ; WX 600 ; N Igrave ; B 77 0 523 784 ;\r\nC -1 ; WX 600 ; N Imacron ; B 77 0 523 708 ;\r\nC -1 ; WX 600 ; N Lcaron ; B 39 0 637 562 ;\r\nC -1 ; WX 600 ; N onehalf ; B -47 -60 648 661 ;\r\nC -1 ; WX 600 ; N lessequal ; B 26 0 523 696 ;\r\nC -1 ; WX 600 ; N ocircumflex ; B 30 -15 570 657 ;\r\nC -1 ; WX 600 ; N ntilde ; B 18 0 592 636 ;\r\nC -1 ; WX 600 ; N Uhungarumlaut ; B 4 -18 638 784 ;\r\nC -1 ; WX 600 ; N Eacute ; B 25 0 560 784 ;\r\nC -1 ; WX 600 ; N emacron ; B 40 -15 563 585 ;\r\nC -1 ; WX 600 ; N gbreve ; B 30 -146 580 661 ;\r\nC -1 ; WX 600 ; N onequarter ; B -56 -60 656 661 ;\r\nC -1 ; WX 600 ; N Scaron ; B 47 -22 553 790 ;\r\nC -1 ; WX 600 ; N Scommaaccent ; B 47 -250 553 582 ;\r\nC -1 ; WX 600 ; N Ohungarumlaut ; B 22 -18 628 784 ;\r\nC -1 ; WX 600 ; N degree ; B 86 243 474 616 ;\r\nC -1 ; WX 600 ; N ograve ; B 30 -15 570 661 ;\r\nC -1 ; WX 600 ; N Ccaron ; B 22 -18 560 790 ;\r\nC -1 ; WX 600 ; N ugrave ; B -1 -15 569 661 ;\r\nC -1 ; WX 600 ; N radical ; B -19 -104 473 778 ;\r\nC -1 ; WX 600 ; N Dcaron ; B 30 0 594 790 ;\r\nC -1 ; WX 600 ; N rcommaaccent ; B 47 -250 580 454 ;\r\nC -1 ; WX 600 ; N Ntilde ; B 8 -12 610 759 ;\r\nC -1 ; WX 600 ; N otilde ; B 30 -15 570 636 ;\r\nC -1 ; WX 600 ; N Rcommaaccent ; B 24 -250 599 562 ;\r\nC -1 ; WX 600 ; N Lcommaaccent ; B 39 -250 578 562 ;\r\nC -1 ; WX 600 ; N Atilde ; B -9 0 609 759 ;\r\nC -1 ; WX 600 ; N Aogonek ; B -9 -199 625 562 ;\r\nC -1 ; WX 600 ; N Aring ; B -9 0 609 801 ;\r\nC -1 ; WX 600 ; N Otilde ; B 22 -18 578 759 ;\r\nC -1 ; WX 600 ; N zdotaccent ; B 81 0 520 638 ;\r\nC -1 ; WX 600 ; N Ecaron ; B 25 0 560 790 ;\r\nC -1 ; WX 600 ; N Iogonek ; B 77 -199 523 562 ;\r\nC -1 ; WX 600 ; N kcommaaccent ; B 20 -250 585 626 ;\r\nC -1 ; WX 600 ; N minus ; B 71 203 529 313 ;\r\nC -1 ; WX 600 ; N Icircumflex ; B 77 0 523 780 ;\r\nC -1 ; WX 600 ; N ncaron ; B 18 0 592 667 ;\r\nC -1 ; WX 600 ; N tcommaaccent ; B 47 -250 532 562 ;\r\nC -1 ; WX 600 ; N logicalnot ; B 71 103 529 413 ;\r\nC -1 ; WX 600 ; N odieresis ; B 30 -15 570 638 ;\r\nC -1 ; WX 600 ; N udieresis ; B -1 -15 569 638 ;\r\nC -1 ; WX 600 ; N notequal ; B 12 -47 537 563 ;\r\nC -1 ; WX 600 ; N gcommaaccent ; B 30 -146 580 714 ;\r\nC -1 ; WX 600 ; N eth ; B 58 -27 543 626 ;\r\nC -1 ; WX 600 ; N zcaron ; B 81 0 520 667 ;\r\nC -1 ; WX 600 ; N ncommaaccent ; B 18 -250 592 454 ;\r\nC -1 ; WX 600 ; N onesuperior ; B 153 230 447 616 ;\r\nC -1 ; WX 600 ; N imacron ; B 77 0 523 585 ;\r\nC -1 ; WX 600 ; N Euro ; B 0 0 0 0 ;\r\nEndCharMetrics\r\nEndFontMetrics\r\n",
  'Courier-Oblique.afm': "StartFontMetrics 4.1\r\nComment Copyright (c) 1989, 1990, 1991, 1992, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.\r\nComment Creation Date: Thu May  1 17:37:52 1997\r\nComment UniqueID 43051\r\nComment VMusage 16248 75829\r\nFontName Courier-Oblique\r\nFullName Courier Oblique\r\nFamilyName Courier\r\nWeight Medium\r\nItalicAngle -12\r\nIsFixedPitch true\r\nCharacterSet ExtendedRoman\r\nFontBBox -27 -250 849 805 \r\nUnderlinePosition -100\r\nUnderlineThickness 50\r\nVersion 003.000\r\nNotice Copyright (c) 1989, 1990, 1991, 1992, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.\r\nEncodingScheme AdobeStandardEncoding\r\nCapHeight 562\r\nXHeight 426\r\nAscender 629\r\nDescender -157\r\nStdHW 51\r\nStdVW 51\r\nStartCharMetrics 315\r\nC 32 ; WX 600 ; N space ; B 0 0 0 0 ;\r\nC 33 ; WX 600 ; N exclam ; B 243 -15 464 572 ;\r\nC 34 ; WX 600 ; N quotedbl ; B 273 328 532 562 ;\r\nC 35 ; WX 600 ; N numbersign ; B 133 -32 596 639 ;\r\nC 36 ; WX 600 ; N dollar ; B 108 -126 596 662 ;\r\nC 37 ; WX 600 ; N percent ; B 134 -15 599 622 ;\r\nC 38 ; WX 600 ; N ampersand ; B 87 -15 580 543 ;\r\nC 39 ; WX 600 ; N quoteright ; B 283 328 495 562 ;\r\nC 40 ; WX 600 ; N parenleft ; B 313 -108 572 622 ;\r\nC 41 ; WX 600 ; N parenright ; B 137 -108 396 622 ;\r\nC 42 ; WX 600 ; N asterisk ; B 212 257 580 607 ;\r\nC 43 ; WX 600 ; N plus ; B 129 44 580 470 ;\r\nC 44 ; WX 600 ; N comma ; B 157 -112 370 122 ;\r\nC 45 ; WX 600 ; N hyphen ; B 152 231 558 285 ;\r\nC 46 ; WX 600 ; N period ; B 238 -15 382 109 ;\r\nC 47 ; WX 600 ; N slash ; B 112 -80 604 629 ;\r\nC 48 ; WX 600 ; N zero ; B 154 -15 575 622 ;\r\nC 49 ; WX 600 ; N one ; B 98 0 515 622 ;\r\nC 50 ; WX 600 ; N two ; B 70 0 568 622 ;\r\nC 51 ; WX 600 ; N three ; B 82 -15 538 622 ;\r\nC 52 ; WX 600 ; N four ; B 108 0 541 622 ;\r\nC 53 ; WX 600 ; N five ; B 99 -15 589 607 ;\r\nC 54 ; WX 600 ; N six ; B 155 -15 629 622 ;\r\nC 55 ; WX 600 ; N seven ; B 182 0 612 607 ;\r\nC 56 ; WX 600 ; N eight ; B 132 -15 588 622 ;\r\nC 57 ; WX 600 ; N nine ; B 93 -15 574 622 ;\r\nC 58 ; WX 600 ; N colon ; B 238 -15 441 385 ;\r\nC 59 ; WX 600 ; N semicolon ; B 157 -112 441 385 ;\r\nC 60 ; WX 600 ; N less ; B 96 42 610 472 ;\r\nC 61 ; WX 600 ; N equal ; B 109 138 600 376 ;\r\nC 62 ; WX 600 ; N greater ; B 85 42 599 472 ;\r\nC 63 ; WX 600 ; N question ; B 222 -15 583 572 ;\r\nC 64 ; WX 600 ; N at ; B 127 -15 582 622 ;\r\nC 65 ; WX 600 ; N A ; B 3 0 607 562 ;\r\nC 66 ; WX 600 ; N B ; B 43 0 616 562 ;\r\nC 67 ; WX 600 ; N C ; B 93 -18 655 580 ;\r\nC 68 ; WX 600 ; N D ; B 43 0 645 562 ;\r\nC 69 ; WX 600 ; N E ; B 53 0 660 562 ;\r\nC 70 ; WX 600 ; N F ; B 53 0 660 562 ;\r\nC 71 ; WX 600 ; N G ; B 83 -18 645 580 ;\r\nC 72 ; WX 600 ; N H ; B 32 0 687 562 ;\r\nC 73 ; WX 600 ; N I ; B 96 0 623 562 ;\r\nC 74 ; WX 600 ; N J ; B 52 -18 685 562 ;\r\nC 75 ; WX 600 ; N K ; B 38 0 671 562 ;\r\nC 76 ; WX 600 ; N L ; B 47 0 607 562 ;\r\nC 77 ; WX 600 ; N M ; B 4 0 715 562 ;\r\nC 78 ; WX 600 ; N N ; B 7 -13 712 562 ;\r\nC 79 ; WX 600 ; N O ; B 94 -18 625 580 ;\r\nC 80 ; WX 600 ; N P ; B 79 0 644 562 ;\r\nC 81 ; WX 600 ; N Q ; B 95 -138 625 580 ;\r\nC 82 ; WX 600 ; N R ; B 38 0 598 562 ;\r\nC 83 ; WX 600 ; N S ; B 76 -20 650 580 ;\r\nC 84 ; WX 600 ; N T ; B 108 0 665 562 ;\r\nC 85 ; WX 600 ; N U ; B 125 -18 702 562 ;\r\nC 86 ; WX 600 ; N V ; B 105 -13 723 562 ;\r\nC 87 ; WX 600 ; N W ; B 106 -13 722 562 ;\r\nC 88 ; WX 600 ; N X ; B 23 0 675 562 ;\r\nC 89 ; WX 600 ; N Y ; B 133 0 695 562 ;\r\nC 90 ; WX 600 ; N Z ; B 86 0 610 562 ;\r\nC 91 ; WX 600 ; N bracketleft ; B 246 -108 574 622 ;\r\nC 92 ; WX 600 ; N backslash ; B 249 -80 468 629 ;\r\nC 93 ; WX 600 ; N bracketright ; B 135 -108 463 622 ;\r\nC 94 ; WX 600 ; N asciicircum ; B 175 354 587 622 ;\r\nC 95 ; WX 600 ; N underscore ; B -27 -125 584 -75 ;\r\nC 96 ; WX 600 ; N quoteleft ; B 343 328 457 562 ;\r\nC 97 ; WX 600 ; N a ; B 76 -15 569 441 ;\r\nC 98 ; WX 600 ; N b ; B 29 -15 625 629 ;\r\nC 99 ; WX 600 ; N c ; B 106 -15 608 441 ;\r\nC 100 ; WX 600 ; N d ; B 85 -15 640 629 ;\r\nC 101 ; WX 600 ; N e ; B 106 -15 598 441 ;\r\nC 102 ; WX 600 ; N f ; B 114 0 662 629 ; L i fi ; L l fl ;\r\nC 103 ; WX 600 ; N g ; B 61 -157 657 441 ;\r\nC 104 ; WX 600 ; N h ; B 33 0 592 629 ;\r\nC 105 ; WX 600 ; N i ; B 95 0 515 657 ;\r\nC 106 ; WX 600 ; N j ; B 52 -157 550 657 ;\r\nC 107 ; WX 600 ; N k ; B 58 0 633 629 ;\r\nC 108 ; WX 600 ; N l ; B 95 0 515 629 ;\r\nC 109 ; WX 600 ; N m ; B -5 0 615 441 ;\r\nC 110 ; WX 600 ; N n ; B 26 0 585 441 ;\r\nC 111 ; WX 600 ; N o ; B 102 -15 588 441 ;\r\nC 112 ; WX 600 ; N p ; B -24 -157 605 441 ;\r\nC 113 ; WX 600 ; N q ; B 85 -157 682 441 ;\r\nC 114 ; WX 600 ; N r ; B 60 0 636 441 ;\r\nC 115 ; WX 600 ; N s ; B 78 -15 584 441 ;\r\nC 116 ; WX 600 ; N t ; B 167 -15 561 561 ;\r\nC 117 ; WX 600 ; N u ; B 101 -15 572 426 ;\r\nC 118 ; WX 600 ; N v ; B 90 -10 681 426 ;\r\nC 119 ; WX 600 ; N w ; B 76 -10 695 426 ;\r\nC 120 ; WX 600 ; N x ; B 20 0 655 426 ;\r\nC 121 ; WX 600 ; N y ; B -4 -157 683 426 ;\r\nC 122 ; WX 600 ; N z ; B 99 0 593 426 ;\r\nC 123 ; WX 600 ; N braceleft ; B 233 -108 569 622 ;\r\nC 124 ; WX 600 ; N bar ; B 222 -250 485 750 ;\r\nC 125 ; WX 600 ; N braceright ; B 140 -108 477 622 ;\r\nC 126 ; WX 600 ; N asciitilde ; B 116 197 600 320 ;\r\nC 161 ; WX 600 ; N exclamdown ; B 225 -157 445 430 ;\r\nC 162 ; WX 600 ; N cent ; B 151 -49 588 614 ;\r\nC 163 ; WX 600 ; N sterling ; B 124 -21 621 611 ;\r\nC 164 ; WX 600 ; N fraction ; B 84 -57 646 665 ;\r\nC 165 ; WX 600 ; N yen ; B 120 0 693 562 ;\r\nC 166 ; WX 600 ; N florin ; B -26 -143 671 622 ;\r\nC 167 ; WX 600 ; N section ; B 104 -78 590 580 ;\r\nC 168 ; WX 600 ; N currency ; B 94 58 628 506 ;\r\nC 169 ; WX 600 ; N quotesingle ; B 345 328 460 562 ;\r\nC 170 ; WX 600 ; N quotedblleft ; B 262 328 541 562 ;\r\nC 171 ; WX 600 ; N guillemotleft ; B 92 70 652 446 ;\r\nC 172 ; WX 600 ; N guilsinglleft ; B 204 70 540 446 ;\r\nC 173 ; WX 600 ; N guilsinglright ; B 170 70 506 446 ;\r\nC 174 ; WX 600 ; N fi ; B 3 0 619 629 ;\r\nC 175 ; WX 600 ; N fl ; B 3 0 619 629 ;\r\nC 177 ; WX 600 ; N endash ; B 124 231 586 285 ;\r\nC 178 ; WX 600 ; N dagger ; B 217 -78 546 580 ;\r\nC 179 ; WX 600 ; N daggerdbl ; B 163 -78 546 580 ;\r\nC 180 ; WX 600 ; N periodcentered ; B 275 189 434 327 ;\r\nC 182 ; WX 600 ; N paragraph ; B 100 -78 630 562 ;\r\nC 183 ; WX 600 ; N bullet ; B 224 130 485 383 ;\r\nC 184 ; WX 600 ; N quotesinglbase ; B 185 -134 397 100 ;\r\nC 185 ; WX 600 ; N quotedblbase ; B 115 -134 478 100 ;\r\nC 186 ; WX 600 ; N quotedblright ; B 213 328 576 562 ;\r\nC 187 ; WX 600 ; N guillemotright ; B 58 70 618 446 ;\r\nC 188 ; WX 600 ; N ellipsis ; B 46 -15 575 111 ;\r\nC 189 ; WX 600 ; N perthousand ; B 59 -15 627 622 ;\r\nC 191 ; WX 600 ; N questiondown ; B 105 -157 466 430 ;\r\nC 193 ; WX 600 ; N grave ; B 294 497 484 672 ;\r\nC 194 ; WX 600 ; N acute ; B 348 497 612 672 ;\r\nC 195 ; WX 600 ; N circumflex ; B 229 477 581 654 ;\r\nC 196 ; WX 600 ; N tilde ; B 212 489 629 606 ;\r\nC 197 ; WX 600 ; N macron ; B 232 525 600 565 ;\r\nC 198 ; WX 600 ; N breve ; B 279 501 576 609 ;\r\nC 199 ; WX 600 ; N dotaccent ; B 373 537 478 640 ;\r\nC 200 ; WX 600 ; N dieresis ; B 272 537 579 640 ;\r\nC 202 ; WX 600 ; N ring ; B 332 463 500 627 ;\r\nC 203 ; WX 600 ; N cedilla ; B 197 -151 344 10 ;\r\nC 205 ; WX 600 ; N hungarumlaut ; B 239 497 683 672 ;\r\nC 206 ; WX 600 ; N ogonek ; B 189 -172 377 4 ;\r\nC 207 ; WX 600 ; N caron ; B 262 492 614 669 ;\r\nC 208 ; WX 600 ; N emdash ; B 49 231 661 285 ;\r\nC 225 ; WX 600 ; N AE ; B 3 0 655 562 ;\r\nC 227 ; WX 600 ; N ordfeminine ; B 209 249 512 580 ;\r\nC 232 ; WX 600 ; N Lslash ; B 47 0 607 562 ;\r\nC 233 ; WX 600 ; N Oslash ; B 94 -80 625 629 ;\r\nC 234 ; WX 600 ; N OE ; B 59 0 672 562 ;\r\nC 235 ; WX 600 ; N ordmasculine ; B 210 249 535 580 ;\r\nC 241 ; WX 600 ; N ae ; B 41 -15 626 441 ;\r\nC 245 ; WX 600 ; N dotlessi ; B 95 0 515 426 ;\r\nC 248 ; WX 600 ; N lslash ; B 95 0 587 629 ;\r\nC 249 ; WX 600 ; N oslash ; B 102 -80 588 506 ;\r\nC 250 ; WX 600 ; N oe ; B 54 -15 615 441 ;\r\nC 251 ; WX 600 ; N germandbls ; B 48 -15 617 629 ;\r\nC -1 ; WX 600 ; N Idieresis ; B 96 0 623 753 ;\r\nC -1 ; WX 600 ; N eacute ; B 106 -15 612 672 ;\r\nC -1 ; WX 600 ; N abreve ; B 76 -15 576 609 ;\r\nC -1 ; WX 600 ; N uhungarumlaut ; B 101 -15 723 672 ;\r\nC -1 ; WX 600 ; N ecaron ; B 106 -15 614 669 ;\r\nC -1 ; WX 600 ; N Ydieresis ; B 133 0 695 753 ;\r\nC -1 ; WX 600 ; N divide ; B 136 48 573 467 ;\r\nC -1 ; WX 600 ; N Yacute ; B 133 0 695 805 ;\r\nC -1 ; WX 600 ; N Acircumflex ; B 3 0 607 787 ;\r\nC -1 ; WX 600 ; N aacute ; B 76 -15 612 672 ;\r\nC -1 ; WX 600 ; N Ucircumflex ; B 125 -18 702 787 ;\r\nC -1 ; WX 600 ; N yacute ; B -4 -157 683 672 ;\r\nC -1 ; WX 600 ; N scommaaccent ; B 78 -250 584 441 ;\r\nC -1 ; WX 600 ; N ecircumflex ; B 106 -15 598 654 ;\r\nC -1 ; WX 600 ; N Uring ; B 125 -18 702 760 ;\r\nC -1 ; WX 600 ; N Udieresis ; B 125 -18 702 753 ;\r\nC -1 ; WX 600 ; N aogonek ; B 76 -172 569 441 ;\r\nC -1 ; WX 600 ; N Uacute ; B 125 -18 702 805 ;\r\nC -1 ; WX 600 ; N uogonek ; B 101 -172 572 426 ;\r\nC -1 ; WX 600 ; N Edieresis ; B 53 0 660 753 ;\r\nC -1 ; WX 600 ; N Dcroat ; B 43 0 645 562 ;\r\nC -1 ; WX 600 ; N commaaccent ; B 145 -250 323 -58 ;\r\nC -1 ; WX 600 ; N copyright ; B 53 -18 667 580 ;\r\nC -1 ; WX 600 ; N Emacron ; B 53 0 660 698 ;\r\nC -1 ; WX 600 ; N ccaron ; B 106 -15 614 669 ;\r\nC -1 ; WX 600 ; N aring ; B 76 -15 569 627 ;\r\nC -1 ; WX 600 ; N Ncommaaccent ; B 7 -250 712 562 ;\r\nC -1 ; WX 600 ; N lacute ; B 95 0 640 805 ;\r\nC -1 ; WX 600 ; N agrave ; B 76 -15 569 672 ;\r\nC -1 ; WX 600 ; N Tcommaaccent ; B 108 -250 665 562 ;\r\nC -1 ; WX 600 ; N Cacute ; B 93 -18 655 805 ;\r\nC -1 ; WX 600 ; N atilde ; B 76 -15 629 606 ;\r\nC -1 ; WX 600 ; N Edotaccent ; B 53 0 660 753 ;\r\nC -1 ; WX 600 ; N scaron ; B 78 -15 614 669 ;\r\nC -1 ; WX 600 ; N scedilla ; B 78 -151 584 441 ;\r\nC -1 ; WX 600 ; N iacute ; B 95 0 612 672 ;\r\nC -1 ; WX 600 ; N lozenge ; B 94 0 519 706 ;\r\nC -1 ; WX 600 ; N Rcaron ; B 38 0 642 802 ;\r\nC -1 ; WX 600 ; N Gcommaaccent ; B 83 -250 645 580 ;\r\nC -1 ; WX 600 ; N ucircumflex ; B 101 -15 572 654 ;\r\nC -1 ; WX 600 ; N acircumflex ; B 76 -15 581 654 ;\r\nC -1 ; WX 600 ; N Amacron ; B 3 0 607 698 ;\r\nC -1 ; WX 600 ; N rcaron ; B 60 0 636 669 ;\r\nC -1 ; WX 600 ; N ccedilla ; B 106 -151 614 441 ;\r\nC -1 ; WX 600 ; N Zdotaccent ; B 86 0 610 753 ;\r\nC -1 ; WX 600 ; N Thorn ; B 79 0 606 562 ;\r\nC -1 ; WX 600 ; N Omacron ; B 94 -18 628 698 ;\r\nC -1 ; WX 600 ; N Racute ; B 38 0 670 805 ;\r\nC -1 ; WX 600 ; N Sacute ; B 76 -20 650 805 ;\r\nC -1 ; WX 600 ; N dcaron ; B 85 -15 849 629 ;\r\nC -1 ; WX 600 ; N Umacron ; B 125 -18 702 698 ;\r\nC -1 ; WX 600 ; N uring ; B 101 -15 572 627 ;\r\nC -1 ; WX 600 ; N threesuperior ; B 213 240 501 622 ;\r\nC -1 ; WX 600 ; N Ograve ; B 94 -18 625 805 ;\r\nC -1 ; WX 600 ; N Agrave ; B 3 0 607 805 ;\r\nC -1 ; WX 600 ; N Abreve ; B 3 0 607 732 ;\r\nC -1 ; WX 600 ; N multiply ; B 103 43 607 470 ;\r\nC -1 ; WX 600 ; N uacute ; B 101 -15 602 672 ;\r\nC -1 ; WX 600 ; N Tcaron ; B 108 0 665 802 ;\r\nC -1 ; WX 600 ; N partialdiff ; B 45 -38 546 710 ;\r\nC -1 ; WX 600 ; N ydieresis ; B -4 -157 683 620 ;\r\nC -1 ; WX 600 ; N Nacute ; B 7 -13 712 805 ;\r\nC -1 ; WX 600 ; N icircumflex ; B 95 0 551 654 ;\r\nC -1 ; WX 600 ; N Ecircumflex ; B 53 0 660 787 ;\r\nC -1 ; WX 600 ; N adieresis ; B 76 -15 575 620 ;\r\nC -1 ; WX 600 ; N edieresis ; B 106 -15 598 620 ;\r\nC -1 ; WX 600 ; N cacute ; B 106 -15 612 672 ;\r\nC -1 ; WX 600 ; N nacute ; B 26 0 602 672 ;\r\nC -1 ; WX 600 ; N umacron ; B 101 -15 600 565 ;\r\nC -1 ; WX 600 ; N Ncaron ; B 7 -13 712 802 ;\r\nC -1 ; WX 600 ; N Iacute ; B 96 0 640 805 ;\r\nC -1 ; WX 600 ; N plusminus ; B 96 44 594 558 ;\r\nC -1 ; WX 600 ; N brokenbar ; B 238 -175 469 675 ;\r\nC -1 ; WX 600 ; N registered ; B 53 -18 667 580 ;\r\nC -1 ; WX 600 ; N Gbreve ; B 83 -18 645 732 ;\r\nC -1 ; WX 600 ; N Idotaccent ; B 96 0 623 753 ;\r\nC -1 ; WX 600 ; N summation ; B 15 -10 670 706 ;\r\nC -1 ; WX 600 ; N Egrave ; B 53 0 660 805 ;\r\nC -1 ; WX 600 ; N racute ; B 60 0 636 672 ;\r\nC -1 ; WX 600 ; N omacron ; B 102 -15 600 565 ;\r\nC -1 ; WX 600 ; N Zacute ; B 86 0 670 805 ;\r\nC -1 ; WX 600 ; N Zcaron ; B 86 0 642 802 ;\r\nC -1 ; WX 600 ; N greaterequal ; B 98 0 594 710 ;\r\nC -1 ; WX 600 ; N Eth ; B 43 0 645 562 ;\r\nC -1 ; WX 600 ; N Ccedilla ; B 93 -151 658 580 ;\r\nC -1 ; WX 600 ; N lcommaaccent ; B 95 -250 515 629 ;\r\nC -1 ; WX 600 ; N tcaron ; B 167 -15 587 717 ;\r\nC -1 ; WX 600 ; N eogonek ; B 106 -172 598 441 ;\r\nC -1 ; WX 600 ; N Uogonek ; B 124 -172 702 562 ;\r\nC -1 ; WX 600 ; N Aacute ; B 3 0 660 805 ;\r\nC -1 ; WX 600 ; N Adieresis ; B 3 0 607 753 ;\r\nC -1 ; WX 600 ; N egrave ; B 106 -15 598 672 ;\r\nC -1 ; WX 600 ; N zacute ; B 99 0 612 672 ;\r\nC -1 ; WX 600 ; N iogonek ; B 95 -172 515 657 ;\r\nC -1 ; WX 600 ; N Oacute ; B 94 -18 640 805 ;\r\nC -1 ; WX 600 ; N oacute ; B 102 -15 612 672 ;\r\nC -1 ; WX 600 ; N amacron ; B 76 -15 600 565 ;\r\nC -1 ; WX 600 ; N sacute ; B 78 -15 612 672 ;\r\nC -1 ; WX 600 ; N idieresis ; B 95 0 545 620 ;\r\nC -1 ; WX 600 ; N Ocircumflex ; B 94 -18 625 787 ;\r\nC -1 ; WX 600 ; N Ugrave ; B 125 -18 702 805 ;\r\nC -1 ; WX 600 ; N Delta ; B 6 0 598 688 ;\r\nC -1 ; WX 600 ; N thorn ; B -24 -157 605 629 ;\r\nC -1 ; WX 600 ; N twosuperior ; B 230 249 535 622 ;\r\nC -1 ; WX 600 ; N Odieresis ; B 94 -18 625 753 ;\r\nC -1 ; WX 600 ; N mu ; B 72 -157 572 426 ;\r\nC -1 ; WX 600 ; N igrave ; B 95 0 515 672 ;\r\nC -1 ; WX 600 ; N ohungarumlaut ; B 102 -15 723 672 ;\r\nC -1 ; WX 600 ; N Eogonek ; B 53 -172 660 562 ;\r\nC -1 ; WX 600 ; N dcroat ; B 85 -15 704 629 ;\r\nC -1 ; WX 600 ; N threequarters ; B 73 -56 659 666 ;\r\nC -1 ; WX 600 ; N Scedilla ; B 76 -151 650 580 ;\r\nC -1 ; WX 600 ; N lcaron ; B 95 0 667 629 ;\r\nC -1 ; WX 600 ; N Kcommaaccent ; B 38 -250 671 562 ;\r\nC -1 ; WX 600 ; N Lacute ; B 47 0 607 805 ;\r\nC -1 ; WX 600 ; N trademark ; B 75 263 742 562 ;\r\nC -1 ; WX 600 ; N edotaccent ; B 106 -15 598 620 ;\r\nC -1 ; WX 600 ; N Igrave ; B 96 0 623 805 ;\r\nC -1 ; WX 600 ; N Imacron ; B 96 0 628 698 ;\r\nC -1 ; WX 600 ; N Lcaron ; B 47 0 632 562 ;\r\nC -1 ; WX 600 ; N onehalf ; B 65 -57 669 665 ;\r\nC -1 ; WX 600 ; N lessequal ; B 98 0 645 710 ;\r\nC -1 ; WX 600 ; N ocircumflex ; B 102 -15 588 654 ;\r\nC -1 ; WX 600 ; N ntilde ; B 26 0 629 606 ;\r\nC -1 ; WX 600 ; N Uhungarumlaut ; B 125 -18 761 805 ;\r\nC -1 ; WX 600 ; N Eacute ; B 53 0 670 805 ;\r\nC -1 ; WX 600 ; N emacron ; B 106 -15 600 565 ;\r\nC -1 ; WX 600 ; N gbreve ; B 61 -157 657 609 ;\r\nC -1 ; WX 600 ; N onequarter ; B 65 -57 674 665 ;\r\nC -1 ; WX 600 ; N Scaron ; B 76 -20 672 802 ;\r\nC -1 ; WX 600 ; N Scommaaccent ; B 76 -250 650 580 ;\r\nC -1 ; WX 600 ; N Ohungarumlaut ; B 94 -18 751 805 ;\r\nC -1 ; WX 600 ; N degree ; B 214 269 576 622 ;\r\nC -1 ; WX 600 ; N ograve ; B 102 -15 588 672 ;\r\nC -1 ; WX 600 ; N Ccaron ; B 93 -18 672 802 ;\r\nC -1 ; WX 600 ; N ugrave ; B 101 -15 572 672 ;\r\nC -1 ; WX 600 ; N radical ; B 85 -15 765 792 ;\r\nC -1 ; WX 600 ; N Dcaron ; B 43 0 645 802 ;\r\nC -1 ; WX 600 ; N rcommaaccent ; B 60 -250 636 441 ;\r\nC -1 ; WX 600 ; N Ntilde ; B 7 -13 712 729 ;\r\nC -1 ; WX 600 ; N otilde ; B 102 -15 629 606 ;\r\nC -1 ; WX 600 ; N Rcommaaccent ; B 38 -250 598 562 ;\r\nC -1 ; WX 600 ; N Lcommaaccent ; B 47 -250 607 562 ;\r\nC -1 ; WX 600 ; N Atilde ; B 3 0 655 729 ;\r\nC -1 ; WX 600 ; N Aogonek ; B 3 -172 607 562 ;\r\nC -1 ; WX 600 ; N Aring ; B 3 0 607 750 ;\r\nC -1 ; WX 600 ; N Otilde ; B 94 -18 655 729 ;\r\nC -1 ; WX 600 ; N zdotaccent ; B 99 0 593 620 ;\r\nC -1 ; WX 600 ; N Ecaron ; B 53 0 660 802 ;\r\nC -1 ; WX 600 ; N Iogonek ; B 96 -172 623 562 ;\r\nC -1 ; WX 600 ; N kcommaaccent ; B 58 -250 633 629 ;\r\nC -1 ; WX 600 ; N minus ; B 129 232 580 283 ;\r\nC -1 ; WX 600 ; N Icircumflex ; B 96 0 623 787 ;\r\nC -1 ; WX 600 ; N ncaron ; B 26 0 614 669 ;\r\nC -1 ; WX 600 ; N tcommaaccent ; B 165 -250 561 561 ;\r\nC -1 ; WX 600 ; N logicalnot ; B 155 108 591 369 ;\r\nC -1 ; WX 600 ; N odieresis ; B 102 -15 588 620 ;\r\nC -1 ; WX 600 ; N udieresis ; B 101 -15 575 620 ;\r\nC -1 ; WX 600 ; N notequal ; B 43 -16 621 529 ;\r\nC -1 ; WX 600 ; N gcommaaccent ; B 61 -157 657 708 ;\r\nC -1 ; WX 600 ; N eth ; B 102 -15 639 629 ;\r\nC -1 ; WX 600 ; N zcaron ; B 99 0 624 669 ;\r\nC -1 ; WX 600 ; N ncommaaccent ; B 26 -250 585 441 ;\r\nC -1 ; WX 600 ; N onesuperior ; B 231 249 491 622 ;\r\nC -1 ; WX 600 ; N imacron ; B 95 0 543 565 ;\r\nC -1 ; WX 600 ; N Euro ; B 0 0 0 0 ;\r\nEndCharMetrics\r\nEndFontMetrics\r\n",
  'Courier-BoldOblique.afm': "StartFontMetrics 4.1\r\nComment Copyright (c) 1989, 1990, 1991, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.\r\nComment Creation Date: Mon Jun 23 16:28:46 1997\r\nComment UniqueID 43049\r\nComment VMusage 17529 79244\r\nFontName Courier-BoldOblique\r\nFullName Courier Bold Oblique\r\nFamilyName Courier\r\nWeight Bold\r\nItalicAngle -12\r\nIsFixedPitch true\r\nCharacterSet ExtendedRoman\r\nFontBBox -57 -250 869 801 \r\nUnderlinePosition -100\r\nUnderlineThickness 50\r\nVersion 003.000\r\nNotice Copyright (c) 1989, 1990, 1991, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.\r\nEncodingScheme AdobeStandardEncoding\r\nCapHeight 562\r\nXHeight 439\r\nAscender 629\r\nDescender -157\r\nStdHW 84\r\nStdVW 106\r\nStartCharMetrics 315\r\nC 32 ; WX 600 ; N space ; B 0 0 0 0 ;\r\nC 33 ; WX 600 ; N exclam ; B 215 -15 495 572 ;\r\nC 34 ; WX 600 ; N quotedbl ; B 211 277 585 562 ;\r\nC 35 ; WX 600 ; N numbersign ; B 88 -45 641 651 ;\r\nC 36 ; WX 600 ; N dollar ; B 87 -126 630 666 ;\r\nC 37 ; WX 600 ; N percent ; B 101 -15 625 616 ;\r\nC 38 ; WX 600 ; N ampersand ; B 61 -15 595 543 ;\r\nC 39 ; WX 600 ; N quoteright ; B 229 277 543 562 ;\r\nC 40 ; WX 600 ; N parenleft ; B 265 -102 592 616 ;\r\nC 41 ; WX 600 ; N parenright ; B 117 -102 444 616 ;\r\nC 42 ; WX 600 ; N asterisk ; B 179 219 598 601 ;\r\nC 43 ; WX 600 ; N plus ; B 114 39 596 478 ;\r\nC 44 ; WX 600 ; N comma ; B 99 -111 430 174 ;\r\nC 45 ; WX 600 ; N hyphen ; B 143 203 567 313 ;\r\nC 46 ; WX 600 ; N period ; B 206 -15 427 171 ;\r\nC 47 ; WX 600 ; N slash ; B 90 -77 626 626 ;\r\nC 48 ; WX 600 ; N zero ; B 135 -15 593 616 ;\r\nC 49 ; WX 600 ; N one ; B 93 0 562 616 ;\r\nC 50 ; WX 600 ; N two ; B 61 0 594 616 ;\r\nC 51 ; WX 600 ; N three ; B 71 -15 571 616 ;\r\nC 52 ; WX 600 ; N four ; B 81 0 559 616 ;\r\nC 53 ; WX 600 ; N five ; B 77 -15 621 601 ;\r\nC 54 ; WX 600 ; N six ; B 135 -15 652 616 ;\r\nC 55 ; WX 600 ; N seven ; B 147 0 622 601 ;\r\nC 56 ; WX 600 ; N eight ; B 115 -15 604 616 ;\r\nC 57 ; WX 600 ; N nine ; B 75 -15 592 616 ;\r\nC 58 ; WX 600 ; N colon ; B 205 -15 480 425 ;\r\nC 59 ; WX 600 ; N semicolon ; B 99 -111 481 425 ;\r\nC 60 ; WX 600 ; N less ; B 120 15 613 501 ;\r\nC 61 ; WX 600 ; N equal ; B 96 118 614 398 ;\r\nC 62 ; WX 600 ; N greater ; B 97 15 589 501 ;\r\nC 63 ; WX 600 ; N question ; B 183 -14 592 580 ;\r\nC 64 ; WX 600 ; N at ; B 65 -15 642 616 ;\r\nC 65 ; WX 600 ; N A ; B -9 0 632 562 ;\r\nC 66 ; WX 600 ; N B ; B 30 0 630 562 ;\r\nC 67 ; WX 600 ; N C ; B 74 -18 675 580 ;\r\nC 68 ; WX 600 ; N D ; B 30 0 664 562 ;\r\nC 69 ; WX 600 ; N E ; B 25 0 670 562 ;\r\nC 70 ; WX 600 ; N F ; B 39 0 684 562 ;\r\nC 71 ; WX 600 ; N G ; B 74 -18 675 580 ;\r\nC 72 ; WX 600 ; N H ; B 20 0 700 562 ;\r\nC 73 ; WX 600 ; N I ; B 77 0 643 562 ;\r\nC 74 ; WX 600 ; N J ; B 58 -18 721 562 ;\r\nC 75 ; WX 600 ; N K ; B 21 0 692 562 ;\r\nC 76 ; WX 600 ; N L ; B 39 0 636 562 ;\r\nC 77 ; WX 600 ; N M ; B -2 0 722 562 ;\r\nC 78 ; WX 600 ; N N ; B 8 -12 730 562 ;\r\nC 79 ; WX 600 ; N O ; B 74 -18 645 580 ;\r\nC 80 ; WX 600 ; N P ; B 48 0 643 562 ;\r\nC 81 ; WX 600 ; N Q ; B 83 -138 636 580 ;\r\nC 82 ; WX 600 ; N R ; B 24 0 617 562 ;\r\nC 83 ; WX 600 ; N S ; B 54 -22 673 582 ;\r\nC 84 ; WX 600 ; N T ; B 86 0 679 562 ;\r\nC 85 ; WX 600 ; N U ; B 101 -18 716 562 ;\r\nC 86 ; WX 600 ; N V ; B 84 0 733 562 ;\r\nC 87 ; WX 600 ; N W ; B 79 0 738 562 ;\r\nC 88 ; WX 600 ; N X ; B 12 0 690 562 ;\r\nC 89 ; WX 600 ; N Y ; B 109 0 709 562 ;\r\nC 90 ; WX 600 ; N Z ; B 62 0 637 562 ;\r\nC 91 ; WX 600 ; N bracketleft ; B 223 -102 606 616 ;\r\nC 92 ; WX 600 ; N backslash ; B 222 -77 496 626 ;\r\nC 93 ; WX 600 ; N bracketright ; B 103 -102 486 616 ;\r\nC 94 ; WX 600 ; N asciicircum ; B 171 250 556 616 ;\r\nC 95 ; WX 600 ; N underscore ; B -27 -125 585 -75 ;\r\nC 96 ; WX 600 ; N quoteleft ; B 297 277 487 562 ;\r\nC 97 ; WX 600 ; N a ; B 61 -15 593 454 ;\r\nC 98 ; WX 600 ; N b ; B 13 -15 636 626 ;\r\nC 99 ; WX 600 ; N c ; B 81 -15 631 459 ;\r\nC 100 ; WX 600 ; N d ; B 60 -15 645 626 ;\r\nC 101 ; WX 600 ; N e ; B 81 -15 605 454 ;\r\nC 102 ; WX 600 ; N f ; B 83 0 677 626 ; L i fi ; L l fl ;\r\nC 103 ; WX 600 ; N g ; B 40 -146 674 454 ;\r\nC 104 ; WX 600 ; N h ; B 18 0 615 626 ;\r\nC 105 ; WX 600 ; N i ; B 77 0 546 658 ;\r\nC 106 ; WX 600 ; N j ; B 36 -146 580 658 ;\r\nC 107 ; WX 600 ; N k ; B 33 0 643 626 ;\r\nC 108 ; WX 600 ; N l ; B 77 0 546 626 ;\r\nC 109 ; WX 600 ; N m ; B -22 0 649 454 ;\r\nC 110 ; WX 600 ; N n ; B 18 0 615 454 ;\r\nC 111 ; WX 600 ; N o ; B 71 -15 622 454 ;\r\nC 112 ; WX 600 ; N p ; B -32 -142 622 454 ;\r\nC 113 ; WX 600 ; N q ; B 60 -142 685 454 ;\r\nC 114 ; WX 600 ; N r ; B 47 0 655 454 ;\r\nC 115 ; WX 600 ; N s ; B 66 -17 608 459 ;\r\nC 116 ; WX 600 ; N t ; B 118 -15 567 562 ;\r\nC 117 ; WX 600 ; N u ; B 70 -15 592 439 ;\r\nC 118 ; WX 600 ; N v ; B 70 0 695 439 ;\r\nC 119 ; WX 600 ; N w ; B 53 0 712 439 ;\r\nC 120 ; WX 600 ; N x ; B 6 0 671 439 ;\r\nC 121 ; WX 600 ; N y ; B -21 -142 695 439 ;\r\nC 122 ; WX 600 ; N z ; B 81 0 614 439 ;\r\nC 123 ; WX 600 ; N braceleft ; B 203 -102 595 616 ;\r\nC 124 ; WX 600 ; N bar ; B 201 -250 505 750 ;\r\nC 125 ; WX 600 ; N braceright ; B 114 -102 506 616 ;\r\nC 126 ; WX 600 ; N asciitilde ; B 120 153 590 356 ;\r\nC 161 ; WX 600 ; N exclamdown ; B 196 -146 477 449 ;\r\nC 162 ; WX 600 ; N cent ; B 121 -49 605 614 ;\r\nC 163 ; WX 600 ; N sterling ; B 106 -28 650 611 ;\r\nC 164 ; WX 600 ; N fraction ; B 22 -60 708 661 ;\r\nC 165 ; WX 600 ; N yen ; B 98 0 710 562 ;\r\nC 166 ; WX 600 ; N florin ; B -57 -131 702 616 ;\r\nC 167 ; WX 600 ; N section ; B 74 -70 620 580 ;\r\nC 168 ; WX 600 ; N currency ; B 77 49 644 517 ;\r\nC 169 ; WX 600 ; N quotesingle ; B 303 277 493 562 ;\r\nC 170 ; WX 600 ; N quotedblleft ; B 190 277 594 562 ;\r\nC 171 ; WX 600 ; N guillemotleft ; B 62 70 639 446 ;\r\nC 172 ; WX 600 ; N guilsinglleft ; B 195 70 545 446 ;\r\nC 173 ; WX 600 ; N guilsinglright ; B 165 70 514 446 ;\r\nC 174 ; WX 600 ; N fi ; B 12 0 644 626 ;\r\nC 175 ; WX 600 ; N fl ; B 12 0 644 626 ;\r\nC 177 ; WX 600 ; N endash ; B 108 203 602 313 ;\r\nC 178 ; WX 600 ; N dagger ; B 175 -70 586 580 ;\r\nC 179 ; WX 600 ; N daggerdbl ; B 121 -70 587 580 ;\r\nC 180 ; WX 600 ; N periodcentered ; B 248 165 461 351 ;\r\nC 182 ; WX 600 ; N paragraph ; B 61 -70 700 580 ;\r\nC 183 ; WX 600 ; N bullet ; B 196 132 523 430 ;\r\nC 184 ; WX 600 ; N quotesinglbase ; B 144 -142 458 143 ;\r\nC 185 ; WX 600 ; N quotedblbase ; B 34 -142 560 143 ;\r\nC 186 ; WX 600 ; N quotedblright ; B 119 277 645 562 ;\r\nC 187 ; WX 600 ; N guillemotright ; B 71 70 647 446 ;\r\nC 188 ; WX 600 ; N ellipsis ; B 35 -15 587 116 ;\r\nC 189 ; WX 600 ; N perthousand ; B -45 -15 743 616 ;\r\nC 191 ; WX 600 ; N questiondown ; B 100 -146 509 449 ;\r\nC 193 ; WX 600 ; N grave ; B 272 508 503 661 ;\r\nC 194 ; WX 600 ; N acute ; B 312 508 609 661 ;\r\nC 195 ; WX 600 ; N circumflex ; B 212 483 607 657 ;\r\nC 196 ; WX 600 ; N tilde ; B 199 493 643 636 ;\r\nC 197 ; WX 600 ; N macron ; B 195 505 637 585 ;\r\nC 198 ; WX 600 ; N breve ; B 217 468 652 631 ;\r\nC 199 ; WX 600 ; N dotaccent ; B 348 498 493 638 ;\r\nC 200 ; WX 600 ; N dieresis ; B 246 498 595 638 ;\r\nC 202 ; WX 600 ; N ring ; B 319 481 528 678 ;\r\nC 203 ; WX 600 ; N cedilla ; B 168 -206 368 0 ;\r\nC 205 ; WX 600 ; N hungarumlaut ; B 171 488 729 661 ;\r\nC 206 ; WX 600 ; N ogonek ; B 143 -199 367 0 ;\r\nC 207 ; WX 600 ; N caron ; B 238 493 633 667 ;\r\nC 208 ; WX 600 ; N emdash ; B 33 203 677 313 ;\r\nC 225 ; WX 600 ; N AE ; B -29 0 708 562 ;\r\nC 227 ; WX 600 ; N ordfeminine ; B 188 196 526 580 ;\r\nC 232 ; WX 600 ; N Lslash ; B 39 0 636 562 ;\r\nC 233 ; WX 600 ; N Oslash ; B 48 -22 673 584 ;\r\nC 234 ; WX 600 ; N OE ; B 26 0 701 562 ;\r\nC 235 ; WX 600 ; N ordmasculine ; B 188 196 543 580 ;\r\nC 241 ; WX 600 ; N ae ; B 21 -15 652 454 ;\r\nC 245 ; WX 600 ; N dotlessi ; B 77 0 546 439 ;\r\nC 248 ; WX 600 ; N lslash ; B 77 0 587 626 ;\r\nC 249 ; WX 600 ; N oslash ; B 54 -24 638 463 ;\r\nC 250 ; WX 600 ; N oe ; B 18 -15 662 454 ;\r\nC 251 ; WX 600 ; N germandbls ; B 22 -15 629 626 ;\r\nC -1 ; WX 600 ; N Idieresis ; B 77 0 643 761 ;\r\nC -1 ; WX 600 ; N eacute ; B 81 -15 609 661 ;\r\nC -1 ; WX 600 ; N abreve ; B 61 -15 658 661 ;\r\nC -1 ; WX 600 ; N uhungarumlaut ; B 70 -15 769 661 ;\r\nC -1 ; WX 600 ; N ecaron ; B 81 -15 633 667 ;\r\nC -1 ; WX 600 ; N Ydieresis ; B 109 0 709 761 ;\r\nC -1 ; WX 600 ; N divide ; B 114 16 596 500 ;\r\nC -1 ; WX 600 ; N Yacute ; B 109 0 709 784 ;\r\nC -1 ; WX 600 ; N Acircumflex ; B -9 0 632 780 ;\r\nC -1 ; WX 600 ; N aacute ; B 61 -15 609 661 ;\r\nC -1 ; WX 600 ; N Ucircumflex ; B 101 -18 716 780 ;\r\nC -1 ; WX 600 ; N yacute ; B -21 -142 695 661 ;\r\nC -1 ; WX 600 ; N scommaaccent ; B 66 -250 608 459 ;\r\nC -1 ; WX 600 ; N ecircumflex ; B 81 -15 607 657 ;\r\nC -1 ; WX 600 ; N Uring ; B 101 -18 716 801 ;\r\nC -1 ; WX 600 ; N Udieresis ; B 101 -18 716 761 ;\r\nC -1 ; WX 600 ; N aogonek ; B 61 -199 593 454 ;\r\nC -1 ; WX 600 ; N Uacute ; B 101 -18 716 784 ;\r\nC -1 ; WX 600 ; N uogonek ; B 70 -199 592 439 ;\r\nC -1 ; WX 600 ; N Edieresis ; B 25 0 670 761 ;\r\nC -1 ; WX 600 ; N Dcroat ; B 30 0 664 562 ;\r\nC -1 ; WX 600 ; N commaaccent ; B 151 -250 385 -57 ;\r\nC -1 ; WX 600 ; N copyright ; B 53 -18 667 580 ;\r\nC -1 ; WX 600 ; N Emacron ; B 25 0 670 708 ;\r\nC -1 ; WX 600 ; N ccaron ; B 81 -15 633 667 ;\r\nC -1 ; WX 600 ; N aring ; B 61 -15 593 678 ;\r\nC -1 ; WX 600 ; N Ncommaaccent ; B 8 -250 730 562 ;\r\nC -1 ; WX 600 ; N lacute ; B 77 0 639 801 ;\r\nC -1 ; WX 600 ; N agrave ; B 61 -15 593 661 ;\r\nC -1 ; WX 600 ; N Tcommaaccent ; B 86 -250 679 562 ;\r\nC -1 ; WX 600 ; N Cacute ; B 74 -18 675 784 ;\r\nC -1 ; WX 600 ; N atilde ; B 61 -15 643 636 ;\r\nC -1 ; WX 600 ; N Edotaccent ; B 25 0 670 761 ;\r\nC -1 ; WX 600 ; N scaron ; B 66 -17 633 667 ;\r\nC -1 ; WX 600 ; N scedilla ; B 66 -206 608 459 ;\r\nC -1 ; WX 600 ; N iacute ; B 77 0 609 661 ;\r\nC -1 ; WX 600 ; N lozenge ; B 145 0 614 740 ;\r\nC -1 ; WX 600 ; N Rcaron ; B 24 0 659 790 ;\r\nC -1 ; WX 600 ; N Gcommaaccent ; B 74 -250 675 580 ;\r\nC -1 ; WX 600 ; N ucircumflex ; B 70 -15 597 657 ;\r\nC -1 ; WX 600 ; N acircumflex ; B 61 -15 607 657 ;\r\nC -1 ; WX 600 ; N Amacron ; B -9 0 633 708 ;\r\nC -1 ; WX 600 ; N rcaron ; B 47 0 655 667 ;\r\nC -1 ; WX 600 ; N ccedilla ; B 81 -206 631 459 ;\r\nC -1 ; WX 600 ; N Zdotaccent ; B 62 0 637 761 ;\r\nC -1 ; WX 600 ; N Thorn ; B 48 0 620 562 ;\r\nC -1 ; WX 600 ; N Omacron ; B 74 -18 663 708 ;\r\nC -1 ; WX 600 ; N Racute ; B 24 0 665 784 ;\r\nC -1 ; WX 600 ; N Sacute ; B 54 -22 673 784 ;\r\nC -1 ; WX 600 ; N dcaron ; B 60 -15 861 626 ;\r\nC -1 ; WX 600 ; N Umacron ; B 101 -18 716 708 ;\r\nC -1 ; WX 600 ; N uring ; B 70 -15 592 678 ;\r\nC -1 ; WX 600 ; N threesuperior ; B 193 222 526 616 ;\r\nC -1 ; WX 600 ; N Ograve ; B 74 -18 645 784 ;\r\nC -1 ; WX 600 ; N Agrave ; B -9 0 632 784 ;\r\nC -1 ; WX 600 ; N Abreve ; B -9 0 684 784 ;\r\nC -1 ; WX 600 ; N multiply ; B 104 39 606 478 ;\r\nC -1 ; WX 600 ; N uacute ; B 70 -15 599 661 ;\r\nC -1 ; WX 600 ; N Tcaron ; B 86 0 679 790 ;\r\nC -1 ; WX 600 ; N partialdiff ; B 91 -38 627 728 ;\r\nC -1 ; WX 600 ; N ydieresis ; B -21 -142 695 638 ;\r\nC -1 ; WX 600 ; N Nacute ; B 8 -12 730 784 ;\r\nC -1 ; WX 600 ; N icircumflex ; B 77 0 577 657 ;\r\nC -1 ; WX 600 ; N Ecircumflex ; B 25 0 670 780 ;\r\nC -1 ; WX 600 ; N adieresis ; B 61 -15 595 638 ;\r\nC -1 ; WX 600 ; N edieresis ; B 81 -15 605 638 ;\r\nC -1 ; WX 600 ; N cacute ; B 81 -15 649 661 ;\r\nC -1 ; WX 600 ; N nacute ; B 18 0 639 661 ;\r\nC -1 ; WX 600 ; N umacron ; B 70 -15 637 585 ;\r\nC -1 ; WX 600 ; N Ncaron ; B 8 -12 730 790 ;\r\nC -1 ; WX 600 ; N Iacute ; B 77 0 643 784 ;\r\nC -1 ; WX 600 ; N plusminus ; B 76 24 614 515 ;\r\nC -1 ; WX 600 ; N brokenbar ; B 217 -175 489 675 ;\r\nC -1 ; WX 600 ; N registered ; B 53 -18 667 580 ;\r\nC -1 ; WX 600 ; N Gbreve ; B 74 -18 684 784 ;\r\nC -1 ; WX 600 ; N Idotaccent ; B 77 0 643 761 ;\r\nC -1 ; WX 600 ; N summation ; B 15 -10 672 706 ;\r\nC -1 ; WX 600 ; N Egrave ; B 25 0 670 784 ;\r\nC -1 ; WX 600 ; N racute ; B 47 0 655 661 ;\r\nC -1 ; WX 600 ; N omacron ; B 71 -15 637 585 ;\r\nC -1 ; WX 600 ; N Zacute ; B 62 0 665 784 ;\r\nC -1 ; WX 600 ; N Zcaron ; B 62 0 659 790 ;\r\nC -1 ; WX 600 ; N greaterequal ; B 26 0 627 696 ;\r\nC -1 ; WX 600 ; N Eth ; B 30 0 664 562 ;\r\nC -1 ; WX 600 ; N Ccedilla ; B 74 -206 675 580 ;\r\nC -1 ; WX 600 ; N lcommaaccent ; B 77 -250 546 626 ;\r\nC -1 ; WX 600 ; N tcaron ; B 118 -15 627 703 ;\r\nC -1 ; WX 600 ; N eogonek ; B 81 -199 605 454 ;\r\nC -1 ; WX 600 ; N Uogonek ; B 101 -199 716 562 ;\r\nC -1 ; WX 600 ; N Aacute ; B -9 0 655 784 ;\r\nC -1 ; WX 600 ; N Adieresis ; B -9 0 632 761 ;\r\nC -1 ; WX 600 ; N egrave ; B 81 -15 605 661 ;\r\nC -1 ; WX 600 ; N zacute ; B 81 0 614 661 ;\r\nC -1 ; WX 600 ; N iogonek ; B 77 -199 546 658 ;\r\nC -1 ; WX 600 ; N Oacute ; B 74 -18 645 784 ;\r\nC -1 ; WX 600 ; N oacute ; B 71 -15 649 661 ;\r\nC -1 ; WX 600 ; N amacron ; B 61 -15 637 585 ;\r\nC -1 ; WX 600 ; N sacute ; B 66 -17 609 661 ;\r\nC -1 ; WX 600 ; N idieresis ; B 77 0 561 618 ;\r\nC -1 ; WX 600 ; N Ocircumflex ; B 74 -18 645 780 ;\r\nC -1 ; WX 600 ; N Ugrave ; B 101 -18 716 784 ;\r\nC -1 ; WX 600 ; N Delta ; B 6 0 594 688 ;\r\nC -1 ; WX 600 ; N thorn ; B -32 -142 622 626 ;\r\nC -1 ; WX 600 ; N twosuperior ; B 191 230 542 616 ;\r\nC -1 ; WX 600 ; N Odieresis ; B 74 -18 645 761 ;\r\nC -1 ; WX 600 ; N mu ; B 49 -142 592 439 ;\r\nC -1 ; WX 600 ; N igrave ; B 77 0 546 661 ;\r\nC -1 ; WX 600 ; N ohungarumlaut ; B 71 -15 809 661 ;\r\nC -1 ; WX 600 ; N Eogonek ; B 25 -199 670 562 ;\r\nC -1 ; WX 600 ; N dcroat ; B 60 -15 712 626 ;\r\nC -1 ; WX 600 ; N threequarters ; B 8 -60 699 661 ;\r\nC -1 ; WX 600 ; N Scedilla ; B 54 -206 673 582 ;\r\nC -1 ; WX 600 ; N lcaron ; B 77 0 731 626 ;\r\nC -1 ; WX 600 ; N Kcommaaccent ; B 21 -250 692 562 ;\r\nC -1 ; WX 600 ; N Lacute ; B 39 0 636 784 ;\r\nC -1 ; WX 600 ; N trademark ; B 86 230 869 562 ;\r\nC -1 ; WX 600 ; N edotaccent ; B 81 -15 605 638 ;\r\nC -1 ; WX 600 ; N Igrave ; B 77 0 643 784 ;\r\nC -1 ; WX 600 ; N Imacron ; B 77 0 663 708 ;\r\nC -1 ; WX 600 ; N Lcaron ; B 39 0 757 562 ;\r\nC -1 ; WX 600 ; N onehalf ; B 22 -60 716 661 ;\r\nC -1 ; WX 600 ; N lessequal ; B 26 0 671 696 ;\r\nC -1 ; WX 600 ; N ocircumflex ; B 71 -15 622 657 ;\r\nC -1 ; WX 600 ; N ntilde ; B 18 0 643 636 ;\r\nC -1 ; WX 600 ; N Uhungarumlaut ; B 101 -18 805 784 ;\r\nC -1 ; WX 600 ; N Eacute ; B 25 0 670 784 ;\r\nC -1 ; WX 600 ; N emacron ; B 81 -15 637 585 ;\r\nC -1 ; WX 600 ; N gbreve ; B 40 -146 674 661 ;\r\nC -1 ; WX 600 ; N onequarter ; B 13 -60 707 661 ;\r\nC -1 ; WX 600 ; N Scaron ; B 54 -22 689 790 ;\r\nC -1 ; WX 600 ; N Scommaaccent ; B 54 -250 673 582 ;\r\nC -1 ; WX 600 ; N Ohungarumlaut ; B 74 -18 795 784 ;\r\nC -1 ; WX 600 ; N degree ; B 173 243 570 616 ;\r\nC -1 ; WX 600 ; N ograve ; B 71 -15 622 661 ;\r\nC -1 ; WX 600 ; N Ccaron ; B 74 -18 689 790 ;\r\nC -1 ; WX 600 ; N ugrave ; B 70 -15 592 661 ;\r\nC -1 ; WX 600 ; N radical ; B 67 -104 635 778 ;\r\nC -1 ; WX 600 ; N Dcaron ; B 30 0 664 790 ;\r\nC -1 ; WX 600 ; N rcommaaccent ; B 47 -250 655 454 ;\r\nC -1 ; WX 600 ; N Ntilde ; B 8 -12 730 759 ;\r\nC -1 ; WX 600 ; N otilde ; B 71 -15 643 636 ;\r\nC -1 ; WX 600 ; N Rcommaaccent ; B 24 -250 617 562 ;\r\nC -1 ; WX 600 ; N Lcommaaccent ; B 39 -250 636 562 ;\r\nC -1 ; WX 600 ; N Atilde ; B -9 0 669 759 ;\r\nC -1 ; WX 600 ; N Aogonek ; B -9 -199 632 562 ;\r\nC -1 ; WX 600 ; N Aring ; B -9 0 632 801 ;\r\nC -1 ; WX 600 ; N Otilde ; B 74 -18 669 759 ;\r\nC -1 ; WX 600 ; N zdotaccent ; B 81 0 614 638 ;\r\nC -1 ; WX 600 ; N Ecaron ; B 25 0 670 790 ;\r\nC -1 ; WX 600 ; N Iogonek ; B 77 -199 643 562 ;\r\nC -1 ; WX 600 ; N kcommaaccent ; B 33 -250 643 626 ;\r\nC -1 ; WX 600 ; N minus ; B 114 203 596 313 ;\r\nC -1 ; WX 600 ; N Icircumflex ; B 77 0 643 780 ;\r\nC -1 ; WX 600 ; N ncaron ; B 18 0 633 667 ;\r\nC -1 ; WX 600 ; N tcommaaccent ; B 118 -250 567 562 ;\r\nC -1 ; WX 600 ; N logicalnot ; B 135 103 617 413 ;\r\nC -1 ; WX 600 ; N odieresis ; B 71 -15 622 638 ;\r\nC -1 ; WX 600 ; N udieresis ; B 70 -15 595 638 ;\r\nC -1 ; WX 600 ; N notequal ; B 30 -47 626 563 ;\r\nC -1 ; WX 600 ; N gcommaaccent ; B 40 -146 674 714 ;\r\nC -1 ; WX 600 ; N eth ; B 93 -27 661 626 ;\r\nC -1 ; WX 600 ; N zcaron ; B 81 0 643 667 ;\r\nC -1 ; WX 600 ; N ncommaaccent ; B 18 -250 615 454 ;\r\nC -1 ; WX 600 ; N onesuperior ; B 212 230 514 616 ;\r\nC -1 ; WX 600 ; N imacron ; B 77 0 575 585 ;\r\nC -1 ; WX 600 ; N Euro ; B 0 0 0 0 ;\r\nEndCharMetrics\r\nEndFontMetrics\r\n",
  'Helvetica.afm': "StartFontMetrics 4.1\r\nComment Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated.  All Rights Reserved.\r\nComment Creation Date: Thu May  1 12:38:23 1997\r\nComment UniqueID 43054\r\nComment VMusage 37069 48094\r\nFontName Helvetica\r\nFullName Helvetica\r\nFamilyName Helvetica\r\nWeight Medium\r\nItalicAngle 0\r\nIsFixedPitch false\r\nCharacterSet ExtendedRoman\r\nFontBBox -166 -225 1000 931 \r\nUnderlinePosition -100\r\nUnderlineThickness 50\r\nVersion 002.000\r\nNotice Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated.  All Rights Reserved.Helvetica is a trademark of Linotype-Hell AG and/or its subsidiaries.\r\nEncodingScheme AdobeStandardEncoding\r\nCapHeight 718\r\nXHeight 523\r\nAscender 718\r\nDescender -207\r\nStdHW 76\r\nStdVW 88\r\nStartCharMetrics 315\r\nC 32 ; WX 278 ; N space ; B 0 0 0 0 ;\r\nC 33 ; WX 278 ; N exclam ; B 90 0 187 718 ;\r\nC 34 ; WX 355 ; N quotedbl ; B 70 463 285 718 ;\r\nC 35 ; WX 556 ; N numbersign ; B 28 0 529 688 ;\r\nC 36 ; WX 556 ; N dollar ; B 32 -115 520 775 ;\r\nC 37 ; WX 889 ; N percent ; B 39 -19 850 703 ;\r\nC 38 ; WX 667 ; N ampersand ; B 44 -15 645 718 ;\r\nC 39 ; WX 222 ; N quoteright ; B 53 463 157 718 ;\r\nC 40 ; WX 333 ; N parenleft ; B 68 -207 299 733 ;\r\nC 41 ; WX 333 ; N parenright ; B 34 -207 265 733 ;\r\nC 42 ; WX 389 ; N asterisk ; B 39 431 349 718 ;\r\nC 43 ; WX 584 ; N plus ; B 39 0 545 505 ;\r\nC 44 ; WX 278 ; N comma ; B 87 -147 191 106 ;\r\nC 45 ; WX 333 ; N hyphen ; B 44 232 289 322 ;\r\nC 46 ; WX 278 ; N period ; B 87 0 191 106 ;\r\nC 47 ; WX 278 ; N slash ; B -17 -19 295 737 ;\r\nC 48 ; WX 556 ; N zero ; B 37 -19 519 703 ;\r\nC 49 ; WX 556 ; N one ; B 101 0 359 703 ;\r\nC 50 ; WX 556 ; N two ; B 26 0 507 703 ;\r\nC 51 ; WX 556 ; N three ; B 34 -19 522 703 ;\r\nC 52 ; WX 556 ; N four ; B 25 0 523 703 ;\r\nC 53 ; WX 556 ; N five ; B 32 -19 514 688 ;\r\nC 54 ; WX 556 ; N six ; B 38 -19 518 703 ;\r\nC 55 ; WX 556 ; N seven ; B 37 0 523 688 ;\r\nC 56 ; WX 556 ; N eight ; B 38 -19 517 703 ;\r\nC 57 ; WX 556 ; N nine ; B 42 -19 514 703 ;\r\nC 58 ; WX 278 ; N colon ; B 87 0 191 516 ;\r\nC 59 ; WX 278 ; N semicolon ; B 87 -147 191 516 ;\r\nC 60 ; WX 584 ; N less ; B 48 11 536 495 ;\r\nC 61 ; WX 584 ; N equal ; B 39 115 545 390 ;\r\nC 62 ; WX 584 ; N greater ; B 48 11 536 495 ;\r\nC 63 ; WX 556 ; N question ; B 56 0 492 727 ;\r\nC 64 ; WX 1015 ; N at ; B 147 -19 868 737 ;\r\nC 65 ; WX 667 ; N A ; B 14 0 654 718 ;\r\nC 66 ; WX 667 ; N B ; B 74 0 627 718 ;\r\nC 67 ; WX 722 ; N C ; B 44 -19 681 737 ;\r\nC 68 ; WX 722 ; N D ; B 81 0 674 718 ;\r\nC 69 ; WX 667 ; N E ; B 86 0 616 718 ;\r\nC 70 ; WX 611 ; N F ; B 86 0 583 718 ;\r\nC 71 ; WX 778 ; N G ; B 48 -19 704 737 ;\r\nC 72 ; WX 722 ; N H ; B 77 0 646 718 ;\r\nC 73 ; WX 278 ; N I ; B 91 0 188 718 ;\r\nC 74 ; WX 500 ; N J ; B 17 -19 428 718 ;\r\nC 75 ; WX 667 ; N K ; B 76 0 663 718 ;\r\nC 76 ; WX 556 ; N L ; B 76 0 537 718 ;\r\nC 77 ; WX 833 ; N M ; B 73 0 761 718 ;\r\nC 78 ; WX 722 ; N N ; B 76 0 646 718 ;\r\nC 79 ; WX 778 ; N O ; B 39 -19 739 737 ;\r\nC 80 ; WX 667 ; N P ; B 86 0 622 718 ;\r\nC 81 ; WX 778 ; N Q ; B 39 -56 739 737 ;\r\nC 82 ; WX 722 ; N R ; B 88 0 684 718 ;\r\nC 83 ; WX 667 ; N S ; B 49 -19 620 737 ;\r\nC 84 ; WX 611 ; N T ; B 14 0 597 718 ;\r\nC 85 ; WX 722 ; N U ; B 79 -19 644 718 ;\r\nC 86 ; WX 667 ; N V ; B 20 0 647 718 ;\r\nC 87 ; WX 944 ; N W ; B 16 0 928 718 ;\r\nC 88 ; WX 667 ; N X ; B 19 0 648 718 ;\r\nC 89 ; WX 667 ; N Y ; B 14 0 653 718 ;\r\nC 90 ; WX 611 ; N Z ; B 23 0 588 718 ;\r\nC 91 ; WX 278 ; N bracketleft ; B 63 -196 250 722 ;\r\nC 92 ; WX 278 ; N backslash ; B -17 -19 295 737 ;\r\nC 93 ; WX 278 ; N bracketright ; B 28 -196 215 722 ;\r\nC 94 ; WX 469 ; N asciicircum ; B -14 264 483 688 ;\r\nC 95 ; WX 556 ; N underscore ; B 0 -125 556 -75 ;\r\nC 96 ; WX 222 ; N quoteleft ; B 65 470 169 725 ;\r\nC 97 ; WX 556 ; N a ; B 36 -15 530 538 ;\r\nC 98 ; WX 556 ; N b ; B 58 -15 517 718 ;\r\nC 99 ; WX 500 ; N c ; B 30 -15 477 538 ;\r\nC 100 ; WX 556 ; N d ; B 35 -15 499 718 ;\r\nC 101 ; WX 556 ; N e ; B 40 -15 516 538 ;\r\nC 102 ; WX 278 ; N f ; B 14 0 262 728 ; L i fi ; L l fl ;\r\nC 103 ; WX 556 ; N g ; B 40 -220 499 538 ;\r\nC 104 ; WX 556 ; N h ; B 65 0 491 718 ;\r\nC 105 ; WX 222 ; N i ; B 67 0 155 718 ;\r\nC 106 ; WX 222 ; N j ; B -16 -210 155 718 ;\r\nC 107 ; WX 500 ; N k ; B 67 0 501 718 ;\r\nC 108 ; WX 222 ; N l ; B 67 0 155 718 ;\r\nC 109 ; WX 833 ; N m ; B 65 0 769 538 ;\r\nC 110 ; WX 556 ; N n ; B 65 0 491 538 ;\r\nC 111 ; WX 556 ; N o ; B 35 -14 521 538 ;\r\nC 112 ; WX 556 ; N p ; B 58 -207 517 538 ;\r\nC 113 ; WX 556 ; N q ; B 35 -207 494 538 ;\r\nC 114 ; WX 333 ; N r ; B 77 0 332 538 ;\r\nC 115 ; WX 500 ; N s ; B 32 -15 464 538 ;\r\nC 116 ; WX 278 ; N t ; B 14 -7 257 669 ;\r\nC 117 ; WX 556 ; N u ; B 68 -15 489 523 ;\r\nC 118 ; WX 500 ; N v ; B 8 0 492 523 ;\r\nC 119 ; WX 722 ; N w ; B 14 0 709 523 ;\r\nC 120 ; WX 500 ; N x ; B 11 0 490 523 ;\r\nC 121 ; WX 500 ; N y ; B 11 -214 489 523 ;\r\nC 122 ; WX 500 ; N z ; B 31 0 469 523 ;\r\nC 123 ; WX 334 ; N braceleft ; B 42 -196 292 722 ;\r\nC 124 ; WX 260 ; N bar ; B 94 -225 167 775 ;\r\nC 125 ; WX 334 ; N braceright ; B 42 -196 292 722 ;\r\nC 126 ; WX 584 ; N asciitilde ; B 61 180 523 326 ;\r\nC 161 ; WX 333 ; N exclamdown ; B 118 -195 215 523 ;\r\nC 162 ; WX 556 ; N cent ; B 51 -115 513 623 ;\r\nC 163 ; WX 556 ; N sterling ; B 33 -16 539 718 ;\r\nC 164 ; WX 167 ; N fraction ; B -166 -19 333 703 ;\r\nC 165 ; WX 556 ; N yen ; B 3 0 553 688 ;\r\nC 166 ; WX 556 ; N florin ; B -11 -207 501 737 ;\r\nC 167 ; WX 556 ; N section ; B 43 -191 512 737 ;\r\nC 168 ; WX 556 ; N currency ; B 28 99 528 603 ;\r\nC 169 ; WX 191 ; N quotesingle ; B 59 463 132 718 ;\r\nC 170 ; WX 333 ; N quotedblleft ; B 38 470 307 725 ;\r\nC 171 ; WX 556 ; N guillemotleft ; B 97 108 459 446 ;\r\nC 172 ; WX 333 ; N guilsinglleft ; B 88 108 245 446 ;\r\nC 173 ; WX 333 ; N guilsinglright ; B 88 108 245 446 ;\r\nC 174 ; WX 500 ; N fi ; B 14 0 434 728 ;\r\nC 175 ; WX 500 ; N fl ; B 14 0 432 728 ;\r\nC 177 ; WX 556 ; N endash ; B 0 240 556 313 ;\r\nC 178 ; WX 556 ; N dagger ; B 43 -159 514 718 ;\r\nC 179 ; WX 556 ; N daggerdbl ; B 43 -159 514 718 ;\r\nC 180 ; WX 278 ; N periodcentered ; B 77 190 202 315 ;\r\nC 182 ; WX 537 ; N paragraph ; B 18 -173 497 718 ;\r\nC 183 ; WX 350 ; N bullet ; B 18 202 333 517 ;\r\nC 184 ; WX 222 ; N quotesinglbase ; B 53 -149 157 106 ;\r\nC 185 ; WX 333 ; N quotedblbase ; B 26 -149 295 106 ;\r\nC 186 ; WX 333 ; N quotedblright ; B 26 463 295 718 ;\r\nC 187 ; WX 556 ; N guillemotright ; B 97 108 459 446 ;\r\nC 188 ; WX 1000 ; N ellipsis ; B 115 0 885 106 ;\r\nC 189 ; WX 1000 ; N perthousand ; B 7 -19 994 703 ;\r\nC 191 ; WX 611 ; N questiondown ; B 91 -201 527 525 ;\r\nC 193 ; WX 333 ; N grave ; B 14 593 211 734 ;\r\nC 194 ; WX 333 ; N acute ; B 122 593 319 734 ;\r\nC 195 ; WX 333 ; N circumflex ; B 21 593 312 734 ;\r\nC 196 ; WX 333 ; N tilde ; B -4 606 337 722 ;\r\nC 197 ; WX 333 ; N macron ; B 10 627 323 684 ;\r\nC 198 ; WX 333 ; N breve ; B 13 595 321 731 ;\r\nC 199 ; WX 333 ; N dotaccent ; B 121 604 212 706 ;\r\nC 200 ; WX 333 ; N dieresis ; B 40 604 293 706 ;\r\nC 202 ; WX 333 ; N ring ; B 75 572 259 756 ;\r\nC 203 ; WX 333 ; N cedilla ; B 45 -225 259 0 ;\r\nC 205 ; WX 333 ; N hungarumlaut ; B 31 593 409 734 ;\r\nC 206 ; WX 333 ; N ogonek ; B 73 -225 287 0 ;\r\nC 207 ; WX 333 ; N caron ; B 21 593 312 734 ;\r\nC 208 ; WX 1000 ; N emdash ; B 0 240 1000 313 ;\r\nC 225 ; WX 1000 ; N AE ; B 8 0 951 718 ;\r\nC 227 ; WX 370 ; N ordfeminine ; B 24 405 346 737 ;\r\nC 232 ; WX 556 ; N Lslash ; B -20 0 537 718 ;\r\nC 233 ; WX 778 ; N Oslash ; B 39 -19 740 737 ;\r\nC 234 ; WX 1000 ; N OE ; B 36 -19 965 737 ;\r\nC 235 ; WX 365 ; N ordmasculine ; B 25 405 341 737 ;\r\nC 241 ; WX 889 ; N ae ; B 36 -15 847 538 ;\r\nC 245 ; WX 278 ; N dotlessi ; B 95 0 183 523 ;\r\nC 248 ; WX 222 ; N lslash ; B -20 0 242 718 ;\r\nC 249 ; WX 611 ; N oslash ; B 28 -22 537 545 ;\r\nC 250 ; WX 944 ; N oe ; B 35 -15 902 538 ;\r\nC 251 ; WX 611 ; N germandbls ; B 67 -15 571 728 ;\r\nC -1 ; WX 278 ; N Idieresis ; B 13 0 266 901 ;\r\nC -1 ; WX 556 ; N eacute ; B 40 -15 516 734 ;\r\nC -1 ; WX 556 ; N abreve ; B 36 -15 530 731 ;\r\nC -1 ; WX 556 ; N uhungarumlaut ; B 68 -15 521 734 ;\r\nC -1 ; WX 556 ; N ecaron ; B 40 -15 516 734 ;\r\nC -1 ; WX 667 ; N Ydieresis ; B 14 0 653 901 ;\r\nC -1 ; WX 584 ; N divide ; B 39 -19 545 524 ;\r\nC -1 ; WX 667 ; N Yacute ; B 14 0 653 929 ;\r\nC -1 ; WX 667 ; N Acircumflex ; B 14 0 654 929 ;\r\nC -1 ; WX 556 ; N aacute ; B 36 -15 530 734 ;\r\nC -1 ; WX 722 ; N Ucircumflex ; B 79 -19 644 929 ;\r\nC -1 ; WX 500 ; N yacute ; B 11 -214 489 734 ;\r\nC -1 ; WX 500 ; N scommaaccent ; B 32 -225 464 538 ;\r\nC -1 ; WX 556 ; N ecircumflex ; B 40 -15 516 734 ;\r\nC -1 ; WX 722 ; N Uring ; B 79 -19 644 931 ;\r\nC -1 ; WX 722 ; N Udieresis ; B 79 -19 644 901 ;\r\nC -1 ; WX 556 ; N aogonek ; B 36 -220 547 538 ;\r\nC -1 ; WX 722 ; N Uacute ; B 79 -19 644 929 ;\r\nC -1 ; WX 556 ; N uogonek ; B 68 -225 519 523 ;\r\nC -1 ; WX 667 ; N Edieresis ; B 86 0 616 901 ;\r\nC -1 ; WX 722 ; N Dcroat ; B 0 0 674 718 ;\r\nC -1 ; WX 250 ; N commaaccent ; B 87 -225 181 -40 ;\r\nC -1 ; WX 737 ; N copyright ; B -14 -19 752 737 ;\r\nC -1 ; WX 667 ; N Emacron ; B 86 0 616 879 ;\r\nC -1 ; WX 500 ; N ccaron ; B 30 -15 477 734 ;\r\nC -1 ; WX 556 ; N aring ; B 36 -15 530 756 ;\r\nC -1 ; WX 722 ; N Ncommaaccent ; B 76 -225 646 718 ;\r\nC -1 ; WX 222 ; N lacute ; B 67 0 264 929 ;\r\nC -1 ; WX 556 ; N agrave ; B 36 -15 530 734 ;\r\nC -1 ; WX 611 ; N Tcommaaccent ; B 14 -225 597 718 ;\r\nC -1 ; WX 722 ; N Cacute ; B 44 -19 681 929 ;\r\nC -1 ; WX 556 ; N atilde ; B 36 -15 530 722 ;\r\nC -1 ; WX 667 ; N Edotaccent ; B 86 0 616 901 ;\r\nC -1 ; WX 500 ; N scaron ; B 32 -15 464 734 ;\r\nC -1 ; WX 500 ; N scedilla ; B 32 -225 464 538 ;\r\nC -1 ; WX 278 ; N iacute ; B 95 0 292 734 ;\r\nC -1 ; WX 471 ; N lozenge ; B 10 0 462 728 ;\r\nC -1 ; WX 722 ; N Rcaron ; B 88 0 684 929 ;\r\nC -1 ; WX 778 ; N Gcommaaccent ; B 48 -225 704 737 ;\r\nC -1 ; WX 556 ; N ucircumflex ; B 68 -15 489 734 ;\r\nC -1 ; WX 556 ; N acircumflex ; B 36 -15 530 734 ;\r\nC -1 ; WX 667 ; N Amacron ; B 14 0 654 879 ;\r\nC -1 ; WX 333 ; N rcaron ; B 61 0 352 734 ;\r\nC -1 ; WX 500 ; N ccedilla ; B 30 -225 477 538 ;\r\nC -1 ; WX 611 ; N Zdotaccent ; B 23 0 588 901 ;\r\nC -1 ; WX 667 ; N Thorn ; B 86 0 622 718 ;\r\nC -1 ; WX 778 ; N Omacron ; B 39 -19 739 879 ;\r\nC -1 ; WX 722 ; N Racute ; B 88 0 684 929 ;\r\nC -1 ; WX 667 ; N Sacute ; B 49 -19 620 929 ;\r\nC -1 ; WX 643 ; N dcaron ; B 35 -15 655 718 ;\r\nC -1 ; WX 722 ; N Umacron ; B 79 -19 644 879 ;\r\nC -1 ; WX 556 ; N uring ; B 68 -15 489 756 ;\r\nC -1 ; WX 333 ; N threesuperior ; B 5 270 325 703 ;\r\nC -1 ; WX 778 ; N Ograve ; B 39 -19 739 929 ;\r\nC -1 ; WX 667 ; N Agrave ; B 14 0 654 929 ;\r\nC -1 ; WX 667 ; N Abreve ; B 14 0 654 926 ;\r\nC -1 ; WX 584 ; N multiply ; B 39 0 545 506 ;\r\nC -1 ; WX 556 ; N uacute ; B 68 -15 489 734 ;\r\nC -1 ; WX 611 ; N Tcaron ; B 14 0 597 929 ;\r\nC -1 ; WX 476 ; N partialdiff ; B 13 -38 463 714 ;\r\nC -1 ; WX 500 ; N ydieresis ; B 11 -214 489 706 ;\r\nC -1 ; WX 722 ; N Nacute ; B 76 0 646 929 ;\r\nC -1 ; WX 278 ; N icircumflex ; B -6 0 285 734 ;\r\nC -1 ; WX 667 ; N Ecircumflex ; B 86 0 616 929 ;\r\nC -1 ; WX 556 ; N adieresis ; B 36 -15 530 706 ;\r\nC -1 ; WX 556 ; N edieresis ; B 40 -15 516 706 ;\r\nC -1 ; WX 500 ; N cacute ; B 30 -15 477 734 ;\r\nC -1 ; WX 556 ; N nacute ; B 65 0 491 734 ;\r\nC -1 ; WX 556 ; N umacron ; B 68 -15 489 684 ;\r\nC -1 ; WX 722 ; N Ncaron ; B 76 0 646 929 ;\r\nC -1 ; WX 278 ; N Iacute ; B 91 0 292 929 ;\r\nC -1 ; WX 584 ; N plusminus ; B 39 0 545 506 ;\r\nC -1 ; WX 260 ; N brokenbar ; B 94 -150 167 700 ;\r\nC -1 ; WX 737 ; N registered ; B -14 -19 752 737 ;\r\nC -1 ; WX 778 ; N Gbreve ; B 48 -19 704 926 ;\r\nC -1 ; WX 278 ; N Idotaccent ; B 91 0 188 901 ;\r\nC -1 ; WX 600 ; N summation ; B 15 -10 586 706 ;\r\nC -1 ; WX 667 ; N Egrave ; B 86 0 616 929 ;\r\nC -1 ; WX 333 ; N racute ; B 77 0 332 734 ;\r\nC -1 ; WX 556 ; N omacron ; B 35 -14 521 684 ;\r\nC -1 ; WX 611 ; N Zacute ; B 23 0 588 929 ;\r\nC -1 ; WX 611 ; N Zcaron ; B 23 0 588 929 ;\r\nC -1 ; WX 549 ; N greaterequal ; B 26 0 523 674 ;\r\nC -1 ; WX 722 ; N Eth ; B 0 0 674 718 ;\r\nC -1 ; WX 722 ; N Ccedilla ; B 44 -225 681 737 ;\r\nC -1 ; WX 222 ; N lcommaaccent ; B 67 -225 167 718 ;\r\nC -1 ; WX 317 ; N tcaron ; B 14 -7 329 808 ;\r\nC -1 ; WX 556 ; N eogonek ; B 40 -225 516 538 ;\r\nC -1 ; WX 722 ; N Uogonek ; B 79 -225 644 718 ;\r\nC -1 ; WX 667 ; N Aacute ; B 14 0 654 929 ;\r\nC -1 ; WX 667 ; N Adieresis ; B 14 0 654 901 ;\r\nC -1 ; WX 556 ; N egrave ; B 40 -15 516 734 ;\r\nC -1 ; WX 500 ; N zacute ; B 31 0 469 734 ;\r\nC -1 ; WX 222 ; N iogonek ; B -31 -225 183 718 ;\r\nC -1 ; WX 778 ; N Oacute ; B 39 -19 739 929 ;\r\nC -1 ; WX 556 ; N oacute ; B 35 -14 521 734 ;\r\nC -1 ; WX 556 ; N amacron ; B 36 -15 530 684 ;\r\nC -1 ; WX 500 ; N sacute ; B 32 -15 464 734 ;\r\nC -1 ; WX 278 ; N idieresis ; B 13 0 266 706 ;\r\nC -1 ; WX 778 ; N Ocircumflex ; B 39 -19 739 929 ;\r\nC -1 ; WX 722 ; N Ugrave ; B 79 -19 644 929 ;\r\nC -1 ; WX 612 ; N Delta ; B 6 0 608 688 ;\r\nC -1 ; WX 556 ; N thorn ; B 58 -207 517 718 ;\r\nC -1 ; WX 333 ; N twosuperior ; B 4 281 323 703 ;\r\nC -1 ; WX 778 ; N Odieresis ; B 39 -19 739 901 ;\r\nC -1 ; WX 556 ; N mu ; B 68 -207 489 523 ;\r\nC -1 ; WX 278 ; N igrave ; B -13 0 184 734 ;\r\nC -1 ; WX 556 ; N ohungarumlaut ; B 35 -14 521 734 ;\r\nC -1 ; WX 667 ; N Eogonek ; B 86 -220 633 718 ;\r\nC -1 ; WX 556 ; N dcroat ; B 35 -15 550 718 ;\r\nC -1 ; WX 834 ; N threequarters ; B 45 -19 810 703 ;\r\nC -1 ; WX 667 ; N Scedilla ; B 49 -225 620 737 ;\r\nC -1 ; WX 299 ; N lcaron ; B 67 0 311 718 ;\r\nC -1 ; WX 667 ; N Kcommaaccent ; B 76 -225 663 718 ;\r\nC -1 ; WX 556 ; N Lacute ; B 76 0 537 929 ;\r\nC -1 ; WX 1000 ; N trademark ; B 46 306 903 718 ;\r\nC -1 ; WX 556 ; N edotaccent ; B 40 -15 516 706 ;\r\nC -1 ; WX 278 ; N Igrave ; B -13 0 188 929 ;\r\nC -1 ; WX 278 ; N Imacron ; B -17 0 296 879 ;\r\nC -1 ; WX 556 ; N Lcaron ; B 76 0 537 718 ;\r\nC -1 ; WX 834 ; N onehalf ; B 43 -19 773 703 ;\r\nC -1 ; WX 549 ; N lessequal ; B 26 0 523 674 ;\r\nC -1 ; WX 556 ; N ocircumflex ; B 35 -14 521 734 ;\r\nC -1 ; WX 556 ; N ntilde ; B 65 0 491 722 ;\r\nC -1 ; WX 722 ; N Uhungarumlaut ; B 79 -19 644 929 ;\r\nC -1 ; WX 667 ; N Eacute ; B 86 0 616 929 ;\r\nC -1 ; WX 556 ; N emacron ; B 40 -15 516 684 ;\r\nC -1 ; WX 556 ; N gbreve ; B 40 -220 499 731 ;\r\nC -1 ; WX 834 ; N onequarter ; B 73 -19 756 703 ;\r\nC -1 ; WX 667 ; N Scaron ; B 49 -19 620 929 ;\r\nC -1 ; WX 667 ; N Scommaaccent ; B 49 -225 620 737 ;\r\nC -1 ; WX 778 ; N Ohungarumlaut ; B 39 -19 739 929 ;\r\nC -1 ; WX 400 ; N degree ; B 54 411 346 703 ;\r\nC -1 ; WX 556 ; N ograve ; B 35 -14 521 734 ;\r\nC -1 ; WX 722 ; N Ccaron ; B 44 -19 681 929 ;\r\nC -1 ; WX 556 ; N ugrave ; B 68 -15 489 734 ;\r\nC -1 ; WX 453 ; N radical ; B -4 -80 458 762 ;\r\nC -1 ; WX 722 ; N Dcaron ; B 81 0 674 929 ;\r\nC -1 ; WX 333 ; N rcommaaccent ; B 77 -225 332 538 ;\r\nC -1 ; WX 722 ; N Ntilde ; B 76 0 646 917 ;\r\nC -1 ; WX 556 ; N otilde ; B 35 -14 521 722 ;\r\nC -1 ; WX 722 ; N Rcommaaccent ; B 88 -225 684 718 ;\r\nC -1 ; WX 556 ; N Lcommaaccent ; B 76 -225 537 718 ;\r\nC -1 ; WX 667 ; N Atilde ; B 14 0 654 917 ;\r\nC -1 ; WX 667 ; N Aogonek ; B 14 -225 654 718 ;\r\nC -1 ; WX 667 ; N Aring ; B 14 0 654 931 ;\r\nC -1 ; WX 778 ; N Otilde ; B 39 -19 739 917 ;\r\nC -1 ; WX 500 ; N zdotaccent ; B 31 0 469 706 ;\r\nC -1 ; WX 667 ; N Ecaron ; B 86 0 616 929 ;\r\nC -1 ; WX 278 ; N Iogonek ; B -3 -225 211 718 ;\r\nC -1 ; WX 500 ; N kcommaaccent ; B 67 -225 501 718 ;\r\nC -1 ; WX 584 ; N minus ; B 39 216 545 289 ;\r\nC -1 ; WX 278 ; N Icircumflex ; B -6 0 285 929 ;\r\nC -1 ; WX 556 ; N ncaron ; B 65 0 491 734 ;\r\nC -1 ; WX 278 ; N tcommaaccent ; B 14 -225 257 669 ;\r\nC -1 ; WX 584 ; N logicalnot ; B 39 108 545 390 ;\r\nC -1 ; WX 556 ; N odieresis ; B 35 -14 521 706 ;\r\nC -1 ; WX 556 ; N udieresis ; B 68 -15 489 706 ;\r\nC -1 ; WX 549 ; N notequal ; B 12 -35 537 551 ;\r\nC -1 ; WX 556 ; N gcommaaccent ; B 40 -220 499 822 ;\r\nC -1 ; WX 556 ; N eth ; B 35 -15 522 737 ;\r\nC -1 ; WX 500 ; N zcaron ; B 31 0 469 734 ;\r\nC -1 ; WX 556 ; N ncommaaccent ; B 65 -225 491 538 ;\r\nC -1 ; WX 333 ; N onesuperior ; B 43 281 222 703 ;\r\nC -1 ; WX 278 ; N imacron ; B 5 0 272 684 ;\r\nC -1 ; WX 556 ; N Euro ; B 0 0 0 0 ;\r\nEndCharMetrics\r\nStartKernData\r\nStartKernPairs 2705\r\nKPX A C -30\r\nKPX A Cacute -30\r\nKPX A Ccaron -30\r\nKPX A Ccedilla -30\r\nKPX A G -30\r\nKPX A Gbreve -30\r\nKPX A Gcommaaccent -30\r\nKPX A O -30\r\nKPX A Oacute -30\r\nKPX A Ocircumflex -30\r\nKPX A Odieresis -30\r\nKPX A Ograve -30\r\nKPX A Ohungarumlaut -30\r\nKPX A Omacron -30\r\nKPX A Oslash -30\r\nKPX A Otilde -30\r\nKPX A Q -30\r\nKPX A T -120\r\nKPX A Tcaron -120\r\nKPX A Tcommaaccent -120\r\nKPX A U -50\r\nKPX A Uacute -50\r\nKPX A Ucircumflex -50\r\nKPX A Udieresis -50\r\nKPX A Ugrave -50\r\nKPX A Uhungarumlaut -50\r\nKPX A Umacron -50\r\nKPX A Uogonek -50\r\nKPX A Uring -50\r\nKPX A V -70\r\nKPX A W -50\r\nKPX A Y -100\r\nKPX A Yacute -100\r\nKPX A Ydieresis -100\r\nKPX A u -30\r\nKPX A uacute -30\r\nKPX A ucircumflex -30\r\nKPX A udieresis -30\r\nKPX A ugrave -30\r\nKPX A uhungarumlaut -30\r\nKPX A umacron -30\r\nKPX A uogonek -30\r\nKPX A uring -30\r\nKPX A v -40\r\nKPX A w -40\r\nKPX A y -40\r\nKPX A yacute -40\r\nKPX A ydieresis -40\r\nKPX Aacute C -30\r\nKPX Aacute Cacute -30\r\nKPX Aacute Ccaron -30\r\nKPX Aacute Ccedilla -30\r\nKPX Aacute G -30\r\nKPX Aacute Gbreve -30\r\nKPX Aacute Gcommaaccent -30\r\nKPX Aacute O -30\r\nKPX Aacute Oacute -30\r\nKPX Aacute Ocircumflex -30\r\nKPX Aacute Odieresis -30\r\nKPX Aacute Ograve -30\r\nKPX Aacute Ohungarumlaut -30\r\nKPX Aacute Omacron -30\r\nKPX Aacute Oslash -30\r\nKPX Aacute Otilde -30\r\nKPX Aacute Q -30\r\nKPX Aacute T -120\r\nKPX Aacute Tcaron -120\r\nKPX Aacute Tcommaaccent -120\r\nKPX Aacute U -50\r\nKPX Aacute Uacute -50\r\nKPX Aacute Ucircumflex -50\r\nKPX Aacute Udieresis -50\r\nKPX Aacute Ugrave -50\r\nKPX Aacute Uhungarumlaut -50\r\nKPX Aacute Umacron -50\r\nKPX Aacute Uogonek -50\r\nKPX Aacute Uring -50\r\nKPX Aacute V -70\r\nKPX Aacute W -50\r\nKPX Aacute Y -100\r\nKPX Aacute Yacute -100\r\nKPX Aacute Ydieresis -100\r\nKPX Aacute u -30\r\nKPX Aacute uacute -30\r\nKPX Aacute ucircumflex -30\r\nKPX Aacute udieresis -30\r\nKPX Aacute ugrave -30\r\nKPX Aacute uhungarumlaut -30\r\nKPX Aacute umacron -30\r\nKPX Aacute uogonek -30\r\nKPX Aacute uring -30\r\nKPX Aacute v -40\r\nKPX Aacute w -40\r\nKPX Aacute y -40\r\nKPX Aacute yacute -40\r\nKPX Aacute ydieresis -40\r\nKPX Abreve C -30\r\nKPX Abreve Cacute -30\r\nKPX Abreve Ccaron -30\r\nKPX Abreve Ccedilla -30\r\nKPX Abreve G -30\r\nKPX Abreve Gbreve -30\r\nKPX Abreve Gcommaaccent -30\r\nKPX Abreve O -30\r\nKPX Abreve Oacute -30\r\nKPX Abreve Ocircumflex -30\r\nKPX Abreve Odieresis -30\r\nKPX Abreve Ograve -30\r\nKPX Abreve Ohungarumlaut -30\r\nKPX Abreve Omacron -30\r\nKPX Abreve Oslash -30\r\nKPX Abreve Otilde -30\r\nKPX Abreve Q -30\r\nKPX Abreve T -120\r\nKPX Abreve Tcaron -120\r\nKPX Abreve Tcommaaccent -120\r\nKPX Abreve U -50\r\nKPX Abreve Uacute -50\r\nKPX Abreve Ucircumflex -50\r\nKPX Abreve Udieresis -50\r\nKPX Abreve Ugrave -50\r\nKPX Abreve Uhungarumlaut -50\r\nKPX Abreve Umacron -50\r\nKPX Abreve Uogonek -50\r\nKPX Abreve Uring -50\r\nKPX Abreve V -70\r\nKPX Abreve W -50\r\nKPX Abreve Y -100\r\nKPX Abreve Yacute -100\r\nKPX Abreve Ydieresis -100\r\nKPX Abreve u -30\r\nKPX Abreve uacute -30\r\nKPX Abreve ucircumflex -30\r\nKPX Abreve udieresis -30\r\nKPX Abreve ugrave -30\r\nKPX Abreve uhungarumlaut -30\r\nKPX Abreve umacron -30\r\nKPX Abreve uogonek -30\r\nKPX Abreve uring -30\r\nKPX Abreve v -40\r\nKPX Abreve w -40\r\nKPX Abreve y -40\r\nKPX Abreve yacute -40\r\nKPX Abreve ydieresis -40\r\nKPX Acircumflex C -30\r\nKPX Acircumflex Cacute -30\r\nKPX Acircumflex Ccaron -30\r\nKPX Acircumflex Ccedilla -30\r\nKPX Acircumflex G -30\r\nKPX Acircumflex Gbreve -30\r\nKPX Acircumflex Gcommaaccent -30\r\nKPX Acircumflex O -30\r\nKPX Acircumflex Oacute -30\r\nKPX Acircumflex Ocircumflex -30\r\nKPX Acircumflex Odieresis -30\r\nKPX Acircumflex Ograve -30\r\nKPX Acircumflex Ohungarumlaut -30\r\nKPX Acircumflex Omacron -30\r\nKPX Acircumflex Oslash -30\r\nKPX Acircumflex Otilde -30\r\nKPX Acircumflex Q -30\r\nKPX Acircumflex T -120\r\nKPX Acircumflex Tcaron -120\r\nKPX Acircumflex Tcommaaccent -120\r\nKPX Acircumflex U -50\r\nKPX Acircumflex Uacute -50\r\nKPX Acircumflex Ucircumflex -50\r\nKPX Acircumflex Udieresis -50\r\nKPX Acircumflex Ugrave -50\r\nKPX Acircumflex Uhungarumlaut -50\r\nKPX Acircumflex Umacron -50\r\nKPX Acircumflex Uogonek -50\r\nKPX Acircumflex Uring -50\r\nKPX Acircumflex V -70\r\nKPX Acircumflex W -50\r\nKPX Acircumflex Y -100\r\nKPX Acircumflex Yacute -100\r\nKPX Acircumflex Ydieresis -100\r\nKPX Acircumflex u -30\r\nKPX Acircumflex uacute -30\r\nKPX Acircumflex ucircumflex -30\r\nKPX Acircumflex udieresis -30\r\nKPX Acircumflex ugrave -30\r\nKPX Acircumflex uhungarumlaut -30\r\nKPX Acircumflex umacron -30\r\nKPX Acircumflex uogonek -30\r\nKPX Acircumflex uring -30\r\nKPX Acircumflex v -40\r\nKPX Acircumflex w -40\r\nKPX Acircumflex y -40\r\nKPX Acircumflex yacute -40\r\nKPX Acircumflex ydieresis -40\r\nKPX Adieresis C -30\r\nKPX Adieresis Cacute -30\r\nKPX Adieresis Ccaron -30\r\nKPX Adieresis Ccedilla -30\r\nKPX Adieresis G -30\r\nKPX Adieresis Gbreve -30\r\nKPX Adieresis Gcommaaccent -30\r\nKPX Adieresis O -30\r\nKPX Adieresis Oacute -30\r\nKPX Adieresis Ocircumflex -30\r\nKPX Adieresis Odieresis -30\r\nKPX Adieresis Ograve -30\r\nKPX Adieresis Ohungarumlaut -30\r\nKPX Adieresis Omacron -30\r\nKPX Adieresis Oslash -30\r\nKPX Adieresis Otilde -30\r\nKPX Adieresis Q -30\r\nKPX Adieresis T -120\r\nKPX Adieresis Tcaron -120\r\nKPX Adieresis Tcommaaccent -120\r\nKPX Adieresis U -50\r\nKPX Adieresis Uacute -50\r\nKPX Adieresis Ucircumflex -50\r\nKPX Adieresis Udieresis -50\r\nKPX Adieresis Ugrave -50\r\nKPX Adieresis Uhungarumlaut -50\r\nKPX Adieresis Umacron -50\r\nKPX Adieresis Uogonek -50\r\nKPX Adieresis Uring -50\r\nKPX Adieresis V -70\r\nKPX Adieresis W -50\r\nKPX Adieresis Y -100\r\nKPX Adieresis Yacute -100\r\nKPX Adieresis Ydieresis -100\r\nKPX Adieresis u -30\r\nKPX Adieresis uacute -30\r\nKPX Adieresis ucircumflex -30\r\nKPX Adieresis udieresis -30\r\nKPX Adieresis ugrave -30\r\nKPX Adieresis uhungarumlaut -30\r\nKPX Adieresis umacron -30\r\nKPX Adieresis uogonek -30\r\nKPX Adieresis uring -30\r\nKPX Adieresis v -40\r\nKPX Adieresis w -40\r\nKPX Adieresis y -40\r\nKPX Adieresis yacute -40\r\nKPX Adieresis ydieresis -40\r\nKPX Agrave C -30\r\nKPX Agrave Cacute -30\r\nKPX Agrave Ccaron -30\r\nKPX Agrave Ccedilla -30\r\nKPX Agrave G -30\r\nKPX Agrave Gbreve -30\r\nKPX Agrave Gcommaaccent -30\r\nKPX Agrave O -30\r\nKPX Agrave Oacute -30\r\nKPX Agrave Ocircumflex -30\r\nKPX Agrave Odieresis -30\r\nKPX Agrave Ograve -30\r\nKPX Agrave Ohungarumlaut -30\r\nKPX Agrave Omacron -30\r\nKPX Agrave Oslash -30\r\nKPX Agrave Otilde -30\r\nKPX Agrave Q -30\r\nKPX Agrave T -120\r\nKPX Agrave Tcaron -120\r\nKPX Agrave Tcommaaccent -120\r\nKPX Agrave U -50\r\nKPX Agrave Uacute -50\r\nKPX Agrave Ucircumflex -50\r\nKPX Agrave Udieresis -50\r\nKPX Agrave Ugrave -50\r\nKPX Agrave Uhungarumlaut -50\r\nKPX Agrave Umacron -50\r\nKPX Agrave Uogonek -50\r\nKPX Agrave Uring -50\r\nKPX Agrave V -70\r\nKPX Agrave W -50\r\nKPX Agrave Y -100\r\nKPX Agrave Yacute -100\r\nKPX Agrave Ydieresis -100\r\nKPX Agrave u -30\r\nKPX Agrave uacute -30\r\nKPX Agrave ucircumflex -30\r\nKPX Agrave udieresis -30\r\nKPX Agrave ugrave -30\r\nKPX Agrave uhungarumlaut -30\r\nKPX Agrave umacron -30\r\nKPX Agrave uogonek -30\r\nKPX Agrave uring -30\r\nKPX Agrave v -40\r\nKPX Agrave w -40\r\nKPX Agrave y -40\r\nKPX Agrave yacute -40\r\nKPX Agrave ydieresis -40\r\nKPX Amacron C -30\r\nKPX Amacron Cacute -30\r\nKPX Amacron Ccaron -30\r\nKPX Amacron Ccedilla -30\r\nKPX Amacron G -30\r\nKPX Amacron Gbreve -30\r\nKPX Amacron Gcommaaccent -30\r\nKPX Amacron O -30\r\nKPX Amacron Oacute -30\r\nKPX Amacron Ocircumflex -30\r\nKPX Amacron Odieresis -30\r\nKPX Amacron Ograve -30\r\nKPX Amacron Ohungarumlaut -30\r\nKPX Amacron Omacron -30\r\nKPX Amacron Oslash -30\r\nKPX Amacron Otilde -30\r\nKPX Amacron Q -30\r\nKPX Amacron T -120\r\nKPX Amacron Tcaron -120\r\nKPX Amacron Tcommaaccent -120\r\nKPX Amacron U -50\r\nKPX Amacron Uacute -50\r\nKPX Amacron Ucircumflex -50\r\nKPX Amacron Udieresis -50\r\nKPX Amacron Ugrave -50\r\nKPX Amacron Uhungarumlaut -50\r\nKPX Amacron Umacron -50\r\nKPX Amacron Uogonek -50\r\nKPX Amacron Uring -50\r\nKPX Amacron V -70\r\nKPX Amacron W -50\r\nKPX Amacron Y -100\r\nKPX Amacron Yacute -100\r\nKPX Amacron Ydieresis -100\r\nKPX Amacron u -30\r\nKPX Amacron uacute -30\r\nKPX Amacron ucircumflex -30\r\nKPX Amacron udieresis -30\r\nKPX Amacron ugrave -30\r\nKPX Amacron uhungarumlaut -30\r\nKPX Amacron umacron -30\r\nKPX Amacron uogonek -30\r\nKPX Amacron uring -30\r\nKPX Amacron v -40\r\nKPX Amacron w -40\r\nKPX Amacron y -40\r\nKPX Amacron yacute -40\r\nKPX Amacron ydieresis -40\r\nKPX Aogonek C -30\r\nKPX Aogonek Cacute -30\r\nKPX Aogonek Ccaron -30\r\nKPX Aogonek Ccedilla -30\r\nKPX Aogonek G -30\r\nKPX Aogonek Gbreve -30\r\nKPX Aogonek Gcommaaccent -30\r\nKPX Aogonek O -30\r\nKPX Aogonek Oacute -30\r\nKPX Aogonek Ocircumflex -30\r\nKPX Aogonek Odieresis -30\r\nKPX Aogonek Ograve -30\r\nKPX Aogonek Ohungarumlaut -30\r\nKPX Aogonek Omacron -30\r\nKPX Aogonek Oslash -30\r\nKPX Aogonek Otilde -30\r\nKPX Aogonek Q -30\r\nKPX Aogonek T -120\r\nKPX Aogonek Tcaron -120\r\nKPX Aogonek Tcommaaccent -120\r\nKPX Aogonek U -50\r\nKPX Aogonek Uacute -50\r\nKPX Aogonek Ucircumflex -50\r\nKPX Aogonek Udieresis -50\r\nKPX Aogonek Ugrave -50\r\nKPX Aogonek Uhungarumlaut -50\r\nKPX Aogonek Umacron -50\r\nKPX Aogonek Uogonek -50\r\nKPX Aogonek Uring -50\r\nKPX Aogonek V -70\r\nKPX Aogonek W -50\r\nKPX Aogonek Y -100\r\nKPX Aogonek Yacute -100\r\nKPX Aogonek Ydieresis -100\r\nKPX Aogonek u -30\r\nKPX Aogonek uacute -30\r\nKPX Aogonek ucircumflex -30\r\nKPX Aogonek udieresis -30\r\nKPX Aogonek ugrave -30\r\nKPX Aogonek uhungarumlaut -30\r\nKPX Aogonek umacron -30\r\nKPX Aogonek uogonek -30\r\nKPX Aogonek uring -30\r\nKPX Aogonek v -40\r\nKPX Aogonek w -40\r\nKPX Aogonek y -40\r\nKPX Aogonek yacute -40\r\nKPX Aogonek ydieresis -40\r\nKPX Aring C -30\r\nKPX Aring Cacute -30\r\nKPX Aring Ccaron -30\r\nKPX Aring Ccedilla -30\r\nKPX Aring G -30\r\nKPX Aring Gbreve -30\r\nKPX Aring Gcommaaccent -30\r\nKPX Aring O -30\r\nKPX Aring Oacute -30\r\nKPX Aring Ocircumflex -30\r\nKPX Aring Odieresis -30\r\nKPX Aring Ograve -30\r\nKPX Aring Ohungarumlaut -30\r\nKPX Aring Omacron -30\r\nKPX Aring Oslash -30\r\nKPX Aring Otilde -30\r\nKPX Aring Q -30\r\nKPX Aring T -120\r\nKPX Aring Tcaron -120\r\nKPX Aring Tcommaaccent -120\r\nKPX Aring U -50\r\nKPX Aring Uacute -50\r\nKPX Aring Ucircumflex -50\r\nKPX Aring Udieresis -50\r\nKPX Aring Ugrave -50\r\nKPX Aring Uhungarumlaut -50\r\nKPX Aring Umacron -50\r\nKPX Aring Uogonek -50\r\nKPX Aring Uring -50\r\nKPX Aring V -70\r\nKPX Aring W -50\r\nKPX Aring Y -100\r\nKPX Aring Yacute -100\r\nKPX Aring Ydieresis -100\r\nKPX Aring u -30\r\nKPX Aring uacute -30\r\nKPX Aring ucircumflex -30\r\nKPX Aring udieresis -30\r\nKPX Aring ugrave -30\r\nKPX Aring uhungarumlaut -30\r\nKPX Aring umacron -30\r\nKPX Aring uogonek -30\r\nKPX Aring uring -30\r\nKPX Aring v -40\r\nKPX Aring w -40\r\nKPX Aring y -40\r\nKPX Aring yacute -40\r\nKPX Aring ydieresis -40\r\nKPX Atilde C -30\r\nKPX Atilde Cacute -30\r\nKPX Atilde Ccaron -30\r\nKPX Atilde Ccedilla -30\r\nKPX Atilde G -30\r\nKPX Atilde Gbreve -30\r\nKPX Atilde Gcommaaccent -30\r\nKPX Atilde O -30\r\nKPX Atilde Oacute -30\r\nKPX Atilde Ocircumflex -30\r\nKPX Atilde Odieresis -30\r\nKPX Atilde Ograve -30\r\nKPX Atilde Ohungarumlaut -30\r\nKPX Atilde Omacron -30\r\nKPX Atilde Oslash -30\r\nKPX Atilde Otilde -30\r\nKPX Atilde Q -30\r\nKPX Atilde T -120\r\nKPX Atilde Tcaron -120\r\nKPX Atilde Tcommaaccent -120\r\nKPX Atilde U -50\r\nKPX Atilde Uacute -50\r\nKPX Atilde Ucircumflex -50\r\nKPX Atilde Udieresis -50\r\nKPX Atilde Ugrave -50\r\nKPX Atilde Uhungarumlaut -50\r\nKPX Atilde Umacron -50\r\nKPX Atilde Uogonek -50\r\nKPX Atilde Uring -50\r\nKPX Atilde V -70\r\nKPX Atilde W -50\r\nKPX Atilde Y -100\r\nKPX Atilde Yacute -100\r\nKPX Atilde Ydieresis -100\r\nKPX Atilde u -30\r\nKPX Atilde uacute -30\r\nKPX Atilde ucircumflex -30\r\nKPX Atilde udieresis -30\r\nKPX Atilde ugrave -30\r\nKPX Atilde uhungarumlaut -30\r\nKPX Atilde umacron -30\r\nKPX Atilde uogonek -30\r\nKPX Atilde uring -30\r\nKPX Atilde v -40\r\nKPX Atilde w -40\r\nKPX Atilde y -40\r\nKPX Atilde yacute -40\r\nKPX Atilde ydieresis -40\r\nKPX B U -10\r\nKPX B Uacute -10\r\nKPX B Ucircumflex -10\r\nKPX B Udieresis -10\r\nKPX B Ugrave -10\r\nKPX B Uhungarumlaut -10\r\nKPX B Umacron -10\r\nKPX B Uogonek -10\r\nKPX B Uring -10\r\nKPX B comma -20\r\nKPX B period -20\r\nKPX C comma -30\r\nKPX C period -30\r\nKPX Cacute comma -30\r\nKPX Cacute period -30\r\nKPX Ccaron comma -30\r\nKPX Ccaron period -30\r\nKPX Ccedilla comma -30\r\nKPX Ccedilla period -30\r\nKPX D A -40\r\nKPX D Aacute -40\r\nKPX D Abreve -40\r\nKPX D Acircumflex -40\r\nKPX D Adieresis -40\r\nKPX D Agrave -40\r\nKPX D Amacron -40\r\nKPX D Aogonek -40\r\nKPX D Aring -40\r\nKPX D Atilde -40\r\nKPX D V -70\r\nKPX D W -40\r\nKPX D Y -90\r\nKPX D Yacute -90\r\nKPX D Ydieresis -90\r\nKPX D comma -70\r\nKPX D period -70\r\nKPX Dcaron A -40\r\nKPX Dcaron Aacute -40\r\nKPX Dcaron Abreve -40\r\nKPX Dcaron Acircumflex -40\r\nKPX Dcaron Adieresis -40\r\nKPX Dcaron Agrave -40\r\nKPX Dcaron Amacron -40\r\nKPX Dcaron Aogonek -40\r\nKPX Dcaron Aring -40\r\nKPX Dcaron Atilde -40\r\nKPX Dcaron V -70\r\nKPX Dcaron W -40\r\nKPX Dcaron Y -90\r\nKPX Dcaron Yacute -90\r\nKPX Dcaron Ydieresis -90\r\nKPX Dcaron comma -70\r\nKPX Dcaron period -70\r\nKPX Dcroat A -40\r\nKPX Dcroat Aacute -40\r\nKPX Dcroat Abreve -40\r\nKPX Dcroat Acircumflex -40\r\nKPX Dcroat Adieresis -40\r\nKPX Dcroat Agrave -40\r\nKPX Dcroat Amacron -40\r\nKPX Dcroat Aogonek -40\r\nKPX Dcroat Aring -40\r\nKPX Dcroat Atilde -40\r\nKPX Dcroat V -70\r\nKPX Dcroat W -40\r\nKPX Dcroat Y -90\r\nKPX Dcroat Yacute -90\r\nKPX Dcroat Ydieresis -90\r\nKPX Dcroat comma -70\r\nKPX Dcroat period -70\r\nKPX F A -80\r\nKPX F Aacute -80\r\nKPX F Abreve -80\r\nKPX F Acircumflex -80\r\nKPX F Adieresis -80\r\nKPX F Agrave -80\r\nKPX F Amacron -80\r\nKPX F Aogonek -80\r\nKPX F Aring -80\r\nKPX F Atilde -80\r\nKPX F a -50\r\nKPX F aacute -50\r\nKPX F abreve -50\r\nKPX F acircumflex -50\r\nKPX F adieresis -50\r\nKPX F agrave -50\r\nKPX F amacron -50\r\nKPX F aogonek -50\r\nKPX F aring -50\r\nKPX F atilde -50\r\nKPX F comma -150\r\nKPX F e -30\r\nKPX F eacute -30\r\nKPX F ecaron -30\r\nKPX F ecircumflex -30\r\nKPX F edieresis -30\r\nKPX F edotaccent -30\r\nKPX F egrave -30\r\nKPX F emacron -30\r\nKPX F eogonek -30\r\nKPX F o -30\r\nKPX F oacute -30\r\nKPX F ocircumflex -30\r\nKPX F odieresis -30\r\nKPX F ograve -30\r\nKPX F ohungarumlaut -30\r\nKPX F omacron -30\r\nKPX F oslash -30\r\nKPX F otilde -30\r\nKPX F period -150\r\nKPX F r -45\r\nKPX F racute -45\r\nKPX F rcaron -45\r\nKPX F rcommaaccent -45\r\nKPX J A -20\r\nKPX J Aacute -20\r\nKPX J Abreve -20\r\nKPX J Acircumflex -20\r\nKPX J Adieresis -20\r\nKPX J Agrave -20\r\nKPX J Amacron -20\r\nKPX J Aogonek -20\r\nKPX J Aring -20\r\nKPX J Atilde -20\r\nKPX J a -20\r\nKPX J aacute -20\r\nKPX J abreve -20\r\nKPX J acircumflex -20\r\nKPX J adieresis -20\r\nKPX J agrave -20\r\nKPX J amacron -20\r\nKPX J aogonek -20\r\nKPX J aring -20\r\nKPX J atilde -20\r\nKPX J comma -30\r\nKPX J period -30\r\nKPX J u -20\r\nKPX J uacute -20\r\nKPX J ucircumflex -20\r\nKPX J udieresis -20\r\nKPX J ugrave -20\r\nKPX J uhungarumlaut -20\r\nKPX J umacron -20\r\nKPX J uogonek -20\r\nKPX J uring -20\r\nKPX K O -50\r\nKPX K Oacute -50\r\nKPX K Ocircumflex -50\r\nKPX K Odieresis -50\r\nKPX K Ograve -50\r\nKPX K Ohungarumlaut -50\r\nKPX K Omacron -50\r\nKPX K Oslash -50\r\nKPX K Otilde -50\r\nKPX K e -40\r\nKPX K eacute -40\r\nKPX K ecaron -40\r\nKPX K ecircumflex -40\r\nKPX K edieresis -40\r\nKPX K edotaccent -40\r\nKPX K egrave -40\r\nKPX K emacron -40\r\nKPX K eogonek -40\r\nKPX K o -40\r\nKPX K oacute -40\r\nKPX K ocircumflex -40\r\nKPX K odieresis -40\r\nKPX K ograve -40\r\nKPX K ohungarumlaut -40\r\nKPX K omacron -40\r\nKPX K oslash -40\r\nKPX K otilde -40\r\nKPX K u -30\r\nKPX K uacute -30\r\nKPX K ucircumflex -30\r\nKPX K udieresis -30\r\nKPX K ugrave -30\r\nKPX K uhungarumlaut -30\r\nKPX K umacron -30\r\nKPX K uogonek -30\r\nKPX K uring -30\r\nKPX K y -50\r\nKPX K yacute -50\r\nKPX K ydieresis -50\r\nKPX Kcommaaccent O -50\r\nKPX Kcommaaccent Oacute -50\r\nKPX Kcommaaccent Ocircumflex -50\r\nKPX Kcommaaccent Odieresis -50\r\nKPX Kcommaaccent Ograve -50\r\nKPX Kcommaaccent Ohungarumlaut -50\r\nKPX Kcommaaccent Omacron -50\r\nKPX Kcommaaccent Oslash -50\r\nKPX Kcommaaccent Otilde -50\r\nKPX Kcommaaccent e -40\r\nKPX Kcommaaccent eacute -40\r\nKPX Kcommaaccent ecaron -40\r\nKPX Kcommaaccent ecircumflex -40\r\nKPX Kcommaaccent edieresis -40\r\nKPX Kcommaaccent edotaccent -40\r\nKPX Kcommaaccent egrave -40\r\nKPX Kcommaaccent emacron -40\r\nKPX Kcommaaccent eogonek -40\r\nKPX Kcommaaccent o -40\r\nKPX Kcommaaccent oacute -40\r\nKPX Kcommaaccent ocircumflex -40\r\nKPX Kcommaaccent odieresis -40\r\nKPX Kcommaaccent ograve -40\r\nKPX Kcommaaccent ohungarumlaut -40\r\nKPX Kcommaaccent omacron -40\r\nKPX Kcommaaccent oslash -40\r\nKPX Kcommaaccent otilde -40\r\nKPX Kcommaaccent u -30\r\nKPX Kcommaaccent uacute -30\r\nKPX Kcommaaccent ucircumflex -30\r\nKPX Kcommaaccent udieresis -30\r\nKPX Kcommaaccent ugrave -30\r\nKPX Kcommaaccent uhungarumlaut -30\r\nKPX Kcommaaccent umacron -30\r\nKPX Kcommaaccent uogonek -30\r\nKPX Kcommaaccent uring -30\r\nKPX Kcommaaccent y -50\r\nKPX Kcommaaccent yacute -50\r\nKPX Kcommaaccent ydieresis -50\r\nKPX L T -110\r\nKPX L Tcaron -110\r\nKPX L Tcommaaccent -110\r\nKPX L V -110\r\nKPX L W -70\r\nKPX L Y -140\r\nKPX L Yacute -140\r\nKPX L Ydieresis -140\r\nKPX L quotedblright -140\r\nKPX L quoteright -160\r\nKPX L y -30\r\nKPX L yacute -30\r\nKPX L ydieresis -30\r\nKPX Lacute T -110\r\nKPX Lacute Tcaron -110\r\nKPX Lacute Tcommaaccent -110\r\nKPX Lacute V -110\r\nKPX Lacute W -70\r\nKPX Lacute Y -140\r\nKPX Lacute Yacute -140\r\nKPX Lacute Ydieresis -140\r\nKPX Lacute quotedblright -140\r\nKPX Lacute quoteright -160\r\nKPX Lacute y -30\r\nKPX Lacute yacute -30\r\nKPX Lacute ydieresis -30\r\nKPX Lcaron T -110\r\nKPX Lcaron Tcaron -110\r\nKPX Lcaron Tcommaaccent -110\r\nKPX Lcaron V -110\r\nKPX Lcaron W -70\r\nKPX Lcaron Y -140\r\nKPX Lcaron Yacute -140\r\nKPX Lcaron Ydieresis -140\r\nKPX Lcaron quotedblright -140\r\nKPX Lcaron quoteright -160\r\nKPX Lcaron y -30\r\nKPX Lcaron yacute -30\r\nKPX Lcaron ydieresis -30\r\nKPX Lcommaaccent T -110\r\nKPX Lcommaaccent Tcaron -110\r\nKPX Lcommaaccent Tcommaaccent -110\r\nKPX Lcommaaccent V -110\r\nKPX Lcommaaccent W -70\r\nKPX Lcommaaccent Y -140\r\nKPX Lcommaaccent Yacute -140\r\nKPX Lcommaaccent Ydieresis -140\r\nKPX Lcommaaccent quotedblright -140\r\nKPX Lcommaaccent quoteright -160\r\nKPX Lcommaaccent y -30\r\nKPX Lcommaaccent yacute -30\r\nKPX Lcommaaccent ydieresis -30\r\nKPX Lslash T -110\r\nKPX Lslash Tcaron -110\r\nKPX Lslash Tcommaaccent -110\r\nKPX Lslash V -110\r\nKPX Lslash W -70\r\nKPX Lslash Y -140\r\nKPX Lslash Yacute -140\r\nKPX Lslash Ydieresis -140\r\nKPX Lslash quotedblright -140\r\nKPX Lslash quoteright -160\r\nKPX Lslash y -30\r\nKPX Lslash yacute -30\r\nKPX Lslash ydieresis -30\r\nKPX O A -20\r\nKPX O Aacute -20\r\nKPX O Abreve -20\r\nKPX O Acircumflex -20\r\nKPX O Adieresis -20\r\nKPX O Agrave -20\r\nKPX O Amacron -20\r\nKPX O Aogonek -20\r\nKPX O Aring -20\r\nKPX O Atilde -20\r\nKPX O T -40\r\nKPX O Tcaron -40\r\nKPX O Tcommaaccent -40\r\nKPX O V -50\r\nKPX O W -30\r\nKPX O X -60\r\nKPX O Y -70\r\nKPX O Yacute -70\r\nKPX O Ydieresis -70\r\nKPX O comma -40\r\nKPX O period -40\r\nKPX Oacute A -20\r\nKPX Oacute Aacute -20\r\nKPX Oacute Abreve -20\r\nKPX Oacute Acircumflex -20\r\nKPX Oacute Adieresis -20\r\nKPX Oacute Agrave -20\r\nKPX Oacute Amacron -20\r\nKPX Oacute Aogonek -20\r\nKPX Oacute Aring -20\r\nKPX Oacute Atilde -20\r\nKPX Oacute T -40\r\nKPX Oacute Tcaron -40\r\nKPX Oacute Tcommaaccent -40\r\nKPX Oacute V -50\r\nKPX Oacute W -30\r\nKPX Oacute X -60\r\nKPX Oacute Y -70\r\nKPX Oacute Yacute -70\r\nKPX Oacute Ydieresis -70\r\nKPX Oacute comma -40\r\nKPX Oacute period -40\r\nKPX Ocircumflex A -20\r\nKPX Ocircumflex Aacute -20\r\nKPX Ocircumflex Abreve -20\r\nKPX Ocircumflex Acircumflex -20\r\nKPX Ocircumflex Adieresis -20\r\nKPX Ocircumflex Agrave -20\r\nKPX Ocircumflex Amacron -20\r\nKPX Ocircumflex Aogonek -20\r\nKPX Ocircumflex Aring -20\r\nKPX Ocircumflex Atilde -20\r\nKPX Ocircumflex T -40\r\nKPX Ocircumflex Tcaron -40\r\nKPX Ocircumflex Tcommaaccent -40\r\nKPX Ocircumflex V -50\r\nKPX Ocircumflex W -30\r\nKPX Ocircumflex X -60\r\nKPX Ocircumflex Y -70\r\nKPX Ocircumflex Yacute -70\r\nKPX Ocircumflex Ydieresis -70\r\nKPX Ocircumflex comma -40\r\nKPX Ocircumflex period -40\r\nKPX Odieresis A -20\r\nKPX Odieresis Aacute -20\r\nKPX Odieresis Abreve -20\r\nKPX Odieresis Acircumflex -20\r\nKPX Odieresis Adieresis -20\r\nKPX Odieresis Agrave -20\r\nKPX Odieresis Amacron -20\r\nKPX Odieresis Aogonek -20\r\nKPX Odieresis Aring -20\r\nKPX Odieresis Atilde -20\r\nKPX Odieresis T -40\r\nKPX Odieresis Tcaron -40\r\nKPX Odieresis Tcommaaccent -40\r\nKPX Odieresis V -50\r\nKPX Odieresis W -30\r\nKPX Odieresis X -60\r\nKPX Odieresis Y -70\r\nKPX Odieresis Yacute -70\r\nKPX Odieresis Ydieresis -70\r\nKPX Odieresis comma -40\r\nKPX Odieresis period -40\r\nKPX Ograve A -20\r\nKPX Ograve Aacute -20\r\nKPX Ograve Abreve -20\r\nKPX Ograve Acircumflex -20\r\nKPX Ograve Adieresis -20\r\nKPX Ograve Agrave -20\r\nKPX Ograve Amacron -20\r\nKPX Ograve Aogonek -20\r\nKPX Ograve Aring -20\r\nKPX Ograve Atilde -20\r\nKPX Ograve T -40\r\nKPX Ograve Tcaron -40\r\nKPX Ograve Tcommaaccent -40\r\nKPX Ograve V -50\r\nKPX Ograve W -30\r\nKPX Ograve X -60\r\nKPX Ograve Y -70\r\nKPX Ograve Yacute -70\r\nKPX Ograve Ydieresis -70\r\nKPX Ograve comma -40\r\nKPX Ograve period -40\r\nKPX Ohungarumlaut A -20\r\nKPX Ohungarumlaut Aacute -20\r\nKPX Ohungarumlaut Abreve -20\r\nKPX Ohungarumlaut Acircumflex -20\r\nKPX Ohungarumlaut Adieresis -20\r\nKPX Ohungarumlaut Agrave -20\r\nKPX Ohungarumlaut Amacron -20\r\nKPX Ohungarumlaut Aogonek -20\r\nKPX Ohungarumlaut Aring -20\r\nKPX Ohungarumlaut Atilde -20\r\nKPX Ohungarumlaut T -40\r\nKPX Ohungarumlaut Tcaron -40\r\nKPX Ohungarumlaut Tcommaaccent -40\r\nKPX Ohungarumlaut V -50\r\nKPX Ohungarumlaut W -30\r\nKPX Ohungarumlaut X -60\r\nKPX Ohungarumlaut Y -70\r\nKPX Ohungarumlaut Yacute -70\r\nKPX Ohungarumlaut Ydieresis -70\r\nKPX Ohungarumlaut comma -40\r\nKPX Ohungarumlaut period -40\r\nKPX Omacron A -20\r\nKPX Omacron Aacute -20\r\nKPX Omacron Abreve -20\r\nKPX Omacron Acircumflex -20\r\nKPX Omacron Adieresis -20\r\nKPX Omacron Agrave -20\r\nKPX Omacron Amacron -20\r\nKPX Omacron Aogonek -20\r\nKPX Omacron Aring -20\r\nKPX Omacron Atilde -20\r\nKPX Omacron T -40\r\nKPX Omacron Tcaron -40\r\nKPX Omacron Tcommaaccent -40\r\nKPX Omacron V -50\r\nKPX Omacron W -30\r\nKPX Omacron X -60\r\nKPX Omacron Y -70\r\nKPX Omacron Yacute -70\r\nKPX Omacron Ydieresis -70\r\nKPX Omacron comma -40\r\nKPX Omacron period -40\r\nKPX Oslash A -20\r\nKPX Oslash Aacute -20\r\nKPX Oslash Abreve -20\r\nKPX Oslash Acircumflex -20\r\nKPX Oslash Adieresis -20\r\nKPX Oslash Agrave -20\r\nKPX Oslash Amacron -20\r\nKPX Oslash Aogonek -20\r\nKPX Oslash Aring -20\r\nKPX Oslash Atilde -20\r\nKPX Oslash T -40\r\nKPX Oslash Tcaron -40\r\nKPX Oslash Tcommaaccent -40\r\nKPX Oslash V -50\r\nKPX Oslash W -30\r\nKPX Oslash X -60\r\nKPX Oslash Y -70\r\nKPX Oslash Yacute -70\r\nKPX Oslash Ydieresis -70\r\nKPX Oslash comma -40\r\nKPX Oslash period -40\r\nKPX Otilde A -20\r\nKPX Otilde Aacute -20\r\nKPX Otilde Abreve -20\r\nKPX Otilde Acircumflex -20\r\nKPX Otilde Adieresis -20\r\nKPX Otilde Agrave -20\r\nKPX Otilde Amacron -20\r\nKPX Otilde Aogonek -20\r\nKPX Otilde Aring -20\r\nKPX Otilde Atilde -20\r\nKPX Otilde T -40\r\nKPX Otilde Tcaron -40\r\nKPX Otilde Tcommaaccent -40\r\nKPX Otilde V -50\r\nKPX Otilde W -30\r\nKPX Otilde X -60\r\nKPX Otilde Y -70\r\nKPX Otilde Yacute -70\r\nKPX Otilde Ydieresis -70\r\nKPX Otilde comma -40\r\nKPX Otilde period -40\r\nKPX P A -120\r\nKPX P Aacute -120\r\nKPX P Abreve -120\r\nKPX P Acircumflex -120\r\nKPX P Adieresis -120\r\nKPX P Agrave -120\r\nKPX P Amacron -120\r\nKPX P Aogonek -120\r\nKPX P Aring -120\r\nKPX P Atilde -120\r\nKPX P a -40\r\nKPX P aacute -40\r\nKPX P abreve -40\r\nKPX P acircumflex -40\r\nKPX P adieresis -40\r\nKPX P agrave -40\r\nKPX P amacron -40\r\nKPX P aogonek -40\r\nKPX P aring -40\r\nKPX P atilde -40\r\nKPX P comma -180\r\nKPX P e -50\r\nKPX P eacute -50\r\nKPX P ecaron -50\r\nKPX P ecircumflex -50\r\nKPX P edieresis -50\r\nKPX P edotaccent -50\r\nKPX P egrave -50\r\nKPX P emacron -50\r\nKPX P eogonek -50\r\nKPX P o -50\r\nKPX P oacute -50\r\nKPX P ocircumflex -50\r\nKPX P odieresis -50\r\nKPX P ograve -50\r\nKPX P ohungarumlaut -50\r\nKPX P omacron -50\r\nKPX P oslash -50\r\nKPX P otilde -50\r\nKPX P period -180\r\nKPX Q U -10\r\nKPX Q Uacute -10\r\nKPX Q Ucircumflex -10\r\nKPX Q Udieresis -10\r\nKPX Q Ugrave -10\r\nKPX Q Uhungarumlaut -10\r\nKPX Q Umacron -10\r\nKPX Q Uogonek -10\r\nKPX Q Uring -10\r\nKPX R O -20\r\nKPX R Oacute -20\r\nKPX R Ocircumflex -20\r\nKPX R Odieresis -20\r\nKPX R Ograve -20\r\nKPX R Ohungarumlaut -20\r\nKPX R Omacron -20\r\nKPX R Oslash -20\r\nKPX R Otilde -20\r\nKPX R T -30\r\nKPX R Tcaron -30\r\nKPX R Tcommaaccent -30\r\nKPX R U -40\r\nKPX R Uacute -40\r\nKPX R Ucircumflex -40\r\nKPX R Udieresis -40\r\nKPX R Ugrave -40\r\nKPX R Uhungarumlaut -40\r\nKPX R Umacron -40\r\nKPX R Uogonek -40\r\nKPX R Uring -40\r\nKPX R V -50\r\nKPX R W -30\r\nKPX R Y -50\r\nKPX R Yacute -50\r\nKPX R Ydieresis -50\r\nKPX Racute O -20\r\nKPX Racute Oacute -20\r\nKPX Racute Ocircumflex -20\r\nKPX Racute Odieresis -20\r\nKPX Racute Ograve -20\r\nKPX Racute Ohungarumlaut -20\r\nKPX Racute Omacron -20\r\nKPX Racute Oslash -20\r\nKPX Racute Otilde -20\r\nKPX Racute T -30\r\nKPX Racute Tcaron -30\r\nKPX Racute Tcommaaccent -30\r\nKPX Racute U -40\r\nKPX Racute Uacute -40\r\nKPX Racute Ucircumflex -40\r\nKPX Racute Udieresis -40\r\nKPX Racute Ugrave -40\r\nKPX Racute Uhungarumlaut -40\r\nKPX Racute Umacron -40\r\nKPX Racute Uogonek -40\r\nKPX Racute Uring -40\r\nKPX Racute V -50\r\nKPX Racute W -30\r\nKPX Racute Y -50\r\nKPX Racute Yacute -50\r\nKPX Racute Ydieresis -50\r\nKPX Rcaron O -20\r\nKPX Rcaron Oacute -20\r\nKPX Rcaron Ocircumflex -20\r\nKPX Rcaron Odieresis -20\r\nKPX Rcaron Ograve -20\r\nKPX Rcaron Ohungarumlaut -20\r\nKPX Rcaron Omacron -20\r\nKPX Rcaron Oslash -20\r\nKPX Rcaron Otilde -20\r\nKPX Rcaron T -30\r\nKPX Rcaron Tcaron -30\r\nKPX Rcaron Tcommaaccent -30\r\nKPX Rcaron U -40\r\nKPX Rcaron Uacute -40\r\nKPX Rcaron Ucircumflex -40\r\nKPX Rcaron Udieresis -40\r\nKPX Rcaron Ugrave -40\r\nKPX Rcaron Uhungarumlaut -40\r\nKPX Rcaron Umacron -40\r\nKPX Rcaron Uogonek -40\r\nKPX Rcaron Uring -40\r\nKPX Rcaron V -50\r\nKPX Rcaron W -30\r\nKPX Rcaron Y -50\r\nKPX Rcaron Yacute -50\r\nKPX Rcaron Ydieresis -50\r\nKPX Rcommaaccent O -20\r\nKPX Rcommaaccent Oacute -20\r\nKPX Rcommaaccent Ocircumflex -20\r\nKPX Rcommaaccent Odieresis -20\r\nKPX Rcommaaccent Ograve -20\r\nKPX Rcommaaccent Ohungarumlaut -20\r\nKPX Rcommaaccent Omacron -20\r\nKPX Rcommaaccent Oslash -20\r\nKPX Rcommaaccent Otilde -20\r\nKPX Rcommaaccent T -30\r\nKPX Rcommaaccent Tcaron -30\r\nKPX Rcommaaccent Tcommaaccent -30\r\nKPX Rcommaaccent U -40\r\nKPX Rcommaaccent Uacute -40\r\nKPX Rcommaaccent Ucircumflex -40\r\nKPX Rcommaaccent Udieresis -40\r\nKPX Rcommaaccent Ugrave -40\r\nKPX Rcommaaccent Uhungarumlaut -40\r\nKPX Rcommaaccent Umacron -40\r\nKPX Rcommaaccent Uogonek -40\r\nKPX Rcommaaccent Uring -40\r\nKPX Rcommaaccent V -50\r\nKPX Rcommaaccent W -30\r\nKPX Rcommaaccent Y -50\r\nKPX Rcommaaccent Yacute -50\r\nKPX Rcommaaccent Ydieresis -50\r\nKPX S comma -20\r\nKPX S period -20\r\nKPX Sacute comma -20\r\nKPX Sacute period -20\r\nKPX Scaron comma -20\r\nKPX Scaron period -20\r\nKPX Scedilla comma -20\r\nKPX Scedilla period -20\r\nKPX Scommaaccent comma -20\r\nKPX Scommaaccent period -20\r\nKPX T A -120\r\nKPX T Aacute -120\r\nKPX T Abreve -120\r\nKPX T Acircumflex -120\r\nKPX T Adieresis -120\r\nKPX T Agrave -120\r\nKPX T Amacron -120\r\nKPX T Aogonek -120\r\nKPX T Aring -120\r\nKPX T Atilde -120\r\nKPX T O -40\r\nKPX T Oacute -40\r\nKPX T Ocircumflex -40\r\nKPX T Odieresis -40\r\nKPX T Ograve -40\r\nKPX T Ohungarumlaut -40\r\nKPX T Omacron -40\r\nKPX T Oslash -40\r\nKPX T Otilde -40\r\nKPX T a -120\r\nKPX T aacute -120\r\nKPX T abreve -60\r\nKPX T acircumflex -120\r\nKPX T adieresis -120\r\nKPX T agrave -120\r\nKPX T amacron -60\r\nKPX T aogonek -120\r\nKPX T aring -120\r\nKPX T atilde -60\r\nKPX T colon -20\r\nKPX T comma -120\r\nKPX T e -120\r\nKPX T eacute -120\r\nKPX T ecaron -120\r\nKPX T ecircumflex -120\r\nKPX T edieresis -120\r\nKPX T edotaccent -120\r\nKPX T egrave -60\r\nKPX T emacron -60\r\nKPX T eogonek -120\r\nKPX T hyphen -140\r\nKPX T o -120\r\nKPX T oacute -120\r\nKPX T ocircumflex -120\r\nKPX T odieresis -120\r\nKPX T ograve -120\r\nKPX T ohungarumlaut -120\r\nKPX T omacron -60\r\nKPX T oslash -120\r\nKPX T otilde -60\r\nKPX T period -120\r\nKPX T r -120\r\nKPX T racute -120\r\nKPX T rcaron -120\r\nKPX T rcommaaccent -120\r\nKPX T semicolon -20\r\nKPX T u -120\r\nKPX T uacute -120\r\nKPX T ucircumflex -120\r\nKPX T udieresis -120\r\nKPX T ugrave -120\r\nKPX T uhungarumlaut -120\r\nKPX T umacron -60\r\nKPX T uogonek -120\r\nKPX T uring -120\r\nKPX T w -120\r\nKPX T y -120\r\nKPX T yacute -120\r\nKPX T ydieresis -60\r\nKPX Tcaron A -120\r\nKPX Tcaron Aacute -120\r\nKPX Tcaron Abreve -120\r\nKPX Tcaron Acircumflex -120\r\nKPX Tcaron Adieresis -120\r\nKPX Tcaron Agrave -120\r\nKPX Tcaron Amacron -120\r\nKPX Tcaron Aogonek -120\r\nKPX Tcaron Aring -120\r\nKPX Tcaron Atilde -120\r\nKPX Tcaron O -40\r\nKPX Tcaron Oacute -40\r\nKPX Tcaron Ocircumflex -40\r\nKPX Tcaron Odieresis -40\r\nKPX Tcaron Ograve -40\r\nKPX Tcaron Ohungarumlaut -40\r\nKPX Tcaron Omacron -40\r\nKPX Tcaron Oslash -40\r\nKPX Tcaron Otilde -40\r\nKPX Tcaron a -120\r\nKPX Tcaron aacute -120\r\nKPX Tcaron abreve -60\r\nKPX Tcaron acircumflex -120\r\nKPX Tcaron adieresis -120\r\nKPX Tcaron agrave -120\r\nKPX Tcaron amacron -60\r\nKPX Tcaron aogonek -120\r\nKPX Tcaron aring -120\r\nKPX Tcaron atilde -60\r\nKPX Tcaron colon -20\r\nKPX Tcaron comma -120\r\nKPX Tcaron e -120\r\nKPX Tcaron eacute -120\r\nKPX Tcaron ecaron -120\r\nKPX Tcaron ecircumflex -120\r\nKPX Tcaron edieresis -120\r\nKPX Tcaron edotaccent -120\r\nKPX Tcaron egrave -60\r\nKPX Tcaron emacron -60\r\nKPX Tcaron eogonek -120\r\nKPX Tcaron hyphen -140\r\nKPX Tcaron o -120\r\nKPX Tcaron oacute -120\r\nKPX Tcaron ocircumflex -120\r\nKPX Tcaron odieresis -120\r\nKPX Tcaron ograve -120\r\nKPX Tcaron ohungarumlaut -120\r\nKPX Tcaron omacron -60\r\nKPX Tcaron oslash -120\r\nKPX Tcaron otilde -60\r\nKPX Tcaron period -120\r\nKPX Tcaron r -120\r\nKPX Tcaron racute -120\r\nKPX Tcaron rcaron -120\r\nKPX Tcaron rcommaaccent -120\r\nKPX Tcaron semicolon -20\r\nKPX Tcaron u -120\r\nKPX Tcaron uacute -120\r\nKPX Tcaron ucircumflex -120\r\nKPX Tcaron udieresis -120\r\nKPX Tcaron ugrave -120\r\nKPX Tcaron uhungarumlaut -120\r\nKPX Tcaron umacron -60\r\nKPX Tcaron uogonek -120\r\nKPX Tcaron uring -120\r\nKPX Tcaron w -120\r\nKPX Tcaron y -120\r\nKPX Tcaron yacute -120\r\nKPX Tcaron ydieresis -60\r\nKPX Tcommaaccent A -120\r\nKPX Tcommaaccent Aacute -120\r\nKPX Tcommaaccent Abreve -120\r\nKPX Tcommaaccent Acircumflex -120\r\nKPX Tcommaaccent Adieresis -120\r\nKPX Tcommaaccent Agrave -120\r\nKPX Tcommaaccent Amacron -120\r\nKPX Tcommaaccent Aogonek -120\r\nKPX Tcommaaccent Aring -120\r\nKPX Tcommaaccent Atilde -120\r\nKPX Tcommaaccent O -40\r\nKPX Tcommaaccent Oacute -40\r\nKPX Tcommaaccent Ocircumflex -40\r\nKPX Tcommaaccent Odieresis -40\r\nKPX Tcommaaccent Ograve -40\r\nKPX Tcommaaccent Ohungarumlaut -40\r\nKPX Tcommaaccent Omacron -40\r\nKPX Tcommaaccent Oslash -40\r\nKPX Tcommaaccent Otilde -40\r\nKPX Tcommaaccent a -120\r\nKPX Tcommaaccent aacute -120\r\nKPX Tcommaaccent abreve -60\r\nKPX Tcommaaccent acircumflex -120\r\nKPX Tcommaaccent adieresis -120\r\nKPX Tcommaaccent agrave -120\r\nKPX Tcommaaccent amacron -60\r\nKPX Tcommaaccent aogonek -120\r\nKPX Tcommaaccent aring -120\r\nKPX Tcommaaccent atilde -60\r\nKPX Tcommaaccent colon -20\r\nKPX Tcommaaccent comma -120\r\nKPX Tcommaaccent e -120\r\nKPX Tcommaaccent eacute -120\r\nKPX Tcommaaccent ecaron -120\r\nKPX Tcommaaccent ecircumflex -120\r\nKPX Tcommaaccent edieresis -120\r\nKPX Tcommaaccent edotaccent -120\r\nKPX Tcommaaccent egrave -60\r\nKPX Tcommaaccent emacron -60\r\nKPX Tcommaaccent eogonek -120\r\nKPX Tcommaaccent hyphen -140\r\nKPX Tcommaaccent o -120\r\nKPX Tcommaaccent oacute -120\r\nKPX Tcommaaccent ocircumflex -120\r\nKPX Tcommaaccent odieresis -120\r\nKPX Tcommaaccent ograve -120\r\nKPX Tcommaaccent ohungarumlaut -120\r\nKPX Tcommaaccent omacron -60\r\nKPX Tcommaaccent oslash -120\r\nKPX Tcommaaccent otilde -60\r\nKPX Tcommaaccent period -120\r\nKPX Tcommaaccent r -120\r\nKPX Tcommaaccent racute -120\r\nKPX Tcommaaccent rcaron -120\r\nKPX Tcommaaccent rcommaaccent -120\r\nKPX Tcommaaccent semicolon -20\r\nKPX Tcommaaccent u -120\r\nKPX Tcommaaccent uacute -120\r\nKPX Tcommaaccent ucircumflex -120\r\nKPX Tcommaaccent udieresis -120\r\nKPX Tcommaaccent ugrave -120\r\nKPX Tcommaaccent uhungarumlaut -120\r\nKPX Tcommaaccent umacron -60\r\nKPX Tcommaaccent uogonek -120\r\nKPX Tcommaaccent uring -120\r\nKPX Tcommaaccent w -120\r\nKPX Tcommaaccent y -120\r\nKPX Tcommaaccent yacute -120\r\nKPX Tcommaaccent ydieresis -60\r\nKPX U A -40\r\nKPX U Aacute -40\r\nKPX U Abreve -40\r\nKPX U Acircumflex -40\r\nKPX U Adieresis -40\r\nKPX U Agrave -40\r\nKPX U Amacron -40\r\nKPX U Aogonek -40\r\nKPX U Aring -40\r\nKPX U Atilde -40\r\nKPX U comma -40\r\nKPX U period -40\r\nKPX Uacute A -40\r\nKPX Uacute Aacute -40\r\nKPX Uacute Abreve -40\r\nKPX Uacute Acircumflex -40\r\nKPX Uacute Adieresis -40\r\nKPX Uacute Agrave -40\r\nKPX Uacute Amacron -40\r\nKPX Uacute Aogonek -40\r\nKPX Uacute Aring -40\r\nKPX Uacute Atilde -40\r\nKPX Uacute comma -40\r\nKPX Uacute period -40\r\nKPX Ucircumflex A -40\r\nKPX Ucircumflex Aacute -40\r\nKPX Ucircumflex Abreve -40\r\nKPX Ucircumflex Acircumflex -40\r\nKPX Ucircumflex Adieresis -40\r\nKPX Ucircumflex Agrave -40\r\nKPX Ucircumflex Amacron -40\r\nKPX Ucircumflex Aogonek -40\r\nKPX Ucircumflex Aring -40\r\nKPX Ucircumflex Atilde -40\r\nKPX Ucircumflex comma -40\r\nKPX Ucircumflex period -40\r\nKPX Udieresis A -40\r\nKPX Udieresis Aacute -40\r\nKPX Udieresis Abreve -40\r\nKPX Udieresis Acircumflex -40\r\nKPX Udieresis Adieresis -40\r\nKPX Udieresis Agrave -40\r\nKPX Udieresis Amacron -40\r\nKPX Udieresis Aogonek -40\r\nKPX Udieresis Aring -40\r\nKPX Udieresis Atilde -40\r\nKPX Udieresis comma -40\r\nKPX Udieresis period -40\r\nKPX Ugrave A -40\r\nKPX Ugrave Aacute -40\r\nKPX Ugrave Abreve -40\r\nKPX Ugrave Acircumflex -40\r\nKPX Ugrave Adieresis -40\r\nKPX Ugrave Agrave -40\r\nKPX Ugrave Amacron -40\r\nKPX Ugrave Aogonek -40\r\nKPX Ugrave Aring -40\r\nKPX Ugrave Atilde -40\r\nKPX Ugrave comma -40\r\nKPX Ugrave period -40\r\nKPX Uhungarumlaut A -40\r\nKPX Uhungarumlaut Aacute -40\r\nKPX Uhungarumlaut Abreve -40\r\nKPX Uhungarumlaut Acircumflex -40\r\nKPX Uhungarumlaut Adieresis -40\r\nKPX Uhungarumlaut Agrave -40\r\nKPX Uhungarumlaut Amacron -40\r\nKPX Uhungarumlaut Aogonek -40\r\nKPX Uhungarumlaut Aring -40\r\nKPX Uhungarumlaut Atilde -40\r\nKPX Uhungarumlaut comma -40\r\nKPX Uhungarumlaut period -40\r\nKPX Umacron A -40\r\nKPX Umacron Aacute -40\r\nKPX Umacron Abreve -40\r\nKPX Umacron Acircumflex -40\r\nKPX Umacron Adieresis -40\r\nKPX Umacron Agrave -40\r\nKPX Umacron Amacron -40\r\nKPX Umacron Aogonek -40\r\nKPX Umacron Aring -40\r\nKPX Umacron Atilde -40\r\nKPX Umacron comma -40\r\nKPX Umacron period -40\r\nKPX Uogonek A -40\r\nKPX Uogonek Aacute -40\r\nKPX Uogonek Abreve -40\r\nKPX Uogonek Acircumflex -40\r\nKPX Uogonek Adieresis -40\r\nKPX Uogonek Agrave -40\r\nKPX Uogonek Amacron -40\r\nKPX Uogonek Aogonek -40\r\nKPX Uogonek Aring -40\r\nKPX Uogonek Atilde -40\r\nKPX Uogonek comma -40\r\nKPX Uogonek period -40\r\nKPX Uring A -40\r\nKPX Uring Aacute -40\r\nKPX Uring Abreve -40\r\nKPX Uring Acircumflex -40\r\nKPX Uring Adieresis -40\r\nKPX Uring Agrave -40\r\nKPX Uring Amacron -40\r\nKPX Uring Aogonek -40\r\nKPX Uring Aring -40\r\nKPX Uring Atilde -40\r\nKPX Uring comma -40\r\nKPX Uring period -40\r\nKPX V A -80\r\nKPX V Aacute -80\r\nKPX V Abreve -80\r\nKPX V Acircumflex -80\r\nKPX V Adieresis -80\r\nKPX V Agrave -80\r\nKPX V Amacron -80\r\nKPX V Aogonek -80\r\nKPX V Aring -80\r\nKPX V Atilde -80\r\nKPX V G -40\r\nKPX V Gbreve -40\r\nKPX V Gcommaaccent -40\r\nKPX V O -40\r\nKPX V Oacute -40\r\nKPX V Ocircumflex -40\r\nKPX V Odieresis -40\r\nKPX V Ograve -40\r\nKPX V Ohungarumlaut -40\r\nKPX V Omacron -40\r\nKPX V Oslash -40\r\nKPX V Otilde -40\r\nKPX V a -70\r\nKPX V aacute -70\r\nKPX V abreve -70\r\nKPX V acircumflex -70\r\nKPX V adieresis -70\r\nKPX V agrave -70\r\nKPX V amacron -70\r\nKPX V aogonek -70\r\nKPX V aring -70\r\nKPX V atilde -70\r\nKPX V colon -40\r\nKPX V comma -125\r\nKPX V e -80\r\nKPX V eacute -80\r\nKPX V ecaron -80\r\nKPX V ecircumflex -80\r\nKPX V edieresis -80\r\nKPX V edotaccent -80\r\nKPX V egrave -80\r\nKPX V emacron -80\r\nKPX V eogonek -80\r\nKPX V hyphen -80\r\nKPX V o -80\r\nKPX V oacute -80\r\nKPX V ocircumflex -80\r\nKPX V odieresis -80\r\nKPX V ograve -80\r\nKPX V ohungarumlaut -80\r\nKPX V omacron -80\r\nKPX V oslash -80\r\nKPX V otilde -80\r\nKPX V period -125\r\nKPX V semicolon -40\r\nKPX V u -70\r\nKPX V uacute -70\r\nKPX V ucircumflex -70\r\nKPX V udieresis -70\r\nKPX V ugrave -70\r\nKPX V uhungarumlaut -70\r\nKPX V umacron -70\r\nKPX V uogonek -70\r\nKPX V uring -70\r\nKPX W A -50\r\nKPX W Aacute -50\r\nKPX W Abreve -50\r\nKPX W Acircumflex -50\r\nKPX W Adieresis -50\r\nKPX W Agrave -50\r\nKPX W Amacron -50\r\nKPX W Aogonek -50\r\nKPX W Aring -50\r\nKPX W Atilde -50\r\nKPX W O -20\r\nKPX W Oacute -20\r\nKPX W Ocircumflex -20\r\nKPX W Odieresis -20\r\nKPX W Ograve -20\r\nKPX W Ohungarumlaut -20\r\nKPX W Omacron -20\r\nKPX W Oslash -20\r\nKPX W Otilde -20\r\nKPX W a -40\r\nKPX W aacute -40\r\nKPX W abreve -40\r\nKPX W acircumflex -40\r\nKPX W adieresis -40\r\nKPX W agrave -40\r\nKPX W amacron -40\r\nKPX W aogonek -40\r\nKPX W aring -40\r\nKPX W atilde -40\r\nKPX W comma -80\r\nKPX W e -30\r\nKPX W eacute -30\r\nKPX W ecaron -30\r\nKPX W ecircumflex -30\r\nKPX W edieresis -30\r\nKPX W edotaccent -30\r\nKPX W egrave -30\r\nKPX W emacron -30\r\nKPX W eogonek -30\r\nKPX W hyphen -40\r\nKPX W o -30\r\nKPX W oacute -30\r\nKPX W ocircumflex -30\r\nKPX W odieresis -30\r\nKPX W ograve -30\r\nKPX W ohungarumlaut -30\r\nKPX W omacron -30\r\nKPX W oslash -30\r\nKPX W otilde -30\r\nKPX W period -80\r\nKPX W u -30\r\nKPX W uacute -30\r\nKPX W ucircumflex -30\r\nKPX W udieresis -30\r\nKPX W ugrave -30\r\nKPX W uhungarumlaut -30\r\nKPX W umacron -30\r\nKPX W uogonek -30\r\nKPX W uring -30\r\nKPX W y -20\r\nKPX W yacute -20\r\nKPX W ydieresis -20\r\nKPX Y A -110\r\nKPX Y Aacute -110\r\nKPX Y Abreve -110\r\nKPX Y Acircumflex -110\r\nKPX Y Adieresis -110\r\nKPX Y Agrave -110\r\nKPX Y Amacron -110\r\nKPX Y Aogonek -110\r\nKPX Y Aring -110\r\nKPX Y Atilde -110\r\nKPX Y O -85\r\nKPX Y Oacute -85\r\nKPX Y Ocircumflex -85\r\nKPX Y Odieresis -85\r\nKPX Y Ograve -85\r\nKPX Y Ohungarumlaut -85\r\nKPX Y Omacron -85\r\nKPX Y Oslash -85\r\nKPX Y Otilde -85\r\nKPX Y a -140\r\nKPX Y aacute -140\r\nKPX Y abreve -70\r\nKPX Y acircumflex -140\r\nKPX Y adieresis -140\r\nKPX Y agrave -140\r\nKPX Y amacron -70\r\nKPX Y aogonek -140\r\nKPX Y aring -140\r\nKPX Y atilde -140\r\nKPX Y colon -60\r\nKPX Y comma -140\r\nKPX Y e -140\r\nKPX Y eacute -140\r\nKPX Y ecaron -140\r\nKPX Y ecircumflex -140\r\nKPX Y edieresis -140\r\nKPX Y edotaccent -140\r\nKPX Y egrave -140\r\nKPX Y emacron -70\r\nKPX Y eogonek -140\r\nKPX Y hyphen -140\r\nKPX Y i -20\r\nKPX Y iacute -20\r\nKPX Y iogonek -20\r\nKPX Y o -140\r\nKPX Y oacute -140\r\nKPX Y ocircumflex -140\r\nKPX Y odieresis -140\r\nKPX Y ograve -140\r\nKPX Y ohungarumlaut -140\r\nKPX Y omacron -140\r\nKPX Y oslash -140\r\nKPX Y otilde -140\r\nKPX Y period -140\r\nKPX Y semicolon -60\r\nKPX Y u -110\r\nKPX Y uacute -110\r\nKPX Y ucircumflex -110\r\nKPX Y udieresis -110\r\nKPX Y ugrave -110\r\nKPX Y uhungarumlaut -110\r\nKPX Y umacron -110\r\nKPX Y uogonek -110\r\nKPX Y uring -110\r\nKPX Yacute A -110\r\nKPX Yacute Aacute -110\r\nKPX Yacute Abreve -110\r\nKPX Yacute Acircumflex -110\r\nKPX Yacute Adieresis -110\r\nKPX Yacute Agrave -110\r\nKPX Yacute Amacron -110\r\nKPX Yacute Aogonek -110\r\nKPX Yacute Aring -110\r\nKPX Yacute Atilde -110\r\nKPX Yacute O -85\r\nKPX Yacute Oacute -85\r\nKPX Yacute Ocircumflex -85\r\nKPX Yacute Odieresis -85\r\nKPX Yacute Ograve -85\r\nKPX Yacute Ohungarumlaut -85\r\nKPX Yacute Omacron -85\r\nKPX Yacute Oslash -85\r\nKPX Yacute Otilde -85\r\nKPX Yacute a -140\r\nKPX Yacute aacute -140\r\nKPX Yacute abreve -70\r\nKPX Yacute acircumflex -140\r\nKPX Yacute adieresis -140\r\nKPX Yacute agrave -140\r\nKPX Yacute amacron -70\r\nKPX Yacute aogonek -140\r\nKPX Yacute aring -140\r\nKPX Yacute atilde -70\r\nKPX Yacute colon -60\r\nKPX Yacute comma -140\r\nKPX Yacute e -140\r\nKPX Yacute eacute -140\r\nKPX Yacute ecaron -140\r\nKPX Yacute ecircumflex -140\r\nKPX Yacute edieresis -140\r\nKPX Yacute edotaccent -140\r\nKPX Yacute egrave -140\r\nKPX Yacute emacron -70\r\nKPX Yacute eogonek -140\r\nKPX Yacute hyphen -140\r\nKPX Yacute i -20\r\nKPX Yacute iacute -20\r\nKPX Yacute iogonek -20\r\nKPX Yacute o -140\r\nKPX Yacute oacute -140\r\nKPX Yacute ocircumflex -140\r\nKPX Yacute odieresis -140\r\nKPX Yacute ograve -140\r\nKPX Yacute ohungarumlaut -140\r\nKPX Yacute omacron -70\r\nKPX Yacute oslash -140\r\nKPX Yacute otilde -140\r\nKPX Yacute period -140\r\nKPX Yacute semicolon -60\r\nKPX Yacute u -110\r\nKPX Yacute uacute -110\r\nKPX Yacute ucircumflex -110\r\nKPX Yacute udieresis -110\r\nKPX Yacute ugrave -110\r\nKPX Yacute uhungarumlaut -110\r\nKPX Yacute umacron -110\r\nKPX Yacute uogonek -110\r\nKPX Yacute uring -110\r\nKPX Ydieresis A -110\r\nKPX Ydieresis Aacute -110\r\nKPX Ydieresis Abreve -110\r\nKPX Ydieresis Acircumflex -110\r\nKPX Ydieresis Adieresis -110\r\nKPX Ydieresis Agrave -110\r\nKPX Ydieresis Amacron -110\r\nKPX Ydieresis Aogonek -110\r\nKPX Ydieresis Aring -110\r\nKPX Ydieresis Atilde -110\r\nKPX Ydieresis O -85\r\nKPX Ydieresis Oacute -85\r\nKPX Ydieresis Ocircumflex -85\r\nKPX Ydieresis Odieresis -85\r\nKPX Ydieresis Ograve -85\r\nKPX Ydieresis Ohungarumlaut -85\r\nKPX Ydieresis Omacron -85\r\nKPX Ydieresis Oslash -85\r\nKPX Ydieresis Otilde -85\r\nKPX Ydieresis a -140\r\nKPX Ydieresis aacute -140\r\nKPX Ydieresis abreve -70\r\nKPX Ydieresis acircumflex -140\r\nKPX Ydieresis adieresis -140\r\nKPX Ydieresis agrave -140\r\nKPX Ydieresis amacron -70\r\nKPX Ydieresis aogonek -140\r\nKPX Ydieresis aring -140\r\nKPX Ydieresis atilde -70\r\nKPX Ydieresis colon -60\r\nKPX Ydieresis comma -140\r\nKPX Ydieresis e -140\r\nKPX Ydieresis eacute -140\r\nKPX Ydieresis ecaron -140\r\nKPX Ydieresis ecircumflex -140\r\nKPX Ydieresis edieresis -140\r\nKPX Ydieresis edotaccent -140\r\nKPX Ydieresis egrave -140\r\nKPX Ydieresis emacron -70\r\nKPX Ydieresis eogonek -140\r\nKPX Ydieresis hyphen -140\r\nKPX Ydieresis i -20\r\nKPX Ydieresis iacute -20\r\nKPX Ydieresis iogonek -20\r\nKPX Ydieresis o -140\r\nKPX Ydieresis oacute -140\r\nKPX Ydieresis ocircumflex -140\r\nKPX Ydieresis odieresis -140\r\nKPX Ydieresis ograve -140\r\nKPX Ydieresis ohungarumlaut -140\r\nKPX Ydieresis omacron -140\r\nKPX Ydieresis oslash -140\r\nKPX Ydieresis otilde -140\r\nKPX Ydieresis period -140\r\nKPX Ydieresis semicolon -60\r\nKPX Ydieresis u -110\r\nKPX Ydieresis uacute -110\r\nKPX Ydieresis ucircumflex -110\r\nKPX Ydieresis udieresis -110\r\nKPX Ydieresis ugrave -110\r\nKPX Ydieresis uhungarumlaut -110\r\nKPX Ydieresis umacron -110\r\nKPX Ydieresis uogonek -110\r\nKPX Ydieresis uring -110\r\nKPX a v -20\r\nKPX a w -20\r\nKPX a y -30\r\nKPX a yacute -30\r\nKPX a ydieresis -30\r\nKPX aacute v -20\r\nKPX aacute w -20\r\nKPX aacute y -30\r\nKPX aacute yacute -30\r\nKPX aacute ydieresis -30\r\nKPX abreve v -20\r\nKPX abreve w -20\r\nKPX abreve y -30\r\nKPX abreve yacute -30\r\nKPX abreve ydieresis -30\r\nKPX acircumflex v -20\r\nKPX acircumflex w -20\r\nKPX acircumflex y -30\r\nKPX acircumflex yacute -30\r\nKPX acircumflex ydieresis -30\r\nKPX adieresis v -20\r\nKPX adieresis w -20\r\nKPX adieresis y -30\r\nKPX adieresis yacute -30\r\nKPX adieresis ydieresis -30\r\nKPX agrave v -20\r\nKPX agrave w -20\r\nKPX agrave y -30\r\nKPX agrave yacute -30\r\nKPX agrave ydieresis -30\r\nKPX amacron v -20\r\nKPX amacron w -20\r\nKPX amacron y -30\r\nKPX amacron yacute -30\r\nKPX amacron ydieresis -30\r\nKPX aogonek v -20\r\nKPX aogonek w -20\r\nKPX aogonek y -30\r\nKPX aogonek yacute -30\r\nKPX aogonek ydieresis -30\r\nKPX aring v -20\r\nKPX aring w -20\r\nKPX aring y -30\r\nKPX aring yacute -30\r\nKPX aring ydieresis -30\r\nKPX atilde v -20\r\nKPX atilde w -20\r\nKPX atilde y -30\r\nKPX atilde yacute -30\r\nKPX atilde ydieresis -30\r\nKPX b b -10\r\nKPX b comma -40\r\nKPX b l -20\r\nKPX b lacute -20\r\nKPX b lcommaaccent -20\r\nKPX b lslash -20\r\nKPX b period -40\r\nKPX b u -20\r\nKPX b uacute -20\r\nKPX b ucircumflex -20\r\nKPX b udieresis -20\r\nKPX b ugrave -20\r\nKPX b uhungarumlaut -20\r\nKPX b umacron -20\r\nKPX b uogonek -20\r\nKPX b uring -20\r\nKPX b v -20\r\nKPX b y -20\r\nKPX b yacute -20\r\nKPX b ydieresis -20\r\nKPX c comma -15\r\nKPX c k -20\r\nKPX c kcommaaccent -20\r\nKPX cacute comma -15\r\nKPX cacute k -20\r\nKPX cacute kcommaaccent -20\r\nKPX ccaron comma -15\r\nKPX ccaron k -20\r\nKPX ccaron kcommaaccent -20\r\nKPX ccedilla comma -15\r\nKPX ccedilla k -20\r\nKPX ccedilla kcommaaccent -20\r\nKPX colon space -50\r\nKPX comma quotedblright -100\r\nKPX comma quoteright -100\r\nKPX e comma -15\r\nKPX e period -15\r\nKPX e v -30\r\nKPX e w -20\r\nKPX e x -30\r\nKPX e y -20\r\nKPX e yacute -20\r\nKPX e ydieresis -20\r\nKPX eacute comma -15\r\nKPX eacute period -15\r\nKPX eacute v -30\r\nKPX eacute w -20\r\nKPX eacute x -30\r\nKPX eacute y -20\r\nKPX eacute yacute -20\r\nKPX eacute ydieresis -20\r\nKPX ecaron comma -15\r\nKPX ecaron period -15\r\nKPX ecaron v -30\r\nKPX ecaron w -20\r\nKPX ecaron x -30\r\nKPX ecaron y -20\r\nKPX ecaron yacute -20\r\nKPX ecaron ydieresis -20\r\nKPX ecircumflex comma -15\r\nKPX ecircumflex period -15\r\nKPX ecircumflex v -30\r\nKPX ecircumflex w -20\r\nKPX ecircumflex x -30\r\nKPX ecircumflex y -20\r\nKPX ecircumflex yacute -20\r\nKPX ecircumflex ydieresis -20\r\nKPX edieresis comma -15\r\nKPX edieresis period -15\r\nKPX edieresis v -30\r\nKPX edieresis w -20\r\nKPX edieresis x -30\r\nKPX edieresis y -20\r\nKPX edieresis yacute -20\r\nKPX edieresis ydieresis -20\r\nKPX edotaccent comma -15\r\nKPX edotaccent period -15\r\nKPX edotaccent v -30\r\nKPX edotaccent w -20\r\nKPX edotaccent x -30\r\nKPX edotaccent y -20\r\nKPX edotaccent yacute -20\r\nKPX edotaccent ydieresis -20\r\nKPX egrave comma -15\r\nKPX egrave period -15\r\nKPX egrave v -30\r\nKPX egrave w -20\r\nKPX egrave x -30\r\nKPX egrave y -20\r\nKPX egrave yacute -20\r\nKPX egrave ydieresis -20\r\nKPX emacron comma -15\r\nKPX emacron period -15\r\nKPX emacron v -30\r\nKPX emacron w -20\r\nKPX emacron x -30\r\nKPX emacron y -20\r\nKPX emacron yacute -20\r\nKPX emacron ydieresis -20\r\nKPX eogonek comma -15\r\nKPX eogonek period -15\r\nKPX eogonek v -30\r\nKPX eogonek w -20\r\nKPX eogonek x -30\r\nKPX eogonek y -20\r\nKPX eogonek yacute -20\r\nKPX eogonek ydieresis -20\r\nKPX f a -30\r\nKPX f aacute -30\r\nKPX f abreve -30\r\nKPX f acircumflex -30\r\nKPX f adieresis -30\r\nKPX f agrave -30\r\nKPX f amacron -30\r\nKPX f aogonek -30\r\nKPX f aring -30\r\nKPX f atilde -30\r\nKPX f comma -30\r\nKPX f dotlessi -28\r\nKPX f e -30\r\nKPX f eacute -30\r\nKPX f ecaron -30\r\nKPX f ecircumflex -30\r\nKPX f edieresis -30\r\nKPX f edotaccent -30\r\nKPX f egrave -30\r\nKPX f emacron -30\r\nKPX f eogonek -30\r\nKPX f o -30\r\nKPX f oacute -30\r\nKPX f ocircumflex -30\r\nKPX f odieresis -30\r\nKPX f ograve -30\r\nKPX f ohungarumlaut -30\r\nKPX f omacron -30\r\nKPX f oslash -30\r\nKPX f otilde -30\r\nKPX f period -30\r\nKPX f quotedblright 60\r\nKPX f quoteright 50\r\nKPX g r -10\r\nKPX g racute -10\r\nKPX g rcaron -10\r\nKPX g rcommaaccent -10\r\nKPX gbreve r -10\r\nKPX gbreve racute -10\r\nKPX gbreve rcaron -10\r\nKPX gbreve rcommaaccent -10\r\nKPX gcommaaccent r -10\r\nKPX gcommaaccent racute -10\r\nKPX gcommaaccent rcaron -10\r\nKPX gcommaaccent rcommaaccent -10\r\nKPX h y -30\r\nKPX h yacute -30\r\nKPX h ydieresis -30\r\nKPX k e -20\r\nKPX k eacute -20\r\nKPX k ecaron -20\r\nKPX k ecircumflex -20\r\nKPX k edieresis -20\r\nKPX k edotaccent -20\r\nKPX k egrave -20\r\nKPX k emacron -20\r\nKPX k eogonek -20\r\nKPX k o -20\r\nKPX k oacute -20\r\nKPX k ocircumflex -20\r\nKPX k odieresis -20\r\nKPX k ograve -20\r\nKPX k ohungarumlaut -20\r\nKPX k omacron -20\r\nKPX k oslash -20\r\nKPX k otilde -20\r\nKPX kcommaaccent e -20\r\nKPX kcommaaccent eacute -20\r\nKPX kcommaaccent ecaron -20\r\nKPX kcommaaccent ecircumflex -20\r\nKPX kcommaaccent edieresis -20\r\nKPX kcommaaccent edotaccent -20\r\nKPX kcommaaccent egrave -20\r\nKPX kcommaaccent emacron -20\r\nKPX kcommaaccent eogonek -20\r\nKPX kcommaaccent o -20\r\nKPX kcommaaccent oacute -20\r\nKPX kcommaaccent ocircumflex -20\r\nKPX kcommaaccent odieresis -20\r\nKPX kcommaaccent ograve -20\r\nKPX kcommaaccent ohungarumlaut -20\r\nKPX kcommaaccent omacron -20\r\nKPX kcommaaccent oslash -20\r\nKPX kcommaaccent otilde -20\r\nKPX m u -10\r\nKPX m uacute -10\r\nKPX m ucircumflex -10\r\nKPX m udieresis -10\r\nKPX m ugrave -10\r\nKPX m uhungarumlaut -10\r\nKPX m umacron -10\r\nKPX m uogonek -10\r\nKPX m uring -10\r\nKPX m y -15\r\nKPX m yacute -15\r\nKPX m ydieresis -15\r\nKPX n u -10\r\nKPX n uacute -10\r\nKPX n ucircumflex -10\r\nKPX n udieresis -10\r\nKPX n ugrave -10\r\nKPX n uhungarumlaut -10\r\nKPX n umacron -10\r\nKPX n uogonek -10\r\nKPX n uring -10\r\nKPX n v -20\r\nKPX n y -15\r\nKPX n yacute -15\r\nKPX n ydieresis -15\r\nKPX nacute u -10\r\nKPX nacute uacute -10\r\nKPX nacute ucircumflex -10\r\nKPX nacute udieresis -10\r\nKPX nacute ugrave -10\r\nKPX nacute uhungarumlaut -10\r\nKPX nacute umacron -10\r\nKPX nacute uogonek -10\r\nKPX nacute uring -10\r\nKPX nacute v -20\r\nKPX nacute y -15\r\nKPX nacute yacute -15\r\nKPX nacute ydieresis -15\r\nKPX ncaron u -10\r\nKPX ncaron uacute -10\r\nKPX ncaron ucircumflex -10\r\nKPX ncaron udieresis -10\r\nKPX ncaron ugrave -10\r\nKPX ncaron uhungarumlaut -10\r\nKPX ncaron umacron -10\r\nKPX ncaron uogonek -10\r\nKPX ncaron uring -10\r\nKPX ncaron v -20\r\nKPX ncaron y -15\r\nKPX ncaron yacute -15\r\nKPX ncaron ydieresis -15\r\nKPX ncommaaccent u -10\r\nKPX ncommaaccent uacute -10\r\nKPX ncommaaccent ucircumflex -10\r\nKPX ncommaaccent udieresis -10\r\nKPX ncommaaccent ugrave -10\r\nKPX ncommaaccent uhungarumlaut -10\r\nKPX ncommaaccent umacron -10\r\nKPX ncommaaccent uogonek -10\r\nKPX ncommaaccent uring -10\r\nKPX ncommaaccent v -20\r\nKPX ncommaaccent y -15\r\nKPX ncommaaccent yacute -15\r\nKPX ncommaaccent ydieresis -15\r\nKPX ntilde u -10\r\nKPX ntilde uacute -10\r\nKPX ntilde ucircumflex -10\r\nKPX ntilde udieresis -10\r\nKPX ntilde ugrave -10\r\nKPX ntilde uhungarumlaut -10\r\nKPX ntilde umacron -10\r\nKPX ntilde uogonek -10\r\nKPX ntilde uring -10\r\nKPX ntilde v -20\r\nKPX ntilde y -15\r\nKPX ntilde yacute -15\r\nKPX ntilde ydieresis -15\r\nKPX o comma -40\r\nKPX o period -40\r\nKPX o v -15\r\nKPX o w -15\r\nKPX o x -30\r\nKPX o y -30\r\nKPX o yacute -30\r\nKPX o ydieresis -30\r\nKPX oacute comma -40\r\nKPX oacute period -40\r\nKPX oacute v -15\r\nKPX oacute w -15\r\nKPX oacute x -30\r\nKPX oacute y -30\r\nKPX oacute yacute -30\r\nKPX oacute ydieresis -30\r\nKPX ocircumflex comma -40\r\nKPX ocircumflex period -40\r\nKPX ocircumflex v -15\r\nKPX ocircumflex w -15\r\nKPX ocircumflex x -30\r\nKPX ocircumflex y -30\r\nKPX ocircumflex yacute -30\r\nKPX ocircumflex ydieresis -30\r\nKPX odieresis comma -40\r\nKPX odieresis period -40\r\nKPX odieresis v -15\r\nKPX odieresis w -15\r\nKPX odieresis x -30\r\nKPX odieresis y -30\r\nKPX odieresis yacute -30\r\nKPX odieresis ydieresis -30\r\nKPX ograve comma -40\r\nKPX ograve period -40\r\nKPX ograve v -15\r\nKPX ograve w -15\r\nKPX ograve x -30\r\nKPX ograve y -30\r\nKPX ograve yacute -30\r\nKPX ograve ydieresis -30\r\nKPX ohungarumlaut comma -40\r\nKPX ohungarumlaut period -40\r\nKPX ohungarumlaut v -15\r\nKPX ohungarumlaut w -15\r\nKPX ohungarumlaut x -30\r\nKPX ohungarumlaut y -30\r\nKPX ohungarumlaut yacute -30\r\nKPX ohungarumlaut ydieresis -30\r\nKPX omacron comma -40\r\nKPX omacron period -40\r\nKPX omacron v -15\r\nKPX omacron w -15\r\nKPX omacron x -30\r\nKPX omacron y -30\r\nKPX omacron yacute -30\r\nKPX omacron ydieresis -30\r\nKPX oslash a -55\r\nKPX oslash aacute -55\r\nKPX oslash abreve -55\r\nKPX oslash acircumflex -55\r\nKPX oslash adieresis -55\r\nKPX oslash agrave -55\r\nKPX oslash amacron -55\r\nKPX oslash aogonek -55\r\nKPX oslash aring -55\r\nKPX oslash atilde -55\r\nKPX oslash b -55\r\nKPX oslash c -55\r\nKPX oslash cacute -55\r\nKPX oslash ccaron -55\r\nKPX oslash ccedilla -55\r\nKPX oslash comma -95\r\nKPX oslash d -55\r\nKPX oslash dcroat -55\r\nKPX oslash e -55\r\nKPX oslash eacute -55\r\nKPX oslash ecaron -55\r\nKPX oslash ecircumflex -55\r\nKPX oslash edieresis -55\r\nKPX oslash edotaccent -55\r\nKPX oslash egrave -55\r\nKPX oslash emacron -55\r\nKPX oslash eogonek -55\r\nKPX oslash f -55\r\nKPX oslash g -55\r\nKPX oslash gbreve -55\r\nKPX oslash gcommaaccent -55\r\nKPX oslash h -55\r\nKPX oslash i -55\r\nKPX oslash iacute -55\r\nKPX oslash icircumflex -55\r\nKPX oslash idieresis -55\r\nKPX oslash igrave -55\r\nKPX oslash imacron -55\r\nKPX oslash iogonek -55\r\nKPX oslash j -55\r\nKPX oslash k -55\r\nKPX oslash kcommaaccent -55\r\nKPX oslash l -55\r\nKPX oslash lacute -55\r\nKPX oslash lcommaaccent -55\r\nKPX oslash lslash -55\r\nKPX oslash m -55\r\nKPX oslash n -55\r\nKPX oslash nacute -55\r\nKPX oslash ncaron -55\r\nKPX oslash ncommaaccent -55\r\nKPX oslash ntilde -55\r\nKPX oslash o -55\r\nKPX oslash oacute -55\r\nKPX oslash ocircumflex -55\r\nKPX oslash odieresis -55\r\nKPX oslash ograve -55\r\nKPX oslash ohungarumlaut -55\r\nKPX oslash omacron -55\r\nKPX oslash oslash -55\r\nKPX oslash otilde -55\r\nKPX oslash p -55\r\nKPX oslash period -95\r\nKPX oslash q -55\r\nKPX oslash r -55\r\nKPX oslash racute -55\r\nKPX oslash rcaron -55\r\nKPX oslash rcommaaccent -55\r\nKPX oslash s -55\r\nKPX oslash sacute -55\r\nKPX oslash scaron -55\r\nKPX oslash scedilla -55\r\nKPX oslash scommaaccent -55\r\nKPX oslash t -55\r\nKPX oslash tcommaaccent -55\r\nKPX oslash u -55\r\nKPX oslash uacute -55\r\nKPX oslash ucircumflex -55\r\nKPX oslash udieresis -55\r\nKPX oslash ugrave -55\r\nKPX oslash uhungarumlaut -55\r\nKPX oslash umacron -55\r\nKPX oslash uogonek -55\r\nKPX oslash uring -55\r\nKPX oslash v -70\r\nKPX oslash w -70\r\nKPX oslash x -85\r\nKPX oslash y -70\r\nKPX oslash yacute -70\r\nKPX oslash ydieresis -70\r\nKPX oslash z -55\r\nKPX oslash zacute -55\r\nKPX oslash zcaron -55\r\nKPX oslash zdotaccent -55\r\nKPX otilde comma -40\r\nKPX otilde period -40\r\nKPX otilde v -15\r\nKPX otilde w -15\r\nKPX otilde x -30\r\nKPX otilde y -30\r\nKPX otilde yacute -30\r\nKPX otilde ydieresis -30\r\nKPX p comma -35\r\nKPX p period -35\r\nKPX p y -30\r\nKPX p yacute -30\r\nKPX p ydieresis -30\r\nKPX period quotedblright -100\r\nKPX period quoteright -100\r\nKPX period space -60\r\nKPX quotedblright space -40\r\nKPX quoteleft quoteleft -57\r\nKPX quoteright d -50\r\nKPX quoteright dcroat -50\r\nKPX quoteright quoteright -57\r\nKPX quoteright r -50\r\nKPX quoteright racute -50\r\nKPX quoteright rcaron -50\r\nKPX quoteright rcommaaccent -50\r\nKPX quoteright s -50\r\nKPX quoteright sacute -50\r\nKPX quoteright scaron -50\r\nKPX quoteright scedilla -50\r\nKPX quoteright scommaaccent -50\r\nKPX quoteright space -70\r\nKPX r a -10\r\nKPX r aacute -10\r\nKPX r abreve -10\r\nKPX r acircumflex -10\r\nKPX r adieresis -10\r\nKPX r agrave -10\r\nKPX r amacron -10\r\nKPX r aogonek -10\r\nKPX r aring -10\r\nKPX r atilde -10\r\nKPX r colon 30\r\nKPX r comma -50\r\nKPX r i 15\r\nKPX r iacute 15\r\nKPX r icircumflex 15\r\nKPX r idieresis 15\r\nKPX r igrave 15\r\nKPX r imacron 15\r\nKPX r iogonek 15\r\nKPX r k 15\r\nKPX r kcommaaccent 15\r\nKPX r l 15\r\nKPX r lacute 15\r\nKPX r lcommaaccent 15\r\nKPX r lslash 15\r\nKPX r m 25\r\nKPX r n 25\r\nKPX r nacute 25\r\nKPX r ncaron 25\r\nKPX r ncommaaccent 25\r\nKPX r ntilde 25\r\nKPX r p 30\r\nKPX r period -50\r\nKPX r semicolon 30\r\nKPX r t 40\r\nKPX r tcommaaccent 40\r\nKPX r u 15\r\nKPX r uacute 15\r\nKPX r ucircumflex 15\r\nKPX r udieresis 15\r\nKPX r ugrave 15\r\nKPX r uhungarumlaut 15\r\nKPX r umacron 15\r\nKPX r uogonek 15\r\nKPX r uring 15\r\nKPX r v 30\r\nKPX r y 30\r\nKPX r yacute 30\r\nKPX r ydieresis 30\r\nKPX racute a -10\r\nKPX racute aacute -10\r\nKPX racute abreve -10\r\nKPX racute acircumflex -10\r\nKPX racute adieresis -10\r\nKPX racute agrave -10\r\nKPX racute amacron -10\r\nKPX racute aogonek -10\r\nKPX racute aring -10\r\nKPX racute atilde -10\r\nKPX racute colon 30\r\nKPX racute comma -50\r\nKPX racute i 15\r\nKPX racute iacute 15\r\nKPX racute icircumflex 15\r\nKPX racute idieresis 15\r\nKPX racute igrave 15\r\nKPX racute imacron 15\r\nKPX racute iogonek 15\r\nKPX racute k 15\r\nKPX racute kcommaaccent 15\r\nKPX racute l 15\r\nKPX racute lacute 15\r\nKPX racute lcommaaccent 15\r\nKPX racute lslash 15\r\nKPX racute m 25\r\nKPX racute n 25\r\nKPX racute nacute 25\r\nKPX racute ncaron 25\r\nKPX racute ncommaaccent 25\r\nKPX racute ntilde 25\r\nKPX racute p 30\r\nKPX racute period -50\r\nKPX racute semicolon 30\r\nKPX racute t 40\r\nKPX racute tcommaaccent 40\r\nKPX racute u 15\r\nKPX racute uacute 15\r\nKPX racute ucircumflex 15\r\nKPX racute udieresis 15\r\nKPX racute ugrave 15\r\nKPX racute uhungarumlaut 15\r\nKPX racute umacron 15\r\nKPX racute uogonek 15\r\nKPX racute uring 15\r\nKPX racute v 30\r\nKPX racute y 30\r\nKPX racute yacute 30\r\nKPX racute ydieresis 30\r\nKPX rcaron a -10\r\nKPX rcaron aacute -10\r\nKPX rcaron abreve -10\r\nKPX rcaron acircumflex -10\r\nKPX rcaron adieresis -10\r\nKPX rcaron agrave -10\r\nKPX rcaron amacron -10\r\nKPX rcaron aogonek -10\r\nKPX rcaron aring -10\r\nKPX rcaron atilde -10\r\nKPX rcaron colon 30\r\nKPX rcaron comma -50\r\nKPX rcaron i 15\r\nKPX rcaron iacute 15\r\nKPX rcaron icircumflex 15\r\nKPX rcaron idieresis 15\r\nKPX rcaron igrave 15\r\nKPX rcaron imacron 15\r\nKPX rcaron iogonek 15\r\nKPX rcaron k 15\r\nKPX rcaron kcommaaccent 15\r\nKPX rcaron l 15\r\nKPX rcaron lacute 15\r\nKPX rcaron lcommaaccent 15\r\nKPX rcaron lslash 15\r\nKPX rcaron m 25\r\nKPX rcaron n 25\r\nKPX rcaron nacute 25\r\nKPX rcaron ncaron 25\r\nKPX rcaron ncommaaccent 25\r\nKPX rcaron ntilde 25\r\nKPX rcaron p 30\r\nKPX rcaron period -50\r\nKPX rcaron semicolon 30\r\nKPX rcaron t 40\r\nKPX rcaron tcommaaccent 40\r\nKPX rcaron u 15\r\nKPX rcaron uacute 15\r\nKPX rcaron ucircumflex 15\r\nKPX rcaron udieresis 15\r\nKPX rcaron ugrave 15\r\nKPX rcaron uhungarumlaut 15\r\nKPX rcaron umacron 15\r\nKPX rcaron uogonek 15\r\nKPX rcaron uring 15\r\nKPX rcaron v 30\r\nKPX rcaron y 30\r\nKPX rcaron yacute 30\r\nKPX rcaron ydieresis 30\r\nKPX rcommaaccent a -10\r\nKPX rcommaaccent aacute -10\r\nKPX rcommaaccent abreve -10\r\nKPX rcommaaccent acircumflex -10\r\nKPX rcommaaccent adieresis -10\r\nKPX rcommaaccent agrave -10\r\nKPX rcommaaccent amacron -10\r\nKPX rcommaaccent aogonek -10\r\nKPX rcommaaccent aring -10\r\nKPX rcommaaccent atilde -10\r\nKPX rcommaaccent colon 30\r\nKPX rcommaaccent comma -50\r\nKPX rcommaaccent i 15\r\nKPX rcommaaccent iacute 15\r\nKPX rcommaaccent icircumflex 15\r\nKPX rcommaaccent idieresis 15\r\nKPX rcommaaccent igrave 15\r\nKPX rcommaaccent imacron 15\r\nKPX rcommaaccent iogonek 15\r\nKPX rcommaaccent k 15\r\nKPX rcommaaccent kcommaaccent 15\r\nKPX rcommaaccent l 15\r\nKPX rcommaaccent lacute 15\r\nKPX rcommaaccent lcommaaccent 15\r\nKPX rcommaaccent lslash 15\r\nKPX rcommaaccent m 25\r\nKPX rcommaaccent n 25\r\nKPX rcommaaccent nacute 25\r\nKPX rcommaaccent ncaron 25\r\nKPX rcommaaccent ncommaaccent 25\r\nKPX rcommaaccent ntilde 25\r\nKPX rcommaaccent p 30\r\nKPX rcommaaccent period -50\r\nKPX rcommaaccent semicolon 30\r\nKPX rcommaaccent t 40\r\nKPX rcommaaccent tcommaaccent 40\r\nKPX rcommaaccent u 15\r\nKPX rcommaaccent uacute 15\r\nKPX rcommaaccent ucircumflex 15\r\nKPX rcommaaccent udieresis 15\r\nKPX rcommaaccent ugrave 15\r\nKPX rcommaaccent uhungarumlaut 15\r\nKPX rcommaaccent umacron 15\r\nKPX rcommaaccent uogonek 15\r\nKPX rcommaaccent uring 15\r\nKPX rcommaaccent v 30\r\nKPX rcommaaccent y 30\r\nKPX rcommaaccent yacute 30\r\nKPX rcommaaccent ydieresis 30\r\nKPX s comma -15\r\nKPX s period -15\r\nKPX s w -30\r\nKPX sacute comma -15\r\nKPX sacute period -15\r\nKPX sacute w -30\r\nKPX scaron comma -15\r\nKPX scaron period -15\r\nKPX scaron w -30\r\nKPX scedilla comma -15\r\nKPX scedilla period -15\r\nKPX scedilla w -30\r\nKPX scommaaccent comma -15\r\nKPX scommaaccent period -15\r\nKPX scommaaccent w -30\r\nKPX semicolon space -50\r\nKPX space T -50\r\nKPX space Tcaron -50\r\nKPX space Tcommaaccent -50\r\nKPX space V -50\r\nKPX space W -40\r\nKPX space Y -90\r\nKPX space Yacute -90\r\nKPX space Ydieresis -90\r\nKPX space quotedblleft -30\r\nKPX space quoteleft -60\r\nKPX v a -25\r\nKPX v aacute -25\r\nKPX v abreve -25\r\nKPX v acircumflex -25\r\nKPX v adieresis -25\r\nKPX v agrave -25\r\nKPX v amacron -25\r\nKPX v aogonek -25\r\nKPX v aring -25\r\nKPX v atilde -25\r\nKPX v comma -80\r\nKPX v e -25\r\nKPX v eacute -25\r\nKPX v ecaron -25\r\nKPX v ecircumflex -25\r\nKPX v edieresis -25\r\nKPX v edotaccent -25\r\nKPX v egrave -25\r\nKPX v emacron -25\r\nKPX v eogonek -25\r\nKPX v o -25\r\nKPX v oacute -25\r\nKPX v ocircumflex -25\r\nKPX v odieresis -25\r\nKPX v ograve -25\r\nKPX v ohungarumlaut -25\r\nKPX v omacron -25\r\nKPX v oslash -25\r\nKPX v otilde -25\r\nKPX v period -80\r\nKPX w a -15\r\nKPX w aacute -15\r\nKPX w abreve -15\r\nKPX w acircumflex -15\r\nKPX w adieresis -15\r\nKPX w agrave -15\r\nKPX w amacron -15\r\nKPX w aogonek -15\r\nKPX w aring -15\r\nKPX w atilde -15\r\nKPX w comma -60\r\nKPX w e -10\r\nKPX w eacute -10\r\nKPX w ecaron -10\r\nKPX w ecircumflex -10\r\nKPX w edieresis -10\r\nKPX w edotaccent -10\r\nKPX w egrave -10\r\nKPX w emacron -10\r\nKPX w eogonek -10\r\nKPX w o -10\r\nKPX w oacute -10\r\nKPX w ocircumflex -10\r\nKPX w odieresis -10\r\nKPX w ograve -10\r\nKPX w ohungarumlaut -10\r\nKPX w omacron -10\r\nKPX w oslash -10\r\nKPX w otilde -10\r\nKPX w period -60\r\nKPX x e -30\r\nKPX x eacute -30\r\nKPX x ecaron -30\r\nKPX x ecircumflex -30\r\nKPX x edieresis -30\r\nKPX x edotaccent -30\r\nKPX x egrave -30\r\nKPX x emacron -30\r\nKPX x eogonek -30\r\nKPX y a -20\r\nKPX y aacute -20\r\nKPX y abreve -20\r\nKPX y acircumflex -20\r\nKPX y adieresis -20\r\nKPX y agrave -20\r\nKPX y amacron -20\r\nKPX y aogonek -20\r\nKPX y aring -20\r\nKPX y atilde -20\r\nKPX y comma -100\r\nKPX y e -20\r\nKPX y eacute -20\r\nKPX y ecaron -20\r\nKPX y ecircumflex -20\r\nKPX y edieresis -20\r\nKPX y edotaccent -20\r\nKPX y egrave -20\r\nKPX y emacron -20\r\nKPX y eogonek -20\r\nKPX y o -20\r\nKPX y oacute -20\r\nKPX y ocircumflex -20\r\nKPX y odieresis -20\r\nKPX y ograve -20\r\nKPX y ohungarumlaut -20\r\nKPX y omacron -20\r\nKPX y oslash -20\r\nKPX y otilde -20\r\nKPX y period -100\r\nKPX yacute a -20\r\nKPX yacute aacute -20\r\nKPX yacute abreve -20\r\nKPX yacute acircumflex -20\r\nKPX yacute adieresis -20\r\nKPX yacute agrave -20\r\nKPX yacute amacron -20\r\nKPX yacute aogonek -20\r\nKPX yacute aring -20\r\nKPX yacute atilde -20\r\nKPX yacute comma -100\r\nKPX yacute e -20\r\nKPX yacute eacute -20\r\nKPX yacute ecaron -20\r\nKPX yacute ecircumflex -20\r\nKPX yacute edieresis -20\r\nKPX yacute edotaccent -20\r\nKPX yacute egrave -20\r\nKPX yacute emacron -20\r\nKPX yacute eogonek -20\r\nKPX yacute o -20\r\nKPX yacute oacute -20\r\nKPX yacute ocircumflex -20\r\nKPX yacute odieresis -20\r\nKPX yacute ograve -20\r\nKPX yacute ohungarumlaut -20\r\nKPX yacute omacron -20\r\nKPX yacute oslash -20\r\nKPX yacute otilde -20\r\nKPX yacute period -100\r\nKPX ydieresis a -20\r\nKPX ydieresis aacute -20\r\nKPX ydieresis abreve -20\r\nKPX ydieresis acircumflex -20\r\nKPX ydieresis adieresis -20\r\nKPX ydieresis agrave -20\r\nKPX ydieresis amacron -20\r\nKPX ydieresis aogonek -20\r\nKPX ydieresis aring -20\r\nKPX ydieresis atilde -20\r\nKPX ydieresis comma -100\r\nKPX ydieresis e -20\r\nKPX ydieresis eacute -20\r\nKPX ydieresis ecaron -20\r\nKPX ydieresis ecircumflex -20\r\nKPX ydieresis edieresis -20\r\nKPX ydieresis edotaccent -20\r\nKPX ydieresis egrave -20\r\nKPX ydieresis emacron -20\r\nKPX ydieresis eogonek -20\r\nKPX ydieresis o -20\r\nKPX ydieresis oacute -20\r\nKPX ydieresis ocircumflex -20\r\nKPX ydieresis odieresis -20\r\nKPX ydieresis ograve -20\r\nKPX ydieresis ohungarumlaut -20\r\nKPX ydieresis omacron -20\r\nKPX ydieresis oslash -20\r\nKPX ydieresis otilde -20\r\nKPX ydieresis period -100\r\nKPX z e -15\r\nKPX z eacute -15\r\nKPX z ecaron -15\r\nKPX z ecircumflex -15\r\nKPX z edieresis -15\r\nKPX z edotaccent -15\r\nKPX z egrave -15\r\nKPX z emacron -15\r\nKPX z eogonek -15\r\nKPX z o -15\r\nKPX z oacute -15\r\nKPX z ocircumflex -15\r\nKPX z odieresis -15\r\nKPX z ograve -15\r\nKPX z ohungarumlaut -15\r\nKPX z omacron -15\r\nKPX z oslash -15\r\nKPX z otilde -15\r\nKPX zacute e -15\r\nKPX zacute eacute -15\r\nKPX zacute ecaron -15\r\nKPX zacute ecircumflex -15\r\nKPX zacute edieresis -15\r\nKPX zacute edotaccent -15\r\nKPX zacute egrave -15\r\nKPX zacute emacron -15\r\nKPX zacute eogonek -15\r\nKPX zacute o -15\r\nKPX zacute oacute -15\r\nKPX zacute ocircumflex -15\r\nKPX zacute odieresis -15\r\nKPX zacute ograve -15\r\nKPX zacute ohungarumlaut -15\r\nKPX zacute omacron -15\r\nKPX zacute oslash -15\r\nKPX zacute otilde -15\r\nKPX zcaron e -15\r\nKPX zcaron eacute -15\r\nKPX zcaron ecaron -15\r\nKPX zcaron ecircumflex -15\r\nKPX zcaron edieresis -15\r\nKPX zcaron edotaccent -15\r\nKPX zcaron egrave -15\r\nKPX zcaron emacron -15\r\nKPX zcaron eogonek -15\r\nKPX zcaron o -15\r\nKPX zcaron oacute -15\r\nKPX zcaron ocircumflex -15\r\nKPX zcaron odieresis -15\r\nKPX zcaron ograve -15\r\nKPX zcaron ohungarumlaut -15\r\nKPX zcaron omacron -15\r\nKPX zcaron oslash -15\r\nKPX zcaron otilde -15\r\nKPX zdotaccent e -15\r\nKPX zdotaccent eacute -15\r\nKPX zdotaccent ecaron -15\r\nKPX zdotaccent ecircumflex -15\r\nKPX zdotaccent edieresis -15\r\nKPX zdotaccent edotaccent -15\r\nKPX zdotaccent egrave -15\r\nKPX zdotaccent emacron -15\r\nKPX zdotaccent eogonek -15\r\nKPX zdotaccent o -15\r\nKPX zdotaccent oacute -15\r\nKPX zdotaccent ocircumflex -15\r\nKPX zdotaccent odieresis -15\r\nKPX zdotaccent ograve -15\r\nKPX zdotaccent ohungarumlaut -15\r\nKPX zdotaccent omacron -15\r\nKPX zdotaccent oslash -15\r\nKPX zdotaccent otilde -15\r\nEndKernPairs\r\nEndKernData\r\nEndFontMetrics\r\n",
  'Helvetica-Bold.afm': "StartFontMetrics 4.1\r\nComment Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated.  All Rights Reserved.\r\nComment Creation Date: Thu May  1 12:43:52 1997\r\nComment UniqueID 43052\r\nComment VMusage 37169 48194\r\nFontName Helvetica-Bold\r\nFullName Helvetica Bold\r\nFamilyName Helvetica\r\nWeight Bold\r\nItalicAngle 0\r\nIsFixedPitch false\r\nCharacterSet ExtendedRoman\r\nFontBBox -170 -228 1003 962 \r\nUnderlinePosition -100\r\nUnderlineThickness 50\r\nVersion 002.000\r\nNotice Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated.  All Rights Reserved.Helvetica is a trademark of Linotype-Hell AG and/or its subsidiaries.\r\nEncodingScheme AdobeStandardEncoding\r\nCapHeight 718\r\nXHeight 532\r\nAscender 718\r\nDescender -207\r\nStdHW 118\r\nStdVW 140\r\nStartCharMetrics 315\r\nC 32 ; WX 278 ; N space ; B 0 0 0 0 ;\r\nC 33 ; WX 333 ; N exclam ; B 90 0 244 718 ;\r\nC 34 ; WX 474 ; N quotedbl ; B 98 447 376 718 ;\r\nC 35 ; WX 556 ; N numbersign ; B 18 0 538 698 ;\r\nC 36 ; WX 556 ; N dollar ; B 30 -115 523 775 ;\r\nC 37 ; WX 889 ; N percent ; B 28 -19 861 710 ;\r\nC 38 ; WX 722 ; N ampersand ; B 54 -19 701 718 ;\r\nC 39 ; WX 278 ; N quoteright ; B 69 445 209 718 ;\r\nC 40 ; WX 333 ; N parenleft ; B 35 -208 314 734 ;\r\nC 41 ; WX 333 ; N parenright ; B 19 -208 298 734 ;\r\nC 42 ; WX 389 ; N asterisk ; B 27 387 362 718 ;\r\nC 43 ; WX 584 ; N plus ; B 40 0 544 506 ;\r\nC 44 ; WX 278 ; N comma ; B 64 -168 214 146 ;\r\nC 45 ; WX 333 ; N hyphen ; B 27 215 306 345 ;\r\nC 46 ; WX 278 ; N period ; B 64 0 214 146 ;\r\nC 47 ; WX 278 ; N slash ; B -33 -19 311 737 ;\r\nC 48 ; WX 556 ; N zero ; B 32 -19 524 710 ;\r\nC 49 ; WX 556 ; N one ; B 69 0 378 710 ;\r\nC 50 ; WX 556 ; N two ; B 26 0 511 710 ;\r\nC 51 ; WX 556 ; N three ; B 27 -19 516 710 ;\r\nC 52 ; WX 556 ; N four ; B 27 0 526 710 ;\r\nC 53 ; WX 556 ; N five ; B 27 -19 516 698 ;\r\nC 54 ; WX 556 ; N six ; B 31 -19 520 710 ;\r\nC 55 ; WX 556 ; N seven ; B 25 0 528 698 ;\r\nC 56 ; WX 556 ; N eight ; B 32 -19 524 710 ;\r\nC 57 ; WX 556 ; N nine ; B 30 -19 522 710 ;\r\nC 58 ; WX 333 ; N colon ; B 92 0 242 512 ;\r\nC 59 ; WX 333 ; N semicolon ; B 92 -168 242 512 ;\r\nC 60 ; WX 584 ; N less ; B 38 -8 546 514 ;\r\nC 61 ; WX 584 ; N equal ; B 40 87 544 419 ;\r\nC 62 ; WX 584 ; N greater ; B 38 -8 546 514 ;\r\nC 63 ; WX 611 ; N question ; B 60 0 556 727 ;\r\nC 64 ; WX 975 ; N at ; B 118 -19 856 737 ;\r\nC 65 ; WX 722 ; N A ; B 20 0 702 718 ;\r\nC 66 ; WX 722 ; N B ; B 76 0 669 718 ;\r\nC 67 ; WX 722 ; N C ; B 44 -19 684 737 ;\r\nC 68 ; WX 722 ; N D ; B 76 0 685 718 ;\r\nC 69 ; WX 667 ; N E ; B 76 0 621 718 ;\r\nC 70 ; WX 611 ; N F ; B 76 0 587 718 ;\r\nC 71 ; WX 778 ; N G ; B 44 -19 713 737 ;\r\nC 72 ; WX 722 ; N H ; B 71 0 651 718 ;\r\nC 73 ; WX 278 ; N I ; B 64 0 214 718 ;\r\nC 74 ; WX 556 ; N J ; B 22 -18 484 718 ;\r\nC 75 ; WX 722 ; N K ; B 87 0 722 718 ;\r\nC 76 ; WX 611 ; N L ; B 76 0 583 718 ;\r\nC 77 ; WX 833 ; N M ; B 69 0 765 718 ;\r\nC 78 ; WX 722 ; N N ; B 69 0 654 718 ;\r\nC 79 ; WX 778 ; N O ; B 44 -19 734 737 ;\r\nC 80 ; WX 667 ; N P ; B 76 0 627 718 ;\r\nC 81 ; WX 778 ; N Q ; B 44 -52 737 737 ;\r\nC 82 ; WX 722 ; N R ; B 76 0 677 718 ;\r\nC 83 ; WX 667 ; N S ; B 39 -19 629 737 ;\r\nC 84 ; WX 611 ; N T ; B 14 0 598 718 ;\r\nC 85 ; WX 722 ; N U ; B 72 -19 651 718 ;\r\nC 86 ; WX 667 ; N V ; B 19 0 648 718 ;\r\nC 87 ; WX 944 ; N W ; B 16 0 929 718 ;\r\nC 88 ; WX 667 ; N X ; B 14 0 653 718 ;\r\nC 89 ; WX 667 ; N Y ; B 15 0 653 718 ;\r\nC 90 ; WX 611 ; N Z ; B 25 0 586 718 ;\r\nC 91 ; WX 333 ; N bracketleft ; B 63 -196 309 722 ;\r\nC 92 ; WX 278 ; N backslash ; B -33 -19 311 737 ;\r\nC 93 ; WX 333 ; N bracketright ; B 24 -196 270 722 ;\r\nC 94 ; WX 584 ; N asciicircum ; B 62 323 522 698 ;\r\nC 95 ; WX 556 ; N underscore ; B 0 -125 556 -75 ;\r\nC 96 ; WX 278 ; N quoteleft ; B 69 454 209 727 ;\r\nC 97 ; WX 556 ; N a ; B 29 -14 527 546 ;\r\nC 98 ; WX 611 ; N b ; B 61 -14 578 718 ;\r\nC 99 ; WX 556 ; N c ; B 34 -14 524 546 ;\r\nC 100 ; WX 611 ; N d ; B 34 -14 551 718 ;\r\nC 101 ; WX 556 ; N e ; B 23 -14 528 546 ;\r\nC 102 ; WX 333 ; N f ; B 10 0 318 727 ; L i fi ; L l fl ;\r\nC 103 ; WX 611 ; N g ; B 40 -217 553 546 ;\r\nC 104 ; WX 611 ; N h ; B 65 0 546 718 ;\r\nC 105 ; WX 278 ; N i ; B 69 0 209 725 ;\r\nC 106 ; WX 278 ; N j ; B 3 -214 209 725 ;\r\nC 107 ; WX 556 ; N k ; B 69 0 562 718 ;\r\nC 108 ; WX 278 ; N l ; B 69 0 209 718 ;\r\nC 109 ; WX 889 ; N m ; B 64 0 826 546 ;\r\nC 110 ; WX 611 ; N n ; B 65 0 546 546 ;\r\nC 111 ; WX 611 ; N o ; B 34 -14 578 546 ;\r\nC 112 ; WX 611 ; N p ; B 62 -207 578 546 ;\r\nC 113 ; WX 611 ; N q ; B 34 -207 552 546 ;\r\nC 114 ; WX 389 ; N r ; B 64 0 373 546 ;\r\nC 115 ; WX 556 ; N s ; B 30 -14 519 546 ;\r\nC 116 ; WX 333 ; N t ; B 10 -6 309 676 ;\r\nC 117 ; WX 611 ; N u ; B 66 -14 545 532 ;\r\nC 118 ; WX 556 ; N v ; B 13 0 543 532 ;\r\nC 119 ; WX 778 ; N w ; B 10 0 769 532 ;\r\nC 120 ; WX 556 ; N x ; B 15 0 541 532 ;\r\nC 121 ; WX 556 ; N y ; B 10 -214 539 532 ;\r\nC 122 ; WX 500 ; N z ; B 20 0 480 532 ;\r\nC 123 ; WX 389 ; N braceleft ; B 48 -196 365 722 ;\r\nC 124 ; WX 280 ; N bar ; B 84 -225 196 775 ;\r\nC 125 ; WX 389 ; N braceright ; B 24 -196 341 722 ;\r\nC 126 ; WX 584 ; N asciitilde ; B 61 163 523 343 ;\r\nC 161 ; WX 333 ; N exclamdown ; B 90 -186 244 532 ;\r\nC 162 ; WX 556 ; N cent ; B 34 -118 524 628 ;\r\nC 163 ; WX 556 ; N sterling ; B 28 -16 541 718 ;\r\nC 164 ; WX 167 ; N fraction ; B -170 -19 336 710 ;\r\nC 165 ; WX 556 ; N yen ; B -9 0 565 698 ;\r\nC 166 ; WX 556 ; N florin ; B -10 -210 516 737 ;\r\nC 167 ; WX 556 ; N section ; B 34 -184 522 727 ;\r\nC 168 ; WX 556 ; N currency ; B -3 76 559 636 ;\r\nC 169 ; WX 238 ; N quotesingle ; B 70 447 168 718 ;\r\nC 170 ; WX 500 ; N quotedblleft ; B 64 454 436 727 ;\r\nC 171 ; WX 556 ; N guillemotleft ; B 88 76 468 484 ;\r\nC 172 ; WX 333 ; N guilsinglleft ; B 83 76 250 484 ;\r\nC 173 ; WX 333 ; N guilsinglright ; B 83 76 250 484 ;\r\nC 174 ; WX 611 ; N fi ; B 10 0 542 727 ;\r\nC 175 ; WX 611 ; N fl ; B 10 0 542 727 ;\r\nC 177 ; WX 556 ; N endash ; B 0 227 556 333 ;\r\nC 178 ; WX 556 ; N dagger ; B 36 -171 520 718 ;\r\nC 179 ; WX 556 ; N daggerdbl ; B 36 -171 520 718 ;\r\nC 180 ; WX 278 ; N periodcentered ; B 58 172 220 334 ;\r\nC 182 ; WX 556 ; N paragraph ; B -8 -191 539 700 ;\r\nC 183 ; WX 350 ; N bullet ; B 10 194 340 524 ;\r\nC 184 ; WX 278 ; N quotesinglbase ; B 69 -146 209 127 ;\r\nC 185 ; WX 500 ; N quotedblbase ; B 64 -146 436 127 ;\r\nC 186 ; WX 500 ; N quotedblright ; B 64 445 436 718 ;\r\nC 187 ; WX 556 ; N guillemotright ; B 88 76 468 484 ;\r\nC 188 ; WX 1000 ; N ellipsis ; B 92 0 908 146 ;\r\nC 189 ; WX 1000 ; N perthousand ; B -3 -19 1003 710 ;\r\nC 191 ; WX 611 ; N questiondown ; B 55 -195 551 532 ;\r\nC 193 ; WX 333 ; N grave ; B -23 604 225 750 ;\r\nC 194 ; WX 333 ; N acute ; B 108 604 356 750 ;\r\nC 195 ; WX 333 ; N circumflex ; B -10 604 343 750 ;\r\nC 196 ; WX 333 ; N tilde ; B -17 610 350 737 ;\r\nC 197 ; WX 333 ; N macron ; B -6 604 339 678 ;\r\nC 198 ; WX 333 ; N breve ; B -2 604 335 750 ;\r\nC 199 ; WX 333 ; N dotaccent ; B 104 614 230 729 ;\r\nC 200 ; WX 333 ; N dieresis ; B 6 614 327 729 ;\r\nC 202 ; WX 333 ; N ring ; B 59 568 275 776 ;\r\nC 203 ; WX 333 ; N cedilla ; B 6 -228 245 0 ;\r\nC 205 ; WX 333 ; N hungarumlaut ; B 9 604 486 750 ;\r\nC 206 ; WX 333 ; N ogonek ; B 71 -228 304 0 ;\r\nC 207 ; WX 333 ; N caron ; B -10 604 343 750 ;\r\nC 208 ; WX 1000 ; N emdash ; B 0 227 1000 333 ;\r\nC 225 ; WX 1000 ; N AE ; B 5 0 954 718 ;\r\nC 227 ; WX 370 ; N ordfeminine ; B 22 401 347 737 ;\r\nC 232 ; WX 611 ; N Lslash ; B -20 0 583 718 ;\r\nC 233 ; WX 778 ; N Oslash ; B 33 -27 744 745 ;\r\nC 234 ; WX 1000 ; N OE ; B 37 -19 961 737 ;\r\nC 235 ; WX 365 ; N ordmasculine ; B 6 401 360 737 ;\r\nC 241 ; WX 889 ; N ae ; B 29 -14 858 546 ;\r\nC 245 ; WX 278 ; N dotlessi ; B 69 0 209 532 ;\r\nC 248 ; WX 278 ; N lslash ; B -18 0 296 718 ;\r\nC 249 ; WX 611 ; N oslash ; B 22 -29 589 560 ;\r\nC 250 ; WX 944 ; N oe ; B 34 -14 912 546 ;\r\nC 251 ; WX 611 ; N germandbls ; B 69 -14 579 731 ;\r\nC -1 ; WX 278 ; N Idieresis ; B -21 0 300 915 ;\r\nC -1 ; WX 556 ; N eacute ; B 23 -14 528 750 ;\r\nC -1 ; WX 556 ; N abreve ; B 29 -14 527 750 ;\r\nC -1 ; WX 611 ; N uhungarumlaut ; B 66 -14 625 750 ;\r\nC -1 ; WX 556 ; N ecaron ; B 23 -14 528 750 ;\r\nC -1 ; WX 667 ; N Ydieresis ; B 15 0 653 915 ;\r\nC -1 ; WX 584 ; N divide ; B 40 -42 544 548 ;\r\nC -1 ; WX 667 ; N Yacute ; B 15 0 653 936 ;\r\nC -1 ; WX 722 ; N Acircumflex ; B 20 0 702 936 ;\r\nC -1 ; WX 556 ; N aacute ; B 29 -14 527 750 ;\r\nC -1 ; WX 722 ; N Ucircumflex ; B 72 -19 651 936 ;\r\nC -1 ; WX 556 ; N yacute ; B 10 -214 539 750 ;\r\nC -1 ; WX 556 ; N scommaaccent ; B 30 -228 519 546 ;\r\nC -1 ; WX 556 ; N ecircumflex ; B 23 -14 528 750 ;\r\nC -1 ; WX 722 ; N Uring ; B 72 -19 651 962 ;\r\nC -1 ; WX 722 ; N Udieresis ; B 72 -19 651 915 ;\r\nC -1 ; WX 556 ; N aogonek ; B 29 -224 545 546 ;\r\nC -1 ; WX 722 ; N Uacute ; B 72 -19 651 936 ;\r\nC -1 ; WX 611 ; N uogonek ; B 66 -228 545 532 ;\r\nC -1 ; WX 667 ; N Edieresis ; B 76 0 621 915 ;\r\nC -1 ; WX 722 ; N Dcroat ; B -5 0 685 718 ;\r\nC -1 ; WX 250 ; N commaaccent ; B 64 -228 199 -50 ;\r\nC -1 ; WX 737 ; N copyright ; B -11 -19 749 737 ;\r\nC -1 ; WX 667 ; N Emacron ; B 76 0 621 864 ;\r\nC -1 ; WX 556 ; N ccaron ; B 34 -14 524 750 ;\r\nC -1 ; WX 556 ; N aring ; B 29 -14 527 776 ;\r\nC -1 ; WX 722 ; N Ncommaaccent ; B 69 -228 654 718 ;\r\nC -1 ; WX 278 ; N lacute ; B 69 0 329 936 ;\r\nC -1 ; WX 556 ; N agrave ; B 29 -14 527 750 ;\r\nC -1 ; WX 611 ; N Tcommaaccent ; B 14 -228 598 718 ;\r\nC -1 ; WX 722 ; N Cacute ; B 44 -19 684 936 ;\r\nC -1 ; WX 556 ; N atilde ; B 29 -14 527 737 ;\r\nC -1 ; WX 667 ; N Edotaccent ; B 76 0 621 915 ;\r\nC -1 ; WX 556 ; N scaron ; B 30 -14 519 750 ;\r\nC -1 ; WX 556 ; N scedilla ; B 30 -228 519 546 ;\r\nC -1 ; WX 278 ; N iacute ; B 69 0 329 750 ;\r\nC -1 ; WX 494 ; N lozenge ; B 10 0 484 745 ;\r\nC -1 ; WX 722 ; N Rcaron ; B 76 0 677 936 ;\r\nC -1 ; WX 778 ; N Gcommaaccent ; B 44 -228 713 737 ;\r\nC -1 ; WX 611 ; N ucircumflex ; B 66 -14 545 750 ;\r\nC -1 ; WX 556 ; N acircumflex ; B 29 -14 527 750 ;\r\nC -1 ; WX 722 ; N Amacron ; B 20 0 702 864 ;\r\nC -1 ; WX 389 ; N rcaron ; B 18 0 373 750 ;\r\nC -1 ; WX 556 ; N ccedilla ; B 34 -228 524 546 ;\r\nC -1 ; WX 611 ; N Zdotaccent ; B 25 0 586 915 ;\r\nC -1 ; WX 667 ; N Thorn ; B 76 0 627 718 ;\r\nC -1 ; WX 778 ; N Omacron ; B 44 -19 734 864 ;\r\nC -1 ; WX 722 ; N Racute ; B 76 0 677 936 ;\r\nC -1 ; WX 667 ; N Sacute ; B 39 -19 629 936 ;\r\nC -1 ; WX 743 ; N dcaron ; B 34 -14 750 718 ;\r\nC -1 ; WX 722 ; N Umacron ; B 72 -19 651 864 ;\r\nC -1 ; WX 611 ; N uring ; B 66 -14 545 776 ;\r\nC -1 ; WX 333 ; N threesuperior ; B 8 271 326 710 ;\r\nC -1 ; WX 778 ; N Ograve ; B 44 -19 734 936 ;\r\nC -1 ; WX 722 ; N Agrave ; B 20 0 702 936 ;\r\nC -1 ; WX 722 ; N Abreve ; B 20 0 702 936 ;\r\nC -1 ; WX 584 ; N multiply ; B 40 1 545 505 ;\r\nC -1 ; WX 611 ; N uacute ; B 66 -14 545 750 ;\r\nC -1 ; WX 611 ; N Tcaron ; B 14 0 598 936 ;\r\nC -1 ; WX 494 ; N partialdiff ; B 11 -21 494 750 ;\r\nC -1 ; WX 556 ; N ydieresis ; B 10 -214 539 729 ;\r\nC -1 ; WX 722 ; N Nacute ; B 69 0 654 936 ;\r\nC -1 ; WX 278 ; N icircumflex ; B -37 0 316 750 ;\r\nC -1 ; WX 667 ; N Ecircumflex ; B 76 0 621 936 ;\r\nC -1 ; WX 556 ; N adieresis ; B 29 -14 527 729 ;\r\nC -1 ; WX 556 ; N edieresis ; B 23 -14 528 729 ;\r\nC -1 ; WX 556 ; N cacute ; B 34 -14 524 750 ;\r\nC -1 ; WX 611 ; N nacute ; B 65 0 546 750 ;\r\nC -1 ; WX 611 ; N umacron ; B 66 -14 545 678 ;\r\nC -1 ; WX 722 ; N Ncaron ; B 69 0 654 936 ;\r\nC -1 ; WX 278 ; N Iacute ; B 64 0 329 936 ;\r\nC -1 ; WX 584 ; N plusminus ; B 40 0 544 506 ;\r\nC -1 ; WX 280 ; N brokenbar ; B 84 -150 196 700 ;\r\nC -1 ; WX 737 ; N registered ; B -11 -19 748 737 ;\r\nC -1 ; WX 778 ; N Gbreve ; B 44 -19 713 936 ;\r\nC -1 ; WX 278 ; N Idotaccent ; B 64 0 214 915 ;\r\nC -1 ; WX 600 ; N summation ; B 14 -10 585 706 ;\r\nC -1 ; WX 667 ; N Egrave ; B 76 0 621 936 ;\r\nC -1 ; WX 389 ; N racute ; B 64 0 384 750 ;\r\nC -1 ; WX 611 ; N omacron ; B 34 -14 578 678 ;\r\nC -1 ; WX 611 ; N Zacute ; B 25 0 586 936 ;\r\nC -1 ; WX 611 ; N Zcaron ; B 25 0 586 936 ;\r\nC -1 ; WX 549 ; N greaterequal ; B 26 0 523 704 ;\r\nC -1 ; WX 722 ; N Eth ; B -5 0 685 718 ;\r\nC -1 ; WX 722 ; N Ccedilla ; B 44 -228 684 737 ;\r\nC -1 ; WX 278 ; N lcommaaccent ; B 69 -228 213 718 ;\r\nC -1 ; WX 389 ; N tcaron ; B 10 -6 421 878 ;\r\nC -1 ; WX 556 ; N eogonek ; B 23 -228 528 546 ;\r\nC -1 ; WX 722 ; N Uogonek ; B 72 -228 651 718 ;\r\nC -1 ; WX 722 ; N Aacute ; B 20 0 702 936 ;\r\nC -1 ; WX 722 ; N Adieresis ; B 20 0 702 915 ;\r\nC -1 ; WX 556 ; N egrave ; B 23 -14 528 750 ;\r\nC -1 ; WX 500 ; N zacute ; B 20 0 480 750 ;\r\nC -1 ; WX 278 ; N iogonek ; B 16 -224 249 725 ;\r\nC -1 ; WX 778 ; N Oacute ; B 44 -19 734 936 ;\r\nC -1 ; WX 611 ; N oacute ; B 34 -14 578 750 ;\r\nC -1 ; WX 556 ; N amacron ; B 29 -14 527 678 ;\r\nC -1 ; WX 556 ; N sacute ; B 30 -14 519 750 ;\r\nC -1 ; WX 278 ; N idieresis ; B -21 0 300 729 ;\r\nC -1 ; WX 778 ; N Ocircumflex ; B 44 -19 734 936 ;\r\nC -1 ; WX 722 ; N Ugrave ; B 72 -19 651 936 ;\r\nC -1 ; WX 612 ; N Delta ; B 6 0 608 688 ;\r\nC -1 ; WX 611 ; N thorn ; B 62 -208 578 718 ;\r\nC -1 ; WX 333 ; N twosuperior ; B 9 283 324 710 ;\r\nC -1 ; WX 778 ; N Odieresis ; B 44 -19 734 915 ;\r\nC -1 ; WX 611 ; N mu ; B 66 -207 545 532 ;\r\nC -1 ; WX 278 ; N igrave ; B -50 0 209 750 ;\r\nC -1 ; WX 611 ; N ohungarumlaut ; B 34 -14 625 750 ;\r\nC -1 ; WX 667 ; N Eogonek ; B 76 -224 639 718 ;\r\nC -1 ; WX 611 ; N dcroat ; B 34 -14 650 718 ;\r\nC -1 ; WX 834 ; N threequarters ; B 16 -19 799 710 ;\r\nC -1 ; WX 667 ; N Scedilla ; B 39 -228 629 737 ;\r\nC -1 ; WX 400 ; N lcaron ; B 69 0 408 718 ;\r\nC -1 ; WX 722 ; N Kcommaaccent ; B 87 -228 722 718 ;\r\nC -1 ; WX 611 ; N Lacute ; B 76 0 583 936 ;\r\nC -1 ; WX 1000 ; N trademark ; B 44 306 956 718 ;\r\nC -1 ; WX 556 ; N edotaccent ; B 23 -14 528 729 ;\r\nC -1 ; WX 278 ; N Igrave ; B -50 0 214 936 ;\r\nC -1 ; WX 278 ; N Imacron ; B -33 0 312 864 ;\r\nC -1 ; WX 611 ; N Lcaron ; B 76 0 583 718 ;\r\nC -1 ; WX 834 ; N onehalf ; B 26 -19 794 710 ;\r\nC -1 ; WX 549 ; N lessequal ; B 29 0 526 704 ;\r\nC -1 ; WX 611 ; N ocircumflex ; B 34 -14 578 750 ;\r\nC -1 ; WX 611 ; N ntilde ; B 65 0 546 737 ;\r\nC -1 ; WX 722 ; N Uhungarumlaut ; B 72 -19 681 936 ;\r\nC -1 ; WX 667 ; N Eacute ; B 76 0 621 936 ;\r\nC -1 ; WX 556 ; N emacron ; B 23 -14 528 678 ;\r\nC -1 ; WX 611 ; N gbreve ; B 40 -217 553 750 ;\r\nC -1 ; WX 834 ; N onequarter ; B 26 -19 766 710 ;\r\nC -1 ; WX 667 ; N Scaron ; B 39 -19 629 936 ;\r\nC -1 ; WX 667 ; N Scommaaccent ; B 39 -228 629 737 ;\r\nC -1 ; WX 778 ; N Ohungarumlaut ; B 44 -19 734 936 ;\r\nC -1 ; WX 400 ; N degree ; B 57 426 343 712 ;\r\nC -1 ; WX 611 ; N ograve ; B 34 -14 578 750 ;\r\nC -1 ; WX 722 ; N Ccaron ; B 44 -19 684 936 ;\r\nC -1 ; WX 611 ; N ugrave ; B 66 -14 545 750 ;\r\nC -1 ; WX 549 ; N radical ; B 10 -46 512 850 ;\r\nC -1 ; WX 722 ; N Dcaron ; B 76 0 685 936 ;\r\nC -1 ; WX 389 ; N rcommaaccent ; B 64 -228 373 546 ;\r\nC -1 ; WX 722 ; N Ntilde ; B 69 0 654 923 ;\r\nC -1 ; WX 611 ; N otilde ; B 34 -14 578 737 ;\r\nC -1 ; WX 722 ; N Rcommaaccent ; B 76 -228 677 718 ;\r\nC -1 ; WX 611 ; N Lcommaaccent ; B 76 -228 583 718 ;\r\nC -1 ; WX 722 ; N Atilde ; B 20 0 702 923 ;\r\nC -1 ; WX 722 ; N Aogonek ; B 20 -224 742 718 ;\r\nC -1 ; WX 722 ; N Aring ; B 20 0 702 962 ;\r\nC -1 ; WX 778 ; N Otilde ; B 44 -19 734 923 ;\r\nC -1 ; WX 500 ; N zdotaccent ; B 20 0 480 729 ;\r\nC -1 ; WX 667 ; N Ecaron ; B 76 0 621 936 ;\r\nC -1 ; WX 278 ; N Iogonek ; B -11 -228 222 718 ;\r\nC -1 ; WX 556 ; N kcommaaccent ; B 69 -228 562 718 ;\r\nC -1 ; WX 584 ; N minus ; B 40 197 544 309 ;\r\nC -1 ; WX 278 ; N Icircumflex ; B -37 0 316 936 ;\r\nC -1 ; WX 611 ; N ncaron ; B 65 0 546 750 ;\r\nC -1 ; WX 333 ; N tcommaaccent ; B 10 -228 309 676 ;\r\nC -1 ; WX 584 ; N logicalnot ; B 40 108 544 419 ;\r\nC -1 ; WX 611 ; N odieresis ; B 34 -14 578 729 ;\r\nC -1 ; WX 611 ; N udieresis ; B 66 -14 545 729 ;\r\nC -1 ; WX 549 ; N notequal ; B 15 -49 540 570 ;\r\nC -1 ; WX 611 ; N gcommaaccent ; B 40 -217 553 850 ;\r\nC -1 ; WX 611 ; N eth ; B 34 -14 578 737 ;\r\nC -1 ; WX 500 ; N zcaron ; B 20 0 480 750 ;\r\nC -1 ; WX 611 ; N ncommaaccent ; B 65 -228 546 546 ;\r\nC -1 ; WX 333 ; N onesuperior ; B 26 283 237 710 ;\r\nC -1 ; WX 278 ; N imacron ; B -8 0 285 678 ;\r\nC -1 ; WX 556 ; N Euro ; B 0 0 0 0 ;\r\nEndCharMetrics\r\nStartKernData\r\nStartKernPairs 2481\r\nKPX A C -40\r\nKPX A Cacute -40\r\nKPX A Ccaron -40\r\nKPX A Ccedilla -40\r\nKPX A G -50\r\nKPX A Gbreve -50\r\nKPX A Gcommaaccent -50\r\nKPX A O -40\r\nKPX A Oacute -40\r\nKPX A Ocircumflex -40\r\nKPX A Odieresis -40\r\nKPX A Ograve -40\r\nKPX A Ohungarumlaut -40\r\nKPX A Omacron -40\r\nKPX A Oslash -40\r\nKPX A Otilde -40\r\nKPX A Q -40\r\nKPX A T -90\r\nKPX A Tcaron -90\r\nKPX A Tcommaaccent -90\r\nKPX A U -50\r\nKPX A Uacute -50\r\nKPX A Ucircumflex -50\r\nKPX A Udieresis -50\r\nKPX A Ugrave -50\r\nKPX A Uhungarumlaut -50\r\nKPX A Umacron -50\r\nKPX A Uogonek -50\r\nKPX A Uring -50\r\nKPX A V -80\r\nKPX A W -60\r\nKPX A Y -110\r\nKPX A Yacute -110\r\nKPX A Ydieresis -110\r\nKPX A u -30\r\nKPX A uacute -30\r\nKPX A ucircumflex -30\r\nKPX A udieresis -30\r\nKPX A ugrave -30\r\nKPX A uhungarumlaut -30\r\nKPX A umacron -30\r\nKPX A uogonek -30\r\nKPX A uring -30\r\nKPX A v -40\r\nKPX A w -30\r\nKPX A y -30\r\nKPX A yacute -30\r\nKPX A ydieresis -30\r\nKPX Aacute C -40\r\nKPX Aacute Cacute -40\r\nKPX Aacute Ccaron -40\r\nKPX Aacute Ccedilla -40\r\nKPX Aacute G -50\r\nKPX Aacute Gbreve -50\r\nKPX Aacute Gcommaaccent -50\r\nKPX Aacute O -40\r\nKPX Aacute Oacute -40\r\nKPX Aacute Ocircumflex -40\r\nKPX Aacute Odieresis -40\r\nKPX Aacute Ograve -40\r\nKPX Aacute Ohungarumlaut -40\r\nKPX Aacute Omacron -40\r\nKPX Aacute Oslash -40\r\nKPX Aacute Otilde -40\r\nKPX Aacute Q -40\r\nKPX Aacute T -90\r\nKPX Aacute Tcaron -90\r\nKPX Aacute Tcommaaccent -90\r\nKPX Aacute U -50\r\nKPX Aacute Uacute -50\r\nKPX Aacute Ucircumflex -50\r\nKPX Aacute Udieresis -50\r\nKPX Aacute Ugrave -50\r\nKPX Aacute Uhungarumlaut -50\r\nKPX Aacute Umacron -50\r\nKPX Aacute Uogonek -50\r\nKPX Aacute Uring -50\r\nKPX Aacute V -80\r\nKPX Aacute W -60\r\nKPX Aacute Y -110\r\nKPX Aacute Yacute -110\r\nKPX Aacute Ydieresis -110\r\nKPX Aacute u -30\r\nKPX Aacute uacute -30\r\nKPX Aacute ucircumflex -30\r\nKPX Aacute udieresis -30\r\nKPX Aacute ugrave -30\r\nKPX Aacute uhungarumlaut -30\r\nKPX Aacute umacron -30\r\nKPX Aacute uogonek -30\r\nKPX Aacute uring -30\r\nKPX Aacute v -40\r\nKPX Aacute w -30\r\nKPX Aacute y -30\r\nKPX Aacute yacute -30\r\nKPX Aacute ydieresis -30\r\nKPX Abreve C -40\r\nKPX Abreve Cacute -40\r\nKPX Abreve Ccaron -40\r\nKPX Abreve Ccedilla -40\r\nKPX Abreve G -50\r\nKPX Abreve Gbreve -50\r\nKPX Abreve Gcommaaccent -50\r\nKPX Abreve O -40\r\nKPX Abreve Oacute -40\r\nKPX Abreve Ocircumflex -40\r\nKPX Abreve Odieresis -40\r\nKPX Abreve Ograve -40\r\nKPX Abreve Ohungarumlaut -40\r\nKPX Abreve Omacron -40\r\nKPX Abreve Oslash -40\r\nKPX Abreve Otilde -40\r\nKPX Abreve Q -40\r\nKPX Abreve T -90\r\nKPX Abreve Tcaron -90\r\nKPX Abreve Tcommaaccent -90\r\nKPX Abreve U -50\r\nKPX Abreve Uacute -50\r\nKPX Abreve Ucircumflex -50\r\nKPX Abreve Udieresis -50\r\nKPX Abreve Ugrave -50\r\nKPX Abreve Uhungarumlaut -50\r\nKPX Abreve Umacron -50\r\nKPX Abreve Uogonek -50\r\nKPX Abreve Uring -50\r\nKPX Abreve V -80\r\nKPX Abreve W -60\r\nKPX Abreve Y -110\r\nKPX Abreve Yacute -110\r\nKPX Abreve Ydieresis -110\r\nKPX Abreve u -30\r\nKPX Abreve uacute -30\r\nKPX Abreve ucircumflex -30\r\nKPX Abreve udieresis -30\r\nKPX Abreve ugrave -30\r\nKPX Abreve uhungarumlaut -30\r\nKPX Abreve umacron -30\r\nKPX Abreve uogonek -30\r\nKPX Abreve uring -30\r\nKPX Abreve v -40\r\nKPX Abreve w -30\r\nKPX Abreve y -30\r\nKPX Abreve yacute -30\r\nKPX Abreve ydieresis -30\r\nKPX Acircumflex C -40\r\nKPX Acircumflex Cacute -40\r\nKPX Acircumflex Ccaron -40\r\nKPX Acircumflex Ccedilla -40\r\nKPX Acircumflex G -50\r\nKPX Acircumflex Gbreve -50\r\nKPX Acircumflex Gcommaaccent -50\r\nKPX Acircumflex O -40\r\nKPX Acircumflex Oacute -40\r\nKPX Acircumflex Ocircumflex -40\r\nKPX Acircumflex Odieresis -40\r\nKPX Acircumflex Ograve -40\r\nKPX Acircumflex Ohungarumlaut -40\r\nKPX Acircumflex Omacron -40\r\nKPX Acircumflex Oslash -40\r\nKPX Acircumflex Otilde -40\r\nKPX Acircumflex Q -40\r\nKPX Acircumflex T -90\r\nKPX Acircumflex Tcaron -90\r\nKPX Acircumflex Tcommaaccent -90\r\nKPX Acircumflex U -50\r\nKPX Acircumflex Uacute -50\r\nKPX Acircumflex Ucircumflex -50\r\nKPX Acircumflex Udieresis -50\r\nKPX Acircumflex Ugrave -50\r\nKPX Acircumflex Uhungarumlaut -50\r\nKPX Acircumflex Umacron -50\r\nKPX Acircumflex Uogonek -50\r\nKPX Acircumflex Uring -50\r\nKPX Acircumflex V -80\r\nKPX Acircumflex W -60\r\nKPX Acircumflex Y -110\r\nKPX Acircumflex Yacute -110\r\nKPX Acircumflex Ydieresis -110\r\nKPX Acircumflex u -30\r\nKPX Acircumflex uacute -30\r\nKPX Acircumflex ucircumflex -30\r\nKPX Acircumflex udieresis -30\r\nKPX Acircumflex ugrave -30\r\nKPX Acircumflex uhungarumlaut -30\r\nKPX Acircumflex umacron -30\r\nKPX Acircumflex uogonek -30\r\nKPX Acircumflex uring -30\r\nKPX Acircumflex v -40\r\nKPX Acircumflex w -30\r\nKPX Acircumflex y -30\r\nKPX Acircumflex yacute -30\r\nKPX Acircumflex ydieresis -30\r\nKPX Adieresis C -40\r\nKPX Adieresis Cacute -40\r\nKPX Adieresis Ccaron -40\r\nKPX Adieresis Ccedilla -40\r\nKPX Adieresis G -50\r\nKPX Adieresis Gbreve -50\r\nKPX Adieresis Gcommaaccent -50\r\nKPX Adieresis O -40\r\nKPX Adieresis Oacute -40\r\nKPX Adieresis Ocircumflex -40\r\nKPX Adieresis Odieresis -40\r\nKPX Adieresis Ograve -40\r\nKPX Adieresis Ohungarumlaut -40\r\nKPX Adieresis Omacron -40\r\nKPX Adieresis Oslash -40\r\nKPX Adieresis Otilde -40\r\nKPX Adieresis Q -40\r\nKPX Adieresis T -90\r\nKPX Adieresis Tcaron -90\r\nKPX Adieresis Tcommaaccent -90\r\nKPX Adieresis U -50\r\nKPX Adieresis Uacute -50\r\nKPX Adieresis Ucircumflex -50\r\nKPX Adieresis Udieresis -50\r\nKPX Adieresis Ugrave -50\r\nKPX Adieresis Uhungarumlaut -50\r\nKPX Adieresis Umacron -50\r\nKPX Adieresis Uogonek -50\r\nKPX Adieresis Uring -50\r\nKPX Adieresis V -80\r\nKPX Adieresis W -60\r\nKPX Adieresis Y -110\r\nKPX Adieresis Yacute -110\r\nKPX Adieresis Ydieresis -110\r\nKPX Adieresis u -30\r\nKPX Adieresis uacute -30\r\nKPX Adieresis ucircumflex -30\r\nKPX Adieresis udieresis -30\r\nKPX Adieresis ugrave -30\r\nKPX Adieresis uhungarumlaut -30\r\nKPX Adieresis umacron -30\r\nKPX Adieresis uogonek -30\r\nKPX Adieresis uring -30\r\nKPX Adieresis v -40\r\nKPX Adieresis w -30\r\nKPX Adieresis y -30\r\nKPX Adieresis yacute -30\r\nKPX Adieresis ydieresis -30\r\nKPX Agrave C -40\r\nKPX Agrave Cacute -40\r\nKPX Agrave Ccaron -40\r\nKPX Agrave Ccedilla -40\r\nKPX Agrave G -50\r\nKPX Agrave Gbreve -50\r\nKPX Agrave Gcommaaccent -50\r\nKPX Agrave O -40\r\nKPX Agrave Oacute -40\r\nKPX Agrave Ocircumflex -40\r\nKPX Agrave Odieresis -40\r\nKPX Agrave Ograve -40\r\nKPX Agrave Ohungarumlaut -40\r\nKPX Agrave Omacron -40\r\nKPX Agrave Oslash -40\r\nKPX Agrave Otilde -40\r\nKPX Agrave Q -40\r\nKPX Agrave T -90\r\nKPX Agrave Tcaron -90\r\nKPX Agrave Tcommaaccent -90\r\nKPX Agrave U -50\r\nKPX Agrave Uacute -50\r\nKPX Agrave Ucircumflex -50\r\nKPX Agrave Udieresis -50\r\nKPX Agrave Ugrave -50\r\nKPX Agrave Uhungarumlaut -50\r\nKPX Agrave Umacron -50\r\nKPX Agrave Uogonek -50\r\nKPX Agrave Uring -50\r\nKPX Agrave V -80\r\nKPX Agrave W -60\r\nKPX Agrave Y -110\r\nKPX Agrave Yacute -110\r\nKPX Agrave Ydieresis -110\r\nKPX Agrave u -30\r\nKPX Agrave uacute -30\r\nKPX Agrave ucircumflex -30\r\nKPX Agrave udieresis -30\r\nKPX Agrave ugrave -30\r\nKPX Agrave uhungarumlaut -30\r\nKPX Agrave umacron -30\r\nKPX Agrave uogonek -30\r\nKPX Agrave uring -30\r\nKPX Agrave v -40\r\nKPX Agrave w -30\r\nKPX Agrave y -30\r\nKPX Agrave yacute -30\r\nKPX Agrave ydieresis -30\r\nKPX Amacron C -40\r\nKPX Amacron Cacute -40\r\nKPX Amacron Ccaron -40\r\nKPX Amacron Ccedilla -40\r\nKPX Amacron G -50\r\nKPX Amacron Gbreve -50\r\nKPX Amacron Gcommaaccent -50\r\nKPX Amacron O -40\r\nKPX Amacron Oacute -40\r\nKPX Amacron Ocircumflex -40\r\nKPX Amacron Odieresis -40\r\nKPX Amacron Ograve -40\r\nKPX Amacron Ohungarumlaut -40\r\nKPX Amacron Omacron -40\r\nKPX Amacron Oslash -40\r\nKPX Amacron Otilde -40\r\nKPX Amacron Q -40\r\nKPX Amacron T -90\r\nKPX Amacron Tcaron -90\r\nKPX Amacron Tcommaaccent -90\r\nKPX Amacron U -50\r\nKPX Amacron Uacute -50\r\nKPX Amacron Ucircumflex -50\r\nKPX Amacron Udieresis -50\r\nKPX Amacron Ugrave -50\r\nKPX Amacron Uhungarumlaut -50\r\nKPX Amacron Umacron -50\r\nKPX Amacron Uogonek -50\r\nKPX Amacron Uring -50\r\nKPX Amacron V -80\r\nKPX Amacron W -60\r\nKPX Amacron Y -110\r\nKPX Amacron Yacute -110\r\nKPX Amacron Ydieresis -110\r\nKPX Amacron u -30\r\nKPX Amacron uacute -30\r\nKPX Amacron ucircumflex -30\r\nKPX Amacron udieresis -30\r\nKPX Amacron ugrave -30\r\nKPX Amacron uhungarumlaut -30\r\nKPX Amacron umacron -30\r\nKPX Amacron uogonek -30\r\nKPX Amacron uring -30\r\nKPX Amacron v -40\r\nKPX Amacron w -30\r\nKPX Amacron y -30\r\nKPX Amacron yacute -30\r\nKPX Amacron ydieresis -30\r\nKPX Aogonek C -40\r\nKPX Aogonek Cacute -40\r\nKPX Aogonek Ccaron -40\r\nKPX Aogonek Ccedilla -40\r\nKPX Aogonek G -50\r\nKPX Aogonek Gbreve -50\r\nKPX Aogonek Gcommaaccent -50\r\nKPX Aogonek O -40\r\nKPX Aogonek Oacute -40\r\nKPX Aogonek Ocircumflex -40\r\nKPX Aogonek Odieresis -40\r\nKPX Aogonek Ograve -40\r\nKPX Aogonek Ohungarumlaut -40\r\nKPX Aogonek Omacron -40\r\nKPX Aogonek Oslash -40\r\nKPX Aogonek Otilde -40\r\nKPX Aogonek Q -40\r\nKPX Aogonek T -90\r\nKPX Aogonek Tcaron -90\r\nKPX Aogonek Tcommaaccent -90\r\nKPX Aogonek U -50\r\nKPX Aogonek Uacute -50\r\nKPX Aogonek Ucircumflex -50\r\nKPX Aogonek Udieresis -50\r\nKPX Aogonek Ugrave -50\r\nKPX Aogonek Uhungarumlaut -50\r\nKPX Aogonek Umacron -50\r\nKPX Aogonek Uogonek -50\r\nKPX Aogonek Uring -50\r\nKPX Aogonek V -80\r\nKPX Aogonek W -60\r\nKPX Aogonek Y -110\r\nKPX Aogonek Yacute -110\r\nKPX Aogonek Ydieresis -110\r\nKPX Aogonek u -30\r\nKPX Aogonek uacute -30\r\nKPX Aogonek ucircumflex -30\r\nKPX Aogonek udieresis -30\r\nKPX Aogonek ugrave -30\r\nKPX Aogonek uhungarumlaut -30\r\nKPX Aogonek umacron -30\r\nKPX Aogonek uogonek -30\r\nKPX Aogonek uring -30\r\nKPX Aogonek v -40\r\nKPX Aogonek w -30\r\nKPX Aogonek y -30\r\nKPX Aogonek yacute -30\r\nKPX Aogonek ydieresis -30\r\nKPX Aring C -40\r\nKPX Aring Cacute -40\r\nKPX Aring Ccaron -40\r\nKPX Aring Ccedilla -40\r\nKPX Aring G -50\r\nKPX Aring Gbreve -50\r\nKPX Aring Gcommaaccent -50\r\nKPX Aring O -40\r\nKPX Aring Oacute -40\r\nKPX Aring Ocircumflex -40\r\nKPX Aring Odieresis -40\r\nKPX Aring Ograve -40\r\nKPX Aring Ohungarumlaut -40\r\nKPX Aring Omacron -40\r\nKPX Aring Oslash -40\r\nKPX Aring Otilde -40\r\nKPX Aring Q -40\r\nKPX Aring T -90\r\nKPX Aring Tcaron -90\r\nKPX Aring Tcommaaccent -90\r\nKPX Aring U -50\r\nKPX Aring Uacute -50\r\nKPX Aring Ucircumflex -50\r\nKPX Aring Udieresis -50\r\nKPX Aring Ugrave -50\r\nKPX Aring Uhungarumlaut -50\r\nKPX Aring Umacron -50\r\nKPX Aring Uogonek -50\r\nKPX Aring Uring -50\r\nKPX Aring V -80\r\nKPX Aring W -60\r\nKPX Aring Y -110\r\nKPX Aring Yacute -110\r\nKPX Aring Ydieresis -110\r\nKPX Aring u -30\r\nKPX Aring uacute -30\r\nKPX Aring ucircumflex -30\r\nKPX Aring udieresis -30\r\nKPX Aring ugrave -30\r\nKPX Aring uhungarumlaut -30\r\nKPX Aring umacron -30\r\nKPX Aring uogonek -30\r\nKPX Aring uring -30\r\nKPX Aring v -40\r\nKPX Aring w -30\r\nKPX Aring y -30\r\nKPX Aring yacute -30\r\nKPX Aring ydieresis -30\r\nKPX Atilde C -40\r\nKPX Atilde Cacute -40\r\nKPX Atilde Ccaron -40\r\nKPX Atilde Ccedilla -40\r\nKPX Atilde G -50\r\nKPX Atilde Gbreve -50\r\nKPX Atilde Gcommaaccent -50\r\nKPX Atilde O -40\r\nKPX Atilde Oacute -40\r\nKPX Atilde Ocircumflex -40\r\nKPX Atilde Odieresis -40\r\nKPX Atilde Ograve -40\r\nKPX Atilde Ohungarumlaut -40\r\nKPX Atilde Omacron -40\r\nKPX Atilde Oslash -40\r\nKPX Atilde Otilde -40\r\nKPX Atilde Q -40\r\nKPX Atilde T -90\r\nKPX Atilde Tcaron -90\r\nKPX Atilde Tcommaaccent -90\r\nKPX Atilde U -50\r\nKPX Atilde Uacute -50\r\nKPX Atilde Ucircumflex -50\r\nKPX Atilde Udieresis -50\r\nKPX Atilde Ugrave -50\r\nKPX Atilde Uhungarumlaut -50\r\nKPX Atilde Umacron -50\r\nKPX Atilde Uogonek -50\r\nKPX Atilde Uring -50\r\nKPX Atilde V -80\r\nKPX Atilde W -60\r\nKPX Atilde Y -110\r\nKPX Atilde Yacute -110\r\nKPX Atilde Ydieresis -110\r\nKPX Atilde u -30\r\nKPX Atilde uacute -30\r\nKPX Atilde ucircumflex -30\r\nKPX Atilde udieresis -30\r\nKPX Atilde ugrave -30\r\nKPX Atilde uhungarumlaut -30\r\nKPX Atilde umacron -30\r\nKPX Atilde uogonek -30\r\nKPX Atilde uring -30\r\nKPX Atilde v -40\r\nKPX Atilde w -30\r\nKPX Atilde y -30\r\nKPX Atilde yacute -30\r\nKPX Atilde ydieresis -30\r\nKPX B A -30\r\nKPX B Aacute -30\r\nKPX B Abreve -30\r\nKPX B Acircumflex -30\r\nKPX B Adieresis -30\r\nKPX B Agrave -30\r\nKPX B Amacron -30\r\nKPX B Aogonek -30\r\nKPX B Aring -30\r\nKPX B Atilde -30\r\nKPX B U -10\r\nKPX B Uacute -10\r\nKPX B Ucircumflex -10\r\nKPX B Udieresis -10\r\nKPX B Ugrave -10\r\nKPX B Uhungarumlaut -10\r\nKPX B Umacron -10\r\nKPX B Uogonek -10\r\nKPX B Uring -10\r\nKPX D A -40\r\nKPX D Aacute -40\r\nKPX D Abreve -40\r\nKPX D Acircumflex -40\r\nKPX D Adieresis -40\r\nKPX D Agrave -40\r\nKPX D Amacron -40\r\nKPX D Aogonek -40\r\nKPX D Aring -40\r\nKPX D Atilde -40\r\nKPX D V -40\r\nKPX D W -40\r\nKPX D Y -70\r\nKPX D Yacute -70\r\nKPX D Ydieresis -70\r\nKPX D comma -30\r\nKPX D period -30\r\nKPX Dcaron A -40\r\nKPX Dcaron Aacute -40\r\nKPX Dcaron Abreve -40\r\nKPX Dcaron Acircumflex -40\r\nKPX Dcaron Adieresis -40\r\nKPX Dcaron Agrave -40\r\nKPX Dcaron Amacron -40\r\nKPX Dcaron Aogonek -40\r\nKPX Dcaron Aring -40\r\nKPX Dcaron Atilde -40\r\nKPX Dcaron V -40\r\nKPX Dcaron W -40\r\nKPX Dcaron Y -70\r\nKPX Dcaron Yacute -70\r\nKPX Dcaron Ydieresis -70\r\nKPX Dcaron comma -30\r\nKPX Dcaron period -30\r\nKPX Dcroat A -40\r\nKPX Dcroat Aacute -40\r\nKPX Dcroat Abreve -40\r\nKPX Dcroat Acircumflex -40\r\nKPX Dcroat Adieresis -40\r\nKPX Dcroat Agrave -40\r\nKPX Dcroat Amacron -40\r\nKPX Dcroat Aogonek -40\r\nKPX Dcroat Aring -40\r\nKPX Dcroat Atilde -40\r\nKPX Dcroat V -40\r\nKPX Dcroat W -40\r\nKPX Dcroat Y -70\r\nKPX Dcroat Yacute -70\r\nKPX Dcroat Ydieresis -70\r\nKPX Dcroat comma -30\r\nKPX Dcroat period -30\r\nKPX F A -80\r\nKPX F Aacute -80\r\nKPX F Abreve -80\r\nKPX F Acircumflex -80\r\nKPX F Adieresis -80\r\nKPX F Agrave -80\r\nKPX F Amacron -80\r\nKPX F Aogonek -80\r\nKPX F Aring -80\r\nKPX F Atilde -80\r\nKPX F a -20\r\nKPX F aacute -20\r\nKPX F abreve -20\r\nKPX F acircumflex -20\r\nKPX F adieresis -20\r\nKPX F agrave -20\r\nKPX F amacron -20\r\nKPX F aogonek -20\r\nKPX F aring -20\r\nKPX F atilde -20\r\nKPX F comma -100\r\nKPX F period -100\r\nKPX J A -20\r\nKPX J Aacute -20\r\nKPX J Abreve -20\r\nKPX J Acircumflex -20\r\nKPX J Adieresis -20\r\nKPX J Agrave -20\r\nKPX J Amacron -20\r\nKPX J Aogonek -20\r\nKPX J Aring -20\r\nKPX J Atilde -20\r\nKPX J comma -20\r\nKPX J period -20\r\nKPX J u -20\r\nKPX J uacute -20\r\nKPX J ucircumflex -20\r\nKPX J udieresis -20\r\nKPX J ugrave -20\r\nKPX J uhungarumlaut -20\r\nKPX J umacron -20\r\nKPX J uogonek -20\r\nKPX J uring -20\r\nKPX K O -30\r\nKPX K Oacute -30\r\nKPX K Ocircumflex -30\r\nKPX K Odieresis -30\r\nKPX K Ograve -30\r\nKPX K Ohungarumlaut -30\r\nKPX K Omacron -30\r\nKPX K Oslash -30\r\nKPX K Otilde -30\r\nKPX K e -15\r\nKPX K eacute -15\r\nKPX K ecaron -15\r\nKPX K ecircumflex -15\r\nKPX K edieresis -15\r\nKPX K edotaccent -15\r\nKPX K egrave -15\r\nKPX K emacron -15\r\nKPX K eogonek -15\r\nKPX K o -35\r\nKPX K oacute -35\r\nKPX K ocircumflex -35\r\nKPX K odieresis -35\r\nKPX K ograve -35\r\nKPX K ohungarumlaut -35\r\nKPX K omacron -35\r\nKPX K oslash -35\r\nKPX K otilde -35\r\nKPX K u -30\r\nKPX K uacute -30\r\nKPX K ucircumflex -30\r\nKPX K udieresis -30\r\nKPX K ugrave -30\r\nKPX K uhungarumlaut -30\r\nKPX K umacron -30\r\nKPX K uogonek -30\r\nKPX K uring -30\r\nKPX K y -40\r\nKPX K yacute -40\r\nKPX K ydieresis -40\r\nKPX Kcommaaccent O -30\r\nKPX Kcommaaccent Oacute -30\r\nKPX Kcommaaccent Ocircumflex -30\r\nKPX Kcommaaccent Odieresis -30\r\nKPX Kcommaaccent Ograve -30\r\nKPX Kcommaaccent Ohungarumlaut -30\r\nKPX Kcommaaccent Omacron -30\r\nKPX Kcommaaccent Oslash -30\r\nKPX Kcommaaccent Otilde -30\r\nKPX Kcommaaccent e -15\r\nKPX Kcommaaccent eacute -15\r\nKPX Kcommaaccent ecaron -15\r\nKPX Kcommaaccent ecircumflex -15\r\nKPX Kcommaaccent edieresis -15\r\nKPX Kcommaaccent edotaccent -15\r\nKPX Kcommaaccent egrave -15\r\nKPX Kcommaaccent emacron -15\r\nKPX Kcommaaccent eogonek -15\r\nKPX Kcommaaccent o -35\r\nKPX Kcommaaccent oacute -35\r\nKPX Kcommaaccent ocircumflex -35\r\nKPX Kcommaaccent odieresis -35\r\nKPX Kcommaaccent ograve -35\r\nKPX Kcommaaccent ohungarumlaut -35\r\nKPX Kcommaaccent omacron -35\r\nKPX Kcommaaccent oslash -35\r\nKPX Kcommaaccent otilde -35\r\nKPX Kcommaaccent u -30\r\nKPX Kcommaaccent uacute -30\r\nKPX Kcommaaccent ucircumflex -30\r\nKPX Kcommaaccent udieresis -30\r\nKPX Kcommaaccent ugrave -30\r\nKPX Kcommaaccent uhungarumlaut -30\r\nKPX Kcommaaccent umacron -30\r\nKPX Kcommaaccent uogonek -30\r\nKPX Kcommaaccent uring -30\r\nKPX Kcommaaccent y -40\r\nKPX Kcommaaccent yacute -40\r\nKPX Kcommaaccent ydieresis -40\r\nKPX L T -90\r\nKPX L Tcaron -90\r\nKPX L Tcommaaccent -90\r\nKPX L V -110\r\nKPX L W -80\r\nKPX L Y -120\r\nKPX L Yacute -120\r\nKPX L Ydieresis -120\r\nKPX L quotedblright -140\r\nKPX L quoteright -140\r\nKPX L y -30\r\nKPX L yacute -30\r\nKPX L ydieresis -30\r\nKPX Lacute T -90\r\nKPX Lacute Tcaron -90\r\nKPX Lacute Tcommaaccent -90\r\nKPX Lacute V -110\r\nKPX Lacute W -80\r\nKPX Lacute Y -120\r\nKPX Lacute Yacute -120\r\nKPX Lacute Ydieresis -120\r\nKPX Lacute quotedblright -140\r\nKPX Lacute quoteright -140\r\nKPX Lacute y -30\r\nKPX Lacute yacute -30\r\nKPX Lacute ydieresis -30\r\nKPX Lcommaaccent T -90\r\nKPX Lcommaaccent Tcaron -90\r\nKPX Lcommaaccent Tcommaaccent -90\r\nKPX Lcommaaccent V -110\r\nKPX Lcommaaccent W -80\r\nKPX Lcommaaccent Y -120\r\nKPX Lcommaaccent Yacute -120\r\nKPX Lcommaaccent Ydieresis -120\r\nKPX Lcommaaccent quotedblright -140\r\nKPX Lcommaaccent quoteright -140\r\nKPX Lcommaaccent y -30\r\nKPX Lcommaaccent yacute -30\r\nKPX Lcommaaccent ydieresis -30\r\nKPX Lslash T -90\r\nKPX Lslash Tcaron -90\r\nKPX Lslash Tcommaaccent -90\r\nKPX Lslash V -110\r\nKPX Lslash W -80\r\nKPX Lslash Y -120\r\nKPX Lslash Yacute -120\r\nKPX Lslash Ydieresis -120\r\nKPX Lslash quotedblright -140\r\nKPX Lslash quoteright -140\r\nKPX Lslash y -30\r\nKPX Lslash yacute -30\r\nKPX Lslash ydieresis -30\r\nKPX O A -50\r\nKPX O Aacute -50\r\nKPX O Abreve -50\r\nKPX O Acircumflex -50\r\nKPX O Adieresis -50\r\nKPX O Agrave -50\r\nKPX O Amacron -50\r\nKPX O Aogonek -50\r\nKPX O Aring -50\r\nKPX O Atilde -50\r\nKPX O T -40\r\nKPX O Tcaron -40\r\nKPX O Tcommaaccent -40\r\nKPX O V -50\r\nKPX O W -50\r\nKPX O X -50\r\nKPX O Y -70\r\nKPX O Yacute -70\r\nKPX O Ydieresis -70\r\nKPX O comma -40\r\nKPX O period -40\r\nKPX Oacute A -50\r\nKPX Oacute Aacute -50\r\nKPX Oacute Abreve -50\r\nKPX Oacute Acircumflex -50\r\nKPX Oacute Adieresis -50\r\nKPX Oacute Agrave -50\r\nKPX Oacute Amacron -50\r\nKPX Oacute Aogonek -50\r\nKPX Oacute Aring -50\r\nKPX Oacute Atilde -50\r\nKPX Oacute T -40\r\nKPX Oacute Tcaron -40\r\nKPX Oacute Tcommaaccent -40\r\nKPX Oacute V -50\r\nKPX Oacute W -50\r\nKPX Oacute X -50\r\nKPX Oacute Y -70\r\nKPX Oacute Yacute -70\r\nKPX Oacute Ydieresis -70\r\nKPX Oacute comma -40\r\nKPX Oacute period -40\r\nKPX Ocircumflex A -50\r\nKPX Ocircumflex Aacute -50\r\nKPX Ocircumflex Abreve -50\r\nKPX Ocircumflex Acircumflex -50\r\nKPX Ocircumflex Adieresis -50\r\nKPX Ocircumflex Agrave -50\r\nKPX Ocircumflex Amacron -50\r\nKPX Ocircumflex Aogonek -50\r\nKPX Ocircumflex Aring -50\r\nKPX Ocircumflex Atilde -50\r\nKPX Ocircumflex T -40\r\nKPX Ocircumflex Tcaron -40\r\nKPX Ocircumflex Tcommaaccent -40\r\nKPX Ocircumflex V -50\r\nKPX Ocircumflex W -50\r\nKPX Ocircumflex X -50\r\nKPX Ocircumflex Y -70\r\nKPX Ocircumflex Yacute -70\r\nKPX Ocircumflex Ydieresis -70\r\nKPX Ocircumflex comma -40\r\nKPX Ocircumflex period -40\r\nKPX Odieresis A -50\r\nKPX Odieresis Aacute -50\r\nKPX Odieresis Abreve -50\r\nKPX Odieresis Acircumflex -50\r\nKPX Odieresis Adieresis -50\r\nKPX Odieresis Agrave -50\r\nKPX Odieresis Amacron -50\r\nKPX Odieresis Aogonek -50\r\nKPX Odieresis Aring -50\r\nKPX Odieresis Atilde -50\r\nKPX Odieresis T -40\r\nKPX Odieresis Tcaron -40\r\nKPX Odieresis Tcommaaccent -40\r\nKPX Odieresis V -50\r\nKPX Odieresis W -50\r\nKPX Odieresis X -50\r\nKPX Odieresis Y -70\r\nKPX Odieresis Yacute -70\r\nKPX Odieresis Ydieresis -70\r\nKPX Odieresis comma -40\r\nKPX Odieresis period -40\r\nKPX Ograve A -50\r\nKPX Ograve Aacute -50\r\nKPX Ograve Abreve -50\r\nKPX Ograve Acircumflex -50\r\nKPX Ograve Adieresis -50\r\nKPX Ograve Agrave -50\r\nKPX Ograve Amacron -50\r\nKPX Ograve Aogonek -50\r\nKPX Ograve Aring -50\r\nKPX Ograve Atilde -50\r\nKPX Ograve T -40\r\nKPX Ograve Tcaron -40\r\nKPX Ograve Tcommaaccent -40\r\nKPX Ograve V -50\r\nKPX Ograve W -50\r\nKPX Ograve X -50\r\nKPX Ograve Y -70\r\nKPX Ograve Yacute -70\r\nKPX Ograve Ydieresis -70\r\nKPX Ograve comma -40\r\nKPX Ograve period -40\r\nKPX Ohungarumlaut A -50\r\nKPX Ohungarumlaut Aacute -50\r\nKPX Ohungarumlaut Abreve -50\r\nKPX Ohungarumlaut Acircumflex -50\r\nKPX Ohungarumlaut Adieresis -50\r\nKPX Ohungarumlaut Agrave -50\r\nKPX Ohungarumlaut Amacron -50\r\nKPX Ohungarumlaut Aogonek -50\r\nKPX Ohungarumlaut Aring -50\r\nKPX Ohungarumlaut Atilde -50\r\nKPX Ohungarumlaut T -40\r\nKPX Ohungarumlaut Tcaron -40\r\nKPX Ohungarumlaut Tcommaaccent -40\r\nKPX Ohungarumlaut V -50\r\nKPX Ohungarumlaut W -50\r\nKPX Ohungarumlaut X -50\r\nKPX Ohungarumlaut Y -70\r\nKPX Ohungarumlaut Yacute -70\r\nKPX Ohungarumlaut Ydieresis -70\r\nKPX Ohungarumlaut comma -40\r\nKPX Ohungarumlaut period -40\r\nKPX Omacron A -50\r\nKPX Omacron Aacute -50\r\nKPX Omacron Abreve -50\r\nKPX Omacron Acircumflex -50\r\nKPX Omacron Adieresis -50\r\nKPX Omacron Agrave -50\r\nKPX Omacron Amacron -50\r\nKPX Omacron Aogonek -50\r\nKPX Omacron Aring -50\r\nKPX Omacron Atilde -50\r\nKPX Omacron T -40\r\nKPX Omacron Tcaron -40\r\nKPX Omacron Tcommaaccent -40\r\nKPX Omacron V -50\r\nKPX Omacron W -50\r\nKPX Omacron X -50\r\nKPX Omacron Y -70\r\nKPX Omacron Yacute -70\r\nKPX Omacron Ydieresis -70\r\nKPX Omacron comma -40\r\nKPX Omacron period -40\r\nKPX Oslash A -50\r\nKPX Oslash Aacute -50\r\nKPX Oslash Abreve -50\r\nKPX Oslash Acircumflex -50\r\nKPX Oslash Adieresis -50\r\nKPX Oslash Agrave -50\r\nKPX Oslash Amacron -50\r\nKPX Oslash Aogonek -50\r\nKPX Oslash Aring -50\r\nKPX Oslash Atilde -50\r\nKPX Oslash T -40\r\nKPX Oslash Tcaron -40\r\nKPX Oslash Tcommaaccent -40\r\nKPX Oslash V -50\r\nKPX Oslash W -50\r\nKPX Oslash X -50\r\nKPX Oslash Y -70\r\nKPX Oslash Yacute -70\r\nKPX Oslash Ydieresis -70\r\nKPX Oslash comma -40\r\nKPX Oslash period -40\r\nKPX Otilde A -50\r\nKPX Otilde Aacute -50\r\nKPX Otilde Abreve -50\r\nKPX Otilde Acircumflex -50\r\nKPX Otilde Adieresis -50\r\nKPX Otilde Agrave -50\r\nKPX Otilde Amacron -50\r\nKPX Otilde Aogonek -50\r\nKPX Otilde Aring -50\r\nKPX Otilde Atilde -50\r\nKPX Otilde T -40\r\nKPX Otilde Tcaron -40\r\nKPX Otilde Tcommaaccent -40\r\nKPX Otilde V -50\r\nKPX Otilde W -50\r\nKPX Otilde X -50\r\nKPX Otilde Y -70\r\nKPX Otilde Yacute -70\r\nKPX Otilde Ydieresis -70\r\nKPX Otilde comma -40\r\nKPX Otilde period -40\r\nKPX P A -100\r\nKPX P Aacute -100\r\nKPX P Abreve -100\r\nKPX P Acircumflex -100\r\nKPX P Adieresis -100\r\nKPX P Agrave -100\r\nKPX P Amacron -100\r\nKPX P Aogonek -100\r\nKPX P Aring -100\r\nKPX P Atilde -100\r\nKPX P a -30\r\nKPX P aacute -30\r\nKPX P abreve -30\r\nKPX P acircumflex -30\r\nKPX P adieresis -30\r\nKPX P agrave -30\r\nKPX P amacron -30\r\nKPX P aogonek -30\r\nKPX P aring -30\r\nKPX P atilde -30\r\nKPX P comma -120\r\nKPX P e -30\r\nKPX P eacute -30\r\nKPX P ecaron -30\r\nKPX P ecircumflex -30\r\nKPX P edieresis -30\r\nKPX P edotaccent -30\r\nKPX P egrave -30\r\nKPX P emacron -30\r\nKPX P eogonek -30\r\nKPX P o -40\r\nKPX P oacute -40\r\nKPX P ocircumflex -40\r\nKPX P odieresis -40\r\nKPX P ograve -40\r\nKPX P ohungarumlaut -40\r\nKPX P omacron -40\r\nKPX P oslash -40\r\nKPX P otilde -40\r\nKPX P period -120\r\nKPX Q U -10\r\nKPX Q Uacute -10\r\nKPX Q Ucircumflex -10\r\nKPX Q Udieresis -10\r\nKPX Q Ugrave -10\r\nKPX Q Uhungarumlaut -10\r\nKPX Q Umacron -10\r\nKPX Q Uogonek -10\r\nKPX Q Uring -10\r\nKPX Q comma 20\r\nKPX Q period 20\r\nKPX R O -20\r\nKPX R Oacute -20\r\nKPX R Ocircumflex -20\r\nKPX R Odieresis -20\r\nKPX R Ograve -20\r\nKPX R Ohungarumlaut -20\r\nKPX R Omacron -20\r\nKPX R Oslash -20\r\nKPX R Otilde -20\r\nKPX R T -20\r\nKPX R Tcaron -20\r\nKPX R Tcommaaccent -20\r\nKPX R U -20\r\nKPX R Uacute -20\r\nKPX R Ucircumflex -20\r\nKPX R Udieresis -20\r\nKPX R Ugrave -20\r\nKPX R Uhungarumlaut -20\r\nKPX R Umacron -20\r\nKPX R Uogonek -20\r\nKPX R Uring -20\r\nKPX R V -50\r\nKPX R W -40\r\nKPX R Y -50\r\nKPX R Yacute -50\r\nKPX R Ydieresis -50\r\nKPX Racute O -20\r\nKPX Racute Oacute -20\r\nKPX Racute Ocircumflex -20\r\nKPX Racute Odieresis -20\r\nKPX Racute Ograve -20\r\nKPX Racute Ohungarumlaut -20\r\nKPX Racute Omacron -20\r\nKPX Racute Oslash -20\r\nKPX Racute Otilde -20\r\nKPX Racute T -20\r\nKPX Racute Tcaron -20\r\nKPX Racute Tcommaaccent -20\r\nKPX Racute U -20\r\nKPX Racute Uacute -20\r\nKPX Racute Ucircumflex -20\r\nKPX Racute Udieresis -20\r\nKPX Racute Ugrave -20\r\nKPX Racute Uhungarumlaut -20\r\nKPX Racute Umacron -20\r\nKPX Racute Uogonek -20\r\nKPX Racute Uring -20\r\nKPX Racute V -50\r\nKPX Racute W -40\r\nKPX Racute Y -50\r\nKPX Racute Yacute -50\r\nKPX Racute Ydieresis -50\r\nKPX Rcaron O -20\r\nKPX Rcaron Oacute -20\r\nKPX Rcaron Ocircumflex -20\r\nKPX Rcaron Odieresis -20\r\nKPX Rcaron Ograve -20\r\nKPX Rcaron Ohungarumlaut -20\r\nKPX Rcaron Omacron -20\r\nKPX Rcaron Oslash -20\r\nKPX Rcaron Otilde -20\r\nKPX Rcaron T -20\r\nKPX Rcaron Tcaron -20\r\nKPX Rcaron Tcommaaccent -20\r\nKPX Rcaron U -20\r\nKPX Rcaron Uacute -20\r\nKPX Rcaron Ucircumflex -20\r\nKPX Rcaron Udieresis -20\r\nKPX Rcaron Ugrave -20\r\nKPX Rcaron Uhungarumlaut -20\r\nKPX Rcaron Umacron -20\r\nKPX Rcaron Uogonek -20\r\nKPX Rcaron Uring -20\r\nKPX Rcaron V -50\r\nKPX Rcaron W -40\r\nKPX Rcaron Y -50\r\nKPX Rcaron Yacute -50\r\nKPX Rcaron Ydieresis -50\r\nKPX Rcommaaccent O -20\r\nKPX Rcommaaccent Oacute -20\r\nKPX Rcommaaccent Ocircumflex -20\r\nKPX Rcommaaccent Odieresis -20\r\nKPX Rcommaaccent Ograve -20\r\nKPX Rcommaaccent Ohungarumlaut -20\r\nKPX Rcommaaccent Omacron -20\r\nKPX Rcommaaccent Oslash -20\r\nKPX Rcommaaccent Otilde -20\r\nKPX Rcommaaccent T -20\r\nKPX Rcommaaccent Tcaron -20\r\nKPX Rcommaaccent Tcommaaccent -20\r\nKPX Rcommaaccent U -20\r\nKPX Rcommaaccent Uacute -20\r\nKPX Rcommaaccent Ucircumflex -20\r\nKPX Rcommaaccent Udieresis -20\r\nKPX Rcommaaccent Ugrave -20\r\nKPX Rcommaaccent Uhungarumlaut -20\r\nKPX Rcommaaccent Umacron -20\r\nKPX Rcommaaccent Uogonek -20\r\nKPX Rcommaaccent Uring -20\r\nKPX Rcommaaccent V -50\r\nKPX Rcommaaccent W -40\r\nKPX Rcommaaccent Y -50\r\nKPX Rcommaaccent Yacute -50\r\nKPX Rcommaaccent Ydieresis -50\r\nKPX T A -90\r\nKPX T Aacute -90\r\nKPX T Abreve -90\r\nKPX T Acircumflex -90\r\nKPX T Adieresis -90\r\nKPX T Agrave -90\r\nKPX T Amacron -90\r\nKPX T Aogonek -90\r\nKPX T Aring -90\r\nKPX T Atilde -90\r\nKPX T O -40\r\nKPX T Oacute -40\r\nKPX T Ocircumflex -40\r\nKPX T Odieresis -40\r\nKPX T Ograve -40\r\nKPX T Ohungarumlaut -40\r\nKPX T Omacron -40\r\nKPX T Oslash -40\r\nKPX T Otilde -40\r\nKPX T a -80\r\nKPX T aacute -80\r\nKPX T abreve -80\r\nKPX T acircumflex -80\r\nKPX T adieresis -80\r\nKPX T agrave -80\r\nKPX T amacron -80\r\nKPX T aogonek -80\r\nKPX T aring -80\r\nKPX T atilde -80\r\nKPX T colon -40\r\nKPX T comma -80\r\nKPX T e -60\r\nKPX T eacute -60\r\nKPX T ecaron -60\r\nKPX T ecircumflex -60\r\nKPX T edieresis -60\r\nKPX T edotaccent -60\r\nKPX T egrave -60\r\nKPX T emacron -60\r\nKPX T eogonek -60\r\nKPX T hyphen -120\r\nKPX T o -80\r\nKPX T oacute -80\r\nKPX T ocircumflex -80\r\nKPX T odieresis -80\r\nKPX T ograve -80\r\nKPX T ohungarumlaut -80\r\nKPX T omacron -80\r\nKPX T oslash -80\r\nKPX T otilde -80\r\nKPX T period -80\r\nKPX T r -80\r\nKPX T racute -80\r\nKPX T rcommaaccent -80\r\nKPX T semicolon -40\r\nKPX T u -90\r\nKPX T uacute -90\r\nKPX T ucircumflex -90\r\nKPX T udieresis -90\r\nKPX T ugrave -90\r\nKPX T uhungarumlaut -90\r\nKPX T umacron -90\r\nKPX T uogonek -90\r\nKPX T uring -90\r\nKPX T w -60\r\nKPX T y -60\r\nKPX T yacute -60\r\nKPX T ydieresis -60\r\nKPX Tcaron A -90\r\nKPX Tcaron Aacute -90\r\nKPX Tcaron Abreve -90\r\nKPX Tcaron Acircumflex -90\r\nKPX Tcaron Adieresis -90\r\nKPX Tcaron Agrave -90\r\nKPX Tcaron Amacron -90\r\nKPX Tcaron Aogonek -90\r\nKPX Tcaron Aring -90\r\nKPX Tcaron Atilde -90\r\nKPX Tcaron O -40\r\nKPX Tcaron Oacute -40\r\nKPX Tcaron Ocircumflex -40\r\nKPX Tcaron Odieresis -40\r\nKPX Tcaron Ograve -40\r\nKPX Tcaron Ohungarumlaut -40\r\nKPX Tcaron Omacron -40\r\nKPX Tcaron Oslash -40\r\nKPX Tcaron Otilde -40\r\nKPX Tcaron a -80\r\nKPX Tcaron aacute -80\r\nKPX Tcaron abreve -80\r\nKPX Tcaron acircumflex -80\r\nKPX Tcaron adieresis -80\r\nKPX Tcaron agrave -80\r\nKPX Tcaron amacron -80\r\nKPX Tcaron aogonek -80\r\nKPX Tcaron aring -80\r\nKPX Tcaron atilde -80\r\nKPX Tcaron colon -40\r\nKPX Tcaron comma -80\r\nKPX Tcaron e -60\r\nKPX Tcaron eacute -60\r\nKPX Tcaron ecaron -60\r\nKPX Tcaron ecircumflex -60\r\nKPX Tcaron edieresis -60\r\nKPX Tcaron edotaccent -60\r\nKPX Tcaron egrave -60\r\nKPX Tcaron emacron -60\r\nKPX Tcaron eogonek -60\r\nKPX Tcaron hyphen -120\r\nKPX Tcaron o -80\r\nKPX Tcaron oacute -80\r\nKPX Tcaron ocircumflex -80\r\nKPX Tcaron odieresis -80\r\nKPX Tcaron ograve -80\r\nKPX Tcaron ohungarumlaut -80\r\nKPX Tcaron omacron -80\r\nKPX Tcaron oslash -80\r\nKPX Tcaron otilde -80\r\nKPX Tcaron period -80\r\nKPX Tcaron r -80\r\nKPX Tcaron racute -80\r\nKPX Tcaron rcommaaccent -80\r\nKPX Tcaron semicolon -40\r\nKPX Tcaron u -90\r\nKPX Tcaron uacute -90\r\nKPX Tcaron ucircumflex -90\r\nKPX Tcaron udieresis -90\r\nKPX Tcaron ugrave -90\r\nKPX Tcaron uhungarumlaut -90\r\nKPX Tcaron umacron -90\r\nKPX Tcaron uogonek -90\r\nKPX Tcaron uring -90\r\nKPX Tcaron w -60\r\nKPX Tcaron y -60\r\nKPX Tcaron yacute -60\r\nKPX Tcaron ydieresis -60\r\nKPX Tcommaaccent A -90\r\nKPX Tcommaaccent Aacute -90\r\nKPX Tcommaaccent Abreve -90\r\nKPX Tcommaaccent Acircumflex -90\r\nKPX Tcommaaccent Adieresis -90\r\nKPX Tcommaaccent Agrave -90\r\nKPX Tcommaaccent Amacron -90\r\nKPX Tcommaaccent Aogonek -90\r\nKPX Tcommaaccent Aring -90\r\nKPX Tcommaaccent Atilde -90\r\nKPX Tcommaaccent O -40\r\nKPX Tcommaaccent Oacute -40\r\nKPX Tcommaaccent Ocircumflex -40\r\nKPX Tcommaaccent Odieresis -40\r\nKPX Tcommaaccent Ograve -40\r\nKPX Tcommaaccent Ohungarumlaut -40\r\nKPX Tcommaaccent Omacron -40\r\nKPX Tcommaaccent Oslash -40\r\nKPX Tcommaaccent Otilde -40\r\nKPX Tcommaaccent a -80\r\nKPX Tcommaaccent aacute -80\r\nKPX Tcommaaccent abreve -80\r\nKPX Tcommaaccent acircumflex -80\r\nKPX Tcommaaccent adieresis -80\r\nKPX Tcommaaccent agrave -80\r\nKPX Tcommaaccent amacron -80\r\nKPX Tcommaaccent aogonek -80\r\nKPX Tcommaaccent aring -80\r\nKPX Tcommaaccent atilde -80\r\nKPX Tcommaaccent colon -40\r\nKPX Tcommaaccent comma -80\r\nKPX Tcommaaccent e -60\r\nKPX Tcommaaccent eacute -60\r\nKPX Tcommaaccent ecaron -60\r\nKPX Tcommaaccent ecircumflex -60\r\nKPX Tcommaaccent edieresis -60\r\nKPX Tcommaaccent edotaccent -60\r\nKPX Tcommaaccent egrave -60\r\nKPX Tcommaaccent emacron -60\r\nKPX Tcommaaccent eogonek -60\r\nKPX Tcommaaccent hyphen -120\r\nKPX Tcommaaccent o -80\r\nKPX Tcommaaccent oacute -80\r\nKPX Tcommaaccent ocircumflex -80\r\nKPX Tcommaaccent odieresis -80\r\nKPX Tcommaaccent ograve -80\r\nKPX Tcommaaccent ohungarumlaut -80\r\nKPX Tcommaaccent omacron -80\r\nKPX Tcommaaccent oslash -80\r\nKPX Tcommaaccent otilde -80\r\nKPX Tcommaaccent period -80\r\nKPX Tcommaaccent r -80\r\nKPX Tcommaaccent racute -80\r\nKPX Tcommaaccent rcommaaccent -80\r\nKPX Tcommaaccent semicolon -40\r\nKPX Tcommaaccent u -90\r\nKPX Tcommaaccent uacute -90\r\nKPX Tcommaaccent ucircumflex -90\r\nKPX Tcommaaccent udieresis -90\r\nKPX Tcommaaccent ugrave -90\r\nKPX Tcommaaccent uhungarumlaut -90\r\nKPX Tcommaaccent umacron -90\r\nKPX Tcommaaccent uogonek -90\r\nKPX Tcommaaccent uring -90\r\nKPX Tcommaaccent w -60\r\nKPX Tcommaaccent y -60\r\nKPX Tcommaaccent yacute -60\r\nKPX Tcommaaccent ydieresis -60\r\nKPX U A -50\r\nKPX U Aacute -50\r\nKPX U Abreve -50\r\nKPX U Acircumflex -50\r\nKPX U Adieresis -50\r\nKPX U Agrave -50\r\nKPX U Amacron -50\r\nKPX U Aogonek -50\r\nKPX U Aring -50\r\nKPX U Atilde -50\r\nKPX U comma -30\r\nKPX U period -30\r\nKPX Uacute A -50\r\nKPX Uacute Aacute -50\r\nKPX Uacute Abreve -50\r\nKPX Uacute Acircumflex -50\r\nKPX Uacute Adieresis -50\r\nKPX Uacute Agrave -50\r\nKPX Uacute Amacron -50\r\nKPX Uacute Aogonek -50\r\nKPX Uacute Aring -50\r\nKPX Uacute Atilde -50\r\nKPX Uacute comma -30\r\nKPX Uacute period -30\r\nKPX Ucircumflex A -50\r\nKPX Ucircumflex Aacute -50\r\nKPX Ucircumflex Abreve -50\r\nKPX Ucircumflex Acircumflex -50\r\nKPX Ucircumflex Adieresis -50\r\nKPX Ucircumflex Agrave -50\r\nKPX Ucircumflex Amacron -50\r\nKPX Ucircumflex Aogonek -50\r\nKPX Ucircumflex Aring -50\r\nKPX Ucircumflex Atilde -50\r\nKPX Ucircumflex comma -30\r\nKPX Ucircumflex period -30\r\nKPX Udieresis A -50\r\nKPX Udieresis Aacute -50\r\nKPX Udieresis Abreve -50\r\nKPX Udieresis Acircumflex -50\r\nKPX Udieresis Adieresis -50\r\nKPX Udieresis Agrave -50\r\nKPX Udieresis Amacron -50\r\nKPX Udieresis Aogonek -50\r\nKPX Udieresis Aring -50\r\nKPX Udieresis Atilde -50\r\nKPX Udieresis comma -30\r\nKPX Udieresis period -30\r\nKPX Ugrave A -50\r\nKPX Ugrave Aacute -50\r\nKPX Ugrave Abreve -50\r\nKPX Ugrave Acircumflex -50\r\nKPX Ugrave Adieresis -50\r\nKPX Ugrave Agrave -50\r\nKPX Ugrave Amacron -50\r\nKPX Ugrave Aogonek -50\r\nKPX Ugrave Aring -50\r\nKPX Ugrave Atilde -50\r\nKPX Ugrave comma -30\r\nKPX Ugrave period -30\r\nKPX Uhungarumlaut A -50\r\nKPX Uhungarumlaut Aacute -50\r\nKPX Uhungarumlaut Abreve -50\r\nKPX Uhungarumlaut Acircumflex -50\r\nKPX Uhungarumlaut Adieresis -50\r\nKPX Uhungarumlaut Agrave -50\r\nKPX Uhungarumlaut Amacron -50\r\nKPX Uhungarumlaut Aogonek -50\r\nKPX Uhungarumlaut Aring -50\r\nKPX Uhungarumlaut Atilde -50\r\nKPX Uhungarumlaut comma -30\r\nKPX Uhungarumlaut period -30\r\nKPX Umacron A -50\r\nKPX Umacron Aacute -50\r\nKPX Umacron Abreve -50\r\nKPX Umacron Acircumflex -50\r\nKPX Umacron Adieresis -50\r\nKPX Umacron Agrave -50\r\nKPX Umacron Amacron -50\r\nKPX Umacron Aogonek -50\r\nKPX Umacron Aring -50\r\nKPX Umacron Atilde -50\r\nKPX Umacron comma -30\r\nKPX Umacron period -30\r\nKPX Uogonek A -50\r\nKPX Uogonek Aacute -50\r\nKPX Uogonek Abreve -50\r\nKPX Uogonek Acircumflex -50\r\nKPX Uogonek Adieresis -50\r\nKPX Uogonek Agrave -50\r\nKPX Uogonek Amacron -50\r\nKPX Uogonek Aogonek -50\r\nKPX Uogonek Aring -50\r\nKPX Uogonek Atilde -50\r\nKPX Uogonek comma -30\r\nKPX Uogonek period -30\r\nKPX Uring A -50\r\nKPX Uring Aacute -50\r\nKPX Uring Abreve -50\r\nKPX Uring Acircumflex -50\r\nKPX Uring Adieresis -50\r\nKPX Uring Agrave -50\r\nKPX Uring Amacron -50\r\nKPX Uring Aogonek -50\r\nKPX Uring Aring -50\r\nKPX Uring Atilde -50\r\nKPX Uring comma -30\r\nKPX Uring period -30\r\nKPX V A -80\r\nKPX V Aacute -80\r\nKPX V Abreve -80\r\nKPX V Acircumflex -80\r\nKPX V Adieresis -80\r\nKPX V Agrave -80\r\nKPX V Amacron -80\r\nKPX V Aogonek -80\r\nKPX V Aring -80\r\nKPX V Atilde -80\r\nKPX V G -50\r\nKPX V Gbreve -50\r\nKPX V Gcommaaccent -50\r\nKPX V O -50\r\nKPX V Oacute -50\r\nKPX V Ocircumflex -50\r\nKPX V Odieresis -50\r\nKPX V Ograve -50\r\nKPX V Ohungarumlaut -50\r\nKPX V Omacron -50\r\nKPX V Oslash -50\r\nKPX V Otilde -50\r\nKPX V a -60\r\nKPX V aacute -60\r\nKPX V abreve -60\r\nKPX V acircumflex -60\r\nKPX V adieresis -60\r\nKPX V agrave -60\r\nKPX V amacron -60\r\nKPX V aogonek -60\r\nKPX V aring -60\r\nKPX V atilde -60\r\nKPX V colon -40\r\nKPX V comma -120\r\nKPX V e -50\r\nKPX V eacute -50\r\nKPX V ecaron -50\r\nKPX V ecircumflex -50\r\nKPX V edieresis -50\r\nKPX V edotaccent -50\r\nKPX V egrave -50\r\nKPX V emacron -50\r\nKPX V eogonek -50\r\nKPX V hyphen -80\r\nKPX V o -90\r\nKPX V oacute -90\r\nKPX V ocircumflex -90\r\nKPX V odieresis -90\r\nKPX V ograve -90\r\nKPX V ohungarumlaut -90\r\nKPX V omacron -90\r\nKPX V oslash -90\r\nKPX V otilde -90\r\nKPX V period -120\r\nKPX V semicolon -40\r\nKPX V u -60\r\nKPX V uacute -60\r\nKPX V ucircumflex -60\r\nKPX V udieresis -60\r\nKPX V ugrave -60\r\nKPX V uhungarumlaut -60\r\nKPX V umacron -60\r\nKPX V uogonek -60\r\nKPX V uring -60\r\nKPX W A -60\r\nKPX W Aacute -60\r\nKPX W Abreve -60\r\nKPX W Acircumflex -60\r\nKPX W Adieresis -60\r\nKPX W Agrave -60\r\nKPX W Amacron -60\r\nKPX W Aogonek -60\r\nKPX W Aring -60\r\nKPX W Atilde -60\r\nKPX W O -20\r\nKPX W Oacute -20\r\nKPX W Ocircumflex -20\r\nKPX W Odieresis -20\r\nKPX W Ograve -20\r\nKPX W Ohungarumlaut -20\r\nKPX W Omacron -20\r\nKPX W Oslash -20\r\nKPX W Otilde -20\r\nKPX W a -40\r\nKPX W aacute -40\r\nKPX W abreve -40\r\nKPX W acircumflex -40\r\nKPX W adieresis -40\r\nKPX W agrave -40\r\nKPX W amacron -40\r\nKPX W aogonek -40\r\nKPX W aring -40\r\nKPX W atilde -40\r\nKPX W colon -10\r\nKPX W comma -80\r\nKPX W e -35\r\nKPX W eacute -35\r\nKPX W ecaron -35\r\nKPX W ecircumflex -35\r\nKPX W edieresis -35\r\nKPX W edotaccent -35\r\nKPX W egrave -35\r\nKPX W emacron -35\r\nKPX W eogonek -35\r\nKPX W hyphen -40\r\nKPX W o -60\r\nKPX W oacute -60\r\nKPX W ocircumflex -60\r\nKPX W odieresis -60\r\nKPX W ograve -60\r\nKPX W ohungarumlaut -60\r\nKPX W omacron -60\r\nKPX W oslash -60\r\nKPX W otilde -60\r\nKPX W period -80\r\nKPX W semicolon -10\r\nKPX W u -45\r\nKPX W uacute -45\r\nKPX W ucircumflex -45\r\nKPX W udieresis -45\r\nKPX W ugrave -45\r\nKPX W uhungarumlaut -45\r\nKPX W umacron -45\r\nKPX W uogonek -45\r\nKPX W uring -45\r\nKPX W y -20\r\nKPX W yacute -20\r\nKPX W ydieresis -20\r\nKPX Y A -110\r\nKPX Y Aacute -110\r\nKPX Y Abreve -110\r\nKPX Y Acircumflex -110\r\nKPX Y Adieresis -110\r\nKPX Y Agrave -110\r\nKPX Y Amacron -110\r\nKPX Y Aogonek -110\r\nKPX Y Aring -110\r\nKPX Y Atilde -110\r\nKPX Y O -70\r\nKPX Y Oacute -70\r\nKPX Y Ocircumflex -70\r\nKPX Y Odieresis -70\r\nKPX Y Ograve -70\r\nKPX Y Ohungarumlaut -70\r\nKPX Y Omacron -70\r\nKPX Y Oslash -70\r\nKPX Y Otilde -70\r\nKPX Y a -90\r\nKPX Y aacute -90\r\nKPX Y abreve -90\r\nKPX Y acircumflex -90\r\nKPX Y adieresis -90\r\nKPX Y agrave -90\r\nKPX Y amacron -90\r\nKPX Y aogonek -90\r\nKPX Y aring -90\r\nKPX Y atilde -90\r\nKPX Y colon -50\r\nKPX Y comma -100\r\nKPX Y e -80\r\nKPX Y eacute -80\r\nKPX Y ecaron -80\r\nKPX Y ecircumflex -80\r\nKPX Y edieresis -80\r\nKPX Y edotaccent -80\r\nKPX Y egrave -80\r\nKPX Y emacron -80\r\nKPX Y eogonek -80\r\nKPX Y o -100\r\nKPX Y oacute -100\r\nKPX Y ocircumflex -100\r\nKPX Y odieresis -100\r\nKPX Y ograve -100\r\nKPX Y ohungarumlaut -100\r\nKPX Y omacron -100\r\nKPX Y oslash -100\r\nKPX Y otilde -100\r\nKPX Y period -100\r\nKPX Y semicolon -50\r\nKPX Y u -100\r\nKPX Y uacute -100\r\nKPX Y ucircumflex -100\r\nKPX Y udieresis -100\r\nKPX Y ugrave -100\r\nKPX Y uhungarumlaut -100\r\nKPX Y umacron -100\r\nKPX Y uogonek -100\r\nKPX Y uring -100\r\nKPX Yacute A -110\r\nKPX Yacute Aacute -110\r\nKPX Yacute Abreve -110\r\nKPX Yacute Acircumflex -110\r\nKPX Yacute Adieresis -110\r\nKPX Yacute Agrave -110\r\nKPX Yacute Amacron -110\r\nKPX Yacute Aogonek -110\r\nKPX Yacute Aring -110\r\nKPX Yacute Atilde -110\r\nKPX Yacute O -70\r\nKPX Yacute Oacute -70\r\nKPX Yacute Ocircumflex -70\r\nKPX Yacute Odieresis -70\r\nKPX Yacute Ograve -70\r\nKPX Yacute Ohungarumlaut -70\r\nKPX Yacute Omacron -70\r\nKPX Yacute Oslash -70\r\nKPX Yacute Otilde -70\r\nKPX Yacute a -90\r\nKPX Yacute aacute -90\r\nKPX Yacute abreve -90\r\nKPX Yacute acircumflex -90\r\nKPX Yacute adieresis -90\r\nKPX Yacute agrave -90\r\nKPX Yacute amacron -90\r\nKPX Yacute aogonek -90\r\nKPX Yacute aring -90\r\nKPX Yacute atilde -90\r\nKPX Yacute colon -50\r\nKPX Yacute comma -100\r\nKPX Yacute e -80\r\nKPX Yacute eacute -80\r\nKPX Yacute ecaron -80\r\nKPX Yacute ecircumflex -80\r\nKPX Yacute edieresis -80\r\nKPX Yacute edotaccent -80\r\nKPX Yacute egrave -80\r\nKPX Yacute emacron -80\r\nKPX Yacute eogonek -80\r\nKPX Yacute o -100\r\nKPX Yacute oacute -100\r\nKPX Yacute ocircumflex -100\r\nKPX Yacute odieresis -100\r\nKPX Yacute ograve -100\r\nKPX Yacute ohungarumlaut -100\r\nKPX Yacute omacron -100\r\nKPX Yacute oslash -100\r\nKPX Yacute otilde -100\r\nKPX Yacute period -100\r\nKPX Yacute semicolon -50\r\nKPX Yacute u -100\r\nKPX Yacute uacute -100\r\nKPX Yacute ucircumflex -100\r\nKPX Yacute udieresis -100\r\nKPX Yacute ugrave -100\r\nKPX Yacute uhungarumlaut -100\r\nKPX Yacute umacron -100\r\nKPX Yacute uogonek -100\r\nKPX Yacute uring -100\r\nKPX Ydieresis A -110\r\nKPX Ydieresis Aacute -110\r\nKPX Ydieresis Abreve -110\r\nKPX Ydieresis Acircumflex -110\r\nKPX Ydieresis Adieresis -110\r\nKPX Ydieresis Agrave -110\r\nKPX Ydieresis Amacron -110\r\nKPX Ydieresis Aogonek -110\r\nKPX Ydieresis Aring -110\r\nKPX Ydieresis Atilde -110\r\nKPX Ydieresis O -70\r\nKPX Ydieresis Oacute -70\r\nKPX Ydieresis Ocircumflex -70\r\nKPX Ydieresis Odieresis -70\r\nKPX Ydieresis Ograve -70\r\nKPX Ydieresis Ohungarumlaut -70\r\nKPX Ydieresis Omacron -70\r\nKPX Ydieresis Oslash -70\r\nKPX Ydieresis Otilde -70\r\nKPX Ydieresis a -90\r\nKPX Ydieresis aacute -90\r\nKPX Ydieresis abreve -90\r\nKPX Ydieresis acircumflex -90\r\nKPX Ydieresis adieresis -90\r\nKPX Ydieresis agrave -90\r\nKPX Ydieresis amacron -90\r\nKPX Ydieresis aogonek -90\r\nKPX Ydieresis aring -90\r\nKPX Ydieresis atilde -90\r\nKPX Ydieresis colon -50\r\nKPX Ydieresis comma -100\r\nKPX Ydieresis e -80\r\nKPX Ydieresis eacute -80\r\nKPX Ydieresis ecaron -80\r\nKPX Ydieresis ecircumflex -80\r\nKPX Ydieresis edieresis -80\r\nKPX Ydieresis edotaccent -80\r\nKPX Ydieresis egrave -80\r\nKPX Ydieresis emacron -80\r\nKPX Ydieresis eogonek -80\r\nKPX Ydieresis o -100\r\nKPX Ydieresis oacute -100\r\nKPX Ydieresis ocircumflex -100\r\nKPX Ydieresis odieresis -100\r\nKPX Ydieresis ograve -100\r\nKPX Ydieresis ohungarumlaut -100\r\nKPX Ydieresis omacron -100\r\nKPX Ydieresis oslash -100\r\nKPX Ydieresis otilde -100\r\nKPX Ydieresis period -100\r\nKPX Ydieresis semicolon -50\r\nKPX Ydieresis u -100\r\nKPX Ydieresis uacute -100\r\nKPX Ydieresis ucircumflex -100\r\nKPX Ydieresis udieresis -100\r\nKPX Ydieresis ugrave -100\r\nKPX Ydieresis uhungarumlaut -100\r\nKPX Ydieresis umacron -100\r\nKPX Ydieresis uogonek -100\r\nKPX Ydieresis uring -100\r\nKPX a g -10\r\nKPX a gbreve -10\r\nKPX a gcommaaccent -10\r\nKPX a v -15\r\nKPX a w -15\r\nKPX a y -20\r\nKPX a yacute -20\r\nKPX a ydieresis -20\r\nKPX aacute g -10\r\nKPX aacute gbreve -10\r\nKPX aacute gcommaaccent -10\r\nKPX aacute v -15\r\nKPX aacute w -15\r\nKPX aacute y -20\r\nKPX aacute yacute -20\r\nKPX aacute ydieresis -20\r\nKPX abreve g -10\r\nKPX abreve gbreve -10\r\nKPX abreve gcommaaccent -10\r\nKPX abreve v -15\r\nKPX abreve w -15\r\nKPX abreve y -20\r\nKPX abreve yacute -20\r\nKPX abreve ydieresis -20\r\nKPX acircumflex g -10\r\nKPX acircumflex gbreve -10\r\nKPX acircumflex gcommaaccent -10\r\nKPX acircumflex v -15\r\nKPX acircumflex w -15\r\nKPX acircumflex y -20\r\nKPX acircumflex yacute -20\r\nKPX acircumflex ydieresis -20\r\nKPX adieresis g -10\r\nKPX adieresis gbreve -10\r\nKPX adieresis gcommaaccent -10\r\nKPX adieresis v -15\r\nKPX adieresis w -15\r\nKPX adieresis y -20\r\nKPX adieresis yacute -20\r\nKPX adieresis ydieresis -20\r\nKPX agrave g -10\r\nKPX agrave gbreve -10\r\nKPX agrave gcommaaccent -10\r\nKPX agrave v -15\r\nKPX agrave w -15\r\nKPX agrave y -20\r\nKPX agrave yacute -20\r\nKPX agrave ydieresis -20\r\nKPX amacron g -10\r\nKPX amacron gbreve -10\r\nKPX amacron gcommaaccent -10\r\nKPX amacron v -15\r\nKPX amacron w -15\r\nKPX amacron y -20\r\nKPX amacron yacute -20\r\nKPX amacron ydieresis -20\r\nKPX aogonek g -10\r\nKPX aogonek gbreve -10\r\nKPX aogonek gcommaaccent -10\r\nKPX aogonek v -15\r\nKPX aogonek w -15\r\nKPX aogonek y -20\r\nKPX aogonek yacute -20\r\nKPX aogonek ydieresis -20\r\nKPX aring g -10\r\nKPX aring gbreve -10\r\nKPX aring gcommaaccent -10\r\nKPX aring v -15\r\nKPX aring w -15\r\nKPX aring y -20\r\nKPX aring yacute -20\r\nKPX aring ydieresis -20\r\nKPX atilde g -10\r\nKPX atilde gbreve -10\r\nKPX atilde gcommaaccent -10\r\nKPX atilde v -15\r\nKPX atilde w -15\r\nKPX atilde y -20\r\nKPX atilde yacute -20\r\nKPX atilde ydieresis -20\r\nKPX b l -10\r\nKPX b lacute -10\r\nKPX b lcommaaccent -10\r\nKPX b lslash -10\r\nKPX b u -20\r\nKPX b uacute -20\r\nKPX b ucircumflex -20\r\nKPX b udieresis -20\r\nKPX b ugrave -20\r\nKPX b uhungarumlaut -20\r\nKPX b umacron -20\r\nKPX b uogonek -20\r\nKPX b uring -20\r\nKPX b v -20\r\nKPX b y -20\r\nKPX b yacute -20\r\nKPX b ydieresis -20\r\nKPX c h -10\r\nKPX c k -20\r\nKPX c kcommaaccent -20\r\nKPX c l -20\r\nKPX c lacute -20\r\nKPX c lcommaaccent -20\r\nKPX c lslash -20\r\nKPX c y -10\r\nKPX c yacute -10\r\nKPX c ydieresis -10\r\nKPX cacute h -10\r\nKPX cacute k -20\r\nKPX cacute kcommaaccent -20\r\nKPX cacute l -20\r\nKPX cacute lacute -20\r\nKPX cacute lcommaaccent -20\r\nKPX cacute lslash -20\r\nKPX cacute y -10\r\nKPX cacute yacute -10\r\nKPX cacute ydieresis -10\r\nKPX ccaron h -10\r\nKPX ccaron k -20\r\nKPX ccaron kcommaaccent -20\r\nKPX ccaron l -20\r\nKPX ccaron lacute -20\r\nKPX ccaron lcommaaccent -20\r\nKPX ccaron lslash -20\r\nKPX ccaron y -10\r\nKPX ccaron yacute -10\r\nKPX ccaron ydieresis -10\r\nKPX ccedilla h -10\r\nKPX ccedilla k -20\r\nKPX ccedilla kcommaaccent -20\r\nKPX ccedilla l -20\r\nKPX ccedilla lacute -20\r\nKPX ccedilla lcommaaccent -20\r\nKPX ccedilla lslash -20\r\nKPX ccedilla y -10\r\nKPX ccedilla yacute -10\r\nKPX ccedilla ydieresis -10\r\nKPX colon space -40\r\nKPX comma quotedblright -120\r\nKPX comma quoteright -120\r\nKPX comma space -40\r\nKPX d d -10\r\nKPX d dcroat -10\r\nKPX d v -15\r\nKPX d w -15\r\nKPX d y -15\r\nKPX d yacute -15\r\nKPX d ydieresis -15\r\nKPX dcroat d -10\r\nKPX dcroat dcroat -10\r\nKPX dcroat v -15\r\nKPX dcroat w -15\r\nKPX dcroat y -15\r\nKPX dcroat yacute -15\r\nKPX dcroat ydieresis -15\r\nKPX e comma 10\r\nKPX e period 20\r\nKPX e v -15\r\nKPX e w -15\r\nKPX e x -15\r\nKPX e y -15\r\nKPX e yacute -15\r\nKPX e ydieresis -15\r\nKPX eacute comma 10\r\nKPX eacute period 20\r\nKPX eacute v -15\r\nKPX eacute w -15\r\nKPX eacute x -15\r\nKPX eacute y -15\r\nKPX eacute yacute -15\r\nKPX eacute ydieresis -15\r\nKPX ecaron comma 10\r\nKPX ecaron period 20\r\nKPX ecaron v -15\r\nKPX ecaron w -15\r\nKPX ecaron x -15\r\nKPX ecaron y -15\r\nKPX ecaron yacute -15\r\nKPX ecaron ydieresis -15\r\nKPX ecircumflex comma 10\r\nKPX ecircumflex period 20\r\nKPX ecircumflex v -15\r\nKPX ecircumflex w -15\r\nKPX ecircumflex x -15\r\nKPX ecircumflex y -15\r\nKPX ecircumflex yacute -15\r\nKPX ecircumflex ydieresis -15\r\nKPX edieresis comma 10\r\nKPX edieresis period 20\r\nKPX edieresis v -15\r\nKPX edieresis w -15\r\nKPX edieresis x -15\r\nKPX edieresis y -15\r\nKPX edieresis yacute -15\r\nKPX edieresis ydieresis -15\r\nKPX edotaccent comma 10\r\nKPX edotaccent period 20\r\nKPX edotaccent v -15\r\nKPX edotaccent w -15\r\nKPX edotaccent x -15\r\nKPX edotaccent y -15\r\nKPX edotaccent yacute -15\r\nKPX edotaccent ydieresis -15\r\nKPX egrave comma 10\r\nKPX egrave period 20\r\nKPX egrave v -15\r\nKPX egrave w -15\r\nKPX egrave x -15\r\nKPX egrave y -15\r\nKPX egrave yacute -15\r\nKPX egrave ydieresis -15\r\nKPX emacron comma 10\r\nKPX emacron period 20\r\nKPX emacron v -15\r\nKPX emacron w -15\r\nKPX emacron x -15\r\nKPX emacron y -15\r\nKPX emacron yacute -15\r\nKPX emacron ydieresis -15\r\nKPX eogonek comma 10\r\nKPX eogonek period 20\r\nKPX eogonek v -15\r\nKPX eogonek w -15\r\nKPX eogonek x -15\r\nKPX eogonek y -15\r\nKPX eogonek yacute -15\r\nKPX eogonek ydieresis -15\r\nKPX f comma -10\r\nKPX f e -10\r\nKPX f eacute -10\r\nKPX f ecaron -10\r\nKPX f ecircumflex -10\r\nKPX f edieresis -10\r\nKPX f edotaccent -10\r\nKPX f egrave -10\r\nKPX f emacron -10\r\nKPX f eogonek -10\r\nKPX f o -20\r\nKPX f oacute -20\r\nKPX f ocircumflex -20\r\nKPX f odieresis -20\r\nKPX f ograve -20\r\nKPX f ohungarumlaut -20\r\nKPX f omacron -20\r\nKPX f oslash -20\r\nKPX f otilde -20\r\nKPX f period -10\r\nKPX f quotedblright 30\r\nKPX f quoteright 30\r\nKPX g e 10\r\nKPX g eacute 10\r\nKPX g ecaron 10\r\nKPX g ecircumflex 10\r\nKPX g edieresis 10\r\nKPX g edotaccent 10\r\nKPX g egrave 10\r\nKPX g emacron 10\r\nKPX g eogonek 10\r\nKPX g g -10\r\nKPX g gbreve -10\r\nKPX g gcommaaccent -10\r\nKPX gbreve e 10\r\nKPX gbreve eacute 10\r\nKPX gbreve ecaron 10\r\nKPX gbreve ecircumflex 10\r\nKPX gbreve edieresis 10\r\nKPX gbreve edotaccent 10\r\nKPX gbreve egrave 10\r\nKPX gbreve emacron 10\r\nKPX gbreve eogonek 10\r\nKPX gbreve g -10\r\nKPX gbreve gbreve -10\r\nKPX gbreve gcommaaccent -10\r\nKPX gcommaaccent e 10\r\nKPX gcommaaccent eacute 10\r\nKPX gcommaaccent ecaron 10\r\nKPX gcommaaccent ecircumflex 10\r\nKPX gcommaaccent edieresis 10\r\nKPX gcommaaccent edotaccent 10\r\nKPX gcommaaccent egrave 10\r\nKPX gcommaaccent emacron 10\r\nKPX gcommaaccent eogonek 10\r\nKPX gcommaaccent g -10\r\nKPX gcommaaccent gbreve -10\r\nKPX gcommaaccent gcommaaccent -10\r\nKPX h y -20\r\nKPX h yacute -20\r\nKPX h ydieresis -20\r\nKPX k o -15\r\nKPX k oacute -15\r\nKPX k ocircumflex -15\r\nKPX k odieresis -15\r\nKPX k ograve -15\r\nKPX k ohungarumlaut -15\r\nKPX k omacron -15\r\nKPX k oslash -15\r\nKPX k otilde -15\r\nKPX kcommaaccent o -15\r\nKPX kcommaaccent oacute -15\r\nKPX kcommaaccent ocircumflex -15\r\nKPX kcommaaccent odieresis -15\r\nKPX kcommaaccent ograve -15\r\nKPX kcommaaccent ohungarumlaut -15\r\nKPX kcommaaccent omacron -15\r\nKPX kcommaaccent oslash -15\r\nKPX kcommaaccent otilde -15\r\nKPX l w -15\r\nKPX l y -15\r\nKPX l yacute -15\r\nKPX l ydieresis -15\r\nKPX lacute w -15\r\nKPX lacute y -15\r\nKPX lacute yacute -15\r\nKPX lacute ydieresis -15\r\nKPX lcommaaccent w -15\r\nKPX lcommaaccent y -15\r\nKPX lcommaaccent yacute -15\r\nKPX lcommaaccent ydieresis -15\r\nKPX lslash w -15\r\nKPX lslash y -15\r\nKPX lslash yacute -15\r\nKPX lslash ydieresis -15\r\nKPX m u -20\r\nKPX m uacute -20\r\nKPX m ucircumflex -20\r\nKPX m udieresis -20\r\nKPX m ugrave -20\r\nKPX m uhungarumlaut -20\r\nKPX m umacron -20\r\nKPX m uogonek -20\r\nKPX m uring -20\r\nKPX m y -30\r\nKPX m yacute -30\r\nKPX m ydieresis -30\r\nKPX n u -10\r\nKPX n uacute -10\r\nKPX n ucircumflex -10\r\nKPX n udieresis -10\r\nKPX n ugrave -10\r\nKPX n uhungarumlaut -10\r\nKPX n umacron -10\r\nKPX n uogonek -10\r\nKPX n uring -10\r\nKPX n v -40\r\nKPX n y -20\r\nKPX n yacute -20\r\nKPX n ydieresis -20\r\nKPX nacute u -10\r\nKPX nacute uacute -10\r\nKPX nacute ucircumflex -10\r\nKPX nacute udieresis -10\r\nKPX nacute ugrave -10\r\nKPX nacute uhungarumlaut -10\r\nKPX nacute umacron -10\r\nKPX nacute uogonek -10\r\nKPX nacute uring -10\r\nKPX nacute v -40\r\nKPX nacute y -20\r\nKPX nacute yacute -20\r\nKPX nacute ydieresis -20\r\nKPX ncaron u -10\r\nKPX ncaron uacute -10\r\nKPX ncaron ucircumflex -10\r\nKPX ncaron udieresis -10\r\nKPX ncaron ugrave -10\r\nKPX ncaron uhungarumlaut -10\r\nKPX ncaron umacron -10\r\nKPX ncaron uogonek -10\r\nKPX ncaron uring -10\r\nKPX ncaron v -40\r\nKPX ncaron y -20\r\nKPX ncaron yacute -20\r\nKPX ncaron ydieresis -20\r\nKPX ncommaaccent u -10\r\nKPX ncommaaccent uacute -10\r\nKPX ncommaaccent ucircumflex -10\r\nKPX ncommaaccent udieresis -10\r\nKPX ncommaaccent ugrave -10\r\nKPX ncommaaccent uhungarumlaut -10\r\nKPX ncommaaccent umacron -10\r\nKPX ncommaaccent uogonek -10\r\nKPX ncommaaccent uring -10\r\nKPX ncommaaccent v -40\r\nKPX ncommaaccent y -20\r\nKPX ncommaaccent yacute -20\r\nKPX ncommaaccent ydieresis -20\r\nKPX ntilde u -10\r\nKPX ntilde uacute -10\r\nKPX ntilde ucircumflex -10\r\nKPX ntilde udieresis -10\r\nKPX ntilde ugrave -10\r\nKPX ntilde uhungarumlaut -10\r\nKPX ntilde umacron -10\r\nKPX ntilde uogonek -10\r\nKPX ntilde uring -10\r\nKPX ntilde v -40\r\nKPX ntilde y -20\r\nKPX ntilde yacute -20\r\nKPX ntilde ydieresis -20\r\nKPX o v -20\r\nKPX o w -15\r\nKPX o x -30\r\nKPX o y -20\r\nKPX o yacute -20\r\nKPX o ydieresis -20\r\nKPX oacute v -20\r\nKPX oacute w -15\r\nKPX oacute x -30\r\nKPX oacute y -20\r\nKPX oacute yacute -20\r\nKPX oacute ydieresis -20\r\nKPX ocircumflex v -20\r\nKPX ocircumflex w -15\r\nKPX ocircumflex x -30\r\nKPX ocircumflex y -20\r\nKPX ocircumflex yacute -20\r\nKPX ocircumflex ydieresis -20\r\nKPX odieresis v -20\r\nKPX odieresis w -15\r\nKPX odieresis x -30\r\nKPX odieresis y -20\r\nKPX odieresis yacute -20\r\nKPX odieresis ydieresis -20\r\nKPX ograve v -20\r\nKPX ograve w -15\r\nKPX ograve x -30\r\nKPX ograve y -20\r\nKPX ograve yacute -20\r\nKPX ograve ydieresis -20\r\nKPX ohungarumlaut v -20\r\nKPX ohungarumlaut w -15\r\nKPX ohungarumlaut x -30\r\nKPX ohungarumlaut y -20\r\nKPX ohungarumlaut yacute -20\r\nKPX ohungarumlaut ydieresis -20\r\nKPX omacron v -20\r\nKPX omacron w -15\r\nKPX omacron x -30\r\nKPX omacron y -20\r\nKPX omacron yacute -20\r\nKPX omacron ydieresis -20\r\nKPX oslash v -20\r\nKPX oslash w -15\r\nKPX oslash x -30\r\nKPX oslash y -20\r\nKPX oslash yacute -20\r\nKPX oslash ydieresis -20\r\nKPX otilde v -20\r\nKPX otilde w -15\r\nKPX otilde x -30\r\nKPX otilde y -20\r\nKPX otilde yacute -20\r\nKPX otilde ydieresis -20\r\nKPX p y -15\r\nKPX p yacute -15\r\nKPX p ydieresis -15\r\nKPX period quotedblright -120\r\nKPX period quoteright -120\r\nKPX period space -40\r\nKPX quotedblright space -80\r\nKPX quoteleft quoteleft -46\r\nKPX quoteright d -80\r\nKPX quoteright dcroat -80\r\nKPX quoteright l -20\r\nKPX quoteright lacute -20\r\nKPX quoteright lcommaaccent -20\r\nKPX quoteright lslash -20\r\nKPX quoteright quoteright -46\r\nKPX quoteright r -40\r\nKPX quoteright racute -40\r\nKPX quoteright rcaron -40\r\nKPX quoteright rcommaaccent -40\r\nKPX quoteright s -60\r\nKPX quoteright sacute -60\r\nKPX quoteright scaron -60\r\nKPX quoteright scedilla -60\r\nKPX quoteright scommaaccent -60\r\nKPX quoteright space -80\r\nKPX quoteright v -20\r\nKPX r c -20\r\nKPX r cacute -20\r\nKPX r ccaron -20\r\nKPX r ccedilla -20\r\nKPX r comma -60\r\nKPX r d -20\r\nKPX r dcroat -20\r\nKPX r g -15\r\nKPX r gbreve -15\r\nKPX r gcommaaccent -15\r\nKPX r hyphen -20\r\nKPX r o -20\r\nKPX r oacute -20\r\nKPX r ocircumflex -20\r\nKPX r odieresis -20\r\nKPX r ograve -20\r\nKPX r ohungarumlaut -20\r\nKPX r omacron -20\r\nKPX r oslash -20\r\nKPX r otilde -20\r\nKPX r period -60\r\nKPX r q -20\r\nKPX r s -15\r\nKPX r sacute -15\r\nKPX r scaron -15\r\nKPX r scedilla -15\r\nKPX r scommaaccent -15\r\nKPX r t 20\r\nKPX r tcommaaccent 20\r\nKPX r v 10\r\nKPX r y 10\r\nKPX r yacute 10\r\nKPX r ydieresis 10\r\nKPX racute c -20\r\nKPX racute cacute -20\r\nKPX racute ccaron -20\r\nKPX racute ccedilla -20\r\nKPX racute comma -60\r\nKPX racute d -20\r\nKPX racute dcroat -20\r\nKPX racute g -15\r\nKPX racute gbreve -15\r\nKPX racute gcommaaccent -15\r\nKPX racute hyphen -20\r\nKPX racute o -20\r\nKPX racute oacute -20\r\nKPX racute ocircumflex -20\r\nKPX racute odieresis -20\r\nKPX racute ograve -20\r\nKPX racute ohungarumlaut -20\r\nKPX racute omacron -20\r\nKPX racute oslash -20\r\nKPX racute otilde -20\r\nKPX racute period -60\r\nKPX racute q -20\r\nKPX racute s -15\r\nKPX racute sacute -15\r\nKPX racute scaron -15\r\nKPX racute scedilla -15\r\nKPX racute scommaaccent -15\r\nKPX racute t 20\r\nKPX racute tcommaaccent 20\r\nKPX racute v 10\r\nKPX racute y 10\r\nKPX racute yacute 10\r\nKPX racute ydieresis 10\r\nKPX rcaron c -20\r\nKPX rcaron cacute -20\r\nKPX rcaron ccaron -20\r\nKPX rcaron ccedilla -20\r\nKPX rcaron comma -60\r\nKPX rcaron d -20\r\nKPX rcaron dcroat -20\r\nKPX rcaron g -15\r\nKPX rcaron gbreve -15\r\nKPX rcaron gcommaaccent -15\r\nKPX rcaron hyphen -20\r\nKPX rcaron o -20\r\nKPX rcaron oacute -20\r\nKPX rcaron ocircumflex -20\r\nKPX rcaron odieresis -20\r\nKPX rcaron ograve -20\r\nKPX rcaron ohungarumlaut -20\r\nKPX rcaron omacron -20\r\nKPX rcaron oslash -20\r\nKPX rcaron otilde -20\r\nKPX rcaron period -60\r\nKPX rcaron q -20\r\nKPX rcaron s -15\r\nKPX rcaron sacute -15\r\nKPX rcaron scaron -15\r\nKPX rcaron scedilla -15\r\nKPX rcaron scommaaccent -15\r\nKPX rcaron t 20\r\nKPX rcaron tcommaaccent 20\r\nKPX rcaron v 10\r\nKPX rcaron y 10\r\nKPX rcaron yacute 10\r\nKPX rcaron ydieresis 10\r\nKPX rcommaaccent c -20\r\nKPX rcommaaccent cacute -20\r\nKPX rcommaaccent ccaron -20\r\nKPX rcommaaccent ccedilla -20\r\nKPX rcommaaccent comma -60\r\nKPX rcommaaccent d -20\r\nKPX rcommaaccent dcroat -20\r\nKPX rcommaaccent g -15\r\nKPX rcommaaccent gbreve -15\r\nKPX rcommaaccent gcommaaccent -15\r\nKPX rcommaaccent hyphen -20\r\nKPX rcommaaccent o -20\r\nKPX rcommaaccent oacute -20\r\nKPX rcommaaccent ocircumflex -20\r\nKPX rcommaaccent odieresis -20\r\nKPX rcommaaccent ograve -20\r\nKPX rcommaaccent ohungarumlaut -20\r\nKPX rcommaaccent omacron -20\r\nKPX rcommaaccent oslash -20\r\nKPX rcommaaccent otilde -20\r\nKPX rcommaaccent period -60\r\nKPX rcommaaccent q -20\r\nKPX rcommaaccent s -15\r\nKPX rcommaaccent sacute -15\r\nKPX rcommaaccent scaron -15\r\nKPX rcommaaccent scedilla -15\r\nKPX rcommaaccent scommaaccent -15\r\nKPX rcommaaccent t 20\r\nKPX rcommaaccent tcommaaccent 20\r\nKPX rcommaaccent v 10\r\nKPX rcommaaccent y 10\r\nKPX rcommaaccent yacute 10\r\nKPX rcommaaccent ydieresis 10\r\nKPX s w -15\r\nKPX sacute w -15\r\nKPX scaron w -15\r\nKPX scedilla w -15\r\nKPX scommaaccent w -15\r\nKPX semicolon space -40\r\nKPX space T -100\r\nKPX space Tcaron -100\r\nKPX space Tcommaaccent -100\r\nKPX space V -80\r\nKPX space W -80\r\nKPX space Y -120\r\nKPX space Yacute -120\r\nKPX space Ydieresis -120\r\nKPX space quotedblleft -80\r\nKPX space quoteleft -60\r\nKPX v a -20\r\nKPX v aacute -20\r\nKPX v abreve -20\r\nKPX v acircumflex -20\r\nKPX v adieresis -20\r\nKPX v agrave -20\r\nKPX v amacron -20\r\nKPX v aogonek -20\r\nKPX v aring -20\r\nKPX v atilde -20\r\nKPX v comma -80\r\nKPX v o -30\r\nKPX v oacute -30\r\nKPX v ocircumflex -30\r\nKPX v odieresis -30\r\nKPX v ograve -30\r\nKPX v ohungarumlaut -30\r\nKPX v omacron -30\r\nKPX v oslash -30\r\nKPX v otilde -30\r\nKPX v period -80\r\nKPX w comma -40\r\nKPX w o -20\r\nKPX w oacute -20\r\nKPX w ocircumflex -20\r\nKPX w odieresis -20\r\nKPX w ograve -20\r\nKPX w ohungarumlaut -20\r\nKPX w omacron -20\r\nKPX w oslash -20\r\nKPX w otilde -20\r\nKPX w period -40\r\nKPX x e -10\r\nKPX x eacute -10\r\nKPX x ecaron -10\r\nKPX x ecircumflex -10\r\nKPX x edieresis -10\r\nKPX x edotaccent -10\r\nKPX x egrave -10\r\nKPX x emacron -10\r\nKPX x eogonek -10\r\nKPX y a -30\r\nKPX y aacute -30\r\nKPX y abreve -30\r\nKPX y acircumflex -30\r\nKPX y adieresis -30\r\nKPX y agrave -30\r\nKPX y amacron -30\r\nKPX y aogonek -30\r\nKPX y aring -30\r\nKPX y atilde -30\r\nKPX y comma -80\r\nKPX y e -10\r\nKPX y eacute -10\r\nKPX y ecaron -10\r\nKPX y ecircumflex -10\r\nKPX y edieresis -10\r\nKPX y edotaccent -10\r\nKPX y egrave -10\r\nKPX y emacron -10\r\nKPX y eogonek -10\r\nKPX y o -25\r\nKPX y oacute -25\r\nKPX y ocircumflex -25\r\nKPX y odieresis -25\r\nKPX y ograve -25\r\nKPX y ohungarumlaut -25\r\nKPX y omacron -25\r\nKPX y oslash -25\r\nKPX y otilde -25\r\nKPX y period -80\r\nKPX yacute a -30\r\nKPX yacute aacute -30\r\nKPX yacute abreve -30\r\nKPX yacute acircumflex -30\r\nKPX yacute adieresis -30\r\nKPX yacute agrave -30\r\nKPX yacute amacron -30\r\nKPX yacute aogonek -30\r\nKPX yacute aring -30\r\nKPX yacute atilde -30\r\nKPX yacute comma -80\r\nKPX yacute e -10\r\nKPX yacute eacute -10\r\nKPX yacute ecaron -10\r\nKPX yacute ecircumflex -10\r\nKPX yacute edieresis -10\r\nKPX yacute edotaccent -10\r\nKPX yacute egrave -10\r\nKPX yacute emacron -10\r\nKPX yacute eogonek -10\r\nKPX yacute o -25\r\nKPX yacute oacute -25\r\nKPX yacute ocircumflex -25\r\nKPX yacute odieresis -25\r\nKPX yacute ograve -25\r\nKPX yacute ohungarumlaut -25\r\nKPX yacute omacron -25\r\nKPX yacute oslash -25\r\nKPX yacute otilde -25\r\nKPX yacute period -80\r\nKPX ydieresis a -30\r\nKPX ydieresis aacute -30\r\nKPX ydieresis abreve -30\r\nKPX ydieresis acircumflex -30\r\nKPX ydieresis adieresis -30\r\nKPX ydieresis agrave -30\r\nKPX ydieresis amacron -30\r\nKPX ydieresis aogonek -30\r\nKPX ydieresis aring -30\r\nKPX ydieresis atilde -30\r\nKPX ydieresis comma -80\r\nKPX ydieresis e -10\r\nKPX ydieresis eacute -10\r\nKPX ydieresis ecaron -10\r\nKPX ydieresis ecircumflex -10\r\nKPX ydieresis edieresis -10\r\nKPX ydieresis edotaccent -10\r\nKPX ydieresis egrave -10\r\nKPX ydieresis emacron -10\r\nKPX ydieresis eogonek -10\r\nKPX ydieresis o -25\r\nKPX ydieresis oacute -25\r\nKPX ydieresis ocircumflex -25\r\nKPX ydieresis odieresis -25\r\nKPX ydieresis ograve -25\r\nKPX ydieresis ohungarumlaut -25\r\nKPX ydieresis omacron -25\r\nKPX ydieresis oslash -25\r\nKPX ydieresis otilde -25\r\nKPX ydieresis period -80\r\nKPX z e 10\r\nKPX z eacute 10\r\nKPX z ecaron 10\r\nKPX z ecircumflex 10\r\nKPX z edieresis 10\r\nKPX z edotaccent 10\r\nKPX z egrave 10\r\nKPX z emacron 10\r\nKPX z eogonek 10\r\nKPX zacute e 10\r\nKPX zacute eacute 10\r\nKPX zacute ecaron 10\r\nKPX zacute ecircumflex 10\r\nKPX zacute edieresis 10\r\nKPX zacute edotaccent 10\r\nKPX zacute egrave 10\r\nKPX zacute emacron 10\r\nKPX zacute eogonek 10\r\nKPX zcaron e 10\r\nKPX zcaron eacute 10\r\nKPX zcaron ecaron 10\r\nKPX zcaron ecircumflex 10\r\nKPX zcaron edieresis 10\r\nKPX zcaron edotaccent 10\r\nKPX zcaron egrave 10\r\nKPX zcaron emacron 10\r\nKPX zcaron eogonek 10\r\nKPX zdotaccent e 10\r\nKPX zdotaccent eacute 10\r\nKPX zdotaccent ecaron 10\r\nKPX zdotaccent ecircumflex 10\r\nKPX zdotaccent edieresis 10\r\nKPX zdotaccent edotaccent 10\r\nKPX zdotaccent egrave 10\r\nKPX zdotaccent emacron 10\r\nKPX zdotaccent eogonek 10\r\nEndKernPairs\r\nEndKernData\r\nEndFontMetrics\r\n",
  'Helvetica-Oblique.afm': "StartFontMetrics 4.1\r\nComment Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated.  All Rights Reserved.\r\nComment Creation Date: Thu May  1 12:44:31 1997\r\nComment UniqueID 43055\r\nComment VMusage 14960 69346\r\nFontName Helvetica-Oblique\r\nFullName Helvetica Oblique\r\nFamilyName Helvetica\r\nWeight Medium\r\nItalicAngle -12\r\nIsFixedPitch false\r\nCharacterSet ExtendedRoman\r\nFontBBox -170 -225 1116 931 \r\nUnderlinePosition -100\r\nUnderlineThickness 50\r\nVersion 002.000\r\nNotice Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated.  All Rights Reserved.Helvetica is a trademark of Linotype-Hell AG and/or its subsidiaries.\r\nEncodingScheme AdobeStandardEncoding\r\nCapHeight 718\r\nXHeight 523\r\nAscender 718\r\nDescender -207\r\nStdHW 76\r\nStdVW 88\r\nStartCharMetrics 315\r\nC 32 ; WX 278 ; N space ; B 0 0 0 0 ;\r\nC 33 ; WX 278 ; N exclam ; B 90 0 340 718 ;\r\nC 34 ; WX 355 ; N quotedbl ; B 168 463 438 718 ;\r\nC 35 ; WX 556 ; N numbersign ; B 73 0 631 688 ;\r\nC 36 ; WX 556 ; N dollar ; B 69 -115 617 775 ;\r\nC 37 ; WX 889 ; N percent ; B 147 -19 889 703 ;\r\nC 38 ; WX 667 ; N ampersand ; B 77 -15 647 718 ;\r\nC 39 ; WX 222 ; N quoteright ; B 151 463 310 718 ;\r\nC 40 ; WX 333 ; N parenleft ; B 108 -207 454 733 ;\r\nC 41 ; WX 333 ; N parenright ; B -9 -207 337 733 ;\r\nC 42 ; WX 389 ; N asterisk ; B 165 431 475 718 ;\r\nC 43 ; WX 584 ; N plus ; B 85 0 606 505 ;\r\nC 44 ; WX 278 ; N comma ; B 56 -147 214 106 ;\r\nC 45 ; WX 333 ; N hyphen ; B 93 232 357 322 ;\r\nC 46 ; WX 278 ; N period ; B 87 0 214 106 ;\r\nC 47 ; WX 278 ; N slash ; B -21 -19 452 737 ;\r\nC 48 ; WX 556 ; N zero ; B 93 -19 608 703 ;\r\nC 49 ; WX 556 ; N one ; B 207 0 508 703 ;\r\nC 50 ; WX 556 ; N two ; B 26 0 617 703 ;\r\nC 51 ; WX 556 ; N three ; B 75 -19 610 703 ;\r\nC 52 ; WX 556 ; N four ; B 61 0 576 703 ;\r\nC 53 ; WX 556 ; N five ; B 68 -19 621 688 ;\r\nC 54 ; WX 556 ; N six ; B 91 -19 615 703 ;\r\nC 55 ; WX 556 ; N seven ; B 137 0 669 688 ;\r\nC 56 ; WX 556 ; N eight ; B 74 -19 607 703 ;\r\nC 57 ; WX 556 ; N nine ; B 82 -19 609 703 ;\r\nC 58 ; WX 278 ; N colon ; B 87 0 301 516 ;\r\nC 59 ; WX 278 ; N semicolon ; B 56 -147 301 516 ;\r\nC 60 ; WX 584 ; N less ; B 94 11 641 495 ;\r\nC 61 ; WX 584 ; N equal ; B 63 115 628 390 ;\r\nC 62 ; WX 584 ; N greater ; B 50 11 597 495 ;\r\nC 63 ; WX 556 ; N question ; B 161 0 610 727 ;\r\nC 64 ; WX 1015 ; N at ; B 215 -19 965 737 ;\r\nC 65 ; WX 667 ; N A ; B 14 0 654 718 ;\r\nC 66 ; WX 667 ; N B ; B 74 0 712 718 ;\r\nC 67 ; WX 722 ; N C ; B 108 -19 782 737 ;\r\nC 68 ; WX 722 ; N D ; B 81 0 764 718 ;\r\nC 69 ; WX 667 ; N E ; B 86 0 762 718 ;\r\nC 70 ; WX 611 ; N F ; B 86 0 736 718 ;\r\nC 71 ; WX 778 ; N G ; B 111 -19 799 737 ;\r\nC 72 ; WX 722 ; N H ; B 77 0 799 718 ;\r\nC 73 ; WX 278 ; N I ; B 91 0 341 718 ;\r\nC 74 ; WX 500 ; N J ; B 47 -19 581 718 ;\r\nC 75 ; WX 667 ; N K ; B 76 0 808 718 ;\r\nC 76 ; WX 556 ; N L ; B 76 0 555 718 ;\r\nC 77 ; WX 833 ; N M ; B 73 0 914 718 ;\r\nC 78 ; WX 722 ; N N ; B 76 0 799 718 ;\r\nC 79 ; WX 778 ; N O ; B 105 -19 826 737 ;\r\nC 80 ; WX 667 ; N P ; B 86 0 737 718 ;\r\nC 81 ; WX 778 ; N Q ; B 105 -56 826 737 ;\r\nC 82 ; WX 722 ; N R ; B 88 0 773 718 ;\r\nC 83 ; WX 667 ; N S ; B 90 -19 713 737 ;\r\nC 84 ; WX 611 ; N T ; B 148 0 750 718 ;\r\nC 85 ; WX 722 ; N U ; B 123 -19 797 718 ;\r\nC 86 ; WX 667 ; N V ; B 173 0 800 718 ;\r\nC 87 ; WX 944 ; N W ; B 169 0 1081 718 ;\r\nC 88 ; WX 667 ; N X ; B 19 0 790 718 ;\r\nC 89 ; WX 667 ; N Y ; B 167 0 806 718 ;\r\nC 90 ; WX 611 ; N Z ; B 23 0 741 718 ;\r\nC 91 ; WX 278 ; N bracketleft ; B 21 -196 403 722 ;\r\nC 92 ; WX 278 ; N backslash ; B 140 -19 291 737 ;\r\nC 93 ; WX 278 ; N bracketright ; B -14 -196 368 722 ;\r\nC 94 ; WX 469 ; N asciicircum ; B 42 264 539 688 ;\r\nC 95 ; WX 556 ; N underscore ; B -27 -125 540 -75 ;\r\nC 96 ; WX 222 ; N quoteleft ; B 165 470 323 725 ;\r\nC 97 ; WX 556 ; N a ; B 61 -15 559 538 ;\r\nC 98 ; WX 556 ; N b ; B 58 -15 584 718 ;\r\nC 99 ; WX 500 ; N c ; B 74 -15 553 538 ;\r\nC 100 ; WX 556 ; N d ; B 84 -15 652 718 ;\r\nC 101 ; WX 556 ; N e ; B 84 -15 578 538 ;\r\nC 102 ; WX 278 ; N f ; B 86 0 416 728 ; L i fi ; L l fl ;\r\nC 103 ; WX 556 ; N g ; B 42 -220 610 538 ;\r\nC 104 ; WX 556 ; N h ; B 65 0 573 718 ;\r\nC 105 ; WX 222 ; N i ; B 67 0 308 718 ;\r\nC 106 ; WX 222 ; N j ; B -60 -210 308 718 ;\r\nC 107 ; WX 500 ; N k ; B 67 0 600 718 ;\r\nC 108 ; WX 222 ; N l ; B 67 0 308 718 ;\r\nC 109 ; WX 833 ; N m ; B 65 0 852 538 ;\r\nC 110 ; WX 556 ; N n ; B 65 0 573 538 ;\r\nC 111 ; WX 556 ; N o ; B 83 -14 585 538 ;\r\nC 112 ; WX 556 ; N p ; B 14 -207 584 538 ;\r\nC 113 ; WX 556 ; N q ; B 84 -207 605 538 ;\r\nC 114 ; WX 333 ; N r ; B 77 0 446 538 ;\r\nC 115 ; WX 500 ; N s ; B 63 -15 529 538 ;\r\nC 116 ; WX 278 ; N t ; B 102 -7 368 669 ;\r\nC 117 ; WX 556 ; N u ; B 94 -15 600 523 ;\r\nC 118 ; WX 500 ; N v ; B 119 0 603 523 ;\r\nC 119 ; WX 722 ; N w ; B 125 0 820 523 ;\r\nC 120 ; WX 500 ; N x ; B 11 0 594 523 ;\r\nC 121 ; WX 500 ; N y ; B 15 -214 600 523 ;\r\nC 122 ; WX 500 ; N z ; B 31 0 571 523 ;\r\nC 123 ; WX 334 ; N braceleft ; B 92 -196 445 722 ;\r\nC 124 ; WX 260 ; N bar ; B 46 -225 332 775 ;\r\nC 125 ; WX 334 ; N braceright ; B 0 -196 354 722 ;\r\nC 126 ; WX 584 ; N asciitilde ; B 111 180 580 326 ;\r\nC 161 ; WX 333 ; N exclamdown ; B 77 -195 326 523 ;\r\nC 162 ; WX 556 ; N cent ; B 95 -115 584 623 ;\r\nC 163 ; WX 556 ; N sterling ; B 49 -16 634 718 ;\r\nC 164 ; WX 167 ; N fraction ; B -170 -19 482 703 ;\r\nC 165 ; WX 556 ; N yen ; B 81 0 699 688 ;\r\nC 166 ; WX 556 ; N florin ; B -52 -207 654 737 ;\r\nC 167 ; WX 556 ; N section ; B 76 -191 584 737 ;\r\nC 168 ; WX 556 ; N currency ; B 60 99 646 603 ;\r\nC 169 ; WX 191 ; N quotesingle ; B 157 463 285 718 ;\r\nC 170 ; WX 333 ; N quotedblleft ; B 138 470 461 725 ;\r\nC 171 ; WX 556 ; N guillemotleft ; B 146 108 554 446 ;\r\nC 172 ; WX 333 ; N guilsinglleft ; B 137 108 340 446 ;\r\nC 173 ; WX 333 ; N guilsinglright ; B 111 108 314 446 ;\r\nC 174 ; WX 500 ; N fi ; B 86 0 587 728 ;\r\nC 175 ; WX 500 ; N fl ; B 86 0 585 728 ;\r\nC 177 ; WX 556 ; N endash ; B 51 240 623 313 ;\r\nC 178 ; WX 556 ; N dagger ; B 135 -159 622 718 ;\r\nC 179 ; WX 556 ; N daggerdbl ; B 52 -159 623 718 ;\r\nC 180 ; WX 278 ; N periodcentered ; B 129 190 257 315 ;\r\nC 182 ; WX 537 ; N paragraph ; B 126 -173 650 718 ;\r\nC 183 ; WX 350 ; N bullet ; B 91 202 413 517 ;\r\nC 184 ; WX 222 ; N quotesinglbase ; B 21 -149 180 106 ;\r\nC 185 ; WX 333 ; N quotedblbase ; B -6 -149 318 106 ;\r\nC 186 ; WX 333 ; N quotedblright ; B 124 463 448 718 ;\r\nC 187 ; WX 556 ; N guillemotright ; B 120 108 528 446 ;\r\nC 188 ; WX 1000 ; N ellipsis ; B 115 0 908 106 ;\r\nC 189 ; WX 1000 ; N perthousand ; B 88 -19 1029 703 ;\r\nC 191 ; WX 611 ; N questiondown ; B 85 -201 534 525 ;\r\nC 193 ; WX 333 ; N grave ; B 170 593 337 734 ;\r\nC 194 ; WX 333 ; N acute ; B 248 593 475 734 ;\r\nC 195 ; WX 333 ; N circumflex ; B 147 593 438 734 ;\r\nC 196 ; WX 333 ; N tilde ; B 125 606 490 722 ;\r\nC 197 ; WX 333 ; N macron ; B 143 627 468 684 ;\r\nC 198 ; WX 333 ; N breve ; B 167 595 476 731 ;\r\nC 199 ; WX 333 ; N dotaccent ; B 249 604 362 706 ;\r\nC 200 ; WX 333 ; N dieresis ; B 168 604 443 706 ;\r\nC 202 ; WX 333 ; N ring ; B 214 572 402 756 ;\r\nC 203 ; WX 333 ; N cedilla ; B 2 -225 232 0 ;\r\nC 205 ; WX 333 ; N hungarumlaut ; B 157 593 565 734 ;\r\nC 206 ; WX 333 ; N ogonek ; B 43 -225 249 0 ;\r\nC 207 ; WX 333 ; N caron ; B 177 593 468 734 ;\r\nC 208 ; WX 1000 ; N emdash ; B 51 240 1067 313 ;\r\nC 225 ; WX 1000 ; N AE ; B 8 0 1097 718 ;\r\nC 227 ; WX 370 ; N ordfeminine ; B 127 405 449 737 ;\r\nC 232 ; WX 556 ; N Lslash ; B 41 0 555 718 ;\r\nC 233 ; WX 778 ; N Oslash ; B 43 -19 890 737 ;\r\nC 234 ; WX 1000 ; N OE ; B 98 -19 1116 737 ;\r\nC 235 ; WX 365 ; N ordmasculine ; B 141 405 468 737 ;\r\nC 241 ; WX 889 ; N ae ; B 61 -15 909 538 ;\r\nC 245 ; WX 278 ; N dotlessi ; B 95 0 294 523 ;\r\nC 248 ; WX 222 ; N lslash ; B 41 0 347 718 ;\r\nC 249 ; WX 611 ; N oslash ; B 29 -22 647 545 ;\r\nC 250 ; WX 944 ; N oe ; B 83 -15 964 538 ;\r\nC 251 ; WX 611 ; N germandbls ; B 67 -15 658 728 ;\r\nC -1 ; WX 278 ; N Idieresis ; B 91 0 458 901 ;\r\nC -1 ; WX 556 ; N eacute ; B 84 -15 587 734 ;\r\nC -1 ; WX 556 ; N abreve ; B 61 -15 578 731 ;\r\nC -1 ; WX 556 ; N uhungarumlaut ; B 94 -15 677 734 ;\r\nC -1 ; WX 556 ; N ecaron ; B 84 -15 580 734 ;\r\nC -1 ; WX 667 ; N Ydieresis ; B 167 0 806 901 ;\r\nC -1 ; WX 584 ; N divide ; B 85 -19 606 524 ;\r\nC -1 ; WX 667 ; N Yacute ; B 167 0 806 929 ;\r\nC -1 ; WX 667 ; N Acircumflex ; B 14 0 654 929 ;\r\nC -1 ; WX 556 ; N aacute ; B 61 -15 587 734 ;\r\nC -1 ; WX 722 ; N Ucircumflex ; B 123 -19 797 929 ;\r\nC -1 ; WX 500 ; N yacute ; B 15 -214 600 734 ;\r\nC -1 ; WX 500 ; N scommaaccent ; B 63 -225 529 538 ;\r\nC -1 ; WX 556 ; N ecircumflex ; B 84 -15 578 734 ;\r\nC -1 ; WX 722 ; N Uring ; B 123 -19 797 931 ;\r\nC -1 ; WX 722 ; N Udieresis ; B 123 -19 797 901 ;\r\nC -1 ; WX 556 ; N aogonek ; B 61 -220 559 538 ;\r\nC -1 ; WX 722 ; N Uacute ; B 123 -19 797 929 ;\r\nC -1 ; WX 556 ; N uogonek ; B 94 -225 600 523 ;\r\nC -1 ; WX 667 ; N Edieresis ; B 86 0 762 901 ;\r\nC -1 ; WX 722 ; N Dcroat ; B 69 0 764 718 ;\r\nC -1 ; WX 250 ; N commaaccent ; B 39 -225 172 -40 ;\r\nC -1 ; WX 737 ; N copyright ; B 54 -19 837 737 ;\r\nC -1 ; WX 667 ; N Emacron ; B 86 0 762 879 ;\r\nC -1 ; WX 500 ; N ccaron ; B 74 -15 553 734 ;\r\nC -1 ; WX 556 ; N aring ; B 61 -15 559 756 ;\r\nC -1 ; WX 722 ; N Ncommaaccent ; B 76 -225 799 718 ;\r\nC -1 ; WX 222 ; N lacute ; B 67 0 461 929 ;\r\nC -1 ; WX 556 ; N agrave ; B 61 -15 559 734 ;\r\nC -1 ; WX 611 ; N Tcommaaccent ; B 148 -225 750 718 ;\r\nC -1 ; WX 722 ; N Cacute ; B 108 -19 782 929 ;\r\nC -1 ; WX 556 ; N atilde ; B 61 -15 592 722 ;\r\nC -1 ; WX 667 ; N Edotaccent ; B 86 0 762 901 ;\r\nC -1 ; WX 500 ; N scaron ; B 63 -15 552 734 ;\r\nC -1 ; WX 500 ; N scedilla ; B 63 -225 529 538 ;\r\nC -1 ; WX 278 ; N iacute ; B 95 0 448 734 ;\r\nC -1 ; WX 471 ; N lozenge ; B 88 0 540 728 ;\r\nC -1 ; WX 722 ; N Rcaron ; B 88 0 773 929 ;\r\nC -1 ; WX 778 ; N Gcommaaccent ; B 111 -225 799 737 ;\r\nC -1 ; WX 556 ; N ucircumflex ; B 94 -15 600 734 ;\r\nC -1 ; WX 556 ; N acircumflex ; B 61 -15 559 734 ;\r\nC -1 ; WX 667 ; N Amacron ; B 14 0 677 879 ;\r\nC -1 ; WX 333 ; N rcaron ; B 77 0 508 734 ;\r\nC -1 ; WX 500 ; N ccedilla ; B 74 -225 553 538 ;\r\nC -1 ; WX 611 ; N Zdotaccent ; B 23 0 741 901 ;\r\nC -1 ; WX 667 ; N Thorn ; B 86 0 712 718 ;\r\nC -1 ; WX 778 ; N Omacron ; B 105 -19 826 879 ;\r\nC -1 ; WX 722 ; N Racute ; B 88 0 773 929 ;\r\nC -1 ; WX 667 ; N Sacute ; B 90 -19 713 929 ;\r\nC -1 ; WX 643 ; N dcaron ; B 84 -15 808 718 ;\r\nC -1 ; WX 722 ; N Umacron ; B 123 -19 797 879 ;\r\nC -1 ; WX 556 ; N uring ; B 94 -15 600 756 ;\r\nC -1 ; WX 333 ; N threesuperior ; B 90 270 436 703 ;\r\nC -1 ; WX 778 ; N Ograve ; B 105 -19 826 929 ;\r\nC -1 ; WX 667 ; N Agrave ; B 14 0 654 929 ;\r\nC -1 ; WX 667 ; N Abreve ; B 14 0 685 926 ;\r\nC -1 ; WX 584 ; N multiply ; B 50 0 642 506 ;\r\nC -1 ; WX 556 ; N uacute ; B 94 -15 600 734 ;\r\nC -1 ; WX 611 ; N Tcaron ; B 148 0 750 929 ;\r\nC -1 ; WX 476 ; N partialdiff ; B 41 -38 550 714 ;\r\nC -1 ; WX 500 ; N ydieresis ; B 15 -214 600 706 ;\r\nC -1 ; WX 722 ; N Nacute ; B 76 0 799 929 ;\r\nC -1 ; WX 278 ; N icircumflex ; B 95 0 411 734 ;\r\nC -1 ; WX 667 ; N Ecircumflex ; B 86 0 762 929 ;\r\nC -1 ; WX 556 ; N adieresis ; B 61 -15 559 706 ;\r\nC -1 ; WX 556 ; N edieresis ; B 84 -15 578 706 ;\r\nC -1 ; WX 500 ; N cacute ; B 74 -15 559 734 ;\r\nC -1 ; WX 556 ; N nacute ; B 65 0 587 734 ;\r\nC -1 ; WX 556 ; N umacron ; B 94 -15 600 684 ;\r\nC -1 ; WX 722 ; N Ncaron ; B 76 0 799 929 ;\r\nC -1 ; WX 278 ; N Iacute ; B 91 0 489 929 ;\r\nC -1 ; WX 584 ; N plusminus ; B 39 0 618 506 ;\r\nC -1 ; WX 260 ; N brokenbar ; B 62 -150 316 700 ;\r\nC -1 ; WX 737 ; N registered ; B 54 -19 837 737 ;\r\nC -1 ; WX 778 ; N Gbreve ; B 111 -19 799 926 ;\r\nC -1 ; WX 278 ; N Idotaccent ; B 91 0 377 901 ;\r\nC -1 ; WX 600 ; N summation ; B 15 -10 671 706 ;\r\nC -1 ; WX 667 ; N Egrave ; B 86 0 762 929 ;\r\nC -1 ; WX 333 ; N racute ; B 77 0 475 734 ;\r\nC -1 ; WX 556 ; N omacron ; B 83 -14 585 684 ;\r\nC -1 ; WX 611 ; N Zacute ; B 23 0 741 929 ;\r\nC -1 ; WX 611 ; N Zcaron ; B 23 0 741 929 ;\r\nC -1 ; WX 549 ; N greaterequal ; B 26 0 620 674 ;\r\nC -1 ; WX 722 ; N Eth ; B 69 0 764 718 ;\r\nC -1 ; WX 722 ; N Ccedilla ; B 108 -225 782 737 ;\r\nC -1 ; WX 222 ; N lcommaaccent ; B 25 -225 308 718 ;\r\nC -1 ; WX 317 ; N tcaron ; B 102 -7 501 808 ;\r\nC -1 ; WX 556 ; N eogonek ; B 84 -225 578 538 ;\r\nC -1 ; WX 722 ; N Uogonek ; B 123 -225 797 718 ;\r\nC -1 ; WX 667 ; N Aacute ; B 14 0 683 929 ;\r\nC -1 ; WX 667 ; N Adieresis ; B 14 0 654 901 ;\r\nC -1 ; WX 556 ; N egrave ; B 84 -15 578 734 ;\r\nC -1 ; WX 500 ; N zacute ; B 31 0 571 734 ;\r\nC -1 ; WX 222 ; N iogonek ; B -61 -225 308 718 ;\r\nC -1 ; WX 778 ; N Oacute ; B 105 -19 826 929 ;\r\nC -1 ; WX 556 ; N oacute ; B 83 -14 587 734 ;\r\nC -1 ; WX 556 ; N amacron ; B 61 -15 580 684 ;\r\nC -1 ; WX 500 ; N sacute ; B 63 -15 559 734 ;\r\nC -1 ; WX 278 ; N idieresis ; B 95 0 416 706 ;\r\nC -1 ; WX 778 ; N Ocircumflex ; B 105 -19 826 929 ;\r\nC -1 ; WX 722 ; N Ugrave ; B 123 -19 797 929 ;\r\nC -1 ; WX 612 ; N Delta ; B 6 0 608 688 ;\r\nC -1 ; WX 556 ; N thorn ; B 14 -207 584 718 ;\r\nC -1 ; WX 333 ; N twosuperior ; B 64 281 449 703 ;\r\nC -1 ; WX 778 ; N Odieresis ; B 105 -19 826 901 ;\r\nC -1 ; WX 556 ; N mu ; B 24 -207 600 523 ;\r\nC -1 ; WX 278 ; N igrave ; B 95 0 310 734 ;\r\nC -1 ; WX 556 ; N ohungarumlaut ; B 83 -14 677 734 ;\r\nC -1 ; WX 667 ; N Eogonek ; B 86 -220 762 718 ;\r\nC -1 ; WX 556 ; N dcroat ; B 84 -15 689 718 ;\r\nC -1 ; WX 834 ; N threequarters ; B 130 -19 861 703 ;\r\nC -1 ; WX 667 ; N Scedilla ; B 90 -225 713 737 ;\r\nC -1 ; WX 299 ; N lcaron ; B 67 0 464 718 ;\r\nC -1 ; WX 667 ; N Kcommaaccent ; B 76 -225 808 718 ;\r\nC -1 ; WX 556 ; N Lacute ; B 76 0 555 929 ;\r\nC -1 ; WX 1000 ; N trademark ; B 186 306 1056 718 ;\r\nC -1 ; WX 556 ; N edotaccent ; B 84 -15 578 706 ;\r\nC -1 ; WX 278 ; N Igrave ; B 91 0 351 929 ;\r\nC -1 ; WX 278 ; N Imacron ; B 91 0 483 879 ;\r\nC -1 ; WX 556 ; N Lcaron ; B 76 0 570 718 ;\r\nC -1 ; WX 834 ; N onehalf ; B 114 -19 839 703 ;\r\nC -1 ; WX 549 ; N lessequal ; B 26 0 666 674 ;\r\nC -1 ; WX 556 ; N ocircumflex ; B 83 -14 585 734 ;\r\nC -1 ; WX 556 ; N ntilde ; B 65 0 592 722 ;\r\nC -1 ; WX 722 ; N Uhungarumlaut ; B 123 -19 801 929 ;\r\nC -1 ; WX 667 ; N Eacute ; B 86 0 762 929 ;\r\nC -1 ; WX 556 ; N emacron ; B 84 -15 580 684 ;\r\nC -1 ; WX 556 ; N gbreve ; B 42 -220 610 731 ;\r\nC -1 ; WX 834 ; N onequarter ; B 150 -19 802 703 ;\r\nC -1 ; WX 667 ; N Scaron ; B 90 -19 713 929 ;\r\nC -1 ; WX 667 ; N Scommaaccent ; B 90 -225 713 737 ;\r\nC -1 ; WX 778 ; N Ohungarumlaut ; B 105 -19 829 929 ;\r\nC -1 ; WX 400 ; N degree ; B 169 411 468 703 ;\r\nC -1 ; WX 556 ; N ograve ; B 83 -14 585 734 ;\r\nC -1 ; WX 722 ; N Ccaron ; B 108 -19 782 929 ;\r\nC -1 ; WX 556 ; N ugrave ; B 94 -15 600 734 ;\r\nC -1 ; WX 453 ; N radical ; B 79 -80 617 762 ;\r\nC -1 ; WX 722 ; N Dcaron ; B 81 0 764 929 ;\r\nC -1 ; WX 333 ; N rcommaaccent ; B 30 -225 446 538 ;\r\nC -1 ; WX 722 ; N Ntilde ; B 76 0 799 917 ;\r\nC -1 ; WX 556 ; N otilde ; B 83 -14 602 722 ;\r\nC -1 ; WX 722 ; N Rcommaaccent ; B 88 -225 773 718 ;\r\nC -1 ; WX 556 ; N Lcommaaccent ; B 76 -225 555 718 ;\r\nC -1 ; WX 667 ; N Atilde ; B 14 0 699 917 ;\r\nC -1 ; WX 667 ; N Aogonek ; B 14 -225 654 718 ;\r\nC -1 ; WX 667 ; N Aring ; B 14 0 654 931 ;\r\nC -1 ; WX 778 ; N Otilde ; B 105 -19 826 917 ;\r\nC -1 ; WX 500 ; N zdotaccent ; B 31 0 571 706 ;\r\nC -1 ; WX 667 ; N Ecaron ; B 86 0 762 929 ;\r\nC -1 ; WX 278 ; N Iogonek ; B -33 -225 341 718 ;\r\nC -1 ; WX 500 ; N kcommaaccent ; B 67 -225 600 718 ;\r\nC -1 ; WX 584 ; N minus ; B 85 216 606 289 ;\r\nC -1 ; WX 278 ; N Icircumflex ; B 91 0 452 929 ;\r\nC -1 ; WX 556 ; N ncaron ; B 65 0 580 734 ;\r\nC -1 ; WX 278 ; N tcommaaccent ; B 63 -225 368 669 ;\r\nC -1 ; WX 584 ; N logicalnot ; B 106 108 628 390 ;\r\nC -1 ; WX 556 ; N odieresis ; B 83 -14 585 706 ;\r\nC -1 ; WX 556 ; N udieresis ; B 94 -15 600 706 ;\r\nC -1 ; WX 549 ; N notequal ; B 34 -35 623 551 ;\r\nC -1 ; WX 556 ; N gcommaaccent ; B 42 -220 610 822 ;\r\nC -1 ; WX 556 ; N eth ; B 81 -15 617 737 ;\r\nC -1 ; WX 500 ; N zcaron ; B 31 0 571 734 ;\r\nC -1 ; WX 556 ; N ncommaaccent ; B 65 -225 573 538 ;\r\nC -1 ; WX 333 ; N onesuperior ; B 166 281 371 703 ;\r\nC -1 ; WX 278 ; N imacron ; B 95 0 417 684 ;\r\nC -1 ; WX 556 ; N Euro ; B 0 0 0 0 ;\r\nEndCharMetrics\r\nStartKernData\r\nStartKernPairs 2705\r\nKPX A C -30\r\nKPX A Cacute -30\r\nKPX A Ccaron -30\r\nKPX A Ccedilla -30\r\nKPX A G -30\r\nKPX A Gbreve -30\r\nKPX A Gcommaaccent -30\r\nKPX A O -30\r\nKPX A Oacute -30\r\nKPX A Ocircumflex -30\r\nKPX A Odieresis -30\r\nKPX A Ograve -30\r\nKPX A Ohungarumlaut -30\r\nKPX A Omacron -30\r\nKPX A Oslash -30\r\nKPX A Otilde -30\r\nKPX A Q -30\r\nKPX A T -120\r\nKPX A Tcaron -120\r\nKPX A Tcommaaccent -120\r\nKPX A U -50\r\nKPX A Uacute -50\r\nKPX A Ucircumflex -50\r\nKPX A Udieresis -50\r\nKPX A Ugrave -50\r\nKPX A Uhungarumlaut -50\r\nKPX A Umacron -50\r\nKPX A Uogonek -50\r\nKPX A Uring -50\r\nKPX A V -70\r\nKPX A W -50\r\nKPX A Y -100\r\nKPX A Yacute -100\r\nKPX A Ydieresis -100\r\nKPX A u -30\r\nKPX A uacute -30\r\nKPX A ucircumflex -30\r\nKPX A udieresis -30\r\nKPX A ugrave -30\r\nKPX A uhungarumlaut -30\r\nKPX A umacron -30\r\nKPX A uogonek -30\r\nKPX A uring -30\r\nKPX A v -40\r\nKPX A w -40\r\nKPX A y -40\r\nKPX A yacute -40\r\nKPX A ydieresis -40\r\nKPX Aacute C -30\r\nKPX Aacute Cacute -30\r\nKPX Aacute Ccaron -30\r\nKPX Aacute Ccedilla -30\r\nKPX Aacute G -30\r\nKPX Aacute Gbreve -30\r\nKPX Aacute Gcommaaccent -30\r\nKPX Aacute O -30\r\nKPX Aacute Oacute -30\r\nKPX Aacute Ocircumflex -30\r\nKPX Aacute Odieresis -30\r\nKPX Aacute Ograve -30\r\nKPX Aacute Ohungarumlaut -30\r\nKPX Aacute Omacron -30\r\nKPX Aacute Oslash -30\r\nKPX Aacute Otilde -30\r\nKPX Aacute Q -30\r\nKPX Aacute T -120\r\nKPX Aacute Tcaron -120\r\nKPX Aacute Tcommaaccent -120\r\nKPX Aacute U -50\r\nKPX Aacute Uacute -50\r\nKPX Aacute Ucircumflex -50\r\nKPX Aacute Udieresis -50\r\nKPX Aacute Ugrave -50\r\nKPX Aacute Uhungarumlaut -50\r\nKPX Aacute Umacron -50\r\nKPX Aacute Uogonek -50\r\nKPX Aacute Uring -50\r\nKPX Aacute V -70\r\nKPX Aacute W -50\r\nKPX Aacute Y -100\r\nKPX Aacute Yacute -100\r\nKPX Aacute Ydieresis -100\r\nKPX Aacute u -30\r\nKPX Aacute uacute -30\r\nKPX Aacute ucircumflex -30\r\nKPX Aacute udieresis -30\r\nKPX Aacute ugrave -30\r\nKPX Aacute uhungarumlaut -30\r\nKPX Aacute umacron -30\r\nKPX Aacute uogonek -30\r\nKPX Aacute uring -30\r\nKPX Aacute v -40\r\nKPX Aacute w -40\r\nKPX Aacute y -40\r\nKPX Aacute yacute -40\r\nKPX Aacute ydieresis -40\r\nKPX Abreve C -30\r\nKPX Abreve Cacute -30\r\nKPX Abreve Ccaron -30\r\nKPX Abreve Ccedilla -30\r\nKPX Abreve G -30\r\nKPX Abreve Gbreve -30\r\nKPX Abreve Gcommaaccent -30\r\nKPX Abreve O -30\r\nKPX Abreve Oacute -30\r\nKPX Abreve Ocircumflex -30\r\nKPX Abreve Odieresis -30\r\nKPX Abreve Ograve -30\r\nKPX Abreve Ohungarumlaut -30\r\nKPX Abreve Omacron -30\r\nKPX Abreve Oslash -30\r\nKPX Abreve Otilde -30\r\nKPX Abreve Q -30\r\nKPX Abreve T -120\r\nKPX Abreve Tcaron -120\r\nKPX Abreve Tcommaaccent -120\r\nKPX Abreve U -50\r\nKPX Abreve Uacute -50\r\nKPX Abreve Ucircumflex -50\r\nKPX Abreve Udieresis -50\r\nKPX Abreve Ugrave -50\r\nKPX Abreve Uhungarumlaut -50\r\nKPX Abreve Umacron -50\r\nKPX Abreve Uogonek -50\r\nKPX Abreve Uring -50\r\nKPX Abreve V -70\r\nKPX Abreve W -50\r\nKPX Abreve Y -100\r\nKPX Abreve Yacute -100\r\nKPX Abreve Ydieresis -100\r\nKPX Abreve u -30\r\nKPX Abreve uacute -30\r\nKPX Abreve ucircumflex -30\r\nKPX Abreve udieresis -30\r\nKPX Abreve ugrave -30\r\nKPX Abreve uhungarumlaut -30\r\nKPX Abreve umacron -30\r\nKPX Abreve uogonek -30\r\nKPX Abreve uring -30\r\nKPX Abreve v -40\r\nKPX Abreve w -40\r\nKPX Abreve y -40\r\nKPX Abreve yacute -40\r\nKPX Abreve ydieresis -40\r\nKPX Acircumflex C -30\r\nKPX Acircumflex Cacute -30\r\nKPX Acircumflex Ccaron -30\r\nKPX Acircumflex Ccedilla -30\r\nKPX Acircumflex G -30\r\nKPX Acircumflex Gbreve -30\r\nKPX Acircumflex Gcommaaccent -30\r\nKPX Acircumflex O -30\r\nKPX Acircumflex Oacute -30\r\nKPX Acircumflex Ocircumflex -30\r\nKPX Acircumflex Odieresis -30\r\nKPX Acircumflex Ograve -30\r\nKPX Acircumflex Ohungarumlaut -30\r\nKPX Acircumflex Omacron -30\r\nKPX Acircumflex Oslash -30\r\nKPX Acircumflex Otilde -30\r\nKPX Acircumflex Q -30\r\nKPX Acircumflex T -120\r\nKPX Acircumflex Tcaron -120\r\nKPX Acircumflex Tcommaaccent -120\r\nKPX Acircumflex U -50\r\nKPX Acircumflex Uacute -50\r\nKPX Acircumflex Ucircumflex -50\r\nKPX Acircumflex Udieresis -50\r\nKPX Acircumflex Ugrave -50\r\nKPX Acircumflex Uhungarumlaut -50\r\nKPX Acircumflex Umacron -50\r\nKPX Acircumflex Uogonek -50\r\nKPX Acircumflex Uring -50\r\nKPX Acircumflex V -70\r\nKPX Acircumflex W -50\r\nKPX Acircumflex Y -100\r\nKPX Acircumflex Yacute -100\r\nKPX Acircumflex Ydieresis -100\r\nKPX Acircumflex u -30\r\nKPX Acircumflex uacute -30\r\nKPX Acircumflex ucircumflex -30\r\nKPX Acircumflex udieresis -30\r\nKPX Acircumflex ugrave -30\r\nKPX Acircumflex uhungarumlaut -30\r\nKPX Acircumflex umacron -30\r\nKPX Acircumflex uogonek -30\r\nKPX Acircumflex uring -30\r\nKPX Acircumflex v -40\r\nKPX Acircumflex w -40\r\nKPX Acircumflex y -40\r\nKPX Acircumflex yacute -40\r\nKPX Acircumflex ydieresis -40\r\nKPX Adieresis C -30\r\nKPX Adieresis Cacute -30\r\nKPX Adieresis Ccaron -30\r\nKPX Adieresis Ccedilla -30\r\nKPX Adieresis G -30\r\nKPX Adieresis Gbreve -30\r\nKPX Adieresis Gcommaaccent -30\r\nKPX Adieresis O -30\r\nKPX Adieresis Oacute -30\r\nKPX Adieresis Ocircumflex -30\r\nKPX Adieresis Odieresis -30\r\nKPX Adieresis Ograve -30\r\nKPX Adieresis Ohungarumlaut -30\r\nKPX Adieresis Omacron -30\r\nKPX Adieresis Oslash -30\r\nKPX Adieresis Otilde -30\r\nKPX Adieresis Q -30\r\nKPX Adieresis T -120\r\nKPX Adieresis Tcaron -120\r\nKPX Adieresis Tcommaaccent -120\r\nKPX Adieresis U -50\r\nKPX Adieresis Uacute -50\r\nKPX Adieresis Ucircumflex -50\r\nKPX Adieresis Udieresis -50\r\nKPX Adieresis Ugrave -50\r\nKPX Adieresis Uhungarumlaut -50\r\nKPX Adieresis Umacron -50\r\nKPX Adieresis Uogonek -50\r\nKPX Adieresis Uring -50\r\nKPX Adieresis V -70\r\nKPX Adieresis W -50\r\nKPX Adieresis Y -100\r\nKPX Adieresis Yacute -100\r\nKPX Adieresis Ydieresis -100\r\nKPX Adieresis u -30\r\nKPX Adieresis uacute -30\r\nKPX Adieresis ucircumflex -30\r\nKPX Adieresis udieresis -30\r\nKPX Adieresis ugrave -30\r\nKPX Adieresis uhungarumlaut -30\r\nKPX Adieresis umacron -30\r\nKPX Adieresis uogonek -30\r\nKPX Adieresis uring -30\r\nKPX Adieresis v -40\r\nKPX Adieresis w -40\r\nKPX Adieresis y -40\r\nKPX Adieresis yacute -40\r\nKPX Adieresis ydieresis -40\r\nKPX Agrave C -30\r\nKPX Agrave Cacute -30\r\nKPX Agrave Ccaron -30\r\nKPX Agrave Ccedilla -30\r\nKPX Agrave G -30\r\nKPX Agrave Gbreve -30\r\nKPX Agrave Gcommaaccent -30\r\nKPX Agrave O -30\r\nKPX Agrave Oacute -30\r\nKPX Agrave Ocircumflex -30\r\nKPX Agrave Odieresis -30\r\nKPX Agrave Ograve -30\r\nKPX Agrave Ohungarumlaut -30\r\nKPX Agrave Omacron -30\r\nKPX Agrave Oslash -30\r\nKPX Agrave Otilde -30\r\nKPX Agrave Q -30\r\nKPX Agrave T -120\r\nKPX Agrave Tcaron -120\r\nKPX Agrave Tcommaaccent -120\r\nKPX Agrave U -50\r\nKPX Agrave Uacute -50\r\nKPX Agrave Ucircumflex -50\r\nKPX Agrave Udieresis -50\r\nKPX Agrave Ugrave -50\r\nKPX Agrave Uhungarumlaut -50\r\nKPX Agrave Umacron -50\r\nKPX Agrave Uogonek -50\r\nKPX Agrave Uring -50\r\nKPX Agrave V -70\r\nKPX Agrave W -50\r\nKPX Agrave Y -100\r\nKPX Agrave Yacute -100\r\nKPX Agrave Ydieresis -100\r\nKPX Agrave u -30\r\nKPX Agrave uacute -30\r\nKPX Agrave ucircumflex -30\r\nKPX Agrave udieresis -30\r\nKPX Agrave ugrave -30\r\nKPX Agrave uhungarumlaut -30\r\nKPX Agrave umacron -30\r\nKPX Agrave uogonek -30\r\nKPX Agrave uring -30\r\nKPX Agrave v -40\r\nKPX Agrave w -40\r\nKPX Agrave y -40\r\nKPX Agrave yacute -40\r\nKPX Agrave ydieresis -40\r\nKPX Amacron C -30\r\nKPX Amacron Cacute -30\r\nKPX Amacron Ccaron -30\r\nKPX Amacron Ccedilla -30\r\nKPX Amacron G -30\r\nKPX Amacron Gbreve -30\r\nKPX Amacron Gcommaaccent -30\r\nKPX Amacron O -30\r\nKPX Amacron Oacute -30\r\nKPX Amacron Ocircumflex -30\r\nKPX Amacron Odieresis -30\r\nKPX Amacron Ograve -30\r\nKPX Amacron Ohungarumlaut -30\r\nKPX Amacron Omacron -30\r\nKPX Amacron Oslash -30\r\nKPX Amacron Otilde -30\r\nKPX Amacron Q -30\r\nKPX Amacron T -120\r\nKPX Amacron Tcaron -120\r\nKPX Amacron Tcommaaccent -120\r\nKPX Amacron U -50\r\nKPX Amacron Uacute -50\r\nKPX Amacron Ucircumflex -50\r\nKPX Amacron Udieresis -50\r\nKPX Amacron Ugrave -50\r\nKPX Amacron Uhungarumlaut -50\r\nKPX Amacron Umacron -50\r\nKPX Amacron Uogonek -50\r\nKPX Amacron Uring -50\r\nKPX Amacron V -70\r\nKPX Amacron W -50\r\nKPX Amacron Y -100\r\nKPX Amacron Yacute -100\r\nKPX Amacron Ydieresis -100\r\nKPX Amacron u -30\r\nKPX Amacron uacute -30\r\nKPX Amacron ucircumflex -30\r\nKPX Amacron udieresis -30\r\nKPX Amacron ugrave -30\r\nKPX Amacron uhungarumlaut -30\r\nKPX Amacron umacron -30\r\nKPX Amacron uogonek -30\r\nKPX Amacron uring -30\r\nKPX Amacron v -40\r\nKPX Amacron w -40\r\nKPX Amacron y -40\r\nKPX Amacron yacute -40\r\nKPX Amacron ydieresis -40\r\nKPX Aogonek C -30\r\nKPX Aogonek Cacute -30\r\nKPX Aogonek Ccaron -30\r\nKPX Aogonek Ccedilla -30\r\nKPX Aogonek G -30\r\nKPX Aogonek Gbreve -30\r\nKPX Aogonek Gcommaaccent -30\r\nKPX Aogonek O -30\r\nKPX Aogonek Oacute -30\r\nKPX Aogonek Ocircumflex -30\r\nKPX Aogonek Odieresis -30\r\nKPX Aogonek Ograve -30\r\nKPX Aogonek Ohungarumlaut -30\r\nKPX Aogonek Omacron -30\r\nKPX Aogonek Oslash -30\r\nKPX Aogonek Otilde -30\r\nKPX Aogonek Q -30\r\nKPX Aogonek T -120\r\nKPX Aogonek Tcaron -120\r\nKPX Aogonek Tcommaaccent -120\r\nKPX Aogonek U -50\r\nKPX Aogonek Uacute -50\r\nKPX Aogonek Ucircumflex -50\r\nKPX Aogonek Udieresis -50\r\nKPX Aogonek Ugrave -50\r\nKPX Aogonek Uhungarumlaut -50\r\nKPX Aogonek Umacron -50\r\nKPX Aogonek Uogonek -50\r\nKPX Aogonek Uring -50\r\nKPX Aogonek V -70\r\nKPX Aogonek W -50\r\nKPX Aogonek Y -100\r\nKPX Aogonek Yacute -100\r\nKPX Aogonek Ydieresis -100\r\nKPX Aogonek u -30\r\nKPX Aogonek uacute -30\r\nKPX Aogonek ucircumflex -30\r\nKPX Aogonek udieresis -30\r\nKPX Aogonek ugrave -30\r\nKPX Aogonek uhungarumlaut -30\r\nKPX Aogonek umacron -30\r\nKPX Aogonek uogonek -30\r\nKPX Aogonek uring -30\r\nKPX Aogonek v -40\r\nKPX Aogonek w -40\r\nKPX Aogonek y -40\r\nKPX Aogonek yacute -40\r\nKPX Aogonek ydieresis -40\r\nKPX Aring C -30\r\nKPX Aring Cacute -30\r\nKPX Aring Ccaron -30\r\nKPX Aring Ccedilla -30\r\nKPX Aring G -30\r\nKPX Aring Gbreve -30\r\nKPX Aring Gcommaaccent -30\r\nKPX Aring O -30\r\nKPX Aring Oacute -30\r\nKPX Aring Ocircumflex -30\r\nKPX Aring Odieresis -30\r\nKPX Aring Ograve -30\r\nKPX Aring Ohungarumlaut -30\r\nKPX Aring Omacron -30\r\nKPX Aring Oslash -30\r\nKPX Aring Otilde -30\r\nKPX Aring Q -30\r\nKPX Aring T -120\r\nKPX Aring Tcaron -120\r\nKPX Aring Tcommaaccent -120\r\nKPX Aring U -50\r\nKPX Aring Uacute -50\r\nKPX Aring Ucircumflex -50\r\nKPX Aring Udieresis -50\r\nKPX Aring Ugrave -50\r\nKPX Aring Uhungarumlaut -50\r\nKPX Aring Umacron -50\r\nKPX Aring Uogonek -50\r\nKPX Aring Uring -50\r\nKPX Aring V -70\r\nKPX Aring W -50\r\nKPX Aring Y -100\r\nKPX Aring Yacute -100\r\nKPX Aring Ydieresis -100\r\nKPX Aring u -30\r\nKPX Aring uacute -30\r\nKPX Aring ucircumflex -30\r\nKPX Aring udieresis -30\r\nKPX Aring ugrave -30\r\nKPX Aring uhungarumlaut -30\r\nKPX Aring umacron -30\r\nKPX Aring uogonek -30\r\nKPX Aring uring -30\r\nKPX Aring v -40\r\nKPX Aring w -40\r\nKPX Aring y -40\r\nKPX Aring yacute -40\r\nKPX Aring ydieresis -40\r\nKPX Atilde C -30\r\nKPX Atilde Cacute -30\r\nKPX Atilde Ccaron -30\r\nKPX Atilde Ccedilla -30\r\nKPX Atilde G -30\r\nKPX Atilde Gbreve -30\r\nKPX Atilde Gcommaaccent -30\r\nKPX Atilde O -30\r\nKPX Atilde Oacute -30\r\nKPX Atilde Ocircumflex -30\r\nKPX Atilde Odieresis -30\r\nKPX Atilde Ograve -30\r\nKPX Atilde Ohungarumlaut -30\r\nKPX Atilde Omacron -30\r\nKPX Atilde Oslash -30\r\nKPX Atilde Otilde -30\r\nKPX Atilde Q -30\r\nKPX Atilde T -120\r\nKPX Atilde Tcaron -120\r\nKPX Atilde Tcommaaccent -120\r\nKPX Atilde U -50\r\nKPX Atilde Uacute -50\r\nKPX Atilde Ucircumflex -50\r\nKPX Atilde Udieresis -50\r\nKPX Atilde Ugrave -50\r\nKPX Atilde Uhungarumlaut -50\r\nKPX Atilde Umacron -50\r\nKPX Atilde Uogonek -50\r\nKPX Atilde Uring -50\r\nKPX Atilde V -70\r\nKPX Atilde W -50\r\nKPX Atilde Y -100\r\nKPX Atilde Yacute -100\r\nKPX Atilde Ydieresis -100\r\nKPX Atilde u -30\r\nKPX Atilde uacute -30\r\nKPX Atilde ucircumflex -30\r\nKPX Atilde udieresis -30\r\nKPX Atilde ugrave -30\r\nKPX Atilde uhungarumlaut -30\r\nKPX Atilde umacron -30\r\nKPX Atilde uogonek -30\r\nKPX Atilde uring -30\r\nKPX Atilde v -40\r\nKPX Atilde w -40\r\nKPX Atilde y -40\r\nKPX Atilde yacute -40\r\nKPX Atilde ydieresis -40\r\nKPX B U -10\r\nKPX B Uacute -10\r\nKPX B Ucircumflex -10\r\nKPX B Udieresis -10\r\nKPX B Ugrave -10\r\nKPX B Uhungarumlaut -10\r\nKPX B Umacron -10\r\nKPX B Uogonek -10\r\nKPX B Uring -10\r\nKPX B comma -20\r\nKPX B period -20\r\nKPX C comma -30\r\nKPX C period -30\r\nKPX Cacute comma -30\r\nKPX Cacute period -30\r\nKPX Ccaron comma -30\r\nKPX Ccaron period -30\r\nKPX Ccedilla comma -30\r\nKPX Ccedilla period -30\r\nKPX D A -40\r\nKPX D Aacute -40\r\nKPX D Abreve -40\r\nKPX D Acircumflex -40\r\nKPX D Adieresis -40\r\nKPX D Agrave -40\r\nKPX D Amacron -40\r\nKPX D Aogonek -40\r\nKPX D Aring -40\r\nKPX D Atilde -40\r\nKPX D V -70\r\nKPX D W -40\r\nKPX D Y -90\r\nKPX D Yacute -90\r\nKPX D Ydieresis -90\r\nKPX D comma -70\r\nKPX D period -70\r\nKPX Dcaron A -40\r\nKPX Dcaron Aacute -40\r\nKPX Dcaron Abreve -40\r\nKPX Dcaron Acircumflex -40\r\nKPX Dcaron Adieresis -40\r\nKPX Dcaron Agrave -40\r\nKPX Dcaron Amacron -40\r\nKPX Dcaron Aogonek -40\r\nKPX Dcaron Aring -40\r\nKPX Dcaron Atilde -40\r\nKPX Dcaron V -70\r\nKPX Dcaron W -40\r\nKPX Dcaron Y -90\r\nKPX Dcaron Yacute -90\r\nKPX Dcaron Ydieresis -90\r\nKPX Dcaron comma -70\r\nKPX Dcaron period -70\r\nKPX Dcroat A -40\r\nKPX Dcroat Aacute -40\r\nKPX Dcroat Abreve -40\r\nKPX Dcroat Acircumflex -40\r\nKPX Dcroat Adieresis -40\r\nKPX Dcroat Agrave -40\r\nKPX Dcroat Amacron -40\r\nKPX Dcroat Aogonek -40\r\nKPX Dcroat Aring -40\r\nKPX Dcroat Atilde -40\r\nKPX Dcroat V -70\r\nKPX Dcroat W -40\r\nKPX Dcroat Y -90\r\nKPX Dcroat Yacute -90\r\nKPX Dcroat Ydieresis -90\r\nKPX Dcroat comma -70\r\nKPX Dcroat period -70\r\nKPX F A -80\r\nKPX F Aacute -80\r\nKPX F Abreve -80\r\nKPX F Acircumflex -80\r\nKPX F Adieresis -80\r\nKPX F Agrave -80\r\nKPX F Amacron -80\r\nKPX F Aogonek -80\r\nKPX F Aring -80\r\nKPX F Atilde -80\r\nKPX F a -50\r\nKPX F aacute -50\r\nKPX F abreve -50\r\nKPX F acircumflex -50\r\nKPX F adieresis -50\r\nKPX F agrave -50\r\nKPX F amacron -50\r\nKPX F aogonek -50\r\nKPX F aring -50\r\nKPX F atilde -50\r\nKPX F comma -150\r\nKPX F e -30\r\nKPX F eacute -30\r\nKPX F ecaron -30\r\nKPX F ecircumflex -30\r\nKPX F edieresis -30\r\nKPX F edotaccent -30\r\nKPX F egrave -30\r\nKPX F emacron -30\r\nKPX F eogonek -30\r\nKPX F o -30\r\nKPX F oacute -30\r\nKPX F ocircumflex -30\r\nKPX F odieresis -30\r\nKPX F ograve -30\r\nKPX F ohungarumlaut -30\r\nKPX F omacron -30\r\nKPX F oslash -30\r\nKPX F otilde -30\r\nKPX F period -150\r\nKPX F r -45\r\nKPX F racute -45\r\nKPX F rcaron -45\r\nKPX F rcommaaccent -45\r\nKPX J A -20\r\nKPX J Aacute -20\r\nKPX J Abreve -20\r\nKPX J Acircumflex -20\r\nKPX J Adieresis -20\r\nKPX J Agrave -20\r\nKPX J Amacron -20\r\nKPX J Aogonek -20\r\nKPX J Aring -20\r\nKPX J Atilde -20\r\nKPX J a -20\r\nKPX J aacute -20\r\nKPX J abreve -20\r\nKPX J acircumflex -20\r\nKPX J adieresis -20\r\nKPX J agrave -20\r\nKPX J amacron -20\r\nKPX J aogonek -20\r\nKPX J aring -20\r\nKPX J atilde -20\r\nKPX J comma -30\r\nKPX J period -30\r\nKPX J u -20\r\nKPX J uacute -20\r\nKPX J ucircumflex -20\r\nKPX J udieresis -20\r\nKPX J ugrave -20\r\nKPX J uhungarumlaut -20\r\nKPX J umacron -20\r\nKPX J uogonek -20\r\nKPX J uring -20\r\nKPX K O -50\r\nKPX K Oacute -50\r\nKPX K Ocircumflex -50\r\nKPX K Odieresis -50\r\nKPX K Ograve -50\r\nKPX K Ohungarumlaut -50\r\nKPX K Omacron -50\r\nKPX K Oslash -50\r\nKPX K Otilde -50\r\nKPX K e -40\r\nKPX K eacute -40\r\nKPX K ecaron -40\r\nKPX K ecircumflex -40\r\nKPX K edieresis -40\r\nKPX K edotaccent -40\r\nKPX K egrave -40\r\nKPX K emacron -40\r\nKPX K eogonek -40\r\nKPX K o -40\r\nKPX K oacute -40\r\nKPX K ocircumflex -40\r\nKPX K odieresis -40\r\nKPX K ograve -40\r\nKPX K ohungarumlaut -40\r\nKPX K omacron -40\r\nKPX K oslash -40\r\nKPX K otilde -40\r\nKPX K u -30\r\nKPX K uacute -30\r\nKPX K ucircumflex -30\r\nKPX K udieresis -30\r\nKPX K ugrave -30\r\nKPX K uhungarumlaut -30\r\nKPX K umacron -30\r\nKPX K uogonek -30\r\nKPX K uring -30\r\nKPX K y -50\r\nKPX K yacute -50\r\nKPX K ydieresis -50\r\nKPX Kcommaaccent O -50\r\nKPX Kcommaaccent Oacute -50\r\nKPX Kcommaaccent Ocircumflex -50\r\nKPX Kcommaaccent Odieresis -50\r\nKPX Kcommaaccent Ograve -50\r\nKPX Kcommaaccent Ohungarumlaut -50\r\nKPX Kcommaaccent Omacron -50\r\nKPX Kcommaaccent Oslash -50\r\nKPX Kcommaaccent Otilde -50\r\nKPX Kcommaaccent e -40\r\nKPX Kcommaaccent eacute -40\r\nKPX Kcommaaccent ecaron -40\r\nKPX Kcommaaccent ecircumflex -40\r\nKPX Kcommaaccent edieresis -40\r\nKPX Kcommaaccent edotaccent -40\r\nKPX Kcommaaccent egrave -40\r\nKPX Kcommaaccent emacron -40\r\nKPX Kcommaaccent eogonek -40\r\nKPX Kcommaaccent o -40\r\nKPX Kcommaaccent oacute -40\r\nKPX Kcommaaccent ocircumflex -40\r\nKPX Kcommaaccent odieresis -40\r\nKPX Kcommaaccent ograve -40\r\nKPX Kcommaaccent ohungarumlaut -40\r\nKPX Kcommaaccent omacron -40\r\nKPX Kcommaaccent oslash -40\r\nKPX Kcommaaccent otilde -40\r\nKPX Kcommaaccent u -30\r\nKPX Kcommaaccent uacute -30\r\nKPX Kcommaaccent ucircumflex -30\r\nKPX Kcommaaccent udieresis -30\r\nKPX Kcommaaccent ugrave -30\r\nKPX Kcommaaccent uhungarumlaut -30\r\nKPX Kcommaaccent umacron -30\r\nKPX Kcommaaccent uogonek -30\r\nKPX Kcommaaccent uring -30\r\nKPX Kcommaaccent y -50\r\nKPX Kcommaaccent yacute -50\r\nKPX Kcommaaccent ydieresis -50\r\nKPX L T -110\r\nKPX L Tcaron -110\r\nKPX L Tcommaaccent -110\r\nKPX L V -110\r\nKPX L W -70\r\nKPX L Y -140\r\nKPX L Yacute -140\r\nKPX L Ydieresis -140\r\nKPX L quotedblright -140\r\nKPX L quoteright -160\r\nKPX L y -30\r\nKPX L yacute -30\r\nKPX L ydieresis -30\r\nKPX Lacute T -110\r\nKPX Lacute Tcaron -110\r\nKPX Lacute Tcommaaccent -110\r\nKPX Lacute V -110\r\nKPX Lacute W -70\r\nKPX Lacute Y -140\r\nKPX Lacute Yacute -140\r\nKPX Lacute Ydieresis -140\r\nKPX Lacute quotedblright -140\r\nKPX Lacute quoteright -160\r\nKPX Lacute y -30\r\nKPX Lacute yacute -30\r\nKPX Lacute ydieresis -30\r\nKPX Lcaron T -110\r\nKPX Lcaron Tcaron -110\r\nKPX Lcaron Tcommaaccent -110\r\nKPX Lcaron V -110\r\nKPX Lcaron W -70\r\nKPX Lcaron Y -140\r\nKPX Lcaron Yacute -140\r\nKPX Lcaron Ydieresis -140\r\nKPX Lcaron quotedblright -140\r\nKPX Lcaron quoteright -160\r\nKPX Lcaron y -30\r\nKPX Lcaron yacute -30\r\nKPX Lcaron ydieresis -30\r\nKPX Lcommaaccent T -110\r\nKPX Lcommaaccent Tcaron -110\r\nKPX Lcommaaccent Tcommaaccent -110\r\nKPX Lcommaaccent V -110\r\nKPX Lcommaaccent W -70\r\nKPX Lcommaaccent Y -140\r\nKPX Lcommaaccent Yacute -140\r\nKPX Lcommaaccent Ydieresis -140\r\nKPX Lcommaaccent quotedblright -140\r\nKPX Lcommaaccent quoteright -160\r\nKPX Lcommaaccent y -30\r\nKPX Lcommaaccent yacute -30\r\nKPX Lcommaaccent ydieresis -30\r\nKPX Lslash T -110\r\nKPX Lslash Tcaron -110\r\nKPX Lslash Tcommaaccent -110\r\nKPX Lslash V -110\r\nKPX Lslash W -70\r\nKPX Lslash Y -140\r\nKPX Lslash Yacute -140\r\nKPX Lslash Ydieresis -140\r\nKPX Lslash quotedblright -140\r\nKPX Lslash quoteright -160\r\nKPX Lslash y -30\r\nKPX Lslash yacute -30\r\nKPX Lslash ydieresis -30\r\nKPX O A -20\r\nKPX O Aacute -20\r\nKPX O Abreve -20\r\nKPX O Acircumflex -20\r\nKPX O Adieresis -20\r\nKPX O Agrave -20\r\nKPX O Amacron -20\r\nKPX O Aogonek -20\r\nKPX O Aring -20\r\nKPX O Atilde -20\r\nKPX O T -40\r\nKPX O Tcaron -40\r\nKPX O Tcommaaccent -40\r\nKPX O V -50\r\nKPX O W -30\r\nKPX O X -60\r\nKPX O Y -70\r\nKPX O Yacute -70\r\nKPX O Ydieresis -70\r\nKPX O comma -40\r\nKPX O period -40\r\nKPX Oacute A -20\r\nKPX Oacute Aacute -20\r\nKPX Oacute Abreve -20\r\nKPX Oacute Acircumflex -20\r\nKPX Oacute Adieresis -20\r\nKPX Oacute Agrave -20\r\nKPX Oacute Amacron -20\r\nKPX Oacute Aogonek -20\r\nKPX Oacute Aring -20\r\nKPX Oacute Atilde -20\r\nKPX Oacute T -40\r\nKPX Oacute Tcaron -40\r\nKPX Oacute Tcommaaccent -40\r\nKPX Oacute V -50\r\nKPX Oacute W -30\r\nKPX Oacute X -60\r\nKPX Oacute Y -70\r\nKPX Oacute Yacute -70\r\nKPX Oacute Ydieresis -70\r\nKPX Oacute comma -40\r\nKPX Oacute period -40\r\nKPX Ocircumflex A -20\r\nKPX Ocircumflex Aacute -20\r\nKPX Ocircumflex Abreve -20\r\nKPX Ocircumflex Acircumflex -20\r\nKPX Ocircumflex Adieresis -20\r\nKPX Ocircumflex Agrave -20\r\nKPX Ocircumflex Amacron -20\r\nKPX Ocircumflex Aogonek -20\r\nKPX Ocircumflex Aring -20\r\nKPX Ocircumflex Atilde -20\r\nKPX Ocircumflex T -40\r\nKPX Ocircumflex Tcaron -40\r\nKPX Ocircumflex Tcommaaccent -40\r\nKPX Ocircumflex V -50\r\nKPX Ocircumflex W -30\r\nKPX Ocircumflex X -60\r\nKPX Ocircumflex Y -70\r\nKPX Ocircumflex Yacute -70\r\nKPX Ocircumflex Ydieresis -70\r\nKPX Ocircumflex comma -40\r\nKPX Ocircumflex period -40\r\nKPX Odieresis A -20\r\nKPX Odieresis Aacute -20\r\nKPX Odieresis Abreve -20\r\nKPX Odieresis Acircumflex -20\r\nKPX Odieresis Adieresis -20\r\nKPX Odieresis Agrave -20\r\nKPX Odieresis Amacron -20\r\nKPX Odieresis Aogonek -20\r\nKPX Odieresis Aring -20\r\nKPX Odieresis Atilde -20\r\nKPX Odieresis T -40\r\nKPX Odieresis Tcaron -40\r\nKPX Odieresis Tcommaaccent -40\r\nKPX Odieresis V -50\r\nKPX Odieresis W -30\r\nKPX Odieresis X -60\r\nKPX Odieresis Y -70\r\nKPX Odieresis Yacute -70\r\nKPX Odieresis Ydieresis -70\r\nKPX Odieresis comma -40\r\nKPX Odieresis period -40\r\nKPX Ograve A -20\r\nKPX Ograve Aacute -20\r\nKPX Ograve Abreve -20\r\nKPX Ograve Acircumflex -20\r\nKPX Ograve Adieresis -20\r\nKPX Ograve Agrave -20\r\nKPX Ograve Amacron -20\r\nKPX Ograve Aogonek -20\r\nKPX Ograve Aring -20\r\nKPX Ograve Atilde -20\r\nKPX Ograve T -40\r\nKPX Ograve Tcaron -40\r\nKPX Ograve Tcommaaccent -40\r\nKPX Ograve V -50\r\nKPX Ograve W -30\r\nKPX Ograve X -60\r\nKPX Ograve Y -70\r\nKPX Ograve Yacute -70\r\nKPX Ograve Ydieresis -70\r\nKPX Ograve comma -40\r\nKPX Ograve period -40\r\nKPX Ohungarumlaut A -20\r\nKPX Ohungarumlaut Aacute -20\r\nKPX Ohungarumlaut Abreve -20\r\nKPX Ohungarumlaut Acircumflex -20\r\nKPX Ohungarumlaut Adieresis -20\r\nKPX Ohungarumlaut Agrave -20\r\nKPX Ohungarumlaut Amacron -20\r\nKPX Ohungarumlaut Aogonek -20\r\nKPX Ohungarumlaut Aring -20\r\nKPX Ohungarumlaut Atilde -20\r\nKPX Ohungarumlaut T -40\r\nKPX Ohungarumlaut Tcaron -40\r\nKPX Ohungarumlaut Tcommaaccent -40\r\nKPX Ohungarumlaut V -50\r\nKPX Ohungarumlaut W -30\r\nKPX Ohungarumlaut X -60\r\nKPX Ohungarumlaut Y -70\r\nKPX Ohungarumlaut Yacute -70\r\nKPX Ohungarumlaut Ydieresis -70\r\nKPX Ohungarumlaut comma -40\r\nKPX Ohungarumlaut period -40\r\nKPX Omacron A -20\r\nKPX Omacron Aacute -20\r\nKPX Omacron Abreve -20\r\nKPX Omacron Acircumflex -20\r\nKPX Omacron Adieresis -20\r\nKPX Omacron Agrave -20\r\nKPX Omacron Amacron -20\r\nKPX Omacron Aogonek -20\r\nKPX Omacron Aring -20\r\nKPX Omacron Atilde -20\r\nKPX Omacron T -40\r\nKPX Omacron Tcaron -40\r\nKPX Omacron Tcommaaccent -40\r\nKPX Omacron V -50\r\nKPX Omacron W -30\r\nKPX Omacron X -60\r\nKPX Omacron Y -70\r\nKPX Omacron Yacute -70\r\nKPX Omacron Ydieresis -70\r\nKPX Omacron comma -40\r\nKPX Omacron period -40\r\nKPX Oslash A -20\r\nKPX Oslash Aacute -20\r\nKPX Oslash Abreve -20\r\nKPX Oslash Acircumflex -20\r\nKPX Oslash Adieresis -20\r\nKPX Oslash Agrave -20\r\nKPX Oslash Amacron -20\r\nKPX Oslash Aogonek -20\r\nKPX Oslash Aring -20\r\nKPX Oslash Atilde -20\r\nKPX Oslash T -40\r\nKPX Oslash Tcaron -40\r\nKPX Oslash Tcommaaccent -40\r\nKPX Oslash V -50\r\nKPX Oslash W -30\r\nKPX Oslash X -60\r\nKPX Oslash Y -70\r\nKPX Oslash Yacute -70\r\nKPX Oslash Ydieresis -70\r\nKPX Oslash comma -40\r\nKPX Oslash period -40\r\nKPX Otilde A -20\r\nKPX Otilde Aacute -20\r\nKPX Otilde Abreve -20\r\nKPX Otilde Acircumflex -20\r\nKPX Otilde Adieresis -20\r\nKPX Otilde Agrave -20\r\nKPX Otilde Amacron -20\r\nKPX Otilde Aogonek -20\r\nKPX Otilde Aring -20\r\nKPX Otilde Atilde -20\r\nKPX Otilde T -40\r\nKPX Otilde Tcaron -40\r\nKPX Otilde Tcommaaccent -40\r\nKPX Otilde V -50\r\nKPX Otilde W -30\r\nKPX Otilde X -60\r\nKPX Otilde Y -70\r\nKPX Otilde Yacute -70\r\nKPX Otilde Ydieresis -70\r\nKPX Otilde comma -40\r\nKPX Otilde period -40\r\nKPX P A -120\r\nKPX P Aacute -120\r\nKPX P Abreve -120\r\nKPX P Acircumflex -120\r\nKPX P Adieresis -120\r\nKPX P Agrave -120\r\nKPX P Amacron -120\r\nKPX P Aogonek -120\r\nKPX P Aring -120\r\nKPX P Atilde -120\r\nKPX P a -40\r\nKPX P aacute -40\r\nKPX P abreve -40\r\nKPX P acircumflex -40\r\nKPX P adieresis -40\r\nKPX P agrave -40\r\nKPX P amacron -40\r\nKPX P aogonek -40\r\nKPX P aring -40\r\nKPX P atilde -40\r\nKPX P comma -180\r\nKPX P e -50\r\nKPX P eacute -50\r\nKPX P ecaron -50\r\nKPX P ecircumflex -50\r\nKPX P edieresis -50\r\nKPX P edotaccent -50\r\nKPX P egrave -50\r\nKPX P emacron -50\r\nKPX P eogonek -50\r\nKPX P o -50\r\nKPX P oacute -50\r\nKPX P ocircumflex -50\r\nKPX P odieresis -50\r\nKPX P ograve -50\r\nKPX P ohungarumlaut -50\r\nKPX P omacron -50\r\nKPX P oslash -50\r\nKPX P otilde -50\r\nKPX P period -180\r\nKPX Q U -10\r\nKPX Q Uacute -10\r\nKPX Q Ucircumflex -10\r\nKPX Q Udieresis -10\r\nKPX Q Ugrave -10\r\nKPX Q Uhungarumlaut -10\r\nKPX Q Umacron -10\r\nKPX Q Uogonek -10\r\nKPX Q Uring -10\r\nKPX R O -20\r\nKPX R Oacute -20\r\nKPX R Ocircumflex -20\r\nKPX R Odieresis -20\r\nKPX R Ograve -20\r\nKPX R Ohungarumlaut -20\r\nKPX R Omacron -20\r\nKPX R Oslash -20\r\nKPX R Otilde -20\r\nKPX R T -30\r\nKPX R Tcaron -30\r\nKPX R Tcommaaccent -30\r\nKPX R U -40\r\nKPX R Uacute -40\r\nKPX R Ucircumflex -40\r\nKPX R Udieresis -40\r\nKPX R Ugrave -40\r\nKPX R Uhungarumlaut -40\r\nKPX R Umacron -40\r\nKPX R Uogonek -40\r\nKPX R Uring -40\r\nKPX R V -50\r\nKPX R W -30\r\nKPX R Y -50\r\nKPX R Yacute -50\r\nKPX R Ydieresis -50\r\nKPX Racute O -20\r\nKPX Racute Oacute -20\r\nKPX Racute Ocircumflex -20\r\nKPX Racute Odieresis -20\r\nKPX Racute Ograve -20\r\nKPX Racute Ohungarumlaut -20\r\nKPX Racute Omacron -20\r\nKPX Racute Oslash -20\r\nKPX Racute Otilde -20\r\nKPX Racute T -30\r\nKPX Racute Tcaron -30\r\nKPX Racute Tcommaaccent -30\r\nKPX Racute U -40\r\nKPX Racute Uacute -40\r\nKPX Racute Ucircumflex -40\r\nKPX Racute Udieresis -40\r\nKPX Racute Ugrave -40\r\nKPX Racute Uhungarumlaut -40\r\nKPX Racute Umacron -40\r\nKPX Racute Uogonek -40\r\nKPX Racute Uring -40\r\nKPX Racute V -50\r\nKPX Racute W -30\r\nKPX Racute Y -50\r\nKPX Racute Yacute -50\r\nKPX Racute Ydieresis -50\r\nKPX Rcaron O -20\r\nKPX Rcaron Oacute -20\r\nKPX Rcaron Ocircumflex -20\r\nKPX Rcaron Odieresis -20\r\nKPX Rcaron Ograve -20\r\nKPX Rcaron Ohungarumlaut -20\r\nKPX Rcaron Omacron -20\r\nKPX Rcaron Oslash -20\r\nKPX Rcaron Otilde -20\r\nKPX Rcaron T -30\r\nKPX Rcaron Tcaron -30\r\nKPX Rcaron Tcommaaccent -30\r\nKPX Rcaron U -40\r\nKPX Rcaron Uacute -40\r\nKPX Rcaron Ucircumflex -40\r\nKPX Rcaron Udieresis -40\r\nKPX Rcaron Ugrave -40\r\nKPX Rcaron Uhungarumlaut -40\r\nKPX Rcaron Umacron -40\r\nKPX Rcaron Uogonek -40\r\nKPX Rcaron Uring -40\r\nKPX Rcaron V -50\r\nKPX Rcaron W -30\r\nKPX Rcaron Y -50\r\nKPX Rcaron Yacute -50\r\nKPX Rcaron Ydieresis -50\r\nKPX Rcommaaccent O -20\r\nKPX Rcommaaccent Oacute -20\r\nKPX Rcommaaccent Ocircumflex -20\r\nKPX Rcommaaccent Odieresis -20\r\nKPX Rcommaaccent Ograve -20\r\nKPX Rcommaaccent Ohungarumlaut -20\r\nKPX Rcommaaccent Omacron -20\r\nKPX Rcommaaccent Oslash -20\r\nKPX Rcommaaccent Otilde -20\r\nKPX Rcommaaccent T -30\r\nKPX Rcommaaccent Tcaron -30\r\nKPX Rcommaaccent Tcommaaccent -30\r\nKPX Rcommaaccent U -40\r\nKPX Rcommaaccent Uacute -40\r\nKPX Rcommaaccent Ucircumflex -40\r\nKPX Rcommaaccent Udieresis -40\r\nKPX Rcommaaccent Ugrave -40\r\nKPX Rcommaaccent Uhungarumlaut -40\r\nKPX Rcommaaccent Umacron -40\r\nKPX Rcommaaccent Uogonek -40\r\nKPX Rcommaaccent Uring -40\r\nKPX Rcommaaccent V -50\r\nKPX Rcommaaccent W -30\r\nKPX Rcommaaccent Y -50\r\nKPX Rcommaaccent Yacute -50\r\nKPX Rcommaaccent Ydieresis -50\r\nKPX S comma -20\r\nKPX S period -20\r\nKPX Sacute comma -20\r\nKPX Sacute period -20\r\nKPX Scaron comma -20\r\nKPX Scaron period -20\r\nKPX Scedilla comma -20\r\nKPX Scedilla period -20\r\nKPX Scommaaccent comma -20\r\nKPX Scommaaccent period -20\r\nKPX T A -120\r\nKPX T Aacute -120\r\nKPX T Abreve -120\r\nKPX T Acircumflex -120\r\nKPX T Adieresis -120\r\nKPX T Agrave -120\r\nKPX T Amacron -120\r\nKPX T Aogonek -120\r\nKPX T Aring -120\r\nKPX T Atilde -120\r\nKPX T O -40\r\nKPX T Oacute -40\r\nKPX T Ocircumflex -40\r\nKPX T Odieresis -40\r\nKPX T Ograve -40\r\nKPX T Ohungarumlaut -40\r\nKPX T Omacron -40\r\nKPX T Oslash -40\r\nKPX T Otilde -40\r\nKPX T a -120\r\nKPX T aacute -120\r\nKPX T abreve -60\r\nKPX T acircumflex -120\r\nKPX T adieresis -120\r\nKPX T agrave -120\r\nKPX T amacron -60\r\nKPX T aogonek -120\r\nKPX T aring -120\r\nKPX T atilde -60\r\nKPX T colon -20\r\nKPX T comma -120\r\nKPX T e -120\r\nKPX T eacute -120\r\nKPX T ecaron -120\r\nKPX T ecircumflex -120\r\nKPX T edieresis -120\r\nKPX T edotaccent -120\r\nKPX T egrave -60\r\nKPX T emacron -60\r\nKPX T eogonek -120\r\nKPX T hyphen -140\r\nKPX T o -120\r\nKPX T oacute -120\r\nKPX T ocircumflex -120\r\nKPX T odieresis -120\r\nKPX T ograve -120\r\nKPX T ohungarumlaut -120\r\nKPX T omacron -60\r\nKPX T oslash -120\r\nKPX T otilde -60\r\nKPX T period -120\r\nKPX T r -120\r\nKPX T racute -120\r\nKPX T rcaron -120\r\nKPX T rcommaaccent -120\r\nKPX T semicolon -20\r\nKPX T u -120\r\nKPX T uacute -120\r\nKPX T ucircumflex -120\r\nKPX T udieresis -120\r\nKPX T ugrave -120\r\nKPX T uhungarumlaut -120\r\nKPX T umacron -60\r\nKPX T uogonek -120\r\nKPX T uring -120\r\nKPX T w -120\r\nKPX T y -120\r\nKPX T yacute -120\r\nKPX T ydieresis -60\r\nKPX Tcaron A -120\r\nKPX Tcaron Aacute -120\r\nKPX Tcaron Abreve -120\r\nKPX Tcaron Acircumflex -120\r\nKPX Tcaron Adieresis -120\r\nKPX Tcaron Agrave -120\r\nKPX Tcaron Amacron -120\r\nKPX Tcaron Aogonek -120\r\nKPX Tcaron Aring -120\r\nKPX Tcaron Atilde -120\r\nKPX Tcaron O -40\r\nKPX Tcaron Oacute -40\r\nKPX Tcaron Ocircumflex -40\r\nKPX Tcaron Odieresis -40\r\nKPX Tcaron Ograve -40\r\nKPX Tcaron Ohungarumlaut -40\r\nKPX Tcaron Omacron -40\r\nKPX Tcaron Oslash -40\r\nKPX Tcaron Otilde -40\r\nKPX Tcaron a -120\r\nKPX Tcaron aacute -120\r\nKPX Tcaron abreve -60\r\nKPX Tcaron acircumflex -120\r\nKPX Tcaron adieresis -120\r\nKPX Tcaron agrave -120\r\nKPX Tcaron amacron -60\r\nKPX Tcaron aogonek -120\r\nKPX Tcaron aring -120\r\nKPX Tcaron atilde -60\r\nKPX Tcaron colon -20\r\nKPX Tcaron comma -120\r\nKPX Tcaron e -120\r\nKPX Tcaron eacute -120\r\nKPX Tcaron ecaron -120\r\nKPX Tcaron ecircumflex -120\r\nKPX Tcaron edieresis -120\r\nKPX Tcaron edotaccent -120\r\nKPX Tcaron egrave -60\r\nKPX Tcaron emacron -60\r\nKPX Tcaron eogonek -120\r\nKPX Tcaron hyphen -140\r\nKPX Tcaron o -120\r\nKPX Tcaron oacute -120\r\nKPX Tcaron ocircumflex -120\r\nKPX Tcaron odieresis -120\r\nKPX Tcaron ograve -120\r\nKPX Tcaron ohungarumlaut -120\r\nKPX Tcaron omacron -60\r\nKPX Tcaron oslash -120\r\nKPX Tcaron otilde -60\r\nKPX Tcaron period -120\r\nKPX Tcaron r -120\r\nKPX Tcaron racute -120\r\nKPX Tcaron rcaron -120\r\nKPX Tcaron rcommaaccent -120\r\nKPX Tcaron semicolon -20\r\nKPX Tcaron u -120\r\nKPX Tcaron uacute -120\r\nKPX Tcaron ucircumflex -120\r\nKPX Tcaron udieresis -120\r\nKPX Tcaron ugrave -120\r\nKPX Tcaron uhungarumlaut -120\r\nKPX Tcaron umacron -60\r\nKPX Tcaron uogonek -120\r\nKPX Tcaron uring -120\r\nKPX Tcaron w -120\r\nKPX Tcaron y -120\r\nKPX Tcaron yacute -120\r\nKPX Tcaron ydieresis -60\r\nKPX Tcommaaccent A -120\r\nKPX Tcommaaccent Aacute -120\r\nKPX Tcommaaccent Abreve -120\r\nKPX Tcommaaccent Acircumflex -120\r\nKPX Tcommaaccent Adieresis -120\r\nKPX Tcommaaccent Agrave -120\r\nKPX Tcommaaccent Amacron -120\r\nKPX Tcommaaccent Aogonek -120\r\nKPX Tcommaaccent Aring -120\r\nKPX Tcommaaccent Atilde -120\r\nKPX Tcommaaccent O -40\r\nKPX Tcommaaccent Oacute -40\r\nKPX Tcommaaccent Ocircumflex -40\r\nKPX Tcommaaccent Odieresis -40\r\nKPX Tcommaaccent Ograve -40\r\nKPX Tcommaaccent Ohungarumlaut -40\r\nKPX Tcommaaccent Omacron -40\r\nKPX Tcommaaccent Oslash -40\r\nKPX Tcommaaccent Otilde -40\r\nKPX Tcommaaccent a -120\r\nKPX Tcommaaccent aacute -120\r\nKPX Tcommaaccent abreve -60\r\nKPX Tcommaaccent acircumflex -120\r\nKPX Tcommaaccent adieresis -120\r\nKPX Tcommaaccent agrave -120\r\nKPX Tcommaaccent amacron -60\r\nKPX Tcommaaccent aogonek -120\r\nKPX Tcommaaccent aring -120\r\nKPX Tcommaaccent atilde -60\r\nKPX Tcommaaccent colon -20\r\nKPX Tcommaaccent comma -120\r\nKPX Tcommaaccent e -120\r\nKPX Tcommaaccent eacute -120\r\nKPX Tcommaaccent ecaron -120\r\nKPX Tcommaaccent ecircumflex -120\r\nKPX Tcommaaccent edieresis -120\r\nKPX Tcommaaccent edotaccent -120\r\nKPX Tcommaaccent egrave -60\r\nKPX Tcommaaccent emacron -60\r\nKPX Tcommaaccent eogonek -120\r\nKPX Tcommaaccent hyphen -140\r\nKPX Tcommaaccent o -120\r\nKPX Tcommaaccent oacute -120\r\nKPX Tcommaaccent ocircumflex -120\r\nKPX Tcommaaccent odieresis -120\r\nKPX Tcommaaccent ograve -120\r\nKPX Tcommaaccent ohungarumlaut -120\r\nKPX Tcommaaccent omacron -60\r\nKPX Tcommaaccent oslash -120\r\nKPX Tcommaaccent otilde -60\r\nKPX Tcommaaccent period -120\r\nKPX Tcommaaccent r -120\r\nKPX Tcommaaccent racute -120\r\nKPX Tcommaaccent rcaron -120\r\nKPX Tcommaaccent rcommaaccent -120\r\nKPX Tcommaaccent semicolon -20\r\nKPX Tcommaaccent u -120\r\nKPX Tcommaaccent uacute -120\r\nKPX Tcommaaccent ucircumflex -120\r\nKPX Tcommaaccent udieresis -120\r\nKPX Tcommaaccent ugrave -120\r\nKPX Tcommaaccent uhungarumlaut -120\r\nKPX Tcommaaccent umacron -60\r\nKPX Tcommaaccent uogonek -120\r\nKPX Tcommaaccent uring -120\r\nKPX Tcommaaccent w -120\r\nKPX Tcommaaccent y -120\r\nKPX Tcommaaccent yacute -120\r\nKPX Tcommaaccent ydieresis -60\r\nKPX U A -40\r\nKPX U Aacute -40\r\nKPX U Abreve -40\r\nKPX U Acircumflex -40\r\nKPX U Adieresis -40\r\nKPX U Agrave -40\r\nKPX U Amacron -40\r\nKPX U Aogonek -40\r\nKPX U Aring -40\r\nKPX U Atilde -40\r\nKPX U comma -40\r\nKPX U period -40\r\nKPX Uacute A -40\r\nKPX Uacute Aacute -40\r\nKPX Uacute Abreve -40\r\nKPX Uacute Acircumflex -40\r\nKPX Uacute Adieresis -40\r\nKPX Uacute Agrave -40\r\nKPX Uacute Amacron -40\r\nKPX Uacute Aogonek -40\r\nKPX Uacute Aring -40\r\nKPX Uacute Atilde -40\r\nKPX Uacute comma -40\r\nKPX Uacute period -40\r\nKPX Ucircumflex A -40\r\nKPX Ucircumflex Aacute -40\r\nKPX Ucircumflex Abreve -40\r\nKPX Ucircumflex Acircumflex -40\r\nKPX Ucircumflex Adieresis -40\r\nKPX Ucircumflex Agrave -40\r\nKPX Ucircumflex Amacron -40\r\nKPX Ucircumflex Aogonek -40\r\nKPX Ucircumflex Aring -40\r\nKPX Ucircumflex Atilde -40\r\nKPX Ucircumflex comma -40\r\nKPX Ucircumflex period -40\r\nKPX Udieresis A -40\r\nKPX Udieresis Aacute -40\r\nKPX Udieresis Abreve -40\r\nKPX Udieresis Acircumflex -40\r\nKPX Udieresis Adieresis -40\r\nKPX Udieresis Agrave -40\r\nKPX Udieresis Amacron -40\r\nKPX Udieresis Aogonek -40\r\nKPX Udieresis Aring -40\r\nKPX Udieresis Atilde -40\r\nKPX Udieresis comma -40\r\nKPX Udieresis period -40\r\nKPX Ugrave A -40\r\nKPX Ugrave Aacute -40\r\nKPX Ugrave Abreve -40\r\nKPX Ugrave Acircumflex -40\r\nKPX Ugrave Adieresis -40\r\nKPX Ugrave Agrave -40\r\nKPX Ugrave Amacron -40\r\nKPX Ugrave Aogonek -40\r\nKPX Ugrave Aring -40\r\nKPX Ugrave Atilde -40\r\nKPX Ugrave comma -40\r\nKPX Ugrave period -40\r\nKPX Uhungarumlaut A -40\r\nKPX Uhungarumlaut Aacute -40\r\nKPX Uhungarumlaut Abreve -40\r\nKPX Uhungarumlaut Acircumflex -40\r\nKPX Uhungarumlaut Adieresis -40\r\nKPX Uhungarumlaut Agrave -40\r\nKPX Uhungarumlaut Amacron -40\r\nKPX Uhungarumlaut Aogonek -40\r\nKPX Uhungarumlaut Aring -40\r\nKPX Uhungarumlaut Atilde -40\r\nKPX Uhungarumlaut comma -40\r\nKPX Uhungarumlaut period -40\r\nKPX Umacron A -40\r\nKPX Umacron Aacute -40\r\nKPX Umacron Abreve -40\r\nKPX Umacron Acircumflex -40\r\nKPX Umacron Adieresis -40\r\nKPX Umacron Agrave -40\r\nKPX Umacron Amacron -40\r\nKPX Umacron Aogonek -40\r\nKPX Umacron Aring -40\r\nKPX Umacron Atilde -40\r\nKPX Umacron comma -40\r\nKPX Umacron period -40\r\nKPX Uogonek A -40\r\nKPX Uogonek Aacute -40\r\nKPX Uogonek Abreve -40\r\nKPX Uogonek Acircumflex -40\r\nKPX Uogonek Adieresis -40\r\nKPX Uogonek Agrave -40\r\nKPX Uogonek Amacron -40\r\nKPX Uogonek Aogonek -40\r\nKPX Uogonek Aring -40\r\nKPX Uogonek Atilde -40\r\nKPX Uogonek comma -40\r\nKPX Uogonek period -40\r\nKPX Uring A -40\r\nKPX Uring Aacute -40\r\nKPX Uring Abreve -40\r\nKPX Uring Acircumflex -40\r\nKPX Uring Adieresis -40\r\nKPX Uring Agrave -40\r\nKPX Uring Amacron -40\r\nKPX Uring Aogonek -40\r\nKPX Uring Aring -40\r\nKPX Uring Atilde -40\r\nKPX Uring comma -40\r\nKPX Uring period -40\r\nKPX V A -80\r\nKPX V Aacute -80\r\nKPX V Abreve -80\r\nKPX V Acircumflex -80\r\nKPX V Adieresis -80\r\nKPX V Agrave -80\r\nKPX V Amacron -80\r\nKPX V Aogonek -80\r\nKPX V Aring -80\r\nKPX V Atilde -80\r\nKPX V G -40\r\nKPX V Gbreve -40\r\nKPX V Gcommaaccent -40\r\nKPX V O -40\r\nKPX V Oacute -40\r\nKPX V Ocircumflex -40\r\nKPX V Odieresis -40\r\nKPX V Ograve -40\r\nKPX V Ohungarumlaut -40\r\nKPX V Omacron -40\r\nKPX V Oslash -40\r\nKPX V Otilde -40\r\nKPX V a -70\r\nKPX V aacute -70\r\nKPX V abreve -70\r\nKPX V acircumflex -70\r\nKPX V adieresis -70\r\nKPX V agrave -70\r\nKPX V amacron -70\r\nKPX V aogonek -70\r\nKPX V aring -70\r\nKPX V atilde -70\r\nKPX V colon -40\r\nKPX V comma -125\r\nKPX V e -80\r\nKPX V eacute -80\r\nKPX V ecaron -80\r\nKPX V ecircumflex -80\r\nKPX V edieresis -80\r\nKPX V edotaccent -80\r\nKPX V egrave -80\r\nKPX V emacron -80\r\nKPX V eogonek -80\r\nKPX V hyphen -80\r\nKPX V o -80\r\nKPX V oacute -80\r\nKPX V ocircumflex -80\r\nKPX V odieresis -80\r\nKPX V ograve -80\r\nKPX V ohungarumlaut -80\r\nKPX V omacron -80\r\nKPX V oslash -80\r\nKPX V otilde -80\r\nKPX V period -125\r\nKPX V semicolon -40\r\nKPX V u -70\r\nKPX V uacute -70\r\nKPX V ucircumflex -70\r\nKPX V udieresis -70\r\nKPX V ugrave -70\r\nKPX V uhungarumlaut -70\r\nKPX V umacron -70\r\nKPX V uogonek -70\r\nKPX V uring -70\r\nKPX W A -50\r\nKPX W Aacute -50\r\nKPX W Abreve -50\r\nKPX W Acircumflex -50\r\nKPX W Adieresis -50\r\nKPX W Agrave -50\r\nKPX W Amacron -50\r\nKPX W Aogonek -50\r\nKPX W Aring -50\r\nKPX W Atilde -50\r\nKPX W O -20\r\nKPX W Oacute -20\r\nKPX W Ocircumflex -20\r\nKPX W Odieresis -20\r\nKPX W Ograve -20\r\nKPX W Ohungarumlaut -20\r\nKPX W Omacron -20\r\nKPX W Oslash -20\r\nKPX W Otilde -20\r\nKPX W a -40\r\nKPX W aacute -40\r\nKPX W abreve -40\r\nKPX W acircumflex -40\r\nKPX W adieresis -40\r\nKPX W agrave -40\r\nKPX W amacron -40\r\nKPX W aogonek -40\r\nKPX W aring -40\r\nKPX W atilde -40\r\nKPX W comma -80\r\nKPX W e -30\r\nKPX W eacute -30\r\nKPX W ecaron -30\r\nKPX W ecircumflex -30\r\nKPX W edieresis -30\r\nKPX W edotaccent -30\r\nKPX W egrave -30\r\nKPX W emacron -30\r\nKPX W eogonek -30\r\nKPX W hyphen -40\r\nKPX W o -30\r\nKPX W oacute -30\r\nKPX W ocircumflex -30\r\nKPX W odieresis -30\r\nKPX W ograve -30\r\nKPX W ohungarumlaut -30\r\nKPX W omacron -30\r\nKPX W oslash -30\r\nKPX W otilde -30\r\nKPX W period -80\r\nKPX W u -30\r\nKPX W uacute -30\r\nKPX W ucircumflex -30\r\nKPX W udieresis -30\r\nKPX W ugrave -30\r\nKPX W uhungarumlaut -30\r\nKPX W umacron -30\r\nKPX W uogonek -30\r\nKPX W uring -30\r\nKPX W y -20\r\nKPX W yacute -20\r\nKPX W ydieresis -20\r\nKPX Y A -110\r\nKPX Y Aacute -110\r\nKPX Y Abreve -110\r\nKPX Y Acircumflex -110\r\nKPX Y Adieresis -110\r\nKPX Y Agrave -110\r\nKPX Y Amacron -110\r\nKPX Y Aogonek -110\r\nKPX Y Aring -110\r\nKPX Y Atilde -110\r\nKPX Y O -85\r\nKPX Y Oacute -85\r\nKPX Y Ocircumflex -85\r\nKPX Y Odieresis -85\r\nKPX Y Ograve -85\r\nKPX Y Ohungarumlaut -85\r\nKPX Y Omacron -85\r\nKPX Y Oslash -85\r\nKPX Y Otilde -85\r\nKPX Y a -140\r\nKPX Y aacute -140\r\nKPX Y abreve -70\r\nKPX Y acircumflex -140\r\nKPX Y adieresis -140\r\nKPX Y agrave -140\r\nKPX Y amacron -70\r\nKPX Y aogonek -140\r\nKPX Y aring -140\r\nKPX Y atilde -140\r\nKPX Y colon -60\r\nKPX Y comma -140\r\nKPX Y e -140\r\nKPX Y eacute -140\r\nKPX Y ecaron -140\r\nKPX Y ecircumflex -140\r\nKPX Y edieresis -140\r\nKPX Y edotaccent -140\r\nKPX Y egrave -140\r\nKPX Y emacron -70\r\nKPX Y eogonek -140\r\nKPX Y hyphen -140\r\nKPX Y i -20\r\nKPX Y iacute -20\r\nKPX Y iogonek -20\r\nKPX Y o -140\r\nKPX Y oacute -140\r\nKPX Y ocircumflex -140\r\nKPX Y odieresis -140\r\nKPX Y ograve -140\r\nKPX Y ohungarumlaut -140\r\nKPX Y omacron -140\r\nKPX Y oslash -140\r\nKPX Y otilde -140\r\nKPX Y period -140\r\nKPX Y semicolon -60\r\nKPX Y u -110\r\nKPX Y uacute -110\r\nKPX Y ucircumflex -110\r\nKPX Y udieresis -110\r\nKPX Y ugrave -110\r\nKPX Y uhungarumlaut -110\r\nKPX Y umacron -110\r\nKPX Y uogonek -110\r\nKPX Y uring -110\r\nKPX Yacute A -110\r\nKPX Yacute Aacute -110\r\nKPX Yacute Abreve -110\r\nKPX Yacute Acircumflex -110\r\nKPX Yacute Adieresis -110\r\nKPX Yacute Agrave -110\r\nKPX Yacute Amacron -110\r\nKPX Yacute Aogonek -110\r\nKPX Yacute Aring -110\r\nKPX Yacute Atilde -110\r\nKPX Yacute O -85\r\nKPX Yacute Oacute -85\r\nKPX Yacute Ocircumflex -85\r\nKPX Yacute Odieresis -85\r\nKPX Yacute Ograve -85\r\nKPX Yacute Ohungarumlaut -85\r\nKPX Yacute Omacron -85\r\nKPX Yacute Oslash -85\r\nKPX Yacute Otilde -85\r\nKPX Yacute a -140\r\nKPX Yacute aacute -140\r\nKPX Yacute abreve -70\r\nKPX Yacute acircumflex -140\r\nKPX Yacute adieresis -140\r\nKPX Yacute agrave -140\r\nKPX Yacute amacron -70\r\nKPX Yacute aogonek -140\r\nKPX Yacute aring -140\r\nKPX Yacute atilde -70\r\nKPX Yacute colon -60\r\nKPX Yacute comma -140\r\nKPX Yacute e -140\r\nKPX Yacute eacute -140\r\nKPX Yacute ecaron -140\r\nKPX Yacute ecircumflex -140\r\nKPX Yacute edieresis -140\r\nKPX Yacute edotaccent -140\r\nKPX Yacute egrave -140\r\nKPX Yacute emacron -70\r\nKPX Yacute eogonek -140\r\nKPX Yacute hyphen -140\r\nKPX Yacute i -20\r\nKPX Yacute iacute -20\r\nKPX Yacute iogonek -20\r\nKPX Yacute o -140\r\nKPX Yacute oacute -140\r\nKPX Yacute ocircumflex -140\r\nKPX Yacute odieresis -140\r\nKPX Yacute ograve -140\r\nKPX Yacute ohungarumlaut -140\r\nKPX Yacute omacron -70\r\nKPX Yacute oslash -140\r\nKPX Yacute otilde -140\r\nKPX Yacute period -140\r\nKPX Yacute semicolon -60\r\nKPX Yacute u -110\r\nKPX Yacute uacute -110\r\nKPX Yacute ucircumflex -110\r\nKPX Yacute udieresis -110\r\nKPX Yacute ugrave -110\r\nKPX Yacute uhungarumlaut -110\r\nKPX Yacute umacron -110\r\nKPX Yacute uogonek -110\r\nKPX Yacute uring -110\r\nKPX Ydieresis A -110\r\nKPX Ydieresis Aacute -110\r\nKPX Ydieresis Abreve -110\r\nKPX Ydieresis Acircumflex -110\r\nKPX Ydieresis Adieresis -110\r\nKPX Ydieresis Agrave -110\r\nKPX Ydieresis Amacron -110\r\nKPX Ydieresis Aogonek -110\r\nKPX Ydieresis Aring -110\r\nKPX Ydieresis Atilde -110\r\nKPX Ydieresis O -85\r\nKPX Ydieresis Oacute -85\r\nKPX Ydieresis Ocircumflex -85\r\nKPX Ydieresis Odieresis -85\r\nKPX Ydieresis Ograve -85\r\nKPX Ydieresis Ohungarumlaut -85\r\nKPX Ydieresis Omacron -85\r\nKPX Ydieresis Oslash -85\r\nKPX Ydieresis Otilde -85\r\nKPX Ydieresis a -140\r\nKPX Ydieresis aacute -140\r\nKPX Ydieresis abreve -70\r\nKPX Ydieresis acircumflex -140\r\nKPX Ydieresis adieresis -140\r\nKPX Ydieresis agrave -140\r\nKPX Ydieresis amacron -70\r\nKPX Ydieresis aogonek -140\r\nKPX Ydieresis aring -140\r\nKPX Ydieresis atilde -70\r\nKPX Ydieresis colon -60\r\nKPX Ydieresis comma -140\r\nKPX Ydieresis e -140\r\nKPX Ydieresis eacute -140\r\nKPX Ydieresis ecaron -140\r\nKPX Ydieresis ecircumflex -140\r\nKPX Ydieresis edieresis -140\r\nKPX Ydieresis edotaccent -140\r\nKPX Ydieresis egrave -140\r\nKPX Ydieresis emacron -70\r\nKPX Ydieresis eogonek -140\r\nKPX Ydieresis hyphen -140\r\nKPX Ydieresis i -20\r\nKPX Ydieresis iacute -20\r\nKPX Ydieresis iogonek -20\r\nKPX Ydieresis o -140\r\nKPX Ydieresis oacute -140\r\nKPX Ydieresis ocircumflex -140\r\nKPX Ydieresis odieresis -140\r\nKPX Ydieresis ograve -140\r\nKPX Ydieresis ohungarumlaut -140\r\nKPX Ydieresis omacron -140\r\nKPX Ydieresis oslash -140\r\nKPX Ydieresis otilde -140\r\nKPX Ydieresis period -140\r\nKPX Ydieresis semicolon -60\r\nKPX Ydieresis u -110\r\nKPX Ydieresis uacute -110\r\nKPX Ydieresis ucircumflex -110\r\nKPX Ydieresis udieresis -110\r\nKPX Ydieresis ugrave -110\r\nKPX Ydieresis uhungarumlaut -110\r\nKPX Ydieresis umacron -110\r\nKPX Ydieresis uogonek -110\r\nKPX Ydieresis uring -110\r\nKPX a v -20\r\nKPX a w -20\r\nKPX a y -30\r\nKPX a yacute -30\r\nKPX a ydieresis -30\r\nKPX aacute v -20\r\nKPX aacute w -20\r\nKPX aacute y -30\r\nKPX aacute yacute -30\r\nKPX aacute ydieresis -30\r\nKPX abreve v -20\r\nKPX abreve w -20\r\nKPX abreve y -30\r\nKPX abreve yacute -30\r\nKPX abreve ydieresis -30\r\nKPX acircumflex v -20\r\nKPX acircumflex w -20\r\nKPX acircumflex y -30\r\nKPX acircumflex yacute -30\r\nKPX acircumflex ydieresis -30\r\nKPX adieresis v -20\r\nKPX adieresis w -20\r\nKPX adieresis y -30\r\nKPX adieresis yacute -30\r\nKPX adieresis ydieresis -30\r\nKPX agrave v -20\r\nKPX agrave w -20\r\nKPX agrave y -30\r\nKPX agrave yacute -30\r\nKPX agrave ydieresis -30\r\nKPX amacron v -20\r\nKPX amacron w -20\r\nKPX amacron y -30\r\nKPX amacron yacute -30\r\nKPX amacron ydieresis -30\r\nKPX aogonek v -20\r\nKPX aogonek w -20\r\nKPX aogonek y -30\r\nKPX aogonek yacute -30\r\nKPX aogonek ydieresis -30\r\nKPX aring v -20\r\nKPX aring w -20\r\nKPX aring y -30\r\nKPX aring yacute -30\r\nKPX aring ydieresis -30\r\nKPX atilde v -20\r\nKPX atilde w -20\r\nKPX atilde y -30\r\nKPX atilde yacute -30\r\nKPX atilde ydieresis -30\r\nKPX b b -10\r\nKPX b comma -40\r\nKPX b l -20\r\nKPX b lacute -20\r\nKPX b lcommaaccent -20\r\nKPX b lslash -20\r\nKPX b period -40\r\nKPX b u -20\r\nKPX b uacute -20\r\nKPX b ucircumflex -20\r\nKPX b udieresis -20\r\nKPX b ugrave -20\r\nKPX b uhungarumlaut -20\r\nKPX b umacron -20\r\nKPX b uogonek -20\r\nKPX b uring -20\r\nKPX b v -20\r\nKPX b y -20\r\nKPX b yacute -20\r\nKPX b ydieresis -20\r\nKPX c comma -15\r\nKPX c k -20\r\nKPX c kcommaaccent -20\r\nKPX cacute comma -15\r\nKPX cacute k -20\r\nKPX cacute kcommaaccent -20\r\nKPX ccaron comma -15\r\nKPX ccaron k -20\r\nKPX ccaron kcommaaccent -20\r\nKPX ccedilla comma -15\r\nKPX ccedilla k -20\r\nKPX ccedilla kcommaaccent -20\r\nKPX colon space -50\r\nKPX comma quotedblright -100\r\nKPX comma quoteright -100\r\nKPX e comma -15\r\nKPX e period -15\r\nKPX e v -30\r\nKPX e w -20\r\nKPX e x -30\r\nKPX e y -20\r\nKPX e yacute -20\r\nKPX e ydieresis -20\r\nKPX eacute comma -15\r\nKPX eacute period -15\r\nKPX eacute v -30\r\nKPX eacute w -20\r\nKPX eacute x -30\r\nKPX eacute y -20\r\nKPX eacute yacute -20\r\nKPX eacute ydieresis -20\r\nKPX ecaron comma -15\r\nKPX ecaron period -15\r\nKPX ecaron v -30\r\nKPX ecaron w -20\r\nKPX ecaron x -30\r\nKPX ecaron y -20\r\nKPX ecaron yacute -20\r\nKPX ecaron ydieresis -20\r\nKPX ecircumflex comma -15\r\nKPX ecircumflex period -15\r\nKPX ecircumflex v -30\r\nKPX ecircumflex w -20\r\nKPX ecircumflex x -30\r\nKPX ecircumflex y -20\r\nKPX ecircumflex yacute -20\r\nKPX ecircumflex ydieresis -20\r\nKPX edieresis comma -15\r\nKPX edieresis period -15\r\nKPX edieresis v -30\r\nKPX edieresis w -20\r\nKPX edieresis x -30\r\nKPX edieresis y -20\r\nKPX edieresis yacute -20\r\nKPX edieresis ydieresis -20\r\nKPX edotaccent comma -15\r\nKPX edotaccent period -15\r\nKPX edotaccent v -30\r\nKPX edotaccent w -20\r\nKPX edotaccent x -30\r\nKPX edotaccent y -20\r\nKPX edotaccent yacute -20\r\nKPX edotaccent ydieresis -20\r\nKPX egrave comma -15\r\nKPX egrave period -15\r\nKPX egrave v -30\r\nKPX egrave w -20\r\nKPX egrave x -30\r\nKPX egrave y -20\r\nKPX egrave yacute -20\r\nKPX egrave ydieresis -20\r\nKPX emacron comma -15\r\nKPX emacron period -15\r\nKPX emacron v -30\r\nKPX emacron w -20\r\nKPX emacron x -30\r\nKPX emacron y -20\r\nKPX emacron yacute -20\r\nKPX emacron ydieresis -20\r\nKPX eogonek comma -15\r\nKPX eogonek period -15\r\nKPX eogonek v -30\r\nKPX eogonek w -20\r\nKPX eogonek x -30\r\nKPX eogonek y -20\r\nKPX eogonek yacute -20\r\nKPX eogonek ydieresis -20\r\nKPX f a -30\r\nKPX f aacute -30\r\nKPX f abreve -30\r\nKPX f acircumflex -30\r\nKPX f adieresis -30\r\nKPX f agrave -30\r\nKPX f amacron -30\r\nKPX f aogonek -30\r\nKPX f aring -30\r\nKPX f atilde -30\r\nKPX f comma -30\r\nKPX f dotlessi -28\r\nKPX f e -30\r\nKPX f eacute -30\r\nKPX f ecaron -30\r\nKPX f ecircumflex -30\r\nKPX f edieresis -30\r\nKPX f edotaccent -30\r\nKPX f egrave -30\r\nKPX f emacron -30\r\nKPX f eogonek -30\r\nKPX f o -30\r\nKPX f oacute -30\r\nKPX f ocircumflex -30\r\nKPX f odieresis -30\r\nKPX f ograve -30\r\nKPX f ohungarumlaut -30\r\nKPX f omacron -30\r\nKPX f oslash -30\r\nKPX f otilde -30\r\nKPX f period -30\r\nKPX f quotedblright 60\r\nKPX f quoteright 50\r\nKPX g r -10\r\nKPX g racute -10\r\nKPX g rcaron -10\r\nKPX g rcommaaccent -10\r\nKPX gbreve r -10\r\nKPX gbreve racute -10\r\nKPX gbreve rcaron -10\r\nKPX gbreve rcommaaccent -10\r\nKPX gcommaaccent r -10\r\nKPX gcommaaccent racute -10\r\nKPX gcommaaccent rcaron -10\r\nKPX gcommaaccent rcommaaccent -10\r\nKPX h y -30\r\nKPX h yacute -30\r\nKPX h ydieresis -30\r\nKPX k e -20\r\nKPX k eacute -20\r\nKPX k ecaron -20\r\nKPX k ecircumflex -20\r\nKPX k edieresis -20\r\nKPX k edotaccent -20\r\nKPX k egrave -20\r\nKPX k emacron -20\r\nKPX k eogonek -20\r\nKPX k o -20\r\nKPX k oacute -20\r\nKPX k ocircumflex -20\r\nKPX k odieresis -20\r\nKPX k ograve -20\r\nKPX k ohungarumlaut -20\r\nKPX k omacron -20\r\nKPX k oslash -20\r\nKPX k otilde -20\r\nKPX kcommaaccent e -20\r\nKPX kcommaaccent eacute -20\r\nKPX kcommaaccent ecaron -20\r\nKPX kcommaaccent ecircumflex -20\r\nKPX kcommaaccent edieresis -20\r\nKPX kcommaaccent edotaccent -20\r\nKPX kcommaaccent egrave -20\r\nKPX kcommaaccent emacron -20\r\nKPX kcommaaccent eogonek -20\r\nKPX kcommaaccent o -20\r\nKPX kcommaaccent oacute -20\r\nKPX kcommaaccent ocircumflex -20\r\nKPX kcommaaccent odieresis -20\r\nKPX kcommaaccent ograve -20\r\nKPX kcommaaccent ohungarumlaut -20\r\nKPX kcommaaccent omacron -20\r\nKPX kcommaaccent oslash -20\r\nKPX kcommaaccent otilde -20\r\nKPX m u -10\r\nKPX m uacute -10\r\nKPX m ucircumflex -10\r\nKPX m udieresis -10\r\nKPX m ugrave -10\r\nKPX m uhungarumlaut -10\r\nKPX m umacron -10\r\nKPX m uogonek -10\r\nKPX m uring -10\r\nKPX m y -15\r\nKPX m yacute -15\r\nKPX m ydieresis -15\r\nKPX n u -10\r\nKPX n uacute -10\r\nKPX n ucircumflex -10\r\nKPX n udieresis -10\r\nKPX n ugrave -10\r\nKPX n uhungarumlaut -10\r\nKPX n umacron -10\r\nKPX n uogonek -10\r\nKPX n uring -10\r\nKPX n v -20\r\nKPX n y -15\r\nKPX n yacute -15\r\nKPX n ydieresis -15\r\nKPX nacute u -10\r\nKPX nacute uacute -10\r\nKPX nacute ucircumflex -10\r\nKPX nacute udieresis -10\r\nKPX nacute ugrave -10\r\nKPX nacute uhungarumlaut -10\r\nKPX nacute umacron -10\r\nKPX nacute uogonek -10\r\nKPX nacute uring -10\r\nKPX nacute v -20\r\nKPX nacute y -15\r\nKPX nacute yacute -15\r\nKPX nacute ydieresis -15\r\nKPX ncaron u -10\r\nKPX ncaron uacute -10\r\nKPX ncaron ucircumflex -10\r\nKPX ncaron udieresis -10\r\nKPX ncaron ugrave -10\r\nKPX ncaron uhungarumlaut -10\r\nKPX ncaron umacron -10\r\nKPX ncaron uogonek -10\r\nKPX ncaron uring -10\r\nKPX ncaron v -20\r\nKPX ncaron y -15\r\nKPX ncaron yacute -15\r\nKPX ncaron ydieresis -15\r\nKPX ncommaaccent u -10\r\nKPX ncommaaccent uacute -10\r\nKPX ncommaaccent ucircumflex -10\r\nKPX ncommaaccent udieresis -10\r\nKPX ncommaaccent ugrave -10\r\nKPX ncommaaccent uhungarumlaut -10\r\nKPX ncommaaccent umacron -10\r\nKPX ncommaaccent uogonek -10\r\nKPX ncommaaccent uring -10\r\nKPX ncommaaccent v -20\r\nKPX ncommaaccent y -15\r\nKPX ncommaaccent yacute -15\r\nKPX ncommaaccent ydieresis -15\r\nKPX ntilde u -10\r\nKPX ntilde uacute -10\r\nKPX ntilde ucircumflex -10\r\nKPX ntilde udieresis -10\r\nKPX ntilde ugrave -10\r\nKPX ntilde uhungarumlaut -10\r\nKPX ntilde umacron -10\r\nKPX ntilde uogonek -10\r\nKPX ntilde uring -10\r\nKPX ntilde v -20\r\nKPX ntilde y -15\r\nKPX ntilde yacute -15\r\nKPX ntilde ydieresis -15\r\nKPX o comma -40\r\nKPX o period -40\r\nKPX o v -15\r\nKPX o w -15\r\nKPX o x -30\r\nKPX o y -30\r\nKPX o yacute -30\r\nKPX o ydieresis -30\r\nKPX oacute comma -40\r\nKPX oacute period -40\r\nKPX oacute v -15\r\nKPX oacute w -15\r\nKPX oacute x -30\r\nKPX oacute y -30\r\nKPX oacute yacute -30\r\nKPX oacute ydieresis -30\r\nKPX ocircumflex comma -40\r\nKPX ocircumflex period -40\r\nKPX ocircumflex v -15\r\nKPX ocircumflex w -15\r\nKPX ocircumflex x -30\r\nKPX ocircumflex y -30\r\nKPX ocircumflex yacute -30\r\nKPX ocircumflex ydieresis -30\r\nKPX odieresis comma -40\r\nKPX odieresis period -40\r\nKPX odieresis v -15\r\nKPX odieresis w -15\r\nKPX odieresis x -30\r\nKPX odieresis y -30\r\nKPX odieresis yacute -30\r\nKPX odieresis ydieresis -30\r\nKPX ograve comma -40\r\nKPX ograve period -40\r\nKPX ograve v -15\r\nKPX ograve w -15\r\nKPX ograve x -30\r\nKPX ograve y -30\r\nKPX ograve yacute -30\r\nKPX ograve ydieresis -30\r\nKPX ohungarumlaut comma -40\r\nKPX ohungarumlaut period -40\r\nKPX ohungarumlaut v -15\r\nKPX ohungarumlaut w -15\r\nKPX ohungarumlaut x -30\r\nKPX ohungarumlaut y -30\r\nKPX ohungarumlaut yacute -30\r\nKPX ohungarumlaut ydieresis -30\r\nKPX omacron comma -40\r\nKPX omacron period -40\r\nKPX omacron v -15\r\nKPX omacron w -15\r\nKPX omacron x -30\r\nKPX omacron y -30\r\nKPX omacron yacute -30\r\nKPX omacron ydieresis -30\r\nKPX oslash a -55\r\nKPX oslash aacute -55\r\nKPX oslash abreve -55\r\nKPX oslash acircumflex -55\r\nKPX oslash adieresis -55\r\nKPX oslash agrave -55\r\nKPX oslash amacron -55\r\nKPX oslash aogonek -55\r\nKPX oslash aring -55\r\nKPX oslash atilde -55\r\nKPX oslash b -55\r\nKPX oslash c -55\r\nKPX oslash cacute -55\r\nKPX oslash ccaron -55\r\nKPX oslash ccedilla -55\r\nKPX oslash comma -95\r\nKPX oslash d -55\r\nKPX oslash dcroat -55\r\nKPX oslash e -55\r\nKPX oslash eacute -55\r\nKPX oslash ecaron -55\r\nKPX oslash ecircumflex -55\r\nKPX oslash edieresis -55\r\nKPX oslash edotaccent -55\r\nKPX oslash egrave -55\r\nKPX oslash emacron -55\r\nKPX oslash eogonek -55\r\nKPX oslash f -55\r\nKPX oslash g -55\r\nKPX oslash gbreve -55\r\nKPX oslash gcommaaccent -55\r\nKPX oslash h -55\r\nKPX oslash i -55\r\nKPX oslash iacute -55\r\nKPX oslash icircumflex -55\r\nKPX oslash idieresis -55\r\nKPX oslash igrave -55\r\nKPX oslash imacron -55\r\nKPX oslash iogonek -55\r\nKPX oslash j -55\r\nKPX oslash k -55\r\nKPX oslash kcommaaccent -55\r\nKPX oslash l -55\r\nKPX oslash lacute -55\r\nKPX oslash lcommaaccent -55\r\nKPX oslash lslash -55\r\nKPX oslash m -55\r\nKPX oslash n -55\r\nKPX oslash nacute -55\r\nKPX oslash ncaron -55\r\nKPX oslash ncommaaccent -55\r\nKPX oslash ntilde -55\r\nKPX oslash o -55\r\nKPX oslash oacute -55\r\nKPX oslash ocircumflex -55\r\nKPX oslash odieresis -55\r\nKPX oslash ograve -55\r\nKPX oslash ohungarumlaut -55\r\nKPX oslash omacron -55\r\nKPX oslash oslash -55\r\nKPX oslash otilde -55\r\nKPX oslash p -55\r\nKPX oslash period -95\r\nKPX oslash q -55\r\nKPX oslash r -55\r\nKPX oslash racute -55\r\nKPX oslash rcaron -55\r\nKPX oslash rcommaaccent -55\r\nKPX oslash s -55\r\nKPX oslash sacute -55\r\nKPX oslash scaron -55\r\nKPX oslash scedilla -55\r\nKPX oslash scommaaccent -55\r\nKPX oslash t -55\r\nKPX oslash tcommaaccent -55\r\nKPX oslash u -55\r\nKPX oslash uacute -55\r\nKPX oslash ucircumflex -55\r\nKPX oslash udieresis -55\r\nKPX oslash ugrave -55\r\nKPX oslash uhungarumlaut -55\r\nKPX oslash umacron -55\r\nKPX oslash uogonek -55\r\nKPX oslash uring -55\r\nKPX oslash v -70\r\nKPX oslash w -70\r\nKPX oslash x -85\r\nKPX oslash y -70\r\nKPX oslash yacute -70\r\nKPX oslash ydieresis -70\r\nKPX oslash z -55\r\nKPX oslash zacute -55\r\nKPX oslash zcaron -55\r\nKPX oslash zdotaccent -55\r\nKPX otilde comma -40\r\nKPX otilde period -40\r\nKPX otilde v -15\r\nKPX otilde w -15\r\nKPX otilde x -30\r\nKPX otilde y -30\r\nKPX otilde yacute -30\r\nKPX otilde ydieresis -30\r\nKPX p comma -35\r\nKPX p period -35\r\nKPX p y -30\r\nKPX p yacute -30\r\nKPX p ydieresis -30\r\nKPX period quotedblright -100\r\nKPX period quoteright -100\r\nKPX period space -60\r\nKPX quotedblright space -40\r\nKPX quoteleft quoteleft -57\r\nKPX quoteright d -50\r\nKPX quoteright dcroat -50\r\nKPX quoteright quoteright -57\r\nKPX quoteright r -50\r\nKPX quoteright racute -50\r\nKPX quoteright rcaron -50\r\nKPX quoteright rcommaaccent -50\r\nKPX quoteright s -50\r\nKPX quoteright sacute -50\r\nKPX quoteright scaron -50\r\nKPX quoteright scedilla -50\r\nKPX quoteright scommaaccent -50\r\nKPX quoteright space -70\r\nKPX r a -10\r\nKPX r aacute -10\r\nKPX r abreve -10\r\nKPX r acircumflex -10\r\nKPX r adieresis -10\r\nKPX r agrave -10\r\nKPX r amacron -10\r\nKPX r aogonek -10\r\nKPX r aring -10\r\nKPX r atilde -10\r\nKPX r colon 30\r\nKPX r comma -50\r\nKPX r i 15\r\nKPX r iacute 15\r\nKPX r icircumflex 15\r\nKPX r idieresis 15\r\nKPX r igrave 15\r\nKPX r imacron 15\r\nKPX r iogonek 15\r\nKPX r k 15\r\nKPX r kcommaaccent 15\r\nKPX r l 15\r\nKPX r lacute 15\r\nKPX r lcommaaccent 15\r\nKPX r lslash 15\r\nKPX r m 25\r\nKPX r n 25\r\nKPX r nacute 25\r\nKPX r ncaron 25\r\nKPX r ncommaaccent 25\r\nKPX r ntilde 25\r\nKPX r p 30\r\nKPX r period -50\r\nKPX r semicolon 30\r\nKPX r t 40\r\nKPX r tcommaaccent 40\r\nKPX r u 15\r\nKPX r uacute 15\r\nKPX r ucircumflex 15\r\nKPX r udieresis 15\r\nKPX r ugrave 15\r\nKPX r uhungarumlaut 15\r\nKPX r umacron 15\r\nKPX r uogonek 15\r\nKPX r uring 15\r\nKPX r v 30\r\nKPX r y 30\r\nKPX r yacute 30\r\nKPX r ydieresis 30\r\nKPX racute a -10\r\nKPX racute aacute -10\r\nKPX racute abreve -10\r\nKPX racute acircumflex -10\r\nKPX racute adieresis -10\r\nKPX racute agrave -10\r\nKPX racute amacron -10\r\nKPX racute aogonek -10\r\nKPX racute aring -10\r\nKPX racute atilde -10\r\nKPX racute colon 30\r\nKPX racute comma -50\r\nKPX racute i 15\r\nKPX racute iacute 15\r\nKPX racute icircumflex 15\r\nKPX racute idieresis 15\r\nKPX racute igrave 15\r\nKPX racute imacron 15\r\nKPX racute iogonek 15\r\nKPX racute k 15\r\nKPX racute kcommaaccent 15\r\nKPX racute l 15\r\nKPX racute lacute 15\r\nKPX racute lcommaaccent 15\r\nKPX racute lslash 15\r\nKPX racute m 25\r\nKPX racute n 25\r\nKPX racute nacute 25\r\nKPX racute ncaron 25\r\nKPX racute ncommaaccent 25\r\nKPX racute ntilde 25\r\nKPX racute p 30\r\nKPX racute period -50\r\nKPX racute semicolon 30\r\nKPX racute t 40\r\nKPX racute tcommaaccent 40\r\nKPX racute u 15\r\nKPX racute uacute 15\r\nKPX racute ucircumflex 15\r\nKPX racute udieresis 15\r\nKPX racute ugrave 15\r\nKPX racute uhungarumlaut 15\r\nKPX racute umacron 15\r\nKPX racute uogonek 15\r\nKPX racute uring 15\r\nKPX racute v 30\r\nKPX racute y 30\r\nKPX racute yacute 30\r\nKPX racute ydieresis 30\r\nKPX rcaron a -10\r\nKPX rcaron aacute -10\r\nKPX rcaron abreve -10\r\nKPX rcaron acircumflex -10\r\nKPX rcaron adieresis -10\r\nKPX rcaron agrave -10\r\nKPX rcaron amacron -10\r\nKPX rcaron aogonek -10\r\nKPX rcaron aring -10\r\nKPX rcaron atilde -10\r\nKPX rcaron colon 30\r\nKPX rcaron comma -50\r\nKPX rcaron i 15\r\nKPX rcaron iacute 15\r\nKPX rcaron icircumflex 15\r\nKPX rcaron idieresis 15\r\nKPX rcaron igrave 15\r\nKPX rcaron imacron 15\r\nKPX rcaron iogonek 15\r\nKPX rcaron k 15\r\nKPX rcaron kcommaaccent 15\r\nKPX rcaron l 15\r\nKPX rcaron lacute 15\r\nKPX rcaron lcommaaccent 15\r\nKPX rcaron lslash 15\r\nKPX rcaron m 25\r\nKPX rcaron n 25\r\nKPX rcaron nacute 25\r\nKPX rcaron ncaron 25\r\nKPX rcaron ncommaaccent 25\r\nKPX rcaron ntilde 25\r\nKPX rcaron p 30\r\nKPX rcaron period -50\r\nKPX rcaron semicolon 30\r\nKPX rcaron t 40\r\nKPX rcaron tcommaaccent 40\r\nKPX rcaron u 15\r\nKPX rcaron uacute 15\r\nKPX rcaron ucircumflex 15\r\nKPX rcaron udieresis 15\r\nKPX rcaron ugrave 15\r\nKPX rcaron uhungarumlaut 15\r\nKPX rcaron umacron 15\r\nKPX rcaron uogonek 15\r\nKPX rcaron uring 15\r\nKPX rcaron v 30\r\nKPX rcaron y 30\r\nKPX rcaron yacute 30\r\nKPX rcaron ydieresis 30\r\nKPX rcommaaccent a -10\r\nKPX rcommaaccent aacute -10\r\nKPX rcommaaccent abreve -10\r\nKPX rcommaaccent acircumflex -10\r\nKPX rcommaaccent adieresis -10\r\nKPX rcommaaccent agrave -10\r\nKPX rcommaaccent amacron -10\r\nKPX rcommaaccent aogonek -10\r\nKPX rcommaaccent aring -10\r\nKPX rcommaaccent atilde -10\r\nKPX rcommaaccent colon 30\r\nKPX rcommaaccent comma -50\r\nKPX rcommaaccent i 15\r\nKPX rcommaaccent iacute 15\r\nKPX rcommaaccent icircumflex 15\r\nKPX rcommaaccent idieresis 15\r\nKPX rcommaaccent igrave 15\r\nKPX rcommaaccent imacron 15\r\nKPX rcommaaccent iogonek 15\r\nKPX rcommaaccent k 15\r\nKPX rcommaaccent kcommaaccent 15\r\nKPX rcommaaccent l 15\r\nKPX rcommaaccent lacute 15\r\nKPX rcommaaccent lcommaaccent 15\r\nKPX rcommaaccent lslash 15\r\nKPX rcommaaccent m 25\r\nKPX rcommaaccent n 25\r\nKPX rcommaaccent nacute 25\r\nKPX rcommaaccent ncaron 25\r\nKPX rcommaaccent ncommaaccent 25\r\nKPX rcommaaccent ntilde 25\r\nKPX rcommaaccent p 30\r\nKPX rcommaaccent period -50\r\nKPX rcommaaccent semicolon 30\r\nKPX rcommaaccent t 40\r\nKPX rcommaaccent tcommaaccent 40\r\nKPX rcommaaccent u 15\r\nKPX rcommaaccent uacute 15\r\nKPX rcommaaccent ucircumflex 15\r\nKPX rcommaaccent udieresis 15\r\nKPX rcommaaccent ugrave 15\r\nKPX rcommaaccent uhungarumlaut 15\r\nKPX rcommaaccent umacron 15\r\nKPX rcommaaccent uogonek 15\r\nKPX rcommaaccent uring 15\r\nKPX rcommaaccent v 30\r\nKPX rcommaaccent y 30\r\nKPX rcommaaccent yacute 30\r\nKPX rcommaaccent ydieresis 30\r\nKPX s comma -15\r\nKPX s period -15\r\nKPX s w -30\r\nKPX sacute comma -15\r\nKPX sacute period -15\r\nKPX sacute w -30\r\nKPX scaron comma -15\r\nKPX scaron period -15\r\nKPX scaron w -30\r\nKPX scedilla comma -15\r\nKPX scedilla period -15\r\nKPX scedilla w -30\r\nKPX scommaaccent comma -15\r\nKPX scommaaccent period -15\r\nKPX scommaaccent w -30\r\nKPX semicolon space -50\r\nKPX space T -50\r\nKPX space Tcaron -50\r\nKPX space Tcommaaccent -50\r\nKPX space V -50\r\nKPX space W -40\r\nKPX space Y -90\r\nKPX space Yacute -90\r\nKPX space Ydieresis -90\r\nKPX space quotedblleft -30\r\nKPX space quoteleft -60\r\nKPX v a -25\r\nKPX v aacute -25\r\nKPX v abreve -25\r\nKPX v acircumflex -25\r\nKPX v adieresis -25\r\nKPX v agrave -25\r\nKPX v amacron -25\r\nKPX v aogonek -25\r\nKPX v aring -25\r\nKPX v atilde -25\r\nKPX v comma -80\r\nKPX v e -25\r\nKPX v eacute -25\r\nKPX v ecaron -25\r\nKPX v ecircumflex -25\r\nKPX v edieresis -25\r\nKPX v edotaccent -25\r\nKPX v egrave -25\r\nKPX v emacron -25\r\nKPX v eogonek -25\r\nKPX v o -25\r\nKPX v oacute -25\r\nKPX v ocircumflex -25\r\nKPX v odieresis -25\r\nKPX v ograve -25\r\nKPX v ohungarumlaut -25\r\nKPX v omacron -25\r\nKPX v oslash -25\r\nKPX v otilde -25\r\nKPX v period -80\r\nKPX w a -15\r\nKPX w aacute -15\r\nKPX w abreve -15\r\nKPX w acircumflex -15\r\nKPX w adieresis -15\r\nKPX w agrave -15\r\nKPX w amacron -15\r\nKPX w aogonek -15\r\nKPX w aring -15\r\nKPX w atilde -15\r\nKPX w comma -60\r\nKPX w e -10\r\nKPX w eacute -10\r\nKPX w ecaron -10\r\nKPX w ecircumflex -10\r\nKPX w edieresis -10\r\nKPX w edotaccent -10\r\nKPX w egrave -10\r\nKPX w emacron -10\r\nKPX w eogonek -10\r\nKPX w o -10\r\nKPX w oacute -10\r\nKPX w ocircumflex -10\r\nKPX w odieresis -10\r\nKPX w ograve -10\r\nKPX w ohungarumlaut -10\r\nKPX w omacron -10\r\nKPX w oslash -10\r\nKPX w otilde -10\r\nKPX w period -60\r\nKPX x e -30\r\nKPX x eacute -30\r\nKPX x ecaron -30\r\nKPX x ecircumflex -30\r\nKPX x edieresis -30\r\nKPX x edotaccent -30\r\nKPX x egrave -30\r\nKPX x emacron -30\r\nKPX x eogonek -30\r\nKPX y a -20\r\nKPX y aacute -20\r\nKPX y abreve -20\r\nKPX y acircumflex -20\r\nKPX y adieresis -20\r\nKPX y agrave -20\r\nKPX y amacron -20\r\nKPX y aogonek -20\r\nKPX y aring -20\r\nKPX y atilde -20\r\nKPX y comma -100\r\nKPX y e -20\r\nKPX y eacute -20\r\nKPX y ecaron -20\r\nKPX y ecircumflex -20\r\nKPX y edieresis -20\r\nKPX y edotaccent -20\r\nKPX y egrave -20\r\nKPX y emacron -20\r\nKPX y eogonek -20\r\nKPX y o -20\r\nKPX y oacute -20\r\nKPX y ocircumflex -20\r\nKPX y odieresis -20\r\nKPX y ograve -20\r\nKPX y ohungarumlaut -20\r\nKPX y omacron -20\r\nKPX y oslash -20\r\nKPX y otilde -20\r\nKPX y period -100\r\nKPX yacute a -20\r\nKPX yacute aacute -20\r\nKPX yacute abreve -20\r\nKPX yacute acircumflex -20\r\nKPX yacute adieresis -20\r\nKPX yacute agrave -20\r\nKPX yacute amacron -20\r\nKPX yacute aogonek -20\r\nKPX yacute aring -20\r\nKPX yacute atilde -20\r\nKPX yacute comma -100\r\nKPX yacute e -20\r\nKPX yacute eacute -20\r\nKPX yacute ecaron -20\r\nKPX yacute ecircumflex -20\r\nKPX yacute edieresis -20\r\nKPX yacute edotaccent -20\r\nKPX yacute egrave -20\r\nKPX yacute emacron -20\r\nKPX yacute eogonek -20\r\nKPX yacute o -20\r\nKPX yacute oacute -20\r\nKPX yacute ocircumflex -20\r\nKPX yacute odieresis -20\r\nKPX yacute ograve -20\r\nKPX yacute ohungarumlaut -20\r\nKPX yacute omacron -20\r\nKPX yacute oslash -20\r\nKPX yacute otilde -20\r\nKPX yacute period -100\r\nKPX ydieresis a -20\r\nKPX ydieresis aacute -20\r\nKPX ydieresis abreve -20\r\nKPX ydieresis acircumflex -20\r\nKPX ydieresis adieresis -20\r\nKPX ydieresis agrave -20\r\nKPX ydieresis amacron -20\r\nKPX ydieresis aogonek -20\r\nKPX ydieresis aring -20\r\nKPX ydieresis atilde -20\r\nKPX ydieresis comma -100\r\nKPX ydieresis e -20\r\nKPX ydieresis eacute -20\r\nKPX ydieresis ecaron -20\r\nKPX ydieresis ecircumflex -20\r\nKPX ydieresis edieresis -20\r\nKPX ydieresis edotaccent -20\r\nKPX ydieresis egrave -20\r\nKPX ydieresis emacron -20\r\nKPX ydieresis eogonek -20\r\nKPX ydieresis o -20\r\nKPX ydieresis oacute -20\r\nKPX ydieresis ocircumflex -20\r\nKPX ydieresis odieresis -20\r\nKPX ydieresis ograve -20\r\nKPX ydieresis ohungarumlaut -20\r\nKPX ydieresis omacron -20\r\nKPX ydieresis oslash -20\r\nKPX ydieresis otilde -20\r\nKPX ydieresis period -100\r\nKPX z e -15\r\nKPX z eacute -15\r\nKPX z ecaron -15\r\nKPX z ecircumflex -15\r\nKPX z edieresis -15\r\nKPX z edotaccent -15\r\nKPX z egrave -15\r\nKPX z emacron -15\r\nKPX z eogonek -15\r\nKPX z o -15\r\nKPX z oacute -15\r\nKPX z ocircumflex -15\r\nKPX z odieresis -15\r\nKPX z ograve -15\r\nKPX z ohungarumlaut -15\r\nKPX z omacron -15\r\nKPX z oslash -15\r\nKPX z otilde -15\r\nKPX zacute e -15\r\nKPX zacute eacute -15\r\nKPX zacute ecaron -15\r\nKPX zacute ecircumflex -15\r\nKPX zacute edieresis -15\r\nKPX zacute edotaccent -15\r\nKPX zacute egrave -15\r\nKPX zacute emacron -15\r\nKPX zacute eogonek -15\r\nKPX zacute o -15\r\nKPX zacute oacute -15\r\nKPX zacute ocircumflex -15\r\nKPX zacute odieresis -15\r\nKPX zacute ograve -15\r\nKPX zacute ohungarumlaut -15\r\nKPX zacute omacron -15\r\nKPX zacute oslash -15\r\nKPX zacute otilde -15\r\nKPX zcaron e -15\r\nKPX zcaron eacute -15\r\nKPX zcaron ecaron -15\r\nKPX zcaron ecircumflex -15\r\nKPX zcaron edieresis -15\r\nKPX zcaron edotaccent -15\r\nKPX zcaron egrave -15\r\nKPX zcaron emacron -15\r\nKPX zcaron eogonek -15\r\nKPX zcaron o -15\r\nKPX zcaron oacute -15\r\nKPX zcaron ocircumflex -15\r\nKPX zcaron odieresis -15\r\nKPX zcaron ograve -15\r\nKPX zcaron ohungarumlaut -15\r\nKPX zcaron omacron -15\r\nKPX zcaron oslash -15\r\nKPX zcaron otilde -15\r\nKPX zdotaccent e -15\r\nKPX zdotaccent eacute -15\r\nKPX zdotaccent ecaron -15\r\nKPX zdotaccent ecircumflex -15\r\nKPX zdotaccent edieresis -15\r\nKPX zdotaccent edotaccent -15\r\nKPX zdotaccent egrave -15\r\nKPX zdotaccent emacron -15\r\nKPX zdotaccent eogonek -15\r\nKPX zdotaccent o -15\r\nKPX zdotaccent oacute -15\r\nKPX zdotaccent ocircumflex -15\r\nKPX zdotaccent odieresis -15\r\nKPX zdotaccent ograve -15\r\nKPX zdotaccent ohungarumlaut -15\r\nKPX zdotaccent omacron -15\r\nKPX zdotaccent oslash -15\r\nKPX zdotaccent otilde -15\r\nEndKernPairs\r\nEndKernData\r\nEndFontMetrics\r\n",
  'Helvetica-BoldOblique.afm': "StartFontMetrics 4.1\r\nComment Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated.  All Rights Reserved.\r\nComment Creation Date: Thu May  1 12:45:12 1997\r\nComment UniqueID 43053\r\nComment VMusage 14482 68586\r\nFontName Helvetica-BoldOblique\r\nFullName Helvetica Bold Oblique\r\nFamilyName Helvetica\r\nWeight Bold\r\nItalicAngle -12\r\nIsFixedPitch false\r\nCharacterSet ExtendedRoman\r\nFontBBox -174 -228 1114 962 \r\nUnderlinePosition -100\r\nUnderlineThickness 50\r\nVersion 002.000\r\nNotice Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated.  All Rights Reserved.Helvetica is a trademark of Linotype-Hell AG and/or its subsidiaries.\r\nEncodingScheme AdobeStandardEncoding\r\nCapHeight 718\r\nXHeight 532\r\nAscender 718\r\nDescender -207\r\nStdHW 118\r\nStdVW 140\r\nStartCharMetrics 315\r\nC 32 ; WX 278 ; N space ; B 0 0 0 0 ;\r\nC 33 ; WX 333 ; N exclam ; B 94 0 397 718 ;\r\nC 34 ; WX 474 ; N quotedbl ; B 193 447 529 718 ;\r\nC 35 ; WX 556 ; N numbersign ; B 60 0 644 698 ;\r\nC 36 ; WX 556 ; N dollar ; B 67 -115 622 775 ;\r\nC 37 ; WX 889 ; N percent ; B 136 -19 901 710 ;\r\nC 38 ; WX 722 ; N ampersand ; B 89 -19 732 718 ;\r\nC 39 ; WX 278 ; N quoteright ; B 167 445 362 718 ;\r\nC 40 ; WX 333 ; N parenleft ; B 76 -208 470 734 ;\r\nC 41 ; WX 333 ; N parenright ; B -25 -208 369 734 ;\r\nC 42 ; WX 389 ; N asterisk ; B 146 387 481 718 ;\r\nC 43 ; WX 584 ; N plus ; B 82 0 610 506 ;\r\nC 44 ; WX 278 ; N comma ; B 28 -168 245 146 ;\r\nC 45 ; WX 333 ; N hyphen ; B 73 215 379 345 ;\r\nC 46 ; WX 278 ; N period ; B 64 0 245 146 ;\r\nC 47 ; WX 278 ; N slash ; B -37 -19 468 737 ;\r\nC 48 ; WX 556 ; N zero ; B 86 -19 617 710 ;\r\nC 49 ; WX 556 ; N one ; B 173 0 529 710 ;\r\nC 50 ; WX 556 ; N two ; B 26 0 619 710 ;\r\nC 51 ; WX 556 ; N three ; B 65 -19 608 710 ;\r\nC 52 ; WX 556 ; N four ; B 60 0 598 710 ;\r\nC 53 ; WX 556 ; N five ; B 64 -19 636 698 ;\r\nC 54 ; WX 556 ; N six ; B 85 -19 619 710 ;\r\nC 55 ; WX 556 ; N seven ; B 125 0 676 698 ;\r\nC 56 ; WX 556 ; N eight ; B 69 -19 616 710 ;\r\nC 57 ; WX 556 ; N nine ; B 78 -19 615 710 ;\r\nC 58 ; WX 333 ; N colon ; B 92 0 351 512 ;\r\nC 59 ; WX 333 ; N semicolon ; B 56 -168 351 512 ;\r\nC 60 ; WX 584 ; N less ; B 82 -8 655 514 ;\r\nC 61 ; WX 584 ; N equal ; B 58 87 633 419 ;\r\nC 62 ; WX 584 ; N greater ; B 36 -8 609 514 ;\r\nC 63 ; WX 611 ; N question ; B 165 0 671 727 ;\r\nC 64 ; WX 975 ; N at ; B 186 -19 954 737 ;\r\nC 65 ; WX 722 ; N A ; B 20 0 702 718 ;\r\nC 66 ; WX 722 ; N B ; B 76 0 764 718 ;\r\nC 67 ; WX 722 ; N C ; B 107 -19 789 737 ;\r\nC 68 ; WX 722 ; N D ; B 76 0 777 718 ;\r\nC 69 ; WX 667 ; N E ; B 76 0 757 718 ;\r\nC 70 ; WX 611 ; N F ; B 76 0 740 718 ;\r\nC 71 ; WX 778 ; N G ; B 108 -19 817 737 ;\r\nC 72 ; WX 722 ; N H ; B 71 0 804 718 ;\r\nC 73 ; WX 278 ; N I ; B 64 0 367 718 ;\r\nC 74 ; WX 556 ; N J ; B 60 -18 637 718 ;\r\nC 75 ; WX 722 ; N K ; B 87 0 858 718 ;\r\nC 76 ; WX 611 ; N L ; B 76 0 611 718 ;\r\nC 77 ; WX 833 ; N M ; B 69 0 918 718 ;\r\nC 78 ; WX 722 ; N N ; B 69 0 807 718 ;\r\nC 79 ; WX 778 ; N O ; B 107 -19 823 737 ;\r\nC 80 ; WX 667 ; N P ; B 76 0 738 718 ;\r\nC 81 ; WX 778 ; N Q ; B 107 -52 823 737 ;\r\nC 82 ; WX 722 ; N R ; B 76 0 778 718 ;\r\nC 83 ; WX 667 ; N S ; B 81 -19 718 737 ;\r\nC 84 ; WX 611 ; N T ; B 140 0 751 718 ;\r\nC 85 ; WX 722 ; N U ; B 116 -19 804 718 ;\r\nC 86 ; WX 667 ; N V ; B 172 0 801 718 ;\r\nC 87 ; WX 944 ; N W ; B 169 0 1082 718 ;\r\nC 88 ; WX 667 ; N X ; B 14 0 791 718 ;\r\nC 89 ; WX 667 ; N Y ; B 168 0 806 718 ;\r\nC 90 ; WX 611 ; N Z ; B 25 0 737 718 ;\r\nC 91 ; WX 333 ; N bracketleft ; B 21 -196 462 722 ;\r\nC 92 ; WX 278 ; N backslash ; B 124 -19 307 737 ;\r\nC 93 ; WX 333 ; N bracketright ; B -18 -196 423 722 ;\r\nC 94 ; WX 584 ; N asciicircum ; B 131 323 591 698 ;\r\nC 95 ; WX 556 ; N underscore ; B -27 -125 540 -75 ;\r\nC 96 ; WX 278 ; N quoteleft ; B 165 454 361 727 ;\r\nC 97 ; WX 556 ; N a ; B 55 -14 583 546 ;\r\nC 98 ; WX 611 ; N b ; B 61 -14 645 718 ;\r\nC 99 ; WX 556 ; N c ; B 79 -14 599 546 ;\r\nC 100 ; WX 611 ; N d ; B 82 -14 704 718 ;\r\nC 101 ; WX 556 ; N e ; B 70 -14 593 546 ;\r\nC 102 ; WX 333 ; N f ; B 87 0 469 727 ; L i fi ; L l fl ;\r\nC 103 ; WX 611 ; N g ; B 38 -217 666 546 ;\r\nC 104 ; WX 611 ; N h ; B 65 0 629 718 ;\r\nC 105 ; WX 278 ; N i ; B 69 0 363 725 ;\r\nC 106 ; WX 278 ; N j ; B -42 -214 363 725 ;\r\nC 107 ; WX 556 ; N k ; B 69 0 670 718 ;\r\nC 108 ; WX 278 ; N l ; B 69 0 362 718 ;\r\nC 109 ; WX 889 ; N m ; B 64 0 909 546 ;\r\nC 110 ; WX 611 ; N n ; B 65 0 629 546 ;\r\nC 111 ; WX 611 ; N o ; B 82 -14 643 546 ;\r\nC 112 ; WX 611 ; N p ; B 18 -207 645 546 ;\r\nC 113 ; WX 611 ; N q ; B 80 -207 665 546 ;\r\nC 114 ; WX 389 ; N r ; B 64 0 489 546 ;\r\nC 115 ; WX 556 ; N s ; B 63 -14 584 546 ;\r\nC 116 ; WX 333 ; N t ; B 100 -6 422 676 ;\r\nC 117 ; WX 611 ; N u ; B 98 -14 658 532 ;\r\nC 118 ; WX 556 ; N v ; B 126 0 656 532 ;\r\nC 119 ; WX 778 ; N w ; B 123 0 882 532 ;\r\nC 120 ; WX 556 ; N x ; B 15 0 648 532 ;\r\nC 121 ; WX 556 ; N y ; B 42 -214 652 532 ;\r\nC 122 ; WX 500 ; N z ; B 20 0 583 532 ;\r\nC 123 ; WX 389 ; N braceleft ; B 94 -196 518 722 ;\r\nC 124 ; WX 280 ; N bar ; B 36 -225 361 775 ;\r\nC 125 ; WX 389 ; N braceright ; B -18 -196 407 722 ;\r\nC 126 ; WX 584 ; N asciitilde ; B 115 163 577 343 ;\r\nC 161 ; WX 333 ; N exclamdown ; B 50 -186 353 532 ;\r\nC 162 ; WX 556 ; N cent ; B 79 -118 599 628 ;\r\nC 163 ; WX 556 ; N sterling ; B 50 -16 635 718 ;\r\nC 164 ; WX 167 ; N fraction ; B -174 -19 487 710 ;\r\nC 165 ; WX 556 ; N yen ; B 60 0 713 698 ;\r\nC 166 ; WX 556 ; N florin ; B -50 -210 669 737 ;\r\nC 167 ; WX 556 ; N section ; B 61 -184 598 727 ;\r\nC 168 ; WX 556 ; N currency ; B 27 76 680 636 ;\r\nC 169 ; WX 238 ; N quotesingle ; B 165 447 321 718 ;\r\nC 170 ; WX 500 ; N quotedblleft ; B 160 454 588 727 ;\r\nC 171 ; WX 556 ; N guillemotleft ; B 135 76 571 484 ;\r\nC 172 ; WX 333 ; N guilsinglleft ; B 130 76 353 484 ;\r\nC 173 ; WX 333 ; N guilsinglright ; B 99 76 322 484 ;\r\nC 174 ; WX 611 ; N fi ; B 87 0 696 727 ;\r\nC 175 ; WX 611 ; N fl ; B 87 0 695 727 ;\r\nC 177 ; WX 556 ; N endash ; B 48 227 627 333 ;\r\nC 178 ; WX 556 ; N dagger ; B 118 -171 626 718 ;\r\nC 179 ; WX 556 ; N daggerdbl ; B 46 -171 628 718 ;\r\nC 180 ; WX 278 ; N periodcentered ; B 110 172 276 334 ;\r\nC 182 ; WX 556 ; N paragraph ; B 98 -191 688 700 ;\r\nC 183 ; WX 350 ; N bullet ; B 83 194 420 524 ;\r\nC 184 ; WX 278 ; N quotesinglbase ; B 41 -146 236 127 ;\r\nC 185 ; WX 500 ; N quotedblbase ; B 36 -146 463 127 ;\r\nC 186 ; WX 500 ; N quotedblright ; B 162 445 589 718 ;\r\nC 187 ; WX 556 ; N guillemotright ; B 104 76 540 484 ;\r\nC 188 ; WX 1000 ; N ellipsis ; B 92 0 939 146 ;\r\nC 189 ; WX 1000 ; N perthousand ; B 76 -19 1038 710 ;\r\nC 191 ; WX 611 ; N questiondown ; B 53 -195 559 532 ;\r\nC 193 ; WX 333 ; N grave ; B 136 604 353 750 ;\r\nC 194 ; WX 333 ; N acute ; B 236 604 515 750 ;\r\nC 195 ; WX 333 ; N circumflex ; B 118 604 471 750 ;\r\nC 196 ; WX 333 ; N tilde ; B 113 610 507 737 ;\r\nC 197 ; WX 333 ; N macron ; B 122 604 483 678 ;\r\nC 198 ; WX 333 ; N breve ; B 156 604 494 750 ;\r\nC 199 ; WX 333 ; N dotaccent ; B 235 614 385 729 ;\r\nC 200 ; WX 333 ; N dieresis ; B 137 614 482 729 ;\r\nC 202 ; WX 333 ; N ring ; B 200 568 420 776 ;\r\nC 203 ; WX 333 ; N cedilla ; B -37 -228 220 0 ;\r\nC 205 ; WX 333 ; N hungarumlaut ; B 137 604 645 750 ;\r\nC 206 ; WX 333 ; N ogonek ; B 41 -228 264 0 ;\r\nC 207 ; WX 333 ; N caron ; B 149 604 502 750 ;\r\nC 208 ; WX 1000 ; N emdash ; B 48 227 1071 333 ;\r\nC 225 ; WX 1000 ; N AE ; B 5 0 1100 718 ;\r\nC 227 ; WX 370 ; N ordfeminine ; B 125 401 465 737 ;\r\nC 232 ; WX 611 ; N Lslash ; B 34 0 611 718 ;\r\nC 233 ; WX 778 ; N Oslash ; B 35 -27 894 745 ;\r\nC 234 ; WX 1000 ; N OE ; B 99 -19 1114 737 ;\r\nC 235 ; WX 365 ; N ordmasculine ; B 123 401 485 737 ;\r\nC 241 ; WX 889 ; N ae ; B 56 -14 923 546 ;\r\nC 245 ; WX 278 ; N dotlessi ; B 69 0 322 532 ;\r\nC 248 ; WX 278 ; N lslash ; B 40 0 407 718 ;\r\nC 249 ; WX 611 ; N oslash ; B 22 -29 701 560 ;\r\nC 250 ; WX 944 ; N oe ; B 82 -14 977 546 ;\r\nC 251 ; WX 611 ; N germandbls ; B 69 -14 657 731 ;\r\nC -1 ; WX 278 ; N Idieresis ; B 64 0 494 915 ;\r\nC -1 ; WX 556 ; N eacute ; B 70 -14 627 750 ;\r\nC -1 ; WX 556 ; N abreve ; B 55 -14 606 750 ;\r\nC -1 ; WX 611 ; N uhungarumlaut ; B 98 -14 784 750 ;\r\nC -1 ; WX 556 ; N ecaron ; B 70 -14 614 750 ;\r\nC -1 ; WX 667 ; N Ydieresis ; B 168 0 806 915 ;\r\nC -1 ; WX 584 ; N divide ; B 82 -42 610 548 ;\r\nC -1 ; WX 667 ; N Yacute ; B 168 0 806 936 ;\r\nC -1 ; WX 722 ; N Acircumflex ; B 20 0 706 936 ;\r\nC -1 ; WX 556 ; N aacute ; B 55 -14 627 750 ;\r\nC -1 ; WX 722 ; N Ucircumflex ; B 116 -19 804 936 ;\r\nC -1 ; WX 556 ; N yacute ; B 42 -214 652 750 ;\r\nC -1 ; WX 556 ; N scommaaccent ; B 63 -228 584 546 ;\r\nC -1 ; WX 556 ; N ecircumflex ; B 70 -14 593 750 ;\r\nC -1 ; WX 722 ; N Uring ; B 116 -19 804 962 ;\r\nC -1 ; WX 722 ; N Udieresis ; B 116 -19 804 915 ;\r\nC -1 ; WX 556 ; N aogonek ; B 55 -224 583 546 ;\r\nC -1 ; WX 722 ; N Uacute ; B 116 -19 804 936 ;\r\nC -1 ; WX 611 ; N uogonek ; B 98 -228 658 532 ;\r\nC -1 ; WX 667 ; N Edieresis ; B 76 0 757 915 ;\r\nC -1 ; WX 722 ; N Dcroat ; B 62 0 777 718 ;\r\nC -1 ; WX 250 ; N commaaccent ; B 16 -228 188 -50 ;\r\nC -1 ; WX 737 ; N copyright ; B 56 -19 835 737 ;\r\nC -1 ; WX 667 ; N Emacron ; B 76 0 757 864 ;\r\nC -1 ; WX 556 ; N ccaron ; B 79 -14 614 750 ;\r\nC -1 ; WX 556 ; N aring ; B 55 -14 583 776 ;\r\nC -1 ; WX 722 ; N Ncommaaccent ; B 69 -228 807 718 ;\r\nC -1 ; WX 278 ; N lacute ; B 69 0 528 936 ;\r\nC -1 ; WX 556 ; N agrave ; B 55 -14 583 750 ;\r\nC -1 ; WX 611 ; N Tcommaaccent ; B 140 -228 751 718 ;\r\nC -1 ; WX 722 ; N Cacute ; B 107 -19 789 936 ;\r\nC -1 ; WX 556 ; N atilde ; B 55 -14 619 737 ;\r\nC -1 ; WX 667 ; N Edotaccent ; B 76 0 757 915 ;\r\nC -1 ; WX 556 ; N scaron ; B 63 -14 614 750 ;\r\nC -1 ; WX 556 ; N scedilla ; B 63 -228 584 546 ;\r\nC -1 ; WX 278 ; N iacute ; B 69 0 488 750 ;\r\nC -1 ; WX 494 ; N lozenge ; B 90 0 564 745 ;\r\nC -1 ; WX 722 ; N Rcaron ; B 76 0 778 936 ;\r\nC -1 ; WX 778 ; N Gcommaaccent ; B 108 -228 817 737 ;\r\nC -1 ; WX 611 ; N ucircumflex ; B 98 -14 658 750 ;\r\nC -1 ; WX 556 ; N acircumflex ; B 55 -14 583 750 ;\r\nC -1 ; WX 722 ; N Amacron ; B 20 0 718 864 ;\r\nC -1 ; WX 389 ; N rcaron ; B 64 0 530 750 ;\r\nC -1 ; WX 556 ; N ccedilla ; B 79 -228 599 546 ;\r\nC -1 ; WX 611 ; N Zdotaccent ; B 25 0 737 915 ;\r\nC -1 ; WX 667 ; N Thorn ; B 76 0 716 718 ;\r\nC -1 ; WX 778 ; N Omacron ; B 107 -19 823 864 ;\r\nC -1 ; WX 722 ; N Racute ; B 76 0 778 936 ;\r\nC -1 ; WX 667 ; N Sacute ; B 81 -19 722 936 ;\r\nC -1 ; WX 743 ; N dcaron ; B 82 -14 903 718 ;\r\nC -1 ; WX 722 ; N Umacron ; B 116 -19 804 864 ;\r\nC -1 ; WX 611 ; N uring ; B 98 -14 658 776 ;\r\nC -1 ; WX 333 ; N threesuperior ; B 91 271 441 710 ;\r\nC -1 ; WX 778 ; N Ograve ; B 107 -19 823 936 ;\r\nC -1 ; WX 722 ; N Agrave ; B 20 0 702 936 ;\r\nC -1 ; WX 722 ; N Abreve ; B 20 0 729 936 ;\r\nC -1 ; WX 584 ; N multiply ; B 57 1 635 505 ;\r\nC -1 ; WX 611 ; N uacute ; B 98 -14 658 750 ;\r\nC -1 ; WX 611 ; N Tcaron ; B 140 0 751 936 ;\r\nC -1 ; WX 494 ; N partialdiff ; B 43 -21 585 750 ;\r\nC -1 ; WX 556 ; N ydieresis ; B 42 -214 652 729 ;\r\nC -1 ; WX 722 ; N Nacute ; B 69 0 807 936 ;\r\nC -1 ; WX 278 ; N icircumflex ; B 69 0 444 750 ;\r\nC -1 ; WX 667 ; N Ecircumflex ; B 76 0 757 936 ;\r\nC -1 ; WX 556 ; N adieresis ; B 55 -14 594 729 ;\r\nC -1 ; WX 556 ; N edieresis ; B 70 -14 594 729 ;\r\nC -1 ; WX 556 ; N cacute ; B 79 -14 627 750 ;\r\nC -1 ; WX 611 ; N nacute ; B 65 0 654 750 ;\r\nC -1 ; WX 611 ; N umacron ; B 98 -14 658 678 ;\r\nC -1 ; WX 722 ; N Ncaron ; B 69 0 807 936 ;\r\nC -1 ; WX 278 ; N Iacute ; B 64 0 528 936 ;\r\nC -1 ; WX 584 ; N plusminus ; B 40 0 625 506 ;\r\nC -1 ; WX 280 ; N brokenbar ; B 52 -150 345 700 ;\r\nC -1 ; WX 737 ; N registered ; B 55 -19 834 737 ;\r\nC -1 ; WX 778 ; N Gbreve ; B 108 -19 817 936 ;\r\nC -1 ; WX 278 ; N Idotaccent ; B 64 0 397 915 ;\r\nC -1 ; WX 600 ; N summation ; B 14 -10 670 706 ;\r\nC -1 ; WX 667 ; N Egrave ; B 76 0 757 936 ;\r\nC -1 ; WX 389 ; N racute ; B 64 0 543 750 ;\r\nC -1 ; WX 611 ; N omacron ; B 82 -14 643 678 ;\r\nC -1 ; WX 611 ; N Zacute ; B 25 0 737 936 ;\r\nC -1 ; WX 611 ; N Zcaron ; B 25 0 737 936 ;\r\nC -1 ; WX 549 ; N greaterequal ; B 26 0 629 704 ;\r\nC -1 ; WX 722 ; N Eth ; B 62 0 777 718 ;\r\nC -1 ; WX 722 ; N Ccedilla ; B 107 -228 789 737 ;\r\nC -1 ; WX 278 ; N lcommaaccent ; B 30 -228 362 718 ;\r\nC -1 ; WX 389 ; N tcaron ; B 100 -6 608 878 ;\r\nC -1 ; WX 556 ; N eogonek ; B 70 -228 593 546 ;\r\nC -1 ; WX 722 ; N Uogonek ; B 116 -228 804 718 ;\r\nC -1 ; WX 722 ; N Aacute ; B 20 0 750 936 ;\r\nC -1 ; WX 722 ; N Adieresis ; B 20 0 716 915 ;\r\nC -1 ; WX 556 ; N egrave ; B 70 -14 593 750 ;\r\nC -1 ; WX 500 ; N zacute ; B 20 0 599 750 ;\r\nC -1 ; WX 278 ; N iogonek ; B -14 -224 363 725 ;\r\nC -1 ; WX 778 ; N Oacute ; B 107 -19 823 936 ;\r\nC -1 ; WX 611 ; N oacute ; B 82 -14 654 750 ;\r\nC -1 ; WX 556 ; N amacron ; B 55 -14 595 678 ;\r\nC -1 ; WX 556 ; N sacute ; B 63 -14 627 750 ;\r\nC -1 ; WX 278 ; N idieresis ; B 69 0 455 729 ;\r\nC -1 ; WX 778 ; N Ocircumflex ; B 107 -19 823 936 ;\r\nC -1 ; WX 722 ; N Ugrave ; B 116 -19 804 936 ;\r\nC -1 ; WX 612 ; N Delta ; B 6 0 608 688 ;\r\nC -1 ; WX 611 ; N thorn ; B 18 -208 645 718 ;\r\nC -1 ; WX 333 ; N twosuperior ; B 69 283 449 710 ;\r\nC -1 ; WX 778 ; N Odieresis ; B 107 -19 823 915 ;\r\nC -1 ; WX 611 ; N mu ; B 22 -207 658 532 ;\r\nC -1 ; WX 278 ; N igrave ; B 69 0 326 750 ;\r\nC -1 ; WX 611 ; N ohungarumlaut ; B 82 -14 784 750 ;\r\nC -1 ; WX 667 ; N Eogonek ; B 76 -224 757 718 ;\r\nC -1 ; WX 611 ; N dcroat ; B 82 -14 789 718 ;\r\nC -1 ; WX 834 ; N threequarters ; B 99 -19 839 710 ;\r\nC -1 ; WX 667 ; N Scedilla ; B 81 -228 718 737 ;\r\nC -1 ; WX 400 ; N lcaron ; B 69 0 561 718 ;\r\nC -1 ; WX 722 ; N Kcommaaccent ; B 87 -228 858 718 ;\r\nC -1 ; WX 611 ; N Lacute ; B 76 0 611 936 ;\r\nC -1 ; WX 1000 ; N trademark ; B 179 306 1109 718 ;\r\nC -1 ; WX 556 ; N edotaccent ; B 70 -14 593 729 ;\r\nC -1 ; WX 278 ; N Igrave ; B 64 0 367 936 ;\r\nC -1 ; WX 278 ; N Imacron ; B 64 0 496 864 ;\r\nC -1 ; WX 611 ; N Lcaron ; B 76 0 643 718 ;\r\nC -1 ; WX 834 ; N onehalf ; B 132 -19 858 710 ;\r\nC -1 ; WX 549 ; N lessequal ; B 29 0 676 704 ;\r\nC -1 ; WX 611 ; N ocircumflex ; B 82 -14 643 750 ;\r\nC -1 ; WX 611 ; N ntilde ; B 65 0 646 737 ;\r\nC -1 ; WX 722 ; N Uhungarumlaut ; B 116 -19 880 936 ;\r\nC -1 ; WX 667 ; N Eacute ; B 76 0 757 936 ;\r\nC -1 ; WX 556 ; N emacron ; B 70 -14 595 678 ;\r\nC -1 ; WX 611 ; N gbreve ; B 38 -217 666 750 ;\r\nC -1 ; WX 834 ; N onequarter ; B 132 -19 806 710 ;\r\nC -1 ; WX 667 ; N Scaron ; B 81 -19 718 936 ;\r\nC -1 ; WX 667 ; N Scommaaccent ; B 81 -228 718 737 ;\r\nC -1 ; WX 778 ; N Ohungarumlaut ; B 107 -19 908 936 ;\r\nC -1 ; WX 400 ; N degree ; B 175 426 467 712 ;\r\nC -1 ; WX 611 ; N ograve ; B 82 -14 643 750 ;\r\nC -1 ; WX 722 ; N Ccaron ; B 107 -19 789 936 ;\r\nC -1 ; WX 611 ; N ugrave ; B 98 -14 658 750 ;\r\nC -1 ; WX 549 ; N radical ; B 112 -46 689 850 ;\r\nC -1 ; WX 722 ; N Dcaron ; B 76 0 777 936 ;\r\nC -1 ; WX 389 ; N rcommaaccent ; B 26 -228 489 546 ;\r\nC -1 ; WX 722 ; N Ntilde ; B 69 0 807 923 ;\r\nC -1 ; WX 611 ; N otilde ; B 82 -14 646 737 ;\r\nC -1 ; WX 722 ; N Rcommaaccent ; B 76 -228 778 718 ;\r\nC -1 ; WX 611 ; N Lcommaaccent ; B 76 -228 611 718 ;\r\nC -1 ; WX 722 ; N Atilde ; B 20 0 741 923 ;\r\nC -1 ; WX 722 ; N Aogonek ; B 20 -224 702 718 ;\r\nC -1 ; WX 722 ; N Aring ; B 20 0 702 962 ;\r\nC -1 ; WX 778 ; N Otilde ; B 107 -19 823 923 ;\r\nC -1 ; WX 500 ; N zdotaccent ; B 20 0 583 729 ;\r\nC -1 ; WX 667 ; N Ecaron ; B 76 0 757 936 ;\r\nC -1 ; WX 278 ; N Iogonek ; B -41 -228 367 718 ;\r\nC -1 ; WX 556 ; N kcommaaccent ; B 69 -228 670 718 ;\r\nC -1 ; WX 584 ; N minus ; B 82 197 610 309 ;\r\nC -1 ; WX 278 ; N Icircumflex ; B 64 0 484 936 ;\r\nC -1 ; WX 611 ; N ncaron ; B 65 0 641 750 ;\r\nC -1 ; WX 333 ; N tcommaaccent ; B 58 -228 422 676 ;\r\nC -1 ; WX 584 ; N logicalnot ; B 105 108 633 419 ;\r\nC -1 ; WX 611 ; N odieresis ; B 82 -14 643 729 ;\r\nC -1 ; WX 611 ; N udieresis ; B 98 -14 658 729 ;\r\nC -1 ; WX 549 ; N notequal ; B 32 -49 630 570 ;\r\nC -1 ; WX 611 ; N gcommaaccent ; B 38 -217 666 850 ;\r\nC -1 ; WX 611 ; N eth ; B 82 -14 670 737 ;\r\nC -1 ; WX 500 ; N zcaron ; B 20 0 586 750 ;\r\nC -1 ; WX 611 ; N ncommaaccent ; B 65 -228 629 546 ;\r\nC -1 ; WX 333 ; N onesuperior ; B 148 283 388 710 ;\r\nC -1 ; WX 278 ; N imacron ; B 69 0 429 678 ;\r\nC -1 ; WX 556 ; N Euro ; B 0 0 0 0 ;\r\nEndCharMetrics\r\nStartKernData\r\nStartKernPairs 2481\r\nKPX A C -40\r\nKPX A Cacute -40\r\nKPX A Ccaron -40\r\nKPX A Ccedilla -40\r\nKPX A G -50\r\nKPX A Gbreve -50\r\nKPX A Gcommaaccent -50\r\nKPX A O -40\r\nKPX A Oacute -40\r\nKPX A Ocircumflex -40\r\nKPX A Odieresis -40\r\nKPX A Ograve -40\r\nKPX A Ohungarumlaut -40\r\nKPX A Omacron -40\r\nKPX A Oslash -40\r\nKPX A Otilde -40\r\nKPX A Q -40\r\nKPX A T -90\r\nKPX A Tcaron -90\r\nKPX A Tcommaaccent -90\r\nKPX A U -50\r\nKPX A Uacute -50\r\nKPX A Ucircumflex -50\r\nKPX A Udieresis -50\r\nKPX A Ugrave -50\r\nKPX A Uhungarumlaut -50\r\nKPX A Umacron -50\r\nKPX A Uogonek -50\r\nKPX A Uring -50\r\nKPX A V -80\r\nKPX A W -60\r\nKPX A Y -110\r\nKPX A Yacute -110\r\nKPX A Ydieresis -110\r\nKPX A u -30\r\nKPX A uacute -30\r\nKPX A ucircumflex -30\r\nKPX A udieresis -30\r\nKPX A ugrave -30\r\nKPX A uhungarumlaut -30\r\nKPX A umacron -30\r\nKPX A uogonek -30\r\nKPX A uring -30\r\nKPX A v -40\r\nKPX A w -30\r\nKPX A y -30\r\nKPX A yacute -30\r\nKPX A ydieresis -30\r\nKPX Aacute C -40\r\nKPX Aacute Cacute -40\r\nKPX Aacute Ccaron -40\r\nKPX Aacute Ccedilla -40\r\nKPX Aacute G -50\r\nKPX Aacute Gbreve -50\r\nKPX Aacute Gcommaaccent -50\r\nKPX Aacute O -40\r\nKPX Aacute Oacute -40\r\nKPX Aacute Ocircumflex -40\r\nKPX Aacute Odieresis -40\r\nKPX Aacute Ograve -40\r\nKPX Aacute Ohungarumlaut -40\r\nKPX Aacute Omacron -40\r\nKPX Aacute Oslash -40\r\nKPX Aacute Otilde -40\r\nKPX Aacute Q -40\r\nKPX Aacute T -90\r\nKPX Aacute Tcaron -90\r\nKPX Aacute Tcommaaccent -90\r\nKPX Aacute U -50\r\nKPX Aacute Uacute -50\r\nKPX Aacute Ucircumflex -50\r\nKPX Aacute Udieresis -50\r\nKPX Aacute Ugrave -50\r\nKPX Aacute Uhungarumlaut -50\r\nKPX Aacute Umacron -50\r\nKPX Aacute Uogonek -50\r\nKPX Aacute Uring -50\r\nKPX Aacute V -80\r\nKPX Aacute W -60\r\nKPX Aacute Y -110\r\nKPX Aacute Yacute -110\r\nKPX Aacute Ydieresis -110\r\nKPX Aacute u -30\r\nKPX Aacute uacute -30\r\nKPX Aacute ucircumflex -30\r\nKPX Aacute udieresis -30\r\nKPX Aacute ugrave -30\r\nKPX Aacute uhungarumlaut -30\r\nKPX Aacute umacron -30\r\nKPX Aacute uogonek -30\r\nKPX Aacute uring -30\r\nKPX Aacute v -40\r\nKPX Aacute w -30\r\nKPX Aacute y -30\r\nKPX Aacute yacute -30\r\nKPX Aacute ydieresis -30\r\nKPX Abreve C -40\r\nKPX Abreve Cacute -40\r\nKPX Abreve Ccaron -40\r\nKPX Abreve Ccedilla -40\r\nKPX Abreve G -50\r\nKPX Abreve Gbreve -50\r\nKPX Abreve Gcommaaccent -50\r\nKPX Abreve O -40\r\nKPX Abreve Oacute -40\r\nKPX Abreve Ocircumflex -40\r\nKPX Abreve Odieresis -40\r\nKPX Abreve Ograve -40\r\nKPX Abreve Ohungarumlaut -40\r\nKPX Abreve Omacron -40\r\nKPX Abreve Oslash -40\r\nKPX Abreve Otilde -40\r\nKPX Abreve Q -40\r\nKPX Abreve T -90\r\nKPX Abreve Tcaron -90\r\nKPX Abreve Tcommaaccent -90\r\nKPX Abreve U -50\r\nKPX Abreve Uacute -50\r\nKPX Abreve Ucircumflex -50\r\nKPX Abreve Udieresis -50\r\nKPX Abreve Ugrave -50\r\nKPX Abreve Uhungarumlaut -50\r\nKPX Abreve Umacron -50\r\nKPX Abreve Uogonek -50\r\nKPX Abreve Uring -50\r\nKPX Abreve V -80\r\nKPX Abreve W -60\r\nKPX Abreve Y -110\r\nKPX Abreve Yacute -110\r\nKPX Abreve Ydieresis -110\r\nKPX Abreve u -30\r\nKPX Abreve uacute -30\r\nKPX Abreve ucircumflex -30\r\nKPX Abreve udieresis -30\r\nKPX Abreve ugrave -30\r\nKPX Abreve uhungarumlaut -30\r\nKPX Abreve umacron -30\r\nKPX Abreve uogonek -30\r\nKPX Abreve uring -30\r\nKPX Abreve v -40\r\nKPX Abreve w -30\r\nKPX Abreve y -30\r\nKPX Abreve yacute -30\r\nKPX Abreve ydieresis -30\r\nKPX Acircumflex C -40\r\nKPX Acircumflex Cacute -40\r\nKPX Acircumflex Ccaron -40\r\nKPX Acircumflex Ccedilla -40\r\nKPX Acircumflex G -50\r\nKPX Acircumflex Gbreve -50\r\nKPX Acircumflex Gcommaaccent -50\r\nKPX Acircumflex O -40\r\nKPX Acircumflex Oacute -40\r\nKPX Acircumflex Ocircumflex -40\r\nKPX Acircumflex Odieresis -40\r\nKPX Acircumflex Ograve -40\r\nKPX Acircumflex Ohungarumlaut -40\r\nKPX Acircumflex Omacron -40\r\nKPX Acircumflex Oslash -40\r\nKPX Acircumflex Otilde -40\r\nKPX Acircumflex Q -40\r\nKPX Acircumflex T -90\r\nKPX Acircumflex Tcaron -90\r\nKPX Acircumflex Tcommaaccent -90\r\nKPX Acircumflex U -50\r\nKPX Acircumflex Uacute -50\r\nKPX Acircumflex Ucircumflex -50\r\nKPX Acircumflex Udieresis -50\r\nKPX Acircumflex Ugrave -50\r\nKPX Acircumflex Uhungarumlaut -50\r\nKPX Acircumflex Umacron -50\r\nKPX Acircumflex Uogonek -50\r\nKPX Acircumflex Uring -50\r\nKPX Acircumflex V -80\r\nKPX Acircumflex W -60\r\nKPX Acircumflex Y -110\r\nKPX Acircumflex Yacute -110\r\nKPX Acircumflex Ydieresis -110\r\nKPX Acircumflex u -30\r\nKPX Acircumflex uacute -30\r\nKPX Acircumflex ucircumflex -30\r\nKPX Acircumflex udieresis -30\r\nKPX Acircumflex ugrave -30\r\nKPX Acircumflex uhungarumlaut -30\r\nKPX Acircumflex umacron -30\r\nKPX Acircumflex uogonek -30\r\nKPX Acircumflex uring -30\r\nKPX Acircumflex v -40\r\nKPX Acircumflex w -30\r\nKPX Acircumflex y -30\r\nKPX Acircumflex yacute -30\r\nKPX Acircumflex ydieresis -30\r\nKPX Adieresis C -40\r\nKPX Adieresis Cacute -40\r\nKPX Adieresis Ccaron -40\r\nKPX Adieresis Ccedilla -40\r\nKPX Adieresis G -50\r\nKPX Adieresis Gbreve -50\r\nKPX Adieresis Gcommaaccent -50\r\nKPX Adieresis O -40\r\nKPX Adieresis Oacute -40\r\nKPX Adieresis Ocircumflex -40\r\nKPX Adieresis Odieresis -40\r\nKPX Adieresis Ograve -40\r\nKPX Adieresis Ohungarumlaut -40\r\nKPX Adieresis Omacron -40\r\nKPX Adieresis Oslash -40\r\nKPX Adieresis Otilde -40\r\nKPX Adieresis Q -40\r\nKPX Adieresis T -90\r\nKPX Adieresis Tcaron -90\r\nKPX Adieresis Tcommaaccent -90\r\nKPX Adieresis U -50\r\nKPX Adieresis Uacute -50\r\nKPX Adieresis Ucircumflex -50\r\nKPX Adieresis Udieresis -50\r\nKPX Adieresis Ugrave -50\r\nKPX Adieresis Uhungarumlaut -50\r\nKPX Adieresis Umacron -50\r\nKPX Adieresis Uogonek -50\r\nKPX Adieresis Uring -50\r\nKPX Adieresis V -80\r\nKPX Adieresis W -60\r\nKPX Adieresis Y -110\r\nKPX Adieresis Yacute -110\r\nKPX Adieresis Ydieresis -110\r\nKPX Adieresis u -30\r\nKPX Adieresis uacute -30\r\nKPX Adieresis ucircumflex -30\r\nKPX Adieresis udieresis -30\r\nKPX Adieresis ugrave -30\r\nKPX Adieresis uhungarumlaut -30\r\nKPX Adieresis umacron -30\r\nKPX Adieresis uogonek -30\r\nKPX Adieresis uring -30\r\nKPX Adieresis v -40\r\nKPX Adieresis w -30\r\nKPX Adieresis y -30\r\nKPX Adieresis yacute -30\r\nKPX Adieresis ydieresis -30\r\nKPX Agrave C -40\r\nKPX Agrave Cacute -40\r\nKPX Agrave Ccaron -40\r\nKPX Agrave Ccedilla -40\r\nKPX Agrave G -50\r\nKPX Agrave Gbreve -50\r\nKPX Agrave Gcommaaccent -50\r\nKPX Agrave O -40\r\nKPX Agrave Oacute -40\r\nKPX Agrave Ocircumflex -40\r\nKPX Agrave Odieresis -40\r\nKPX Agrave Ograve -40\r\nKPX Agrave Ohungarumlaut -40\r\nKPX Agrave Omacron -40\r\nKPX Agrave Oslash -40\r\nKPX Agrave Otilde -40\r\nKPX Agrave Q -40\r\nKPX Agrave T -90\r\nKPX Agrave Tcaron -90\r\nKPX Agrave Tcommaaccent -90\r\nKPX Agrave U -50\r\nKPX Agrave Uacute -50\r\nKPX Agrave Ucircumflex -50\r\nKPX Agrave Udieresis -50\r\nKPX Agrave Ugrave -50\r\nKPX Agrave Uhungarumlaut -50\r\nKPX Agrave Umacron -50\r\nKPX Agrave Uogonek -50\r\nKPX Agrave Uring -50\r\nKPX Agrave V -80\r\nKPX Agrave W -60\r\nKPX Agrave Y -110\r\nKPX Agrave Yacute -110\r\nKPX Agrave Ydieresis -110\r\nKPX Agrave u -30\r\nKPX Agrave uacute -30\r\nKPX Agrave ucircumflex -30\r\nKPX Agrave udieresis -30\r\nKPX Agrave ugrave -30\r\nKPX Agrave uhungarumlaut -30\r\nKPX Agrave umacron -30\r\nKPX Agrave uogonek -30\r\nKPX Agrave uring -30\r\nKPX Agrave v -40\r\nKPX Agrave w -30\r\nKPX Agrave y -30\r\nKPX Agrave yacute -30\r\nKPX Agrave ydieresis -30\r\nKPX Amacron C -40\r\nKPX Amacron Cacute -40\r\nKPX Amacron Ccaron -40\r\nKPX Amacron Ccedilla -40\r\nKPX Amacron G -50\r\nKPX Amacron Gbreve -50\r\nKPX Amacron Gcommaaccent -50\r\nKPX Amacron O -40\r\nKPX Amacron Oacute -40\r\nKPX Amacron Ocircumflex -40\r\nKPX Amacron Odieresis -40\r\nKPX Amacron Ograve -40\r\nKPX Amacron Ohungarumlaut -40\r\nKPX Amacron Omacron -40\r\nKPX Amacron Oslash -40\r\nKPX Amacron Otilde -40\r\nKPX Amacron Q -40\r\nKPX Amacron T -90\r\nKPX Amacron Tcaron -90\r\nKPX Amacron Tcommaaccent -90\r\nKPX Amacron U -50\r\nKPX Amacron Uacute -50\r\nKPX Amacron Ucircumflex -50\r\nKPX Amacron Udieresis -50\r\nKPX Amacron Ugrave -50\r\nKPX Amacron Uhungarumlaut -50\r\nKPX Amacron Umacron -50\r\nKPX Amacron Uogonek -50\r\nKPX Amacron Uring -50\r\nKPX Amacron V -80\r\nKPX Amacron W -60\r\nKPX Amacron Y -110\r\nKPX Amacron Yacute -110\r\nKPX Amacron Ydieresis -110\r\nKPX Amacron u -30\r\nKPX Amacron uacute -30\r\nKPX Amacron ucircumflex -30\r\nKPX Amacron udieresis -30\r\nKPX Amacron ugrave -30\r\nKPX Amacron uhungarumlaut -30\r\nKPX Amacron umacron -30\r\nKPX Amacron uogonek -30\r\nKPX Amacron uring -30\r\nKPX Amacron v -40\r\nKPX Amacron w -30\r\nKPX Amacron y -30\r\nKPX Amacron yacute -30\r\nKPX Amacron ydieresis -30\r\nKPX Aogonek C -40\r\nKPX Aogonek Cacute -40\r\nKPX Aogonek Ccaron -40\r\nKPX Aogonek Ccedilla -40\r\nKPX Aogonek G -50\r\nKPX Aogonek Gbreve -50\r\nKPX Aogonek Gcommaaccent -50\r\nKPX Aogonek O -40\r\nKPX Aogonek Oacute -40\r\nKPX Aogonek Ocircumflex -40\r\nKPX Aogonek Odieresis -40\r\nKPX Aogonek Ograve -40\r\nKPX Aogonek Ohungarumlaut -40\r\nKPX Aogonek Omacron -40\r\nKPX Aogonek Oslash -40\r\nKPX Aogonek Otilde -40\r\nKPX Aogonek Q -40\r\nKPX Aogonek T -90\r\nKPX Aogonek Tcaron -90\r\nKPX Aogonek Tcommaaccent -90\r\nKPX Aogonek U -50\r\nKPX Aogonek Uacute -50\r\nKPX Aogonek Ucircumflex -50\r\nKPX Aogonek Udieresis -50\r\nKPX Aogonek Ugrave -50\r\nKPX Aogonek Uhungarumlaut -50\r\nKPX Aogonek Umacron -50\r\nKPX Aogonek Uogonek -50\r\nKPX Aogonek Uring -50\r\nKPX Aogonek V -80\r\nKPX Aogonek W -60\r\nKPX Aogonek Y -110\r\nKPX Aogonek Yacute -110\r\nKPX Aogonek Ydieresis -110\r\nKPX Aogonek u -30\r\nKPX Aogonek uacute -30\r\nKPX Aogonek ucircumflex -30\r\nKPX Aogonek udieresis -30\r\nKPX Aogonek ugrave -30\r\nKPX Aogonek uhungarumlaut -30\r\nKPX Aogonek umacron -30\r\nKPX Aogonek uogonek -30\r\nKPX Aogonek uring -30\r\nKPX Aogonek v -40\r\nKPX Aogonek w -30\r\nKPX Aogonek y -30\r\nKPX Aogonek yacute -30\r\nKPX Aogonek ydieresis -30\r\nKPX Aring C -40\r\nKPX Aring Cacute -40\r\nKPX Aring Ccaron -40\r\nKPX Aring Ccedilla -40\r\nKPX Aring G -50\r\nKPX Aring Gbreve -50\r\nKPX Aring Gcommaaccent -50\r\nKPX Aring O -40\r\nKPX Aring Oacute -40\r\nKPX Aring Ocircumflex -40\r\nKPX Aring Odieresis -40\r\nKPX Aring Ograve -40\r\nKPX Aring Ohungarumlaut -40\r\nKPX Aring Omacron -40\r\nKPX Aring Oslash -40\r\nKPX Aring Otilde -40\r\nKPX Aring Q -40\r\nKPX Aring T -90\r\nKPX Aring Tcaron -90\r\nKPX Aring Tcommaaccent -90\r\nKPX Aring U -50\r\nKPX Aring Uacute -50\r\nKPX Aring Ucircumflex -50\r\nKPX Aring Udieresis -50\r\nKPX Aring Ugrave -50\r\nKPX Aring Uhungarumlaut -50\r\nKPX Aring Umacron -50\r\nKPX Aring Uogonek -50\r\nKPX Aring Uring -50\r\nKPX Aring V -80\r\nKPX Aring W -60\r\nKPX Aring Y -110\r\nKPX Aring Yacute -110\r\nKPX Aring Ydieresis -110\r\nKPX Aring u -30\r\nKPX Aring uacute -30\r\nKPX Aring ucircumflex -30\r\nKPX Aring udieresis -30\r\nKPX Aring ugrave -30\r\nKPX Aring uhungarumlaut -30\r\nKPX Aring umacron -30\r\nKPX Aring uogonek -30\r\nKPX Aring uring -30\r\nKPX Aring v -40\r\nKPX Aring w -30\r\nKPX Aring y -30\r\nKPX Aring yacute -30\r\nKPX Aring ydieresis -30\r\nKPX Atilde C -40\r\nKPX Atilde Cacute -40\r\nKPX Atilde Ccaron -40\r\nKPX Atilde Ccedilla -40\r\nKPX Atilde G -50\r\nKPX Atilde Gbreve -50\r\nKPX Atilde Gcommaaccent -50\r\nKPX Atilde O -40\r\nKPX Atilde Oacute -40\r\nKPX Atilde Ocircumflex -40\r\nKPX Atilde Odieresis -40\r\nKPX Atilde Ograve -40\r\nKPX Atilde Ohungarumlaut -40\r\nKPX Atilde Omacron -40\r\nKPX Atilde Oslash -40\r\nKPX Atilde Otilde -40\r\nKPX Atilde Q -40\r\nKPX Atilde T -90\r\nKPX Atilde Tcaron -90\r\nKPX Atilde Tcommaaccent -90\r\nKPX Atilde U -50\r\nKPX Atilde Uacute -50\r\nKPX Atilde Ucircumflex -50\r\nKPX Atilde Udieresis -50\r\nKPX Atilde Ugrave -50\r\nKPX Atilde Uhungarumlaut -50\r\nKPX Atilde Umacron -50\r\nKPX Atilde Uogonek -50\r\nKPX Atilde Uring -50\r\nKPX Atilde V -80\r\nKPX Atilde W -60\r\nKPX Atilde Y -110\r\nKPX Atilde Yacute -110\r\nKPX Atilde Ydieresis -110\r\nKPX Atilde u -30\r\nKPX Atilde uacute -30\r\nKPX Atilde ucircumflex -30\r\nKPX Atilde udieresis -30\r\nKPX Atilde ugrave -30\r\nKPX Atilde uhungarumlaut -30\r\nKPX Atilde umacron -30\r\nKPX Atilde uogonek -30\r\nKPX Atilde uring -30\r\nKPX Atilde v -40\r\nKPX Atilde w -30\r\nKPX Atilde y -30\r\nKPX Atilde yacute -30\r\nKPX Atilde ydieresis -30\r\nKPX B A -30\r\nKPX B Aacute -30\r\nKPX B Abreve -30\r\nKPX B Acircumflex -30\r\nKPX B Adieresis -30\r\nKPX B Agrave -30\r\nKPX B Amacron -30\r\nKPX B Aogonek -30\r\nKPX B Aring -30\r\nKPX B Atilde -30\r\nKPX B U -10\r\nKPX B Uacute -10\r\nKPX B Ucircumflex -10\r\nKPX B Udieresis -10\r\nKPX B Ugrave -10\r\nKPX B Uhungarumlaut -10\r\nKPX B Umacron -10\r\nKPX B Uogonek -10\r\nKPX B Uring -10\r\nKPX D A -40\r\nKPX D Aacute -40\r\nKPX D Abreve -40\r\nKPX D Acircumflex -40\r\nKPX D Adieresis -40\r\nKPX D Agrave -40\r\nKPX D Amacron -40\r\nKPX D Aogonek -40\r\nKPX D Aring -40\r\nKPX D Atilde -40\r\nKPX D V -40\r\nKPX D W -40\r\nKPX D Y -70\r\nKPX D Yacute -70\r\nKPX D Ydieresis -70\r\nKPX D comma -30\r\nKPX D period -30\r\nKPX Dcaron A -40\r\nKPX Dcaron Aacute -40\r\nKPX Dcaron Abreve -40\r\nKPX Dcaron Acircumflex -40\r\nKPX Dcaron Adieresis -40\r\nKPX Dcaron Agrave -40\r\nKPX Dcaron Amacron -40\r\nKPX Dcaron Aogonek -40\r\nKPX Dcaron Aring -40\r\nKPX Dcaron Atilde -40\r\nKPX Dcaron V -40\r\nKPX Dcaron W -40\r\nKPX Dcaron Y -70\r\nKPX Dcaron Yacute -70\r\nKPX Dcaron Ydieresis -70\r\nKPX Dcaron comma -30\r\nKPX Dcaron period -30\r\nKPX Dcroat A -40\r\nKPX Dcroat Aacute -40\r\nKPX Dcroat Abreve -40\r\nKPX Dcroat Acircumflex -40\r\nKPX Dcroat Adieresis -40\r\nKPX Dcroat Agrave -40\r\nKPX Dcroat Amacron -40\r\nKPX Dcroat Aogonek -40\r\nKPX Dcroat Aring -40\r\nKPX Dcroat Atilde -40\r\nKPX Dcroat V -40\r\nKPX Dcroat W -40\r\nKPX Dcroat Y -70\r\nKPX Dcroat Yacute -70\r\nKPX Dcroat Ydieresis -70\r\nKPX Dcroat comma -30\r\nKPX Dcroat period -30\r\nKPX F A -80\r\nKPX F Aacute -80\r\nKPX F Abreve -80\r\nKPX F Acircumflex -80\r\nKPX F Adieresis -80\r\nKPX F Agrave -80\r\nKPX F Amacron -80\r\nKPX F Aogonek -80\r\nKPX F Aring -80\r\nKPX F Atilde -80\r\nKPX F a -20\r\nKPX F aacute -20\r\nKPX F abreve -20\r\nKPX F acircumflex -20\r\nKPX F adieresis -20\r\nKPX F agrave -20\r\nKPX F amacron -20\r\nKPX F aogonek -20\r\nKPX F aring -20\r\nKPX F atilde -20\r\nKPX F comma -100\r\nKPX F period -100\r\nKPX J A -20\r\nKPX J Aacute -20\r\nKPX J Abreve -20\r\nKPX J Acircumflex -20\r\nKPX J Adieresis -20\r\nKPX J Agrave -20\r\nKPX J Amacron -20\r\nKPX J Aogonek -20\r\nKPX J Aring -20\r\nKPX J Atilde -20\r\nKPX J comma -20\r\nKPX J period -20\r\nKPX J u -20\r\nKPX J uacute -20\r\nKPX J ucircumflex -20\r\nKPX J udieresis -20\r\nKPX J ugrave -20\r\nKPX J uhungarumlaut -20\r\nKPX J umacron -20\r\nKPX J uogonek -20\r\nKPX J uring -20\r\nKPX K O -30\r\nKPX K Oacute -30\r\nKPX K Ocircumflex -30\r\nKPX K Odieresis -30\r\nKPX K Ograve -30\r\nKPX K Ohungarumlaut -30\r\nKPX K Omacron -30\r\nKPX K Oslash -30\r\nKPX K Otilde -30\r\nKPX K e -15\r\nKPX K eacute -15\r\nKPX K ecaron -15\r\nKPX K ecircumflex -15\r\nKPX K edieresis -15\r\nKPX K edotaccent -15\r\nKPX K egrave -15\r\nKPX K emacron -15\r\nKPX K eogonek -15\r\nKPX K o -35\r\nKPX K oacute -35\r\nKPX K ocircumflex -35\r\nKPX K odieresis -35\r\nKPX K ograve -35\r\nKPX K ohungarumlaut -35\r\nKPX K omacron -35\r\nKPX K oslash -35\r\nKPX K otilde -35\r\nKPX K u -30\r\nKPX K uacute -30\r\nKPX K ucircumflex -30\r\nKPX K udieresis -30\r\nKPX K ugrave -30\r\nKPX K uhungarumlaut -30\r\nKPX K umacron -30\r\nKPX K uogonek -30\r\nKPX K uring -30\r\nKPX K y -40\r\nKPX K yacute -40\r\nKPX K ydieresis -40\r\nKPX Kcommaaccent O -30\r\nKPX Kcommaaccent Oacute -30\r\nKPX Kcommaaccent Ocircumflex -30\r\nKPX Kcommaaccent Odieresis -30\r\nKPX Kcommaaccent Ograve -30\r\nKPX Kcommaaccent Ohungarumlaut -30\r\nKPX Kcommaaccent Omacron -30\r\nKPX Kcommaaccent Oslash -30\r\nKPX Kcommaaccent Otilde -30\r\nKPX Kcommaaccent e -15\r\nKPX Kcommaaccent eacute -15\r\nKPX Kcommaaccent ecaron -15\r\nKPX Kcommaaccent ecircumflex -15\r\nKPX Kcommaaccent edieresis -15\r\nKPX Kcommaaccent edotaccent -15\r\nKPX Kcommaaccent egrave -15\r\nKPX Kcommaaccent emacron -15\r\nKPX Kcommaaccent eogonek -15\r\nKPX Kcommaaccent o -35\r\nKPX Kcommaaccent oacute -35\r\nKPX Kcommaaccent ocircumflex -35\r\nKPX Kcommaaccent odieresis -35\r\nKPX Kcommaaccent ograve -35\r\nKPX Kcommaaccent ohungarumlaut -35\r\nKPX Kcommaaccent omacron -35\r\nKPX Kcommaaccent oslash -35\r\nKPX Kcommaaccent otilde -35\r\nKPX Kcommaaccent u -30\r\nKPX Kcommaaccent uacute -30\r\nKPX Kcommaaccent ucircumflex -30\r\nKPX Kcommaaccent udieresis -30\r\nKPX Kcommaaccent ugrave -30\r\nKPX Kcommaaccent uhungarumlaut -30\r\nKPX Kcommaaccent umacron -30\r\nKPX Kcommaaccent uogonek -30\r\nKPX Kcommaaccent uring -30\r\nKPX Kcommaaccent y -40\r\nKPX Kcommaaccent yacute -40\r\nKPX Kcommaaccent ydieresis -40\r\nKPX L T -90\r\nKPX L Tcaron -90\r\nKPX L Tcommaaccent -90\r\nKPX L V -110\r\nKPX L W -80\r\nKPX L Y -120\r\nKPX L Yacute -120\r\nKPX L Ydieresis -120\r\nKPX L quotedblright -140\r\nKPX L quoteright -140\r\nKPX L y -30\r\nKPX L yacute -30\r\nKPX L ydieresis -30\r\nKPX Lacute T -90\r\nKPX Lacute Tcaron -90\r\nKPX Lacute Tcommaaccent -90\r\nKPX Lacute V -110\r\nKPX Lacute W -80\r\nKPX Lacute Y -120\r\nKPX Lacute Yacute -120\r\nKPX Lacute Ydieresis -120\r\nKPX Lacute quotedblright -140\r\nKPX Lacute quoteright -140\r\nKPX Lacute y -30\r\nKPX Lacute yacute -30\r\nKPX Lacute ydieresis -30\r\nKPX Lcommaaccent T -90\r\nKPX Lcommaaccent Tcaron -90\r\nKPX Lcommaaccent Tcommaaccent -90\r\nKPX Lcommaaccent V -110\r\nKPX Lcommaaccent W -80\r\nKPX Lcommaaccent Y -120\r\nKPX Lcommaaccent Yacute -120\r\nKPX Lcommaaccent Ydieresis -120\r\nKPX Lcommaaccent quotedblright -140\r\nKPX Lcommaaccent quoteright -140\r\nKPX Lcommaaccent y -30\r\nKPX Lcommaaccent yacute -30\r\nKPX Lcommaaccent ydieresis -30\r\nKPX Lslash T -90\r\nKPX Lslash Tcaron -90\r\nKPX Lslash Tcommaaccent -90\r\nKPX Lslash V -110\r\nKPX Lslash W -80\r\nKPX Lslash Y -120\r\nKPX Lslash Yacute -120\r\nKPX Lslash Ydieresis -120\r\nKPX Lslash quotedblright -140\r\nKPX Lslash quoteright -140\r\nKPX Lslash y -30\r\nKPX Lslash yacute -30\r\nKPX Lslash ydieresis -30\r\nKPX O A -50\r\nKPX O Aacute -50\r\nKPX O Abreve -50\r\nKPX O Acircumflex -50\r\nKPX O Adieresis -50\r\nKPX O Agrave -50\r\nKPX O Amacron -50\r\nKPX O Aogonek -50\r\nKPX O Aring -50\r\nKPX O Atilde -50\r\nKPX O T -40\r\nKPX O Tcaron -40\r\nKPX O Tcommaaccent -40\r\nKPX O V -50\r\nKPX O W -50\r\nKPX O X -50\r\nKPX O Y -70\r\nKPX O Yacute -70\r\nKPX O Ydieresis -70\r\nKPX O comma -40\r\nKPX O period -40\r\nKPX Oacute A -50\r\nKPX Oacute Aacute -50\r\nKPX Oacute Abreve -50\r\nKPX Oacute Acircumflex -50\r\nKPX Oacute Adieresis -50\r\nKPX Oacute Agrave -50\r\nKPX Oacute Amacron -50\r\nKPX Oacute Aogonek -50\r\nKPX Oacute Aring -50\r\nKPX Oacute Atilde -50\r\nKPX Oacute T -40\r\nKPX Oacute Tcaron -40\r\nKPX Oacute Tcommaaccent -40\r\nKPX Oacute V -50\r\nKPX Oacute W -50\r\nKPX Oacute X -50\r\nKPX Oacute Y -70\r\nKPX Oacute Yacute -70\r\nKPX Oacute Ydieresis -70\r\nKPX Oacute comma -40\r\nKPX Oacute period -40\r\nKPX Ocircumflex A -50\r\nKPX Ocircumflex Aacute -50\r\nKPX Ocircumflex Abreve -50\r\nKPX Ocircumflex Acircumflex -50\r\nKPX Ocircumflex Adieresis -50\r\nKPX Ocircumflex Agrave -50\r\nKPX Ocircumflex Amacron -50\r\nKPX Ocircumflex Aogonek -50\r\nKPX Ocircumflex Aring -50\r\nKPX Ocircumflex Atilde -50\r\nKPX Ocircumflex T -40\r\nKPX Ocircumflex Tcaron -40\r\nKPX Ocircumflex Tcommaaccent -40\r\nKPX Ocircumflex V -50\r\nKPX Ocircumflex W -50\r\nKPX Ocircumflex X -50\r\nKPX Ocircumflex Y -70\r\nKPX Ocircumflex Yacute -70\r\nKPX Ocircumflex Ydieresis -70\r\nKPX Ocircumflex comma -40\r\nKPX Ocircumflex period -40\r\nKPX Odieresis A -50\r\nKPX Odieresis Aacute -50\r\nKPX Odieresis Abreve -50\r\nKPX Odieresis Acircumflex -50\r\nKPX Odieresis Adieresis -50\r\nKPX Odieresis Agrave -50\r\nKPX Odieresis Amacron -50\r\nKPX Odieresis Aogonek -50\r\nKPX Odieresis Aring -50\r\nKPX Odieresis Atilde -50\r\nKPX Odieresis T -40\r\nKPX Odieresis Tcaron -40\r\nKPX Odieresis Tcommaaccent -40\r\nKPX Odieresis V -50\r\nKPX Odieresis W -50\r\nKPX Odieresis X -50\r\nKPX Odieresis Y -70\r\nKPX Odieresis Yacute -70\r\nKPX Odieresis Ydieresis -70\r\nKPX Odieresis comma -40\r\nKPX Odieresis period -40\r\nKPX Ograve A -50\r\nKPX Ograve Aacute -50\r\nKPX Ograve Abreve -50\r\nKPX Ograve Acircumflex -50\r\nKPX Ograve Adieresis -50\r\nKPX Ograve Agrave -50\r\nKPX Ograve Amacron -50\r\nKPX Ograve Aogonek -50\r\nKPX Ograve Aring -50\r\nKPX Ograve Atilde -50\r\nKPX Ograve T -40\r\nKPX Ograve Tcaron -40\r\nKPX Ograve Tcommaaccent -40\r\nKPX Ograve V -50\r\nKPX Ograve W -50\r\nKPX Ograve X -50\r\nKPX Ograve Y -70\r\nKPX Ograve Yacute -70\r\nKPX Ograve Ydieresis -70\r\nKPX Ograve comma -40\r\nKPX Ograve period -40\r\nKPX Ohungarumlaut A -50\r\nKPX Ohungarumlaut Aacute -50\r\nKPX Ohungarumlaut Abreve -50\r\nKPX Ohungarumlaut Acircumflex -50\r\nKPX Ohungarumlaut Adieresis -50\r\nKPX Ohungarumlaut Agrave -50\r\nKPX Ohungarumlaut Amacron -50\r\nKPX Ohungarumlaut Aogonek -50\r\nKPX Ohungarumlaut Aring -50\r\nKPX Ohungarumlaut Atilde -50\r\nKPX Ohungarumlaut T -40\r\nKPX Ohungarumlaut Tcaron -40\r\nKPX Ohungarumlaut Tcommaaccent -40\r\nKPX Ohungarumlaut V -50\r\nKPX Ohungarumlaut W -50\r\nKPX Ohungarumlaut X -50\r\nKPX Ohungarumlaut Y -70\r\nKPX Ohungarumlaut Yacute -70\r\nKPX Ohungarumlaut Ydieresis -70\r\nKPX Ohungarumlaut comma -40\r\nKPX Ohungarumlaut period -40\r\nKPX Omacron A -50\r\nKPX Omacron Aacute -50\r\nKPX Omacron Abreve -50\r\nKPX Omacron Acircumflex -50\r\nKPX Omacron Adieresis -50\r\nKPX Omacron Agrave -50\r\nKPX Omacron Amacron -50\r\nKPX Omacron Aogonek -50\r\nKPX Omacron Aring -50\r\nKPX Omacron Atilde -50\r\nKPX Omacron T -40\r\nKPX Omacron Tcaron -40\r\nKPX Omacron Tcommaaccent -40\r\nKPX Omacron V -50\r\nKPX Omacron W -50\r\nKPX Omacron X -50\r\nKPX Omacron Y -70\r\nKPX Omacron Yacute -70\r\nKPX Omacron Ydieresis -70\r\nKPX Omacron comma -40\r\nKPX Omacron period -40\r\nKPX Oslash A -50\r\nKPX Oslash Aacute -50\r\nKPX Oslash Abreve -50\r\nKPX Oslash Acircumflex -50\r\nKPX Oslash Adieresis -50\r\nKPX Oslash Agrave -50\r\nKPX Oslash Amacron -50\r\nKPX Oslash Aogonek -50\r\nKPX Oslash Aring -50\r\nKPX Oslash Atilde -50\r\nKPX Oslash T -40\r\nKPX Oslash Tcaron -40\r\nKPX Oslash Tcommaaccent -40\r\nKPX Oslash V -50\r\nKPX Oslash W -50\r\nKPX Oslash X -50\r\nKPX Oslash Y -70\r\nKPX Oslash Yacute -70\r\nKPX Oslash Ydieresis -70\r\nKPX Oslash comma -40\r\nKPX Oslash period -40\r\nKPX Otilde A -50\r\nKPX Otilde Aacute -50\r\nKPX Otilde Abreve -50\r\nKPX Otilde Acircumflex -50\r\nKPX Otilde Adieresis -50\r\nKPX Otilde Agrave -50\r\nKPX Otilde Amacron -50\r\nKPX Otilde Aogonek -50\r\nKPX Otilde Aring -50\r\nKPX Otilde Atilde -50\r\nKPX Otilde T -40\r\nKPX Otilde Tcaron -40\r\nKPX Otilde Tcommaaccent -40\r\nKPX Otilde V -50\r\nKPX Otilde W -50\r\nKPX Otilde X -50\r\nKPX Otilde Y -70\r\nKPX Otilde Yacute -70\r\nKPX Otilde Ydieresis -70\r\nKPX Otilde comma -40\r\nKPX Otilde period -40\r\nKPX P A -100\r\nKPX P Aacute -100\r\nKPX P Abreve -100\r\nKPX P Acircumflex -100\r\nKPX P Adieresis -100\r\nKPX P Agrave -100\r\nKPX P Amacron -100\r\nKPX P Aogonek -100\r\nKPX P Aring -100\r\nKPX P Atilde -100\r\nKPX P a -30\r\nKPX P aacute -30\r\nKPX P abreve -30\r\nKPX P acircumflex -30\r\nKPX P adieresis -30\r\nKPX P agrave -30\r\nKPX P amacron -30\r\nKPX P aogonek -30\r\nKPX P aring -30\r\nKPX P atilde -30\r\nKPX P comma -120\r\nKPX P e -30\r\nKPX P eacute -30\r\nKPX P ecaron -30\r\nKPX P ecircumflex -30\r\nKPX P edieresis -30\r\nKPX P edotaccent -30\r\nKPX P egrave -30\r\nKPX P emacron -30\r\nKPX P eogonek -30\r\nKPX P o -40\r\nKPX P oacute -40\r\nKPX P ocircumflex -40\r\nKPX P odieresis -40\r\nKPX P ograve -40\r\nKPX P ohungarumlaut -40\r\nKPX P omacron -40\r\nKPX P oslash -40\r\nKPX P otilde -40\r\nKPX P period -120\r\nKPX Q U -10\r\nKPX Q Uacute -10\r\nKPX Q Ucircumflex -10\r\nKPX Q Udieresis -10\r\nKPX Q Ugrave -10\r\nKPX Q Uhungarumlaut -10\r\nKPX Q Umacron -10\r\nKPX Q Uogonek -10\r\nKPX Q Uring -10\r\nKPX Q comma 20\r\nKPX Q period 20\r\nKPX R O -20\r\nKPX R Oacute -20\r\nKPX R Ocircumflex -20\r\nKPX R Odieresis -20\r\nKPX R Ograve -20\r\nKPX R Ohungarumlaut -20\r\nKPX R Omacron -20\r\nKPX R Oslash -20\r\nKPX R Otilde -20\r\nKPX R T -20\r\nKPX R Tcaron -20\r\nKPX R Tcommaaccent -20\r\nKPX R U -20\r\nKPX R Uacute -20\r\nKPX R Ucircumflex -20\r\nKPX R Udieresis -20\r\nKPX R Ugrave -20\r\nKPX R Uhungarumlaut -20\r\nKPX R Umacron -20\r\nKPX R Uogonek -20\r\nKPX R Uring -20\r\nKPX R V -50\r\nKPX R W -40\r\nKPX R Y -50\r\nKPX R Yacute -50\r\nKPX R Ydieresis -50\r\nKPX Racute O -20\r\nKPX Racute Oacute -20\r\nKPX Racute Ocircumflex -20\r\nKPX Racute Odieresis -20\r\nKPX Racute Ograve -20\r\nKPX Racute Ohungarumlaut -20\r\nKPX Racute Omacron -20\r\nKPX Racute Oslash -20\r\nKPX Racute Otilde -20\r\nKPX Racute T -20\r\nKPX Racute Tcaron -20\r\nKPX Racute Tcommaaccent -20\r\nKPX Racute U -20\r\nKPX Racute Uacute -20\r\nKPX Racute Ucircumflex -20\r\nKPX Racute Udieresis -20\r\nKPX Racute Ugrave -20\r\nKPX Racute Uhungarumlaut -20\r\nKPX Racute Umacron -20\r\nKPX Racute Uogonek -20\r\nKPX Racute Uring -20\r\nKPX Racute V -50\r\nKPX Racute W -40\r\nKPX Racute Y -50\r\nKPX Racute Yacute -50\r\nKPX Racute Ydieresis -50\r\nKPX Rcaron O -20\r\nKPX Rcaron Oacute -20\r\nKPX Rcaron Ocircumflex -20\r\nKPX Rcaron Odieresis -20\r\nKPX Rcaron Ograve -20\r\nKPX Rcaron Ohungarumlaut -20\r\nKPX Rcaron Omacron -20\r\nKPX Rcaron Oslash -20\r\nKPX Rcaron Otilde -20\r\nKPX Rcaron T -20\r\nKPX Rcaron Tcaron -20\r\nKPX Rcaron Tcommaaccent -20\r\nKPX Rcaron U -20\r\nKPX Rcaron Uacute -20\r\nKPX Rcaron Ucircumflex -20\r\nKPX Rcaron Udieresis -20\r\nKPX Rcaron Ugrave -20\r\nKPX Rcaron Uhungarumlaut -20\r\nKPX Rcaron Umacron -20\r\nKPX Rcaron Uogonek -20\r\nKPX Rcaron Uring -20\r\nKPX Rcaron V -50\r\nKPX Rcaron W -40\r\nKPX Rcaron Y -50\r\nKPX Rcaron Yacute -50\r\nKPX Rcaron Ydieresis -50\r\nKPX Rcommaaccent O -20\r\nKPX Rcommaaccent Oacute -20\r\nKPX Rcommaaccent Ocircumflex -20\r\nKPX Rcommaaccent Odieresis -20\r\nKPX Rcommaaccent Ograve -20\r\nKPX Rcommaaccent Ohungarumlaut -20\r\nKPX Rcommaaccent Omacron -20\r\nKPX Rcommaaccent Oslash -20\r\nKPX Rcommaaccent Otilde -20\r\nKPX Rcommaaccent T -20\r\nKPX Rcommaaccent Tcaron -20\r\nKPX Rcommaaccent Tcommaaccent -20\r\nKPX Rcommaaccent U -20\r\nKPX Rcommaaccent Uacute -20\r\nKPX Rcommaaccent Ucircumflex -20\r\nKPX Rcommaaccent Udieresis -20\r\nKPX Rcommaaccent Ugrave -20\r\nKPX Rcommaaccent Uhungarumlaut -20\r\nKPX Rcommaaccent Umacron -20\r\nKPX Rcommaaccent Uogonek -20\r\nKPX Rcommaaccent Uring -20\r\nKPX Rcommaaccent V -50\r\nKPX Rcommaaccent W -40\r\nKPX Rcommaaccent Y -50\r\nKPX Rcommaaccent Yacute -50\r\nKPX Rcommaaccent Ydieresis -50\r\nKPX T A -90\r\nKPX T Aacute -90\r\nKPX T Abreve -90\r\nKPX T Acircumflex -90\r\nKPX T Adieresis -90\r\nKPX T Agrave -90\r\nKPX T Amacron -90\r\nKPX T Aogonek -90\r\nKPX T Aring -90\r\nKPX T Atilde -90\r\nKPX T O -40\r\nKPX T Oacute -40\r\nKPX T Ocircumflex -40\r\nKPX T Odieresis -40\r\nKPX T Ograve -40\r\nKPX T Ohungarumlaut -40\r\nKPX T Omacron -40\r\nKPX T Oslash -40\r\nKPX T Otilde -40\r\nKPX T a -80\r\nKPX T aacute -80\r\nKPX T abreve -80\r\nKPX T acircumflex -80\r\nKPX T adieresis -80\r\nKPX T agrave -80\r\nKPX T amacron -80\r\nKPX T aogonek -80\r\nKPX T aring -80\r\nKPX T atilde -80\r\nKPX T colon -40\r\nKPX T comma -80\r\nKPX T e -60\r\nKPX T eacute -60\r\nKPX T ecaron -60\r\nKPX T ecircumflex -60\r\nKPX T edieresis -60\r\nKPX T edotaccent -60\r\nKPX T egrave -60\r\nKPX T emacron -60\r\nKPX T eogonek -60\r\nKPX T hyphen -120\r\nKPX T o -80\r\nKPX T oacute -80\r\nKPX T ocircumflex -80\r\nKPX T odieresis -80\r\nKPX T ograve -80\r\nKPX T ohungarumlaut -80\r\nKPX T omacron -80\r\nKPX T oslash -80\r\nKPX T otilde -80\r\nKPX T period -80\r\nKPX T r -80\r\nKPX T racute -80\r\nKPX T rcommaaccent -80\r\nKPX T semicolon -40\r\nKPX T u -90\r\nKPX T uacute -90\r\nKPX T ucircumflex -90\r\nKPX T udieresis -90\r\nKPX T ugrave -90\r\nKPX T uhungarumlaut -90\r\nKPX T umacron -90\r\nKPX T uogonek -90\r\nKPX T uring -90\r\nKPX T w -60\r\nKPX T y -60\r\nKPX T yacute -60\r\nKPX T ydieresis -60\r\nKPX Tcaron A -90\r\nKPX Tcaron Aacute -90\r\nKPX Tcaron Abreve -90\r\nKPX Tcaron Acircumflex -90\r\nKPX Tcaron Adieresis -90\r\nKPX Tcaron Agrave -90\r\nKPX Tcaron Amacron -90\r\nKPX Tcaron Aogonek -90\r\nKPX Tcaron Aring -90\r\nKPX Tcaron Atilde -90\r\nKPX Tcaron O -40\r\nKPX Tcaron Oacute -40\r\nKPX Tcaron Ocircumflex -40\r\nKPX Tcaron Odieresis -40\r\nKPX Tcaron Ograve -40\r\nKPX Tcaron Ohungarumlaut -40\r\nKPX Tcaron Omacron -40\r\nKPX Tcaron Oslash -40\r\nKPX Tcaron Otilde -40\r\nKPX Tcaron a -80\r\nKPX Tcaron aacute -80\r\nKPX Tcaron abreve -80\r\nKPX Tcaron acircumflex -80\r\nKPX Tcaron adieresis -80\r\nKPX Tcaron agrave -80\r\nKPX Tcaron amacron -80\r\nKPX Tcaron aogonek -80\r\nKPX Tcaron aring -80\r\nKPX Tcaron atilde -80\r\nKPX Tcaron colon -40\r\nKPX Tcaron comma -80\r\nKPX Tcaron e -60\r\nKPX Tcaron eacute -60\r\nKPX Tcaron ecaron -60\r\nKPX Tcaron ecircumflex -60\r\nKPX Tcaron edieresis -60\r\nKPX Tcaron edotaccent -60\r\nKPX Tcaron egrave -60\r\nKPX Tcaron emacron -60\r\nKPX Tcaron eogonek -60\r\nKPX Tcaron hyphen -120\r\nKPX Tcaron o -80\r\nKPX Tcaron oacute -80\r\nKPX Tcaron ocircumflex -80\r\nKPX Tcaron odieresis -80\r\nKPX Tcaron ograve -80\r\nKPX Tcaron ohungarumlaut -80\r\nKPX Tcaron omacron -80\r\nKPX Tcaron oslash -80\r\nKPX Tcaron otilde -80\r\nKPX Tcaron period -80\r\nKPX Tcaron r -80\r\nKPX Tcaron racute -80\r\nKPX Tcaron rcommaaccent -80\r\nKPX Tcaron semicolon -40\r\nKPX Tcaron u -90\r\nKPX Tcaron uacute -90\r\nKPX Tcaron ucircumflex -90\r\nKPX Tcaron udieresis -90\r\nKPX Tcaron ugrave -90\r\nKPX Tcaron uhungarumlaut -90\r\nKPX Tcaron umacron -90\r\nKPX Tcaron uogonek -90\r\nKPX Tcaron uring -90\r\nKPX Tcaron w -60\r\nKPX Tcaron y -60\r\nKPX Tcaron yacute -60\r\nKPX Tcaron ydieresis -60\r\nKPX Tcommaaccent A -90\r\nKPX Tcommaaccent Aacute -90\r\nKPX Tcommaaccent Abreve -90\r\nKPX Tcommaaccent Acircumflex -90\r\nKPX Tcommaaccent Adieresis -90\r\nKPX Tcommaaccent Agrave -90\r\nKPX Tcommaaccent Amacron -90\r\nKPX Tcommaaccent Aogonek -90\r\nKPX Tcommaaccent Aring -90\r\nKPX Tcommaaccent Atilde -90\r\nKPX Tcommaaccent O -40\r\nKPX Tcommaaccent Oacute -40\r\nKPX Tcommaaccent Ocircumflex -40\r\nKPX Tcommaaccent Odieresis -40\r\nKPX Tcommaaccent Ograve -40\r\nKPX Tcommaaccent Ohungarumlaut -40\r\nKPX Tcommaaccent Omacron -40\r\nKPX Tcommaaccent Oslash -40\r\nKPX Tcommaaccent Otilde -40\r\nKPX Tcommaaccent a -80\r\nKPX Tcommaaccent aacute -80\r\nKPX Tcommaaccent abreve -80\r\nKPX Tcommaaccent acircumflex -80\r\nKPX Tcommaaccent adieresis -80\r\nKPX Tcommaaccent agrave -80\r\nKPX Tcommaaccent amacron -80\r\nKPX Tcommaaccent aogonek -80\r\nKPX Tcommaaccent aring -80\r\nKPX Tcommaaccent atilde -80\r\nKPX Tcommaaccent colon -40\r\nKPX Tcommaaccent comma -80\r\nKPX Tcommaaccent e -60\r\nKPX Tcommaaccent eacute -60\r\nKPX Tcommaaccent ecaron -60\r\nKPX Tcommaaccent ecircumflex -60\r\nKPX Tcommaaccent edieresis -60\r\nKPX Tcommaaccent edotaccent -60\r\nKPX Tcommaaccent egrave -60\r\nKPX Tcommaaccent emacron -60\r\nKPX Tcommaaccent eogonek -60\r\nKPX Tcommaaccent hyphen -120\r\nKPX Tcommaaccent o -80\r\nKPX Tcommaaccent oacute -80\r\nKPX Tcommaaccent ocircumflex -80\r\nKPX Tcommaaccent odieresis -80\r\nKPX Tcommaaccent ograve -80\r\nKPX Tcommaaccent ohungarumlaut -80\r\nKPX Tcommaaccent omacron -80\r\nKPX Tcommaaccent oslash -80\r\nKPX Tcommaaccent otilde -80\r\nKPX Tcommaaccent period -80\r\nKPX Tcommaaccent r -80\r\nKPX Tcommaaccent racute -80\r\nKPX Tcommaaccent rcommaaccent -80\r\nKPX Tcommaaccent semicolon -40\r\nKPX Tcommaaccent u -90\r\nKPX Tcommaaccent uacute -90\r\nKPX Tcommaaccent ucircumflex -90\r\nKPX Tcommaaccent udieresis -90\r\nKPX Tcommaaccent ugrave -90\r\nKPX Tcommaaccent uhungarumlaut -90\r\nKPX Tcommaaccent umacron -90\r\nKPX Tcommaaccent uogonek -90\r\nKPX Tcommaaccent uring -90\r\nKPX Tcommaaccent w -60\r\nKPX Tcommaaccent y -60\r\nKPX Tcommaaccent yacute -60\r\nKPX Tcommaaccent ydieresis -60\r\nKPX U A -50\r\nKPX U Aacute -50\r\nKPX U Abreve -50\r\nKPX U Acircumflex -50\r\nKPX U Adieresis -50\r\nKPX U Agrave -50\r\nKPX U Amacron -50\r\nKPX U Aogonek -50\r\nKPX U Aring -50\r\nKPX U Atilde -50\r\nKPX U comma -30\r\nKPX U period -30\r\nKPX Uacute A -50\r\nKPX Uacute Aacute -50\r\nKPX Uacute Abreve -50\r\nKPX Uacute Acircumflex -50\r\nKPX Uacute Adieresis -50\r\nKPX Uacute Agrave -50\r\nKPX Uacute Amacron -50\r\nKPX Uacute Aogonek -50\r\nKPX Uacute Aring -50\r\nKPX Uacute Atilde -50\r\nKPX Uacute comma -30\r\nKPX Uacute period -30\r\nKPX Ucircumflex A -50\r\nKPX Ucircumflex Aacute -50\r\nKPX Ucircumflex Abreve -50\r\nKPX Ucircumflex Acircumflex -50\r\nKPX Ucircumflex Adieresis -50\r\nKPX Ucircumflex Agrave -50\r\nKPX Ucircumflex Amacron -50\r\nKPX Ucircumflex Aogonek -50\r\nKPX Ucircumflex Aring -50\r\nKPX Ucircumflex Atilde -50\r\nKPX Ucircumflex comma -30\r\nKPX Ucircumflex period -30\r\nKPX Udieresis A -50\r\nKPX Udieresis Aacute -50\r\nKPX Udieresis Abreve -50\r\nKPX Udieresis Acircumflex -50\r\nKPX Udieresis Adieresis -50\r\nKPX Udieresis Agrave -50\r\nKPX Udieresis Amacron -50\r\nKPX Udieresis Aogonek -50\r\nKPX Udieresis Aring -50\r\nKPX Udieresis Atilde -50\r\nKPX Udieresis comma -30\r\nKPX Udieresis period -30\r\nKPX Ugrave A -50\r\nKPX Ugrave Aacute -50\r\nKPX Ugrave Abreve -50\r\nKPX Ugrave Acircumflex -50\r\nKPX Ugrave Adieresis -50\r\nKPX Ugrave Agrave -50\r\nKPX Ugrave Amacron -50\r\nKPX Ugrave Aogonek -50\r\nKPX Ugrave Aring -50\r\nKPX Ugrave Atilde -50\r\nKPX Ugrave comma -30\r\nKPX Ugrave period -30\r\nKPX Uhungarumlaut A -50\r\nKPX Uhungarumlaut Aacute -50\r\nKPX Uhungarumlaut Abreve -50\r\nKPX Uhungarumlaut Acircumflex -50\r\nKPX Uhungarumlaut Adieresis -50\r\nKPX Uhungarumlaut Agrave -50\r\nKPX Uhungarumlaut Amacron -50\r\nKPX Uhungarumlaut Aogonek -50\r\nKPX Uhungarumlaut Aring -50\r\nKPX Uhungarumlaut Atilde -50\r\nKPX Uhungarumlaut comma -30\r\nKPX Uhungarumlaut period -30\r\nKPX Umacron A -50\r\nKPX Umacron Aacute -50\r\nKPX Umacron Abreve -50\r\nKPX Umacron Acircumflex -50\r\nKPX Umacron Adieresis -50\r\nKPX Umacron Agrave -50\r\nKPX Umacron Amacron -50\r\nKPX Umacron Aogonek -50\r\nKPX Umacron Aring -50\r\nKPX Umacron Atilde -50\r\nKPX Umacron comma -30\r\nKPX Umacron period -30\r\nKPX Uogonek A -50\r\nKPX Uogonek Aacute -50\r\nKPX Uogonek Abreve -50\r\nKPX Uogonek Acircumflex -50\r\nKPX Uogonek Adieresis -50\r\nKPX Uogonek Agrave -50\r\nKPX Uogonek Amacron -50\r\nKPX Uogonek Aogonek -50\r\nKPX Uogonek Aring -50\r\nKPX Uogonek Atilde -50\r\nKPX Uogonek comma -30\r\nKPX Uogonek period -30\r\nKPX Uring A -50\r\nKPX Uring Aacute -50\r\nKPX Uring Abreve -50\r\nKPX Uring Acircumflex -50\r\nKPX Uring Adieresis -50\r\nKPX Uring Agrave -50\r\nKPX Uring Amacron -50\r\nKPX Uring Aogonek -50\r\nKPX Uring Aring -50\r\nKPX Uring Atilde -50\r\nKPX Uring comma -30\r\nKPX Uring period -30\r\nKPX V A -80\r\nKPX V Aacute -80\r\nKPX V Abreve -80\r\nKPX V Acircumflex -80\r\nKPX V Adieresis -80\r\nKPX V Agrave -80\r\nKPX V Amacron -80\r\nKPX V Aogonek -80\r\nKPX V Aring -80\r\nKPX V Atilde -80\r\nKPX V G -50\r\nKPX V Gbreve -50\r\nKPX V Gcommaaccent -50\r\nKPX V O -50\r\nKPX V Oacute -50\r\nKPX V Ocircumflex -50\r\nKPX V Odieresis -50\r\nKPX V Ograve -50\r\nKPX V Ohungarumlaut -50\r\nKPX V Omacron -50\r\nKPX V Oslash -50\r\nKPX V Otilde -50\r\nKPX V a -60\r\nKPX V aacute -60\r\nKPX V abreve -60\r\nKPX V acircumflex -60\r\nKPX V adieresis -60\r\nKPX V agrave -60\r\nKPX V amacron -60\r\nKPX V aogonek -60\r\nKPX V aring -60\r\nKPX V atilde -60\r\nKPX V colon -40\r\nKPX V comma -120\r\nKPX V e -50\r\nKPX V eacute -50\r\nKPX V ecaron -50\r\nKPX V ecircumflex -50\r\nKPX V edieresis -50\r\nKPX V edotaccent -50\r\nKPX V egrave -50\r\nKPX V emacron -50\r\nKPX V eogonek -50\r\nKPX V hyphen -80\r\nKPX V o -90\r\nKPX V oacute -90\r\nKPX V ocircumflex -90\r\nKPX V odieresis -90\r\nKPX V ograve -90\r\nKPX V ohungarumlaut -90\r\nKPX V omacron -90\r\nKPX V oslash -90\r\nKPX V otilde -90\r\nKPX V period -120\r\nKPX V semicolon -40\r\nKPX V u -60\r\nKPX V uacute -60\r\nKPX V ucircumflex -60\r\nKPX V udieresis -60\r\nKPX V ugrave -60\r\nKPX V uhungarumlaut -60\r\nKPX V umacron -60\r\nKPX V uogonek -60\r\nKPX V uring -60\r\nKPX W A -60\r\nKPX W Aacute -60\r\nKPX W Abreve -60\r\nKPX W Acircumflex -60\r\nKPX W Adieresis -60\r\nKPX W Agrave -60\r\nKPX W Amacron -60\r\nKPX W Aogonek -60\r\nKPX W Aring -60\r\nKPX W Atilde -60\r\nKPX W O -20\r\nKPX W Oacute -20\r\nKPX W Ocircumflex -20\r\nKPX W Odieresis -20\r\nKPX W Ograve -20\r\nKPX W Ohungarumlaut -20\r\nKPX W Omacron -20\r\nKPX W Oslash -20\r\nKPX W Otilde -20\r\nKPX W a -40\r\nKPX W aacute -40\r\nKPX W abreve -40\r\nKPX W acircumflex -40\r\nKPX W adieresis -40\r\nKPX W agrave -40\r\nKPX W amacron -40\r\nKPX W aogonek -40\r\nKPX W aring -40\r\nKPX W atilde -40\r\nKPX W colon -10\r\nKPX W comma -80\r\nKPX W e -35\r\nKPX W eacute -35\r\nKPX W ecaron -35\r\nKPX W ecircumflex -35\r\nKPX W edieresis -35\r\nKPX W edotaccent -35\r\nKPX W egrave -35\r\nKPX W emacron -35\r\nKPX W eogonek -35\r\nKPX W hyphen -40\r\nKPX W o -60\r\nKPX W oacute -60\r\nKPX W ocircumflex -60\r\nKPX W odieresis -60\r\nKPX W ograve -60\r\nKPX W ohungarumlaut -60\r\nKPX W omacron -60\r\nKPX W oslash -60\r\nKPX W otilde -60\r\nKPX W period -80\r\nKPX W semicolon -10\r\nKPX W u -45\r\nKPX W uacute -45\r\nKPX W ucircumflex -45\r\nKPX W udieresis -45\r\nKPX W ugrave -45\r\nKPX W uhungarumlaut -45\r\nKPX W umacron -45\r\nKPX W uogonek -45\r\nKPX W uring -45\r\nKPX W y -20\r\nKPX W yacute -20\r\nKPX W ydieresis -20\r\nKPX Y A -110\r\nKPX Y Aacute -110\r\nKPX Y Abreve -110\r\nKPX Y Acircumflex -110\r\nKPX Y Adieresis -110\r\nKPX Y Agrave -110\r\nKPX Y Amacron -110\r\nKPX Y Aogonek -110\r\nKPX Y Aring -110\r\nKPX Y Atilde -110\r\nKPX Y O -70\r\nKPX Y Oacute -70\r\nKPX Y Ocircumflex -70\r\nKPX Y Odieresis -70\r\nKPX Y Ograve -70\r\nKPX Y Ohungarumlaut -70\r\nKPX Y Omacron -70\r\nKPX Y Oslash -70\r\nKPX Y Otilde -70\r\nKPX Y a -90\r\nKPX Y aacute -90\r\nKPX Y abreve -90\r\nKPX Y acircumflex -90\r\nKPX Y adieresis -90\r\nKPX Y agrave -90\r\nKPX Y amacron -90\r\nKPX Y aogonek -90\r\nKPX Y aring -90\r\nKPX Y atilde -90\r\nKPX Y colon -50\r\nKPX Y comma -100\r\nKPX Y e -80\r\nKPX Y eacute -80\r\nKPX Y ecaron -80\r\nKPX Y ecircumflex -80\r\nKPX Y edieresis -80\r\nKPX Y edotaccent -80\r\nKPX Y egrave -80\r\nKPX Y emacron -80\r\nKPX Y eogonek -80\r\nKPX Y o -100\r\nKPX Y oacute -100\r\nKPX Y ocircumflex -100\r\nKPX Y odieresis -100\r\nKPX Y ograve -100\r\nKPX Y ohungarumlaut -100\r\nKPX Y omacron -100\r\nKPX Y oslash -100\r\nKPX Y otilde -100\r\nKPX Y period -100\r\nKPX Y semicolon -50\r\nKPX Y u -100\r\nKPX Y uacute -100\r\nKPX Y ucircumflex -100\r\nKPX Y udieresis -100\r\nKPX Y ugrave -100\r\nKPX Y uhungarumlaut -100\r\nKPX Y umacron -100\r\nKPX Y uogonek -100\r\nKPX Y uring -100\r\nKPX Yacute A -110\r\nKPX Yacute Aacute -110\r\nKPX Yacute Abreve -110\r\nKPX Yacute Acircumflex -110\r\nKPX Yacute Adieresis -110\r\nKPX Yacute Agrave -110\r\nKPX Yacute Amacron -110\r\nKPX Yacute Aogonek -110\r\nKPX Yacute Aring -110\r\nKPX Yacute Atilde -110\r\nKPX Yacute O -70\r\nKPX Yacute Oacute -70\r\nKPX Yacute Ocircumflex -70\r\nKPX Yacute Odieresis -70\r\nKPX Yacute Ograve -70\r\nKPX Yacute Ohungarumlaut -70\r\nKPX Yacute Omacron -70\r\nKPX Yacute Oslash -70\r\nKPX Yacute Otilde -70\r\nKPX Yacute a -90\r\nKPX Yacute aacute -90\r\nKPX Yacute abreve -90\r\nKPX Yacute acircumflex -90\r\nKPX Yacute adieresis -90\r\nKPX Yacute agrave -90\r\nKPX Yacute amacron -90\r\nKPX Yacute aogonek -90\r\nKPX Yacute aring -90\r\nKPX Yacute atilde -90\r\nKPX Yacute colon -50\r\nKPX Yacute comma -100\r\nKPX Yacute e -80\r\nKPX Yacute eacute -80\r\nKPX Yacute ecaron -80\r\nKPX Yacute ecircumflex -80\r\nKPX Yacute edieresis -80\r\nKPX Yacute edotaccent -80\r\nKPX Yacute egrave -80\r\nKPX Yacute emacron -80\r\nKPX Yacute eogonek -80\r\nKPX Yacute o -100\r\nKPX Yacute oacute -100\r\nKPX Yacute ocircumflex -100\r\nKPX Yacute odieresis -100\r\nKPX Yacute ograve -100\r\nKPX Yacute ohungarumlaut -100\r\nKPX Yacute omacron -100\r\nKPX Yacute oslash -100\r\nKPX Yacute otilde -100\r\nKPX Yacute period -100\r\nKPX Yacute semicolon -50\r\nKPX Yacute u -100\r\nKPX Yacute uacute -100\r\nKPX Yacute ucircumflex -100\r\nKPX Yacute udieresis -100\r\nKPX Yacute ugrave -100\r\nKPX Yacute uhungarumlaut -100\r\nKPX Yacute umacron -100\r\nKPX Yacute uogonek -100\r\nKPX Yacute uring -100\r\nKPX Ydieresis A -110\r\nKPX Ydieresis Aacute -110\r\nKPX Ydieresis Abreve -110\r\nKPX Ydieresis Acircumflex -110\r\nKPX Ydieresis Adieresis -110\r\nKPX Ydieresis Agrave -110\r\nKPX Ydieresis Amacron -110\r\nKPX Ydieresis Aogonek -110\r\nKPX Ydieresis Aring -110\r\nKPX Ydieresis Atilde -110\r\nKPX Ydieresis O -70\r\nKPX Ydieresis Oacute -70\r\nKPX Ydieresis Ocircumflex -70\r\nKPX Ydieresis Odieresis -70\r\nKPX Ydieresis Ograve -70\r\nKPX Ydieresis Ohungarumlaut -70\r\nKPX Ydieresis Omacron -70\r\nKPX Ydieresis Oslash -70\r\nKPX Ydieresis Otilde -70\r\nKPX Ydieresis a -90\r\nKPX Ydieresis aacute -90\r\nKPX Ydieresis abreve -90\r\nKPX Ydieresis acircumflex -90\r\nKPX Ydieresis adieresis -90\r\nKPX Ydieresis agrave -90\r\nKPX Ydieresis amacron -90\r\nKPX Ydieresis aogonek -90\r\nKPX Ydieresis aring -90\r\nKPX Ydieresis atilde -90\r\nKPX Ydieresis colon -50\r\nKPX Ydieresis comma -100\r\nKPX Ydieresis e -80\r\nKPX Ydieresis eacute -80\r\nKPX Ydieresis ecaron -80\r\nKPX Ydieresis ecircumflex -80\r\nKPX Ydieresis edieresis -80\r\nKPX Ydieresis edotaccent -80\r\nKPX Ydieresis egrave -80\r\nKPX Ydieresis emacron -80\r\nKPX Ydieresis eogonek -80\r\nKPX Ydieresis o -100\r\nKPX Ydieresis oacute -100\r\nKPX Ydieresis ocircumflex -100\r\nKPX Ydieresis odieresis -100\r\nKPX Ydieresis ograve -100\r\nKPX Ydieresis ohungarumlaut -100\r\nKPX Ydieresis omacron -100\r\nKPX Ydieresis oslash -100\r\nKPX Ydieresis otilde -100\r\nKPX Ydieresis period -100\r\nKPX Ydieresis semicolon -50\r\nKPX Ydieresis u -100\r\nKPX Ydieresis uacute -100\r\nKPX Ydieresis ucircumflex -100\r\nKPX Ydieresis udieresis -100\r\nKPX Ydieresis ugrave -100\r\nKPX Ydieresis uhungarumlaut -100\r\nKPX Ydieresis umacron -100\r\nKPX Ydieresis uogonek -100\r\nKPX Ydieresis uring -100\r\nKPX a g -10\r\nKPX a gbreve -10\r\nKPX a gcommaaccent -10\r\nKPX a v -15\r\nKPX a w -15\r\nKPX a y -20\r\nKPX a yacute -20\r\nKPX a ydieresis -20\r\nKPX aacute g -10\r\nKPX aacute gbreve -10\r\nKPX aacute gcommaaccent -10\r\nKPX aacute v -15\r\nKPX aacute w -15\r\nKPX aacute y -20\r\nKPX aacute yacute -20\r\nKPX aacute ydieresis -20\r\nKPX abreve g -10\r\nKPX abreve gbreve -10\r\nKPX abreve gcommaaccent -10\r\nKPX abreve v -15\r\nKPX abreve w -15\r\nKPX abreve y -20\r\nKPX abreve yacute -20\r\nKPX abreve ydieresis -20\r\nKPX acircumflex g -10\r\nKPX acircumflex gbreve -10\r\nKPX acircumflex gcommaaccent -10\r\nKPX acircumflex v -15\r\nKPX acircumflex w -15\r\nKPX acircumflex y -20\r\nKPX acircumflex yacute -20\r\nKPX acircumflex ydieresis -20\r\nKPX adieresis g -10\r\nKPX adieresis gbreve -10\r\nKPX adieresis gcommaaccent -10\r\nKPX adieresis v -15\r\nKPX adieresis w -15\r\nKPX adieresis y -20\r\nKPX adieresis yacute -20\r\nKPX adieresis ydieresis -20\r\nKPX agrave g -10\r\nKPX agrave gbreve -10\r\nKPX agrave gcommaaccent -10\r\nKPX agrave v -15\r\nKPX agrave w -15\r\nKPX agrave y -20\r\nKPX agrave yacute -20\r\nKPX agrave ydieresis -20\r\nKPX amacron g -10\r\nKPX amacron gbreve -10\r\nKPX amacron gcommaaccent -10\r\nKPX amacron v -15\r\nKPX amacron w -15\r\nKPX amacron y -20\r\nKPX amacron yacute -20\r\nKPX amacron ydieresis -20\r\nKPX aogonek g -10\r\nKPX aogonek gbreve -10\r\nKPX aogonek gcommaaccent -10\r\nKPX aogonek v -15\r\nKPX aogonek w -15\r\nKPX aogonek y -20\r\nKPX aogonek yacute -20\r\nKPX aogonek ydieresis -20\r\nKPX aring g -10\r\nKPX aring gbreve -10\r\nKPX aring gcommaaccent -10\r\nKPX aring v -15\r\nKPX aring w -15\r\nKPX aring y -20\r\nKPX aring yacute -20\r\nKPX aring ydieresis -20\r\nKPX atilde g -10\r\nKPX atilde gbreve -10\r\nKPX atilde gcommaaccent -10\r\nKPX atilde v -15\r\nKPX atilde w -15\r\nKPX atilde y -20\r\nKPX atilde yacute -20\r\nKPX atilde ydieresis -20\r\nKPX b l -10\r\nKPX b lacute -10\r\nKPX b lcommaaccent -10\r\nKPX b lslash -10\r\nKPX b u -20\r\nKPX b uacute -20\r\nKPX b ucircumflex -20\r\nKPX b udieresis -20\r\nKPX b ugrave -20\r\nKPX b uhungarumlaut -20\r\nKPX b umacron -20\r\nKPX b uogonek -20\r\nKPX b uring -20\r\nKPX b v -20\r\nKPX b y -20\r\nKPX b yacute -20\r\nKPX b ydieresis -20\r\nKPX c h -10\r\nKPX c k -20\r\nKPX c kcommaaccent -20\r\nKPX c l -20\r\nKPX c lacute -20\r\nKPX c lcommaaccent -20\r\nKPX c lslash -20\r\nKPX c y -10\r\nKPX c yacute -10\r\nKPX c ydieresis -10\r\nKPX cacute h -10\r\nKPX cacute k -20\r\nKPX cacute kcommaaccent -20\r\nKPX cacute l -20\r\nKPX cacute lacute -20\r\nKPX cacute lcommaaccent -20\r\nKPX cacute lslash -20\r\nKPX cacute y -10\r\nKPX cacute yacute -10\r\nKPX cacute ydieresis -10\r\nKPX ccaron h -10\r\nKPX ccaron k -20\r\nKPX ccaron kcommaaccent -20\r\nKPX ccaron l -20\r\nKPX ccaron lacute -20\r\nKPX ccaron lcommaaccent -20\r\nKPX ccaron lslash -20\r\nKPX ccaron y -10\r\nKPX ccaron yacute -10\r\nKPX ccaron ydieresis -10\r\nKPX ccedilla h -10\r\nKPX ccedilla k -20\r\nKPX ccedilla kcommaaccent -20\r\nKPX ccedilla l -20\r\nKPX ccedilla lacute -20\r\nKPX ccedilla lcommaaccent -20\r\nKPX ccedilla lslash -20\r\nKPX ccedilla y -10\r\nKPX ccedilla yacute -10\r\nKPX ccedilla ydieresis -10\r\nKPX colon space -40\r\nKPX comma quotedblright -120\r\nKPX comma quoteright -120\r\nKPX comma space -40\r\nKPX d d -10\r\nKPX d dcroat -10\r\nKPX d v -15\r\nKPX d w -15\r\nKPX d y -15\r\nKPX d yacute -15\r\nKPX d ydieresis -15\r\nKPX dcroat d -10\r\nKPX dcroat dcroat -10\r\nKPX dcroat v -15\r\nKPX dcroat w -15\r\nKPX dcroat y -15\r\nKPX dcroat yacute -15\r\nKPX dcroat ydieresis -15\r\nKPX e comma 10\r\nKPX e period 20\r\nKPX e v -15\r\nKPX e w -15\r\nKPX e x -15\r\nKPX e y -15\r\nKPX e yacute -15\r\nKPX e ydieresis -15\r\nKPX eacute comma 10\r\nKPX eacute period 20\r\nKPX eacute v -15\r\nKPX eacute w -15\r\nKPX eacute x -15\r\nKPX eacute y -15\r\nKPX eacute yacute -15\r\nKPX eacute ydieresis -15\r\nKPX ecaron comma 10\r\nKPX ecaron period 20\r\nKPX ecaron v -15\r\nKPX ecaron w -15\r\nKPX ecaron x -15\r\nKPX ecaron y -15\r\nKPX ecaron yacute -15\r\nKPX ecaron ydieresis -15\r\nKPX ecircumflex comma 10\r\nKPX ecircumflex period 20\r\nKPX ecircumflex v -15\r\nKPX ecircumflex w -15\r\nKPX ecircumflex x -15\r\nKPX ecircumflex y -15\r\nKPX ecircumflex yacute -15\r\nKPX ecircumflex ydieresis -15\r\nKPX edieresis comma 10\r\nKPX edieresis period 20\r\nKPX edieresis v -15\r\nKPX edieresis w -15\r\nKPX edieresis x -15\r\nKPX edieresis y -15\r\nKPX edieresis yacute -15\r\nKPX edieresis ydieresis -15\r\nKPX edotaccent comma 10\r\nKPX edotaccent period 20\r\nKPX edotaccent v -15\r\nKPX edotaccent w -15\r\nKPX edotaccent x -15\r\nKPX edotaccent y -15\r\nKPX edotaccent yacute -15\r\nKPX edotaccent ydieresis -15\r\nKPX egrave comma 10\r\nKPX egrave period 20\r\nKPX egrave v -15\r\nKPX egrave w -15\r\nKPX egrave x -15\r\nKPX egrave y -15\r\nKPX egrave yacute -15\r\nKPX egrave ydieresis -15\r\nKPX emacron comma 10\r\nKPX emacron period 20\r\nKPX emacron v -15\r\nKPX emacron w -15\r\nKPX emacron x -15\r\nKPX emacron y -15\r\nKPX emacron yacute -15\r\nKPX emacron ydieresis -15\r\nKPX eogonek comma 10\r\nKPX eogonek period 20\r\nKPX eogonek v -15\r\nKPX eogonek w -15\r\nKPX eogonek x -15\r\nKPX eogonek y -15\r\nKPX eogonek yacute -15\r\nKPX eogonek ydieresis -15\r\nKPX f comma -10\r\nKPX f e -10\r\nKPX f eacute -10\r\nKPX f ecaron -10\r\nKPX f ecircumflex -10\r\nKPX f edieresis -10\r\nKPX f edotaccent -10\r\nKPX f egrave -10\r\nKPX f emacron -10\r\nKPX f eogonek -10\r\nKPX f o -20\r\nKPX f oacute -20\r\nKPX f ocircumflex -20\r\nKPX f odieresis -20\r\nKPX f ograve -20\r\nKPX f ohungarumlaut -20\r\nKPX f omacron -20\r\nKPX f oslash -20\r\nKPX f otilde -20\r\nKPX f period -10\r\nKPX f quotedblright 30\r\nKPX f quoteright 30\r\nKPX g e 10\r\nKPX g eacute 10\r\nKPX g ecaron 10\r\nKPX g ecircumflex 10\r\nKPX g edieresis 10\r\nKPX g edotaccent 10\r\nKPX g egrave 10\r\nKPX g emacron 10\r\nKPX g eogonek 10\r\nKPX g g -10\r\nKPX g gbreve -10\r\nKPX g gcommaaccent -10\r\nKPX gbreve e 10\r\nKPX gbreve eacute 10\r\nKPX gbreve ecaron 10\r\nKPX gbreve ecircumflex 10\r\nKPX gbreve edieresis 10\r\nKPX gbreve edotaccent 10\r\nKPX gbreve egrave 10\r\nKPX gbreve emacron 10\r\nKPX gbreve eogonek 10\r\nKPX gbreve g -10\r\nKPX gbreve gbreve -10\r\nKPX gbreve gcommaaccent -10\r\nKPX gcommaaccent e 10\r\nKPX gcommaaccent eacute 10\r\nKPX gcommaaccent ecaron 10\r\nKPX gcommaaccent ecircumflex 10\r\nKPX gcommaaccent edieresis 10\r\nKPX gcommaaccent edotaccent 10\r\nKPX gcommaaccent egrave 10\r\nKPX gcommaaccent emacron 10\r\nKPX gcommaaccent eogonek 10\r\nKPX gcommaaccent g -10\r\nKPX gcommaaccent gbreve -10\r\nKPX gcommaaccent gcommaaccent -10\r\nKPX h y -20\r\nKPX h yacute -20\r\nKPX h ydieresis -20\r\nKPX k o -15\r\nKPX k oacute -15\r\nKPX k ocircumflex -15\r\nKPX k odieresis -15\r\nKPX k ograve -15\r\nKPX k ohungarumlaut -15\r\nKPX k omacron -15\r\nKPX k oslash -15\r\nKPX k otilde -15\r\nKPX kcommaaccent o -15\r\nKPX kcommaaccent oacute -15\r\nKPX kcommaaccent ocircumflex -15\r\nKPX kcommaaccent odieresis -15\r\nKPX kcommaaccent ograve -15\r\nKPX kcommaaccent ohungarumlaut -15\r\nKPX kcommaaccent omacron -15\r\nKPX kcommaaccent oslash -15\r\nKPX kcommaaccent otilde -15\r\nKPX l w -15\r\nKPX l y -15\r\nKPX l yacute -15\r\nKPX l ydieresis -15\r\nKPX lacute w -15\r\nKPX lacute y -15\r\nKPX lacute yacute -15\r\nKPX lacute ydieresis -15\r\nKPX lcommaaccent w -15\r\nKPX lcommaaccent y -15\r\nKPX lcommaaccent yacute -15\r\nKPX lcommaaccent ydieresis -15\r\nKPX lslash w -15\r\nKPX lslash y -15\r\nKPX lslash yacute -15\r\nKPX lslash ydieresis -15\r\nKPX m u -20\r\nKPX m uacute -20\r\nKPX m ucircumflex -20\r\nKPX m udieresis -20\r\nKPX m ugrave -20\r\nKPX m uhungarumlaut -20\r\nKPX m umacron -20\r\nKPX m uogonek -20\r\nKPX m uring -20\r\nKPX m y -30\r\nKPX m yacute -30\r\nKPX m ydieresis -30\r\nKPX n u -10\r\nKPX n uacute -10\r\nKPX n ucircumflex -10\r\nKPX n udieresis -10\r\nKPX n ugrave -10\r\nKPX n uhungarumlaut -10\r\nKPX n umacron -10\r\nKPX n uogonek -10\r\nKPX n uring -10\r\nKPX n v -40\r\nKPX n y -20\r\nKPX n yacute -20\r\nKPX n ydieresis -20\r\nKPX nacute u -10\r\nKPX nacute uacute -10\r\nKPX nacute ucircumflex -10\r\nKPX nacute udieresis -10\r\nKPX nacute ugrave -10\r\nKPX nacute uhungarumlaut -10\r\nKPX nacute umacron -10\r\nKPX nacute uogonek -10\r\nKPX nacute uring -10\r\nKPX nacute v -40\r\nKPX nacute y -20\r\nKPX nacute yacute -20\r\nKPX nacute ydieresis -20\r\nKPX ncaron u -10\r\nKPX ncaron uacute -10\r\nKPX ncaron ucircumflex -10\r\nKPX ncaron udieresis -10\r\nKPX ncaron ugrave -10\r\nKPX ncaron uhungarumlaut -10\r\nKPX ncaron umacron -10\r\nKPX ncaron uogonek -10\r\nKPX ncaron uring -10\r\nKPX ncaron v -40\r\nKPX ncaron y -20\r\nKPX ncaron yacute -20\r\nKPX ncaron ydieresis -20\r\nKPX ncommaaccent u -10\r\nKPX ncommaaccent uacute -10\r\nKPX ncommaaccent ucircumflex -10\r\nKPX ncommaaccent udieresis -10\r\nKPX ncommaaccent ugrave -10\r\nKPX ncommaaccent uhungarumlaut -10\r\nKPX ncommaaccent umacron -10\r\nKPX ncommaaccent uogonek -10\r\nKPX ncommaaccent uring -10\r\nKPX ncommaaccent v -40\r\nKPX ncommaaccent y -20\r\nKPX ncommaaccent yacute -20\r\nKPX ncommaaccent ydieresis -20\r\nKPX ntilde u -10\r\nKPX ntilde uacute -10\r\nKPX ntilde ucircumflex -10\r\nKPX ntilde udieresis -10\r\nKPX ntilde ugrave -10\r\nKPX ntilde uhungarumlaut -10\r\nKPX ntilde umacron -10\r\nKPX ntilde uogonek -10\r\nKPX ntilde uring -10\r\nKPX ntilde v -40\r\nKPX ntilde y -20\r\nKPX ntilde yacute -20\r\nKPX ntilde ydieresis -20\r\nKPX o v -20\r\nKPX o w -15\r\nKPX o x -30\r\nKPX o y -20\r\nKPX o yacute -20\r\nKPX o ydieresis -20\r\nKPX oacute v -20\r\nKPX oacute w -15\r\nKPX oacute x -30\r\nKPX oacute y -20\r\nKPX oacute yacute -20\r\nKPX oacute ydieresis -20\r\nKPX ocircumflex v -20\r\nKPX ocircumflex w -15\r\nKPX ocircumflex x -30\r\nKPX ocircumflex y -20\r\nKPX ocircumflex yacute -20\r\nKPX ocircumflex ydieresis -20\r\nKPX odieresis v -20\r\nKPX odieresis w -15\r\nKPX odieresis x -30\r\nKPX odieresis y -20\r\nKPX odieresis yacute -20\r\nKPX odieresis ydieresis -20\r\nKPX ograve v -20\r\nKPX ograve w -15\r\nKPX ograve x -30\r\nKPX ograve y -20\r\nKPX ograve yacute -20\r\nKPX ograve ydieresis -20\r\nKPX ohungarumlaut v -20\r\nKPX ohungarumlaut w -15\r\nKPX ohungarumlaut x -30\r\nKPX ohungarumlaut y -20\r\nKPX ohungarumlaut yacute -20\r\nKPX ohungarumlaut ydieresis -20\r\nKPX omacron v -20\r\nKPX omacron w -15\r\nKPX omacron x -30\r\nKPX omacron y -20\r\nKPX omacron yacute -20\r\nKPX omacron ydieresis -20\r\nKPX oslash v -20\r\nKPX oslash w -15\r\nKPX oslash x -30\r\nKPX oslash y -20\r\nKPX oslash yacute -20\r\nKPX oslash ydieresis -20\r\nKPX otilde v -20\r\nKPX otilde w -15\r\nKPX otilde x -30\r\nKPX otilde y -20\r\nKPX otilde yacute -20\r\nKPX otilde ydieresis -20\r\nKPX p y -15\r\nKPX p yacute -15\r\nKPX p ydieresis -15\r\nKPX period quotedblright -120\r\nKPX period quoteright -120\r\nKPX period space -40\r\nKPX quotedblright space -80\r\nKPX quoteleft quoteleft -46\r\nKPX quoteright d -80\r\nKPX quoteright dcroat -80\r\nKPX quoteright l -20\r\nKPX quoteright lacute -20\r\nKPX quoteright lcommaaccent -20\r\nKPX quoteright lslash -20\r\nKPX quoteright quoteright -46\r\nKPX quoteright r -40\r\nKPX quoteright racute -40\r\nKPX quoteright rcaron -40\r\nKPX quoteright rcommaaccent -40\r\nKPX quoteright s -60\r\nKPX quoteright sacute -60\r\nKPX quoteright scaron -60\r\nKPX quoteright scedilla -60\r\nKPX quoteright scommaaccent -60\r\nKPX quoteright space -80\r\nKPX quoteright v -20\r\nKPX r c -20\r\nKPX r cacute -20\r\nKPX r ccaron -20\r\nKPX r ccedilla -20\r\nKPX r comma -60\r\nKPX r d -20\r\nKPX r dcroat -20\r\nKPX r g -15\r\nKPX r gbreve -15\r\nKPX r gcommaaccent -15\r\nKPX r hyphen -20\r\nKPX r o -20\r\nKPX r oacute -20\r\nKPX r ocircumflex -20\r\nKPX r odieresis -20\r\nKPX r ograve -20\r\nKPX r ohungarumlaut -20\r\nKPX r omacron -20\r\nKPX r oslash -20\r\nKPX r otilde -20\r\nKPX r period -60\r\nKPX r q -20\r\nKPX r s -15\r\nKPX r sacute -15\r\nKPX r scaron -15\r\nKPX r scedilla -15\r\nKPX r scommaaccent -15\r\nKPX r t 20\r\nKPX r tcommaaccent 20\r\nKPX r v 10\r\nKPX r y 10\r\nKPX r yacute 10\r\nKPX r ydieresis 10\r\nKPX racute c -20\r\nKPX racute cacute -20\r\nKPX racute ccaron -20\r\nKPX racute ccedilla -20\r\nKPX racute comma -60\r\nKPX racute d -20\r\nKPX racute dcroat -20\r\nKPX racute g -15\r\nKPX racute gbreve -15\r\nKPX racute gcommaaccent -15\r\nKPX racute hyphen -20\r\nKPX racute o -20\r\nKPX racute oacute -20\r\nKPX racute ocircumflex -20\r\nKPX racute odieresis -20\r\nKPX racute ograve -20\r\nKPX racute ohungarumlaut -20\r\nKPX racute omacron -20\r\nKPX racute oslash -20\r\nKPX racute otilde -20\r\nKPX racute period -60\r\nKPX racute q -20\r\nKPX racute s -15\r\nKPX racute sacute -15\r\nKPX racute scaron -15\r\nKPX racute scedilla -15\r\nKPX racute scommaaccent -15\r\nKPX racute t 20\r\nKPX racute tcommaaccent 20\r\nKPX racute v 10\r\nKPX racute y 10\r\nKPX racute yacute 10\r\nKPX racute ydieresis 10\r\nKPX rcaron c -20\r\nKPX rcaron cacute -20\r\nKPX rcaron ccaron -20\r\nKPX rcaron ccedilla -20\r\nKPX rcaron comma -60\r\nKPX rcaron d -20\r\nKPX rcaron dcroat -20\r\nKPX rcaron g -15\r\nKPX rcaron gbreve -15\r\nKPX rcaron gcommaaccent -15\r\nKPX rcaron hyphen -20\r\nKPX rcaron o -20\r\nKPX rcaron oacute -20\r\nKPX rcaron ocircumflex -20\r\nKPX rcaron odieresis -20\r\nKPX rcaron ograve -20\r\nKPX rcaron ohungarumlaut -20\r\nKPX rcaron omacron -20\r\nKPX rcaron oslash -20\r\nKPX rcaron otilde -20\r\nKPX rcaron period -60\r\nKPX rcaron q -20\r\nKPX rcaron s -15\r\nKPX rcaron sacute -15\r\nKPX rcaron scaron -15\r\nKPX rcaron scedilla -15\r\nKPX rcaron scommaaccent -15\r\nKPX rcaron t 20\r\nKPX rcaron tcommaaccent 20\r\nKPX rcaron v 10\r\nKPX rcaron y 10\r\nKPX rcaron yacute 10\r\nKPX rcaron ydieresis 10\r\nKPX rcommaaccent c -20\r\nKPX rcommaaccent cacute -20\r\nKPX rcommaaccent ccaron -20\r\nKPX rcommaaccent ccedilla -20\r\nKPX rcommaaccent comma -60\r\nKPX rcommaaccent d -20\r\nKPX rcommaaccent dcroat -20\r\nKPX rcommaaccent g -15\r\nKPX rcommaaccent gbreve -15\r\nKPX rcommaaccent gcommaaccent -15\r\nKPX rcommaaccent hyphen -20\r\nKPX rcommaaccent o -20\r\nKPX rcommaaccent oacute -20\r\nKPX rcommaaccent ocircumflex -20\r\nKPX rcommaaccent odieresis -20\r\nKPX rcommaaccent ograve -20\r\nKPX rcommaaccent ohungarumlaut -20\r\nKPX rcommaaccent omacron -20\r\nKPX rcommaaccent oslash -20\r\nKPX rcommaaccent otilde -20\r\nKPX rcommaaccent period -60\r\nKPX rcommaaccent q -20\r\nKPX rcommaaccent s -15\r\nKPX rcommaaccent sacute -15\r\nKPX rcommaaccent scaron -15\r\nKPX rcommaaccent scedilla -15\r\nKPX rcommaaccent scommaaccent -15\r\nKPX rcommaaccent t 20\r\nKPX rcommaaccent tcommaaccent 20\r\nKPX rcommaaccent v 10\r\nKPX rcommaaccent y 10\r\nKPX rcommaaccent yacute 10\r\nKPX rcommaaccent ydieresis 10\r\nKPX s w -15\r\nKPX sacute w -15\r\nKPX scaron w -15\r\nKPX scedilla w -15\r\nKPX scommaaccent w -15\r\nKPX semicolon space -40\r\nKPX space T -100\r\nKPX space Tcaron -100\r\nKPX space Tcommaaccent -100\r\nKPX space V -80\r\nKPX space W -80\r\nKPX space Y -120\r\nKPX space Yacute -120\r\nKPX space Ydieresis -120\r\nKPX space quotedblleft -80\r\nKPX space quoteleft -60\r\nKPX v a -20\r\nKPX v aacute -20\r\nKPX v abreve -20\r\nKPX v acircumflex -20\r\nKPX v adieresis -20\r\nKPX v agrave -20\r\nKPX v amacron -20\r\nKPX v aogonek -20\r\nKPX v aring -20\r\nKPX v atilde -20\r\nKPX v comma -80\r\nKPX v o -30\r\nKPX v oacute -30\r\nKPX v ocircumflex -30\r\nKPX v odieresis -30\r\nKPX v ograve -30\r\nKPX v ohungarumlaut -30\r\nKPX v omacron -30\r\nKPX v oslash -30\r\nKPX v otilde -30\r\nKPX v period -80\r\nKPX w comma -40\r\nKPX w o -20\r\nKPX w oacute -20\r\nKPX w ocircumflex -20\r\nKPX w odieresis -20\r\nKPX w ograve -20\r\nKPX w ohungarumlaut -20\r\nKPX w omacron -20\r\nKPX w oslash -20\r\nKPX w otilde -20\r\nKPX w period -40\r\nKPX x e -10\r\nKPX x eacute -10\r\nKPX x ecaron -10\r\nKPX x ecircumflex -10\r\nKPX x edieresis -10\r\nKPX x edotaccent -10\r\nKPX x egrave -10\r\nKPX x emacron -10\r\nKPX x eogonek -10\r\nKPX y a -30\r\nKPX y aacute -30\r\nKPX y abreve -30\r\nKPX y acircumflex -30\r\nKPX y adieresis -30\r\nKPX y agrave -30\r\nKPX y amacron -30\r\nKPX y aogonek -30\r\nKPX y aring -30\r\nKPX y atilde -30\r\nKPX y comma -80\r\nKPX y e -10\r\nKPX y eacute -10\r\nKPX y ecaron -10\r\nKPX y ecircumflex -10\r\nKPX y edieresis -10\r\nKPX y edotaccent -10\r\nKPX y egrave -10\r\nKPX y emacron -10\r\nKPX y eogonek -10\r\nKPX y o -25\r\nKPX y oacute -25\r\nKPX y ocircumflex -25\r\nKPX y odieresis -25\r\nKPX y ograve -25\r\nKPX y ohungarumlaut -25\r\nKPX y omacron -25\r\nKPX y oslash -25\r\nKPX y otilde -25\r\nKPX y period -80\r\nKPX yacute a -30\r\nKPX yacute aacute -30\r\nKPX yacute abreve -30\r\nKPX yacute acircumflex -30\r\nKPX yacute adieresis -30\r\nKPX yacute agrave -30\r\nKPX yacute amacron -30\r\nKPX yacute aogonek -30\r\nKPX yacute aring -30\r\nKPX yacute atilde -30\r\nKPX yacute comma -80\r\nKPX yacute e -10\r\nKPX yacute eacute -10\r\nKPX yacute ecaron -10\r\nKPX yacute ecircumflex -10\r\nKPX yacute edieresis -10\r\nKPX yacute edotaccent -10\r\nKPX yacute egrave -10\r\nKPX yacute emacron -10\r\nKPX yacute eogonek -10\r\nKPX yacute o -25\r\nKPX yacute oacute -25\r\nKPX yacute ocircumflex -25\r\nKPX yacute odieresis -25\r\nKPX yacute ograve -25\r\nKPX yacute ohungarumlaut -25\r\nKPX yacute omacron -25\r\nKPX yacute oslash -25\r\nKPX yacute otilde -25\r\nKPX yacute period -80\r\nKPX ydieresis a -30\r\nKPX ydieresis aacute -30\r\nKPX ydieresis abreve -30\r\nKPX ydieresis acircumflex -30\r\nKPX ydieresis adieresis -30\r\nKPX ydieresis agrave -30\r\nKPX ydieresis amacron -30\r\nKPX ydieresis aogonek -30\r\nKPX ydieresis aring -30\r\nKPX ydieresis atilde -30\r\nKPX ydieresis comma -80\r\nKPX ydieresis e -10\r\nKPX ydieresis eacute -10\r\nKPX ydieresis ecaron -10\r\nKPX ydieresis ecircumflex -10\r\nKPX ydieresis edieresis -10\r\nKPX ydieresis edotaccent -10\r\nKPX ydieresis egrave -10\r\nKPX ydieresis emacron -10\r\nKPX ydieresis eogonek -10\r\nKPX ydieresis o -25\r\nKPX ydieresis oacute -25\r\nKPX ydieresis ocircumflex -25\r\nKPX ydieresis odieresis -25\r\nKPX ydieresis ograve -25\r\nKPX ydieresis ohungarumlaut -25\r\nKPX ydieresis omacron -25\r\nKPX ydieresis oslash -25\r\nKPX ydieresis otilde -25\r\nKPX ydieresis period -80\r\nKPX z e 10\r\nKPX z eacute 10\r\nKPX z ecaron 10\r\nKPX z ecircumflex 10\r\nKPX z edieresis 10\r\nKPX z edotaccent 10\r\nKPX z egrave 10\r\nKPX z emacron 10\r\nKPX z eogonek 10\r\nKPX zacute e 10\r\nKPX zacute eacute 10\r\nKPX zacute ecaron 10\r\nKPX zacute ecircumflex 10\r\nKPX zacute edieresis 10\r\nKPX zacute edotaccent 10\r\nKPX zacute egrave 10\r\nKPX zacute emacron 10\r\nKPX zacute eogonek 10\r\nKPX zcaron e 10\r\nKPX zcaron eacute 10\r\nKPX zcaron ecaron 10\r\nKPX zcaron ecircumflex 10\r\nKPX zcaron edieresis 10\r\nKPX zcaron edotaccent 10\r\nKPX zcaron egrave 10\r\nKPX zcaron emacron 10\r\nKPX zcaron eogonek 10\r\nKPX zdotaccent e 10\r\nKPX zdotaccent eacute 10\r\nKPX zdotaccent ecaron 10\r\nKPX zdotaccent ecircumflex 10\r\nKPX zdotaccent edieresis 10\r\nKPX zdotaccent edotaccent 10\r\nKPX zdotaccent egrave 10\r\nKPX zdotaccent emacron 10\r\nKPX zdotaccent eogonek 10\r\nEndKernPairs\r\nEndKernData\r\nEndFontMetrics\r\n",
  'Times-Roman.afm': "StartFontMetrics 4.1\r\nComment Copyright (c) 1985, 1987, 1989, 1990, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.\r\nComment Creation Date: Thu May  1 12:49:17 1997\r\nComment UniqueID 43068\r\nComment VMusage 43909 54934\r\nFontName Times-Roman\r\nFullName Times Roman\r\nFamilyName Times\r\nWeight Roman\r\nItalicAngle 0\r\nIsFixedPitch false\r\nCharacterSet ExtendedRoman\r\nFontBBox -168 -218 1000 898 \r\nUnderlinePosition -100\r\nUnderlineThickness 50\r\nVersion 002.000\r\nNotice Copyright (c) 1985, 1987, 1989, 1990, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.Times is a trademark of Linotype-Hell AG and/or its subsidiaries.\r\nEncodingScheme AdobeStandardEncoding\r\nCapHeight 662\r\nXHeight 450\r\nAscender 683\r\nDescender -217\r\nStdHW 28\r\nStdVW 84\r\nStartCharMetrics 315\r\nC 32 ; WX 250 ; N space ; B 0 0 0 0 ;\r\nC 33 ; WX 333 ; N exclam ; B 130 -9 238 676 ;\r\nC 34 ; WX 408 ; N quotedbl ; B 77 431 331 676 ;\r\nC 35 ; WX 500 ; N numbersign ; B 5 0 496 662 ;\r\nC 36 ; WX 500 ; N dollar ; B 44 -87 457 727 ;\r\nC 37 ; WX 833 ; N percent ; B 61 -13 772 676 ;\r\nC 38 ; WX 778 ; N ampersand ; B 42 -13 750 676 ;\r\nC 39 ; WX 333 ; N quoteright ; B 79 433 218 676 ;\r\nC 40 ; WX 333 ; N parenleft ; B 48 -177 304 676 ;\r\nC 41 ; WX 333 ; N parenright ; B 29 -177 285 676 ;\r\nC 42 ; WX 500 ; N asterisk ; B 69 265 432 676 ;\r\nC 43 ; WX 564 ; N plus ; B 30 0 534 506 ;\r\nC 44 ; WX 250 ; N comma ; B 56 -141 195 102 ;\r\nC 45 ; WX 333 ; N hyphen ; B 39 194 285 257 ;\r\nC 46 ; WX 250 ; N period ; B 70 -11 181 100 ;\r\nC 47 ; WX 278 ; N slash ; B -9 -14 287 676 ;\r\nC 48 ; WX 500 ; N zero ; B 24 -14 476 676 ;\r\nC 49 ; WX 500 ; N one ; B 111 0 394 676 ;\r\nC 50 ; WX 500 ; N two ; B 30 0 475 676 ;\r\nC 51 ; WX 500 ; N three ; B 43 -14 431 676 ;\r\nC 52 ; WX 500 ; N four ; B 12 0 472 676 ;\r\nC 53 ; WX 500 ; N five ; B 32 -14 438 688 ;\r\nC 54 ; WX 500 ; N six ; B 34 -14 468 684 ;\r\nC 55 ; WX 500 ; N seven ; B 20 -8 449 662 ;\r\nC 56 ; WX 500 ; N eight ; B 56 -14 445 676 ;\r\nC 57 ; WX 500 ; N nine ; B 30 -22 459 676 ;\r\nC 58 ; WX 278 ; N colon ; B 81 -11 192 459 ;\r\nC 59 ; WX 278 ; N semicolon ; B 80 -141 219 459 ;\r\nC 60 ; WX 564 ; N less ; B 28 -8 536 514 ;\r\nC 61 ; WX 564 ; N equal ; B 30 120 534 386 ;\r\nC 62 ; WX 564 ; N greater ; B 28 -8 536 514 ;\r\nC 63 ; WX 444 ; N question ; B 68 -8 414 676 ;\r\nC 64 ; WX 921 ; N at ; B 116 -14 809 676 ;\r\nC 65 ; WX 722 ; N A ; B 15 0 706 674 ;\r\nC 66 ; WX 667 ; N B ; B 17 0 593 662 ;\r\nC 67 ; WX 667 ; N C ; B 28 -14 633 676 ;\r\nC 68 ; WX 722 ; N D ; B 16 0 685 662 ;\r\nC 69 ; WX 611 ; N E ; B 12 0 597 662 ;\r\nC 70 ; WX 556 ; N F ; B 12 0 546 662 ;\r\nC 71 ; WX 722 ; N G ; B 32 -14 709 676 ;\r\nC 72 ; WX 722 ; N H ; B 19 0 702 662 ;\r\nC 73 ; WX 333 ; N I ; B 18 0 315 662 ;\r\nC 74 ; WX 389 ; N J ; B 10 -14 370 662 ;\r\nC 75 ; WX 722 ; N K ; B 34 0 723 662 ;\r\nC 76 ; WX 611 ; N L ; B 12 0 598 662 ;\r\nC 77 ; WX 889 ; N M ; B 12 0 863 662 ;\r\nC 78 ; WX 722 ; N N ; B 12 -11 707 662 ;\r\nC 79 ; WX 722 ; N O ; B 34 -14 688 676 ;\r\nC 80 ; WX 556 ; N P ; B 16 0 542 662 ;\r\nC 81 ; WX 722 ; N Q ; B 34 -178 701 676 ;\r\nC 82 ; WX 667 ; N R ; B 17 0 659 662 ;\r\nC 83 ; WX 556 ; N S ; B 42 -14 491 676 ;\r\nC 84 ; WX 611 ; N T ; B 17 0 593 662 ;\r\nC 85 ; WX 722 ; N U ; B 14 -14 705 662 ;\r\nC 86 ; WX 722 ; N V ; B 16 -11 697 662 ;\r\nC 87 ; WX 944 ; N W ; B 5 -11 932 662 ;\r\nC 88 ; WX 722 ; N X ; B 10 0 704 662 ;\r\nC 89 ; WX 722 ; N Y ; B 22 0 703 662 ;\r\nC 90 ; WX 611 ; N Z ; B 9 0 597 662 ;\r\nC 91 ; WX 333 ; N bracketleft ; B 88 -156 299 662 ;\r\nC 92 ; WX 278 ; N backslash ; B -9 -14 287 676 ;\r\nC 93 ; WX 333 ; N bracketright ; B 34 -156 245 662 ;\r\nC 94 ; WX 469 ; N asciicircum ; B 24 297 446 662 ;\r\nC 95 ; WX 500 ; N underscore ; B 0 -125 500 -75 ;\r\nC 96 ; WX 333 ; N quoteleft ; B 115 433 254 676 ;\r\nC 97 ; WX 444 ; N a ; B 37 -10 442 460 ;\r\nC 98 ; WX 500 ; N b ; B 3 -10 468 683 ;\r\nC 99 ; WX 444 ; N c ; B 25 -10 412 460 ;\r\nC 100 ; WX 500 ; N d ; B 27 -10 491 683 ;\r\nC 101 ; WX 444 ; N e ; B 25 -10 424 460 ;\r\nC 102 ; WX 333 ; N f ; B 20 0 383 683 ; L i fi ; L l fl ;\r\nC 103 ; WX 500 ; N g ; B 28 -218 470 460 ;\r\nC 104 ; WX 500 ; N h ; B 9 0 487 683 ;\r\nC 105 ; WX 278 ; N i ; B 16 0 253 683 ;\r\nC 106 ; WX 278 ; N j ; B -70 -218 194 683 ;\r\nC 107 ; WX 500 ; N k ; B 7 0 505 683 ;\r\nC 108 ; WX 278 ; N l ; B 19 0 257 683 ;\r\nC 109 ; WX 778 ; N m ; B 16 0 775 460 ;\r\nC 110 ; WX 500 ; N n ; B 16 0 485 460 ;\r\nC 111 ; WX 500 ; N o ; B 29 -10 470 460 ;\r\nC 112 ; WX 500 ; N p ; B 5 -217 470 460 ;\r\nC 113 ; WX 500 ; N q ; B 24 -217 488 460 ;\r\nC 114 ; WX 333 ; N r ; B 5 0 335 460 ;\r\nC 115 ; WX 389 ; N s ; B 51 -10 348 460 ;\r\nC 116 ; WX 278 ; N t ; B 13 -10 279 579 ;\r\nC 117 ; WX 500 ; N u ; B 9 -10 479 450 ;\r\nC 118 ; WX 500 ; N v ; B 19 -14 477 450 ;\r\nC 119 ; WX 722 ; N w ; B 21 -14 694 450 ;\r\nC 120 ; WX 500 ; N x ; B 17 0 479 450 ;\r\nC 121 ; WX 500 ; N y ; B 14 -218 475 450 ;\r\nC 122 ; WX 444 ; N z ; B 27 0 418 450 ;\r\nC 123 ; WX 480 ; N braceleft ; B 100 -181 350 680 ;\r\nC 124 ; WX 200 ; N bar ; B 67 -218 133 782 ;\r\nC 125 ; WX 480 ; N braceright ; B 130 -181 380 680 ;\r\nC 126 ; WX 541 ; N asciitilde ; B 40 183 502 323 ;\r\nC 161 ; WX 333 ; N exclamdown ; B 97 -218 205 467 ;\r\nC 162 ; WX 500 ; N cent ; B 53 -138 448 579 ;\r\nC 163 ; WX 500 ; N sterling ; B 12 -8 490 676 ;\r\nC 164 ; WX 167 ; N fraction ; B -168 -14 331 676 ;\r\nC 165 ; WX 500 ; N yen ; B -53 0 512 662 ;\r\nC 166 ; WX 500 ; N florin ; B 7 -189 490 676 ;\r\nC 167 ; WX 500 ; N section ; B 70 -148 426 676 ;\r\nC 168 ; WX 500 ; N currency ; B -22 58 522 602 ;\r\nC 169 ; WX 180 ; N quotesingle ; B 48 431 133 676 ;\r\nC 170 ; WX 444 ; N quotedblleft ; B 43 433 414 676 ;\r\nC 171 ; WX 500 ; N guillemotleft ; B 42 33 456 416 ;\r\nC 172 ; WX 333 ; N guilsinglleft ; B 63 33 285 416 ;\r\nC 173 ; WX 333 ; N guilsinglright ; B 48 33 270 416 ;\r\nC 174 ; WX 556 ; N fi ; B 31 0 521 683 ;\r\nC 175 ; WX 556 ; N fl ; B 32 0 521 683 ;\r\nC 177 ; WX 500 ; N endash ; B 0 201 500 250 ;\r\nC 178 ; WX 500 ; N dagger ; B 59 -149 442 676 ;\r\nC 179 ; WX 500 ; N daggerdbl ; B 58 -153 442 676 ;\r\nC 180 ; WX 250 ; N periodcentered ; B 70 199 181 310 ;\r\nC 182 ; WX 453 ; N paragraph ; B -22 -154 450 662 ;\r\nC 183 ; WX 350 ; N bullet ; B 40 196 310 466 ;\r\nC 184 ; WX 333 ; N quotesinglbase ; B 79 -141 218 102 ;\r\nC 185 ; WX 444 ; N quotedblbase ; B 45 -141 416 102 ;\r\nC 186 ; WX 444 ; N quotedblright ; B 30 433 401 676 ;\r\nC 187 ; WX 500 ; N guillemotright ; B 44 33 458 416 ;\r\nC 188 ; WX 1000 ; N ellipsis ; B 111 -11 888 100 ;\r\nC 189 ; WX 1000 ; N perthousand ; B 7 -19 994 706 ;\r\nC 191 ; WX 444 ; N questiondown ; B 30 -218 376 466 ;\r\nC 193 ; WX 333 ; N grave ; B 19 507 242 678 ;\r\nC 194 ; WX 333 ; N acute ; B 93 507 317 678 ;\r\nC 195 ; WX 333 ; N circumflex ; B 11 507 322 674 ;\r\nC 196 ; WX 333 ; N tilde ; B 1 532 331 638 ;\r\nC 197 ; WX 333 ; N macron ; B 11 547 322 601 ;\r\nC 198 ; WX 333 ; N breve ; B 26 507 307 664 ;\r\nC 199 ; WX 333 ; N dotaccent ; B 118 581 216 681 ;\r\nC 200 ; WX 333 ; N dieresis ; B 18 581 315 681 ;\r\nC 202 ; WX 333 ; N ring ; B 67 512 266 711 ;\r\nC 203 ; WX 333 ; N cedilla ; B 52 -215 261 0 ;\r\nC 205 ; WX 333 ; N hungarumlaut ; B -3 507 377 678 ;\r\nC 206 ; WX 333 ; N ogonek ; B 62 -165 243 0 ;\r\nC 207 ; WX 333 ; N caron ; B 11 507 322 674 ;\r\nC 208 ; WX 1000 ; N emdash ; B 0 201 1000 250 ;\r\nC 225 ; WX 889 ; N AE ; B 0 0 863 662 ;\r\nC 227 ; WX 276 ; N ordfeminine ; B 4 394 270 676 ;\r\nC 232 ; WX 611 ; N Lslash ; B 12 0 598 662 ;\r\nC 233 ; WX 722 ; N Oslash ; B 34 -80 688 734 ;\r\nC 234 ; WX 889 ; N OE ; B 30 -6 885 668 ;\r\nC 235 ; WX 310 ; N ordmasculine ; B 6 394 304 676 ;\r\nC 241 ; WX 667 ; N ae ; B 38 -10 632 460 ;\r\nC 245 ; WX 278 ; N dotlessi ; B 16 0 253 460 ;\r\nC 248 ; WX 278 ; N lslash ; B 19 0 259 683 ;\r\nC 249 ; WX 500 ; N oslash ; B 29 -112 470 551 ;\r\nC 250 ; WX 722 ; N oe ; B 30 -10 690 460 ;\r\nC 251 ; WX 500 ; N germandbls ; B 12 -9 468 683 ;\r\nC -1 ; WX 333 ; N Idieresis ; B 18 0 315 835 ;\r\nC -1 ; WX 444 ; N eacute ; B 25 -10 424 678 ;\r\nC -1 ; WX 444 ; N abreve ; B 37 -10 442 664 ;\r\nC -1 ; WX 500 ; N uhungarumlaut ; B 9 -10 501 678 ;\r\nC -1 ; WX 444 ; N ecaron ; B 25 -10 424 674 ;\r\nC -1 ; WX 722 ; N Ydieresis ; B 22 0 703 835 ;\r\nC -1 ; WX 564 ; N divide ; B 30 -10 534 516 ;\r\nC -1 ; WX 722 ; N Yacute ; B 22 0 703 890 ;\r\nC -1 ; WX 722 ; N Acircumflex ; B 15 0 706 886 ;\r\nC -1 ; WX 444 ; N aacute ; B 37 -10 442 678 ;\r\nC -1 ; WX 722 ; N Ucircumflex ; B 14 -14 705 886 ;\r\nC -1 ; WX 500 ; N yacute ; B 14 -218 475 678 ;\r\nC -1 ; WX 389 ; N scommaaccent ; B 51 -218 348 460 ;\r\nC -1 ; WX 444 ; N ecircumflex ; B 25 -10 424 674 ;\r\nC -1 ; WX 722 ; N Uring ; B 14 -14 705 898 ;\r\nC -1 ; WX 722 ; N Udieresis ; B 14 -14 705 835 ;\r\nC -1 ; WX 444 ; N aogonek ; B 37 -165 469 460 ;\r\nC -1 ; WX 722 ; N Uacute ; B 14 -14 705 890 ;\r\nC -1 ; WX 500 ; N uogonek ; B 9 -155 487 450 ;\r\nC -1 ; WX 611 ; N Edieresis ; B 12 0 597 835 ;\r\nC -1 ; WX 722 ; N Dcroat ; B 16 0 685 662 ;\r\nC -1 ; WX 250 ; N commaaccent ; B 59 -218 184 -50 ;\r\nC -1 ; WX 760 ; N copyright ; B 38 -14 722 676 ;\r\nC -1 ; WX 611 ; N Emacron ; B 12 0 597 813 ;\r\nC -1 ; WX 444 ; N ccaron ; B 25 -10 412 674 ;\r\nC -1 ; WX 444 ; N aring ; B 37 -10 442 711 ;\r\nC -1 ; WX 722 ; N Ncommaaccent ; B 12 -198 707 662 ;\r\nC -1 ; WX 278 ; N lacute ; B 19 0 290 890 ;\r\nC -1 ; WX 444 ; N agrave ; B 37 -10 442 678 ;\r\nC -1 ; WX 611 ; N Tcommaaccent ; B 17 -218 593 662 ;\r\nC -1 ; WX 667 ; N Cacute ; B 28 -14 633 890 ;\r\nC -1 ; WX 444 ; N atilde ; B 37 -10 442 638 ;\r\nC -1 ; WX 611 ; N Edotaccent ; B 12 0 597 835 ;\r\nC -1 ; WX 389 ; N scaron ; B 39 -10 350 674 ;\r\nC -1 ; WX 389 ; N scedilla ; B 51 -215 348 460 ;\r\nC -1 ; WX 278 ; N iacute ; B 16 0 290 678 ;\r\nC -1 ; WX 471 ; N lozenge ; B 13 0 459 724 ;\r\nC -1 ; WX 667 ; N Rcaron ; B 17 0 659 886 ;\r\nC -1 ; WX 722 ; N Gcommaaccent ; B 32 -218 709 676 ;\r\nC -1 ; WX 500 ; N ucircumflex ; B 9 -10 479 674 ;\r\nC -1 ; WX 444 ; N acircumflex ; B 37 -10 442 674 ;\r\nC -1 ; WX 722 ; N Amacron ; B 15 0 706 813 ;\r\nC -1 ; WX 333 ; N rcaron ; B 5 0 335 674 ;\r\nC -1 ; WX 444 ; N ccedilla ; B 25 -215 412 460 ;\r\nC -1 ; WX 611 ; N Zdotaccent ; B 9 0 597 835 ;\r\nC -1 ; WX 556 ; N Thorn ; B 16 0 542 662 ;\r\nC -1 ; WX 722 ; N Omacron ; B 34 -14 688 813 ;\r\nC -1 ; WX 667 ; N Racute ; B 17 0 659 890 ;\r\nC -1 ; WX 556 ; N Sacute ; B 42 -14 491 890 ;\r\nC -1 ; WX 588 ; N dcaron ; B 27 -10 589 695 ;\r\nC -1 ; WX 722 ; N Umacron ; B 14 -14 705 813 ;\r\nC -1 ; WX 500 ; N uring ; B 9 -10 479 711 ;\r\nC -1 ; WX 300 ; N threesuperior ; B 15 262 291 676 ;\r\nC -1 ; WX 722 ; N Ograve ; B 34 -14 688 890 ;\r\nC -1 ; WX 722 ; N Agrave ; B 15 0 706 890 ;\r\nC -1 ; WX 722 ; N Abreve ; B 15 0 706 876 ;\r\nC -1 ; WX 564 ; N multiply ; B 38 8 527 497 ;\r\nC -1 ; WX 500 ; N uacute ; B 9 -10 479 678 ;\r\nC -1 ; WX 611 ; N Tcaron ; B 17 0 593 886 ;\r\nC -1 ; WX 476 ; N partialdiff ; B 17 -38 459 710 ;\r\nC -1 ; WX 500 ; N ydieresis ; B 14 -218 475 623 ;\r\nC -1 ; WX 722 ; N Nacute ; B 12 -11 707 890 ;\r\nC -1 ; WX 278 ; N icircumflex ; B -16 0 295 674 ;\r\nC -1 ; WX 611 ; N Ecircumflex ; B 12 0 597 886 ;\r\nC -1 ; WX 444 ; N adieresis ; B 37 -10 442 623 ;\r\nC -1 ; WX 444 ; N edieresis ; B 25 -10 424 623 ;\r\nC -1 ; WX 444 ; N cacute ; B 25 -10 413 678 ;\r\nC -1 ; WX 500 ; N nacute ; B 16 0 485 678 ;\r\nC -1 ; WX 500 ; N umacron ; B 9 -10 479 601 ;\r\nC -1 ; WX 722 ; N Ncaron ; B 12 -11 707 886 ;\r\nC -1 ; WX 333 ; N Iacute ; B 18 0 317 890 ;\r\nC -1 ; WX 564 ; N plusminus ; B 30 0 534 506 ;\r\nC -1 ; WX 200 ; N brokenbar ; B 67 -143 133 707 ;\r\nC -1 ; WX 760 ; N registered ; B 38 -14 722 676 ;\r\nC -1 ; WX 722 ; N Gbreve ; B 32 -14 709 876 ;\r\nC -1 ; WX 333 ; N Idotaccent ; B 18 0 315 835 ;\r\nC -1 ; WX 600 ; N summation ; B 15 -10 585 706 ;\r\nC -1 ; WX 611 ; N Egrave ; B 12 0 597 890 ;\r\nC -1 ; WX 333 ; N racute ; B 5 0 335 678 ;\r\nC -1 ; WX 500 ; N omacron ; B 29 -10 470 601 ;\r\nC -1 ; WX 611 ; N Zacute ; B 9 0 597 890 ;\r\nC -1 ; WX 611 ; N Zcaron ; B 9 0 597 886 ;\r\nC -1 ; WX 549 ; N greaterequal ; B 26 0 523 666 ;\r\nC -1 ; WX 722 ; N Eth ; B 16 0 685 662 ;\r\nC -1 ; WX 667 ; N Ccedilla ; B 28 -215 633 676 ;\r\nC -1 ; WX 278 ; N lcommaaccent ; B 19 -218 257 683 ;\r\nC -1 ; WX 326 ; N tcaron ; B 13 -10 318 722 ;\r\nC -1 ; WX 444 ; N eogonek ; B 25 -165 424 460 ;\r\nC -1 ; WX 722 ; N Uogonek ; B 14 -165 705 662 ;\r\nC -1 ; WX 722 ; N Aacute ; B 15 0 706 890 ;\r\nC -1 ; WX 722 ; N Adieresis ; B 15 0 706 835 ;\r\nC -1 ; WX 444 ; N egrave ; B 25 -10 424 678 ;\r\nC -1 ; WX 444 ; N zacute ; B 27 0 418 678 ;\r\nC -1 ; WX 278 ; N iogonek ; B 16 -165 265 683 ;\r\nC -1 ; WX 722 ; N Oacute ; B 34 -14 688 890 ;\r\nC -1 ; WX 500 ; N oacute ; B 29 -10 470 678 ;\r\nC -1 ; WX 444 ; N amacron ; B 37 -10 442 601 ;\r\nC -1 ; WX 389 ; N sacute ; B 51 -10 348 678 ;\r\nC -1 ; WX 278 ; N idieresis ; B -9 0 288 623 ;\r\nC -1 ; WX 722 ; N Ocircumflex ; B 34 -14 688 886 ;\r\nC -1 ; WX 722 ; N Ugrave ; B 14 -14 705 890 ;\r\nC -1 ; WX 612 ; N Delta ; B 6 0 608 688 ;\r\nC -1 ; WX 500 ; N thorn ; B 5 -217 470 683 ;\r\nC -1 ; WX 300 ; N twosuperior ; B 1 270 296 676 ;\r\nC -1 ; WX 722 ; N Odieresis ; B 34 -14 688 835 ;\r\nC -1 ; WX 500 ; N mu ; B 36 -218 512 450 ;\r\nC -1 ; WX 278 ; N igrave ; B -8 0 253 678 ;\r\nC -1 ; WX 500 ; N ohungarumlaut ; B 29 -10 491 678 ;\r\nC -1 ; WX 611 ; N Eogonek ; B 12 -165 597 662 ;\r\nC -1 ; WX 500 ; N dcroat ; B 27 -10 500 683 ;\r\nC -1 ; WX 750 ; N threequarters ; B 15 -14 718 676 ;\r\nC -1 ; WX 556 ; N Scedilla ; B 42 -215 491 676 ;\r\nC -1 ; WX 344 ; N lcaron ; B 19 0 347 695 ;\r\nC -1 ; WX 722 ; N Kcommaaccent ; B 34 -198 723 662 ;\r\nC -1 ; WX 611 ; N Lacute ; B 12 0 598 890 ;\r\nC -1 ; WX 980 ; N trademark ; B 30 256 957 662 ;\r\nC -1 ; WX 444 ; N edotaccent ; B 25 -10 424 623 ;\r\nC -1 ; WX 333 ; N Igrave ; B 18 0 315 890 ;\r\nC -1 ; WX 333 ; N Imacron ; B 11 0 322 813 ;\r\nC -1 ; WX 611 ; N Lcaron ; B 12 0 598 676 ;\r\nC -1 ; WX 750 ; N onehalf ; B 31 -14 746 676 ;\r\nC -1 ; WX 549 ; N lessequal ; B 26 0 523 666 ;\r\nC -1 ; WX 500 ; N ocircumflex ; B 29 -10 470 674 ;\r\nC -1 ; WX 500 ; N ntilde ; B 16 0 485 638 ;\r\nC -1 ; WX 722 ; N Uhungarumlaut ; B 14 -14 705 890 ;\r\nC -1 ; WX 611 ; N Eacute ; B 12 0 597 890 ;\r\nC -1 ; WX 444 ; N emacron ; B 25 -10 424 601 ;\r\nC -1 ; WX 500 ; N gbreve ; B 28 -218 470 664 ;\r\nC -1 ; WX 750 ; N onequarter ; B 37 -14 718 676 ;\r\nC -1 ; WX 556 ; N Scaron ; B 42 -14 491 886 ;\r\nC -1 ; WX 556 ; N Scommaaccent ; B 42 -218 491 676 ;\r\nC -1 ; WX 722 ; N Ohungarumlaut ; B 34 -14 688 890 ;\r\nC -1 ; WX 400 ; N degree ; B 57 390 343 676 ;\r\nC -1 ; WX 500 ; N ograve ; B 29 -10 470 678 ;\r\nC -1 ; WX 667 ; N Ccaron ; B 28 -14 633 886 ;\r\nC -1 ; WX 500 ; N ugrave ; B 9 -10 479 678 ;\r\nC -1 ; WX 453 ; N radical ; B 2 -60 452 768 ;\r\nC -1 ; WX 722 ; N Dcaron ; B 16 0 685 886 ;\r\nC -1 ; WX 333 ; N rcommaaccent ; B 5 -218 335 460 ;\r\nC -1 ; WX 722 ; N Ntilde ; B 12 -11 707 850 ;\r\nC -1 ; WX 500 ; N otilde ; B 29 -10 470 638 ;\r\nC -1 ; WX 667 ; N Rcommaaccent ; B 17 -198 659 662 ;\r\nC -1 ; WX 611 ; N Lcommaaccent ; B 12 -218 598 662 ;\r\nC -1 ; WX 722 ; N Atilde ; B 15 0 706 850 ;\r\nC -1 ; WX 722 ; N Aogonek ; B 15 -165 738 674 ;\r\nC -1 ; WX 722 ; N Aring ; B 15 0 706 898 ;\r\nC -1 ; WX 722 ; N Otilde ; B 34 -14 688 850 ;\r\nC -1 ; WX 444 ; N zdotaccent ; B 27 0 418 623 ;\r\nC -1 ; WX 611 ; N Ecaron ; B 12 0 597 886 ;\r\nC -1 ; WX 333 ; N Iogonek ; B 18 -165 315 662 ;\r\nC -1 ; WX 500 ; N kcommaaccent ; B 7 -218 505 683 ;\r\nC -1 ; WX 564 ; N minus ; B 30 220 534 286 ;\r\nC -1 ; WX 333 ; N Icircumflex ; B 11 0 322 886 ;\r\nC -1 ; WX 500 ; N ncaron ; B 16 0 485 674 ;\r\nC -1 ; WX 278 ; N tcommaaccent ; B 13 -218 279 579 ;\r\nC -1 ; WX 564 ; N logicalnot ; B 30 108 534 386 ;\r\nC -1 ; WX 500 ; N odieresis ; B 29 -10 470 623 ;\r\nC -1 ; WX 500 ; N udieresis ; B 9 -10 479 623 ;\r\nC -1 ; WX 549 ; N notequal ; B 12 -31 537 547 ;\r\nC -1 ; WX 500 ; N gcommaaccent ; B 28 -218 470 749 ;\r\nC -1 ; WX 500 ; N eth ; B 29 -10 471 686 ;\r\nC -1 ; WX 444 ; N zcaron ; B 27 0 418 674 ;\r\nC -1 ; WX 500 ; N ncommaaccent ; B 16 -218 485 460 ;\r\nC -1 ; WX 300 ; N onesuperior ; B 57 270 248 676 ;\r\nC -1 ; WX 278 ; N imacron ; B 6 0 271 601 ;\r\nC -1 ; WX 500 ; N Euro ; B 0 0 0 0 ;\r\nEndCharMetrics\r\nStartKernData\r\nStartKernPairs 2073\r\nKPX A C -40\r\nKPX A Cacute -40\r\nKPX A Ccaron -40\r\nKPX A Ccedilla -40\r\nKPX A G -40\r\nKPX A Gbreve -40\r\nKPX A Gcommaaccent -40\r\nKPX A O -55\r\nKPX A Oacute -55\r\nKPX A Ocircumflex -55\r\nKPX A Odieresis -55\r\nKPX A Ograve -55\r\nKPX A Ohungarumlaut -55\r\nKPX A Omacron -55\r\nKPX A Oslash -55\r\nKPX A Otilde -55\r\nKPX A Q -55\r\nKPX A T -111\r\nKPX A Tcaron -111\r\nKPX A Tcommaaccent -111\r\nKPX A U -55\r\nKPX A Uacute -55\r\nKPX A Ucircumflex -55\r\nKPX A Udieresis -55\r\nKPX A Ugrave -55\r\nKPX A Uhungarumlaut -55\r\nKPX A Umacron -55\r\nKPX A Uogonek -55\r\nKPX A Uring -55\r\nKPX A V -135\r\nKPX A W -90\r\nKPX A Y -105\r\nKPX A Yacute -105\r\nKPX A Ydieresis -105\r\nKPX A quoteright -111\r\nKPX A v -74\r\nKPX A w -92\r\nKPX A y -92\r\nKPX A yacute -92\r\nKPX A ydieresis -92\r\nKPX Aacute C -40\r\nKPX Aacute Cacute -40\r\nKPX Aacute Ccaron -40\r\nKPX Aacute Ccedilla -40\r\nKPX Aacute G -40\r\nKPX Aacute Gbreve -40\r\nKPX Aacute Gcommaaccent -40\r\nKPX Aacute O -55\r\nKPX Aacute Oacute -55\r\nKPX Aacute Ocircumflex -55\r\nKPX Aacute Odieresis -55\r\nKPX Aacute Ograve -55\r\nKPX Aacute Ohungarumlaut -55\r\nKPX Aacute Omacron -55\r\nKPX Aacute Oslash -55\r\nKPX Aacute Otilde -55\r\nKPX Aacute Q -55\r\nKPX Aacute T -111\r\nKPX Aacute Tcaron -111\r\nKPX Aacute Tcommaaccent -111\r\nKPX Aacute U -55\r\nKPX Aacute Uacute -55\r\nKPX Aacute Ucircumflex -55\r\nKPX Aacute Udieresis -55\r\nKPX Aacute Ugrave -55\r\nKPX Aacute Uhungarumlaut -55\r\nKPX Aacute Umacron -55\r\nKPX Aacute Uogonek -55\r\nKPX Aacute Uring -55\r\nKPX Aacute V -135\r\nKPX Aacute W -90\r\nKPX Aacute Y -105\r\nKPX Aacute Yacute -105\r\nKPX Aacute Ydieresis -105\r\nKPX Aacute quoteright -111\r\nKPX Aacute v -74\r\nKPX Aacute w -92\r\nKPX Aacute y -92\r\nKPX Aacute yacute -92\r\nKPX Aacute ydieresis -92\r\nKPX Abreve C -40\r\nKPX Abreve Cacute -40\r\nKPX Abreve Ccaron -40\r\nKPX Abreve Ccedilla -40\r\nKPX Abreve G -40\r\nKPX Abreve Gbreve -40\r\nKPX Abreve Gcommaaccent -40\r\nKPX Abreve O -55\r\nKPX Abreve Oacute -55\r\nKPX Abreve Ocircumflex -55\r\nKPX Abreve Odieresis -55\r\nKPX Abreve Ograve -55\r\nKPX Abreve Ohungarumlaut -55\r\nKPX Abreve Omacron -55\r\nKPX Abreve Oslash -55\r\nKPX Abreve Otilde -55\r\nKPX Abreve Q -55\r\nKPX Abreve T -111\r\nKPX Abreve Tcaron -111\r\nKPX Abreve Tcommaaccent -111\r\nKPX Abreve U -55\r\nKPX Abreve Uacute -55\r\nKPX Abreve Ucircumflex -55\r\nKPX Abreve Udieresis -55\r\nKPX Abreve Ugrave -55\r\nKPX Abreve Uhungarumlaut -55\r\nKPX Abreve Umacron -55\r\nKPX Abreve Uogonek -55\r\nKPX Abreve Uring -55\r\nKPX Abreve V -135\r\nKPX Abreve W -90\r\nKPX Abreve Y -105\r\nKPX Abreve Yacute -105\r\nKPX Abreve Ydieresis -105\r\nKPX Abreve quoteright -111\r\nKPX Abreve v -74\r\nKPX Abreve w -92\r\nKPX Abreve y -92\r\nKPX Abreve yacute -92\r\nKPX Abreve ydieresis -92\r\nKPX Acircumflex C -40\r\nKPX Acircumflex Cacute -40\r\nKPX Acircumflex Ccaron -40\r\nKPX Acircumflex Ccedilla -40\r\nKPX Acircumflex G -40\r\nKPX Acircumflex Gbreve -40\r\nKPX Acircumflex Gcommaaccent -40\r\nKPX Acircumflex O -55\r\nKPX Acircumflex Oacute -55\r\nKPX Acircumflex Ocircumflex -55\r\nKPX Acircumflex Odieresis -55\r\nKPX Acircumflex Ograve -55\r\nKPX Acircumflex Ohungarumlaut -55\r\nKPX Acircumflex Omacron -55\r\nKPX Acircumflex Oslash -55\r\nKPX Acircumflex Otilde -55\r\nKPX Acircumflex Q -55\r\nKPX Acircumflex T -111\r\nKPX Acircumflex Tcaron -111\r\nKPX Acircumflex Tcommaaccent -111\r\nKPX Acircumflex U -55\r\nKPX Acircumflex Uacute -55\r\nKPX Acircumflex Ucircumflex -55\r\nKPX Acircumflex Udieresis -55\r\nKPX Acircumflex Ugrave -55\r\nKPX Acircumflex Uhungarumlaut -55\r\nKPX Acircumflex Umacron -55\r\nKPX Acircumflex Uogonek -55\r\nKPX Acircumflex Uring -55\r\nKPX Acircumflex V -135\r\nKPX Acircumflex W -90\r\nKPX Acircumflex Y -105\r\nKPX Acircumflex Yacute -105\r\nKPX Acircumflex Ydieresis -105\r\nKPX Acircumflex quoteright -111\r\nKPX Acircumflex v -74\r\nKPX Acircumflex w -92\r\nKPX Acircumflex y -92\r\nKPX Acircumflex yacute -92\r\nKPX Acircumflex ydieresis -92\r\nKPX Adieresis C -40\r\nKPX Adieresis Cacute -40\r\nKPX Adieresis Ccaron -40\r\nKPX Adieresis Ccedilla -40\r\nKPX Adieresis G -40\r\nKPX Adieresis Gbreve -40\r\nKPX Adieresis Gcommaaccent -40\r\nKPX Adieresis O -55\r\nKPX Adieresis Oacute -55\r\nKPX Adieresis Ocircumflex -55\r\nKPX Adieresis Odieresis -55\r\nKPX Adieresis Ograve -55\r\nKPX Adieresis Ohungarumlaut -55\r\nKPX Adieresis Omacron -55\r\nKPX Adieresis Oslash -55\r\nKPX Adieresis Otilde -55\r\nKPX Adieresis Q -55\r\nKPX Adieresis T -111\r\nKPX Adieresis Tcaron -111\r\nKPX Adieresis Tcommaaccent -111\r\nKPX Adieresis U -55\r\nKPX Adieresis Uacute -55\r\nKPX Adieresis Ucircumflex -55\r\nKPX Adieresis Udieresis -55\r\nKPX Adieresis Ugrave -55\r\nKPX Adieresis Uhungarumlaut -55\r\nKPX Adieresis Umacron -55\r\nKPX Adieresis Uogonek -55\r\nKPX Adieresis Uring -55\r\nKPX Adieresis V -135\r\nKPX Adieresis W -90\r\nKPX Adieresis Y -105\r\nKPX Adieresis Yacute -105\r\nKPX Adieresis Ydieresis -105\r\nKPX Adieresis quoteright -111\r\nKPX Adieresis v -74\r\nKPX Adieresis w -92\r\nKPX Adieresis y -92\r\nKPX Adieresis yacute -92\r\nKPX Adieresis ydieresis -92\r\nKPX Agrave C -40\r\nKPX Agrave Cacute -40\r\nKPX Agrave Ccaron -40\r\nKPX Agrave Ccedilla -40\r\nKPX Agrave G -40\r\nKPX Agrave Gbreve -40\r\nKPX Agrave Gcommaaccent -40\r\nKPX Agrave O -55\r\nKPX Agrave Oacute -55\r\nKPX Agrave Ocircumflex -55\r\nKPX Agrave Odieresis -55\r\nKPX Agrave Ograve -55\r\nKPX Agrave Ohungarumlaut -55\r\nKPX Agrave Omacron -55\r\nKPX Agrave Oslash -55\r\nKPX Agrave Otilde -55\r\nKPX Agrave Q -55\r\nKPX Agrave T -111\r\nKPX Agrave Tcaron -111\r\nKPX Agrave Tcommaaccent -111\r\nKPX Agrave U -55\r\nKPX Agrave Uacute -55\r\nKPX Agrave Ucircumflex -55\r\nKPX Agrave Udieresis -55\r\nKPX Agrave Ugrave -55\r\nKPX Agrave Uhungarumlaut -55\r\nKPX Agrave Umacron -55\r\nKPX Agrave Uogonek -55\r\nKPX Agrave Uring -55\r\nKPX Agrave V -135\r\nKPX Agrave W -90\r\nKPX Agrave Y -105\r\nKPX Agrave Yacute -105\r\nKPX Agrave Ydieresis -105\r\nKPX Agrave quoteright -111\r\nKPX Agrave v -74\r\nKPX Agrave w -92\r\nKPX Agrave y -92\r\nKPX Agrave yacute -92\r\nKPX Agrave ydieresis -92\r\nKPX Amacron C -40\r\nKPX Amacron Cacute -40\r\nKPX Amacron Ccaron -40\r\nKPX Amacron Ccedilla -40\r\nKPX Amacron G -40\r\nKPX Amacron Gbreve -40\r\nKPX Amacron Gcommaaccent -40\r\nKPX Amacron O -55\r\nKPX Amacron Oacute -55\r\nKPX Amacron Ocircumflex -55\r\nKPX Amacron Odieresis -55\r\nKPX Amacron Ograve -55\r\nKPX Amacron Ohungarumlaut -55\r\nKPX Amacron Omacron -55\r\nKPX Amacron Oslash -55\r\nKPX Amacron Otilde -55\r\nKPX Amacron Q -55\r\nKPX Amacron T -111\r\nKPX Amacron Tcaron -111\r\nKPX Amacron Tcommaaccent -111\r\nKPX Amacron U -55\r\nKPX Amacron Uacute -55\r\nKPX Amacron Ucircumflex -55\r\nKPX Amacron Udieresis -55\r\nKPX Amacron Ugrave -55\r\nKPX Amacron Uhungarumlaut -55\r\nKPX Amacron Umacron -55\r\nKPX Amacron Uogonek -55\r\nKPX Amacron Uring -55\r\nKPX Amacron V -135\r\nKPX Amacron W -90\r\nKPX Amacron Y -105\r\nKPX Amacron Yacute -105\r\nKPX Amacron Ydieresis -105\r\nKPX Amacron quoteright -111\r\nKPX Amacron v -74\r\nKPX Amacron w -92\r\nKPX Amacron y -92\r\nKPX Amacron yacute -92\r\nKPX Amacron ydieresis -92\r\nKPX Aogonek C -40\r\nKPX Aogonek Cacute -40\r\nKPX Aogonek Ccaron -40\r\nKPX Aogonek Ccedilla -40\r\nKPX Aogonek G -40\r\nKPX Aogonek Gbreve -40\r\nKPX Aogonek Gcommaaccent -40\r\nKPX Aogonek O -55\r\nKPX Aogonek Oacute -55\r\nKPX Aogonek Ocircumflex -55\r\nKPX Aogonek Odieresis -55\r\nKPX Aogonek Ograve -55\r\nKPX Aogonek Ohungarumlaut -55\r\nKPX Aogonek Omacron -55\r\nKPX Aogonek Oslash -55\r\nKPX Aogonek Otilde -55\r\nKPX Aogonek Q -55\r\nKPX Aogonek T -111\r\nKPX Aogonek Tcaron -111\r\nKPX Aogonek Tcommaaccent -111\r\nKPX Aogonek U -55\r\nKPX Aogonek Uacute -55\r\nKPX Aogonek Ucircumflex -55\r\nKPX Aogonek Udieresis -55\r\nKPX Aogonek Ugrave -55\r\nKPX Aogonek Uhungarumlaut -55\r\nKPX Aogonek Umacron -55\r\nKPX Aogonek Uogonek -55\r\nKPX Aogonek Uring -55\r\nKPX Aogonek V -135\r\nKPX Aogonek W -90\r\nKPX Aogonek Y -105\r\nKPX Aogonek Yacute -105\r\nKPX Aogonek Ydieresis -105\r\nKPX Aogonek quoteright -111\r\nKPX Aogonek v -74\r\nKPX Aogonek w -52\r\nKPX Aogonek y -52\r\nKPX Aogonek yacute -52\r\nKPX Aogonek ydieresis -52\r\nKPX Aring C -40\r\nKPX Aring Cacute -40\r\nKPX Aring Ccaron -40\r\nKPX Aring Ccedilla -40\r\nKPX Aring G -40\r\nKPX Aring Gbreve -40\r\nKPX Aring Gcommaaccent -40\r\nKPX Aring O -55\r\nKPX Aring Oacute -55\r\nKPX Aring Ocircumflex -55\r\nKPX Aring Odieresis -55\r\nKPX Aring Ograve -55\r\nKPX Aring Ohungarumlaut -55\r\nKPX Aring Omacron -55\r\nKPX Aring Oslash -55\r\nKPX Aring Otilde -55\r\nKPX Aring Q -55\r\nKPX Aring T -111\r\nKPX Aring Tcaron -111\r\nKPX Aring Tcommaaccent -111\r\nKPX Aring U -55\r\nKPX Aring Uacute -55\r\nKPX Aring Ucircumflex -55\r\nKPX Aring Udieresis -55\r\nKPX Aring Ugrave -55\r\nKPX Aring Uhungarumlaut -55\r\nKPX Aring Umacron -55\r\nKPX Aring Uogonek -55\r\nKPX Aring Uring -55\r\nKPX Aring V -135\r\nKPX Aring W -90\r\nKPX Aring Y -105\r\nKPX Aring Yacute -105\r\nKPX Aring Ydieresis -105\r\nKPX Aring quoteright -111\r\nKPX Aring v -74\r\nKPX Aring w -92\r\nKPX Aring y -92\r\nKPX Aring yacute -92\r\nKPX Aring ydieresis -92\r\nKPX Atilde C -40\r\nKPX Atilde Cacute -40\r\nKPX Atilde Ccaron -40\r\nKPX Atilde Ccedilla -40\r\nKPX Atilde G -40\r\nKPX Atilde Gbreve -40\r\nKPX Atilde Gcommaaccent -40\r\nKPX Atilde O -55\r\nKPX Atilde Oacute -55\r\nKPX Atilde Ocircumflex -55\r\nKPX Atilde Odieresis -55\r\nKPX Atilde Ograve -55\r\nKPX Atilde Ohungarumlaut -55\r\nKPX Atilde Omacron -55\r\nKPX Atilde Oslash -55\r\nKPX Atilde Otilde -55\r\nKPX Atilde Q -55\r\nKPX Atilde T -111\r\nKPX Atilde Tcaron -111\r\nKPX Atilde Tcommaaccent -111\r\nKPX Atilde U -55\r\nKPX Atilde Uacute -55\r\nKPX Atilde Ucircumflex -55\r\nKPX Atilde Udieresis -55\r\nKPX Atilde Ugrave -55\r\nKPX Atilde Uhungarumlaut -55\r\nKPX Atilde Umacron -55\r\nKPX Atilde Uogonek -55\r\nKPX Atilde Uring -55\r\nKPX Atilde V -135\r\nKPX Atilde W -90\r\nKPX Atilde Y -105\r\nKPX Atilde Yacute -105\r\nKPX Atilde Ydieresis -105\r\nKPX Atilde quoteright -111\r\nKPX Atilde v -74\r\nKPX Atilde w -92\r\nKPX Atilde y -92\r\nKPX Atilde yacute -92\r\nKPX Atilde ydieresis -92\r\nKPX B A -35\r\nKPX B Aacute -35\r\nKPX B Abreve -35\r\nKPX B Acircumflex -35\r\nKPX B Adieresis -35\r\nKPX B Agrave -35\r\nKPX B Amacron -35\r\nKPX B Aogonek -35\r\nKPX B Aring -35\r\nKPX B Atilde -35\r\nKPX B U -10\r\nKPX B Uacute -10\r\nKPX B Ucircumflex -10\r\nKPX B Udieresis -10\r\nKPX B Ugrave -10\r\nKPX B Uhungarumlaut -10\r\nKPX B Umacron -10\r\nKPX B Uogonek -10\r\nKPX B Uring -10\r\nKPX D A -40\r\nKPX D Aacute -40\r\nKPX D Abreve -40\r\nKPX D Acircumflex -40\r\nKPX D Adieresis -40\r\nKPX D Agrave -40\r\nKPX D Amacron -40\r\nKPX D Aogonek -40\r\nKPX D Aring -40\r\nKPX D Atilde -40\r\nKPX D V -40\r\nKPX D W -30\r\nKPX D Y -55\r\nKPX D Yacute -55\r\nKPX D Ydieresis -55\r\nKPX Dcaron A -40\r\nKPX Dcaron Aacute -40\r\nKPX Dcaron Abreve -40\r\nKPX Dcaron Acircumflex -40\r\nKPX Dcaron Adieresis -40\r\nKPX Dcaron Agrave -40\r\nKPX Dcaron Amacron -40\r\nKPX Dcaron Aogonek -40\r\nKPX Dcaron Aring -40\r\nKPX Dcaron Atilde -40\r\nKPX Dcaron V -40\r\nKPX Dcaron W -30\r\nKPX Dcaron Y -55\r\nKPX Dcaron Yacute -55\r\nKPX Dcaron Ydieresis -55\r\nKPX Dcroat A -40\r\nKPX Dcroat Aacute -40\r\nKPX Dcroat Abreve -40\r\nKPX Dcroat Acircumflex -40\r\nKPX Dcroat Adieresis -40\r\nKPX Dcroat Agrave -40\r\nKPX Dcroat Amacron -40\r\nKPX Dcroat Aogonek -40\r\nKPX Dcroat Aring -40\r\nKPX Dcroat Atilde -40\r\nKPX Dcroat V -40\r\nKPX Dcroat W -30\r\nKPX Dcroat Y -55\r\nKPX Dcroat Yacute -55\r\nKPX Dcroat Ydieresis -55\r\nKPX F A -74\r\nKPX F Aacute -74\r\nKPX F Abreve -74\r\nKPX F Acircumflex -74\r\nKPX F Adieresis -74\r\nKPX F Agrave -74\r\nKPX F Amacron -74\r\nKPX F Aogonek -74\r\nKPX F Aring -74\r\nKPX F Atilde -74\r\nKPX F a -15\r\nKPX F aacute -15\r\nKPX F abreve -15\r\nKPX F acircumflex -15\r\nKPX F adieresis -15\r\nKPX F agrave -15\r\nKPX F amacron -15\r\nKPX F aogonek -15\r\nKPX F aring -15\r\nKPX F atilde -15\r\nKPX F comma -80\r\nKPX F o -15\r\nKPX F oacute -15\r\nKPX F ocircumflex -15\r\nKPX F odieresis -15\r\nKPX F ograve -15\r\nKPX F ohungarumlaut -15\r\nKPX F omacron -15\r\nKPX F oslash -15\r\nKPX F otilde -15\r\nKPX F period -80\r\nKPX J A -60\r\nKPX J Aacute -60\r\nKPX J Abreve -60\r\nKPX J Acircumflex -60\r\nKPX J Adieresis -60\r\nKPX J Agrave -60\r\nKPX J Amacron -60\r\nKPX J Aogonek -60\r\nKPX J Aring -60\r\nKPX J Atilde -60\r\nKPX K O -30\r\nKPX K Oacute -30\r\nKPX K Ocircumflex -30\r\nKPX K Odieresis -30\r\nKPX K Ograve -30\r\nKPX K Ohungarumlaut -30\r\nKPX K Omacron -30\r\nKPX K Oslash -30\r\nKPX K Otilde -30\r\nKPX K e -25\r\nKPX K eacute -25\r\nKPX K ecaron -25\r\nKPX K ecircumflex -25\r\nKPX K edieresis -25\r\nKPX K edotaccent -25\r\nKPX K egrave -25\r\nKPX K emacron -25\r\nKPX K eogonek -25\r\nKPX K o -35\r\nKPX K oacute -35\r\nKPX K ocircumflex -35\r\nKPX K odieresis -35\r\nKPX K ograve -35\r\nKPX K ohungarumlaut -35\r\nKPX K omacron -35\r\nKPX K oslash -35\r\nKPX K otilde -35\r\nKPX K u -15\r\nKPX K uacute -15\r\nKPX K ucircumflex -15\r\nKPX K udieresis -15\r\nKPX K ugrave -15\r\nKPX K uhungarumlaut -15\r\nKPX K umacron -15\r\nKPX K uogonek -15\r\nKPX K uring -15\r\nKPX K y -25\r\nKPX K yacute -25\r\nKPX K ydieresis -25\r\nKPX Kcommaaccent O -30\r\nKPX Kcommaaccent Oacute -30\r\nKPX Kcommaaccent Ocircumflex -30\r\nKPX Kcommaaccent Odieresis -30\r\nKPX Kcommaaccent Ograve -30\r\nKPX Kcommaaccent Ohungarumlaut -30\r\nKPX Kcommaaccent Omacron -30\r\nKPX Kcommaaccent Oslash -30\r\nKPX Kcommaaccent Otilde -30\r\nKPX Kcommaaccent e -25\r\nKPX Kcommaaccent eacute -25\r\nKPX Kcommaaccent ecaron -25\r\nKPX Kcommaaccent ecircumflex -25\r\nKPX Kcommaaccent edieresis -25\r\nKPX Kcommaaccent edotaccent -25\r\nKPX Kcommaaccent egrave -25\r\nKPX Kcommaaccent emacron -25\r\nKPX Kcommaaccent eogonek -25\r\nKPX Kcommaaccent o -35\r\nKPX Kcommaaccent oacute -35\r\nKPX Kcommaaccent ocircumflex -35\r\nKPX Kcommaaccent odieresis -35\r\nKPX Kcommaaccent ograve -35\r\nKPX Kcommaaccent ohungarumlaut -35\r\nKPX Kcommaaccent omacron -35\r\nKPX Kcommaaccent oslash -35\r\nKPX Kcommaaccent otilde -35\r\nKPX Kcommaaccent u -15\r\nKPX Kcommaaccent uacute -15\r\nKPX Kcommaaccent ucircumflex -15\r\nKPX Kcommaaccent udieresis -15\r\nKPX Kcommaaccent ugrave -15\r\nKPX Kcommaaccent uhungarumlaut -15\r\nKPX Kcommaaccent umacron -15\r\nKPX Kcommaaccent uogonek -15\r\nKPX Kcommaaccent uring -15\r\nKPX Kcommaaccent y -25\r\nKPX Kcommaaccent yacute -25\r\nKPX Kcommaaccent ydieresis -25\r\nKPX L T -92\r\nKPX L Tcaron -92\r\nKPX L Tcommaaccent -92\r\nKPX L V -100\r\nKPX L W -74\r\nKPX L Y -100\r\nKPX L Yacute -100\r\nKPX L Ydieresis -100\r\nKPX L quoteright -92\r\nKPX L y -55\r\nKPX L yacute -55\r\nKPX L ydieresis -55\r\nKPX Lacute T -92\r\nKPX Lacute Tcaron -92\r\nKPX Lacute Tcommaaccent -92\r\nKPX Lacute V -100\r\nKPX Lacute W -74\r\nKPX Lacute Y -100\r\nKPX Lacute Yacute -100\r\nKPX Lacute Ydieresis -100\r\nKPX Lacute quoteright -92\r\nKPX Lacute y -55\r\nKPX Lacute yacute -55\r\nKPX Lacute ydieresis -55\r\nKPX Lcaron quoteright -92\r\nKPX Lcaron y -55\r\nKPX Lcaron yacute -55\r\nKPX Lcaron ydieresis -55\r\nKPX Lcommaaccent T -92\r\nKPX Lcommaaccent Tcaron -92\r\nKPX Lcommaaccent Tcommaaccent -92\r\nKPX Lcommaaccent V -100\r\nKPX Lcommaaccent W -74\r\nKPX Lcommaaccent Y -100\r\nKPX Lcommaaccent Yacute -100\r\nKPX Lcommaaccent Ydieresis -100\r\nKPX Lcommaaccent quoteright -92\r\nKPX Lcommaaccent y -55\r\nKPX Lcommaaccent yacute -55\r\nKPX Lcommaaccent ydieresis -55\r\nKPX Lslash T -92\r\nKPX Lslash Tcaron -92\r\nKPX Lslash Tcommaaccent -92\r\nKPX Lslash V -100\r\nKPX Lslash W -74\r\nKPX Lslash Y -100\r\nKPX Lslash Yacute -100\r\nKPX Lslash Ydieresis -100\r\nKPX Lslash quoteright -92\r\nKPX Lslash y -55\r\nKPX Lslash yacute -55\r\nKPX Lslash ydieresis -55\r\nKPX N A -35\r\nKPX N Aacute -35\r\nKPX N Abreve -35\r\nKPX N Acircumflex -35\r\nKPX N Adieresis -35\r\nKPX N Agrave -35\r\nKPX N Amacron -35\r\nKPX N Aogonek -35\r\nKPX N Aring -35\r\nKPX N Atilde -35\r\nKPX Nacute A -35\r\nKPX Nacute Aacute -35\r\nKPX Nacute Abreve -35\r\nKPX Nacute Acircumflex -35\r\nKPX Nacute Adieresis -35\r\nKPX Nacute Agrave -35\r\nKPX Nacute Amacron -35\r\nKPX Nacute Aogonek -35\r\nKPX Nacute Aring -35\r\nKPX Nacute Atilde -35\r\nKPX Ncaron A -35\r\nKPX Ncaron Aacute -35\r\nKPX Ncaron Abreve -35\r\nKPX Ncaron Acircumflex -35\r\nKPX Ncaron Adieresis -35\r\nKPX Ncaron Agrave -35\r\nKPX Ncaron Amacron -35\r\nKPX Ncaron Aogonek -35\r\nKPX Ncaron Aring -35\r\nKPX Ncaron Atilde -35\r\nKPX Ncommaaccent A -35\r\nKPX Ncommaaccent Aacute -35\r\nKPX Ncommaaccent Abreve -35\r\nKPX Ncommaaccent Acircumflex -35\r\nKPX Ncommaaccent Adieresis -35\r\nKPX Ncommaaccent Agrave -35\r\nKPX Ncommaaccent Amacron -35\r\nKPX Ncommaaccent Aogonek -35\r\nKPX Ncommaaccent Aring -35\r\nKPX Ncommaaccent Atilde -35\r\nKPX Ntilde A -35\r\nKPX Ntilde Aacute -35\r\nKPX Ntilde Abreve -35\r\nKPX Ntilde Acircumflex -35\r\nKPX Ntilde Adieresis -35\r\nKPX Ntilde Agrave -35\r\nKPX Ntilde Amacron -35\r\nKPX Ntilde Aogonek -35\r\nKPX Ntilde Aring -35\r\nKPX Ntilde Atilde -35\r\nKPX O A -35\r\nKPX O Aacute -35\r\nKPX O Abreve -35\r\nKPX O Acircumflex -35\r\nKPX O Adieresis -35\r\nKPX O Agrave -35\r\nKPX O Amacron -35\r\nKPX O Aogonek -35\r\nKPX O Aring -35\r\nKPX O Atilde -35\r\nKPX O T -40\r\nKPX O Tcaron -40\r\nKPX O Tcommaaccent -40\r\nKPX O V -50\r\nKPX O W -35\r\nKPX O X -40\r\nKPX O Y -50\r\nKPX O Yacute -50\r\nKPX O Ydieresis -50\r\nKPX Oacute A -35\r\nKPX Oacute Aacute -35\r\nKPX Oacute Abreve -35\r\nKPX Oacute Acircumflex -35\r\nKPX Oacute Adieresis -35\r\nKPX Oacute Agrave -35\r\nKPX Oacute Amacron -35\r\nKPX Oacute Aogonek -35\r\nKPX Oacute Aring -35\r\nKPX Oacute Atilde -35\r\nKPX Oacute T -40\r\nKPX Oacute Tcaron -40\r\nKPX Oacute Tcommaaccent -40\r\nKPX Oacute V -50\r\nKPX Oacute W -35\r\nKPX Oacute X -40\r\nKPX Oacute Y -50\r\nKPX Oacute Yacute -50\r\nKPX Oacute Ydieresis -50\r\nKPX Ocircumflex A -35\r\nKPX Ocircumflex Aacute -35\r\nKPX Ocircumflex Abreve -35\r\nKPX Ocircumflex Acircumflex -35\r\nKPX Ocircumflex Adieresis -35\r\nKPX Ocircumflex Agrave -35\r\nKPX Ocircumflex Amacron -35\r\nKPX Ocircumflex Aogonek -35\r\nKPX Ocircumflex Aring -35\r\nKPX Ocircumflex Atilde -35\r\nKPX Ocircumflex T -40\r\nKPX Ocircumflex Tcaron -40\r\nKPX Ocircumflex Tcommaaccent -40\r\nKPX Ocircumflex V -50\r\nKPX Ocircumflex W -35\r\nKPX Ocircumflex X -40\r\nKPX Ocircumflex Y -50\r\nKPX Ocircumflex Yacute -50\r\nKPX Ocircumflex Ydieresis -50\r\nKPX Odieresis A -35\r\nKPX Odieresis Aacute -35\r\nKPX Odieresis Abreve -35\r\nKPX Odieresis Acircumflex -35\r\nKPX Odieresis Adieresis -35\r\nKPX Odieresis Agrave -35\r\nKPX Odieresis Amacron -35\r\nKPX Odieresis Aogonek -35\r\nKPX Odieresis Aring -35\r\nKPX Odieresis Atilde -35\r\nKPX Odieresis T -40\r\nKPX Odieresis Tcaron -40\r\nKPX Odieresis Tcommaaccent -40\r\nKPX Odieresis V -50\r\nKPX Odieresis W -35\r\nKPX Odieresis X -40\r\nKPX Odieresis Y -50\r\nKPX Odieresis Yacute -50\r\nKPX Odieresis Ydieresis -50\r\nKPX Ograve A -35\r\nKPX Ograve Aacute -35\r\nKPX Ograve Abreve -35\r\nKPX Ograve Acircumflex -35\r\nKPX Ograve Adieresis -35\r\nKPX Ograve Agrave -35\r\nKPX Ograve Amacron -35\r\nKPX Ograve Aogonek -35\r\nKPX Ograve Aring -35\r\nKPX Ograve Atilde -35\r\nKPX Ograve T -40\r\nKPX Ograve Tcaron -40\r\nKPX Ograve Tcommaaccent -40\r\nKPX Ograve V -50\r\nKPX Ograve W -35\r\nKPX Ograve X -40\r\nKPX Ograve Y -50\r\nKPX Ograve Yacute -50\r\nKPX Ograve Ydieresis -50\r\nKPX Ohungarumlaut A -35\r\nKPX Ohungarumlaut Aacute -35\r\nKPX Ohungarumlaut Abreve -35\r\nKPX Ohungarumlaut Acircumflex -35\r\nKPX Ohungarumlaut Adieresis -35\r\nKPX Ohungarumlaut Agrave -35\r\nKPX Ohungarumlaut Amacron -35\r\nKPX Ohungarumlaut Aogonek -35\r\nKPX Ohungarumlaut Aring -35\r\nKPX Ohungarumlaut Atilde -35\r\nKPX Ohungarumlaut T -40\r\nKPX Ohungarumlaut Tcaron -40\r\nKPX Ohungarumlaut Tcommaaccent -40\r\nKPX Ohungarumlaut V -50\r\nKPX Ohungarumlaut W -35\r\nKPX Ohungarumlaut X -40\r\nKPX Ohungarumlaut Y -50\r\nKPX Ohungarumlaut Yacute -50\r\nKPX Ohungarumlaut Ydieresis -50\r\nKPX Omacron A -35\r\nKPX Omacron Aacute -35\r\nKPX Omacron Abreve -35\r\nKPX Omacron Acircumflex -35\r\nKPX Omacron Adieresis -35\r\nKPX Omacron Agrave -35\r\nKPX Omacron Amacron -35\r\nKPX Omacron Aogonek -35\r\nKPX Omacron Aring -35\r\nKPX Omacron Atilde -35\r\nKPX Omacron T -40\r\nKPX Omacron Tcaron -40\r\nKPX Omacron Tcommaaccent -40\r\nKPX Omacron V -50\r\nKPX Omacron W -35\r\nKPX Omacron X -40\r\nKPX Omacron Y -50\r\nKPX Omacron Yacute -50\r\nKPX Omacron Ydieresis -50\r\nKPX Oslash A -35\r\nKPX Oslash Aacute -35\r\nKPX Oslash Abreve -35\r\nKPX Oslash Acircumflex -35\r\nKPX Oslash Adieresis -35\r\nKPX Oslash Agrave -35\r\nKPX Oslash Amacron -35\r\nKPX Oslash Aogonek -35\r\nKPX Oslash Aring -35\r\nKPX Oslash Atilde -35\r\nKPX Oslash T -40\r\nKPX Oslash Tcaron -40\r\nKPX Oslash Tcommaaccent -40\r\nKPX Oslash V -50\r\nKPX Oslash W -35\r\nKPX Oslash X -40\r\nKPX Oslash Y -50\r\nKPX Oslash Yacute -50\r\nKPX Oslash Ydieresis -50\r\nKPX Otilde A -35\r\nKPX Otilde Aacute -35\r\nKPX Otilde Abreve -35\r\nKPX Otilde Acircumflex -35\r\nKPX Otilde Adieresis -35\r\nKPX Otilde Agrave -35\r\nKPX Otilde Amacron -35\r\nKPX Otilde Aogonek -35\r\nKPX Otilde Aring -35\r\nKPX Otilde Atilde -35\r\nKPX Otilde T -40\r\nKPX Otilde Tcaron -40\r\nKPX Otilde Tcommaaccent -40\r\nKPX Otilde V -50\r\nKPX Otilde W -35\r\nKPX Otilde X -40\r\nKPX Otilde Y -50\r\nKPX Otilde Yacute -50\r\nKPX Otilde Ydieresis -50\r\nKPX P A -92\r\nKPX P Aacute -92\r\nKPX P Abreve -92\r\nKPX P Acircumflex -92\r\nKPX P Adieresis -92\r\nKPX P Agrave -92\r\nKPX P Amacron -92\r\nKPX P Aogonek -92\r\nKPX P Aring -92\r\nKPX P Atilde -92\r\nKPX P a -15\r\nKPX P aacute -15\r\nKPX P abreve -15\r\nKPX P acircumflex -15\r\nKPX P adieresis -15\r\nKPX P agrave -15\r\nKPX P amacron -15\r\nKPX P aogonek -15\r\nKPX P aring -15\r\nKPX P atilde -15\r\nKPX P comma -111\r\nKPX P period -111\r\nKPX Q U -10\r\nKPX Q Uacute -10\r\nKPX Q Ucircumflex -10\r\nKPX Q Udieresis -10\r\nKPX Q Ugrave -10\r\nKPX Q Uhungarumlaut -10\r\nKPX Q Umacron -10\r\nKPX Q Uogonek -10\r\nKPX Q Uring -10\r\nKPX R O -40\r\nKPX R Oacute -40\r\nKPX R Ocircumflex -40\r\nKPX R Odieresis -40\r\nKPX R Ograve -40\r\nKPX R Ohungarumlaut -40\r\nKPX R Omacron -40\r\nKPX R Oslash -40\r\nKPX R Otilde -40\r\nKPX R T -60\r\nKPX R Tcaron -60\r\nKPX R Tcommaaccent -60\r\nKPX R U -40\r\nKPX R Uacute -40\r\nKPX R Ucircumflex -40\r\nKPX R Udieresis -40\r\nKPX R Ugrave -40\r\nKPX R Uhungarumlaut -40\r\nKPX R Umacron -40\r\nKPX R Uogonek -40\r\nKPX R Uring -40\r\nKPX R V -80\r\nKPX R W -55\r\nKPX R Y -65\r\nKPX R Yacute -65\r\nKPX R Ydieresis -65\r\nKPX Racute O -40\r\nKPX Racute Oacute -40\r\nKPX Racute Ocircumflex -40\r\nKPX Racute Odieresis -40\r\nKPX Racute Ograve -40\r\nKPX Racute Ohungarumlaut -40\r\nKPX Racute Omacron -40\r\nKPX Racute Oslash -40\r\nKPX Racute Otilde -40\r\nKPX Racute T -60\r\nKPX Racute Tcaron -60\r\nKPX Racute Tcommaaccent -60\r\nKPX Racute U -40\r\nKPX Racute Uacute -40\r\nKPX Racute Ucircumflex -40\r\nKPX Racute Udieresis -40\r\nKPX Racute Ugrave -40\r\nKPX Racute Uhungarumlaut -40\r\nKPX Racute Umacron -40\r\nKPX Racute Uogonek -40\r\nKPX Racute Uring -40\r\nKPX Racute V -80\r\nKPX Racute W -55\r\nKPX Racute Y -65\r\nKPX Racute Yacute -65\r\nKPX Racute Ydieresis -65\r\nKPX Rcaron O -40\r\nKPX Rcaron Oacute -40\r\nKPX Rcaron Ocircumflex -40\r\nKPX Rcaron Odieresis -40\r\nKPX Rcaron Ograve -40\r\nKPX Rcaron Ohungarumlaut -40\r\nKPX Rcaron Omacron -40\r\nKPX Rcaron Oslash -40\r\nKPX Rcaron Otilde -40\r\nKPX Rcaron T -60\r\nKPX Rcaron Tcaron -60\r\nKPX Rcaron Tcommaaccent -60\r\nKPX Rcaron U -40\r\nKPX Rcaron Uacute -40\r\nKPX Rcaron Ucircumflex -40\r\nKPX Rcaron Udieresis -40\r\nKPX Rcaron Ugrave -40\r\nKPX Rcaron Uhungarumlaut -40\r\nKPX Rcaron Umacron -40\r\nKPX Rcaron Uogonek -40\r\nKPX Rcaron Uring -40\r\nKPX Rcaron V -80\r\nKPX Rcaron W -55\r\nKPX Rcaron Y -65\r\nKPX Rcaron Yacute -65\r\nKPX Rcaron Ydieresis -65\r\nKPX Rcommaaccent O -40\r\nKPX Rcommaaccent Oacute -40\r\nKPX Rcommaaccent Ocircumflex -40\r\nKPX Rcommaaccent Odieresis -40\r\nKPX Rcommaaccent Ograve -40\r\nKPX Rcommaaccent Ohungarumlaut -40\r\nKPX Rcommaaccent Omacron -40\r\nKPX Rcommaaccent Oslash -40\r\nKPX Rcommaaccent Otilde -40\r\nKPX Rcommaaccent T -60\r\nKPX Rcommaaccent Tcaron -60\r\nKPX Rcommaaccent Tcommaaccent -60\r\nKPX Rcommaaccent U -40\r\nKPX Rcommaaccent Uacute -40\r\nKPX Rcommaaccent Ucircumflex -40\r\nKPX Rcommaaccent Udieresis -40\r\nKPX Rcommaaccent Ugrave -40\r\nKPX Rcommaaccent Uhungarumlaut -40\r\nKPX Rcommaaccent Umacron -40\r\nKPX Rcommaaccent Uogonek -40\r\nKPX Rcommaaccent Uring -40\r\nKPX Rcommaaccent V -80\r\nKPX Rcommaaccent W -55\r\nKPX Rcommaaccent Y -65\r\nKPX Rcommaaccent Yacute -65\r\nKPX Rcommaaccent Ydieresis -65\r\nKPX T A -93\r\nKPX T Aacute -93\r\nKPX T Abreve -93\r\nKPX T Acircumflex -93\r\nKPX T Adieresis -93\r\nKPX T Agrave -93\r\nKPX T Amacron -93\r\nKPX T Aogonek -93\r\nKPX T Aring -93\r\nKPX T Atilde -93\r\nKPX T O -18\r\nKPX T Oacute -18\r\nKPX T Ocircumflex -18\r\nKPX T Odieresis -18\r\nKPX T Ograve -18\r\nKPX T Ohungarumlaut -18\r\nKPX T Omacron -18\r\nKPX T Oslash -18\r\nKPX T Otilde -18\r\nKPX T a -80\r\nKPX T aacute -80\r\nKPX T abreve -80\r\nKPX T acircumflex -80\r\nKPX T adieresis -40\r\nKPX T agrave -40\r\nKPX T amacron -40\r\nKPX T aogonek -80\r\nKPX T aring -80\r\nKPX T atilde -40\r\nKPX T colon -50\r\nKPX T comma -74\r\nKPX T e -70\r\nKPX T eacute -70\r\nKPX T ecaron -70\r\nKPX T ecircumflex -70\r\nKPX T edieresis -30\r\nKPX T edotaccent -70\r\nKPX T egrave -70\r\nKPX T emacron -30\r\nKPX T eogonek -70\r\nKPX T hyphen -92\r\nKPX T i -35\r\nKPX T iacute -35\r\nKPX T iogonek -35\r\nKPX T o -80\r\nKPX T oacute -80\r\nKPX T ocircumflex -80\r\nKPX T odieresis -80\r\nKPX T ograve -80\r\nKPX T ohungarumlaut -80\r\nKPX T omacron -80\r\nKPX T oslash -80\r\nKPX T otilde -80\r\nKPX T period -74\r\nKPX T r -35\r\nKPX T racute -35\r\nKPX T rcaron -35\r\nKPX T rcommaaccent -35\r\nKPX T semicolon -55\r\nKPX T u -45\r\nKPX T uacute -45\r\nKPX T ucircumflex -45\r\nKPX T udieresis -45\r\nKPX T ugrave -45\r\nKPX T uhungarumlaut -45\r\nKPX T umacron -45\r\nKPX T uogonek -45\r\nKPX T uring -45\r\nKPX T w -80\r\nKPX T y -80\r\nKPX T yacute -80\r\nKPX T ydieresis -80\r\nKPX Tcaron A -93\r\nKPX Tcaron Aacute -93\r\nKPX Tcaron Abreve -93\r\nKPX Tcaron Acircumflex -93\r\nKPX Tcaron Adieresis -93\r\nKPX Tcaron Agrave -93\r\nKPX Tcaron Amacron -93\r\nKPX Tcaron Aogonek -93\r\nKPX Tcaron Aring -93\r\nKPX Tcaron Atilde -93\r\nKPX Tcaron O -18\r\nKPX Tcaron Oacute -18\r\nKPX Tcaron Ocircumflex -18\r\nKPX Tcaron Odieresis -18\r\nKPX Tcaron Ograve -18\r\nKPX Tcaron Ohungarumlaut -18\r\nKPX Tcaron Omacron -18\r\nKPX Tcaron Oslash -18\r\nKPX Tcaron Otilde -18\r\nKPX Tcaron a -80\r\nKPX Tcaron aacute -80\r\nKPX Tcaron abreve -80\r\nKPX Tcaron acircumflex -80\r\nKPX Tcaron adieresis -40\r\nKPX Tcaron agrave -40\r\nKPX Tcaron amacron -40\r\nKPX Tcaron aogonek -80\r\nKPX Tcaron aring -80\r\nKPX Tcaron atilde -40\r\nKPX Tcaron colon -50\r\nKPX Tcaron comma -74\r\nKPX Tcaron e -70\r\nKPX Tcaron eacute -70\r\nKPX Tcaron ecaron -70\r\nKPX Tcaron ecircumflex -30\r\nKPX Tcaron edieresis -30\r\nKPX Tcaron edotaccent -70\r\nKPX Tcaron egrave -70\r\nKPX Tcaron emacron -30\r\nKPX Tcaron eogonek -70\r\nKPX Tcaron hyphen -92\r\nKPX Tcaron i -35\r\nKPX Tcaron iacute -35\r\nKPX Tcaron iogonek -35\r\nKPX Tcaron o -80\r\nKPX Tcaron oacute -80\r\nKPX Tcaron ocircumflex -80\r\nKPX Tcaron odieresis -80\r\nKPX Tcaron ograve -80\r\nKPX Tcaron ohungarumlaut -80\r\nKPX Tcaron omacron -80\r\nKPX Tcaron oslash -80\r\nKPX Tcaron otilde -80\r\nKPX Tcaron period -74\r\nKPX Tcaron r -35\r\nKPX Tcaron racute -35\r\nKPX Tcaron rcaron -35\r\nKPX Tcaron rcommaaccent -35\r\nKPX Tcaron semicolon -55\r\nKPX Tcaron u -45\r\nKPX Tcaron uacute -45\r\nKPX Tcaron ucircumflex -45\r\nKPX Tcaron udieresis -45\r\nKPX Tcaron ugrave -45\r\nKPX Tcaron uhungarumlaut -45\r\nKPX Tcaron umacron -45\r\nKPX Tcaron uogonek -45\r\nKPX Tcaron uring -45\r\nKPX Tcaron w -80\r\nKPX Tcaron y -80\r\nKPX Tcaron yacute -80\r\nKPX Tcaron ydieresis -80\r\nKPX Tcommaaccent A -93\r\nKPX Tcommaaccent Aacute -93\r\nKPX Tcommaaccent Abreve -93\r\nKPX Tcommaaccent Acircumflex -93\r\nKPX Tcommaaccent Adieresis -93\r\nKPX Tcommaaccent Agrave -93\r\nKPX Tcommaaccent Amacron -93\r\nKPX Tcommaaccent Aogonek -93\r\nKPX Tcommaaccent Aring -93\r\nKPX Tcommaaccent Atilde -93\r\nKPX Tcommaaccent O -18\r\nKPX Tcommaaccent Oacute -18\r\nKPX Tcommaaccent Ocircumflex -18\r\nKPX Tcommaaccent Odieresis -18\r\nKPX Tcommaaccent Ograve -18\r\nKPX Tcommaaccent Ohungarumlaut -18\r\nKPX Tcommaaccent Omacron -18\r\nKPX Tcommaaccent Oslash -18\r\nKPX Tcommaaccent Otilde -18\r\nKPX Tcommaaccent a -80\r\nKPX Tcommaaccent aacute -80\r\nKPX Tcommaaccent abreve -80\r\nKPX Tcommaaccent acircumflex -80\r\nKPX Tcommaaccent adieresis -40\r\nKPX Tcommaaccent agrave -40\r\nKPX Tcommaaccent amacron -40\r\nKPX Tcommaaccent aogonek -80\r\nKPX Tcommaaccent aring -80\r\nKPX Tcommaaccent atilde -40\r\nKPX Tcommaaccent colon -50\r\nKPX Tcommaaccent comma -74\r\nKPX Tcommaaccent e -70\r\nKPX Tcommaaccent eacute -70\r\nKPX Tcommaaccent ecaron -70\r\nKPX Tcommaaccent ecircumflex -30\r\nKPX Tcommaaccent edieresis -30\r\nKPX Tcommaaccent edotaccent -70\r\nKPX Tcommaaccent egrave -30\r\nKPX Tcommaaccent emacron -70\r\nKPX Tcommaaccent eogonek -70\r\nKPX Tcommaaccent hyphen -92\r\nKPX Tcommaaccent i -35\r\nKPX Tcommaaccent iacute -35\r\nKPX Tcommaaccent iogonek -35\r\nKPX Tcommaaccent o -80\r\nKPX Tcommaaccent oacute -80\r\nKPX Tcommaaccent ocircumflex -80\r\nKPX Tcommaaccent odieresis -80\r\nKPX Tcommaaccent ograve -80\r\nKPX Tcommaaccent ohungarumlaut -80\r\nKPX Tcommaaccent omacron -80\r\nKPX Tcommaaccent oslash -80\r\nKPX Tcommaaccent otilde -80\r\nKPX Tcommaaccent period -74\r\nKPX Tcommaaccent r -35\r\nKPX Tcommaaccent racute -35\r\nKPX Tcommaaccent rcaron -35\r\nKPX Tcommaaccent rcommaaccent -35\r\nKPX Tcommaaccent semicolon -55\r\nKPX Tcommaaccent u -45\r\nKPX Tcommaaccent uacute -45\r\nKPX Tcommaaccent ucircumflex -45\r\nKPX Tcommaaccent udieresis -45\r\nKPX Tcommaaccent ugrave -45\r\nKPX Tcommaaccent uhungarumlaut -45\r\nKPX Tcommaaccent umacron -45\r\nKPX Tcommaaccent uogonek -45\r\nKPX Tcommaaccent uring -45\r\nKPX Tcommaaccent w -80\r\nKPX Tcommaaccent y -80\r\nKPX Tcommaaccent yacute -80\r\nKPX Tcommaaccent ydieresis -80\r\nKPX U A -40\r\nKPX U Aacute -40\r\nKPX U Abreve -40\r\nKPX U Acircumflex -40\r\nKPX U Adieresis -40\r\nKPX U Agrave -40\r\nKPX U Amacron -40\r\nKPX U Aogonek -40\r\nKPX U Aring -40\r\nKPX U Atilde -40\r\nKPX Uacute A -40\r\nKPX Uacute Aacute -40\r\nKPX Uacute Abreve -40\r\nKPX Uacute Acircumflex -40\r\nKPX Uacute Adieresis -40\r\nKPX Uacute Agrave -40\r\nKPX Uacute Amacron -40\r\nKPX Uacute Aogonek -40\r\nKPX Uacute Aring -40\r\nKPX Uacute Atilde -40\r\nKPX Ucircumflex A -40\r\nKPX Ucircumflex Aacute -40\r\nKPX Ucircumflex Abreve -40\r\nKPX Ucircumflex Acircumflex -40\r\nKPX Ucircumflex Adieresis -40\r\nKPX Ucircumflex Agrave -40\r\nKPX Ucircumflex Amacron -40\r\nKPX Ucircumflex Aogonek -40\r\nKPX Ucircumflex Aring -40\r\nKPX Ucircumflex Atilde -40\r\nKPX Udieresis A -40\r\nKPX Udieresis Aacute -40\r\nKPX Udieresis Abreve -40\r\nKPX Udieresis Acircumflex -40\r\nKPX Udieresis Adieresis -40\r\nKPX Udieresis Agrave -40\r\nKPX Udieresis Amacron -40\r\nKPX Udieresis Aogonek -40\r\nKPX Udieresis Aring -40\r\nKPX Udieresis Atilde -40\r\nKPX Ugrave A -40\r\nKPX Ugrave Aacute -40\r\nKPX Ugrave Abreve -40\r\nKPX Ugrave Acircumflex -40\r\nKPX Ugrave Adieresis -40\r\nKPX Ugrave Agrave -40\r\nKPX Ugrave Amacron -40\r\nKPX Ugrave Aogonek -40\r\nKPX Ugrave Aring -40\r\nKPX Ugrave Atilde -40\r\nKPX Uhungarumlaut A -40\r\nKPX Uhungarumlaut Aacute -40\r\nKPX Uhungarumlaut Abreve -40\r\nKPX Uhungarumlaut Acircumflex -40\r\nKPX Uhungarumlaut Adieresis -40\r\nKPX Uhungarumlaut Agrave -40\r\nKPX Uhungarumlaut Amacron -40\r\nKPX Uhungarumlaut Aogonek -40\r\nKPX Uhungarumlaut Aring -40\r\nKPX Uhungarumlaut Atilde -40\r\nKPX Umacron A -40\r\nKPX Umacron Aacute -40\r\nKPX Umacron Abreve -40\r\nKPX Umacron Acircumflex -40\r\nKPX Umacron Adieresis -40\r\nKPX Umacron Agrave -40\r\nKPX Umacron Amacron -40\r\nKPX Umacron Aogonek -40\r\nKPX Umacron Aring -40\r\nKPX Umacron Atilde -40\r\nKPX Uogonek A -40\r\nKPX Uogonek Aacute -40\r\nKPX Uogonek Abreve -40\r\nKPX Uogonek Acircumflex -40\r\nKPX Uogonek Adieresis -40\r\nKPX Uogonek Agrave -40\r\nKPX Uogonek Amacron -40\r\nKPX Uogonek Aogonek -40\r\nKPX Uogonek Aring -40\r\nKPX Uogonek Atilde -40\r\nKPX Uring A -40\r\nKPX Uring Aacute -40\r\nKPX Uring Abreve -40\r\nKPX Uring Acircumflex -40\r\nKPX Uring Adieresis -40\r\nKPX Uring Agrave -40\r\nKPX Uring Amacron -40\r\nKPX Uring Aogonek -40\r\nKPX Uring Aring -40\r\nKPX Uring Atilde -40\r\nKPX V A -135\r\nKPX V Aacute -135\r\nKPX V Abreve -135\r\nKPX V Acircumflex -135\r\nKPX V Adieresis -135\r\nKPX V Agrave -135\r\nKPX V Amacron -135\r\nKPX V Aogonek -135\r\nKPX V Aring -135\r\nKPX V Atilde -135\r\nKPX V G -15\r\nKPX V Gbreve -15\r\nKPX V Gcommaaccent -15\r\nKPX V O -40\r\nKPX V Oacute -40\r\nKPX V Ocircumflex -40\r\nKPX V Odieresis -40\r\nKPX V Ograve -40\r\nKPX V Ohungarumlaut -40\r\nKPX V Omacron -40\r\nKPX V Oslash -40\r\nKPX V Otilde -40\r\nKPX V a -111\r\nKPX V aacute -111\r\nKPX V abreve -111\r\nKPX V acircumflex -71\r\nKPX V adieresis -71\r\nKPX V agrave -71\r\nKPX V amacron -71\r\nKPX V aogonek -111\r\nKPX V aring -111\r\nKPX V atilde -71\r\nKPX V colon -74\r\nKPX V comma -129\r\nKPX V e -111\r\nKPX V eacute -111\r\nKPX V ecaron -71\r\nKPX V ecircumflex -71\r\nKPX V edieresis -71\r\nKPX V edotaccent -111\r\nKPX V egrave -71\r\nKPX V emacron -71\r\nKPX V eogonek -111\r\nKPX V hyphen -100\r\nKPX V i -60\r\nKPX V iacute -60\r\nKPX V icircumflex -20\r\nKPX V idieresis -20\r\nKPX V igrave -20\r\nKPX V imacron -20\r\nKPX V iogonek -60\r\nKPX V o -129\r\nKPX V oacute -129\r\nKPX V ocircumflex -129\r\nKPX V odieresis -89\r\nKPX V ograve -89\r\nKPX V ohungarumlaut -129\r\nKPX V omacron -89\r\nKPX V oslash -129\r\nKPX V otilde -89\r\nKPX V period -129\r\nKPX V semicolon -74\r\nKPX V u -75\r\nKPX V uacute -75\r\nKPX V ucircumflex -75\r\nKPX V udieresis -75\r\nKPX V ugrave -75\r\nKPX V uhungarumlaut -75\r\nKPX V umacron -75\r\nKPX V uogonek -75\r\nKPX V uring -75\r\nKPX W A -120\r\nKPX W Aacute -120\r\nKPX W Abreve -120\r\nKPX W Acircumflex -120\r\nKPX W Adieresis -120\r\nKPX W Agrave -120\r\nKPX W Amacron -120\r\nKPX W Aogonek -120\r\nKPX W Aring -120\r\nKPX W Atilde -120\r\nKPX W O -10\r\nKPX W Oacute -10\r\nKPX W Ocircumflex -10\r\nKPX W Odieresis -10\r\nKPX W Ograve -10\r\nKPX W Ohungarumlaut -10\r\nKPX W Omacron -10\r\nKPX W Oslash -10\r\nKPX W Otilde -10\r\nKPX W a -80\r\nKPX W aacute -80\r\nKPX W abreve -80\r\nKPX W acircumflex -80\r\nKPX W adieresis -80\r\nKPX W agrave -80\r\nKPX W amacron -80\r\nKPX W aogonek -80\r\nKPX W aring -80\r\nKPX W atilde -80\r\nKPX W colon -37\r\nKPX W comma -92\r\nKPX W e -80\r\nKPX W eacute -80\r\nKPX W ecaron -80\r\nKPX W ecircumflex -80\r\nKPX W edieresis -40\r\nKPX W edotaccent -80\r\nKPX W egrave -40\r\nKPX W emacron -40\r\nKPX W eogonek -80\r\nKPX W hyphen -65\r\nKPX W i -40\r\nKPX W iacute -40\r\nKPX W iogonek -40\r\nKPX W o -80\r\nKPX W oacute -80\r\nKPX W ocircumflex -80\r\nKPX W odieresis -80\r\nKPX W ograve -80\r\nKPX W ohungarumlaut -80\r\nKPX W omacron -80\r\nKPX W oslash -80\r\nKPX W otilde -80\r\nKPX W period -92\r\nKPX W semicolon -37\r\nKPX W u -50\r\nKPX W uacute -50\r\nKPX W ucircumflex -50\r\nKPX W udieresis -50\r\nKPX W ugrave -50\r\nKPX W uhungarumlaut -50\r\nKPX W umacron -50\r\nKPX W uogonek -50\r\nKPX W uring -50\r\nKPX W y -73\r\nKPX W yacute -73\r\nKPX W ydieresis -73\r\nKPX Y A -120\r\nKPX Y Aacute -120\r\nKPX Y Abreve -120\r\nKPX Y Acircumflex -120\r\nKPX Y Adieresis -120\r\nKPX Y Agrave -120\r\nKPX Y Amacron -120\r\nKPX Y Aogonek -120\r\nKPX Y Aring -120\r\nKPX Y Atilde -120\r\nKPX Y O -30\r\nKPX Y Oacute -30\r\nKPX Y Ocircumflex -30\r\nKPX Y Odieresis -30\r\nKPX Y Ograve -30\r\nKPX Y Ohungarumlaut -30\r\nKPX Y Omacron -30\r\nKPX Y Oslash -30\r\nKPX Y Otilde -30\r\nKPX Y a -100\r\nKPX Y aacute -100\r\nKPX Y abreve -100\r\nKPX Y acircumflex -100\r\nKPX Y adieresis -60\r\nKPX Y agrave -60\r\nKPX Y amacron -60\r\nKPX Y aogonek -100\r\nKPX Y aring -100\r\nKPX Y atilde -60\r\nKPX Y colon -92\r\nKPX Y comma -129\r\nKPX Y e -100\r\nKPX Y eacute -100\r\nKPX Y ecaron -100\r\nKPX Y ecircumflex -100\r\nKPX Y edieresis -60\r\nKPX Y edotaccent -100\r\nKPX Y egrave -60\r\nKPX Y emacron -60\r\nKPX Y eogonek -100\r\nKPX Y hyphen -111\r\nKPX Y i -55\r\nKPX Y iacute -55\r\nKPX Y iogonek -55\r\nKPX Y o -110\r\nKPX Y oacute -110\r\nKPX Y ocircumflex -110\r\nKPX Y odieresis -70\r\nKPX Y ograve -70\r\nKPX Y ohungarumlaut -110\r\nKPX Y omacron -70\r\nKPX Y oslash -110\r\nKPX Y otilde -70\r\nKPX Y period -129\r\nKPX Y semicolon -92\r\nKPX Y u -111\r\nKPX Y uacute -111\r\nKPX Y ucircumflex -111\r\nKPX Y udieresis -71\r\nKPX Y ugrave -71\r\nKPX Y uhungarumlaut -111\r\nKPX Y umacron -71\r\nKPX Y uogonek -111\r\nKPX Y uring -111\r\nKPX Yacute A -120\r\nKPX Yacute Aacute -120\r\nKPX Yacute Abreve -120\r\nKPX Yacute Acircumflex -120\r\nKPX Yacute Adieresis -120\r\nKPX Yacute Agrave -120\r\nKPX Yacute Amacron -120\r\nKPX Yacute Aogonek -120\r\nKPX Yacute Aring -120\r\nKPX Yacute Atilde -120\r\nKPX Yacute O -30\r\nKPX Yacute Oacute -30\r\nKPX Yacute Ocircumflex -30\r\nKPX Yacute Odieresis -30\r\nKPX Yacute Ograve -30\r\nKPX Yacute Ohungarumlaut -30\r\nKPX Yacute Omacron -30\r\nKPX Yacute Oslash -30\r\nKPX Yacute Otilde -30\r\nKPX Yacute a -100\r\nKPX Yacute aacute -100\r\nKPX Yacute abreve -100\r\nKPX Yacute acircumflex -100\r\nKPX Yacute adieresis -60\r\nKPX Yacute agrave -60\r\nKPX Yacute amacron -60\r\nKPX Yacute aogonek -100\r\nKPX Yacute aring -100\r\nKPX Yacute atilde -60\r\nKPX Yacute colon -92\r\nKPX Yacute comma -129\r\nKPX Yacute e -100\r\nKPX Yacute eacute -100\r\nKPX Yacute ecaron -100\r\nKPX Yacute ecircumflex -100\r\nKPX Yacute edieresis -60\r\nKPX Yacute edotaccent -100\r\nKPX Yacute egrave -60\r\nKPX Yacute emacron -60\r\nKPX Yacute eogonek -100\r\nKPX Yacute hyphen -111\r\nKPX Yacute i -55\r\nKPX Yacute iacute -55\r\nKPX Yacute iogonek -55\r\nKPX Yacute o -110\r\nKPX Yacute oacute -110\r\nKPX Yacute ocircumflex -110\r\nKPX Yacute odieresis -70\r\nKPX Yacute ograve -70\r\nKPX Yacute ohungarumlaut -110\r\nKPX Yacute omacron -70\r\nKPX Yacute oslash -110\r\nKPX Yacute otilde -70\r\nKPX Yacute period -129\r\nKPX Yacute semicolon -92\r\nKPX Yacute u -111\r\nKPX Yacute uacute -111\r\nKPX Yacute ucircumflex -111\r\nKPX Yacute udieresis -71\r\nKPX Yacute ugrave -71\r\nKPX Yacute uhungarumlaut -111\r\nKPX Yacute umacron -71\r\nKPX Yacute uogonek -111\r\nKPX Yacute uring -111\r\nKPX Ydieresis A -120\r\nKPX Ydieresis Aacute -120\r\nKPX Ydieresis Abreve -120\r\nKPX Ydieresis Acircumflex -120\r\nKPX Ydieresis Adieresis -120\r\nKPX Ydieresis Agrave -120\r\nKPX Ydieresis Amacron -120\r\nKPX Ydieresis Aogonek -120\r\nKPX Ydieresis Aring -120\r\nKPX Ydieresis Atilde -120\r\nKPX Ydieresis O -30\r\nKPX Ydieresis Oacute -30\r\nKPX Ydieresis Ocircumflex -30\r\nKPX Ydieresis Odieresis -30\r\nKPX Ydieresis Ograve -30\r\nKPX Ydieresis Ohungarumlaut -30\r\nKPX Ydieresis Omacron -30\r\nKPX Ydieresis Oslash -30\r\nKPX Ydieresis Otilde -30\r\nKPX Ydieresis a -100\r\nKPX Ydieresis aacute -100\r\nKPX Ydieresis abreve -100\r\nKPX Ydieresis acircumflex -100\r\nKPX Ydieresis adieresis -60\r\nKPX Ydieresis agrave -60\r\nKPX Ydieresis amacron -60\r\nKPX Ydieresis aogonek -100\r\nKPX Ydieresis aring -100\r\nKPX Ydieresis atilde -100\r\nKPX Ydieresis colon -92\r\nKPX Ydieresis comma -129\r\nKPX Ydieresis e -100\r\nKPX Ydieresis eacute -100\r\nKPX Ydieresis ecaron -100\r\nKPX Ydieresis ecircumflex -100\r\nKPX Ydieresis edieresis -60\r\nKPX Ydieresis edotaccent -100\r\nKPX Ydieresis egrave -60\r\nKPX Ydieresis emacron -60\r\nKPX Ydieresis eogonek -100\r\nKPX Ydieresis hyphen -111\r\nKPX Ydieresis i -55\r\nKPX Ydieresis iacute -55\r\nKPX Ydieresis iogonek -55\r\nKPX Ydieresis o -110\r\nKPX Ydieresis oacute -110\r\nKPX Ydieresis ocircumflex -110\r\nKPX Ydieresis odieresis -70\r\nKPX Ydieresis ograve -70\r\nKPX Ydieresis ohungarumlaut -110\r\nKPX Ydieresis omacron -70\r\nKPX Ydieresis oslash -110\r\nKPX Ydieresis otilde -70\r\nKPX Ydieresis period -129\r\nKPX Ydieresis semicolon -92\r\nKPX Ydieresis u -111\r\nKPX Ydieresis uacute -111\r\nKPX Ydieresis ucircumflex -111\r\nKPX Ydieresis udieresis -71\r\nKPX Ydieresis ugrave -71\r\nKPX Ydieresis uhungarumlaut -111\r\nKPX Ydieresis umacron -71\r\nKPX Ydieresis uogonek -111\r\nKPX Ydieresis uring -111\r\nKPX a v -20\r\nKPX a w -15\r\nKPX aacute v -20\r\nKPX aacute w -15\r\nKPX abreve v -20\r\nKPX abreve w -15\r\nKPX acircumflex v -20\r\nKPX acircumflex w -15\r\nKPX adieresis v -20\r\nKPX adieresis w -15\r\nKPX agrave v -20\r\nKPX agrave w -15\r\nKPX amacron v -20\r\nKPX amacron w -15\r\nKPX aogonek v -20\r\nKPX aogonek w -15\r\nKPX aring v -20\r\nKPX aring w -15\r\nKPX atilde v -20\r\nKPX atilde w -15\r\nKPX b period -40\r\nKPX b u -20\r\nKPX b uacute -20\r\nKPX b ucircumflex -20\r\nKPX b udieresis -20\r\nKPX b ugrave -20\r\nKPX b uhungarumlaut -20\r\nKPX b umacron -20\r\nKPX b uogonek -20\r\nKPX b uring -20\r\nKPX b v -15\r\nKPX c y -15\r\nKPX c yacute -15\r\nKPX c ydieresis -15\r\nKPX cacute y -15\r\nKPX cacute yacute -15\r\nKPX cacute ydieresis -15\r\nKPX ccaron y -15\r\nKPX ccaron yacute -15\r\nKPX ccaron ydieresis -15\r\nKPX ccedilla y -15\r\nKPX ccedilla yacute -15\r\nKPX ccedilla ydieresis -15\r\nKPX comma quotedblright -70\r\nKPX comma quoteright -70\r\nKPX e g -15\r\nKPX e gbreve -15\r\nKPX e gcommaaccent -15\r\nKPX e v -25\r\nKPX e w -25\r\nKPX e x -15\r\nKPX e y -15\r\nKPX e yacute -15\r\nKPX e ydieresis -15\r\nKPX eacute g -15\r\nKPX eacute gbreve -15\r\nKPX eacute gcommaaccent -15\r\nKPX eacute v -25\r\nKPX eacute w -25\r\nKPX eacute x -15\r\nKPX eacute y -15\r\nKPX eacute yacute -15\r\nKPX eacute ydieresis -15\r\nKPX ecaron g -15\r\nKPX ecaron gbreve -15\r\nKPX ecaron gcommaaccent -15\r\nKPX ecaron v -25\r\nKPX ecaron w -25\r\nKPX ecaron x -15\r\nKPX ecaron y -15\r\nKPX ecaron yacute -15\r\nKPX ecaron ydieresis -15\r\nKPX ecircumflex g -15\r\nKPX ecircumflex gbreve -15\r\nKPX ecircumflex gcommaaccent -15\r\nKPX ecircumflex v -25\r\nKPX ecircumflex w -25\r\nKPX ecircumflex x -15\r\nKPX ecircumflex y -15\r\nKPX ecircumflex yacute -15\r\nKPX ecircumflex ydieresis -15\r\nKPX edieresis g -15\r\nKPX edieresis gbreve -15\r\nKPX edieresis gcommaaccent -15\r\nKPX edieresis v -25\r\nKPX edieresis w -25\r\nKPX edieresis x -15\r\nKPX edieresis y -15\r\nKPX edieresis yacute -15\r\nKPX edieresis ydieresis -15\r\nKPX edotaccent g -15\r\nKPX edotaccent gbreve -15\r\nKPX edotaccent gcommaaccent -15\r\nKPX edotaccent v -25\r\nKPX edotaccent w -25\r\nKPX edotaccent x -15\r\nKPX edotaccent y -15\r\nKPX edotaccent yacute -15\r\nKPX edotaccent ydieresis -15\r\nKPX egrave g -15\r\nKPX egrave gbreve -15\r\nKPX egrave gcommaaccent -15\r\nKPX egrave v -25\r\nKPX egrave w -25\r\nKPX egrave x -15\r\nKPX egrave y -15\r\nKPX egrave yacute -15\r\nKPX egrave ydieresis -15\r\nKPX emacron g -15\r\nKPX emacron gbreve -15\r\nKPX emacron gcommaaccent -15\r\nKPX emacron v -25\r\nKPX emacron w -25\r\nKPX emacron x -15\r\nKPX emacron y -15\r\nKPX emacron yacute -15\r\nKPX emacron ydieresis -15\r\nKPX eogonek g -15\r\nKPX eogonek gbreve -15\r\nKPX eogonek gcommaaccent -15\r\nKPX eogonek v -25\r\nKPX eogonek w -25\r\nKPX eogonek x -15\r\nKPX eogonek y -15\r\nKPX eogonek yacute -15\r\nKPX eogonek ydieresis -15\r\nKPX f a -10\r\nKPX f aacute -10\r\nKPX f abreve -10\r\nKPX f acircumflex -10\r\nKPX f adieresis -10\r\nKPX f agrave -10\r\nKPX f amacron -10\r\nKPX f aogonek -10\r\nKPX f aring -10\r\nKPX f atilde -10\r\nKPX f dotlessi -50\r\nKPX f f -25\r\nKPX f i -20\r\nKPX f iacute -20\r\nKPX f quoteright 55\r\nKPX g a -5\r\nKPX g aacute -5\r\nKPX g abreve -5\r\nKPX g acircumflex -5\r\nKPX g adieresis -5\r\nKPX g agrave -5\r\nKPX g amacron -5\r\nKPX g aogonek -5\r\nKPX g aring -5\r\nKPX g atilde -5\r\nKPX gbreve a -5\r\nKPX gbreve aacute -5\r\nKPX gbreve abreve -5\r\nKPX gbreve acircumflex -5\r\nKPX gbreve adieresis -5\r\nKPX gbreve agrave -5\r\nKPX gbreve amacron -5\r\nKPX gbreve aogonek -5\r\nKPX gbreve aring -5\r\nKPX gbreve atilde -5\r\nKPX gcommaaccent a -5\r\nKPX gcommaaccent aacute -5\r\nKPX gcommaaccent abreve -5\r\nKPX gcommaaccent acircumflex -5\r\nKPX gcommaaccent adieresis -5\r\nKPX gcommaaccent agrave -5\r\nKPX gcommaaccent amacron -5\r\nKPX gcommaaccent aogonek -5\r\nKPX gcommaaccent aring -5\r\nKPX gcommaaccent atilde -5\r\nKPX h y -5\r\nKPX h yacute -5\r\nKPX h ydieresis -5\r\nKPX i v -25\r\nKPX iacute v -25\r\nKPX icircumflex v -25\r\nKPX idieresis v -25\r\nKPX igrave v -25\r\nKPX imacron v -25\r\nKPX iogonek v -25\r\nKPX k e -10\r\nKPX k eacute -10\r\nKPX k ecaron -10\r\nKPX k ecircumflex -10\r\nKPX k edieresis -10\r\nKPX k edotaccent -10\r\nKPX k egrave -10\r\nKPX k emacron -10\r\nKPX k eogonek -10\r\nKPX k o -10\r\nKPX k oacute -10\r\nKPX k ocircumflex -10\r\nKPX k odieresis -10\r\nKPX k ograve -10\r\nKPX k ohungarumlaut -10\r\nKPX k omacron -10\r\nKPX k oslash -10\r\nKPX k otilde -10\r\nKPX k y -15\r\nKPX k yacute -15\r\nKPX k ydieresis -15\r\nKPX kcommaaccent e -10\r\nKPX kcommaaccent eacute -10\r\nKPX kcommaaccent ecaron -10\r\nKPX kcommaaccent ecircumflex -10\r\nKPX kcommaaccent edieresis -10\r\nKPX kcommaaccent edotaccent -10\r\nKPX kcommaaccent egrave -10\r\nKPX kcommaaccent emacron -10\r\nKPX kcommaaccent eogonek -10\r\nKPX kcommaaccent o -10\r\nKPX kcommaaccent oacute -10\r\nKPX kcommaaccent ocircumflex -10\r\nKPX kcommaaccent odieresis -10\r\nKPX kcommaaccent ograve -10\r\nKPX kcommaaccent ohungarumlaut -10\r\nKPX kcommaaccent omacron -10\r\nKPX kcommaaccent oslash -10\r\nKPX kcommaaccent otilde -10\r\nKPX kcommaaccent y -15\r\nKPX kcommaaccent yacute -15\r\nKPX kcommaaccent ydieresis -15\r\nKPX l w -10\r\nKPX lacute w -10\r\nKPX lcommaaccent w -10\r\nKPX lslash w -10\r\nKPX n v -40\r\nKPX n y -15\r\nKPX n yacute -15\r\nKPX n ydieresis -15\r\nKPX nacute v -40\r\nKPX nacute y -15\r\nKPX nacute yacute -15\r\nKPX nacute ydieresis -15\r\nKPX ncaron v -40\r\nKPX ncaron y -15\r\nKPX ncaron yacute -15\r\nKPX ncaron ydieresis -15\r\nKPX ncommaaccent v -40\r\nKPX ncommaaccent y -15\r\nKPX ncommaaccent yacute -15\r\nKPX ncommaaccent ydieresis -15\r\nKPX ntilde v -40\r\nKPX ntilde y -15\r\nKPX ntilde yacute -15\r\nKPX ntilde ydieresis -15\r\nKPX o v -15\r\nKPX o w -25\r\nKPX o y -10\r\nKPX o yacute -10\r\nKPX o ydieresis -10\r\nKPX oacute v -15\r\nKPX oacute w -25\r\nKPX oacute y -10\r\nKPX oacute yacute -10\r\nKPX oacute ydieresis -10\r\nKPX ocircumflex v -15\r\nKPX ocircumflex w -25\r\nKPX ocircumflex y -10\r\nKPX ocircumflex yacute -10\r\nKPX ocircumflex ydieresis -10\r\nKPX odieresis v -15\r\nKPX odieresis w -25\r\nKPX odieresis y -10\r\nKPX odieresis yacute -10\r\nKPX odieresis ydieresis -10\r\nKPX ograve v -15\r\nKPX ograve w -25\r\nKPX ograve y -10\r\nKPX ograve yacute -10\r\nKPX ograve ydieresis -10\r\nKPX ohungarumlaut v -15\r\nKPX ohungarumlaut w -25\r\nKPX ohungarumlaut y -10\r\nKPX ohungarumlaut yacute -10\r\nKPX ohungarumlaut ydieresis -10\r\nKPX omacron v -15\r\nKPX omacron w -25\r\nKPX omacron y -10\r\nKPX omacron yacute -10\r\nKPX omacron ydieresis -10\r\nKPX oslash v -15\r\nKPX oslash w -25\r\nKPX oslash y -10\r\nKPX oslash yacute -10\r\nKPX oslash ydieresis -10\r\nKPX otilde v -15\r\nKPX otilde w -25\r\nKPX otilde y -10\r\nKPX otilde yacute -10\r\nKPX otilde ydieresis -10\r\nKPX p y -10\r\nKPX p yacute -10\r\nKPX p ydieresis -10\r\nKPX period quotedblright -70\r\nKPX period quoteright -70\r\nKPX quotedblleft A -80\r\nKPX quotedblleft Aacute -80\r\nKPX quotedblleft Abreve -80\r\nKPX quotedblleft Acircumflex -80\r\nKPX quotedblleft Adieresis -80\r\nKPX quotedblleft Agrave -80\r\nKPX quotedblleft Amacron -80\r\nKPX quotedblleft Aogonek -80\r\nKPX quotedblleft Aring -80\r\nKPX quotedblleft Atilde -80\r\nKPX quoteleft A -80\r\nKPX quoteleft Aacute -80\r\nKPX quoteleft Abreve -80\r\nKPX quoteleft Acircumflex -80\r\nKPX quoteleft Adieresis -80\r\nKPX quoteleft Agrave -80\r\nKPX quoteleft Amacron -80\r\nKPX quoteleft Aogonek -80\r\nKPX quoteleft Aring -80\r\nKPX quoteleft Atilde -80\r\nKPX quoteleft quoteleft -74\r\nKPX quoteright d -50\r\nKPX quoteright dcroat -50\r\nKPX quoteright l -10\r\nKPX quoteright lacute -10\r\nKPX quoteright lcommaaccent -10\r\nKPX quoteright lslash -10\r\nKPX quoteright quoteright -74\r\nKPX quoteright r -50\r\nKPX quoteright racute -50\r\nKPX quoteright rcaron -50\r\nKPX quoteright rcommaaccent -50\r\nKPX quoteright s -55\r\nKPX quoteright sacute -55\r\nKPX quoteright scaron -55\r\nKPX quoteright scedilla -55\r\nKPX quoteright scommaaccent -55\r\nKPX quoteright space -74\r\nKPX quoteright t -18\r\nKPX quoteright tcommaaccent -18\r\nKPX quoteright v -50\r\nKPX r comma -40\r\nKPX r g -18\r\nKPX r gbreve -18\r\nKPX r gcommaaccent -18\r\nKPX r hyphen -20\r\nKPX r period -55\r\nKPX racute comma -40\r\nKPX racute g -18\r\nKPX racute gbreve -18\r\nKPX racute gcommaaccent -18\r\nKPX racute hyphen -20\r\nKPX racute period -55\r\nKPX rcaron comma -40\r\nKPX rcaron g -18\r\nKPX rcaron gbreve -18\r\nKPX rcaron gcommaaccent -18\r\nKPX rcaron hyphen -20\r\nKPX rcaron period -55\r\nKPX rcommaaccent comma -40\r\nKPX rcommaaccent g -18\r\nKPX rcommaaccent gbreve -18\r\nKPX rcommaaccent gcommaaccent -18\r\nKPX rcommaaccent hyphen -20\r\nKPX rcommaaccent period -55\r\nKPX space A -55\r\nKPX space Aacute -55\r\nKPX space Abreve -55\r\nKPX space Acircumflex -55\r\nKPX space Adieresis -55\r\nKPX space Agrave -55\r\nKPX space Amacron -55\r\nKPX space Aogonek -55\r\nKPX space Aring -55\r\nKPX space Atilde -55\r\nKPX space T -18\r\nKPX space Tcaron -18\r\nKPX space Tcommaaccent -18\r\nKPX space V -50\r\nKPX space W -30\r\nKPX space Y -90\r\nKPX space Yacute -90\r\nKPX space Ydieresis -90\r\nKPX v a -25\r\nKPX v aacute -25\r\nKPX v abreve -25\r\nKPX v acircumflex -25\r\nKPX v adieresis -25\r\nKPX v agrave -25\r\nKPX v amacron -25\r\nKPX v aogonek -25\r\nKPX v aring -25\r\nKPX v atilde -25\r\nKPX v comma -65\r\nKPX v e -15\r\nKPX v eacute -15\r\nKPX v ecaron -15\r\nKPX v ecircumflex -15\r\nKPX v edieresis -15\r\nKPX v edotaccent -15\r\nKPX v egrave -15\r\nKPX v emacron -15\r\nKPX v eogonek -15\r\nKPX v o -20\r\nKPX v oacute -20\r\nKPX v ocircumflex -20\r\nKPX v odieresis -20\r\nKPX v ograve -20\r\nKPX v ohungarumlaut -20\r\nKPX v omacron -20\r\nKPX v oslash -20\r\nKPX v otilde -20\r\nKPX v period -65\r\nKPX w a -10\r\nKPX w aacute -10\r\nKPX w abreve -10\r\nKPX w acircumflex -10\r\nKPX w adieresis -10\r\nKPX w agrave -10\r\nKPX w amacron -10\r\nKPX w aogonek -10\r\nKPX w aring -10\r\nKPX w atilde -10\r\nKPX w comma -65\r\nKPX w o -10\r\nKPX w oacute -10\r\nKPX w ocircumflex -10\r\nKPX w odieresis -10\r\nKPX w ograve -10\r\nKPX w ohungarumlaut -10\r\nKPX w omacron -10\r\nKPX w oslash -10\r\nKPX w otilde -10\r\nKPX w period -65\r\nKPX x e -15\r\nKPX x eacute -15\r\nKPX x ecaron -15\r\nKPX x ecircumflex -15\r\nKPX x edieresis -15\r\nKPX x edotaccent -15\r\nKPX x egrave -15\r\nKPX x emacron -15\r\nKPX x eogonek -15\r\nKPX y comma -65\r\nKPX y period -65\r\nKPX yacute comma -65\r\nKPX yacute period -65\r\nKPX ydieresis comma -65\r\nKPX ydieresis period -65\r\nEndKernPairs\r\nEndKernData\r\nEndFontMetrics\r\n",
  'Times-Bold.afm': "StartFontMetrics 4.1\r\nComment Copyright (c) 1985, 1987, 1989, 1990, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.\r\nComment Creation Date: Thu May  1 12:52:56 1997\r\nComment UniqueID 43065\r\nComment VMusage 41636 52661\r\nFontName Times-Bold\r\nFullName Times Bold\r\nFamilyName Times\r\nWeight Bold\r\nItalicAngle 0\r\nIsFixedPitch false\r\nCharacterSet ExtendedRoman\r\nFontBBox -168 -218 1000 935 \r\nUnderlinePosition -100\r\nUnderlineThickness 50\r\nVersion 002.000\r\nNotice Copyright (c) 1985, 1987, 1989, 1990, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.Times is a trademark of Linotype-Hell AG and/or its subsidiaries.\r\nEncodingScheme AdobeStandardEncoding\r\nCapHeight 676\r\nXHeight 461\r\nAscender 683\r\nDescender -217\r\nStdHW 44\r\nStdVW 139\r\nStartCharMetrics 315\r\nC 32 ; WX 250 ; N space ; B 0 0 0 0 ;\r\nC 33 ; WX 333 ; N exclam ; B 81 -13 251 691 ;\r\nC 34 ; WX 555 ; N quotedbl ; B 83 404 472 691 ;\r\nC 35 ; WX 500 ; N numbersign ; B 4 0 496 700 ;\r\nC 36 ; WX 500 ; N dollar ; B 29 -99 472 750 ;\r\nC 37 ; WX 1000 ; N percent ; B 124 -14 877 692 ;\r\nC 38 ; WX 833 ; N ampersand ; B 62 -16 787 691 ;\r\nC 39 ; WX 333 ; N quoteright ; B 79 356 263 691 ;\r\nC 40 ; WX 333 ; N parenleft ; B 46 -168 306 694 ;\r\nC 41 ; WX 333 ; N parenright ; B 27 -168 287 694 ;\r\nC 42 ; WX 500 ; N asterisk ; B 56 255 447 691 ;\r\nC 43 ; WX 570 ; N plus ; B 33 0 537 506 ;\r\nC 44 ; WX 250 ; N comma ; B 39 -180 223 155 ;\r\nC 45 ; WX 333 ; N hyphen ; B 44 171 287 287 ;\r\nC 46 ; WX 250 ; N period ; B 41 -13 210 156 ;\r\nC 47 ; WX 278 ; N slash ; B -24 -19 302 691 ;\r\nC 48 ; WX 500 ; N zero ; B 24 -13 476 688 ;\r\nC 49 ; WX 500 ; N one ; B 65 0 442 688 ;\r\nC 50 ; WX 500 ; N two ; B 17 0 478 688 ;\r\nC 51 ; WX 500 ; N three ; B 16 -14 468 688 ;\r\nC 52 ; WX 500 ; N four ; B 19 0 475 688 ;\r\nC 53 ; WX 500 ; N five ; B 22 -8 470 676 ;\r\nC 54 ; WX 500 ; N six ; B 28 -13 475 688 ;\r\nC 55 ; WX 500 ; N seven ; B 17 0 477 676 ;\r\nC 56 ; WX 500 ; N eight ; B 28 -13 472 688 ;\r\nC 57 ; WX 500 ; N nine ; B 26 -13 473 688 ;\r\nC 58 ; WX 333 ; N colon ; B 82 -13 251 472 ;\r\nC 59 ; WX 333 ; N semicolon ; B 82 -180 266 472 ;\r\nC 60 ; WX 570 ; N less ; B 31 -8 539 514 ;\r\nC 61 ; WX 570 ; N equal ; B 33 107 537 399 ;\r\nC 62 ; WX 570 ; N greater ; B 31 -8 539 514 ;\r\nC 63 ; WX 500 ; N question ; B 57 -13 445 689 ;\r\nC 64 ; WX 930 ; N at ; B 108 -19 822 691 ;\r\nC 65 ; WX 722 ; N A ; B 9 0 689 690 ;\r\nC 66 ; WX 667 ; N B ; B 16 0 619 676 ;\r\nC 67 ; WX 722 ; N C ; B 49 -19 687 691 ;\r\nC 68 ; WX 722 ; N D ; B 14 0 690 676 ;\r\nC 69 ; WX 667 ; N E ; B 16 0 641 676 ;\r\nC 70 ; WX 611 ; N F ; B 16 0 583 676 ;\r\nC 71 ; WX 778 ; N G ; B 37 -19 755 691 ;\r\nC 72 ; WX 778 ; N H ; B 21 0 759 676 ;\r\nC 73 ; WX 389 ; N I ; B 20 0 370 676 ;\r\nC 74 ; WX 500 ; N J ; B 3 -96 479 676 ;\r\nC 75 ; WX 778 ; N K ; B 30 0 769 676 ;\r\nC 76 ; WX 667 ; N L ; B 19 0 638 676 ;\r\nC 77 ; WX 944 ; N M ; B 14 0 921 676 ;\r\nC 78 ; WX 722 ; N N ; B 16 -18 701 676 ;\r\nC 79 ; WX 778 ; N O ; B 35 -19 743 691 ;\r\nC 80 ; WX 611 ; N P ; B 16 0 600 676 ;\r\nC 81 ; WX 778 ; N Q ; B 35 -176 743 691 ;\r\nC 82 ; WX 722 ; N R ; B 26 0 715 676 ;\r\nC 83 ; WX 556 ; N S ; B 35 -19 513 692 ;\r\nC 84 ; WX 667 ; N T ; B 31 0 636 676 ;\r\nC 85 ; WX 722 ; N U ; B 16 -19 701 676 ;\r\nC 86 ; WX 722 ; N V ; B 16 -18 701 676 ;\r\nC 87 ; WX 1000 ; N W ; B 19 -15 981 676 ;\r\nC 88 ; WX 722 ; N X ; B 16 0 699 676 ;\r\nC 89 ; WX 722 ; N Y ; B 15 0 699 676 ;\r\nC 90 ; WX 667 ; N Z ; B 28 0 634 676 ;\r\nC 91 ; WX 333 ; N bracketleft ; B 67 -149 301 678 ;\r\nC 92 ; WX 278 ; N backslash ; B -25 -19 303 691 ;\r\nC 93 ; WX 333 ; N bracketright ; B 32 -149 266 678 ;\r\nC 94 ; WX 581 ; N asciicircum ; B 73 311 509 676 ;\r\nC 95 ; WX 500 ; N underscore ; B 0 -125 500 -75 ;\r\nC 96 ; WX 333 ; N quoteleft ; B 70 356 254 691 ;\r\nC 97 ; WX 500 ; N a ; B 25 -14 488 473 ;\r\nC 98 ; WX 556 ; N b ; B 17 -14 521 676 ;\r\nC 99 ; WX 444 ; N c ; B 25 -14 430 473 ;\r\nC 100 ; WX 556 ; N d ; B 25 -14 534 676 ;\r\nC 101 ; WX 444 ; N e ; B 25 -14 426 473 ;\r\nC 102 ; WX 333 ; N f ; B 14 0 389 691 ; L i fi ; L l fl ;\r\nC 103 ; WX 500 ; N g ; B 28 -206 483 473 ;\r\nC 104 ; WX 556 ; N h ; B 16 0 534 676 ;\r\nC 105 ; WX 278 ; N i ; B 16 0 255 691 ;\r\nC 106 ; WX 333 ; N j ; B -57 -203 263 691 ;\r\nC 107 ; WX 556 ; N k ; B 22 0 543 676 ;\r\nC 108 ; WX 278 ; N l ; B 16 0 255 676 ;\r\nC 109 ; WX 833 ; N m ; B 16 0 814 473 ;\r\nC 110 ; WX 556 ; N n ; B 21 0 539 473 ;\r\nC 111 ; WX 500 ; N o ; B 25 -14 476 473 ;\r\nC 112 ; WX 556 ; N p ; B 19 -205 524 473 ;\r\nC 113 ; WX 556 ; N q ; B 34 -205 536 473 ;\r\nC 114 ; WX 444 ; N r ; B 29 0 434 473 ;\r\nC 115 ; WX 389 ; N s ; B 25 -14 361 473 ;\r\nC 116 ; WX 333 ; N t ; B 20 -12 332 630 ;\r\nC 117 ; WX 556 ; N u ; B 16 -14 537 461 ;\r\nC 118 ; WX 500 ; N v ; B 21 -14 485 461 ;\r\nC 119 ; WX 722 ; N w ; B 23 -14 707 461 ;\r\nC 120 ; WX 500 ; N x ; B 12 0 484 461 ;\r\nC 121 ; WX 500 ; N y ; B 16 -205 480 461 ;\r\nC 122 ; WX 444 ; N z ; B 21 0 420 461 ;\r\nC 123 ; WX 394 ; N braceleft ; B 22 -175 340 698 ;\r\nC 124 ; WX 220 ; N bar ; B 66 -218 154 782 ;\r\nC 125 ; WX 394 ; N braceright ; B 54 -175 372 698 ;\r\nC 126 ; WX 520 ; N asciitilde ; B 29 173 491 333 ;\r\nC 161 ; WX 333 ; N exclamdown ; B 82 -203 252 501 ;\r\nC 162 ; WX 500 ; N cent ; B 53 -140 458 588 ;\r\nC 163 ; WX 500 ; N sterling ; B 21 -14 477 684 ;\r\nC 164 ; WX 167 ; N fraction ; B -168 -12 329 688 ;\r\nC 165 ; WX 500 ; N yen ; B -64 0 547 676 ;\r\nC 166 ; WX 500 ; N florin ; B 0 -155 498 706 ;\r\nC 167 ; WX 500 ; N section ; B 57 -132 443 691 ;\r\nC 168 ; WX 500 ; N currency ; B -26 61 526 613 ;\r\nC 169 ; WX 278 ; N quotesingle ; B 75 404 204 691 ;\r\nC 170 ; WX 500 ; N quotedblleft ; B 32 356 486 691 ;\r\nC 171 ; WX 500 ; N guillemotleft ; B 23 36 473 415 ;\r\nC 172 ; WX 333 ; N guilsinglleft ; B 51 36 305 415 ;\r\nC 173 ; WX 333 ; N guilsinglright ; B 28 36 282 415 ;\r\nC 174 ; WX 556 ; N fi ; B 14 0 536 691 ;\r\nC 175 ; WX 556 ; N fl ; B 14 0 536 691 ;\r\nC 177 ; WX 500 ; N endash ; B 0 181 500 271 ;\r\nC 178 ; WX 500 ; N dagger ; B 47 -134 453 691 ;\r\nC 179 ; WX 500 ; N daggerdbl ; B 45 -132 456 691 ;\r\nC 180 ; WX 250 ; N periodcentered ; B 41 248 210 417 ;\r\nC 182 ; WX 540 ; N paragraph ; B 0 -186 519 676 ;\r\nC 183 ; WX 350 ; N bullet ; B 35 198 315 478 ;\r\nC 184 ; WX 333 ; N quotesinglbase ; B 79 -180 263 155 ;\r\nC 185 ; WX 500 ; N quotedblbase ; B 14 -180 468 155 ;\r\nC 186 ; WX 500 ; N quotedblright ; B 14 356 468 691 ;\r\nC 187 ; WX 500 ; N guillemotright ; B 27 36 477 415 ;\r\nC 188 ; WX 1000 ; N ellipsis ; B 82 -13 917 156 ;\r\nC 189 ; WX 1000 ; N perthousand ; B 7 -29 995 706 ;\r\nC 191 ; WX 500 ; N questiondown ; B 55 -201 443 501 ;\r\nC 193 ; WX 333 ; N grave ; B 8 528 246 713 ;\r\nC 194 ; WX 333 ; N acute ; B 86 528 324 713 ;\r\nC 195 ; WX 333 ; N circumflex ; B -2 528 335 704 ;\r\nC 196 ; WX 333 ; N tilde ; B -16 547 349 674 ;\r\nC 197 ; WX 333 ; N macron ; B 1 565 331 637 ;\r\nC 198 ; WX 333 ; N breve ; B 15 528 318 691 ;\r\nC 199 ; WX 333 ; N dotaccent ; B 103 536 258 691 ;\r\nC 200 ; WX 333 ; N dieresis ; B -2 537 335 667 ;\r\nC 202 ; WX 333 ; N ring ; B 60 527 273 740 ;\r\nC 203 ; WX 333 ; N cedilla ; B 68 -218 294 0 ;\r\nC 205 ; WX 333 ; N hungarumlaut ; B -13 528 425 713 ;\r\nC 206 ; WX 333 ; N ogonek ; B 90 -193 319 24 ;\r\nC 207 ; WX 333 ; N caron ; B -2 528 335 704 ;\r\nC 208 ; WX 1000 ; N emdash ; B 0 181 1000 271 ;\r\nC 225 ; WX 1000 ; N AE ; B 4 0 951 676 ;\r\nC 227 ; WX 300 ; N ordfeminine ; B -1 397 301 688 ;\r\nC 232 ; WX 667 ; N Lslash ; B 19 0 638 676 ;\r\nC 233 ; WX 778 ; N Oslash ; B 35 -74 743 737 ;\r\nC 234 ; WX 1000 ; N OE ; B 22 -5 981 684 ;\r\nC 235 ; WX 330 ; N ordmasculine ; B 18 397 312 688 ;\r\nC 241 ; WX 722 ; N ae ; B 33 -14 693 473 ;\r\nC 245 ; WX 278 ; N dotlessi ; B 16 0 255 461 ;\r\nC 248 ; WX 278 ; N lslash ; B -22 0 303 676 ;\r\nC 249 ; WX 500 ; N oslash ; B 25 -92 476 549 ;\r\nC 250 ; WX 722 ; N oe ; B 22 -14 696 473 ;\r\nC 251 ; WX 556 ; N germandbls ; B 19 -12 517 691 ;\r\nC -1 ; WX 389 ; N Idieresis ; B 20 0 370 877 ;\r\nC -1 ; WX 444 ; N eacute ; B 25 -14 426 713 ;\r\nC -1 ; WX 500 ; N abreve ; B 25 -14 488 691 ;\r\nC -1 ; WX 556 ; N uhungarumlaut ; B 16 -14 557 713 ;\r\nC -1 ; WX 444 ; N ecaron ; B 25 -14 426 704 ;\r\nC -1 ; WX 722 ; N Ydieresis ; B 15 0 699 877 ;\r\nC -1 ; WX 570 ; N divide ; B 33 -31 537 537 ;\r\nC -1 ; WX 722 ; N Yacute ; B 15 0 699 923 ;\r\nC -1 ; WX 722 ; N Acircumflex ; B 9 0 689 914 ;\r\nC -1 ; WX 500 ; N aacute ; B 25 -14 488 713 ;\r\nC -1 ; WX 722 ; N Ucircumflex ; B 16 -19 701 914 ;\r\nC -1 ; WX 500 ; N yacute ; B 16 -205 480 713 ;\r\nC -1 ; WX 389 ; N scommaaccent ; B 25 -218 361 473 ;\r\nC -1 ; WX 444 ; N ecircumflex ; B 25 -14 426 704 ;\r\nC -1 ; WX 722 ; N Uring ; B 16 -19 701 935 ;\r\nC -1 ; WX 722 ; N Udieresis ; B 16 -19 701 877 ;\r\nC -1 ; WX 500 ; N aogonek ; B 25 -193 504 473 ;\r\nC -1 ; WX 722 ; N Uacute ; B 16 -19 701 923 ;\r\nC -1 ; WX 556 ; N uogonek ; B 16 -193 539 461 ;\r\nC -1 ; WX 667 ; N Edieresis ; B 16 0 641 877 ;\r\nC -1 ; WX 722 ; N Dcroat ; B 6 0 690 676 ;\r\nC -1 ; WX 250 ; N commaaccent ; B 47 -218 203 -50 ;\r\nC -1 ; WX 747 ; N copyright ; B 26 -19 721 691 ;\r\nC -1 ; WX 667 ; N Emacron ; B 16 0 641 847 ;\r\nC -1 ; WX 444 ; N ccaron ; B 25 -14 430 704 ;\r\nC -1 ; WX 500 ; N aring ; B 25 -14 488 740 ;\r\nC -1 ; WX 722 ; N Ncommaaccent ; B 16 -188 701 676 ;\r\nC -1 ; WX 278 ; N lacute ; B 16 0 297 923 ;\r\nC -1 ; WX 500 ; N agrave ; B 25 -14 488 713 ;\r\nC -1 ; WX 667 ; N Tcommaaccent ; B 31 -218 636 676 ;\r\nC -1 ; WX 722 ; N Cacute ; B 49 -19 687 923 ;\r\nC -1 ; WX 500 ; N atilde ; B 25 -14 488 674 ;\r\nC -1 ; WX 667 ; N Edotaccent ; B 16 0 641 901 ;\r\nC -1 ; WX 389 ; N scaron ; B 25 -14 363 704 ;\r\nC -1 ; WX 389 ; N scedilla ; B 25 -218 361 473 ;\r\nC -1 ; WX 278 ; N iacute ; B 16 0 289 713 ;\r\nC -1 ; WX 494 ; N lozenge ; B 10 0 484 745 ;\r\nC -1 ; WX 722 ; N Rcaron ; B 26 0 715 914 ;\r\nC -1 ; WX 778 ; N Gcommaaccent ; B 37 -218 755 691 ;\r\nC -1 ; WX 556 ; N ucircumflex ; B 16 -14 537 704 ;\r\nC -1 ; WX 500 ; N acircumflex ; B 25 -14 488 704 ;\r\nC -1 ; WX 722 ; N Amacron ; B 9 0 689 847 ;\r\nC -1 ; WX 444 ; N rcaron ; B 29 0 434 704 ;\r\nC -1 ; WX 444 ; N ccedilla ; B 25 -218 430 473 ;\r\nC -1 ; WX 667 ; N Zdotaccent ; B 28 0 634 901 ;\r\nC -1 ; WX 611 ; N Thorn ; B 16 0 600 676 ;\r\nC -1 ; WX 778 ; N Omacron ; B 35 -19 743 847 ;\r\nC -1 ; WX 722 ; N Racute ; B 26 0 715 923 ;\r\nC -1 ; WX 556 ; N Sacute ; B 35 -19 513 923 ;\r\nC -1 ; WX 672 ; N dcaron ; B 25 -14 681 682 ;\r\nC -1 ; WX 722 ; N Umacron ; B 16 -19 701 847 ;\r\nC -1 ; WX 556 ; N uring ; B 16 -14 537 740 ;\r\nC -1 ; WX 300 ; N threesuperior ; B 3 268 297 688 ;\r\nC -1 ; WX 778 ; N Ograve ; B 35 -19 743 923 ;\r\nC -1 ; WX 722 ; N Agrave ; B 9 0 689 923 ;\r\nC -1 ; WX 722 ; N Abreve ; B 9 0 689 901 ;\r\nC -1 ; WX 570 ; N multiply ; B 48 16 522 490 ;\r\nC -1 ; WX 556 ; N uacute ; B 16 -14 537 713 ;\r\nC -1 ; WX 667 ; N Tcaron ; B 31 0 636 914 ;\r\nC -1 ; WX 494 ; N partialdiff ; B 11 -21 494 750 ;\r\nC -1 ; WX 500 ; N ydieresis ; B 16 -205 480 667 ;\r\nC -1 ; WX 722 ; N Nacute ; B 16 -18 701 923 ;\r\nC -1 ; WX 278 ; N icircumflex ; B -37 0 300 704 ;\r\nC -1 ; WX 667 ; N Ecircumflex ; B 16 0 641 914 ;\r\nC -1 ; WX 500 ; N adieresis ; B 25 -14 488 667 ;\r\nC -1 ; WX 444 ; N edieresis ; B 25 -14 426 667 ;\r\nC -1 ; WX 444 ; N cacute ; B 25 -14 430 713 ;\r\nC -1 ; WX 556 ; N nacute ; B 21 0 539 713 ;\r\nC -1 ; WX 556 ; N umacron ; B 16 -14 537 637 ;\r\nC -1 ; WX 722 ; N Ncaron ; B 16 -18 701 914 ;\r\nC -1 ; WX 389 ; N Iacute ; B 20 0 370 923 ;\r\nC -1 ; WX 570 ; N plusminus ; B 33 0 537 506 ;\r\nC -1 ; WX 220 ; N brokenbar ; B 66 -143 154 707 ;\r\nC -1 ; WX 747 ; N registered ; B 26 -19 721 691 ;\r\nC -1 ; WX 778 ; N Gbreve ; B 37 -19 755 901 ;\r\nC -1 ; WX 389 ; N Idotaccent ; B 20 0 370 901 ;\r\nC -1 ; WX 600 ; N summation ; B 14 -10 585 706 ;\r\nC -1 ; WX 667 ; N Egrave ; B 16 0 641 923 ;\r\nC -1 ; WX 444 ; N racute ; B 29 0 434 713 ;\r\nC -1 ; WX 500 ; N omacron ; B 25 -14 476 637 ;\r\nC -1 ; WX 667 ; N Zacute ; B 28 0 634 923 ;\r\nC -1 ; WX 667 ; N Zcaron ; B 28 0 634 914 ;\r\nC -1 ; WX 549 ; N greaterequal ; B 26 0 523 704 ;\r\nC -1 ; WX 722 ; N Eth ; B 6 0 690 676 ;\r\nC -1 ; WX 722 ; N Ccedilla ; B 49 -218 687 691 ;\r\nC -1 ; WX 278 ; N lcommaaccent ; B 16 -218 255 676 ;\r\nC -1 ; WX 416 ; N tcaron ; B 20 -12 425 815 ;\r\nC -1 ; WX 444 ; N eogonek ; B 25 -193 426 473 ;\r\nC -1 ; WX 722 ; N Uogonek ; B 16 -193 701 676 ;\r\nC -1 ; WX 722 ; N Aacute ; B 9 0 689 923 ;\r\nC -1 ; WX 722 ; N Adieresis ; B 9 0 689 877 ;\r\nC -1 ; WX 444 ; N egrave ; B 25 -14 426 713 ;\r\nC -1 ; WX 444 ; N zacute ; B 21 0 420 713 ;\r\nC -1 ; WX 278 ; N iogonek ; B 16 -193 274 691 ;\r\nC -1 ; WX 778 ; N Oacute ; B 35 -19 743 923 ;\r\nC -1 ; WX 500 ; N oacute ; B 25 -14 476 713 ;\r\nC -1 ; WX 500 ; N amacron ; B 25 -14 488 637 ;\r\nC -1 ; WX 389 ; N sacute ; B 25 -14 361 713 ;\r\nC -1 ; WX 278 ; N idieresis ; B -37 0 300 667 ;\r\nC -1 ; WX 778 ; N Ocircumflex ; B 35 -19 743 914 ;\r\nC -1 ; WX 722 ; N Ugrave ; B 16 -19 701 923 ;\r\nC -1 ; WX 612 ; N Delta ; B 6 0 608 688 ;\r\nC -1 ; WX 556 ; N thorn ; B 19 -205 524 676 ;\r\nC -1 ; WX 300 ; N twosuperior ; B 0 275 300 688 ;\r\nC -1 ; WX 778 ; N Odieresis ; B 35 -19 743 877 ;\r\nC -1 ; WX 556 ; N mu ; B 33 -206 536 461 ;\r\nC -1 ; WX 278 ; N igrave ; B -27 0 255 713 ;\r\nC -1 ; WX 500 ; N ohungarumlaut ; B 25 -14 529 713 ;\r\nC -1 ; WX 667 ; N Eogonek ; B 16 -193 644 676 ;\r\nC -1 ; WX 556 ; N dcroat ; B 25 -14 534 676 ;\r\nC -1 ; WX 750 ; N threequarters ; B 23 -12 733 688 ;\r\nC -1 ; WX 556 ; N Scedilla ; B 35 -218 513 692 ;\r\nC -1 ; WX 394 ; N lcaron ; B 16 0 412 682 ;\r\nC -1 ; WX 778 ; N Kcommaaccent ; B 30 -218 769 676 ;\r\nC -1 ; WX 667 ; N Lacute ; B 19 0 638 923 ;\r\nC -1 ; WX 1000 ; N trademark ; B 24 271 977 676 ;\r\nC -1 ; WX 444 ; N edotaccent ; B 25 -14 426 691 ;\r\nC -1 ; WX 389 ; N Igrave ; B 20 0 370 923 ;\r\nC -1 ; WX 389 ; N Imacron ; B 20 0 370 847 ;\r\nC -1 ; WX 667 ; N Lcaron ; B 19 0 652 682 ;\r\nC -1 ; WX 750 ; N onehalf ; B -7 -12 775 688 ;\r\nC -1 ; WX 549 ; N lessequal ; B 29 0 526 704 ;\r\nC -1 ; WX 500 ; N ocircumflex ; B 25 -14 476 704 ;\r\nC -1 ; WX 556 ; N ntilde ; B 21 0 539 674 ;\r\nC -1 ; WX 722 ; N Uhungarumlaut ; B 16 -19 701 923 ;\r\nC -1 ; WX 667 ; N Eacute ; B 16 0 641 923 ;\r\nC -1 ; WX 444 ; N emacron ; B 25 -14 426 637 ;\r\nC -1 ; WX 500 ; N gbreve ; B 28 -206 483 691 ;\r\nC -1 ; WX 750 ; N onequarter ; B 28 -12 743 688 ;\r\nC -1 ; WX 556 ; N Scaron ; B 35 -19 513 914 ;\r\nC -1 ; WX 556 ; N Scommaaccent ; B 35 -218 513 692 ;\r\nC -1 ; WX 778 ; N Ohungarumlaut ; B 35 -19 743 923 ;\r\nC -1 ; WX 400 ; N degree ; B 57 402 343 688 ;\r\nC -1 ; WX 500 ; N ograve ; B 25 -14 476 713 ;\r\nC -1 ; WX 722 ; N Ccaron ; B 49 -19 687 914 ;\r\nC -1 ; WX 556 ; N ugrave ; B 16 -14 537 713 ;\r\nC -1 ; WX 549 ; N radical ; B 10 -46 512 850 ;\r\nC -1 ; WX 722 ; N Dcaron ; B 14 0 690 914 ;\r\nC -1 ; WX 444 ; N rcommaaccent ; B 29 -218 434 473 ;\r\nC -1 ; WX 722 ; N Ntilde ; B 16 -18 701 884 ;\r\nC -1 ; WX 500 ; N otilde ; B 25 -14 476 674 ;\r\nC -1 ; WX 722 ; N Rcommaaccent ; B 26 -218 715 676 ;\r\nC -1 ; WX 667 ; N Lcommaaccent ; B 19 -218 638 676 ;\r\nC -1 ; WX 722 ; N Atilde ; B 9 0 689 884 ;\r\nC -1 ; WX 722 ; N Aogonek ; B 9 -193 699 690 ;\r\nC -1 ; WX 722 ; N Aring ; B 9 0 689 935 ;\r\nC -1 ; WX 778 ; N Otilde ; B 35 -19 743 884 ;\r\nC -1 ; WX 444 ; N zdotaccent ; B 21 0 420 691 ;\r\nC -1 ; WX 667 ; N Ecaron ; B 16 0 641 914 ;\r\nC -1 ; WX 389 ; N Iogonek ; B 20 -193 370 676 ;\r\nC -1 ; WX 556 ; N kcommaaccent ; B 22 -218 543 676 ;\r\nC -1 ; WX 570 ; N minus ; B 33 209 537 297 ;\r\nC -1 ; WX 389 ; N Icircumflex ; B 20 0 370 914 ;\r\nC -1 ; WX 556 ; N ncaron ; B 21 0 539 704 ;\r\nC -1 ; WX 333 ; N tcommaaccent ; B 20 -218 332 630 ;\r\nC -1 ; WX 570 ; N logicalnot ; B 33 108 537 399 ;\r\nC -1 ; WX 500 ; N odieresis ; B 25 -14 476 667 ;\r\nC -1 ; WX 556 ; N udieresis ; B 16 -14 537 667 ;\r\nC -1 ; WX 549 ; N notequal ; B 15 -49 540 570 ;\r\nC -1 ; WX 500 ; N gcommaaccent ; B 28 -206 483 829 ;\r\nC -1 ; WX 500 ; N eth ; B 25 -14 476 691 ;\r\nC -1 ; WX 444 ; N zcaron ; B 21 0 420 704 ;\r\nC -1 ; WX 556 ; N ncommaaccent ; B 21 -218 539 473 ;\r\nC -1 ; WX 300 ; N onesuperior ; B 28 275 273 688 ;\r\nC -1 ; WX 278 ; N imacron ; B -8 0 272 637 ;\r\nC -1 ; WX 500 ; N Euro ; B 0 0 0 0 ;\r\nEndCharMetrics\r\nStartKernData\r\nStartKernPairs 2242\r\nKPX A C -55\r\nKPX A Cacute -55\r\nKPX A Ccaron -55\r\nKPX A Ccedilla -55\r\nKPX A G -55\r\nKPX A Gbreve -55\r\nKPX A Gcommaaccent -55\r\nKPX A O -45\r\nKPX A Oacute -45\r\nKPX A Ocircumflex -45\r\nKPX A Odieresis -45\r\nKPX A Ograve -45\r\nKPX A Ohungarumlaut -45\r\nKPX A Omacron -45\r\nKPX A Oslash -45\r\nKPX A Otilde -45\r\nKPX A Q -45\r\nKPX A T -95\r\nKPX A Tcaron -95\r\nKPX A Tcommaaccent -95\r\nKPX A U -50\r\nKPX A Uacute -50\r\nKPX A Ucircumflex -50\r\nKPX A Udieresis -50\r\nKPX A Ugrave -50\r\nKPX A Uhungarumlaut -50\r\nKPX A Umacron -50\r\nKPX A Uogonek -50\r\nKPX A Uring -50\r\nKPX A V -145\r\nKPX A W -130\r\nKPX A Y -100\r\nKPX A Yacute -100\r\nKPX A Ydieresis -100\r\nKPX A p -25\r\nKPX A quoteright -74\r\nKPX A u -50\r\nKPX A uacute -50\r\nKPX A ucircumflex -50\r\nKPX A udieresis -50\r\nKPX A ugrave -50\r\nKPX A uhungarumlaut -50\r\nKPX A umacron -50\r\nKPX A uogonek -50\r\nKPX A uring -50\r\nKPX A v -100\r\nKPX A w -90\r\nKPX A y -74\r\nKPX A yacute -74\r\nKPX A ydieresis -74\r\nKPX Aacute C -55\r\nKPX Aacute Cacute -55\r\nKPX Aacute Ccaron -55\r\nKPX Aacute Ccedilla -55\r\nKPX Aacute G -55\r\nKPX Aacute Gbreve -55\r\nKPX Aacute Gcommaaccent -55\r\nKPX Aacute O -45\r\nKPX Aacute Oacute -45\r\nKPX Aacute Ocircumflex -45\r\nKPX Aacute Odieresis -45\r\nKPX Aacute Ograve -45\r\nKPX Aacute Ohungarumlaut -45\r\nKPX Aacute Omacron -45\r\nKPX Aacute Oslash -45\r\nKPX Aacute Otilde -45\r\nKPX Aacute Q -45\r\nKPX Aacute T -95\r\nKPX Aacute Tcaron -95\r\nKPX Aacute Tcommaaccent -95\r\nKPX Aacute U -50\r\nKPX Aacute Uacute -50\r\nKPX Aacute Ucircumflex -50\r\nKPX Aacute Udieresis -50\r\nKPX Aacute Ugrave -50\r\nKPX Aacute Uhungarumlaut -50\r\nKPX Aacute Umacron -50\r\nKPX Aacute Uogonek -50\r\nKPX Aacute Uring -50\r\nKPX Aacute V -145\r\nKPX Aacute W -130\r\nKPX Aacute Y -100\r\nKPX Aacute Yacute -100\r\nKPX Aacute Ydieresis -100\r\nKPX Aacute p -25\r\nKPX Aacute quoteright -74\r\nKPX Aacute u -50\r\nKPX Aacute uacute -50\r\nKPX Aacute ucircumflex -50\r\nKPX Aacute udieresis -50\r\nKPX Aacute ugrave -50\r\nKPX Aacute uhungarumlaut -50\r\nKPX Aacute umacron -50\r\nKPX Aacute uogonek -50\r\nKPX Aacute uring -50\r\nKPX Aacute v -100\r\nKPX Aacute w -90\r\nKPX Aacute y -74\r\nKPX Aacute yacute -74\r\nKPX Aacute ydieresis -74\r\nKPX Abreve C -55\r\nKPX Abreve Cacute -55\r\nKPX Abreve Ccaron -55\r\nKPX Abreve Ccedilla -55\r\nKPX Abreve G -55\r\nKPX Abreve Gbreve -55\r\nKPX Abreve Gcommaaccent -55\r\nKPX Abreve O -45\r\nKPX Abreve Oacute -45\r\nKPX Abreve Ocircumflex -45\r\nKPX Abreve Odieresis -45\r\nKPX Abreve Ograve -45\r\nKPX Abreve Ohungarumlaut -45\r\nKPX Abreve Omacron -45\r\nKPX Abreve Oslash -45\r\nKPX Abreve Otilde -45\r\nKPX Abreve Q -45\r\nKPX Abreve T -95\r\nKPX Abreve Tcaron -95\r\nKPX Abreve Tcommaaccent -95\r\nKPX Abreve U -50\r\nKPX Abreve Uacute -50\r\nKPX Abreve Ucircumflex -50\r\nKPX Abreve Udieresis -50\r\nKPX Abreve Ugrave -50\r\nKPX Abreve Uhungarumlaut -50\r\nKPX Abreve Umacron -50\r\nKPX Abreve Uogonek -50\r\nKPX Abreve Uring -50\r\nKPX Abreve V -145\r\nKPX Abreve W -130\r\nKPX Abreve Y -100\r\nKPX Abreve Yacute -100\r\nKPX Abreve Ydieresis -100\r\nKPX Abreve p -25\r\nKPX Abreve quoteright -74\r\nKPX Abreve u -50\r\nKPX Abreve uacute -50\r\nKPX Abreve ucircumflex -50\r\nKPX Abreve udieresis -50\r\nKPX Abreve ugrave -50\r\nKPX Abreve uhungarumlaut -50\r\nKPX Abreve umacron -50\r\nKPX Abreve uogonek -50\r\nKPX Abreve uring -50\r\nKPX Abreve v -100\r\nKPX Abreve w -90\r\nKPX Abreve y -74\r\nKPX Abreve yacute -74\r\nKPX Abreve ydieresis -74\r\nKPX Acircumflex C -55\r\nKPX Acircumflex Cacute -55\r\nKPX Acircumflex Ccaron -55\r\nKPX Acircumflex Ccedilla -55\r\nKPX Acircumflex G -55\r\nKPX Acircumflex Gbreve -55\r\nKPX Acircumflex Gcommaaccent -55\r\nKPX Acircumflex O -45\r\nKPX Acircumflex Oacute -45\r\nKPX Acircumflex Ocircumflex -45\r\nKPX Acircumflex Odieresis -45\r\nKPX Acircumflex Ograve -45\r\nKPX Acircumflex Ohungarumlaut -45\r\nKPX Acircumflex Omacron -45\r\nKPX Acircumflex Oslash -45\r\nKPX Acircumflex Otilde -45\r\nKPX Acircumflex Q -45\r\nKPX Acircumflex T -95\r\nKPX Acircumflex Tcaron -95\r\nKPX Acircumflex Tcommaaccent -95\r\nKPX Acircumflex U -50\r\nKPX Acircumflex Uacute -50\r\nKPX Acircumflex Ucircumflex -50\r\nKPX Acircumflex Udieresis -50\r\nKPX Acircumflex Ugrave -50\r\nKPX Acircumflex Uhungarumlaut -50\r\nKPX Acircumflex Umacron -50\r\nKPX Acircumflex Uogonek -50\r\nKPX Acircumflex Uring -50\r\nKPX Acircumflex V -145\r\nKPX Acircumflex W -130\r\nKPX Acircumflex Y -100\r\nKPX Acircumflex Yacute -100\r\nKPX Acircumflex Ydieresis -100\r\nKPX Acircumflex p -25\r\nKPX Acircumflex quoteright -74\r\nKPX Acircumflex u -50\r\nKPX Acircumflex uacute -50\r\nKPX Acircumflex ucircumflex -50\r\nKPX Acircumflex udieresis -50\r\nKPX Acircumflex ugrave -50\r\nKPX Acircumflex uhungarumlaut -50\r\nKPX Acircumflex umacron -50\r\nKPX Acircumflex uogonek -50\r\nKPX Acircumflex uring -50\r\nKPX Acircumflex v -100\r\nKPX Acircumflex w -90\r\nKPX Acircumflex y -74\r\nKPX Acircumflex yacute -74\r\nKPX Acircumflex ydieresis -74\r\nKPX Adieresis C -55\r\nKPX Adieresis Cacute -55\r\nKPX Adieresis Ccaron -55\r\nKPX Adieresis Ccedilla -55\r\nKPX Adieresis G -55\r\nKPX Adieresis Gbreve -55\r\nKPX Adieresis Gcommaaccent -55\r\nKPX Adieresis O -45\r\nKPX Adieresis Oacute -45\r\nKPX Adieresis Ocircumflex -45\r\nKPX Adieresis Odieresis -45\r\nKPX Adieresis Ograve -45\r\nKPX Adieresis Ohungarumlaut -45\r\nKPX Adieresis Omacron -45\r\nKPX Adieresis Oslash -45\r\nKPX Adieresis Otilde -45\r\nKPX Adieresis Q -45\r\nKPX Adieresis T -95\r\nKPX Adieresis Tcaron -95\r\nKPX Adieresis Tcommaaccent -95\r\nKPX Adieresis U -50\r\nKPX Adieresis Uacute -50\r\nKPX Adieresis Ucircumflex -50\r\nKPX Adieresis Udieresis -50\r\nKPX Adieresis Ugrave -50\r\nKPX Adieresis Uhungarumlaut -50\r\nKPX Adieresis Umacron -50\r\nKPX Adieresis Uogonek -50\r\nKPX Adieresis Uring -50\r\nKPX Adieresis V -145\r\nKPX Adieresis W -130\r\nKPX Adieresis Y -100\r\nKPX Adieresis Yacute -100\r\nKPX Adieresis Ydieresis -100\r\nKPX Adieresis p -25\r\nKPX Adieresis quoteright -74\r\nKPX Adieresis u -50\r\nKPX Adieresis uacute -50\r\nKPX Adieresis ucircumflex -50\r\nKPX Adieresis udieresis -50\r\nKPX Adieresis ugrave -50\r\nKPX Adieresis uhungarumlaut -50\r\nKPX Adieresis umacron -50\r\nKPX Adieresis uogonek -50\r\nKPX Adieresis uring -50\r\nKPX Adieresis v -100\r\nKPX Adieresis w -90\r\nKPX Adieresis y -74\r\nKPX Adieresis yacute -74\r\nKPX Adieresis ydieresis -74\r\nKPX Agrave C -55\r\nKPX Agrave Cacute -55\r\nKPX Agrave Ccaron -55\r\nKPX Agrave Ccedilla -55\r\nKPX Agrave G -55\r\nKPX Agrave Gbreve -55\r\nKPX Agrave Gcommaaccent -55\r\nKPX Agrave O -45\r\nKPX Agrave Oacute -45\r\nKPX Agrave Ocircumflex -45\r\nKPX Agrave Odieresis -45\r\nKPX Agrave Ograve -45\r\nKPX Agrave Ohungarumlaut -45\r\nKPX Agrave Omacron -45\r\nKPX Agrave Oslash -45\r\nKPX Agrave Otilde -45\r\nKPX Agrave Q -45\r\nKPX Agrave T -95\r\nKPX Agrave Tcaron -95\r\nKPX Agrave Tcommaaccent -95\r\nKPX Agrave U -50\r\nKPX Agrave Uacute -50\r\nKPX Agrave Ucircumflex -50\r\nKPX Agrave Udieresis -50\r\nKPX Agrave Ugrave -50\r\nKPX Agrave Uhungarumlaut -50\r\nKPX Agrave Umacron -50\r\nKPX Agrave Uogonek -50\r\nKPX Agrave Uring -50\r\nKPX Agrave V -145\r\nKPX Agrave W -130\r\nKPX Agrave Y -100\r\nKPX Agrave Yacute -100\r\nKPX Agrave Ydieresis -100\r\nKPX Agrave p -25\r\nKPX Agrave quoteright -74\r\nKPX Agrave u -50\r\nKPX Agrave uacute -50\r\nKPX Agrave ucircumflex -50\r\nKPX Agrave udieresis -50\r\nKPX Agrave ugrave -50\r\nKPX Agrave uhungarumlaut -50\r\nKPX Agrave umacron -50\r\nKPX Agrave uogonek -50\r\nKPX Agrave uring -50\r\nKPX Agrave v -100\r\nKPX Agrave w -90\r\nKPX Agrave y -74\r\nKPX Agrave yacute -74\r\nKPX Agrave ydieresis -74\r\nKPX Amacron C -55\r\nKPX Amacron Cacute -55\r\nKPX Amacron Ccaron -55\r\nKPX Amacron Ccedilla -55\r\nKPX Amacron G -55\r\nKPX Amacron Gbreve -55\r\nKPX Amacron Gcommaaccent -55\r\nKPX Amacron O -45\r\nKPX Amacron Oacute -45\r\nKPX Amacron Ocircumflex -45\r\nKPX Amacron Odieresis -45\r\nKPX Amacron Ograve -45\r\nKPX Amacron Ohungarumlaut -45\r\nKPX Amacron Omacron -45\r\nKPX Amacron Oslash -45\r\nKPX Amacron Otilde -45\r\nKPX Amacron Q -45\r\nKPX Amacron T -95\r\nKPX Amacron Tcaron -95\r\nKPX Amacron Tcommaaccent -95\r\nKPX Amacron U -50\r\nKPX Amacron Uacute -50\r\nKPX Amacron Ucircumflex -50\r\nKPX Amacron Udieresis -50\r\nKPX Amacron Ugrave -50\r\nKPX Amacron Uhungarumlaut -50\r\nKPX Amacron Umacron -50\r\nKPX Amacron Uogonek -50\r\nKPX Amacron Uring -50\r\nKPX Amacron V -145\r\nKPX Amacron W -130\r\nKPX Amacron Y -100\r\nKPX Amacron Yacute -100\r\nKPX Amacron Ydieresis -100\r\nKPX Amacron p -25\r\nKPX Amacron quoteright -74\r\nKPX Amacron u -50\r\nKPX Amacron uacute -50\r\nKPX Amacron ucircumflex -50\r\nKPX Amacron udieresis -50\r\nKPX Amacron ugrave -50\r\nKPX Amacron uhungarumlaut -50\r\nKPX Amacron umacron -50\r\nKPX Amacron uogonek -50\r\nKPX Amacron uring -50\r\nKPX Amacron v -100\r\nKPX Amacron w -90\r\nKPX Amacron y -74\r\nKPX Amacron yacute -74\r\nKPX Amacron ydieresis -74\r\nKPX Aogonek C -55\r\nKPX Aogonek Cacute -55\r\nKPX Aogonek Ccaron -55\r\nKPX Aogonek Ccedilla -55\r\nKPX Aogonek G -55\r\nKPX Aogonek Gbreve -55\r\nKPX Aogonek Gcommaaccent -55\r\nKPX Aogonek O -45\r\nKPX Aogonek Oacute -45\r\nKPX Aogonek Ocircumflex -45\r\nKPX Aogonek Odieresis -45\r\nKPX Aogonek Ograve -45\r\nKPX Aogonek Ohungarumlaut -45\r\nKPX Aogonek Omacron -45\r\nKPX Aogonek Oslash -45\r\nKPX Aogonek Otilde -45\r\nKPX Aogonek Q -45\r\nKPX Aogonek T -95\r\nKPX Aogonek Tcaron -95\r\nKPX Aogonek Tcommaaccent -95\r\nKPX Aogonek U -50\r\nKPX Aogonek Uacute -50\r\nKPX Aogonek Ucircumflex -50\r\nKPX Aogonek Udieresis -50\r\nKPX Aogonek Ugrave -50\r\nKPX Aogonek Uhungarumlaut -50\r\nKPX Aogonek Umacron -50\r\nKPX Aogonek Uogonek -50\r\nKPX Aogonek Uring -50\r\nKPX Aogonek V -145\r\nKPX Aogonek W -130\r\nKPX Aogonek Y -100\r\nKPX Aogonek Yacute -100\r\nKPX Aogonek Ydieresis -100\r\nKPX Aogonek p -25\r\nKPX Aogonek quoteright -74\r\nKPX Aogonek u -50\r\nKPX Aogonek uacute -50\r\nKPX Aogonek ucircumflex -50\r\nKPX Aogonek udieresis -50\r\nKPX Aogonek ugrave -50\r\nKPX Aogonek uhungarumlaut -50\r\nKPX Aogonek umacron -50\r\nKPX Aogonek uogonek -50\r\nKPX Aogonek uring -50\r\nKPX Aogonek v -100\r\nKPX Aogonek w -90\r\nKPX Aogonek y -34\r\nKPX Aogonek yacute -34\r\nKPX Aogonek ydieresis -34\r\nKPX Aring C -55\r\nKPX Aring Cacute -55\r\nKPX Aring Ccaron -55\r\nKPX Aring Ccedilla -55\r\nKPX Aring G -55\r\nKPX Aring Gbreve -55\r\nKPX Aring Gcommaaccent -55\r\nKPX Aring O -45\r\nKPX Aring Oacute -45\r\nKPX Aring Ocircumflex -45\r\nKPX Aring Odieresis -45\r\nKPX Aring Ograve -45\r\nKPX Aring Ohungarumlaut -45\r\nKPX Aring Omacron -45\r\nKPX Aring Oslash -45\r\nKPX Aring Otilde -45\r\nKPX Aring Q -45\r\nKPX Aring T -95\r\nKPX Aring Tcaron -95\r\nKPX Aring Tcommaaccent -95\r\nKPX Aring U -50\r\nKPX Aring Uacute -50\r\nKPX Aring Ucircumflex -50\r\nKPX Aring Udieresis -50\r\nKPX Aring Ugrave -50\r\nKPX Aring Uhungarumlaut -50\r\nKPX Aring Umacron -50\r\nKPX Aring Uogonek -50\r\nKPX Aring Uring -50\r\nKPX Aring V -145\r\nKPX Aring W -130\r\nKPX Aring Y -100\r\nKPX Aring Yacute -100\r\nKPX Aring Ydieresis -100\r\nKPX Aring p -25\r\nKPX Aring quoteright -74\r\nKPX Aring u -50\r\nKPX Aring uacute -50\r\nKPX Aring ucircumflex -50\r\nKPX Aring udieresis -50\r\nKPX Aring ugrave -50\r\nKPX Aring uhungarumlaut -50\r\nKPX Aring umacron -50\r\nKPX Aring uogonek -50\r\nKPX Aring uring -50\r\nKPX Aring v -100\r\nKPX Aring w -90\r\nKPX Aring y -74\r\nKPX Aring yacute -74\r\nKPX Aring ydieresis -74\r\nKPX Atilde C -55\r\nKPX Atilde Cacute -55\r\nKPX Atilde Ccaron -55\r\nKPX Atilde Ccedilla -55\r\nKPX Atilde G -55\r\nKPX Atilde Gbreve -55\r\nKPX Atilde Gcommaaccent -55\r\nKPX Atilde O -45\r\nKPX Atilde Oacute -45\r\nKPX Atilde Ocircumflex -45\r\nKPX Atilde Odieresis -45\r\nKPX Atilde Ograve -45\r\nKPX Atilde Ohungarumlaut -45\r\nKPX Atilde Omacron -45\r\nKPX Atilde Oslash -45\r\nKPX Atilde Otilde -45\r\nKPX Atilde Q -45\r\nKPX Atilde T -95\r\nKPX Atilde Tcaron -95\r\nKPX Atilde Tcommaaccent -95\r\nKPX Atilde U -50\r\nKPX Atilde Uacute -50\r\nKPX Atilde Ucircumflex -50\r\nKPX Atilde Udieresis -50\r\nKPX Atilde Ugrave -50\r\nKPX Atilde Uhungarumlaut -50\r\nKPX Atilde Umacron -50\r\nKPX Atilde Uogonek -50\r\nKPX Atilde Uring -50\r\nKPX Atilde V -145\r\nKPX Atilde W -130\r\nKPX Atilde Y -100\r\nKPX Atilde Yacute -100\r\nKPX Atilde Ydieresis -100\r\nKPX Atilde p -25\r\nKPX Atilde quoteright -74\r\nKPX Atilde u -50\r\nKPX Atilde uacute -50\r\nKPX Atilde ucircumflex -50\r\nKPX Atilde udieresis -50\r\nKPX Atilde ugrave -50\r\nKPX Atilde uhungarumlaut -50\r\nKPX Atilde umacron -50\r\nKPX Atilde uogonek -50\r\nKPX Atilde uring -50\r\nKPX Atilde v -100\r\nKPX Atilde w -90\r\nKPX Atilde y -74\r\nKPX Atilde yacute -74\r\nKPX Atilde ydieresis -74\r\nKPX B A -30\r\nKPX B Aacute -30\r\nKPX B Abreve -30\r\nKPX B Acircumflex -30\r\nKPX B Adieresis -30\r\nKPX B Agrave -30\r\nKPX B Amacron -30\r\nKPX B Aogonek -30\r\nKPX B Aring -30\r\nKPX B Atilde -30\r\nKPX B U -10\r\nKPX B Uacute -10\r\nKPX B Ucircumflex -10\r\nKPX B Udieresis -10\r\nKPX B Ugrave -10\r\nKPX B Uhungarumlaut -10\r\nKPX B Umacron -10\r\nKPX B Uogonek -10\r\nKPX B Uring -10\r\nKPX D A -35\r\nKPX D Aacute -35\r\nKPX D Abreve -35\r\nKPX D Acircumflex -35\r\nKPX D Adieresis -35\r\nKPX D Agrave -35\r\nKPX D Amacron -35\r\nKPX D Aogonek -35\r\nKPX D Aring -35\r\nKPX D Atilde -35\r\nKPX D V -40\r\nKPX D W -40\r\nKPX D Y -40\r\nKPX D Yacute -40\r\nKPX D Ydieresis -40\r\nKPX D period -20\r\nKPX Dcaron A -35\r\nKPX Dcaron Aacute -35\r\nKPX Dcaron Abreve -35\r\nKPX Dcaron Acircumflex -35\r\nKPX Dcaron Adieresis -35\r\nKPX Dcaron Agrave -35\r\nKPX Dcaron Amacron -35\r\nKPX Dcaron Aogonek -35\r\nKPX Dcaron Aring -35\r\nKPX Dcaron Atilde -35\r\nKPX Dcaron V -40\r\nKPX Dcaron W -40\r\nKPX Dcaron Y -40\r\nKPX Dcaron Yacute -40\r\nKPX Dcaron Ydieresis -40\r\nKPX Dcaron period -20\r\nKPX Dcroat A -35\r\nKPX Dcroat Aacute -35\r\nKPX Dcroat Abreve -35\r\nKPX Dcroat Acircumflex -35\r\nKPX Dcroat Adieresis -35\r\nKPX Dcroat Agrave -35\r\nKPX Dcroat Amacron -35\r\nKPX Dcroat Aogonek -35\r\nKPX Dcroat Aring -35\r\nKPX Dcroat Atilde -35\r\nKPX Dcroat V -40\r\nKPX Dcroat W -40\r\nKPX Dcroat Y -40\r\nKPX Dcroat Yacute -40\r\nKPX Dcroat Ydieresis -40\r\nKPX Dcroat period -20\r\nKPX F A -90\r\nKPX F Aacute -90\r\nKPX F Abreve -90\r\nKPX F Acircumflex -90\r\nKPX F Adieresis -90\r\nKPX F Agrave -90\r\nKPX F Amacron -90\r\nKPX F Aogonek -90\r\nKPX F Aring -90\r\nKPX F Atilde -90\r\nKPX F a -25\r\nKPX F aacute -25\r\nKPX F abreve -25\r\nKPX F acircumflex -25\r\nKPX F adieresis -25\r\nKPX F agrave -25\r\nKPX F amacron -25\r\nKPX F aogonek -25\r\nKPX F aring -25\r\nKPX F atilde -25\r\nKPX F comma -92\r\nKPX F e -25\r\nKPX F eacute -25\r\nKPX F ecaron -25\r\nKPX F ecircumflex -25\r\nKPX F edieresis -25\r\nKPX F edotaccent -25\r\nKPX F egrave -25\r\nKPX F emacron -25\r\nKPX F eogonek -25\r\nKPX F o -25\r\nKPX F oacute -25\r\nKPX F ocircumflex -25\r\nKPX F odieresis -25\r\nKPX F ograve -25\r\nKPX F ohungarumlaut -25\r\nKPX F omacron -25\r\nKPX F oslash -25\r\nKPX F otilde -25\r\nKPX F period -110\r\nKPX J A -30\r\nKPX J Aacute -30\r\nKPX J Abreve -30\r\nKPX J Acircumflex -30\r\nKPX J Adieresis -30\r\nKPX J Agrave -30\r\nKPX J Amacron -30\r\nKPX J Aogonek -30\r\nKPX J Aring -30\r\nKPX J Atilde -30\r\nKPX J a -15\r\nKPX J aacute -15\r\nKPX J abreve -15\r\nKPX J acircumflex -15\r\nKPX J adieresis -15\r\nKPX J agrave -15\r\nKPX J amacron -15\r\nKPX J aogonek -15\r\nKPX J aring -15\r\nKPX J atilde -15\r\nKPX J e -15\r\nKPX J eacute -15\r\nKPX J ecaron -15\r\nKPX J ecircumflex -15\r\nKPX J edieresis -15\r\nKPX J edotaccent -15\r\nKPX J egrave -15\r\nKPX J emacron -15\r\nKPX J eogonek -15\r\nKPX J o -15\r\nKPX J oacute -15\r\nKPX J ocircumflex -15\r\nKPX J odieresis -15\r\nKPX J ograve -15\r\nKPX J ohungarumlaut -15\r\nKPX J omacron -15\r\nKPX J oslash -15\r\nKPX J otilde -15\r\nKPX J period -20\r\nKPX J u -15\r\nKPX J uacute -15\r\nKPX J ucircumflex -15\r\nKPX J udieresis -15\r\nKPX J ugrave -15\r\nKPX J uhungarumlaut -15\r\nKPX J umacron -15\r\nKPX J uogonek -15\r\nKPX J uring -15\r\nKPX K O -30\r\nKPX K Oacute -30\r\nKPX K Ocircumflex -30\r\nKPX K Odieresis -30\r\nKPX K Ograve -30\r\nKPX K Ohungarumlaut -30\r\nKPX K Omacron -30\r\nKPX K Oslash -30\r\nKPX K Otilde -30\r\nKPX K e -25\r\nKPX K eacute -25\r\nKPX K ecaron -25\r\nKPX K ecircumflex -25\r\nKPX K edieresis -25\r\nKPX K edotaccent -25\r\nKPX K egrave -25\r\nKPX K emacron -25\r\nKPX K eogonek -25\r\nKPX K o -25\r\nKPX K oacute -25\r\nKPX K ocircumflex -25\r\nKPX K odieresis -25\r\nKPX K ograve -25\r\nKPX K ohungarumlaut -25\r\nKPX K omacron -25\r\nKPX K oslash -25\r\nKPX K otilde -25\r\nKPX K u -15\r\nKPX K uacute -15\r\nKPX K ucircumflex -15\r\nKPX K udieresis -15\r\nKPX K ugrave -15\r\nKPX K uhungarumlaut -15\r\nKPX K umacron -15\r\nKPX K uogonek -15\r\nKPX K uring -15\r\nKPX K y -45\r\nKPX K yacute -45\r\nKPX K ydieresis -45\r\nKPX Kcommaaccent O -30\r\nKPX Kcommaaccent Oacute -30\r\nKPX Kcommaaccent Ocircumflex -30\r\nKPX Kcommaaccent Odieresis -30\r\nKPX Kcommaaccent Ograve -30\r\nKPX Kcommaaccent Ohungarumlaut -30\r\nKPX Kcommaaccent Omacron -30\r\nKPX Kcommaaccent Oslash -30\r\nKPX Kcommaaccent Otilde -30\r\nKPX Kcommaaccent e -25\r\nKPX Kcommaaccent eacute -25\r\nKPX Kcommaaccent ecaron -25\r\nKPX Kcommaaccent ecircumflex -25\r\nKPX Kcommaaccent edieresis -25\r\nKPX Kcommaaccent edotaccent -25\r\nKPX Kcommaaccent egrave -25\r\nKPX Kcommaaccent emacron -25\r\nKPX Kcommaaccent eogonek -25\r\nKPX Kcommaaccent o -25\r\nKPX Kcommaaccent oacute -25\r\nKPX Kcommaaccent ocircumflex -25\r\nKPX Kcommaaccent odieresis -25\r\nKPX Kcommaaccent ograve -25\r\nKPX Kcommaaccent ohungarumlaut -25\r\nKPX Kcommaaccent omacron -25\r\nKPX Kcommaaccent oslash -25\r\nKPX Kcommaaccent otilde -25\r\nKPX Kcommaaccent u -15\r\nKPX Kcommaaccent uacute -15\r\nKPX Kcommaaccent ucircumflex -15\r\nKPX Kcommaaccent udieresis -15\r\nKPX Kcommaaccent ugrave -15\r\nKPX Kcommaaccent uhungarumlaut -15\r\nKPX Kcommaaccent umacron -15\r\nKPX Kcommaaccent uogonek -15\r\nKPX Kcommaaccent uring -15\r\nKPX Kcommaaccent y -45\r\nKPX Kcommaaccent yacute -45\r\nKPX Kcommaaccent ydieresis -45\r\nKPX L T -92\r\nKPX L Tcaron -92\r\nKPX L Tcommaaccent -92\r\nKPX L V -92\r\nKPX L W -92\r\nKPX L Y -92\r\nKPX L Yacute -92\r\nKPX L Ydieresis -92\r\nKPX L quotedblright -20\r\nKPX L quoteright -110\r\nKPX L y -55\r\nKPX L yacute -55\r\nKPX L ydieresis -55\r\nKPX Lacute T -92\r\nKPX Lacute Tcaron -92\r\nKPX Lacute Tcommaaccent -92\r\nKPX Lacute V -92\r\nKPX Lacute W -92\r\nKPX Lacute Y -92\r\nKPX Lacute Yacute -92\r\nKPX Lacute Ydieresis -92\r\nKPX Lacute quotedblright -20\r\nKPX Lacute quoteright -110\r\nKPX Lacute y -55\r\nKPX Lacute yacute -55\r\nKPX Lacute ydieresis -55\r\nKPX Lcommaaccent T -92\r\nKPX Lcommaaccent Tcaron -92\r\nKPX Lcommaaccent Tcommaaccent -92\r\nKPX Lcommaaccent V -92\r\nKPX Lcommaaccent W -92\r\nKPX Lcommaaccent Y -92\r\nKPX Lcommaaccent Yacute -92\r\nKPX Lcommaaccent Ydieresis -92\r\nKPX Lcommaaccent quotedblright -20\r\nKPX Lcommaaccent quoteright -110\r\nKPX Lcommaaccent y -55\r\nKPX Lcommaaccent yacute -55\r\nKPX Lcommaaccent ydieresis -55\r\nKPX Lslash T -92\r\nKPX Lslash Tcaron -92\r\nKPX Lslash Tcommaaccent -92\r\nKPX Lslash V -92\r\nKPX Lslash W -92\r\nKPX Lslash Y -92\r\nKPX Lslash Yacute -92\r\nKPX Lslash Ydieresis -92\r\nKPX Lslash quotedblright -20\r\nKPX Lslash quoteright -110\r\nKPX Lslash y -55\r\nKPX Lslash yacute -55\r\nKPX Lslash ydieresis -55\r\nKPX N A -20\r\nKPX N Aacute -20\r\nKPX N Abreve -20\r\nKPX N Acircumflex -20\r\nKPX N Adieresis -20\r\nKPX N Agrave -20\r\nKPX N Amacron -20\r\nKPX N Aogonek -20\r\nKPX N Aring -20\r\nKPX N Atilde -20\r\nKPX Nacute A -20\r\nKPX Nacute Aacute -20\r\nKPX Nacute Abreve -20\r\nKPX Nacute Acircumflex -20\r\nKPX Nacute Adieresis -20\r\nKPX Nacute Agrave -20\r\nKPX Nacute Amacron -20\r\nKPX Nacute Aogonek -20\r\nKPX Nacute Aring -20\r\nKPX Nacute Atilde -20\r\nKPX Ncaron A -20\r\nKPX Ncaron Aacute -20\r\nKPX Ncaron Abreve -20\r\nKPX Ncaron Acircumflex -20\r\nKPX Ncaron Adieresis -20\r\nKPX Ncaron Agrave -20\r\nKPX Ncaron Amacron -20\r\nKPX Ncaron Aogonek -20\r\nKPX Ncaron Aring -20\r\nKPX Ncaron Atilde -20\r\nKPX Ncommaaccent A -20\r\nKPX Ncommaaccent Aacute -20\r\nKPX Ncommaaccent Abreve -20\r\nKPX Ncommaaccent Acircumflex -20\r\nKPX Ncommaaccent Adieresis -20\r\nKPX Ncommaaccent Agrave -20\r\nKPX Ncommaaccent Amacron -20\r\nKPX Ncommaaccent Aogonek -20\r\nKPX Ncommaaccent Aring -20\r\nKPX Ncommaaccent Atilde -20\r\nKPX Ntilde A -20\r\nKPX Ntilde Aacute -20\r\nKPX Ntilde Abreve -20\r\nKPX Ntilde Acircumflex -20\r\nKPX Ntilde Adieresis -20\r\nKPX Ntilde Agrave -20\r\nKPX Ntilde Amacron -20\r\nKPX Ntilde Aogonek -20\r\nKPX Ntilde Aring -20\r\nKPX Ntilde Atilde -20\r\nKPX O A -40\r\nKPX O Aacute -40\r\nKPX O Abreve -40\r\nKPX O Acircumflex -40\r\nKPX O Adieresis -40\r\nKPX O Agrave -40\r\nKPX O Amacron -40\r\nKPX O Aogonek -40\r\nKPX O Aring -40\r\nKPX O Atilde -40\r\nKPX O T -40\r\nKPX O Tcaron -40\r\nKPX O Tcommaaccent -40\r\nKPX O V -50\r\nKPX O W -50\r\nKPX O X -40\r\nKPX O Y -50\r\nKPX O Yacute -50\r\nKPX O Ydieresis -50\r\nKPX Oacute A -40\r\nKPX Oacute Aacute -40\r\nKPX Oacute Abreve -40\r\nKPX Oacute Acircumflex -40\r\nKPX Oacute Adieresis -40\r\nKPX Oacute Agrave -40\r\nKPX Oacute Amacron -40\r\nKPX Oacute Aogonek -40\r\nKPX Oacute Aring -40\r\nKPX Oacute Atilde -40\r\nKPX Oacute T -40\r\nKPX Oacute Tcaron -40\r\nKPX Oacute Tcommaaccent -40\r\nKPX Oacute V -50\r\nKPX Oacute W -50\r\nKPX Oacute X -40\r\nKPX Oacute Y -50\r\nKPX Oacute Yacute -50\r\nKPX Oacute Ydieresis -50\r\nKPX Ocircumflex A -40\r\nKPX Ocircumflex Aacute -40\r\nKPX Ocircumflex Abreve -40\r\nKPX Ocircumflex Acircumflex -40\r\nKPX Ocircumflex Adieresis -40\r\nKPX Ocircumflex Agrave -40\r\nKPX Ocircumflex Amacron -40\r\nKPX Ocircumflex Aogonek -40\r\nKPX Ocircumflex Aring -40\r\nKPX Ocircumflex Atilde -40\r\nKPX Ocircumflex T -40\r\nKPX Ocircumflex Tcaron -40\r\nKPX Ocircumflex Tcommaaccent -40\r\nKPX Ocircumflex V -50\r\nKPX Ocircumflex W -50\r\nKPX Ocircumflex X -40\r\nKPX Ocircumflex Y -50\r\nKPX Ocircumflex Yacute -50\r\nKPX Ocircumflex Ydieresis -50\r\nKPX Odieresis A -40\r\nKPX Odieresis Aacute -40\r\nKPX Odieresis Abreve -40\r\nKPX Odieresis Acircumflex -40\r\nKPX Odieresis Adieresis -40\r\nKPX Odieresis Agrave -40\r\nKPX Odieresis Amacron -40\r\nKPX Odieresis Aogonek -40\r\nKPX Odieresis Aring -40\r\nKPX Odieresis Atilde -40\r\nKPX Odieresis T -40\r\nKPX Odieresis Tcaron -40\r\nKPX Odieresis Tcommaaccent -40\r\nKPX Odieresis V -50\r\nKPX Odieresis W -50\r\nKPX Odieresis X -40\r\nKPX Odieresis Y -50\r\nKPX Odieresis Yacute -50\r\nKPX Odieresis Ydieresis -50\r\nKPX Ograve A -40\r\nKPX Ograve Aacute -40\r\nKPX Ograve Abreve -40\r\nKPX Ograve Acircumflex -40\r\nKPX Ograve Adieresis -40\r\nKPX Ograve Agrave -40\r\nKPX Ograve Amacron -40\r\nKPX Ograve Aogonek -40\r\nKPX Ograve Aring -40\r\nKPX Ograve Atilde -40\r\nKPX Ograve T -40\r\nKPX Ograve Tcaron -40\r\nKPX Ograve Tcommaaccent -40\r\nKPX Ograve V -50\r\nKPX Ograve W -50\r\nKPX Ograve X -40\r\nKPX Ograve Y -50\r\nKPX Ograve Yacute -50\r\nKPX Ograve Ydieresis -50\r\nKPX Ohungarumlaut A -40\r\nKPX Ohungarumlaut Aacute -40\r\nKPX Ohungarumlaut Abreve -40\r\nKPX Ohungarumlaut Acircumflex -40\r\nKPX Ohungarumlaut Adieresis -40\r\nKPX Ohungarumlaut Agrave -40\r\nKPX Ohungarumlaut Amacron -40\r\nKPX Ohungarumlaut Aogonek -40\r\nKPX Ohungarumlaut Aring -40\r\nKPX Ohungarumlaut Atilde -40\r\nKPX Ohungarumlaut T -40\r\nKPX Ohungarumlaut Tcaron -40\r\nKPX Ohungarumlaut Tcommaaccent -40\r\nKPX Ohungarumlaut V -50\r\nKPX Ohungarumlaut W -50\r\nKPX Ohungarumlaut X -40\r\nKPX Ohungarumlaut Y -50\r\nKPX Ohungarumlaut Yacute -50\r\nKPX Ohungarumlaut Ydieresis -50\r\nKPX Omacron A -40\r\nKPX Omacron Aacute -40\r\nKPX Omacron Abreve -40\r\nKPX Omacron Acircumflex -40\r\nKPX Omacron Adieresis -40\r\nKPX Omacron Agrave -40\r\nKPX Omacron Amacron -40\r\nKPX Omacron Aogonek -40\r\nKPX Omacron Aring -40\r\nKPX Omacron Atilde -40\r\nKPX Omacron T -40\r\nKPX Omacron Tcaron -40\r\nKPX Omacron Tcommaaccent -40\r\nKPX Omacron V -50\r\nKPX Omacron W -50\r\nKPX Omacron X -40\r\nKPX Omacron Y -50\r\nKPX Omacron Yacute -50\r\nKPX Omacron Ydieresis -50\r\nKPX Oslash A -40\r\nKPX Oslash Aacute -40\r\nKPX Oslash Abreve -40\r\nKPX Oslash Acircumflex -40\r\nKPX Oslash Adieresis -40\r\nKPX Oslash Agrave -40\r\nKPX Oslash Amacron -40\r\nKPX Oslash Aogonek -40\r\nKPX Oslash Aring -40\r\nKPX Oslash Atilde -40\r\nKPX Oslash T -40\r\nKPX Oslash Tcaron -40\r\nKPX Oslash Tcommaaccent -40\r\nKPX Oslash V -50\r\nKPX Oslash W -50\r\nKPX Oslash X -40\r\nKPX Oslash Y -50\r\nKPX Oslash Yacute -50\r\nKPX Oslash Ydieresis -50\r\nKPX Otilde A -40\r\nKPX Otilde Aacute -40\r\nKPX Otilde Abreve -40\r\nKPX Otilde Acircumflex -40\r\nKPX Otilde Adieresis -40\r\nKPX Otilde Agrave -40\r\nKPX Otilde Amacron -40\r\nKPX Otilde Aogonek -40\r\nKPX Otilde Aring -40\r\nKPX Otilde Atilde -40\r\nKPX Otilde T -40\r\nKPX Otilde Tcaron -40\r\nKPX Otilde Tcommaaccent -40\r\nKPX Otilde V -50\r\nKPX Otilde W -50\r\nKPX Otilde X -40\r\nKPX Otilde Y -50\r\nKPX Otilde Yacute -50\r\nKPX Otilde Ydieresis -50\r\nKPX P A -74\r\nKPX P Aacute -74\r\nKPX P Abreve -74\r\nKPX P Acircumflex -74\r\nKPX P Adieresis -74\r\nKPX P Agrave -74\r\nKPX P Amacron -74\r\nKPX P Aogonek -74\r\nKPX P Aring -74\r\nKPX P Atilde -74\r\nKPX P a -10\r\nKPX P aacute -10\r\nKPX P abreve -10\r\nKPX P acircumflex -10\r\nKPX P adieresis -10\r\nKPX P agrave -10\r\nKPX P amacron -10\r\nKPX P aogonek -10\r\nKPX P aring -10\r\nKPX P atilde -10\r\nKPX P comma -92\r\nKPX P e -20\r\nKPX P eacute -20\r\nKPX P ecaron -20\r\nKPX P ecircumflex -20\r\nKPX P edieresis -20\r\nKPX P edotaccent -20\r\nKPX P egrave -20\r\nKPX P emacron -20\r\nKPX P eogonek -20\r\nKPX P o -20\r\nKPX P oacute -20\r\nKPX P ocircumflex -20\r\nKPX P odieresis -20\r\nKPX P ograve -20\r\nKPX P ohungarumlaut -20\r\nKPX P omacron -20\r\nKPX P oslash -20\r\nKPX P otilde -20\r\nKPX P period -110\r\nKPX Q U -10\r\nKPX Q Uacute -10\r\nKPX Q Ucircumflex -10\r\nKPX Q Udieresis -10\r\nKPX Q Ugrave -10\r\nKPX Q Uhungarumlaut -10\r\nKPX Q Umacron -10\r\nKPX Q Uogonek -10\r\nKPX Q Uring -10\r\nKPX Q period -20\r\nKPX R O -30\r\nKPX R Oacute -30\r\nKPX R Ocircumflex -30\r\nKPX R Odieresis -30\r\nKPX R Ograve -30\r\nKPX R Ohungarumlaut -30\r\nKPX R Omacron -30\r\nKPX R Oslash -30\r\nKPX R Otilde -30\r\nKPX R T -40\r\nKPX R Tcaron -40\r\nKPX R Tcommaaccent -40\r\nKPX R U -30\r\nKPX R Uacute -30\r\nKPX R Ucircumflex -30\r\nKPX R Udieresis -30\r\nKPX R Ugrave -30\r\nKPX R Uhungarumlaut -30\r\nKPX R Umacron -30\r\nKPX R Uogonek -30\r\nKPX R Uring -30\r\nKPX R V -55\r\nKPX R W -35\r\nKPX R Y -35\r\nKPX R Yacute -35\r\nKPX R Ydieresis -35\r\nKPX Racute O -30\r\nKPX Racute Oacute -30\r\nKPX Racute Ocircumflex -30\r\nKPX Racute Odieresis -30\r\nKPX Racute Ograve -30\r\nKPX Racute Ohungarumlaut -30\r\nKPX Racute Omacron -30\r\nKPX Racute Oslash -30\r\nKPX Racute Otilde -30\r\nKPX Racute T -40\r\nKPX Racute Tcaron -40\r\nKPX Racute Tcommaaccent -40\r\nKPX Racute U -30\r\nKPX Racute Uacute -30\r\nKPX Racute Ucircumflex -30\r\nKPX Racute Udieresis -30\r\nKPX Racute Ugrave -30\r\nKPX Racute Uhungarumlaut -30\r\nKPX Racute Umacron -30\r\nKPX Racute Uogonek -30\r\nKPX Racute Uring -30\r\nKPX Racute V -55\r\nKPX Racute W -35\r\nKPX Racute Y -35\r\nKPX Racute Yacute -35\r\nKPX Racute Ydieresis -35\r\nKPX Rcaron O -30\r\nKPX Rcaron Oacute -30\r\nKPX Rcaron Ocircumflex -30\r\nKPX Rcaron Odieresis -30\r\nKPX Rcaron Ograve -30\r\nKPX Rcaron Ohungarumlaut -30\r\nKPX Rcaron Omacron -30\r\nKPX Rcaron Oslash -30\r\nKPX Rcaron Otilde -30\r\nKPX Rcaron T -40\r\nKPX Rcaron Tcaron -40\r\nKPX Rcaron Tcommaaccent -40\r\nKPX Rcaron U -30\r\nKPX Rcaron Uacute -30\r\nKPX Rcaron Ucircumflex -30\r\nKPX Rcaron Udieresis -30\r\nKPX Rcaron Ugrave -30\r\nKPX Rcaron Uhungarumlaut -30\r\nKPX Rcaron Umacron -30\r\nKPX Rcaron Uogonek -30\r\nKPX Rcaron Uring -30\r\nKPX Rcaron V -55\r\nKPX Rcaron W -35\r\nKPX Rcaron Y -35\r\nKPX Rcaron Yacute -35\r\nKPX Rcaron Ydieresis -35\r\nKPX Rcommaaccent O -30\r\nKPX Rcommaaccent Oacute -30\r\nKPX Rcommaaccent Ocircumflex -30\r\nKPX Rcommaaccent Odieresis -30\r\nKPX Rcommaaccent Ograve -30\r\nKPX Rcommaaccent Ohungarumlaut -30\r\nKPX Rcommaaccent Omacron -30\r\nKPX Rcommaaccent Oslash -30\r\nKPX Rcommaaccent Otilde -30\r\nKPX Rcommaaccent T -40\r\nKPX Rcommaaccent Tcaron -40\r\nKPX Rcommaaccent Tcommaaccent -40\r\nKPX Rcommaaccent U -30\r\nKPX Rcommaaccent Uacute -30\r\nKPX Rcommaaccent Ucircumflex -30\r\nKPX Rcommaaccent Udieresis -30\r\nKPX Rcommaaccent Ugrave -30\r\nKPX Rcommaaccent Uhungarumlaut -30\r\nKPX Rcommaaccent Umacron -30\r\nKPX Rcommaaccent Uogonek -30\r\nKPX Rcommaaccent Uring -30\r\nKPX Rcommaaccent V -55\r\nKPX Rcommaaccent W -35\r\nKPX Rcommaaccent Y -35\r\nKPX Rcommaaccent Yacute -35\r\nKPX Rcommaaccent Ydieresis -35\r\nKPX T A -90\r\nKPX T Aacute -90\r\nKPX T Abreve -90\r\nKPX T Acircumflex -90\r\nKPX T Adieresis -90\r\nKPX T Agrave -90\r\nKPX T Amacron -90\r\nKPX T Aogonek -90\r\nKPX T Aring -90\r\nKPX T Atilde -90\r\nKPX T O -18\r\nKPX T Oacute -18\r\nKPX T Ocircumflex -18\r\nKPX T Odieresis -18\r\nKPX T Ograve -18\r\nKPX T Ohungarumlaut -18\r\nKPX T Omacron -18\r\nKPX T Oslash -18\r\nKPX T Otilde -18\r\nKPX T a -92\r\nKPX T aacute -92\r\nKPX T abreve -52\r\nKPX T acircumflex -52\r\nKPX T adieresis -52\r\nKPX T agrave -52\r\nKPX T amacron -52\r\nKPX T aogonek -92\r\nKPX T aring -92\r\nKPX T atilde -52\r\nKPX T colon -74\r\nKPX T comma -74\r\nKPX T e -92\r\nKPX T eacute -92\r\nKPX T ecaron -92\r\nKPX T ecircumflex -92\r\nKPX T edieresis -52\r\nKPX T edotaccent -92\r\nKPX T egrave -52\r\nKPX T emacron -52\r\nKPX T eogonek -92\r\nKPX T hyphen -92\r\nKPX T i -18\r\nKPX T iacute -18\r\nKPX T iogonek -18\r\nKPX T o -92\r\nKPX T oacute -92\r\nKPX T ocircumflex -92\r\nKPX T odieresis -92\r\nKPX T ograve -92\r\nKPX T ohungarumlaut -92\r\nKPX T omacron -92\r\nKPX T oslash -92\r\nKPX T otilde -92\r\nKPX T period -90\r\nKPX T r -74\r\nKPX T racute -74\r\nKPX T rcaron -74\r\nKPX T rcommaaccent -74\r\nKPX T semicolon -74\r\nKPX T u -92\r\nKPX T uacute -92\r\nKPX T ucircumflex -92\r\nKPX T udieresis -92\r\nKPX T ugrave -92\r\nKPX T uhungarumlaut -92\r\nKPX T umacron -92\r\nKPX T uogonek -92\r\nKPX T uring -92\r\nKPX T w -74\r\nKPX T y -34\r\nKPX T yacute -34\r\nKPX T ydieresis -34\r\nKPX Tcaron A -90\r\nKPX Tcaron Aacute -90\r\nKPX Tcaron Abreve -90\r\nKPX Tcaron Acircumflex -90\r\nKPX Tcaron Adieresis -90\r\nKPX Tcaron Agrave -90\r\nKPX Tcaron Amacron -90\r\nKPX Tcaron Aogonek -90\r\nKPX Tcaron Aring -90\r\nKPX Tcaron Atilde -90\r\nKPX Tcaron O -18\r\nKPX Tcaron Oacute -18\r\nKPX Tcaron Ocircumflex -18\r\nKPX Tcaron Odieresis -18\r\nKPX Tcaron Ograve -18\r\nKPX Tcaron Ohungarumlaut -18\r\nKPX Tcaron Omacron -18\r\nKPX Tcaron Oslash -18\r\nKPX Tcaron Otilde -18\r\nKPX Tcaron a -92\r\nKPX Tcaron aacute -92\r\nKPX Tcaron abreve -52\r\nKPX Tcaron acircumflex -52\r\nKPX Tcaron adieresis -52\r\nKPX Tcaron agrave -52\r\nKPX Tcaron amacron -52\r\nKPX Tcaron aogonek -92\r\nKPX Tcaron aring -92\r\nKPX Tcaron atilde -52\r\nKPX Tcaron colon -74\r\nKPX Tcaron comma -74\r\nKPX Tcaron e -92\r\nKPX Tcaron eacute -92\r\nKPX Tcaron ecaron -92\r\nKPX Tcaron ecircumflex -92\r\nKPX Tcaron edieresis -52\r\nKPX Tcaron edotaccent -92\r\nKPX Tcaron egrave -52\r\nKPX Tcaron emacron -52\r\nKPX Tcaron eogonek -92\r\nKPX Tcaron hyphen -92\r\nKPX Tcaron i -18\r\nKPX Tcaron iacute -18\r\nKPX Tcaron iogonek -18\r\nKPX Tcaron o -92\r\nKPX Tcaron oacute -92\r\nKPX Tcaron ocircumflex -92\r\nKPX Tcaron odieresis -92\r\nKPX Tcaron ograve -92\r\nKPX Tcaron ohungarumlaut -92\r\nKPX Tcaron omacron -92\r\nKPX Tcaron oslash -92\r\nKPX Tcaron otilde -92\r\nKPX Tcaron period -90\r\nKPX Tcaron r -74\r\nKPX Tcaron racute -74\r\nKPX Tcaron rcaron -74\r\nKPX Tcaron rcommaaccent -74\r\nKPX Tcaron semicolon -74\r\nKPX Tcaron u -92\r\nKPX Tcaron uacute -92\r\nKPX Tcaron ucircumflex -92\r\nKPX Tcaron udieresis -92\r\nKPX Tcaron ugrave -92\r\nKPX Tcaron uhungarumlaut -92\r\nKPX Tcaron umacron -92\r\nKPX Tcaron uogonek -92\r\nKPX Tcaron uring -92\r\nKPX Tcaron w -74\r\nKPX Tcaron y -34\r\nKPX Tcaron yacute -34\r\nKPX Tcaron ydieresis -34\r\nKPX Tcommaaccent A -90\r\nKPX Tcommaaccent Aacute -90\r\nKPX Tcommaaccent Abreve -90\r\nKPX Tcommaaccent Acircumflex -90\r\nKPX Tcommaaccent Adieresis -90\r\nKPX Tcommaaccent Agrave -90\r\nKPX Tcommaaccent Amacron -90\r\nKPX Tcommaaccent Aogonek -90\r\nKPX Tcommaaccent Aring -90\r\nKPX Tcommaaccent Atilde -90\r\nKPX Tcommaaccent O -18\r\nKPX Tcommaaccent Oacute -18\r\nKPX Tcommaaccent Ocircumflex -18\r\nKPX Tcommaaccent Odieresis -18\r\nKPX Tcommaaccent Ograve -18\r\nKPX Tcommaaccent Ohungarumlaut -18\r\nKPX Tcommaaccent Omacron -18\r\nKPX Tcommaaccent Oslash -18\r\nKPX Tcommaaccent Otilde -18\r\nKPX Tcommaaccent a -92\r\nKPX Tcommaaccent aacute -92\r\nKPX Tcommaaccent abreve -52\r\nKPX Tcommaaccent acircumflex -52\r\nKPX Tcommaaccent adieresis -52\r\nKPX Tcommaaccent agrave -52\r\nKPX Tcommaaccent amacron -52\r\nKPX Tcommaaccent aogonek -92\r\nKPX Tcommaaccent aring -92\r\nKPX Tcommaaccent atilde -52\r\nKPX Tcommaaccent colon -74\r\nKPX Tcommaaccent comma -74\r\nKPX Tcommaaccent e -92\r\nKPX Tcommaaccent eacute -92\r\nKPX Tcommaaccent ecaron -92\r\nKPX Tcommaaccent ecircumflex -92\r\nKPX Tcommaaccent edieresis -52\r\nKPX Tcommaaccent edotaccent -92\r\nKPX Tcommaaccent egrave -52\r\nKPX Tcommaaccent emacron -52\r\nKPX Tcommaaccent eogonek -92\r\nKPX Tcommaaccent hyphen -92\r\nKPX Tcommaaccent i -18\r\nKPX Tcommaaccent iacute -18\r\nKPX Tcommaaccent iogonek -18\r\nKPX Tcommaaccent o -92\r\nKPX Tcommaaccent oacute -92\r\nKPX Tcommaaccent ocircumflex -92\r\nKPX Tcommaaccent odieresis -92\r\nKPX Tcommaaccent ograve -92\r\nKPX Tcommaaccent ohungarumlaut -92\r\nKPX Tcommaaccent omacron -92\r\nKPX Tcommaaccent oslash -92\r\nKPX Tcommaaccent otilde -92\r\nKPX Tcommaaccent period -90\r\nKPX Tcommaaccent r -74\r\nKPX Tcommaaccent racute -74\r\nKPX Tcommaaccent rcaron -74\r\nKPX Tcommaaccent rcommaaccent -74\r\nKPX Tcommaaccent semicolon -74\r\nKPX Tcommaaccent u -92\r\nKPX Tcommaaccent uacute -92\r\nKPX Tcommaaccent ucircumflex -92\r\nKPX Tcommaaccent udieresis -92\r\nKPX Tcommaaccent ugrave -92\r\nKPX Tcommaaccent uhungarumlaut -92\r\nKPX Tcommaaccent umacron -92\r\nKPX Tcommaaccent uogonek -92\r\nKPX Tcommaaccent uring -92\r\nKPX Tcommaaccent w -74\r\nKPX Tcommaaccent y -34\r\nKPX Tcommaaccent yacute -34\r\nKPX Tcommaaccent ydieresis -34\r\nKPX U A -60\r\nKPX U Aacute -60\r\nKPX U Abreve -60\r\nKPX U Acircumflex -60\r\nKPX U Adieresis -60\r\nKPX U Agrave -60\r\nKPX U Amacron -60\r\nKPX U Aogonek -60\r\nKPX U Aring -60\r\nKPX U Atilde -60\r\nKPX U comma -50\r\nKPX U period -50\r\nKPX Uacute A -60\r\nKPX Uacute Aacute -60\r\nKPX Uacute Abreve -60\r\nKPX Uacute Acircumflex -60\r\nKPX Uacute Adieresis -60\r\nKPX Uacute Agrave -60\r\nKPX Uacute Amacron -60\r\nKPX Uacute Aogonek -60\r\nKPX Uacute Aring -60\r\nKPX Uacute Atilde -60\r\nKPX Uacute comma -50\r\nKPX Uacute period -50\r\nKPX Ucircumflex A -60\r\nKPX Ucircumflex Aacute -60\r\nKPX Ucircumflex Abreve -60\r\nKPX Ucircumflex Acircumflex -60\r\nKPX Ucircumflex Adieresis -60\r\nKPX Ucircumflex Agrave -60\r\nKPX Ucircumflex Amacron -60\r\nKPX Ucircumflex Aogonek -60\r\nKPX Ucircumflex Aring -60\r\nKPX Ucircumflex Atilde -60\r\nKPX Ucircumflex comma -50\r\nKPX Ucircumflex period -50\r\nKPX Udieresis A -60\r\nKPX Udieresis Aacute -60\r\nKPX Udieresis Abreve -60\r\nKPX Udieresis Acircumflex -60\r\nKPX Udieresis Adieresis -60\r\nKPX Udieresis Agrave -60\r\nKPX Udieresis Amacron -60\r\nKPX Udieresis Aogonek -60\r\nKPX Udieresis Aring -60\r\nKPX Udieresis Atilde -60\r\nKPX Udieresis comma -50\r\nKPX Udieresis period -50\r\nKPX Ugrave A -60\r\nKPX Ugrave Aacute -60\r\nKPX Ugrave Abreve -60\r\nKPX Ugrave Acircumflex -60\r\nKPX Ugrave Adieresis -60\r\nKPX Ugrave Agrave -60\r\nKPX Ugrave Amacron -60\r\nKPX Ugrave Aogonek -60\r\nKPX Ugrave Aring -60\r\nKPX Ugrave Atilde -60\r\nKPX Ugrave comma -50\r\nKPX Ugrave period -50\r\nKPX Uhungarumlaut A -60\r\nKPX Uhungarumlaut Aacute -60\r\nKPX Uhungarumlaut Abreve -60\r\nKPX Uhungarumlaut Acircumflex -60\r\nKPX Uhungarumlaut Adieresis -60\r\nKPX Uhungarumlaut Agrave -60\r\nKPX Uhungarumlaut Amacron -60\r\nKPX Uhungarumlaut Aogonek -60\r\nKPX Uhungarumlaut Aring -60\r\nKPX Uhungarumlaut Atilde -60\r\nKPX Uhungarumlaut comma -50\r\nKPX Uhungarumlaut period -50\r\nKPX Umacron A -60\r\nKPX Umacron Aacute -60\r\nKPX Umacron Abreve -60\r\nKPX Umacron Acircumflex -60\r\nKPX Umacron Adieresis -60\r\nKPX Umacron Agrave -60\r\nKPX Umacron Amacron -60\r\nKPX Umacron Aogonek -60\r\nKPX Umacron Aring -60\r\nKPX Umacron Atilde -60\r\nKPX Umacron comma -50\r\nKPX Umacron period -50\r\nKPX Uogonek A -60\r\nKPX Uogonek Aacute -60\r\nKPX Uogonek Abreve -60\r\nKPX Uogonek Acircumflex -60\r\nKPX Uogonek Adieresis -60\r\nKPX Uogonek Agrave -60\r\nKPX Uogonek Amacron -60\r\nKPX Uogonek Aogonek -60\r\nKPX Uogonek Aring -60\r\nKPX Uogonek Atilde -60\r\nKPX Uogonek comma -50\r\nKPX Uogonek period -50\r\nKPX Uring A -60\r\nKPX Uring Aacute -60\r\nKPX Uring Abreve -60\r\nKPX Uring Acircumflex -60\r\nKPX Uring Adieresis -60\r\nKPX Uring Agrave -60\r\nKPX Uring Amacron -60\r\nKPX Uring Aogonek -60\r\nKPX Uring Aring -60\r\nKPX Uring Atilde -60\r\nKPX Uring comma -50\r\nKPX Uring period -50\r\nKPX V A -135\r\nKPX V Aacute -135\r\nKPX V Abreve -135\r\nKPX V Acircumflex -135\r\nKPX V Adieresis -135\r\nKPX V Agrave -135\r\nKPX V Amacron -135\r\nKPX V Aogonek -135\r\nKPX V Aring -135\r\nKPX V Atilde -135\r\nKPX V G -30\r\nKPX V Gbreve -30\r\nKPX V Gcommaaccent -30\r\nKPX V O -45\r\nKPX V Oacute -45\r\nKPX V Ocircumflex -45\r\nKPX V Odieresis -45\r\nKPX V Ograve -45\r\nKPX V Ohungarumlaut -45\r\nKPX V Omacron -45\r\nKPX V Oslash -45\r\nKPX V Otilde -45\r\nKPX V a -92\r\nKPX V aacute -92\r\nKPX V abreve -92\r\nKPX V acircumflex -92\r\nKPX V adieresis -92\r\nKPX V agrave -92\r\nKPX V amacron -92\r\nKPX V aogonek -92\r\nKPX V aring -92\r\nKPX V atilde -92\r\nKPX V colon -92\r\nKPX V comma -129\r\nKPX V e -100\r\nKPX V eacute -100\r\nKPX V ecaron -100\r\nKPX V ecircumflex -100\r\nKPX V edieresis -100\r\nKPX V edotaccent -100\r\nKPX V egrave -100\r\nKPX V emacron -100\r\nKPX V eogonek -100\r\nKPX V hyphen -74\r\nKPX V i -37\r\nKPX V iacute -37\r\nKPX V icircumflex -37\r\nKPX V idieresis -37\r\nKPX V igrave -37\r\nKPX V imacron -37\r\nKPX V iogonek -37\r\nKPX V o -100\r\nKPX V oacute -100\r\nKPX V ocircumflex -100\r\nKPX V odieresis -100\r\nKPX V ograve -100\r\nKPX V ohungarumlaut -100\r\nKPX V omacron -100\r\nKPX V oslash -100\r\nKPX V otilde -100\r\nKPX V period -145\r\nKPX V semicolon -92\r\nKPX V u -92\r\nKPX V uacute -92\r\nKPX V ucircumflex -92\r\nKPX V udieresis -92\r\nKPX V ugrave -92\r\nKPX V uhungarumlaut -92\r\nKPX V umacron -92\r\nKPX V uogonek -92\r\nKPX V uring -92\r\nKPX W A -120\r\nKPX W Aacute -120\r\nKPX W Abreve -120\r\nKPX W Acircumflex -120\r\nKPX W Adieresis -120\r\nKPX W Agrave -120\r\nKPX W Amacron -120\r\nKPX W Aogonek -120\r\nKPX W Aring -120\r\nKPX W Atilde -120\r\nKPX W O -10\r\nKPX W Oacute -10\r\nKPX W Ocircumflex -10\r\nKPX W Odieresis -10\r\nKPX W Ograve -10\r\nKPX W Ohungarumlaut -10\r\nKPX W Omacron -10\r\nKPX W Oslash -10\r\nKPX W Otilde -10\r\nKPX W a -65\r\nKPX W aacute -65\r\nKPX W abreve -65\r\nKPX W acircumflex -65\r\nKPX W adieresis -65\r\nKPX W agrave -65\r\nKPX W amacron -65\r\nKPX W aogonek -65\r\nKPX W aring -65\r\nKPX W atilde -65\r\nKPX W colon -55\r\nKPX W comma -92\r\nKPX W e -65\r\nKPX W eacute -65\r\nKPX W ecaron -65\r\nKPX W ecircumflex -65\r\nKPX W edieresis -65\r\nKPX W edotaccent -65\r\nKPX W egrave -65\r\nKPX W emacron -65\r\nKPX W eogonek -65\r\nKPX W hyphen -37\r\nKPX W i -18\r\nKPX W iacute -18\r\nKPX W iogonek -18\r\nKPX W o -75\r\nKPX W oacute -75\r\nKPX W ocircumflex -75\r\nKPX W odieresis -75\r\nKPX W ograve -75\r\nKPX W ohungarumlaut -75\r\nKPX W omacron -75\r\nKPX W oslash -75\r\nKPX W otilde -75\r\nKPX W period -92\r\nKPX W semicolon -55\r\nKPX W u -50\r\nKPX W uacute -50\r\nKPX W ucircumflex -50\r\nKPX W udieresis -50\r\nKPX W ugrave -50\r\nKPX W uhungarumlaut -50\r\nKPX W umacron -50\r\nKPX W uogonek -50\r\nKPX W uring -50\r\nKPX W y -60\r\nKPX W yacute -60\r\nKPX W ydieresis -60\r\nKPX Y A -110\r\nKPX Y Aacute -110\r\nKPX Y Abreve -110\r\nKPX Y Acircumflex -110\r\nKPX Y Adieresis -110\r\nKPX Y Agrave -110\r\nKPX Y Amacron -110\r\nKPX Y Aogonek -110\r\nKPX Y Aring -110\r\nKPX Y Atilde -110\r\nKPX Y O -35\r\nKPX Y Oacute -35\r\nKPX Y Ocircumflex -35\r\nKPX Y Odieresis -35\r\nKPX Y Ograve -35\r\nKPX Y Ohungarumlaut -35\r\nKPX Y Omacron -35\r\nKPX Y Oslash -35\r\nKPX Y Otilde -35\r\nKPX Y a -85\r\nKPX Y aacute -85\r\nKPX Y abreve -85\r\nKPX Y acircumflex -85\r\nKPX Y adieresis -85\r\nKPX Y agrave -85\r\nKPX Y amacron -85\r\nKPX Y aogonek -85\r\nKPX Y aring -85\r\nKPX Y atilde -85\r\nKPX Y colon -92\r\nKPX Y comma -92\r\nKPX Y e -111\r\nKPX Y eacute -111\r\nKPX Y ecaron -111\r\nKPX Y ecircumflex -111\r\nKPX Y edieresis -71\r\nKPX Y edotaccent -111\r\nKPX Y egrave -71\r\nKPX Y emacron -71\r\nKPX Y eogonek -111\r\nKPX Y hyphen -92\r\nKPX Y i -37\r\nKPX Y iacute -37\r\nKPX Y iogonek -37\r\nKPX Y o -111\r\nKPX Y oacute -111\r\nKPX Y ocircumflex -111\r\nKPX Y odieresis -111\r\nKPX Y ograve -111\r\nKPX Y ohungarumlaut -111\r\nKPX Y omacron -111\r\nKPX Y oslash -111\r\nKPX Y otilde -111\r\nKPX Y period -92\r\nKPX Y semicolon -92\r\nKPX Y u -92\r\nKPX Y uacute -92\r\nKPX Y ucircumflex -92\r\nKPX Y udieresis -92\r\nKPX Y ugrave -92\r\nKPX Y uhungarumlaut -92\r\nKPX Y umacron -92\r\nKPX Y uogonek -92\r\nKPX Y uring -92\r\nKPX Yacute A -110\r\nKPX Yacute Aacute -110\r\nKPX Yacute Abreve -110\r\nKPX Yacute Acircumflex -110\r\nKPX Yacute Adieresis -110\r\nKPX Yacute Agrave -110\r\nKPX Yacute Amacron -110\r\nKPX Yacute Aogonek -110\r\nKPX Yacute Aring -110\r\nKPX Yacute Atilde -110\r\nKPX Yacute O -35\r\nKPX Yacute Oacute -35\r\nKPX Yacute Ocircumflex -35\r\nKPX Yacute Odieresis -35\r\nKPX Yacute Ograve -35\r\nKPX Yacute Ohungarumlaut -35\r\nKPX Yacute Omacron -35\r\nKPX Yacute Oslash -35\r\nKPX Yacute Otilde -35\r\nKPX Yacute a -85\r\nKPX Yacute aacute -85\r\nKPX Yacute abreve -85\r\nKPX Yacute acircumflex -85\r\nKPX Yacute adieresis -85\r\nKPX Yacute agrave -85\r\nKPX Yacute amacron -85\r\nKPX Yacute aogonek -85\r\nKPX Yacute aring -85\r\nKPX Yacute atilde -85\r\nKPX Yacute colon -92\r\nKPX Yacute comma -92\r\nKPX Yacute e -111\r\nKPX Yacute eacute -111\r\nKPX Yacute ecaron -111\r\nKPX Yacute ecircumflex -111\r\nKPX Yacute edieresis -71\r\nKPX Yacute edotaccent -111\r\nKPX Yacute egrave -71\r\nKPX Yacute emacron -71\r\nKPX Yacute eogonek -111\r\nKPX Yacute hyphen -92\r\nKPX Yacute i -37\r\nKPX Yacute iacute -37\r\nKPX Yacute iogonek -37\r\nKPX Yacute o -111\r\nKPX Yacute oacute -111\r\nKPX Yacute ocircumflex -111\r\nKPX Yacute odieresis -111\r\nKPX Yacute ograve -111\r\nKPX Yacute ohungarumlaut -111\r\nKPX Yacute omacron -111\r\nKPX Yacute oslash -111\r\nKPX Yacute otilde -111\r\nKPX Yacute period -92\r\nKPX Yacute semicolon -92\r\nKPX Yacute u -92\r\nKPX Yacute uacute -92\r\nKPX Yacute ucircumflex -92\r\nKPX Yacute udieresis -92\r\nKPX Yacute ugrave -92\r\nKPX Yacute uhungarumlaut -92\r\nKPX Yacute umacron -92\r\nKPX Yacute uogonek -92\r\nKPX Yacute uring -92\r\nKPX Ydieresis A -110\r\nKPX Ydieresis Aacute -110\r\nKPX Ydieresis Abreve -110\r\nKPX Ydieresis Acircumflex -110\r\nKPX Ydieresis Adieresis -110\r\nKPX Ydieresis Agrave -110\r\nKPX Ydieresis Amacron -110\r\nKPX Ydieresis Aogonek -110\r\nKPX Ydieresis Aring -110\r\nKPX Ydieresis Atilde -110\r\nKPX Ydieresis O -35\r\nKPX Ydieresis Oacute -35\r\nKPX Ydieresis Ocircumflex -35\r\nKPX Ydieresis Odieresis -35\r\nKPX Ydieresis Ograve -35\r\nKPX Ydieresis Ohungarumlaut -35\r\nKPX Ydieresis Omacron -35\r\nKPX Ydieresis Oslash -35\r\nKPX Ydieresis Otilde -35\r\nKPX Ydieresis a -85\r\nKPX Ydieresis aacute -85\r\nKPX Ydieresis abreve -85\r\nKPX Ydieresis acircumflex -85\r\nKPX Ydieresis adieresis -85\r\nKPX Ydieresis agrave -85\r\nKPX Ydieresis amacron -85\r\nKPX Ydieresis aogonek -85\r\nKPX Ydieresis aring -85\r\nKPX Ydieresis atilde -85\r\nKPX Ydieresis colon -92\r\nKPX Ydieresis comma -92\r\nKPX Ydieresis e -111\r\nKPX Ydieresis eacute -111\r\nKPX Ydieresis ecaron -111\r\nKPX Ydieresis ecircumflex -111\r\nKPX Ydieresis edieresis -71\r\nKPX Ydieresis edotaccent -111\r\nKPX Ydieresis egrave -71\r\nKPX Ydieresis emacron -71\r\nKPX Ydieresis eogonek -111\r\nKPX Ydieresis hyphen -92\r\nKPX Ydieresis i -37\r\nKPX Ydieresis iacute -37\r\nKPX Ydieresis iogonek -37\r\nKPX Ydieresis o -111\r\nKPX Ydieresis oacute -111\r\nKPX Ydieresis ocircumflex -111\r\nKPX Ydieresis odieresis -111\r\nKPX Ydieresis ograve -111\r\nKPX Ydieresis ohungarumlaut -111\r\nKPX Ydieresis omacron -111\r\nKPX Ydieresis oslash -111\r\nKPX Ydieresis otilde -111\r\nKPX Ydieresis period -92\r\nKPX Ydieresis semicolon -92\r\nKPX Ydieresis u -92\r\nKPX Ydieresis uacute -92\r\nKPX Ydieresis ucircumflex -92\r\nKPX Ydieresis udieresis -92\r\nKPX Ydieresis ugrave -92\r\nKPX Ydieresis uhungarumlaut -92\r\nKPX Ydieresis umacron -92\r\nKPX Ydieresis uogonek -92\r\nKPX Ydieresis uring -92\r\nKPX a v -25\r\nKPX aacute v -25\r\nKPX abreve v -25\r\nKPX acircumflex v -25\r\nKPX adieresis v -25\r\nKPX agrave v -25\r\nKPX amacron v -25\r\nKPX aogonek v -25\r\nKPX aring v -25\r\nKPX atilde v -25\r\nKPX b b -10\r\nKPX b period -40\r\nKPX b u -20\r\nKPX b uacute -20\r\nKPX b ucircumflex -20\r\nKPX b udieresis -20\r\nKPX b ugrave -20\r\nKPX b uhungarumlaut -20\r\nKPX b umacron -20\r\nKPX b uogonek -20\r\nKPX b uring -20\r\nKPX b v -15\r\nKPX comma quotedblright -45\r\nKPX comma quoteright -55\r\nKPX d w -15\r\nKPX dcroat w -15\r\nKPX e v -15\r\nKPX eacute v -15\r\nKPX ecaron v -15\r\nKPX ecircumflex v -15\r\nKPX edieresis v -15\r\nKPX edotaccent v -15\r\nKPX egrave v -15\r\nKPX emacron v -15\r\nKPX eogonek v -15\r\nKPX f comma -15\r\nKPX f dotlessi -35\r\nKPX f i -25\r\nKPX f o -25\r\nKPX f oacute -25\r\nKPX f ocircumflex -25\r\nKPX f odieresis -25\r\nKPX f ograve -25\r\nKPX f ohungarumlaut -25\r\nKPX f omacron -25\r\nKPX f oslash -25\r\nKPX f otilde -25\r\nKPX f period -15\r\nKPX f quotedblright 50\r\nKPX f quoteright 55\r\nKPX g period -15\r\nKPX gbreve period -15\r\nKPX gcommaaccent period -15\r\nKPX h y -15\r\nKPX h yacute -15\r\nKPX h ydieresis -15\r\nKPX i v -10\r\nKPX iacute v -10\r\nKPX icircumflex v -10\r\nKPX idieresis v -10\r\nKPX igrave v -10\r\nKPX imacron v -10\r\nKPX iogonek v -10\r\nKPX k e -10\r\nKPX k eacute -10\r\nKPX k ecaron -10\r\nKPX k ecircumflex -10\r\nKPX k edieresis -10\r\nKPX k edotaccent -10\r\nKPX k egrave -10\r\nKPX k emacron -10\r\nKPX k eogonek -10\r\nKPX k o -15\r\nKPX k oacute -15\r\nKPX k ocircumflex -15\r\nKPX k odieresis -15\r\nKPX k ograve -15\r\nKPX k ohungarumlaut -15\r\nKPX k omacron -15\r\nKPX k oslash -15\r\nKPX k otilde -15\r\nKPX k y -15\r\nKPX k yacute -15\r\nKPX k ydieresis -15\r\nKPX kcommaaccent e -10\r\nKPX kcommaaccent eacute -10\r\nKPX kcommaaccent ecaron -10\r\nKPX kcommaaccent ecircumflex -10\r\nKPX kcommaaccent edieresis -10\r\nKPX kcommaaccent edotaccent -10\r\nKPX kcommaaccent egrave -10\r\nKPX kcommaaccent emacron -10\r\nKPX kcommaaccent eogonek -10\r\nKPX kcommaaccent o -15\r\nKPX kcommaaccent oacute -15\r\nKPX kcommaaccent ocircumflex -15\r\nKPX kcommaaccent odieresis -15\r\nKPX kcommaaccent ograve -15\r\nKPX kcommaaccent ohungarumlaut -15\r\nKPX kcommaaccent omacron -15\r\nKPX kcommaaccent oslash -15\r\nKPX kcommaaccent otilde -15\r\nKPX kcommaaccent y -15\r\nKPX kcommaaccent yacute -15\r\nKPX kcommaaccent ydieresis -15\r\nKPX n v -40\r\nKPX nacute v -40\r\nKPX ncaron v -40\r\nKPX ncommaaccent v -40\r\nKPX ntilde v -40\r\nKPX o v -10\r\nKPX o w -10\r\nKPX oacute v -10\r\nKPX oacute w -10\r\nKPX ocircumflex v -10\r\nKPX ocircumflex w -10\r\nKPX odieresis v -10\r\nKPX odieresis w -10\r\nKPX ograve v -10\r\nKPX ograve w -10\r\nKPX ohungarumlaut v -10\r\nKPX ohungarumlaut w -10\r\nKPX omacron v -10\r\nKPX omacron w -10\r\nKPX oslash v -10\r\nKPX oslash w -10\r\nKPX otilde v -10\r\nKPX otilde w -10\r\nKPX period quotedblright -55\r\nKPX period quoteright -55\r\nKPX quotedblleft A -10\r\nKPX quotedblleft Aacute -10\r\nKPX quotedblleft Abreve -10\r\nKPX quotedblleft Acircumflex -10\r\nKPX quotedblleft Adieresis -10\r\nKPX quotedblleft Agrave -10\r\nKPX quotedblleft Amacron -10\r\nKPX quotedblleft Aogonek -10\r\nKPX quotedblleft Aring -10\r\nKPX quotedblleft Atilde -10\r\nKPX quoteleft A -10\r\nKPX quoteleft Aacute -10\r\nKPX quoteleft Abreve -10\r\nKPX quoteleft Acircumflex -10\r\nKPX quoteleft Adieresis -10\r\nKPX quoteleft Agrave -10\r\nKPX quoteleft Amacron -10\r\nKPX quoteleft Aogonek -10\r\nKPX quoteleft Aring -10\r\nKPX quoteleft Atilde -10\r\nKPX quoteleft quoteleft -63\r\nKPX quoteright d -20\r\nKPX quoteright dcroat -20\r\nKPX quoteright quoteright -63\r\nKPX quoteright r -20\r\nKPX quoteright racute -20\r\nKPX quoteright rcaron -20\r\nKPX quoteright rcommaaccent -20\r\nKPX quoteright s -37\r\nKPX quoteright sacute -37\r\nKPX quoteright scaron -37\r\nKPX quoteright scedilla -37\r\nKPX quoteright scommaaccent -37\r\nKPX quoteright space -74\r\nKPX quoteright v -20\r\nKPX r c -18\r\nKPX r cacute -18\r\nKPX r ccaron -18\r\nKPX r ccedilla -18\r\nKPX r comma -92\r\nKPX r e -18\r\nKPX r eacute -18\r\nKPX r ecaron -18\r\nKPX r ecircumflex -18\r\nKPX r edieresis -18\r\nKPX r edotaccent -18\r\nKPX r egrave -18\r\nKPX r emacron -18\r\nKPX r eogonek -18\r\nKPX r g -10\r\nKPX r gbreve -10\r\nKPX r gcommaaccent -10\r\nKPX r hyphen -37\r\nKPX r n -15\r\nKPX r nacute -15\r\nKPX r ncaron -15\r\nKPX r ncommaaccent -15\r\nKPX r ntilde -15\r\nKPX r o -18\r\nKPX r oacute -18\r\nKPX r ocircumflex -18\r\nKPX r odieresis -18\r\nKPX r ograve -18\r\nKPX r ohungarumlaut -18\r\nKPX r omacron -18\r\nKPX r oslash -18\r\nKPX r otilde -18\r\nKPX r p -10\r\nKPX r period -100\r\nKPX r q -18\r\nKPX r v -10\r\nKPX racute c -18\r\nKPX racute cacute -18\r\nKPX racute ccaron -18\r\nKPX racute ccedilla -18\r\nKPX racute comma -92\r\nKPX racute e -18\r\nKPX racute eacute -18\r\nKPX racute ecaron -18\r\nKPX racute ecircumflex -18\r\nKPX racute edieresis -18\r\nKPX racute edotaccent -18\r\nKPX racute egrave -18\r\nKPX racute emacron -18\r\nKPX racute eogonek -18\r\nKPX racute g -10\r\nKPX racute gbreve -10\r\nKPX racute gcommaaccent -10\r\nKPX racute hyphen -37\r\nKPX racute n -15\r\nKPX racute nacute -15\r\nKPX racute ncaron -15\r\nKPX racute ncommaaccent -15\r\nKPX racute ntilde -15\r\nKPX racute o -18\r\nKPX racute oacute -18\r\nKPX racute ocircumflex -18\r\nKPX racute odieresis -18\r\nKPX racute ograve -18\r\nKPX racute ohungarumlaut -18\r\nKPX racute omacron -18\r\nKPX racute oslash -18\r\nKPX racute otilde -18\r\nKPX racute p -10\r\nKPX racute period -100\r\nKPX racute q -18\r\nKPX racute v -10\r\nKPX rcaron c -18\r\nKPX rcaron cacute -18\r\nKPX rcaron ccaron -18\r\nKPX rcaron ccedilla -18\r\nKPX rcaron comma -92\r\nKPX rcaron e -18\r\nKPX rcaron eacute -18\r\nKPX rcaron ecaron -18\r\nKPX rcaron ecircumflex -18\r\nKPX rcaron edieresis -18\r\nKPX rcaron edotaccent -18\r\nKPX rcaron egrave -18\r\nKPX rcaron emacron -18\r\nKPX rcaron eogonek -18\r\nKPX rcaron g -10\r\nKPX rcaron gbreve -10\r\nKPX rcaron gcommaaccent -10\r\nKPX rcaron hyphen -37\r\nKPX rcaron n -15\r\nKPX rcaron nacute -15\r\nKPX rcaron ncaron -15\r\nKPX rcaron ncommaaccent -15\r\nKPX rcaron ntilde -15\r\nKPX rcaron o -18\r\nKPX rcaron oacute -18\r\nKPX rcaron ocircumflex -18\r\nKPX rcaron odieresis -18\r\nKPX rcaron ograve -18\r\nKPX rcaron ohungarumlaut -18\r\nKPX rcaron omacron -18\r\nKPX rcaron oslash -18\r\nKPX rcaron otilde -18\r\nKPX rcaron p -10\r\nKPX rcaron period -100\r\nKPX rcaron q -18\r\nKPX rcaron v -10\r\nKPX rcommaaccent c -18\r\nKPX rcommaaccent cacute -18\r\nKPX rcommaaccent ccaron -18\r\nKPX rcommaaccent ccedilla -18\r\nKPX rcommaaccent comma -92\r\nKPX rcommaaccent e -18\r\nKPX rcommaaccent eacute -18\r\nKPX rcommaaccent ecaron -18\r\nKPX rcommaaccent ecircumflex -18\r\nKPX rcommaaccent edieresis -18\r\nKPX rcommaaccent edotaccent -18\r\nKPX rcommaaccent egrave -18\r\nKPX rcommaaccent emacron -18\r\nKPX rcommaaccent eogonek -18\r\nKPX rcommaaccent g -10\r\nKPX rcommaaccent gbreve -10\r\nKPX rcommaaccent gcommaaccent -10\r\nKPX rcommaaccent hyphen -37\r\nKPX rcommaaccent n -15\r\nKPX rcommaaccent nacute -15\r\nKPX rcommaaccent ncaron -15\r\nKPX rcommaaccent ncommaaccent -15\r\nKPX rcommaaccent ntilde -15\r\nKPX rcommaaccent o -18\r\nKPX rcommaaccent oacute -18\r\nKPX rcommaaccent ocircumflex -18\r\nKPX rcommaaccent odieresis -18\r\nKPX rcommaaccent ograve -18\r\nKPX rcommaaccent ohungarumlaut -18\r\nKPX rcommaaccent omacron -18\r\nKPX rcommaaccent oslash -18\r\nKPX rcommaaccent otilde -18\r\nKPX rcommaaccent p -10\r\nKPX rcommaaccent period -100\r\nKPX rcommaaccent q -18\r\nKPX rcommaaccent v -10\r\nKPX space A -55\r\nKPX space Aacute -55\r\nKPX space Abreve -55\r\nKPX space Acircumflex -55\r\nKPX space Adieresis -55\r\nKPX space Agrave -55\r\nKPX space Amacron -55\r\nKPX space Aogonek -55\r\nKPX space Aring -55\r\nKPX space Atilde -55\r\nKPX space T -30\r\nKPX space Tcaron -30\r\nKPX space Tcommaaccent -30\r\nKPX space V -45\r\nKPX space W -30\r\nKPX space Y -55\r\nKPX space Yacute -55\r\nKPX space Ydieresis -55\r\nKPX v a -10\r\nKPX v aacute -10\r\nKPX v abreve -10\r\nKPX v acircumflex -10\r\nKPX v adieresis -10\r\nKPX v agrave -10\r\nKPX v amacron -10\r\nKPX v aogonek -10\r\nKPX v aring -10\r\nKPX v atilde -10\r\nKPX v comma -55\r\nKPX v e -10\r\nKPX v eacute -10\r\nKPX v ecaron -10\r\nKPX v ecircumflex -10\r\nKPX v edieresis -10\r\nKPX v edotaccent -10\r\nKPX v egrave -10\r\nKPX v emacron -10\r\nKPX v eogonek -10\r\nKPX v o -10\r\nKPX v oacute -10\r\nKPX v ocircumflex -10\r\nKPX v odieresis -10\r\nKPX v ograve -10\r\nKPX v ohungarumlaut -10\r\nKPX v omacron -10\r\nKPX v oslash -10\r\nKPX v otilde -10\r\nKPX v period -70\r\nKPX w comma -55\r\nKPX w o -10\r\nKPX w oacute -10\r\nKPX w ocircumflex -10\r\nKPX w odieresis -10\r\nKPX w ograve -10\r\nKPX w ohungarumlaut -10\r\nKPX w omacron -10\r\nKPX w oslash -10\r\nKPX w otilde -10\r\nKPX w period -70\r\nKPX y comma -55\r\nKPX y e -10\r\nKPX y eacute -10\r\nKPX y ecaron -10\r\nKPX y ecircumflex -10\r\nKPX y edieresis -10\r\nKPX y edotaccent -10\r\nKPX y egrave -10\r\nKPX y emacron -10\r\nKPX y eogonek -10\r\nKPX y o -25\r\nKPX y oacute -25\r\nKPX y ocircumflex -25\r\nKPX y odieresis -25\r\nKPX y ograve -25\r\nKPX y ohungarumlaut -25\r\nKPX y omacron -25\r\nKPX y oslash -25\r\nKPX y otilde -25\r\nKPX y period -70\r\nKPX yacute comma -55\r\nKPX yacute e -10\r\nKPX yacute eacute -10\r\nKPX yacute ecaron -10\r\nKPX yacute ecircumflex -10\r\nKPX yacute edieresis -10\r\nKPX yacute edotaccent -10\r\nKPX yacute egrave -10\r\nKPX yacute emacron -10\r\nKPX yacute eogonek -10\r\nKPX yacute o -25\r\nKPX yacute oacute -25\r\nKPX yacute ocircumflex -25\r\nKPX yacute odieresis -25\r\nKPX yacute ograve -25\r\nKPX yacute ohungarumlaut -25\r\nKPX yacute omacron -25\r\nKPX yacute oslash -25\r\nKPX yacute otilde -25\r\nKPX yacute period -70\r\nKPX ydieresis comma -55\r\nKPX ydieresis e -10\r\nKPX ydieresis eacute -10\r\nKPX ydieresis ecaron -10\r\nKPX ydieresis ecircumflex -10\r\nKPX ydieresis edieresis -10\r\nKPX ydieresis edotaccent -10\r\nKPX ydieresis egrave -10\r\nKPX ydieresis emacron -10\r\nKPX ydieresis eogonek -10\r\nKPX ydieresis o -25\r\nKPX ydieresis oacute -25\r\nKPX ydieresis ocircumflex -25\r\nKPX ydieresis odieresis -25\r\nKPX ydieresis ograve -25\r\nKPX ydieresis ohungarumlaut -25\r\nKPX ydieresis omacron -25\r\nKPX ydieresis oslash -25\r\nKPX ydieresis otilde -25\r\nKPX ydieresis period -70\r\nEndKernPairs\r\nEndKernData\r\nEndFontMetrics\r\n",
  'Times-Italic.afm': "StartFontMetrics 4.1\r\nComment Copyright (c) 1985, 1987, 1989, 1990, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.\r\nComment Creation Date: Thu May  1 12:56:55 1997\r\nComment UniqueID 43067\r\nComment VMusage 47727 58752\r\nFontName Times-Italic\r\nFullName Times Italic\r\nFamilyName Times\r\nWeight Medium\r\nItalicAngle -15.5\r\nIsFixedPitch false\r\nCharacterSet ExtendedRoman\r\nFontBBox -169 -217 1010 883 \r\nUnderlinePosition -100\r\nUnderlineThickness 50\r\nVersion 002.000\r\nNotice Copyright (c) 1985, 1987, 1989, 1990, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.Times is a trademark of Linotype-Hell AG and/or its subsidiaries.\r\nEncodingScheme AdobeStandardEncoding\r\nCapHeight 653\r\nXHeight 441\r\nAscender 683\r\nDescender -217\r\nStdHW 32\r\nStdVW 76\r\nStartCharMetrics 315\r\nC 32 ; WX 250 ; N space ; B 0 0 0 0 ;\r\nC 33 ; WX 333 ; N exclam ; B 39 -11 302 667 ;\r\nC 34 ; WX 420 ; N quotedbl ; B 144 421 432 666 ;\r\nC 35 ; WX 500 ; N numbersign ; B 2 0 540 676 ;\r\nC 36 ; WX 500 ; N dollar ; B 31 -89 497 731 ;\r\nC 37 ; WX 833 ; N percent ; B 79 -13 790 676 ;\r\nC 38 ; WX 778 ; N ampersand ; B 76 -18 723 666 ;\r\nC 39 ; WX 333 ; N quoteright ; B 151 436 290 666 ;\r\nC 40 ; WX 333 ; N parenleft ; B 42 -181 315 669 ;\r\nC 41 ; WX 333 ; N parenright ; B 16 -180 289 669 ;\r\nC 42 ; WX 500 ; N asterisk ; B 128 255 492 666 ;\r\nC 43 ; WX 675 ; N plus ; B 86 0 590 506 ;\r\nC 44 ; WX 250 ; N comma ; B -4 -129 135 101 ;\r\nC 45 ; WX 333 ; N hyphen ; B 49 192 282 255 ;\r\nC 46 ; WX 250 ; N period ; B 27 -11 138 100 ;\r\nC 47 ; WX 278 ; N slash ; B -65 -18 386 666 ;\r\nC 48 ; WX 500 ; N zero ; B 32 -7 497 676 ;\r\nC 49 ; WX 500 ; N one ; B 49 0 409 676 ;\r\nC 50 ; WX 500 ; N two ; B 12 0 452 676 ;\r\nC 51 ; WX 500 ; N three ; B 15 -7 465 676 ;\r\nC 52 ; WX 500 ; N four ; B 1 0 479 676 ;\r\nC 53 ; WX 500 ; N five ; B 15 -7 491 666 ;\r\nC 54 ; WX 500 ; N six ; B 30 -7 521 686 ;\r\nC 55 ; WX 500 ; N seven ; B 75 -8 537 666 ;\r\nC 56 ; WX 500 ; N eight ; B 30 -7 493 676 ;\r\nC 57 ; WX 500 ; N nine ; B 23 -17 492 676 ;\r\nC 58 ; WX 333 ; N colon ; B 50 -11 261 441 ;\r\nC 59 ; WX 333 ; N semicolon ; B 27 -129 261 441 ;\r\nC 60 ; WX 675 ; N less ; B 84 -8 592 514 ;\r\nC 61 ; WX 675 ; N equal ; B 86 120 590 386 ;\r\nC 62 ; WX 675 ; N greater ; B 84 -8 592 514 ;\r\nC 63 ; WX 500 ; N question ; B 132 -12 472 664 ;\r\nC 64 ; WX 920 ; N at ; B 118 -18 806 666 ;\r\nC 65 ; WX 611 ; N A ; B -51 0 564 668 ;\r\nC 66 ; WX 611 ; N B ; B -8 0 588 653 ;\r\nC 67 ; WX 667 ; N C ; B 66 -18 689 666 ;\r\nC 68 ; WX 722 ; N D ; B -8 0 700 653 ;\r\nC 69 ; WX 611 ; N E ; B -1 0 634 653 ;\r\nC 70 ; WX 611 ; N F ; B 8 0 645 653 ;\r\nC 71 ; WX 722 ; N G ; B 52 -18 722 666 ;\r\nC 72 ; WX 722 ; N H ; B -8 0 767 653 ;\r\nC 73 ; WX 333 ; N I ; B -8 0 384 653 ;\r\nC 74 ; WX 444 ; N J ; B -6 -18 491 653 ;\r\nC 75 ; WX 667 ; N K ; B 7 0 722 653 ;\r\nC 76 ; WX 556 ; N L ; B -8 0 559 653 ;\r\nC 77 ; WX 833 ; N M ; B -18 0 873 653 ;\r\nC 78 ; WX 667 ; N N ; B -20 -15 727 653 ;\r\nC 79 ; WX 722 ; N O ; B 60 -18 699 666 ;\r\nC 80 ; WX 611 ; N P ; B 0 0 605 653 ;\r\nC 81 ; WX 722 ; N Q ; B 59 -182 699 666 ;\r\nC 82 ; WX 611 ; N R ; B -13 0 588 653 ;\r\nC 83 ; WX 500 ; N S ; B 17 -18 508 667 ;\r\nC 84 ; WX 556 ; N T ; B 59 0 633 653 ;\r\nC 85 ; WX 722 ; N U ; B 102 -18 765 653 ;\r\nC 86 ; WX 611 ; N V ; B 76 -18 688 653 ;\r\nC 87 ; WX 833 ; N W ; B 71 -18 906 653 ;\r\nC 88 ; WX 611 ; N X ; B -29 0 655 653 ;\r\nC 89 ; WX 556 ; N Y ; B 78 0 633 653 ;\r\nC 90 ; WX 556 ; N Z ; B -6 0 606 653 ;\r\nC 91 ; WX 389 ; N bracketleft ; B 21 -153 391 663 ;\r\nC 92 ; WX 278 ; N backslash ; B -41 -18 319 666 ;\r\nC 93 ; WX 389 ; N bracketright ; B 12 -153 382 663 ;\r\nC 94 ; WX 422 ; N asciicircum ; B 0 301 422 666 ;\r\nC 95 ; WX 500 ; N underscore ; B 0 -125 500 -75 ;\r\nC 96 ; WX 333 ; N quoteleft ; B 171 436 310 666 ;\r\nC 97 ; WX 500 ; N a ; B 17 -11 476 441 ;\r\nC 98 ; WX 500 ; N b ; B 23 -11 473 683 ;\r\nC 99 ; WX 444 ; N c ; B 30 -11 425 441 ;\r\nC 100 ; WX 500 ; N d ; B 15 -13 527 683 ;\r\nC 101 ; WX 444 ; N e ; B 31 -11 412 441 ;\r\nC 102 ; WX 278 ; N f ; B -147 -207 424 678 ; L i fi ; L l fl ;\r\nC 103 ; WX 500 ; N g ; B 8 -206 472 441 ;\r\nC 104 ; WX 500 ; N h ; B 19 -9 478 683 ;\r\nC 105 ; WX 278 ; N i ; B 49 -11 264 654 ;\r\nC 106 ; WX 278 ; N j ; B -124 -207 276 654 ;\r\nC 107 ; WX 444 ; N k ; B 14 -11 461 683 ;\r\nC 108 ; WX 278 ; N l ; B 41 -11 279 683 ;\r\nC 109 ; WX 722 ; N m ; B 12 -9 704 441 ;\r\nC 110 ; WX 500 ; N n ; B 14 -9 474 441 ;\r\nC 111 ; WX 500 ; N o ; B 27 -11 468 441 ;\r\nC 112 ; WX 500 ; N p ; B -75 -205 469 441 ;\r\nC 113 ; WX 500 ; N q ; B 25 -209 483 441 ;\r\nC 114 ; WX 389 ; N r ; B 45 0 412 441 ;\r\nC 115 ; WX 389 ; N s ; B 16 -13 366 442 ;\r\nC 116 ; WX 278 ; N t ; B 37 -11 296 546 ;\r\nC 117 ; WX 500 ; N u ; B 42 -11 475 441 ;\r\nC 118 ; WX 444 ; N v ; B 21 -18 426 441 ;\r\nC 119 ; WX 667 ; N w ; B 16 -18 648 441 ;\r\nC 120 ; WX 444 ; N x ; B -27 -11 447 441 ;\r\nC 121 ; WX 444 ; N y ; B -24 -206 426 441 ;\r\nC 122 ; WX 389 ; N z ; B -2 -81 380 428 ;\r\nC 123 ; WX 400 ; N braceleft ; B 51 -177 407 687 ;\r\nC 124 ; WX 275 ; N bar ; B 105 -217 171 783 ;\r\nC 125 ; WX 400 ; N braceright ; B -7 -177 349 687 ;\r\nC 126 ; WX 541 ; N asciitilde ; B 40 183 502 323 ;\r\nC 161 ; WX 389 ; N exclamdown ; B 59 -205 322 473 ;\r\nC 162 ; WX 500 ; N cent ; B 77 -143 472 560 ;\r\nC 163 ; WX 500 ; N sterling ; B 10 -6 517 670 ;\r\nC 164 ; WX 167 ; N fraction ; B -169 -10 337 676 ;\r\nC 165 ; WX 500 ; N yen ; B 27 0 603 653 ;\r\nC 166 ; WX 500 ; N florin ; B 25 -182 507 682 ;\r\nC 167 ; WX 500 ; N section ; B 53 -162 461 666 ;\r\nC 168 ; WX 500 ; N currency ; B -22 53 522 597 ;\r\nC 169 ; WX 214 ; N quotesingle ; B 132 421 241 666 ;\r\nC 170 ; WX 556 ; N quotedblleft ; B 166 436 514 666 ;\r\nC 171 ; WX 500 ; N guillemotleft ; B 53 37 445 403 ;\r\nC 172 ; WX 333 ; N guilsinglleft ; B 51 37 281 403 ;\r\nC 173 ; WX 333 ; N guilsinglright ; B 52 37 282 403 ;\r\nC 174 ; WX 500 ; N fi ; B -141 -207 481 681 ;\r\nC 175 ; WX 500 ; N fl ; B -141 -204 518 682 ;\r\nC 177 ; WX 500 ; N endash ; B -6 197 505 243 ;\r\nC 178 ; WX 500 ; N dagger ; B 101 -159 488 666 ;\r\nC 179 ; WX 500 ; N daggerdbl ; B 22 -143 491 666 ;\r\nC 180 ; WX 250 ; N periodcentered ; B 70 199 181 310 ;\r\nC 182 ; WX 523 ; N paragraph ; B 55 -123 616 653 ;\r\nC 183 ; WX 350 ; N bullet ; B 40 191 310 461 ;\r\nC 184 ; WX 333 ; N quotesinglbase ; B 44 -129 183 101 ;\r\nC 185 ; WX 556 ; N quotedblbase ; B 57 -129 405 101 ;\r\nC 186 ; WX 556 ; N quotedblright ; B 151 436 499 666 ;\r\nC 187 ; WX 500 ; N guillemotright ; B 55 37 447 403 ;\r\nC 188 ; WX 889 ; N ellipsis ; B 57 -11 762 100 ;\r\nC 189 ; WX 1000 ; N perthousand ; B 25 -19 1010 706 ;\r\nC 191 ; WX 500 ; N questiondown ; B 28 -205 368 471 ;\r\nC 193 ; WX 333 ; N grave ; B 121 492 311 664 ;\r\nC 194 ; WX 333 ; N acute ; B 180 494 403 664 ;\r\nC 195 ; WX 333 ; N circumflex ; B 91 492 385 661 ;\r\nC 196 ; WX 333 ; N tilde ; B 100 517 427 624 ;\r\nC 197 ; WX 333 ; N macron ; B 99 532 411 583 ;\r\nC 198 ; WX 333 ; N breve ; B 117 492 418 650 ;\r\nC 199 ; WX 333 ; N dotaccent ; B 207 548 305 646 ;\r\nC 200 ; WX 333 ; N dieresis ; B 107 548 405 646 ;\r\nC 202 ; WX 333 ; N ring ; B 155 492 355 691 ;\r\nC 203 ; WX 333 ; N cedilla ; B -30 -217 182 0 ;\r\nC 205 ; WX 333 ; N hungarumlaut ; B 93 494 486 664 ;\r\nC 206 ; WX 333 ; N ogonek ; B 20 -169 203 40 ;\r\nC 207 ; WX 333 ; N caron ; B 121 492 426 661 ;\r\nC 208 ; WX 889 ; N emdash ; B -6 197 894 243 ;\r\nC 225 ; WX 889 ; N AE ; B -27 0 911 653 ;\r\nC 227 ; WX 276 ; N ordfeminine ; B 42 406 352 676 ;\r\nC 232 ; WX 556 ; N Lslash ; B -8 0 559 653 ;\r\nC 233 ; WX 722 ; N Oslash ; B 60 -105 699 722 ;\r\nC 234 ; WX 944 ; N OE ; B 49 -8 964 666 ;\r\nC 235 ; WX 310 ; N ordmasculine ; B 67 406 362 676 ;\r\nC 241 ; WX 667 ; N ae ; B 23 -11 640 441 ;\r\nC 245 ; WX 278 ; N dotlessi ; B 49 -11 235 441 ;\r\nC 248 ; WX 278 ; N lslash ; B 41 -11 312 683 ;\r\nC 249 ; WX 500 ; N oslash ; B 28 -135 469 554 ;\r\nC 250 ; WX 667 ; N oe ; B 20 -12 646 441 ;\r\nC 251 ; WX 500 ; N germandbls ; B -168 -207 493 679 ;\r\nC -1 ; WX 333 ; N Idieresis ; B -8 0 435 818 ;\r\nC -1 ; WX 444 ; N eacute ; B 31 -11 459 664 ;\r\nC -1 ; WX 500 ; N abreve ; B 17 -11 502 650 ;\r\nC -1 ; WX 500 ; N uhungarumlaut ; B 42 -11 580 664 ;\r\nC -1 ; WX 444 ; N ecaron ; B 31 -11 482 661 ;\r\nC -1 ; WX 556 ; N Ydieresis ; B 78 0 633 818 ;\r\nC -1 ; WX 675 ; N divide ; B 86 -11 590 517 ;\r\nC -1 ; WX 556 ; N Yacute ; B 78 0 633 876 ;\r\nC -1 ; WX 611 ; N Acircumflex ; B -51 0 564 873 ;\r\nC -1 ; WX 500 ; N aacute ; B 17 -11 487 664 ;\r\nC -1 ; WX 722 ; N Ucircumflex ; B 102 -18 765 873 ;\r\nC -1 ; WX 444 ; N yacute ; B -24 -206 459 664 ;\r\nC -1 ; WX 389 ; N scommaaccent ; B 16 -217 366 442 ;\r\nC -1 ; WX 444 ; N ecircumflex ; B 31 -11 441 661 ;\r\nC -1 ; WX 722 ; N Uring ; B 102 -18 765 883 ;\r\nC -1 ; WX 722 ; N Udieresis ; B 102 -18 765 818 ;\r\nC -1 ; WX 500 ; N aogonek ; B 17 -169 476 441 ;\r\nC -1 ; WX 722 ; N Uacute ; B 102 -18 765 876 ;\r\nC -1 ; WX 500 ; N uogonek ; B 42 -169 477 441 ;\r\nC -1 ; WX 611 ; N Edieresis ; B -1 0 634 818 ;\r\nC -1 ; WX 722 ; N Dcroat ; B -8 0 700 653 ;\r\nC -1 ; WX 250 ; N commaaccent ; B 8 -217 133 -50 ;\r\nC -1 ; WX 760 ; N copyright ; B 41 -18 719 666 ;\r\nC -1 ; WX 611 ; N Emacron ; B -1 0 634 795 ;\r\nC -1 ; WX 444 ; N ccaron ; B 30 -11 482 661 ;\r\nC -1 ; WX 500 ; N aring ; B 17 -11 476 691 ;\r\nC -1 ; WX 667 ; N Ncommaaccent ; B -20 -187 727 653 ;\r\nC -1 ; WX 278 ; N lacute ; B 41 -11 395 876 ;\r\nC -1 ; WX 500 ; N agrave ; B 17 -11 476 664 ;\r\nC -1 ; WX 556 ; N Tcommaaccent ; B 59 -217 633 653 ;\r\nC -1 ; WX 667 ; N Cacute ; B 66 -18 690 876 ;\r\nC -1 ; WX 500 ; N atilde ; B 17 -11 511 624 ;\r\nC -1 ; WX 611 ; N Edotaccent ; B -1 0 634 818 ;\r\nC -1 ; WX 389 ; N scaron ; B 16 -13 454 661 ;\r\nC -1 ; WX 389 ; N scedilla ; B 16 -217 366 442 ;\r\nC -1 ; WX 278 ; N iacute ; B 49 -11 355 664 ;\r\nC -1 ; WX 471 ; N lozenge ; B 13 0 459 724 ;\r\nC -1 ; WX 611 ; N Rcaron ; B -13 0 588 873 ;\r\nC -1 ; WX 722 ; N Gcommaaccent ; B 52 -217 722 666 ;\r\nC -1 ; WX 500 ; N ucircumflex ; B 42 -11 475 661 ;\r\nC -1 ; WX 500 ; N acircumflex ; B 17 -11 476 661 ;\r\nC -1 ; WX 611 ; N Amacron ; B -51 0 564 795 ;\r\nC -1 ; WX 389 ; N rcaron ; B 45 0 434 661 ;\r\nC -1 ; WX 444 ; N ccedilla ; B 30 -217 425 441 ;\r\nC -1 ; WX 556 ; N Zdotaccent ; B -6 0 606 818 ;\r\nC -1 ; WX 611 ; N Thorn ; B 0 0 569 653 ;\r\nC -1 ; WX 722 ; N Omacron ; B 60 -18 699 795 ;\r\nC -1 ; WX 611 ; N Racute ; B -13 0 588 876 ;\r\nC -1 ; WX 500 ; N Sacute ; B 17 -18 508 876 ;\r\nC -1 ; WX 544 ; N dcaron ; B 15 -13 658 683 ;\r\nC -1 ; WX 722 ; N Umacron ; B 102 -18 765 795 ;\r\nC -1 ; WX 500 ; N uring ; B 42 -11 475 691 ;\r\nC -1 ; WX 300 ; N threesuperior ; B 43 268 339 676 ;\r\nC -1 ; WX 722 ; N Ograve ; B 60 -18 699 876 ;\r\nC -1 ; WX 611 ; N Agrave ; B -51 0 564 876 ;\r\nC -1 ; WX 611 ; N Abreve ; B -51 0 564 862 ;\r\nC -1 ; WX 675 ; N multiply ; B 93 8 582 497 ;\r\nC -1 ; WX 500 ; N uacute ; B 42 -11 477 664 ;\r\nC -1 ; WX 556 ; N Tcaron ; B 59 0 633 873 ;\r\nC -1 ; WX 476 ; N partialdiff ; B 17 -38 459 710 ;\r\nC -1 ; WX 444 ; N ydieresis ; B -24 -206 441 606 ;\r\nC -1 ; WX 667 ; N Nacute ; B -20 -15 727 876 ;\r\nC -1 ; WX 278 ; N icircumflex ; B 33 -11 327 661 ;\r\nC -1 ; WX 611 ; N Ecircumflex ; B -1 0 634 873 ;\r\nC -1 ; WX 500 ; N adieresis ; B 17 -11 489 606 ;\r\nC -1 ; WX 444 ; N edieresis ; B 31 -11 451 606 ;\r\nC -1 ; WX 444 ; N cacute ; B 30 -11 459 664 ;\r\nC -1 ; WX 500 ; N nacute ; B 14 -9 477 664 ;\r\nC -1 ; WX 500 ; N umacron ; B 42 -11 485 583 ;\r\nC -1 ; WX 667 ; N Ncaron ; B -20 -15 727 873 ;\r\nC -1 ; WX 333 ; N Iacute ; B -8 0 433 876 ;\r\nC -1 ; WX 675 ; N plusminus ; B 86 0 590 506 ;\r\nC -1 ; WX 275 ; N brokenbar ; B 105 -142 171 708 ;\r\nC -1 ; WX 760 ; N registered ; B 41 -18 719 666 ;\r\nC -1 ; WX 722 ; N Gbreve ; B 52 -18 722 862 ;\r\nC -1 ; WX 333 ; N Idotaccent ; B -8 0 384 818 ;\r\nC -1 ; WX 600 ; N summation ; B 15 -10 585 706 ;\r\nC -1 ; WX 611 ; N Egrave ; B -1 0 634 876 ;\r\nC -1 ; WX 389 ; N racute ; B 45 0 431 664 ;\r\nC -1 ; WX 500 ; N omacron ; B 27 -11 495 583 ;\r\nC -1 ; WX 556 ; N Zacute ; B -6 0 606 876 ;\r\nC -1 ; WX 556 ; N Zcaron ; B -6 0 606 873 ;\r\nC -1 ; WX 549 ; N greaterequal ; B 26 0 523 658 ;\r\nC -1 ; WX 722 ; N Eth ; B -8 0 700 653 ;\r\nC -1 ; WX 667 ; N Ccedilla ; B 66 -217 689 666 ;\r\nC -1 ; WX 278 ; N lcommaaccent ; B 22 -217 279 683 ;\r\nC -1 ; WX 300 ; N tcaron ; B 37 -11 407 681 ;\r\nC -1 ; WX 444 ; N eogonek ; B 31 -169 412 441 ;\r\nC -1 ; WX 722 ; N Uogonek ; B 102 -184 765 653 ;\r\nC -1 ; WX 611 ; N Aacute ; B -51 0 564 876 ;\r\nC -1 ; WX 611 ; N Adieresis ; B -51 0 564 818 ;\r\nC -1 ; WX 444 ; N egrave ; B 31 -11 412 664 ;\r\nC -1 ; WX 389 ; N zacute ; B -2 -81 431 664 ;\r\nC -1 ; WX 278 ; N iogonek ; B 49 -169 264 654 ;\r\nC -1 ; WX 722 ; N Oacute ; B 60 -18 699 876 ;\r\nC -1 ; WX 500 ; N oacute ; B 27 -11 487 664 ;\r\nC -1 ; WX 500 ; N amacron ; B 17 -11 495 583 ;\r\nC -1 ; WX 389 ; N sacute ; B 16 -13 431 664 ;\r\nC -1 ; WX 278 ; N idieresis ; B 49 -11 352 606 ;\r\nC -1 ; WX 722 ; N Ocircumflex ; B 60 -18 699 873 ;\r\nC -1 ; WX 722 ; N Ugrave ; B 102 -18 765 876 ;\r\nC -1 ; WX 612 ; N Delta ; B 6 0 608 688 ;\r\nC -1 ; WX 500 ; N thorn ; B -75 -205 469 683 ;\r\nC -1 ; WX 300 ; N twosuperior ; B 33 271 324 676 ;\r\nC -1 ; WX 722 ; N Odieresis ; B 60 -18 699 818 ;\r\nC -1 ; WX 500 ; N mu ; B -30 -209 497 428 ;\r\nC -1 ; WX 278 ; N igrave ; B 49 -11 284 664 ;\r\nC -1 ; WX 500 ; N ohungarumlaut ; B 27 -11 590 664 ;\r\nC -1 ; WX 611 ; N Eogonek ; B -1 -169 634 653 ;\r\nC -1 ; WX 500 ; N dcroat ; B 15 -13 572 683 ;\r\nC -1 ; WX 750 ; N threequarters ; B 23 -10 736 676 ;\r\nC -1 ; WX 500 ; N Scedilla ; B 17 -217 508 667 ;\r\nC -1 ; WX 300 ; N lcaron ; B 41 -11 407 683 ;\r\nC -1 ; WX 667 ; N Kcommaaccent ; B 7 -217 722 653 ;\r\nC -1 ; WX 556 ; N Lacute ; B -8 0 559 876 ;\r\nC -1 ; WX 980 ; N trademark ; B 30 247 957 653 ;\r\nC -1 ; WX 444 ; N edotaccent ; B 31 -11 412 606 ;\r\nC -1 ; WX 333 ; N Igrave ; B -8 0 384 876 ;\r\nC -1 ; WX 333 ; N Imacron ; B -8 0 441 795 ;\r\nC -1 ; WX 611 ; N Lcaron ; B -8 0 586 653 ;\r\nC -1 ; WX 750 ; N onehalf ; B 34 -10 749 676 ;\r\nC -1 ; WX 549 ; N lessequal ; B 26 0 523 658 ;\r\nC -1 ; WX 500 ; N ocircumflex ; B 27 -11 468 661 ;\r\nC -1 ; WX 500 ; N ntilde ; B 14 -9 476 624 ;\r\nC -1 ; WX 722 ; N Uhungarumlaut ; B 102 -18 765 876 ;\r\nC -1 ; WX 611 ; N Eacute ; B -1 0 634 876 ;\r\nC -1 ; WX 444 ; N emacron ; B 31 -11 457 583 ;\r\nC -1 ; WX 500 ; N gbreve ; B 8 -206 487 650 ;\r\nC -1 ; WX 750 ; N onequarter ; B 33 -10 736 676 ;\r\nC -1 ; WX 500 ; N Scaron ; B 17 -18 520 873 ;\r\nC -1 ; WX 500 ; N Scommaaccent ; B 17 -217 508 667 ;\r\nC -1 ; WX 722 ; N Ohungarumlaut ; B 60 -18 699 876 ;\r\nC -1 ; WX 400 ; N degree ; B 101 390 387 676 ;\r\nC -1 ; WX 500 ; N ograve ; B 27 -11 468 664 ;\r\nC -1 ; WX 667 ; N Ccaron ; B 66 -18 689 873 ;\r\nC -1 ; WX 500 ; N ugrave ; B 42 -11 475 664 ;\r\nC -1 ; WX 453 ; N radical ; B 2 -60 452 768 ;\r\nC -1 ; WX 722 ; N Dcaron ; B -8 0 700 873 ;\r\nC -1 ; WX 389 ; N rcommaaccent ; B -3 -217 412 441 ;\r\nC -1 ; WX 667 ; N Ntilde ; B -20 -15 727 836 ;\r\nC -1 ; WX 500 ; N otilde ; B 27 -11 496 624 ;\r\nC -1 ; WX 611 ; N Rcommaaccent ; B -13 -187 588 653 ;\r\nC -1 ; WX 556 ; N Lcommaaccent ; B -8 -217 559 653 ;\r\nC -1 ; WX 611 ; N Atilde ; B -51 0 566 836 ;\r\nC -1 ; WX 611 ; N Aogonek ; B -51 -169 566 668 ;\r\nC -1 ; WX 611 ; N Aring ; B -51 0 564 883 ;\r\nC -1 ; WX 722 ; N Otilde ; B 60 -18 699 836 ;\r\nC -1 ; WX 389 ; N zdotaccent ; B -2 -81 380 606 ;\r\nC -1 ; WX 611 ; N Ecaron ; B -1 0 634 873 ;\r\nC -1 ; WX 333 ; N Iogonek ; B -8 -169 384 653 ;\r\nC -1 ; WX 444 ; N kcommaaccent ; B 14 -187 461 683 ;\r\nC -1 ; WX 675 ; N minus ; B 86 220 590 286 ;\r\nC -1 ; WX 333 ; N Icircumflex ; B -8 0 425 873 ;\r\nC -1 ; WX 500 ; N ncaron ; B 14 -9 510 661 ;\r\nC -1 ; WX 278 ; N tcommaaccent ; B 2 -217 296 546 ;\r\nC -1 ; WX 675 ; N logicalnot ; B 86 108 590 386 ;\r\nC -1 ; WX 500 ; N odieresis ; B 27 -11 489 606 ;\r\nC -1 ; WX 500 ; N udieresis ; B 42 -11 479 606 ;\r\nC -1 ; WX 549 ; N notequal ; B 12 -29 537 541 ;\r\nC -1 ; WX 500 ; N gcommaaccent ; B 8 -206 472 706 ;\r\nC -1 ; WX 500 ; N eth ; B 27 -11 482 683 ;\r\nC -1 ; WX 389 ; N zcaron ; B -2 -81 434 661 ;\r\nC -1 ; WX 500 ; N ncommaaccent ; B 14 -187 474 441 ;\r\nC -1 ; WX 300 ; N onesuperior ; B 43 271 284 676 ;\r\nC -1 ; WX 278 ; N imacron ; B 46 -11 311 583 ;\r\nC -1 ; WX 500 ; N Euro ; B 0 0 0 0 ;\r\nEndCharMetrics\r\nStartKernData\r\nStartKernPairs 2321\r\nKPX A C -30\r\nKPX A Cacute -30\r\nKPX A Ccaron -30\r\nKPX A Ccedilla -30\r\nKPX A G -35\r\nKPX A Gbreve -35\r\nKPX A Gcommaaccent -35\r\nKPX A O -40\r\nKPX A Oacute -40\r\nKPX A Ocircumflex -40\r\nKPX A Odieresis -40\r\nKPX A Ograve -40\r\nKPX A Ohungarumlaut -40\r\nKPX A Omacron -40\r\nKPX A Oslash -40\r\nKPX A Otilde -40\r\nKPX A Q -40\r\nKPX A T -37\r\nKPX A Tcaron -37\r\nKPX A Tcommaaccent -37\r\nKPX A U -50\r\nKPX A Uacute -50\r\nKPX A Ucircumflex -50\r\nKPX A Udieresis -50\r\nKPX A Ugrave -50\r\nKPX A Uhungarumlaut -50\r\nKPX A Umacron -50\r\nKPX A Uogonek -50\r\nKPX A Uring -50\r\nKPX A V -105\r\nKPX A W -95\r\nKPX A Y -55\r\nKPX A Yacute -55\r\nKPX A Ydieresis -55\r\nKPX A quoteright -37\r\nKPX A u -20\r\nKPX A uacute -20\r\nKPX A ucircumflex -20\r\nKPX A udieresis -20\r\nKPX A ugrave -20\r\nKPX A uhungarumlaut -20\r\nKPX A umacron -20\r\nKPX A uogonek -20\r\nKPX A uring -20\r\nKPX A v -55\r\nKPX A w -55\r\nKPX A y -55\r\nKPX A yacute -55\r\nKPX A ydieresis -55\r\nKPX Aacute C -30\r\nKPX Aacute Cacute -30\r\nKPX Aacute Ccaron -30\r\nKPX Aacute Ccedilla -30\r\nKPX Aacute G -35\r\nKPX Aacute Gbreve -35\r\nKPX Aacute Gcommaaccent -35\r\nKPX Aacute O -40\r\nKPX Aacute Oacute -40\r\nKPX Aacute Ocircumflex -40\r\nKPX Aacute Odieresis -40\r\nKPX Aacute Ograve -40\r\nKPX Aacute Ohungarumlaut -40\r\nKPX Aacute Omacron -40\r\nKPX Aacute Oslash -40\r\nKPX Aacute Otilde -40\r\nKPX Aacute Q -40\r\nKPX Aacute T -37\r\nKPX Aacute Tcaron -37\r\nKPX Aacute Tcommaaccent -37\r\nKPX Aacute U -50\r\nKPX Aacute Uacute -50\r\nKPX Aacute Ucircumflex -50\r\nKPX Aacute Udieresis -50\r\nKPX Aacute Ugrave -50\r\nKPX Aacute Uhungarumlaut -50\r\nKPX Aacute Umacron -50\r\nKPX Aacute Uogonek -50\r\nKPX Aacute Uring -50\r\nKPX Aacute V -105\r\nKPX Aacute W -95\r\nKPX Aacute Y -55\r\nKPX Aacute Yacute -55\r\nKPX Aacute Ydieresis -55\r\nKPX Aacute quoteright -37\r\nKPX Aacute u -20\r\nKPX Aacute uacute -20\r\nKPX Aacute ucircumflex -20\r\nKPX Aacute udieresis -20\r\nKPX Aacute ugrave -20\r\nKPX Aacute uhungarumlaut -20\r\nKPX Aacute umacron -20\r\nKPX Aacute uogonek -20\r\nKPX Aacute uring -20\r\nKPX Aacute v -55\r\nKPX Aacute w -55\r\nKPX Aacute y -55\r\nKPX Aacute yacute -55\r\nKPX Aacute ydieresis -55\r\nKPX Abreve C -30\r\nKPX Abreve Cacute -30\r\nKPX Abreve Ccaron -30\r\nKPX Abreve Ccedilla -30\r\nKPX Abreve G -35\r\nKPX Abreve Gbreve -35\r\nKPX Abreve Gcommaaccent -35\r\nKPX Abreve O -40\r\nKPX Abreve Oacute -40\r\nKPX Abreve Ocircumflex -40\r\nKPX Abreve Odieresis -40\r\nKPX Abreve Ograve -40\r\nKPX Abreve Ohungarumlaut -40\r\nKPX Abreve Omacron -40\r\nKPX Abreve Oslash -40\r\nKPX Abreve Otilde -40\r\nKPX Abreve Q -40\r\nKPX Abreve T -37\r\nKPX Abreve Tcaron -37\r\nKPX Abreve Tcommaaccent -37\r\nKPX Abreve U -50\r\nKPX Abreve Uacute -50\r\nKPX Abreve Ucircumflex -50\r\nKPX Abreve Udieresis -50\r\nKPX Abreve Ugrave -50\r\nKPX Abreve Uhungarumlaut -50\r\nKPX Abreve Umacron -50\r\nKPX Abreve Uogonek -50\r\nKPX Abreve Uring -50\r\nKPX Abreve V -105\r\nKPX Abreve W -95\r\nKPX Abreve Y -55\r\nKPX Abreve Yacute -55\r\nKPX Abreve Ydieresis -55\r\nKPX Abreve quoteright -37\r\nKPX Abreve u -20\r\nKPX Abreve uacute -20\r\nKPX Abreve ucircumflex -20\r\nKPX Abreve udieresis -20\r\nKPX Abreve ugrave -20\r\nKPX Abreve uhungarumlaut -20\r\nKPX Abreve umacron -20\r\nKPX Abreve uogonek -20\r\nKPX Abreve uring -20\r\nKPX Abreve v -55\r\nKPX Abreve w -55\r\nKPX Abreve y -55\r\nKPX Abreve yacute -55\r\nKPX Abreve ydieresis -55\r\nKPX Acircumflex C -30\r\nKPX Acircumflex Cacute -30\r\nKPX Acircumflex Ccaron -30\r\nKPX Acircumflex Ccedilla -30\r\nKPX Acircumflex G -35\r\nKPX Acircumflex Gbreve -35\r\nKPX Acircumflex Gcommaaccent -35\r\nKPX Acircumflex O -40\r\nKPX Acircumflex Oacute -40\r\nKPX Acircumflex Ocircumflex -40\r\nKPX Acircumflex Odieresis -40\r\nKPX Acircumflex Ograve -40\r\nKPX Acircumflex Ohungarumlaut -40\r\nKPX Acircumflex Omacron -40\r\nKPX Acircumflex Oslash -40\r\nKPX Acircumflex Otilde -40\r\nKPX Acircumflex Q -40\r\nKPX Acircumflex T -37\r\nKPX Acircumflex Tcaron -37\r\nKPX Acircumflex Tcommaaccent -37\r\nKPX Acircumflex U -50\r\nKPX Acircumflex Uacute -50\r\nKPX Acircumflex Ucircumflex -50\r\nKPX Acircumflex Udieresis -50\r\nKPX Acircumflex Ugrave -50\r\nKPX Acircumflex Uhungarumlaut -50\r\nKPX Acircumflex Umacron -50\r\nKPX Acircumflex Uogonek -50\r\nKPX Acircumflex Uring -50\r\nKPX Acircumflex V -105\r\nKPX Acircumflex W -95\r\nKPX Acircumflex Y -55\r\nKPX Acircumflex Yacute -55\r\nKPX Acircumflex Ydieresis -55\r\nKPX Acircumflex quoteright -37\r\nKPX Acircumflex u -20\r\nKPX Acircumflex uacute -20\r\nKPX Acircumflex ucircumflex -20\r\nKPX Acircumflex udieresis -20\r\nKPX Acircumflex ugrave -20\r\nKPX Acircumflex uhungarumlaut -20\r\nKPX Acircumflex umacron -20\r\nKPX Acircumflex uogonek -20\r\nKPX Acircumflex uring -20\r\nKPX Acircumflex v -55\r\nKPX Acircumflex w -55\r\nKPX Acircumflex y -55\r\nKPX Acircumflex yacute -55\r\nKPX Acircumflex ydieresis -55\r\nKPX Adieresis C -30\r\nKPX Adieresis Cacute -30\r\nKPX Adieresis Ccaron -30\r\nKPX Adieresis Ccedilla -30\r\nKPX Adieresis G -35\r\nKPX Adieresis Gbreve -35\r\nKPX Adieresis Gcommaaccent -35\r\nKPX Adieresis O -40\r\nKPX Adieresis Oacute -40\r\nKPX Adieresis Ocircumflex -40\r\nKPX Adieresis Odieresis -40\r\nKPX Adieresis Ograve -40\r\nKPX Adieresis Ohungarumlaut -40\r\nKPX Adieresis Omacron -40\r\nKPX Adieresis Oslash -40\r\nKPX Adieresis Otilde -40\r\nKPX Adieresis Q -40\r\nKPX Adieresis T -37\r\nKPX Adieresis Tcaron -37\r\nKPX Adieresis Tcommaaccent -37\r\nKPX Adieresis U -50\r\nKPX Adieresis Uacute -50\r\nKPX Adieresis Ucircumflex -50\r\nKPX Adieresis Udieresis -50\r\nKPX Adieresis Ugrave -50\r\nKPX Adieresis Uhungarumlaut -50\r\nKPX Adieresis Umacron -50\r\nKPX Adieresis Uogonek -50\r\nKPX Adieresis Uring -50\r\nKPX Adieresis V -105\r\nKPX Adieresis W -95\r\nKPX Adieresis Y -55\r\nKPX Adieresis Yacute -55\r\nKPX Adieresis Ydieresis -55\r\nKPX Adieresis quoteright -37\r\nKPX Adieresis u -20\r\nKPX Adieresis uacute -20\r\nKPX Adieresis ucircumflex -20\r\nKPX Adieresis udieresis -20\r\nKPX Adieresis ugrave -20\r\nKPX Adieresis uhungarumlaut -20\r\nKPX Adieresis umacron -20\r\nKPX Adieresis uogonek -20\r\nKPX Adieresis uring -20\r\nKPX Adieresis v -55\r\nKPX Adieresis w -55\r\nKPX Adieresis y -55\r\nKPX Adieresis yacute -55\r\nKPX Adieresis ydieresis -55\r\nKPX Agrave C -30\r\nKPX Agrave Cacute -30\r\nKPX Agrave Ccaron -30\r\nKPX Agrave Ccedilla -30\r\nKPX Agrave G -35\r\nKPX Agrave Gbreve -35\r\nKPX Agrave Gcommaaccent -35\r\nKPX Agrave O -40\r\nKPX Agrave Oacute -40\r\nKPX Agrave Ocircumflex -40\r\nKPX Agrave Odieresis -40\r\nKPX Agrave Ograve -40\r\nKPX Agrave Ohungarumlaut -40\r\nKPX Agrave Omacron -40\r\nKPX Agrave Oslash -40\r\nKPX Agrave Otilde -40\r\nKPX Agrave Q -40\r\nKPX Agrave T -37\r\nKPX Agrave Tcaron -37\r\nKPX Agrave Tcommaaccent -37\r\nKPX Agrave U -50\r\nKPX Agrave Uacute -50\r\nKPX Agrave Ucircumflex -50\r\nKPX Agrave Udieresis -50\r\nKPX Agrave Ugrave -50\r\nKPX Agrave Uhungarumlaut -50\r\nKPX Agrave Umacron -50\r\nKPX Agrave Uogonek -50\r\nKPX Agrave Uring -50\r\nKPX Agrave V -105\r\nKPX Agrave W -95\r\nKPX Agrave Y -55\r\nKPX Agrave Yacute -55\r\nKPX Agrave Ydieresis -55\r\nKPX Agrave quoteright -37\r\nKPX Agrave u -20\r\nKPX Agrave uacute -20\r\nKPX Agrave ucircumflex -20\r\nKPX Agrave udieresis -20\r\nKPX Agrave ugrave -20\r\nKPX Agrave uhungarumlaut -20\r\nKPX Agrave umacron -20\r\nKPX Agrave uogonek -20\r\nKPX Agrave uring -20\r\nKPX Agrave v -55\r\nKPX Agrave w -55\r\nKPX Agrave y -55\r\nKPX Agrave yacute -55\r\nKPX Agrave ydieresis -55\r\nKPX Amacron C -30\r\nKPX Amacron Cacute -30\r\nKPX Amacron Ccaron -30\r\nKPX Amacron Ccedilla -30\r\nKPX Amacron G -35\r\nKPX Amacron Gbreve -35\r\nKPX Amacron Gcommaaccent -35\r\nKPX Amacron O -40\r\nKPX Amacron Oacute -40\r\nKPX Amacron Ocircumflex -40\r\nKPX Amacron Odieresis -40\r\nKPX Amacron Ograve -40\r\nKPX Amacron Ohungarumlaut -40\r\nKPX Amacron Omacron -40\r\nKPX Amacron Oslash -40\r\nKPX Amacron Otilde -40\r\nKPX Amacron Q -40\r\nKPX Amacron T -37\r\nKPX Amacron Tcaron -37\r\nKPX Amacron Tcommaaccent -37\r\nKPX Amacron U -50\r\nKPX Amacron Uacute -50\r\nKPX Amacron Ucircumflex -50\r\nKPX Amacron Udieresis -50\r\nKPX Amacron Ugrave -50\r\nKPX Amacron Uhungarumlaut -50\r\nKPX Amacron Umacron -50\r\nKPX Amacron Uogonek -50\r\nKPX Amacron Uring -50\r\nKPX Amacron V -105\r\nKPX Amacron W -95\r\nKPX Amacron Y -55\r\nKPX Amacron Yacute -55\r\nKPX Amacron Ydieresis -55\r\nKPX Amacron quoteright -37\r\nKPX Amacron u -20\r\nKPX Amacron uacute -20\r\nKPX Amacron ucircumflex -20\r\nKPX Amacron udieresis -20\r\nKPX Amacron ugrave -20\r\nKPX Amacron uhungarumlaut -20\r\nKPX Amacron umacron -20\r\nKPX Amacron uogonek -20\r\nKPX Amacron uring -20\r\nKPX Amacron v -55\r\nKPX Amacron w -55\r\nKPX Amacron y -55\r\nKPX Amacron yacute -55\r\nKPX Amacron ydieresis -55\r\nKPX Aogonek C -30\r\nKPX Aogonek Cacute -30\r\nKPX Aogonek Ccaron -30\r\nKPX Aogonek Ccedilla -30\r\nKPX Aogonek G -35\r\nKPX Aogonek Gbreve -35\r\nKPX Aogonek Gcommaaccent -35\r\nKPX Aogonek O -40\r\nKPX Aogonek Oacute -40\r\nKPX Aogonek Ocircumflex -40\r\nKPX Aogonek Odieresis -40\r\nKPX Aogonek Ograve -40\r\nKPX Aogonek Ohungarumlaut -40\r\nKPX Aogonek Omacron -40\r\nKPX Aogonek Oslash -40\r\nKPX Aogonek Otilde -40\r\nKPX Aogonek Q -40\r\nKPX Aogonek T -37\r\nKPX Aogonek Tcaron -37\r\nKPX Aogonek Tcommaaccent -37\r\nKPX Aogonek U -50\r\nKPX Aogonek Uacute -50\r\nKPX Aogonek Ucircumflex -50\r\nKPX Aogonek Udieresis -50\r\nKPX Aogonek Ugrave -50\r\nKPX Aogonek Uhungarumlaut -50\r\nKPX Aogonek Umacron -50\r\nKPX Aogonek Uogonek -50\r\nKPX Aogonek Uring -50\r\nKPX Aogonek V -105\r\nKPX Aogonek W -95\r\nKPX Aogonek Y -55\r\nKPX Aogonek Yacute -55\r\nKPX Aogonek Ydieresis -55\r\nKPX Aogonek quoteright -37\r\nKPX Aogonek u -20\r\nKPX Aogonek uacute -20\r\nKPX Aogonek ucircumflex -20\r\nKPX Aogonek udieresis -20\r\nKPX Aogonek ugrave -20\r\nKPX Aogonek uhungarumlaut -20\r\nKPX Aogonek umacron -20\r\nKPX Aogonek uogonek -20\r\nKPX Aogonek uring -20\r\nKPX Aogonek v -55\r\nKPX Aogonek w -55\r\nKPX Aogonek y -55\r\nKPX Aogonek yacute -55\r\nKPX Aogonek ydieresis -55\r\nKPX Aring C -30\r\nKPX Aring Cacute -30\r\nKPX Aring Ccaron -30\r\nKPX Aring Ccedilla -30\r\nKPX Aring G -35\r\nKPX Aring Gbreve -35\r\nKPX Aring Gcommaaccent -35\r\nKPX Aring O -40\r\nKPX Aring Oacute -40\r\nKPX Aring Ocircumflex -40\r\nKPX Aring Odieresis -40\r\nKPX Aring Ograve -40\r\nKPX Aring Ohungarumlaut -40\r\nKPX Aring Omacron -40\r\nKPX Aring Oslash -40\r\nKPX Aring Otilde -40\r\nKPX Aring Q -40\r\nKPX Aring T -37\r\nKPX Aring Tcaron -37\r\nKPX Aring Tcommaaccent -37\r\nKPX Aring U -50\r\nKPX Aring Uacute -50\r\nKPX Aring Ucircumflex -50\r\nKPX Aring Udieresis -50\r\nKPX Aring Ugrave -50\r\nKPX Aring Uhungarumlaut -50\r\nKPX Aring Umacron -50\r\nKPX Aring Uogonek -50\r\nKPX Aring Uring -50\r\nKPX Aring V -105\r\nKPX Aring W -95\r\nKPX Aring Y -55\r\nKPX Aring Yacute -55\r\nKPX Aring Ydieresis -55\r\nKPX Aring quoteright -37\r\nKPX Aring u -20\r\nKPX Aring uacute -20\r\nKPX Aring ucircumflex -20\r\nKPX Aring udieresis -20\r\nKPX Aring ugrave -20\r\nKPX Aring uhungarumlaut -20\r\nKPX Aring umacron -20\r\nKPX Aring uogonek -20\r\nKPX Aring uring -20\r\nKPX Aring v -55\r\nKPX Aring w -55\r\nKPX Aring y -55\r\nKPX Aring yacute -55\r\nKPX Aring ydieresis -55\r\nKPX Atilde C -30\r\nKPX Atilde Cacute -30\r\nKPX Atilde Ccaron -30\r\nKPX Atilde Ccedilla -30\r\nKPX Atilde G -35\r\nKPX Atilde Gbreve -35\r\nKPX Atilde Gcommaaccent -35\r\nKPX Atilde O -40\r\nKPX Atilde Oacute -40\r\nKPX Atilde Ocircumflex -40\r\nKPX Atilde Odieresis -40\r\nKPX Atilde Ograve -40\r\nKPX Atilde Ohungarumlaut -40\r\nKPX Atilde Omacron -40\r\nKPX Atilde Oslash -40\r\nKPX Atilde Otilde -40\r\nKPX Atilde Q -40\r\nKPX Atilde T -37\r\nKPX Atilde Tcaron -37\r\nKPX Atilde Tcommaaccent -37\r\nKPX Atilde U -50\r\nKPX Atilde Uacute -50\r\nKPX Atilde Ucircumflex -50\r\nKPX Atilde Udieresis -50\r\nKPX Atilde Ugrave -50\r\nKPX Atilde Uhungarumlaut -50\r\nKPX Atilde Umacron -50\r\nKPX Atilde Uogonek -50\r\nKPX Atilde Uring -50\r\nKPX Atilde V -105\r\nKPX Atilde W -95\r\nKPX Atilde Y -55\r\nKPX Atilde Yacute -55\r\nKPX Atilde Ydieresis -55\r\nKPX Atilde quoteright -37\r\nKPX Atilde u -20\r\nKPX Atilde uacute -20\r\nKPX Atilde ucircumflex -20\r\nKPX Atilde udieresis -20\r\nKPX Atilde ugrave -20\r\nKPX Atilde uhungarumlaut -20\r\nKPX Atilde umacron -20\r\nKPX Atilde uogonek -20\r\nKPX Atilde uring -20\r\nKPX Atilde v -55\r\nKPX Atilde w -55\r\nKPX Atilde y -55\r\nKPX Atilde yacute -55\r\nKPX Atilde ydieresis -55\r\nKPX B A -25\r\nKPX B Aacute -25\r\nKPX B Abreve -25\r\nKPX B Acircumflex -25\r\nKPX B Adieresis -25\r\nKPX B Agrave -25\r\nKPX B Amacron -25\r\nKPX B Aogonek -25\r\nKPX B Aring -25\r\nKPX B Atilde -25\r\nKPX B U -10\r\nKPX B Uacute -10\r\nKPX B Ucircumflex -10\r\nKPX B Udieresis -10\r\nKPX B Ugrave -10\r\nKPX B Uhungarumlaut -10\r\nKPX B Umacron -10\r\nKPX B Uogonek -10\r\nKPX B Uring -10\r\nKPX D A -35\r\nKPX D Aacute -35\r\nKPX D Abreve -35\r\nKPX D Acircumflex -35\r\nKPX D Adieresis -35\r\nKPX D Agrave -35\r\nKPX D Amacron -35\r\nKPX D Aogonek -35\r\nKPX D Aring -35\r\nKPX D Atilde -35\r\nKPX D V -40\r\nKPX D W -40\r\nKPX D Y -40\r\nKPX D Yacute -40\r\nKPX D Ydieresis -40\r\nKPX Dcaron A -35\r\nKPX Dcaron Aacute -35\r\nKPX Dcaron Abreve -35\r\nKPX Dcaron Acircumflex -35\r\nKPX Dcaron Adieresis -35\r\nKPX Dcaron Agrave -35\r\nKPX Dcaron Amacron -35\r\nKPX Dcaron Aogonek -35\r\nKPX Dcaron Aring -35\r\nKPX Dcaron Atilde -35\r\nKPX Dcaron V -40\r\nKPX Dcaron W -40\r\nKPX Dcaron Y -40\r\nKPX Dcaron Yacute -40\r\nKPX Dcaron Ydieresis -40\r\nKPX Dcroat A -35\r\nKPX Dcroat Aacute -35\r\nKPX Dcroat Abreve -35\r\nKPX Dcroat Acircumflex -35\r\nKPX Dcroat Adieresis -35\r\nKPX Dcroat Agrave -35\r\nKPX Dcroat Amacron -35\r\nKPX Dcroat Aogonek -35\r\nKPX Dcroat Aring -35\r\nKPX Dcroat Atilde -35\r\nKPX Dcroat V -40\r\nKPX Dcroat W -40\r\nKPX Dcroat Y -40\r\nKPX Dcroat Yacute -40\r\nKPX Dcroat Ydieresis -40\r\nKPX F A -115\r\nKPX F Aacute -115\r\nKPX F Abreve -115\r\nKPX F Acircumflex -115\r\nKPX F Adieresis -115\r\nKPX F Agrave -115\r\nKPX F Amacron -115\r\nKPX F Aogonek -115\r\nKPX F Aring -115\r\nKPX F Atilde -115\r\nKPX F a -75\r\nKPX F aacute -75\r\nKPX F abreve -75\r\nKPX F acircumflex -75\r\nKPX F adieresis -75\r\nKPX F agrave -75\r\nKPX F amacron -75\r\nKPX F aogonek -75\r\nKPX F aring -75\r\nKPX F atilde -75\r\nKPX F comma -135\r\nKPX F e -75\r\nKPX F eacute -75\r\nKPX F ecaron -75\r\nKPX F ecircumflex -75\r\nKPX F edieresis -75\r\nKPX F edotaccent -75\r\nKPX F egrave -75\r\nKPX F emacron -75\r\nKPX F eogonek -75\r\nKPX F i -45\r\nKPX F iacute -45\r\nKPX F icircumflex -45\r\nKPX F idieresis -45\r\nKPX F igrave -45\r\nKPX F imacron -45\r\nKPX F iogonek -45\r\nKPX F o -105\r\nKPX F oacute -105\r\nKPX F ocircumflex -105\r\nKPX F odieresis -105\r\nKPX F ograve -105\r\nKPX F ohungarumlaut -105\r\nKPX F omacron -105\r\nKPX F oslash -105\r\nKPX F otilde -105\r\nKPX F period -135\r\nKPX F r -55\r\nKPX F racute -55\r\nKPX F rcaron -55\r\nKPX F rcommaaccent -55\r\nKPX J A -40\r\nKPX J Aacute -40\r\nKPX J Abreve -40\r\nKPX J Acircumflex -40\r\nKPX J Adieresis -40\r\nKPX J Agrave -40\r\nKPX J Amacron -40\r\nKPX J Aogonek -40\r\nKPX J Aring -40\r\nKPX J Atilde -40\r\nKPX J a -35\r\nKPX J aacute -35\r\nKPX J abreve -35\r\nKPX J acircumflex -35\r\nKPX J adieresis -35\r\nKPX J agrave -35\r\nKPX J amacron -35\r\nKPX J aogonek -35\r\nKPX J aring -35\r\nKPX J atilde -35\r\nKPX J comma -25\r\nKPX J e -25\r\nKPX J eacute -25\r\nKPX J ecaron -25\r\nKPX J ecircumflex -25\r\nKPX J edieresis -25\r\nKPX J edotaccent -25\r\nKPX J egrave -25\r\nKPX J emacron -25\r\nKPX J eogonek -25\r\nKPX J o -25\r\nKPX J oacute -25\r\nKPX J ocircumflex -25\r\nKPX J odieresis -25\r\nKPX J ograve -25\r\nKPX J ohungarumlaut -25\r\nKPX J omacron -25\r\nKPX J oslash -25\r\nKPX J otilde -25\r\nKPX J period -25\r\nKPX J u -35\r\nKPX J uacute -35\r\nKPX J ucircumflex -35\r\nKPX J udieresis -35\r\nKPX J ugrave -35\r\nKPX J uhungarumlaut -35\r\nKPX J umacron -35\r\nKPX J uogonek -35\r\nKPX J uring -35\r\nKPX K O -50\r\nKPX K Oacute -50\r\nKPX K Ocircumflex -50\r\nKPX K Odieresis -50\r\nKPX K Ograve -50\r\nKPX K Ohungarumlaut -50\r\nKPX K Omacron -50\r\nKPX K Oslash -50\r\nKPX K Otilde -50\r\nKPX K e -35\r\nKPX K eacute -35\r\nKPX K ecaron -35\r\nKPX K ecircumflex -35\r\nKPX K edieresis -35\r\nKPX K edotaccent -35\r\nKPX K egrave -35\r\nKPX K emacron -35\r\nKPX K eogonek -35\r\nKPX K o -40\r\nKPX K oacute -40\r\nKPX K ocircumflex -40\r\nKPX K odieresis -40\r\nKPX K ograve -40\r\nKPX K ohungarumlaut -40\r\nKPX K omacron -40\r\nKPX K oslash -40\r\nKPX K otilde -40\r\nKPX K u -40\r\nKPX K uacute -40\r\nKPX K ucircumflex -40\r\nKPX K udieresis -40\r\nKPX K ugrave -40\r\nKPX K uhungarumlaut -40\r\nKPX K umacron -40\r\nKPX K uogonek -40\r\nKPX K uring -40\r\nKPX K y -40\r\nKPX K yacute -40\r\nKPX K ydieresis -40\r\nKPX Kcommaaccent O -50\r\nKPX Kcommaaccent Oacute -50\r\nKPX Kcommaaccent Ocircumflex -50\r\nKPX Kcommaaccent Odieresis -50\r\nKPX Kcommaaccent Ograve -50\r\nKPX Kcommaaccent Ohungarumlaut -50\r\nKPX Kcommaaccent Omacron -50\r\nKPX Kcommaaccent Oslash -50\r\nKPX Kcommaaccent Otilde -50\r\nKPX Kcommaaccent e -35\r\nKPX Kcommaaccent eacute -35\r\nKPX Kcommaaccent ecaron -35\r\nKPX Kcommaaccent ecircumflex -35\r\nKPX Kcommaaccent edieresis -35\r\nKPX Kcommaaccent edotaccent -35\r\nKPX Kcommaaccent egrave -35\r\nKPX Kcommaaccent emacron -35\r\nKPX Kcommaaccent eogonek -35\r\nKPX Kcommaaccent o -40\r\nKPX Kcommaaccent oacute -40\r\nKPX Kcommaaccent ocircumflex -40\r\nKPX Kcommaaccent odieresis -40\r\nKPX Kcommaaccent ograve -40\r\nKPX Kcommaaccent ohungarumlaut -40\r\nKPX Kcommaaccent omacron -40\r\nKPX Kcommaaccent oslash -40\r\nKPX Kcommaaccent otilde -40\r\nKPX Kcommaaccent u -40\r\nKPX Kcommaaccent uacute -40\r\nKPX Kcommaaccent ucircumflex -40\r\nKPX Kcommaaccent udieresis -40\r\nKPX Kcommaaccent ugrave -40\r\nKPX Kcommaaccent uhungarumlaut -40\r\nKPX Kcommaaccent umacron -40\r\nKPX Kcommaaccent uogonek -40\r\nKPX Kcommaaccent uring -40\r\nKPX Kcommaaccent y -40\r\nKPX Kcommaaccent yacute -40\r\nKPX Kcommaaccent ydieresis -40\r\nKPX L T -20\r\nKPX L Tcaron -20\r\nKPX L Tcommaaccent -20\r\nKPX L V -55\r\nKPX L W -55\r\nKPX L Y -20\r\nKPX L Yacute -20\r\nKPX L Ydieresis -20\r\nKPX L quoteright -37\r\nKPX L y -30\r\nKPX L yacute -30\r\nKPX L ydieresis -30\r\nKPX Lacute T -20\r\nKPX Lacute Tcaron -20\r\nKPX Lacute Tcommaaccent -20\r\nKPX Lacute V -55\r\nKPX Lacute W -55\r\nKPX Lacute Y -20\r\nKPX Lacute Yacute -20\r\nKPX Lacute Ydieresis -20\r\nKPX Lacute quoteright -37\r\nKPX Lacute y -30\r\nKPX Lacute yacute -30\r\nKPX Lacute ydieresis -30\r\nKPX Lcommaaccent T -20\r\nKPX Lcommaaccent Tcaron -20\r\nKPX Lcommaaccent Tcommaaccent -20\r\nKPX Lcommaaccent V -55\r\nKPX Lcommaaccent W -55\r\nKPX Lcommaaccent Y -20\r\nKPX Lcommaaccent Yacute -20\r\nKPX Lcommaaccent Ydieresis -20\r\nKPX Lcommaaccent quoteright -37\r\nKPX Lcommaaccent y -30\r\nKPX Lcommaaccent yacute -30\r\nKPX Lcommaaccent ydieresis -30\r\nKPX Lslash T -20\r\nKPX Lslash Tcaron -20\r\nKPX Lslash Tcommaaccent -20\r\nKPX Lslash V -55\r\nKPX Lslash W -55\r\nKPX Lslash Y -20\r\nKPX Lslash Yacute -20\r\nKPX Lslash Ydieresis -20\r\nKPX Lslash quoteright -37\r\nKPX Lslash y -30\r\nKPX Lslash yacute -30\r\nKPX Lslash ydieresis -30\r\nKPX N A -27\r\nKPX N Aacute -27\r\nKPX N Abreve -27\r\nKPX N Acircumflex -27\r\nKPX N Adieresis -27\r\nKPX N Agrave -27\r\nKPX N Amacron -27\r\nKPX N Aogonek -27\r\nKPX N Aring -27\r\nKPX N Atilde -27\r\nKPX Nacute A -27\r\nKPX Nacute Aacute -27\r\nKPX Nacute Abreve -27\r\nKPX Nacute Acircumflex -27\r\nKPX Nacute Adieresis -27\r\nKPX Nacute Agrave -27\r\nKPX Nacute Amacron -27\r\nKPX Nacute Aogonek -27\r\nKPX Nacute Aring -27\r\nKPX Nacute Atilde -27\r\nKPX Ncaron A -27\r\nKPX Ncaron Aacute -27\r\nKPX Ncaron Abreve -27\r\nKPX Ncaron Acircumflex -27\r\nKPX Ncaron Adieresis -27\r\nKPX Ncaron Agrave -27\r\nKPX Ncaron Amacron -27\r\nKPX Ncaron Aogonek -27\r\nKPX Ncaron Aring -27\r\nKPX Ncaron Atilde -27\r\nKPX Ncommaaccent A -27\r\nKPX Ncommaaccent Aacute -27\r\nKPX Ncommaaccent Abreve -27\r\nKPX Ncommaaccent Acircumflex -27\r\nKPX Ncommaaccent Adieresis -27\r\nKPX Ncommaaccent Agrave -27\r\nKPX Ncommaaccent Amacron -27\r\nKPX Ncommaaccent Aogonek -27\r\nKPX Ncommaaccent Aring -27\r\nKPX Ncommaaccent Atilde -27\r\nKPX Ntilde A -27\r\nKPX Ntilde Aacute -27\r\nKPX Ntilde Abreve -27\r\nKPX Ntilde Acircumflex -27\r\nKPX Ntilde Adieresis -27\r\nKPX Ntilde Agrave -27\r\nKPX Ntilde Amacron -27\r\nKPX Ntilde Aogonek -27\r\nKPX Ntilde Aring -27\r\nKPX Ntilde Atilde -27\r\nKPX O A -55\r\nKPX O Aacute -55\r\nKPX O Abreve -55\r\nKPX O Acircumflex -55\r\nKPX O Adieresis -55\r\nKPX O Agrave -55\r\nKPX O Amacron -55\r\nKPX O Aogonek -55\r\nKPX O Aring -55\r\nKPX O Atilde -55\r\nKPX O T -40\r\nKPX O Tcaron -40\r\nKPX O Tcommaaccent -40\r\nKPX O V -50\r\nKPX O W -50\r\nKPX O X -40\r\nKPX O Y -50\r\nKPX O Yacute -50\r\nKPX O Ydieresis -50\r\nKPX Oacute A -55\r\nKPX Oacute Aacute -55\r\nKPX Oacute Abreve -55\r\nKPX Oacute Acircumflex -55\r\nKPX Oacute Adieresis -55\r\nKPX Oacute Agrave -55\r\nKPX Oacute Amacron -55\r\nKPX Oacute Aogonek -55\r\nKPX Oacute Aring -55\r\nKPX Oacute Atilde -55\r\nKPX Oacute T -40\r\nKPX Oacute Tcaron -40\r\nKPX Oacute Tcommaaccent -40\r\nKPX Oacute V -50\r\nKPX Oacute W -50\r\nKPX Oacute X -40\r\nKPX Oacute Y -50\r\nKPX Oacute Yacute -50\r\nKPX Oacute Ydieresis -50\r\nKPX Ocircumflex A -55\r\nKPX Ocircumflex Aacute -55\r\nKPX Ocircumflex Abreve -55\r\nKPX Ocircumflex Acircumflex -55\r\nKPX Ocircumflex Adieresis -55\r\nKPX Ocircumflex Agrave -55\r\nKPX Ocircumflex Amacron -55\r\nKPX Ocircumflex Aogonek -55\r\nKPX Ocircumflex Aring -55\r\nKPX Ocircumflex Atilde -55\r\nKPX Ocircumflex T -40\r\nKPX Ocircumflex Tcaron -40\r\nKPX Ocircumflex Tcommaaccent -40\r\nKPX Ocircumflex V -50\r\nKPX Ocircumflex W -50\r\nKPX Ocircumflex X -40\r\nKPX Ocircumflex Y -50\r\nKPX Ocircumflex Yacute -50\r\nKPX Ocircumflex Ydieresis -50\r\nKPX Odieresis A -55\r\nKPX Odieresis Aacute -55\r\nKPX Odieresis Abreve -55\r\nKPX Odieresis Acircumflex -55\r\nKPX Odieresis Adieresis -55\r\nKPX Odieresis Agrave -55\r\nKPX Odieresis Amacron -55\r\nKPX Odieresis Aogonek -55\r\nKPX Odieresis Aring -55\r\nKPX Odieresis Atilde -55\r\nKPX Odieresis T -40\r\nKPX Odieresis Tcaron -40\r\nKPX Odieresis Tcommaaccent -40\r\nKPX Odieresis V -50\r\nKPX Odieresis W -50\r\nKPX Odieresis X -40\r\nKPX Odieresis Y -50\r\nKPX Odieresis Yacute -50\r\nKPX Odieresis Ydieresis -50\r\nKPX Ograve A -55\r\nKPX Ograve Aacute -55\r\nKPX Ograve Abreve -55\r\nKPX Ograve Acircumflex -55\r\nKPX Ograve Adieresis -55\r\nKPX Ograve Agrave -55\r\nKPX Ograve Amacron -55\r\nKPX Ograve Aogonek -55\r\nKPX Ograve Aring -55\r\nKPX Ograve Atilde -55\r\nKPX Ograve T -40\r\nKPX Ograve Tcaron -40\r\nKPX Ograve Tcommaaccent -40\r\nKPX Ograve V -50\r\nKPX Ograve W -50\r\nKPX Ograve X -40\r\nKPX Ograve Y -50\r\nKPX Ograve Yacute -50\r\nKPX Ograve Ydieresis -50\r\nKPX Ohungarumlaut A -55\r\nKPX Ohungarumlaut Aacute -55\r\nKPX Ohungarumlaut Abreve -55\r\nKPX Ohungarumlaut Acircumflex -55\r\nKPX Ohungarumlaut Adieresis -55\r\nKPX Ohungarumlaut Agrave -55\r\nKPX Ohungarumlaut Amacron -55\r\nKPX Ohungarumlaut Aogonek -55\r\nKPX Ohungarumlaut Aring -55\r\nKPX Ohungarumlaut Atilde -55\r\nKPX Ohungarumlaut T -40\r\nKPX Ohungarumlaut Tcaron -40\r\nKPX Ohungarumlaut Tcommaaccent -40\r\nKPX Ohungarumlaut V -50\r\nKPX Ohungarumlaut W -50\r\nKPX Ohungarumlaut X -40\r\nKPX Ohungarumlaut Y -50\r\nKPX Ohungarumlaut Yacute -50\r\nKPX Ohungarumlaut Ydieresis -50\r\nKPX Omacron A -55\r\nKPX Omacron Aacute -55\r\nKPX Omacron Abreve -55\r\nKPX Omacron Acircumflex -55\r\nKPX Omacron Adieresis -55\r\nKPX Omacron Agrave -55\r\nKPX Omacron Amacron -55\r\nKPX Omacron Aogonek -55\r\nKPX Omacron Aring -55\r\nKPX Omacron Atilde -55\r\nKPX Omacron T -40\r\nKPX Omacron Tcaron -40\r\nKPX Omacron Tcommaaccent -40\r\nKPX Omacron V -50\r\nKPX Omacron W -50\r\nKPX Omacron X -40\r\nKPX Omacron Y -50\r\nKPX Omacron Yacute -50\r\nKPX Omacron Ydieresis -50\r\nKPX Oslash A -55\r\nKPX Oslash Aacute -55\r\nKPX Oslash Abreve -55\r\nKPX Oslash Acircumflex -55\r\nKPX Oslash Adieresis -55\r\nKPX Oslash Agrave -55\r\nKPX Oslash Amacron -55\r\nKPX Oslash Aogonek -55\r\nKPX Oslash Aring -55\r\nKPX Oslash Atilde -55\r\nKPX Oslash T -40\r\nKPX Oslash Tcaron -40\r\nKPX Oslash Tcommaaccent -40\r\nKPX Oslash V -50\r\nKPX Oslash W -50\r\nKPX Oslash X -40\r\nKPX Oslash Y -50\r\nKPX Oslash Yacute -50\r\nKPX Oslash Ydieresis -50\r\nKPX Otilde A -55\r\nKPX Otilde Aacute -55\r\nKPX Otilde Abreve -55\r\nKPX Otilde Acircumflex -55\r\nKPX Otilde Adieresis -55\r\nKPX Otilde Agrave -55\r\nKPX Otilde Amacron -55\r\nKPX Otilde Aogonek -55\r\nKPX Otilde Aring -55\r\nKPX Otilde Atilde -55\r\nKPX Otilde T -40\r\nKPX Otilde Tcaron -40\r\nKPX Otilde Tcommaaccent -40\r\nKPX Otilde V -50\r\nKPX Otilde W -50\r\nKPX Otilde X -40\r\nKPX Otilde Y -50\r\nKPX Otilde Yacute -50\r\nKPX Otilde Ydieresis -50\r\nKPX P A -90\r\nKPX P Aacute -90\r\nKPX P Abreve -90\r\nKPX P Acircumflex -90\r\nKPX P Adieresis -90\r\nKPX P Agrave -90\r\nKPX P Amacron -90\r\nKPX P Aogonek -90\r\nKPX P Aring -90\r\nKPX P Atilde -90\r\nKPX P a -80\r\nKPX P aacute -80\r\nKPX P abreve -80\r\nKPX P acircumflex -80\r\nKPX P adieresis -80\r\nKPX P agrave -80\r\nKPX P amacron -80\r\nKPX P aogonek -80\r\nKPX P aring -80\r\nKPX P atilde -80\r\nKPX P comma -135\r\nKPX P e -80\r\nKPX P eacute -80\r\nKPX P ecaron -80\r\nKPX P ecircumflex -80\r\nKPX P edieresis -80\r\nKPX P edotaccent -80\r\nKPX P egrave -80\r\nKPX P emacron -80\r\nKPX P eogonek -80\r\nKPX P o -80\r\nKPX P oacute -80\r\nKPX P ocircumflex -80\r\nKPX P odieresis -80\r\nKPX P ograve -80\r\nKPX P ohungarumlaut -80\r\nKPX P omacron -80\r\nKPX P oslash -80\r\nKPX P otilde -80\r\nKPX P period -135\r\nKPX Q U -10\r\nKPX Q Uacute -10\r\nKPX Q Ucircumflex -10\r\nKPX Q Udieresis -10\r\nKPX Q Ugrave -10\r\nKPX Q Uhungarumlaut -10\r\nKPX Q Umacron -10\r\nKPX Q Uogonek -10\r\nKPX Q Uring -10\r\nKPX R O -40\r\nKPX R Oacute -40\r\nKPX R Ocircumflex -40\r\nKPX R Odieresis -40\r\nKPX R Ograve -40\r\nKPX R Ohungarumlaut -40\r\nKPX R Omacron -40\r\nKPX R Oslash -40\r\nKPX R Otilde -40\r\nKPX R U -40\r\nKPX R Uacute -40\r\nKPX R Ucircumflex -40\r\nKPX R Udieresis -40\r\nKPX R Ugrave -40\r\nKPX R Uhungarumlaut -40\r\nKPX R Umacron -40\r\nKPX R Uogonek -40\r\nKPX R Uring -40\r\nKPX R V -18\r\nKPX R W -18\r\nKPX R Y -18\r\nKPX R Yacute -18\r\nKPX R Ydieresis -18\r\nKPX Racute O -40\r\nKPX Racute Oacute -40\r\nKPX Racute Ocircumflex -40\r\nKPX Racute Odieresis -40\r\nKPX Racute Ograve -40\r\nKPX Racute Ohungarumlaut -40\r\nKPX Racute Omacron -40\r\nKPX Racute Oslash -40\r\nKPX Racute Otilde -40\r\nKPX Racute U -40\r\nKPX Racute Uacute -40\r\nKPX Racute Ucircumflex -40\r\nKPX Racute Udieresis -40\r\nKPX Racute Ugrave -40\r\nKPX Racute Uhungarumlaut -40\r\nKPX Racute Umacron -40\r\nKPX Racute Uogonek -40\r\nKPX Racute Uring -40\r\nKPX Racute V -18\r\nKPX Racute W -18\r\nKPX Racute Y -18\r\nKPX Racute Yacute -18\r\nKPX Racute Ydieresis -18\r\nKPX Rcaron O -40\r\nKPX Rcaron Oacute -40\r\nKPX Rcaron Ocircumflex -40\r\nKPX Rcaron Odieresis -40\r\nKPX Rcaron Ograve -40\r\nKPX Rcaron Ohungarumlaut -40\r\nKPX Rcaron Omacron -40\r\nKPX Rcaron Oslash -40\r\nKPX Rcaron Otilde -40\r\nKPX Rcaron U -40\r\nKPX Rcaron Uacute -40\r\nKPX Rcaron Ucircumflex -40\r\nKPX Rcaron Udieresis -40\r\nKPX Rcaron Ugrave -40\r\nKPX Rcaron Uhungarumlaut -40\r\nKPX Rcaron Umacron -40\r\nKPX Rcaron Uogonek -40\r\nKPX Rcaron Uring -40\r\nKPX Rcaron V -18\r\nKPX Rcaron W -18\r\nKPX Rcaron Y -18\r\nKPX Rcaron Yacute -18\r\nKPX Rcaron Ydieresis -18\r\nKPX Rcommaaccent O -40\r\nKPX Rcommaaccent Oacute -40\r\nKPX Rcommaaccent Ocircumflex -40\r\nKPX Rcommaaccent Odieresis -40\r\nKPX Rcommaaccent Ograve -40\r\nKPX Rcommaaccent Ohungarumlaut -40\r\nKPX Rcommaaccent Omacron -40\r\nKPX Rcommaaccent Oslash -40\r\nKPX Rcommaaccent Otilde -40\r\nKPX Rcommaaccent U -40\r\nKPX Rcommaaccent Uacute -40\r\nKPX Rcommaaccent Ucircumflex -40\r\nKPX Rcommaaccent Udieresis -40\r\nKPX Rcommaaccent Ugrave -40\r\nKPX Rcommaaccent Uhungarumlaut -40\r\nKPX Rcommaaccent Umacron -40\r\nKPX Rcommaaccent Uogonek -40\r\nKPX Rcommaaccent Uring -40\r\nKPX Rcommaaccent V -18\r\nKPX Rcommaaccent W -18\r\nKPX Rcommaaccent Y -18\r\nKPX Rcommaaccent Yacute -18\r\nKPX Rcommaaccent Ydieresis -18\r\nKPX T A -50\r\nKPX T Aacute -50\r\nKPX T Abreve -50\r\nKPX T Acircumflex -50\r\nKPX T Adieresis -50\r\nKPX T Agrave -50\r\nKPX T Amacron -50\r\nKPX T Aogonek -50\r\nKPX T Aring -50\r\nKPX T Atilde -50\r\nKPX T O -18\r\nKPX T Oacute -18\r\nKPX T Ocircumflex -18\r\nKPX T Odieresis -18\r\nKPX T Ograve -18\r\nKPX T Ohungarumlaut -18\r\nKPX T Omacron -18\r\nKPX T Oslash -18\r\nKPX T Otilde -18\r\nKPX T a -92\r\nKPX T aacute -92\r\nKPX T abreve -92\r\nKPX T acircumflex -92\r\nKPX T adieresis -92\r\nKPX T agrave -92\r\nKPX T amacron -92\r\nKPX T aogonek -92\r\nKPX T aring -92\r\nKPX T atilde -92\r\nKPX T colon -55\r\nKPX T comma -74\r\nKPX T e -92\r\nKPX T eacute -92\r\nKPX T ecaron -92\r\nKPX T ecircumflex -52\r\nKPX T edieresis -52\r\nKPX T edotaccent -92\r\nKPX T egrave -52\r\nKPX T emacron -52\r\nKPX T eogonek -92\r\nKPX T hyphen -74\r\nKPX T i -55\r\nKPX T iacute -55\r\nKPX T iogonek -55\r\nKPX T o -92\r\nKPX T oacute -92\r\nKPX T ocircumflex -92\r\nKPX T odieresis -92\r\nKPX T ograve -92\r\nKPX T ohungarumlaut -92\r\nKPX T omacron -92\r\nKPX T oslash -92\r\nKPX T otilde -92\r\nKPX T period -74\r\nKPX T r -55\r\nKPX T racute -55\r\nKPX T rcaron -55\r\nKPX T rcommaaccent -55\r\nKPX T semicolon -65\r\nKPX T u -55\r\nKPX T uacute -55\r\nKPX T ucircumflex -55\r\nKPX T udieresis -55\r\nKPX T ugrave -55\r\nKPX T uhungarumlaut -55\r\nKPX T umacron -55\r\nKPX T uogonek -55\r\nKPX T uring -55\r\nKPX T w -74\r\nKPX T y -74\r\nKPX T yacute -74\r\nKPX T ydieresis -34\r\nKPX Tcaron A -50\r\nKPX Tcaron Aacute -50\r\nKPX Tcaron Abreve -50\r\nKPX Tcaron Acircumflex -50\r\nKPX Tcaron Adieresis -50\r\nKPX Tcaron Agrave -50\r\nKPX Tcaron Amacron -50\r\nKPX Tcaron Aogonek -50\r\nKPX Tcaron Aring -50\r\nKPX Tcaron Atilde -50\r\nKPX Tcaron O -18\r\nKPX Tcaron Oacute -18\r\nKPX Tcaron Ocircumflex -18\r\nKPX Tcaron Odieresis -18\r\nKPX Tcaron Ograve -18\r\nKPX Tcaron Ohungarumlaut -18\r\nKPX Tcaron Omacron -18\r\nKPX Tcaron Oslash -18\r\nKPX Tcaron Otilde -18\r\nKPX Tcaron a -92\r\nKPX Tcaron aacute -92\r\nKPX Tcaron abreve -92\r\nKPX Tcaron acircumflex -92\r\nKPX Tcaron adieresis -92\r\nKPX Tcaron agrave -92\r\nKPX Tcaron amacron -92\r\nKPX Tcaron aogonek -92\r\nKPX Tcaron aring -92\r\nKPX Tcaron atilde -92\r\nKPX Tcaron colon -55\r\nKPX Tcaron comma -74\r\nKPX Tcaron e -92\r\nKPX Tcaron eacute -92\r\nKPX Tcaron ecaron -92\r\nKPX Tcaron ecircumflex -52\r\nKPX Tcaron edieresis -52\r\nKPX Tcaron edotaccent -92\r\nKPX Tcaron egrave -52\r\nKPX Tcaron emacron -52\r\nKPX Tcaron eogonek -92\r\nKPX Tcaron hyphen -74\r\nKPX Tcaron i -55\r\nKPX Tcaron iacute -55\r\nKPX Tcaron iogonek -55\r\nKPX Tcaron o -92\r\nKPX Tcaron oacute -92\r\nKPX Tcaron ocircumflex -92\r\nKPX Tcaron odieresis -92\r\nKPX Tcaron ograve -92\r\nKPX Tcaron ohungarumlaut -92\r\nKPX Tcaron omacron -92\r\nKPX Tcaron oslash -92\r\nKPX Tcaron otilde -92\r\nKPX Tcaron period -74\r\nKPX Tcaron r -55\r\nKPX Tcaron racute -55\r\nKPX Tcaron rcaron -55\r\nKPX Tcaron rcommaaccent -55\r\nKPX Tcaron semicolon -65\r\nKPX Tcaron u -55\r\nKPX Tcaron uacute -55\r\nKPX Tcaron ucircumflex -55\r\nKPX Tcaron udieresis -55\r\nKPX Tcaron ugrave -55\r\nKPX Tcaron uhungarumlaut -55\r\nKPX Tcaron umacron -55\r\nKPX Tcaron uogonek -55\r\nKPX Tcaron uring -55\r\nKPX Tcaron w -74\r\nKPX Tcaron y -74\r\nKPX Tcaron yacute -74\r\nKPX Tcaron ydieresis -34\r\nKPX Tcommaaccent A -50\r\nKPX Tcommaaccent Aacute -50\r\nKPX Tcommaaccent Abreve -50\r\nKPX Tcommaaccent Acircumflex -50\r\nKPX Tcommaaccent Adieresis -50\r\nKPX Tcommaaccent Agrave -50\r\nKPX Tcommaaccent Amacron -50\r\nKPX Tcommaaccent Aogonek -50\r\nKPX Tcommaaccent Aring -50\r\nKPX Tcommaaccent Atilde -50\r\nKPX Tcommaaccent O -18\r\nKPX Tcommaaccent Oacute -18\r\nKPX Tcommaaccent Ocircumflex -18\r\nKPX Tcommaaccent Odieresis -18\r\nKPX Tcommaaccent Ograve -18\r\nKPX Tcommaaccent Ohungarumlaut -18\r\nKPX Tcommaaccent Omacron -18\r\nKPX Tcommaaccent Oslash -18\r\nKPX Tcommaaccent Otilde -18\r\nKPX Tcommaaccent a -92\r\nKPX Tcommaaccent aacute -92\r\nKPX Tcommaaccent abreve -92\r\nKPX Tcommaaccent acircumflex -92\r\nKPX Tcommaaccent adieresis -92\r\nKPX Tcommaaccent agrave -92\r\nKPX Tcommaaccent amacron -92\r\nKPX Tcommaaccent aogonek -92\r\nKPX Tcommaaccent aring -92\r\nKPX Tcommaaccent atilde -92\r\nKPX Tcommaaccent colon -55\r\nKPX Tcommaaccent comma -74\r\nKPX Tcommaaccent e -92\r\nKPX Tcommaaccent eacute -92\r\nKPX Tcommaaccent ecaron -92\r\nKPX Tcommaaccent ecircumflex -52\r\nKPX Tcommaaccent edieresis -52\r\nKPX Tcommaaccent edotaccent -92\r\nKPX Tcommaaccent egrave -52\r\nKPX Tcommaaccent emacron -52\r\nKPX Tcommaaccent eogonek -92\r\nKPX Tcommaaccent hyphen -74\r\nKPX Tcommaaccent i -55\r\nKPX Tcommaaccent iacute -55\r\nKPX Tcommaaccent iogonek -55\r\nKPX Tcommaaccent o -92\r\nKPX Tcommaaccent oacute -92\r\nKPX Tcommaaccent ocircumflex -92\r\nKPX Tcommaaccent odieresis -92\r\nKPX Tcommaaccent ograve -92\r\nKPX Tcommaaccent ohungarumlaut -92\r\nKPX Tcommaaccent omacron -92\r\nKPX Tcommaaccent oslash -92\r\nKPX Tcommaaccent otilde -92\r\nKPX Tcommaaccent period -74\r\nKPX Tcommaaccent r -55\r\nKPX Tcommaaccent racute -55\r\nKPX Tcommaaccent rcaron -55\r\nKPX Tcommaaccent rcommaaccent -55\r\nKPX Tcommaaccent semicolon -65\r\nKPX Tcommaaccent u -55\r\nKPX Tcommaaccent uacute -55\r\nKPX Tcommaaccent ucircumflex -55\r\nKPX Tcommaaccent udieresis -55\r\nKPX Tcommaaccent ugrave -55\r\nKPX Tcommaaccent uhungarumlaut -55\r\nKPX Tcommaaccent umacron -55\r\nKPX Tcommaaccent uogonek -55\r\nKPX Tcommaaccent uring -55\r\nKPX Tcommaaccent w -74\r\nKPX Tcommaaccent y -74\r\nKPX Tcommaaccent yacute -74\r\nKPX Tcommaaccent ydieresis -34\r\nKPX U A -40\r\nKPX U Aacute -40\r\nKPX U Abreve -40\r\nKPX U Acircumflex -40\r\nKPX U Adieresis -40\r\nKPX U Agrave -40\r\nKPX U Amacron -40\r\nKPX U Aogonek -40\r\nKPX U Aring -40\r\nKPX U Atilde -40\r\nKPX U comma -25\r\nKPX U period -25\r\nKPX Uacute A -40\r\nKPX Uacute Aacute -40\r\nKPX Uacute Abreve -40\r\nKPX Uacute Acircumflex -40\r\nKPX Uacute Adieresis -40\r\nKPX Uacute Agrave -40\r\nKPX Uacute Amacron -40\r\nKPX Uacute Aogonek -40\r\nKPX Uacute Aring -40\r\nKPX Uacute Atilde -40\r\nKPX Uacute comma -25\r\nKPX Uacute period -25\r\nKPX Ucircumflex A -40\r\nKPX Ucircumflex Aacute -40\r\nKPX Ucircumflex Abreve -40\r\nKPX Ucircumflex Acircumflex -40\r\nKPX Ucircumflex Adieresis -40\r\nKPX Ucircumflex Agrave -40\r\nKPX Ucircumflex Amacron -40\r\nKPX Ucircumflex Aogonek -40\r\nKPX Ucircumflex Aring -40\r\nKPX Ucircumflex Atilde -40\r\nKPX Ucircumflex comma -25\r\nKPX Ucircumflex period -25\r\nKPX Udieresis A -40\r\nKPX Udieresis Aacute -40\r\nKPX Udieresis Abreve -40\r\nKPX Udieresis Acircumflex -40\r\nKPX Udieresis Adieresis -40\r\nKPX Udieresis Agrave -40\r\nKPX Udieresis Amacron -40\r\nKPX Udieresis Aogonek -40\r\nKPX Udieresis Aring -40\r\nKPX Udieresis Atilde -40\r\nKPX Udieresis comma -25\r\nKPX Udieresis period -25\r\nKPX Ugrave A -40\r\nKPX Ugrave Aacute -40\r\nKPX Ugrave Abreve -40\r\nKPX Ugrave Acircumflex -40\r\nKPX Ugrave Adieresis -40\r\nKPX Ugrave Agrave -40\r\nKPX Ugrave Amacron -40\r\nKPX Ugrave Aogonek -40\r\nKPX Ugrave Aring -40\r\nKPX Ugrave Atilde -40\r\nKPX Ugrave comma -25\r\nKPX Ugrave period -25\r\nKPX Uhungarumlaut A -40\r\nKPX Uhungarumlaut Aacute -40\r\nKPX Uhungarumlaut Abreve -40\r\nKPX Uhungarumlaut Acircumflex -40\r\nKPX Uhungarumlaut Adieresis -40\r\nKPX Uhungarumlaut Agrave -40\r\nKPX Uhungarumlaut Amacron -40\r\nKPX Uhungarumlaut Aogonek -40\r\nKPX Uhungarumlaut Aring -40\r\nKPX Uhungarumlaut Atilde -40\r\nKPX Uhungarumlaut comma -25\r\nKPX Uhungarumlaut period -25\r\nKPX Umacron A -40\r\nKPX Umacron Aacute -40\r\nKPX Umacron Abreve -40\r\nKPX Umacron Acircumflex -40\r\nKPX Umacron Adieresis -40\r\nKPX Umacron Agrave -40\r\nKPX Umacron Amacron -40\r\nKPX Umacron Aogonek -40\r\nKPX Umacron Aring -40\r\nKPX Umacron Atilde -40\r\nKPX Umacron comma -25\r\nKPX Umacron period -25\r\nKPX Uogonek A -40\r\nKPX Uogonek Aacute -40\r\nKPX Uogonek Abreve -40\r\nKPX Uogonek Acircumflex -40\r\nKPX Uogonek Adieresis -40\r\nKPX Uogonek Agrave -40\r\nKPX Uogonek Amacron -40\r\nKPX Uogonek Aogonek -40\r\nKPX Uogonek Aring -40\r\nKPX Uogonek Atilde -40\r\nKPX Uogonek comma -25\r\nKPX Uogonek period -25\r\nKPX Uring A -40\r\nKPX Uring Aacute -40\r\nKPX Uring Abreve -40\r\nKPX Uring Acircumflex -40\r\nKPX Uring Adieresis -40\r\nKPX Uring Agrave -40\r\nKPX Uring Amacron -40\r\nKPX Uring Aogonek -40\r\nKPX Uring Aring -40\r\nKPX Uring Atilde -40\r\nKPX Uring comma -25\r\nKPX Uring period -25\r\nKPX V A -60\r\nKPX V Aacute -60\r\nKPX V Abreve -60\r\nKPX V Acircumflex -60\r\nKPX V Adieresis -60\r\nKPX V Agrave -60\r\nKPX V Amacron -60\r\nKPX V Aogonek -60\r\nKPX V Aring -60\r\nKPX V Atilde -60\r\nKPX V O -30\r\nKPX V Oacute -30\r\nKPX V Ocircumflex -30\r\nKPX V Odieresis -30\r\nKPX V Ograve -30\r\nKPX V Ohungarumlaut -30\r\nKPX V Omacron -30\r\nKPX V Oslash -30\r\nKPX V Otilde -30\r\nKPX V a -111\r\nKPX V aacute -111\r\nKPX V abreve -111\r\nKPX V acircumflex -111\r\nKPX V adieresis -111\r\nKPX V agrave -111\r\nKPX V amacron -111\r\nKPX V aogonek -111\r\nKPX V aring -111\r\nKPX V atilde -111\r\nKPX V colon -65\r\nKPX V comma -129\r\nKPX V e -111\r\nKPX V eacute -111\r\nKPX V ecaron -111\r\nKPX V ecircumflex -111\r\nKPX V edieresis -71\r\nKPX V edotaccent -111\r\nKPX V egrave -71\r\nKPX V emacron -71\r\nKPX V eogonek -111\r\nKPX V hyphen -55\r\nKPX V i -74\r\nKPX V iacute -74\r\nKPX V icircumflex -34\r\nKPX V idieresis -34\r\nKPX V igrave -34\r\nKPX V imacron -34\r\nKPX V iogonek -74\r\nKPX V o -111\r\nKPX V oacute -111\r\nKPX V ocircumflex -111\r\nKPX V odieresis -111\r\nKPX V ograve -111\r\nKPX V ohungarumlaut -111\r\nKPX V omacron -111\r\nKPX V oslash -111\r\nKPX V otilde -111\r\nKPX V period -129\r\nKPX V semicolon -74\r\nKPX V u -74\r\nKPX V uacute -74\r\nKPX V ucircumflex -74\r\nKPX V udieresis -74\r\nKPX V ugrave -74\r\nKPX V uhungarumlaut -74\r\nKPX V umacron -74\r\nKPX V uogonek -74\r\nKPX V uring -74\r\nKPX W A -60\r\nKPX W Aacute -60\r\nKPX W Abreve -60\r\nKPX W Acircumflex -60\r\nKPX W Adieresis -60\r\nKPX W Agrave -60\r\nKPX W Amacron -60\r\nKPX W Aogonek -60\r\nKPX W Aring -60\r\nKPX W Atilde -60\r\nKPX W O -25\r\nKPX W Oacute -25\r\nKPX W Ocircumflex -25\r\nKPX W Odieresis -25\r\nKPX W Ograve -25\r\nKPX W Ohungarumlaut -25\r\nKPX W Omacron -25\r\nKPX W Oslash -25\r\nKPX W Otilde -25\r\nKPX W a -92\r\nKPX W aacute -92\r\nKPX W abreve -92\r\nKPX W acircumflex -92\r\nKPX W adieresis -92\r\nKPX W agrave -92\r\nKPX W amacron -92\r\nKPX W aogonek -92\r\nKPX W aring -92\r\nKPX W atilde -92\r\nKPX W colon -65\r\nKPX W comma -92\r\nKPX W e -92\r\nKPX W eacute -92\r\nKPX W ecaron -92\r\nKPX W ecircumflex -92\r\nKPX W edieresis -52\r\nKPX W edotaccent -92\r\nKPX W egrave -52\r\nKPX W emacron -52\r\nKPX W eogonek -92\r\nKPX W hyphen -37\r\nKPX W i -55\r\nKPX W iacute -55\r\nKPX W iogonek -55\r\nKPX W o -92\r\nKPX W oacute -92\r\nKPX W ocircumflex -92\r\nKPX W odieresis -92\r\nKPX W ograve -92\r\nKPX W ohungarumlaut -92\r\nKPX W omacron -92\r\nKPX W oslash -92\r\nKPX W otilde -92\r\nKPX W period -92\r\nKPX W semicolon -65\r\nKPX W u -55\r\nKPX W uacute -55\r\nKPX W ucircumflex -55\r\nKPX W udieresis -55\r\nKPX W ugrave -55\r\nKPX W uhungarumlaut -55\r\nKPX W umacron -55\r\nKPX W uogonek -55\r\nKPX W uring -55\r\nKPX W y -70\r\nKPX W yacute -70\r\nKPX W ydieresis -70\r\nKPX Y A -50\r\nKPX Y Aacute -50\r\nKPX Y Abreve -50\r\nKPX Y Acircumflex -50\r\nKPX Y Adieresis -50\r\nKPX Y Agrave -50\r\nKPX Y Amacron -50\r\nKPX Y Aogonek -50\r\nKPX Y Aring -50\r\nKPX Y Atilde -50\r\nKPX Y O -15\r\nKPX Y Oacute -15\r\nKPX Y Ocircumflex -15\r\nKPX Y Odieresis -15\r\nKPX Y Ograve -15\r\nKPX Y Ohungarumlaut -15\r\nKPX Y Omacron -15\r\nKPX Y Oslash -15\r\nKPX Y Otilde -15\r\nKPX Y a -92\r\nKPX Y aacute -92\r\nKPX Y abreve -92\r\nKPX Y acircumflex -92\r\nKPX Y adieresis -92\r\nKPX Y agrave -92\r\nKPX Y amacron -92\r\nKPX Y aogonek -92\r\nKPX Y aring -92\r\nKPX Y atilde -92\r\nKPX Y colon -65\r\nKPX Y comma -92\r\nKPX Y e -92\r\nKPX Y eacute -92\r\nKPX Y ecaron -92\r\nKPX Y ecircumflex -92\r\nKPX Y edieresis -52\r\nKPX Y edotaccent -92\r\nKPX Y egrave -52\r\nKPX Y emacron -52\r\nKPX Y eogonek -92\r\nKPX Y hyphen -74\r\nKPX Y i -74\r\nKPX Y iacute -74\r\nKPX Y icircumflex -34\r\nKPX Y idieresis -34\r\nKPX Y igrave -34\r\nKPX Y imacron -34\r\nKPX Y iogonek -74\r\nKPX Y o -92\r\nKPX Y oacute -92\r\nKPX Y ocircumflex -92\r\nKPX Y odieresis -92\r\nKPX Y ograve -92\r\nKPX Y ohungarumlaut -92\r\nKPX Y omacron -92\r\nKPX Y oslash -92\r\nKPX Y otilde -92\r\nKPX Y period -92\r\nKPX Y semicolon -65\r\nKPX Y u -92\r\nKPX Y uacute -92\r\nKPX Y ucircumflex -92\r\nKPX Y udieresis -92\r\nKPX Y ugrave -92\r\nKPX Y uhungarumlaut -92\r\nKPX Y umacron -92\r\nKPX Y uogonek -92\r\nKPX Y uring -92\r\nKPX Yacute A -50\r\nKPX Yacute Aacute -50\r\nKPX Yacute Abreve -50\r\nKPX Yacute Acircumflex -50\r\nKPX Yacute Adieresis -50\r\nKPX Yacute Agrave -50\r\nKPX Yacute Amacron -50\r\nKPX Yacute Aogonek -50\r\nKPX Yacute Aring -50\r\nKPX Yacute Atilde -50\r\nKPX Yacute O -15\r\nKPX Yacute Oacute -15\r\nKPX Yacute Ocircumflex -15\r\nKPX Yacute Odieresis -15\r\nKPX Yacute Ograve -15\r\nKPX Yacute Ohungarumlaut -15\r\nKPX Yacute Omacron -15\r\nKPX Yacute Oslash -15\r\nKPX Yacute Otilde -15\r\nKPX Yacute a -92\r\nKPX Yacute aacute -92\r\nKPX Yacute abreve -92\r\nKPX Yacute acircumflex -92\r\nKPX Yacute adieresis -92\r\nKPX Yacute agrave -92\r\nKPX Yacute amacron -92\r\nKPX Yacute aogonek -92\r\nKPX Yacute aring -92\r\nKPX Yacute atilde -92\r\nKPX Yacute colon -65\r\nKPX Yacute comma -92\r\nKPX Yacute e -92\r\nKPX Yacute eacute -92\r\nKPX Yacute ecaron -92\r\nKPX Yacute ecircumflex -92\r\nKPX Yacute edieresis -52\r\nKPX Yacute edotaccent -92\r\nKPX Yacute egrave -52\r\nKPX Yacute emacron -52\r\nKPX Yacute eogonek -92\r\nKPX Yacute hyphen -74\r\nKPX Yacute i -74\r\nKPX Yacute iacute -74\r\nKPX Yacute icircumflex -34\r\nKPX Yacute idieresis -34\r\nKPX Yacute igrave -34\r\nKPX Yacute imacron -34\r\nKPX Yacute iogonek -74\r\nKPX Yacute o -92\r\nKPX Yacute oacute -92\r\nKPX Yacute ocircumflex -92\r\nKPX Yacute odieresis -92\r\nKPX Yacute ograve -92\r\nKPX Yacute ohungarumlaut -92\r\nKPX Yacute omacron -92\r\nKPX Yacute oslash -92\r\nKPX Yacute otilde -92\r\nKPX Yacute period -92\r\nKPX Yacute semicolon -65\r\nKPX Yacute u -92\r\nKPX Yacute uacute -92\r\nKPX Yacute ucircumflex -92\r\nKPX Yacute udieresis -92\r\nKPX Yacute ugrave -92\r\nKPX Yacute uhungarumlaut -92\r\nKPX Yacute umacron -92\r\nKPX Yacute uogonek -92\r\nKPX Yacute uring -92\r\nKPX Ydieresis A -50\r\nKPX Ydieresis Aacute -50\r\nKPX Ydieresis Abreve -50\r\nKPX Ydieresis Acircumflex -50\r\nKPX Ydieresis Adieresis -50\r\nKPX Ydieresis Agrave -50\r\nKPX Ydieresis Amacron -50\r\nKPX Ydieresis Aogonek -50\r\nKPX Ydieresis Aring -50\r\nKPX Ydieresis Atilde -50\r\nKPX Ydieresis O -15\r\nKPX Ydieresis Oacute -15\r\nKPX Ydieresis Ocircumflex -15\r\nKPX Ydieresis Odieresis -15\r\nKPX Ydieresis Ograve -15\r\nKPX Ydieresis Ohungarumlaut -15\r\nKPX Ydieresis Omacron -15\r\nKPX Ydieresis Oslash -15\r\nKPX Ydieresis Otilde -15\r\nKPX Ydieresis a -92\r\nKPX Ydieresis aacute -92\r\nKPX Ydieresis abreve -92\r\nKPX Ydieresis acircumflex -92\r\nKPX Ydieresis adieresis -92\r\nKPX Ydieresis agrave -92\r\nKPX Ydieresis amacron -92\r\nKPX Ydieresis aogonek -92\r\nKPX Ydieresis aring -92\r\nKPX Ydieresis atilde -92\r\nKPX Ydieresis colon -65\r\nKPX Ydieresis comma -92\r\nKPX Ydieresis e -92\r\nKPX Ydieresis eacute -92\r\nKPX Ydieresis ecaron -92\r\nKPX Ydieresis ecircumflex -92\r\nKPX Ydieresis edieresis -52\r\nKPX Ydieresis edotaccent -92\r\nKPX Ydieresis egrave -52\r\nKPX Ydieresis emacron -52\r\nKPX Ydieresis eogonek -92\r\nKPX Ydieresis hyphen -74\r\nKPX Ydieresis i -74\r\nKPX Ydieresis iacute -74\r\nKPX Ydieresis icircumflex -34\r\nKPX Ydieresis idieresis -34\r\nKPX Ydieresis igrave -34\r\nKPX Ydieresis imacron -34\r\nKPX Ydieresis iogonek -74\r\nKPX Ydieresis o -92\r\nKPX Ydieresis oacute -92\r\nKPX Ydieresis ocircumflex -92\r\nKPX Ydieresis odieresis -92\r\nKPX Ydieresis ograve -92\r\nKPX Ydieresis ohungarumlaut -92\r\nKPX Ydieresis omacron -92\r\nKPX Ydieresis oslash -92\r\nKPX Ydieresis otilde -92\r\nKPX Ydieresis period -92\r\nKPX Ydieresis semicolon -65\r\nKPX Ydieresis u -92\r\nKPX Ydieresis uacute -92\r\nKPX Ydieresis ucircumflex -92\r\nKPX Ydieresis udieresis -92\r\nKPX Ydieresis ugrave -92\r\nKPX Ydieresis uhungarumlaut -92\r\nKPX Ydieresis umacron -92\r\nKPX Ydieresis uogonek -92\r\nKPX Ydieresis uring -92\r\nKPX a g -10\r\nKPX a gbreve -10\r\nKPX a gcommaaccent -10\r\nKPX aacute g -10\r\nKPX aacute gbreve -10\r\nKPX aacute gcommaaccent -10\r\nKPX abreve g -10\r\nKPX abreve gbreve -10\r\nKPX abreve gcommaaccent -10\r\nKPX acircumflex g -10\r\nKPX acircumflex gbreve -10\r\nKPX acircumflex gcommaaccent -10\r\nKPX adieresis g -10\r\nKPX adieresis gbreve -10\r\nKPX adieresis gcommaaccent -10\r\nKPX agrave g -10\r\nKPX agrave gbreve -10\r\nKPX agrave gcommaaccent -10\r\nKPX amacron g -10\r\nKPX amacron gbreve -10\r\nKPX amacron gcommaaccent -10\r\nKPX aogonek g -10\r\nKPX aogonek gbreve -10\r\nKPX aogonek gcommaaccent -10\r\nKPX aring g -10\r\nKPX aring gbreve -10\r\nKPX aring gcommaaccent -10\r\nKPX atilde g -10\r\nKPX atilde gbreve -10\r\nKPX atilde gcommaaccent -10\r\nKPX b period -40\r\nKPX b u -20\r\nKPX b uacute -20\r\nKPX b ucircumflex -20\r\nKPX b udieresis -20\r\nKPX b ugrave -20\r\nKPX b uhungarumlaut -20\r\nKPX b umacron -20\r\nKPX b uogonek -20\r\nKPX b uring -20\r\nKPX c h -15\r\nKPX c k -20\r\nKPX c kcommaaccent -20\r\nKPX cacute h -15\r\nKPX cacute k -20\r\nKPX cacute kcommaaccent -20\r\nKPX ccaron h -15\r\nKPX ccaron k -20\r\nKPX ccaron kcommaaccent -20\r\nKPX ccedilla h -15\r\nKPX ccedilla k -20\r\nKPX ccedilla kcommaaccent -20\r\nKPX comma quotedblright -140\r\nKPX comma quoteright -140\r\nKPX e comma -10\r\nKPX e g -40\r\nKPX e gbreve -40\r\nKPX e gcommaaccent -40\r\nKPX e period -15\r\nKPX e v -15\r\nKPX e w -15\r\nKPX e x -20\r\nKPX e y -30\r\nKPX e yacute -30\r\nKPX e ydieresis -30\r\nKPX eacute comma -10\r\nKPX eacute g -40\r\nKPX eacute gbreve -40\r\nKPX eacute gcommaaccent -40\r\nKPX eacute period -15\r\nKPX eacute v -15\r\nKPX eacute w -15\r\nKPX eacute x -20\r\nKPX eacute y -30\r\nKPX eacute yacute -30\r\nKPX eacute ydieresis -30\r\nKPX ecaron comma -10\r\nKPX ecaron g -40\r\nKPX ecaron gbreve -40\r\nKPX ecaron gcommaaccent -40\r\nKPX ecaron period -15\r\nKPX ecaron v -15\r\nKPX ecaron w -15\r\nKPX ecaron x -20\r\nKPX ecaron y -30\r\nKPX ecaron yacute -30\r\nKPX ecaron ydieresis -30\r\nKPX ecircumflex comma -10\r\nKPX ecircumflex g -40\r\nKPX ecircumflex gbreve -40\r\nKPX ecircumflex gcommaaccent -40\r\nKPX ecircumflex period -15\r\nKPX ecircumflex v -15\r\nKPX ecircumflex w -15\r\nKPX ecircumflex x -20\r\nKPX ecircumflex y -30\r\nKPX ecircumflex yacute -30\r\nKPX ecircumflex ydieresis -30\r\nKPX edieresis comma -10\r\nKPX edieresis g -40\r\nKPX edieresis gbreve -40\r\nKPX edieresis gcommaaccent -40\r\nKPX edieresis period -15\r\nKPX edieresis v -15\r\nKPX edieresis w -15\r\nKPX edieresis x -20\r\nKPX edieresis y -30\r\nKPX edieresis yacute -30\r\nKPX edieresis ydieresis -30\r\nKPX edotaccent comma -10\r\nKPX edotaccent g -40\r\nKPX edotaccent gbreve -40\r\nKPX edotaccent gcommaaccent -40\r\nKPX edotaccent period -15\r\nKPX edotaccent v -15\r\nKPX edotaccent w -15\r\nKPX edotaccent x -20\r\nKPX edotaccent y -30\r\nKPX edotaccent yacute -30\r\nKPX edotaccent ydieresis -30\r\nKPX egrave comma -10\r\nKPX egrave g -40\r\nKPX egrave gbreve -40\r\nKPX egrave gcommaaccent -40\r\nKPX egrave period -15\r\nKPX egrave v -15\r\nKPX egrave w -15\r\nKPX egrave x -20\r\nKPX egrave y -30\r\nKPX egrave yacute -30\r\nKPX egrave ydieresis -30\r\nKPX emacron comma -10\r\nKPX emacron g -40\r\nKPX emacron gbreve -40\r\nKPX emacron gcommaaccent -40\r\nKPX emacron period -15\r\nKPX emacron v -15\r\nKPX emacron w -15\r\nKPX emacron x -20\r\nKPX emacron y -30\r\nKPX emacron yacute -30\r\nKPX emacron ydieresis -30\r\nKPX eogonek comma -10\r\nKPX eogonek g -40\r\nKPX eogonek gbreve -40\r\nKPX eogonek gcommaaccent -40\r\nKPX eogonek period -15\r\nKPX eogonek v -15\r\nKPX eogonek w -15\r\nKPX eogonek x -20\r\nKPX eogonek y -30\r\nKPX eogonek yacute -30\r\nKPX eogonek ydieresis -30\r\nKPX f comma -10\r\nKPX f dotlessi -60\r\nKPX f f -18\r\nKPX f i -20\r\nKPX f iogonek -20\r\nKPX f period -15\r\nKPX f quoteright 92\r\nKPX g comma -10\r\nKPX g e -10\r\nKPX g eacute -10\r\nKPX g ecaron -10\r\nKPX g ecircumflex -10\r\nKPX g edieresis -10\r\nKPX g edotaccent -10\r\nKPX g egrave -10\r\nKPX g emacron -10\r\nKPX g eogonek -10\r\nKPX g g -10\r\nKPX g gbreve -10\r\nKPX g gcommaaccent -10\r\nKPX g period -15\r\nKPX gbreve comma -10\r\nKPX gbreve e -10\r\nKPX gbreve eacute -10\r\nKPX gbreve ecaron -10\r\nKPX gbreve ecircumflex -10\r\nKPX gbreve edieresis -10\r\nKPX gbreve edotaccent -10\r\nKPX gbreve egrave -10\r\nKPX gbreve emacron -10\r\nKPX gbreve eogonek -10\r\nKPX gbreve g -10\r\nKPX gbreve gbreve -10\r\nKPX gbreve gcommaaccent -10\r\nKPX gbreve period -15\r\nKPX gcommaaccent comma -10\r\nKPX gcommaaccent e -10\r\nKPX gcommaaccent eacute -10\r\nKPX gcommaaccent ecaron -10\r\nKPX gcommaaccent ecircumflex -10\r\nKPX gcommaaccent edieresis -10\r\nKPX gcommaaccent edotaccent -10\r\nKPX gcommaaccent egrave -10\r\nKPX gcommaaccent emacron -10\r\nKPX gcommaaccent eogonek -10\r\nKPX gcommaaccent g -10\r\nKPX gcommaaccent gbreve -10\r\nKPX gcommaaccent gcommaaccent -10\r\nKPX gcommaaccent period -15\r\nKPX k e -10\r\nKPX k eacute -10\r\nKPX k ecaron -10\r\nKPX k ecircumflex -10\r\nKPX k edieresis -10\r\nKPX k edotaccent -10\r\nKPX k egrave -10\r\nKPX k emacron -10\r\nKPX k eogonek -10\r\nKPX k o -10\r\nKPX k oacute -10\r\nKPX k ocircumflex -10\r\nKPX k odieresis -10\r\nKPX k ograve -10\r\nKPX k ohungarumlaut -10\r\nKPX k omacron -10\r\nKPX k oslash -10\r\nKPX k otilde -10\r\nKPX k y -10\r\nKPX k yacute -10\r\nKPX k ydieresis -10\r\nKPX kcommaaccent e -10\r\nKPX kcommaaccent eacute -10\r\nKPX kcommaaccent ecaron -10\r\nKPX kcommaaccent ecircumflex -10\r\nKPX kcommaaccent edieresis -10\r\nKPX kcommaaccent edotaccent -10\r\nKPX kcommaaccent egrave -10\r\nKPX kcommaaccent emacron -10\r\nKPX kcommaaccent eogonek -10\r\nKPX kcommaaccent o -10\r\nKPX kcommaaccent oacute -10\r\nKPX kcommaaccent ocircumflex -10\r\nKPX kcommaaccent odieresis -10\r\nKPX kcommaaccent ograve -10\r\nKPX kcommaaccent ohungarumlaut -10\r\nKPX kcommaaccent omacron -10\r\nKPX kcommaaccent oslash -10\r\nKPX kcommaaccent otilde -10\r\nKPX kcommaaccent y -10\r\nKPX kcommaaccent yacute -10\r\nKPX kcommaaccent ydieresis -10\r\nKPX n v -40\r\nKPX nacute v -40\r\nKPX ncaron v -40\r\nKPX ncommaaccent v -40\r\nKPX ntilde v -40\r\nKPX o g -10\r\nKPX o gbreve -10\r\nKPX o gcommaaccent -10\r\nKPX o v -10\r\nKPX oacute g -10\r\nKPX oacute gbreve -10\r\nKPX oacute gcommaaccent -10\r\nKPX oacute v -10\r\nKPX ocircumflex g -10\r\nKPX ocircumflex gbreve -10\r\nKPX ocircumflex gcommaaccent -10\r\nKPX ocircumflex v -10\r\nKPX odieresis g -10\r\nKPX odieresis gbreve -10\r\nKPX odieresis gcommaaccent -10\r\nKPX odieresis v -10\r\nKPX ograve g -10\r\nKPX ograve gbreve -10\r\nKPX ograve gcommaaccent -10\r\nKPX ograve v -10\r\nKPX ohungarumlaut g -10\r\nKPX ohungarumlaut gbreve -10\r\nKPX ohungarumlaut gcommaaccent -10\r\nKPX ohungarumlaut v -10\r\nKPX omacron g -10\r\nKPX omacron gbreve -10\r\nKPX omacron gcommaaccent -10\r\nKPX omacron v -10\r\nKPX oslash g -10\r\nKPX oslash gbreve -10\r\nKPX oslash gcommaaccent -10\r\nKPX oslash v -10\r\nKPX otilde g -10\r\nKPX otilde gbreve -10\r\nKPX otilde gcommaaccent -10\r\nKPX otilde v -10\r\nKPX period quotedblright -140\r\nKPX period quoteright -140\r\nKPX quoteleft quoteleft -111\r\nKPX quoteright d -25\r\nKPX quoteright dcroat -25\r\nKPX quoteright quoteright -111\r\nKPX quoteright r -25\r\nKPX quoteright racute -25\r\nKPX quoteright rcaron -25\r\nKPX quoteright rcommaaccent -25\r\nKPX quoteright s -40\r\nKPX quoteright sacute -40\r\nKPX quoteright scaron -40\r\nKPX quoteright scedilla -40\r\nKPX quoteright scommaaccent -40\r\nKPX quoteright space -111\r\nKPX quoteright t -30\r\nKPX quoteright tcommaaccent -30\r\nKPX quoteright v -10\r\nKPX r a -15\r\nKPX r aacute -15\r\nKPX r abreve -15\r\nKPX r acircumflex -15\r\nKPX r adieresis -15\r\nKPX r agrave -15\r\nKPX r amacron -15\r\nKPX r aogonek -15\r\nKPX r aring -15\r\nKPX r atilde -15\r\nKPX r c -37\r\nKPX r cacute -37\r\nKPX r ccaron -37\r\nKPX r ccedilla -37\r\nKPX r comma -111\r\nKPX r d -37\r\nKPX r dcroat -37\r\nKPX r e -37\r\nKPX r eacute -37\r\nKPX r ecaron -37\r\nKPX r ecircumflex -37\r\nKPX r edieresis -37\r\nKPX r edotaccent -37\r\nKPX r egrave -37\r\nKPX r emacron -37\r\nKPX r eogonek -37\r\nKPX r g -37\r\nKPX r gbreve -37\r\nKPX r gcommaaccent -37\r\nKPX r hyphen -20\r\nKPX r o -45\r\nKPX r oacute -45\r\nKPX r ocircumflex -45\r\nKPX r odieresis -45\r\nKPX r ograve -45\r\nKPX r ohungarumlaut -45\r\nKPX r omacron -45\r\nKPX r oslash -45\r\nKPX r otilde -45\r\nKPX r period -111\r\nKPX r q -37\r\nKPX r s -10\r\nKPX r sacute -10\r\nKPX r scaron -10\r\nKPX r scedilla -10\r\nKPX r scommaaccent -10\r\nKPX racute a -15\r\nKPX racute aacute -15\r\nKPX racute abreve -15\r\nKPX racute acircumflex -15\r\nKPX racute adieresis -15\r\nKPX racute agrave -15\r\nKPX racute amacron -15\r\nKPX racute aogonek -15\r\nKPX racute aring -15\r\nKPX racute atilde -15\r\nKPX racute c -37\r\nKPX racute cacute -37\r\nKPX racute ccaron -37\r\nKPX racute ccedilla -37\r\nKPX racute comma -111\r\nKPX racute d -37\r\nKPX racute dcroat -37\r\nKPX racute e -37\r\nKPX racute eacute -37\r\nKPX racute ecaron -37\r\nKPX racute ecircumflex -37\r\nKPX racute edieresis -37\r\nKPX racute edotaccent -37\r\nKPX racute egrave -37\r\nKPX racute emacron -37\r\nKPX racute eogonek -37\r\nKPX racute g -37\r\nKPX racute gbreve -37\r\nKPX racute gcommaaccent -37\r\nKPX racute hyphen -20\r\nKPX racute o -45\r\nKPX racute oacute -45\r\nKPX racute ocircumflex -45\r\nKPX racute odieresis -45\r\nKPX racute ograve -45\r\nKPX racute ohungarumlaut -45\r\nKPX racute omacron -45\r\nKPX racute oslash -45\r\nKPX racute otilde -45\r\nKPX racute period -111\r\nKPX racute q -37\r\nKPX racute s -10\r\nKPX racute sacute -10\r\nKPX racute scaron -10\r\nKPX racute scedilla -10\r\nKPX racute scommaaccent -10\r\nKPX rcaron a -15\r\nKPX rcaron aacute -15\r\nKPX rcaron abreve -15\r\nKPX rcaron acircumflex -15\r\nKPX rcaron adieresis -15\r\nKPX rcaron agrave -15\r\nKPX rcaron amacron -15\r\nKPX rcaron aogonek -15\r\nKPX rcaron aring -15\r\nKPX rcaron atilde -15\r\nKPX rcaron c -37\r\nKPX rcaron cacute -37\r\nKPX rcaron ccaron -37\r\nKPX rcaron ccedilla -37\r\nKPX rcaron comma -111\r\nKPX rcaron d -37\r\nKPX rcaron dcroat -37\r\nKPX rcaron e -37\r\nKPX rcaron eacute -37\r\nKPX rcaron ecaron -37\r\nKPX rcaron ecircumflex -37\r\nKPX rcaron edieresis -37\r\nKPX rcaron edotaccent -37\r\nKPX rcaron egrave -37\r\nKPX rcaron emacron -37\r\nKPX rcaron eogonek -37\r\nKPX rcaron g -37\r\nKPX rcaron gbreve -37\r\nKPX rcaron gcommaaccent -37\r\nKPX rcaron hyphen -20\r\nKPX rcaron o -45\r\nKPX rcaron oacute -45\r\nKPX rcaron ocircumflex -45\r\nKPX rcaron odieresis -45\r\nKPX rcaron ograve -45\r\nKPX rcaron ohungarumlaut -45\r\nKPX rcaron omacron -45\r\nKPX rcaron oslash -45\r\nKPX rcaron otilde -45\r\nKPX rcaron period -111\r\nKPX rcaron q -37\r\nKPX rcaron s -10\r\nKPX rcaron sacute -10\r\nKPX rcaron scaron -10\r\nKPX rcaron scedilla -10\r\nKPX rcaron scommaaccent -10\r\nKPX rcommaaccent a -15\r\nKPX rcommaaccent aacute -15\r\nKPX rcommaaccent abreve -15\r\nKPX rcommaaccent acircumflex -15\r\nKPX rcommaaccent adieresis -15\r\nKPX rcommaaccent agrave -15\r\nKPX rcommaaccent amacron -15\r\nKPX rcommaaccent aogonek -15\r\nKPX rcommaaccent aring -15\r\nKPX rcommaaccent atilde -15\r\nKPX rcommaaccent c -37\r\nKPX rcommaaccent cacute -37\r\nKPX rcommaaccent ccaron -37\r\nKPX rcommaaccent ccedilla -37\r\nKPX rcommaaccent comma -111\r\nKPX rcommaaccent d -37\r\nKPX rcommaaccent dcroat -37\r\nKPX rcommaaccent e -37\r\nKPX rcommaaccent eacute -37\r\nKPX rcommaaccent ecaron -37\r\nKPX rcommaaccent ecircumflex -37\r\nKPX rcommaaccent edieresis -37\r\nKPX rcommaaccent edotaccent -37\r\nKPX rcommaaccent egrave -37\r\nKPX rcommaaccent emacron -37\r\nKPX rcommaaccent eogonek -37\r\nKPX rcommaaccent g -37\r\nKPX rcommaaccent gbreve -37\r\nKPX rcommaaccent gcommaaccent -37\r\nKPX rcommaaccent hyphen -20\r\nKPX rcommaaccent o -45\r\nKPX rcommaaccent oacute -45\r\nKPX rcommaaccent ocircumflex -45\r\nKPX rcommaaccent odieresis -45\r\nKPX rcommaaccent ograve -45\r\nKPX rcommaaccent ohungarumlaut -45\r\nKPX rcommaaccent omacron -45\r\nKPX rcommaaccent oslash -45\r\nKPX rcommaaccent otilde -45\r\nKPX rcommaaccent period -111\r\nKPX rcommaaccent q -37\r\nKPX rcommaaccent s -10\r\nKPX rcommaaccent sacute -10\r\nKPX rcommaaccent scaron -10\r\nKPX rcommaaccent scedilla -10\r\nKPX rcommaaccent scommaaccent -10\r\nKPX space A -18\r\nKPX space Aacute -18\r\nKPX space Abreve -18\r\nKPX space Acircumflex -18\r\nKPX space Adieresis -18\r\nKPX space Agrave -18\r\nKPX space Amacron -18\r\nKPX space Aogonek -18\r\nKPX space Aring -18\r\nKPX space Atilde -18\r\nKPX space T -18\r\nKPX space Tcaron -18\r\nKPX space Tcommaaccent -18\r\nKPX space V -35\r\nKPX space W -40\r\nKPX space Y -75\r\nKPX space Yacute -75\r\nKPX space Ydieresis -75\r\nKPX v comma -74\r\nKPX v period -74\r\nKPX w comma -74\r\nKPX w period -74\r\nKPX y comma -55\r\nKPX y period -55\r\nKPX yacute comma -55\r\nKPX yacute period -55\r\nKPX ydieresis comma -55\r\nKPX ydieresis period -55\r\nEndKernPairs\r\nEndKernData\r\nEndFontMetrics\r\n",
  'Times-BoldItalic.afm': "StartFontMetrics 4.1\r\nComment Copyright (c) 1985, 1987, 1989, 1990, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.\r\nComment Creation Date: Thu May  1 13:04:06 1997\r\nComment UniqueID 43066\r\nComment VMusage 45874 56899\r\nFontName Times-BoldItalic\r\nFullName Times Bold Italic\r\nFamilyName Times\r\nWeight Bold\r\nItalicAngle -15\r\nIsFixedPitch false\r\nCharacterSet ExtendedRoman\r\nFontBBox -200 -218 996 921 \r\nUnderlinePosition -100\r\nUnderlineThickness 50\r\nVersion 002.000\r\nNotice Copyright (c) 1985, 1987, 1989, 1990, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.Times is a trademark of Linotype-Hell AG and/or its subsidiaries.\r\nEncodingScheme AdobeStandardEncoding\r\nCapHeight 669\r\nXHeight 462\r\nAscender 683\r\nDescender -217\r\nStdHW 42\r\nStdVW 121\r\nStartCharMetrics 315\r\nC 32 ; WX 250 ; N space ; B 0 0 0 0 ;\r\nC 33 ; WX 389 ; N exclam ; B 67 -13 370 684 ;\r\nC 34 ; WX 555 ; N quotedbl ; B 136 398 536 685 ;\r\nC 35 ; WX 500 ; N numbersign ; B -33 0 533 700 ;\r\nC 36 ; WX 500 ; N dollar ; B -20 -100 497 733 ;\r\nC 37 ; WX 833 ; N percent ; B 39 -10 793 692 ;\r\nC 38 ; WX 778 ; N ampersand ; B 5 -19 699 682 ;\r\nC 39 ; WX 333 ; N quoteright ; B 98 369 302 685 ;\r\nC 40 ; WX 333 ; N parenleft ; B 28 -179 344 685 ;\r\nC 41 ; WX 333 ; N parenright ; B -44 -179 271 685 ;\r\nC 42 ; WX 500 ; N asterisk ; B 65 249 456 685 ;\r\nC 43 ; WX 570 ; N plus ; B 33 0 537 506 ;\r\nC 44 ; WX 250 ; N comma ; B -60 -182 144 134 ;\r\nC 45 ; WX 333 ; N hyphen ; B 2 166 271 282 ;\r\nC 46 ; WX 250 ; N period ; B -9 -13 139 135 ;\r\nC 47 ; WX 278 ; N slash ; B -64 -18 342 685 ;\r\nC 48 ; WX 500 ; N zero ; B 17 -14 477 683 ;\r\nC 49 ; WX 500 ; N one ; B 5 0 419 683 ;\r\nC 50 ; WX 500 ; N two ; B -27 0 446 683 ;\r\nC 51 ; WX 500 ; N three ; B -15 -13 450 683 ;\r\nC 52 ; WX 500 ; N four ; B -15 0 503 683 ;\r\nC 53 ; WX 500 ; N five ; B -11 -13 487 669 ;\r\nC 54 ; WX 500 ; N six ; B 23 -15 509 679 ;\r\nC 55 ; WX 500 ; N seven ; B 52 0 525 669 ;\r\nC 56 ; WX 500 ; N eight ; B 3 -13 476 683 ;\r\nC 57 ; WX 500 ; N nine ; B -12 -10 475 683 ;\r\nC 58 ; WX 333 ; N colon ; B 23 -13 264 459 ;\r\nC 59 ; WX 333 ; N semicolon ; B -25 -183 264 459 ;\r\nC 60 ; WX 570 ; N less ; B 31 -8 539 514 ;\r\nC 61 ; WX 570 ; N equal ; B 33 107 537 399 ;\r\nC 62 ; WX 570 ; N greater ; B 31 -8 539 514 ;\r\nC 63 ; WX 500 ; N question ; B 79 -13 470 684 ;\r\nC 64 ; WX 832 ; N at ; B 63 -18 770 685 ;\r\nC 65 ; WX 667 ; N A ; B -67 0 593 683 ;\r\nC 66 ; WX 667 ; N B ; B -24 0 624 669 ;\r\nC 67 ; WX 667 ; N C ; B 32 -18 677 685 ;\r\nC 68 ; WX 722 ; N D ; B -46 0 685 669 ;\r\nC 69 ; WX 667 ; N E ; B -27 0 653 669 ;\r\nC 70 ; WX 667 ; N F ; B -13 0 660 669 ;\r\nC 71 ; WX 722 ; N G ; B 21 -18 706 685 ;\r\nC 72 ; WX 778 ; N H ; B -24 0 799 669 ;\r\nC 73 ; WX 389 ; N I ; B -32 0 406 669 ;\r\nC 74 ; WX 500 ; N J ; B -46 -99 524 669 ;\r\nC 75 ; WX 667 ; N K ; B -21 0 702 669 ;\r\nC 76 ; WX 611 ; N L ; B -22 0 590 669 ;\r\nC 77 ; WX 889 ; N M ; B -29 -12 917 669 ;\r\nC 78 ; WX 722 ; N N ; B -27 -15 748 669 ;\r\nC 79 ; WX 722 ; N O ; B 27 -18 691 685 ;\r\nC 80 ; WX 611 ; N P ; B -27 0 613 669 ;\r\nC 81 ; WX 722 ; N Q ; B 27 -208 691 685 ;\r\nC 82 ; WX 667 ; N R ; B -29 0 623 669 ;\r\nC 83 ; WX 556 ; N S ; B 2 -18 526 685 ;\r\nC 84 ; WX 611 ; N T ; B 50 0 650 669 ;\r\nC 85 ; WX 722 ; N U ; B 67 -18 744 669 ;\r\nC 86 ; WX 667 ; N V ; B 65 -18 715 669 ;\r\nC 87 ; WX 889 ; N W ; B 65 -18 940 669 ;\r\nC 88 ; WX 667 ; N X ; B -24 0 694 669 ;\r\nC 89 ; WX 611 ; N Y ; B 73 0 659 669 ;\r\nC 90 ; WX 611 ; N Z ; B -11 0 590 669 ;\r\nC 91 ; WX 333 ; N bracketleft ; B -37 -159 362 674 ;\r\nC 92 ; WX 278 ; N backslash ; B -1 -18 279 685 ;\r\nC 93 ; WX 333 ; N bracketright ; B -56 -157 343 674 ;\r\nC 94 ; WX 570 ; N asciicircum ; B 67 304 503 669 ;\r\nC 95 ; WX 500 ; N underscore ; B 0 -125 500 -75 ;\r\nC 96 ; WX 333 ; N quoteleft ; B 128 369 332 685 ;\r\nC 97 ; WX 500 ; N a ; B -21 -14 455 462 ;\r\nC 98 ; WX 500 ; N b ; B -14 -13 444 699 ;\r\nC 99 ; WX 444 ; N c ; B -5 -13 392 462 ;\r\nC 100 ; WX 500 ; N d ; B -21 -13 517 699 ;\r\nC 101 ; WX 444 ; N e ; B 5 -13 398 462 ;\r\nC 102 ; WX 333 ; N f ; B -169 -205 446 698 ; L i fi ; L l fl ;\r\nC 103 ; WX 500 ; N g ; B -52 -203 478 462 ;\r\nC 104 ; WX 556 ; N h ; B -13 -9 498 699 ;\r\nC 105 ; WX 278 ; N i ; B 2 -9 263 684 ;\r\nC 106 ; WX 278 ; N j ; B -189 -207 279 684 ;\r\nC 107 ; WX 500 ; N k ; B -23 -8 483 699 ;\r\nC 108 ; WX 278 ; N l ; B 2 -9 290 699 ;\r\nC 109 ; WX 778 ; N m ; B -14 -9 722 462 ;\r\nC 110 ; WX 556 ; N n ; B -6 -9 493 462 ;\r\nC 111 ; WX 500 ; N o ; B -3 -13 441 462 ;\r\nC 112 ; WX 500 ; N p ; B -120 -205 446 462 ;\r\nC 113 ; WX 500 ; N q ; B 1 -205 471 462 ;\r\nC 114 ; WX 389 ; N r ; B -21 0 389 462 ;\r\nC 115 ; WX 389 ; N s ; B -19 -13 333 462 ;\r\nC 116 ; WX 278 ; N t ; B -11 -9 281 594 ;\r\nC 117 ; WX 556 ; N u ; B 15 -9 492 462 ;\r\nC 118 ; WX 444 ; N v ; B 16 -13 401 462 ;\r\nC 119 ; WX 667 ; N w ; B 16 -13 614 462 ;\r\nC 120 ; WX 500 ; N x ; B -46 -13 469 462 ;\r\nC 121 ; WX 444 ; N y ; B -94 -205 392 462 ;\r\nC 122 ; WX 389 ; N z ; B -43 -78 368 449 ;\r\nC 123 ; WX 348 ; N braceleft ; B 5 -187 436 686 ;\r\nC 124 ; WX 220 ; N bar ; B 66 -218 154 782 ;\r\nC 125 ; WX 348 ; N braceright ; B -129 -187 302 686 ;\r\nC 126 ; WX 570 ; N asciitilde ; B 54 173 516 333 ;\r\nC 161 ; WX 389 ; N exclamdown ; B 19 -205 322 492 ;\r\nC 162 ; WX 500 ; N cent ; B 42 -143 439 576 ;\r\nC 163 ; WX 500 ; N sterling ; B -32 -12 510 683 ;\r\nC 164 ; WX 167 ; N fraction ; B -169 -14 324 683 ;\r\nC 165 ; WX 500 ; N yen ; B 33 0 628 669 ;\r\nC 166 ; WX 500 ; N florin ; B -87 -156 537 707 ;\r\nC 167 ; WX 500 ; N section ; B 36 -143 459 685 ;\r\nC 168 ; WX 500 ; N currency ; B -26 34 526 586 ;\r\nC 169 ; WX 278 ; N quotesingle ; B 128 398 268 685 ;\r\nC 170 ; WX 500 ; N quotedblleft ; B 53 369 513 685 ;\r\nC 171 ; WX 500 ; N guillemotleft ; B 12 32 468 415 ;\r\nC 172 ; WX 333 ; N guilsinglleft ; B 32 32 303 415 ;\r\nC 173 ; WX 333 ; N guilsinglright ; B 10 32 281 415 ;\r\nC 174 ; WX 556 ; N fi ; B -188 -205 514 703 ;\r\nC 175 ; WX 556 ; N fl ; B -186 -205 553 704 ;\r\nC 177 ; WX 500 ; N endash ; B -40 178 477 269 ;\r\nC 178 ; WX 500 ; N dagger ; B 91 -145 494 685 ;\r\nC 179 ; WX 500 ; N daggerdbl ; B 10 -139 493 685 ;\r\nC 180 ; WX 250 ; N periodcentered ; B 51 257 199 405 ;\r\nC 182 ; WX 500 ; N paragraph ; B -57 -193 562 669 ;\r\nC 183 ; WX 350 ; N bullet ; B 0 175 350 525 ;\r\nC 184 ; WX 333 ; N quotesinglbase ; B -5 -182 199 134 ;\r\nC 185 ; WX 500 ; N quotedblbase ; B -57 -182 403 134 ;\r\nC 186 ; WX 500 ; N quotedblright ; B 53 369 513 685 ;\r\nC 187 ; WX 500 ; N guillemotright ; B 12 32 468 415 ;\r\nC 188 ; WX 1000 ; N ellipsis ; B 40 -13 852 135 ;\r\nC 189 ; WX 1000 ; N perthousand ; B 7 -29 996 706 ;\r\nC 191 ; WX 500 ; N questiondown ; B 30 -205 421 492 ;\r\nC 193 ; WX 333 ; N grave ; B 85 516 297 697 ;\r\nC 194 ; WX 333 ; N acute ; B 139 516 379 697 ;\r\nC 195 ; WX 333 ; N circumflex ; B 40 516 367 690 ;\r\nC 196 ; WX 333 ; N tilde ; B 48 536 407 655 ;\r\nC 197 ; WX 333 ; N macron ; B 51 553 393 623 ;\r\nC 198 ; WX 333 ; N breve ; B 71 516 387 678 ;\r\nC 199 ; WX 333 ; N dotaccent ; B 163 550 298 684 ;\r\nC 200 ; WX 333 ; N dieresis ; B 55 550 402 684 ;\r\nC 202 ; WX 333 ; N ring ; B 127 516 340 729 ;\r\nC 203 ; WX 333 ; N cedilla ; B -80 -218 156 5 ;\r\nC 205 ; WX 333 ; N hungarumlaut ; B 69 516 498 697 ;\r\nC 206 ; WX 333 ; N ogonek ; B 15 -183 244 34 ;\r\nC 207 ; WX 333 ; N caron ; B 79 516 411 690 ;\r\nC 208 ; WX 1000 ; N emdash ; B -40 178 977 269 ;\r\nC 225 ; WX 944 ; N AE ; B -64 0 918 669 ;\r\nC 227 ; WX 266 ; N ordfeminine ; B 16 399 330 685 ;\r\nC 232 ; WX 611 ; N Lslash ; B -22 0 590 669 ;\r\nC 233 ; WX 722 ; N Oslash ; B 27 -125 691 764 ;\r\nC 234 ; WX 944 ; N OE ; B 23 -8 946 677 ;\r\nC 235 ; WX 300 ; N ordmasculine ; B 56 400 347 685 ;\r\nC 241 ; WX 722 ; N ae ; B -5 -13 673 462 ;\r\nC 245 ; WX 278 ; N dotlessi ; B 2 -9 238 462 ;\r\nC 248 ; WX 278 ; N lslash ; B -7 -9 307 699 ;\r\nC 249 ; WX 500 ; N oslash ; B -3 -119 441 560 ;\r\nC 250 ; WX 722 ; N oe ; B 6 -13 674 462 ;\r\nC 251 ; WX 500 ; N germandbls ; B -200 -200 473 705 ;\r\nC -1 ; WX 389 ; N Idieresis ; B -32 0 450 862 ;\r\nC -1 ; WX 444 ; N eacute ; B 5 -13 435 697 ;\r\nC -1 ; WX 500 ; N abreve ; B -21 -14 471 678 ;\r\nC -1 ; WX 556 ; N uhungarumlaut ; B 15 -9 610 697 ;\r\nC -1 ; WX 444 ; N ecaron ; B 5 -13 467 690 ;\r\nC -1 ; WX 611 ; N Ydieresis ; B 73 0 659 862 ;\r\nC -1 ; WX 570 ; N divide ; B 33 -29 537 535 ;\r\nC -1 ; WX 611 ; N Yacute ; B 73 0 659 904 ;\r\nC -1 ; WX 667 ; N Acircumflex ; B -67 0 593 897 ;\r\nC -1 ; WX 500 ; N aacute ; B -21 -14 463 697 ;\r\nC -1 ; WX 722 ; N Ucircumflex ; B 67 -18 744 897 ;\r\nC -1 ; WX 444 ; N yacute ; B -94 -205 435 697 ;\r\nC -1 ; WX 389 ; N scommaaccent ; B -19 -218 333 462 ;\r\nC -1 ; WX 444 ; N ecircumflex ; B 5 -13 423 690 ;\r\nC -1 ; WX 722 ; N Uring ; B 67 -18 744 921 ;\r\nC -1 ; WX 722 ; N Udieresis ; B 67 -18 744 862 ;\r\nC -1 ; WX 500 ; N aogonek ; B -21 -183 455 462 ;\r\nC -1 ; WX 722 ; N Uacute ; B 67 -18 744 904 ;\r\nC -1 ; WX 556 ; N uogonek ; B 15 -183 492 462 ;\r\nC -1 ; WX 667 ; N Edieresis ; B -27 0 653 862 ;\r\nC -1 ; WX 722 ; N Dcroat ; B -31 0 700 669 ;\r\nC -1 ; WX 250 ; N commaaccent ; B -36 -218 131 -50 ;\r\nC -1 ; WX 747 ; N copyright ; B 30 -18 718 685 ;\r\nC -1 ; WX 667 ; N Emacron ; B -27 0 653 830 ;\r\nC -1 ; WX 444 ; N ccaron ; B -5 -13 467 690 ;\r\nC -1 ; WX 500 ; N aring ; B -21 -14 455 729 ;\r\nC -1 ; WX 722 ; N Ncommaaccent ; B -27 -218 748 669 ;\r\nC -1 ; WX 278 ; N lacute ; B 2 -9 392 904 ;\r\nC -1 ; WX 500 ; N agrave ; B -21 -14 455 697 ;\r\nC -1 ; WX 611 ; N Tcommaaccent ; B 50 -218 650 669 ;\r\nC -1 ; WX 667 ; N Cacute ; B 32 -18 677 904 ;\r\nC -1 ; WX 500 ; N atilde ; B -21 -14 491 655 ;\r\nC -1 ; WX 667 ; N Edotaccent ; B -27 0 653 862 ;\r\nC -1 ; WX 389 ; N scaron ; B -19 -13 424 690 ;\r\nC -1 ; WX 389 ; N scedilla ; B -19 -218 333 462 ;\r\nC -1 ; WX 278 ; N iacute ; B 2 -9 352 697 ;\r\nC -1 ; WX 494 ; N lozenge ; B 10 0 484 745 ;\r\nC -1 ; WX 667 ; N Rcaron ; B -29 0 623 897 ;\r\nC -1 ; WX 722 ; N Gcommaaccent ; B 21 -218 706 685 ;\r\nC -1 ; WX 556 ; N ucircumflex ; B 15 -9 492 690 ;\r\nC -1 ; WX 500 ; N acircumflex ; B -21 -14 455 690 ;\r\nC -1 ; WX 667 ; N Amacron ; B -67 0 593 830 ;\r\nC -1 ; WX 389 ; N rcaron ; B -21 0 424 690 ;\r\nC -1 ; WX 444 ; N ccedilla ; B -5 -218 392 462 ;\r\nC -1 ; WX 611 ; N Zdotaccent ; B -11 0 590 862 ;\r\nC -1 ; WX 611 ; N Thorn ; B -27 0 573 669 ;\r\nC -1 ; WX 722 ; N Omacron ; B 27 -18 691 830 ;\r\nC -1 ; WX 667 ; N Racute ; B -29 0 623 904 ;\r\nC -1 ; WX 556 ; N Sacute ; B 2 -18 531 904 ;\r\nC -1 ; WX 608 ; N dcaron ; B -21 -13 675 708 ;\r\nC -1 ; WX 722 ; N Umacron ; B 67 -18 744 830 ;\r\nC -1 ; WX 556 ; N uring ; B 15 -9 492 729 ;\r\nC -1 ; WX 300 ; N threesuperior ; B 17 265 321 683 ;\r\nC -1 ; WX 722 ; N Ograve ; B 27 -18 691 904 ;\r\nC -1 ; WX 667 ; N Agrave ; B -67 0 593 904 ;\r\nC -1 ; WX 667 ; N Abreve ; B -67 0 593 885 ;\r\nC -1 ; WX 570 ; N multiply ; B 48 16 522 490 ;\r\nC -1 ; WX 556 ; N uacute ; B 15 -9 492 697 ;\r\nC -1 ; WX 611 ; N Tcaron ; B 50 0 650 897 ;\r\nC -1 ; WX 494 ; N partialdiff ; B 11 -21 494 750 ;\r\nC -1 ; WX 444 ; N ydieresis ; B -94 -205 443 655 ;\r\nC -1 ; WX 722 ; N Nacute ; B -27 -15 748 904 ;\r\nC -1 ; WX 278 ; N icircumflex ; B -3 -9 324 690 ;\r\nC -1 ; WX 667 ; N Ecircumflex ; B -27 0 653 897 ;\r\nC -1 ; WX 500 ; N adieresis ; B -21 -14 476 655 ;\r\nC -1 ; WX 444 ; N edieresis ; B 5 -13 448 655 ;\r\nC -1 ; WX 444 ; N cacute ; B -5 -13 435 697 ;\r\nC -1 ; WX 556 ; N nacute ; B -6 -9 493 697 ;\r\nC -1 ; WX 556 ; N umacron ; B 15 -9 492 623 ;\r\nC -1 ; WX 722 ; N Ncaron ; B -27 -15 748 897 ;\r\nC -1 ; WX 389 ; N Iacute ; B -32 0 432 904 ;\r\nC -1 ; WX 570 ; N plusminus ; B 33 0 537 506 ;\r\nC -1 ; WX 220 ; N brokenbar ; B 66 -143 154 707 ;\r\nC -1 ; WX 747 ; N registered ; B 30 -18 718 685 ;\r\nC -1 ; WX 722 ; N Gbreve ; B 21 -18 706 885 ;\r\nC -1 ; WX 389 ; N Idotaccent ; B -32 0 406 862 ;\r\nC -1 ; WX 600 ; N summation ; B 14 -10 585 706 ;\r\nC -1 ; WX 667 ; N Egrave ; B -27 0 653 904 ;\r\nC -1 ; WX 389 ; N racute ; B -21 0 407 697 ;\r\nC -1 ; WX 500 ; N omacron ; B -3 -13 462 623 ;\r\nC -1 ; WX 611 ; N Zacute ; B -11 0 590 904 ;\r\nC -1 ; WX 611 ; N Zcaron ; B -11 0 590 897 ;\r\nC -1 ; WX 549 ; N greaterequal ; B 26 0 523 704 ;\r\nC -1 ; WX 722 ; N Eth ; B -31 0 700 669 ;\r\nC -1 ; WX 667 ; N Ccedilla ; B 32 -218 677 685 ;\r\nC -1 ; WX 278 ; N lcommaaccent ; B -42 -218 290 699 ;\r\nC -1 ; WX 366 ; N tcaron ; B -11 -9 434 754 ;\r\nC -1 ; WX 444 ; N eogonek ; B 5 -183 398 462 ;\r\nC -1 ; WX 722 ; N Uogonek ; B 67 -183 744 669 ;\r\nC -1 ; WX 667 ; N Aacute ; B -67 0 593 904 ;\r\nC -1 ; WX 667 ; N Adieresis ; B -67 0 593 862 ;\r\nC -1 ; WX 444 ; N egrave ; B 5 -13 398 697 ;\r\nC -1 ; WX 389 ; N zacute ; B -43 -78 407 697 ;\r\nC -1 ; WX 278 ; N iogonek ; B -20 -183 263 684 ;\r\nC -1 ; WX 722 ; N Oacute ; B 27 -18 691 904 ;\r\nC -1 ; WX 500 ; N oacute ; B -3 -13 463 697 ;\r\nC -1 ; WX 500 ; N amacron ; B -21 -14 467 623 ;\r\nC -1 ; WX 389 ; N sacute ; B -19 -13 407 697 ;\r\nC -1 ; WX 278 ; N idieresis ; B 2 -9 364 655 ;\r\nC -1 ; WX 722 ; N Ocircumflex ; B 27 -18 691 897 ;\r\nC -1 ; WX 722 ; N Ugrave ; B 67 -18 744 904 ;\r\nC -1 ; WX 612 ; N Delta ; B 6 0 608 688 ;\r\nC -1 ; WX 500 ; N thorn ; B -120 -205 446 699 ;\r\nC -1 ; WX 300 ; N twosuperior ; B 2 274 313 683 ;\r\nC -1 ; WX 722 ; N Odieresis ; B 27 -18 691 862 ;\r\nC -1 ; WX 576 ; N mu ; B -60 -207 516 449 ;\r\nC -1 ; WX 278 ; N igrave ; B 2 -9 259 697 ;\r\nC -1 ; WX 500 ; N ohungarumlaut ; B -3 -13 582 697 ;\r\nC -1 ; WX 667 ; N Eogonek ; B -27 -183 653 669 ;\r\nC -1 ; WX 500 ; N dcroat ; B -21 -13 552 699 ;\r\nC -1 ; WX 750 ; N threequarters ; B 7 -14 726 683 ;\r\nC -1 ; WX 556 ; N Scedilla ; B 2 -218 526 685 ;\r\nC -1 ; WX 382 ; N lcaron ; B 2 -9 448 708 ;\r\nC -1 ; WX 667 ; N Kcommaaccent ; B -21 -218 702 669 ;\r\nC -1 ; WX 611 ; N Lacute ; B -22 0 590 904 ;\r\nC -1 ; WX 1000 ; N trademark ; B 32 263 968 669 ;\r\nC -1 ; WX 444 ; N edotaccent ; B 5 -13 398 655 ;\r\nC -1 ; WX 389 ; N Igrave ; B -32 0 406 904 ;\r\nC -1 ; WX 389 ; N Imacron ; B -32 0 461 830 ;\r\nC -1 ; WX 611 ; N Lcaron ; B -22 0 671 718 ;\r\nC -1 ; WX 750 ; N onehalf ; B -9 -14 723 683 ;\r\nC -1 ; WX 549 ; N lessequal ; B 29 0 526 704 ;\r\nC -1 ; WX 500 ; N ocircumflex ; B -3 -13 451 690 ;\r\nC -1 ; WX 556 ; N ntilde ; B -6 -9 504 655 ;\r\nC -1 ; WX 722 ; N Uhungarumlaut ; B 67 -18 744 904 ;\r\nC -1 ; WX 667 ; N Eacute ; B -27 0 653 904 ;\r\nC -1 ; WX 444 ; N emacron ; B 5 -13 439 623 ;\r\nC -1 ; WX 500 ; N gbreve ; B -52 -203 478 678 ;\r\nC -1 ; WX 750 ; N onequarter ; B 7 -14 721 683 ;\r\nC -1 ; WX 556 ; N Scaron ; B 2 -18 553 897 ;\r\nC -1 ; WX 556 ; N Scommaaccent ; B 2 -218 526 685 ;\r\nC -1 ; WX 722 ; N Ohungarumlaut ; B 27 -18 723 904 ;\r\nC -1 ; WX 400 ; N degree ; B 83 397 369 683 ;\r\nC -1 ; WX 500 ; N ograve ; B -3 -13 441 697 ;\r\nC -1 ; WX 667 ; N Ccaron ; B 32 -18 677 897 ;\r\nC -1 ; WX 556 ; N ugrave ; B 15 -9 492 697 ;\r\nC -1 ; WX 549 ; N radical ; B 10 -46 512 850 ;\r\nC -1 ; WX 722 ; N Dcaron ; B -46 0 685 897 ;\r\nC -1 ; WX 389 ; N rcommaaccent ; B -67 -218 389 462 ;\r\nC -1 ; WX 722 ; N Ntilde ; B -27 -15 748 862 ;\r\nC -1 ; WX 500 ; N otilde ; B -3 -13 491 655 ;\r\nC -1 ; WX 667 ; N Rcommaaccent ; B -29 -218 623 669 ;\r\nC -1 ; WX 611 ; N Lcommaaccent ; B -22 -218 590 669 ;\r\nC -1 ; WX 667 ; N Atilde ; B -67 0 593 862 ;\r\nC -1 ; WX 667 ; N Aogonek ; B -67 -183 604 683 ;\r\nC -1 ; WX 667 ; N Aring ; B -67 0 593 921 ;\r\nC -1 ; WX 722 ; N Otilde ; B 27 -18 691 862 ;\r\nC -1 ; WX 389 ; N zdotaccent ; B -43 -78 368 655 ;\r\nC -1 ; WX 667 ; N Ecaron ; B -27 0 653 897 ;\r\nC -1 ; WX 389 ; N Iogonek ; B -32 -183 406 669 ;\r\nC -1 ; WX 500 ; N kcommaaccent ; B -23 -218 483 699 ;\r\nC -1 ; WX 606 ; N minus ; B 51 209 555 297 ;\r\nC -1 ; WX 389 ; N Icircumflex ; B -32 0 450 897 ;\r\nC -1 ; WX 556 ; N ncaron ; B -6 -9 523 690 ;\r\nC -1 ; WX 278 ; N tcommaaccent ; B -62 -218 281 594 ;\r\nC -1 ; WX 606 ; N logicalnot ; B 51 108 555 399 ;\r\nC -1 ; WX 500 ; N odieresis ; B -3 -13 471 655 ;\r\nC -1 ; WX 556 ; N udieresis ; B 15 -9 499 655 ;\r\nC -1 ; WX 549 ; N notequal ; B 15 -49 540 570 ;\r\nC -1 ; WX 500 ; N gcommaaccent ; B -52 -203 478 767 ;\r\nC -1 ; WX 500 ; N eth ; B -3 -13 454 699 ;\r\nC -1 ; WX 389 ; N zcaron ; B -43 -78 424 690 ;\r\nC -1 ; WX 556 ; N ncommaaccent ; B -6 -218 493 462 ;\r\nC -1 ; WX 300 ; N onesuperior ; B 30 274 301 683 ;\r\nC -1 ; WX 278 ; N imacron ; B 2 -9 294 623 ;\r\nC -1 ; WX 500 ; N Euro ; B 0 0 0 0 ;\r\nEndCharMetrics\r\nStartKernData\r\nStartKernPairs 2038\r\nKPX A C -65\r\nKPX A Cacute -65\r\nKPX A Ccaron -65\r\nKPX A Ccedilla -65\r\nKPX A G -60\r\nKPX A Gbreve -60\r\nKPX A Gcommaaccent -60\r\nKPX A O -50\r\nKPX A Oacute -50\r\nKPX A Ocircumflex -50\r\nKPX A Odieresis -50\r\nKPX A Ograve -50\r\nKPX A Ohungarumlaut -50\r\nKPX A Omacron -50\r\nKPX A Oslash -50\r\nKPX A Otilde -50\r\nKPX A Q -55\r\nKPX A T -55\r\nKPX A Tcaron -55\r\nKPX A Tcommaaccent -55\r\nKPX A U -50\r\nKPX A Uacute -50\r\nKPX A Ucircumflex -50\r\nKPX A Udieresis -50\r\nKPX A Ugrave -50\r\nKPX A Uhungarumlaut -50\r\nKPX A Umacron -50\r\nKPX A Uogonek -50\r\nKPX A Uring -50\r\nKPX A V -95\r\nKPX A W -100\r\nKPX A Y -70\r\nKPX A Yacute -70\r\nKPX A Ydieresis -70\r\nKPX A quoteright -74\r\nKPX A u -30\r\nKPX A uacute -30\r\nKPX A ucircumflex -30\r\nKPX A udieresis -30\r\nKPX A ugrave -30\r\nKPX A uhungarumlaut -30\r\nKPX A umacron -30\r\nKPX A uogonek -30\r\nKPX A uring -30\r\nKPX A v -74\r\nKPX A w -74\r\nKPX A y -74\r\nKPX A yacute -74\r\nKPX A ydieresis -74\r\nKPX Aacute C -65\r\nKPX Aacute Cacute -65\r\nKPX Aacute Ccaron -65\r\nKPX Aacute Ccedilla -65\r\nKPX Aacute G -60\r\nKPX Aacute Gbreve -60\r\nKPX Aacute Gcommaaccent -60\r\nKPX Aacute O -50\r\nKPX Aacute Oacute -50\r\nKPX Aacute Ocircumflex -50\r\nKPX Aacute Odieresis -50\r\nKPX Aacute Ograve -50\r\nKPX Aacute Ohungarumlaut -50\r\nKPX Aacute Omacron -50\r\nKPX Aacute Oslash -50\r\nKPX Aacute Otilde -50\r\nKPX Aacute Q -55\r\nKPX Aacute T -55\r\nKPX Aacute Tcaron -55\r\nKPX Aacute Tcommaaccent -55\r\nKPX Aacute U -50\r\nKPX Aacute Uacute -50\r\nKPX Aacute Ucircumflex -50\r\nKPX Aacute Udieresis -50\r\nKPX Aacute Ugrave -50\r\nKPX Aacute Uhungarumlaut -50\r\nKPX Aacute Umacron -50\r\nKPX Aacute Uogonek -50\r\nKPX Aacute Uring -50\r\nKPX Aacute V -95\r\nKPX Aacute W -100\r\nKPX Aacute Y -70\r\nKPX Aacute Yacute -70\r\nKPX Aacute Ydieresis -70\r\nKPX Aacute quoteright -74\r\nKPX Aacute u -30\r\nKPX Aacute uacute -30\r\nKPX Aacute ucircumflex -30\r\nKPX Aacute udieresis -30\r\nKPX Aacute ugrave -30\r\nKPX Aacute uhungarumlaut -30\r\nKPX Aacute umacron -30\r\nKPX Aacute uogonek -30\r\nKPX Aacute uring -30\r\nKPX Aacute v -74\r\nKPX Aacute w -74\r\nKPX Aacute y -74\r\nKPX Aacute yacute -74\r\nKPX Aacute ydieresis -74\r\nKPX Abreve C -65\r\nKPX Abreve Cacute -65\r\nKPX Abreve Ccaron -65\r\nKPX Abreve Ccedilla -65\r\nKPX Abreve G -60\r\nKPX Abreve Gbreve -60\r\nKPX Abreve Gcommaaccent -60\r\nKPX Abreve O -50\r\nKPX Abreve Oacute -50\r\nKPX Abreve Ocircumflex -50\r\nKPX Abreve Odieresis -50\r\nKPX Abreve Ograve -50\r\nKPX Abreve Ohungarumlaut -50\r\nKPX Abreve Omacron -50\r\nKPX Abreve Oslash -50\r\nKPX Abreve Otilde -50\r\nKPX Abreve Q -55\r\nKPX Abreve T -55\r\nKPX Abreve Tcaron -55\r\nKPX Abreve Tcommaaccent -55\r\nKPX Abreve U -50\r\nKPX Abreve Uacute -50\r\nKPX Abreve Ucircumflex -50\r\nKPX Abreve Udieresis -50\r\nKPX Abreve Ugrave -50\r\nKPX Abreve Uhungarumlaut -50\r\nKPX Abreve Umacron -50\r\nKPX Abreve Uogonek -50\r\nKPX Abreve Uring -50\r\nKPX Abreve V -95\r\nKPX Abreve W -100\r\nKPX Abreve Y -70\r\nKPX Abreve Yacute -70\r\nKPX Abreve Ydieresis -70\r\nKPX Abreve quoteright -74\r\nKPX Abreve u -30\r\nKPX Abreve uacute -30\r\nKPX Abreve ucircumflex -30\r\nKPX Abreve udieresis -30\r\nKPX Abreve ugrave -30\r\nKPX Abreve uhungarumlaut -30\r\nKPX Abreve umacron -30\r\nKPX Abreve uogonek -30\r\nKPX Abreve uring -30\r\nKPX Abreve v -74\r\nKPX Abreve w -74\r\nKPX Abreve y -74\r\nKPX Abreve yacute -74\r\nKPX Abreve ydieresis -74\r\nKPX Acircumflex C -65\r\nKPX Acircumflex Cacute -65\r\nKPX Acircumflex Ccaron -65\r\nKPX Acircumflex Ccedilla -65\r\nKPX Acircumflex G -60\r\nKPX Acircumflex Gbreve -60\r\nKPX Acircumflex Gcommaaccent -60\r\nKPX Acircumflex O -50\r\nKPX Acircumflex Oacute -50\r\nKPX Acircumflex Ocircumflex -50\r\nKPX Acircumflex Odieresis -50\r\nKPX Acircumflex Ograve -50\r\nKPX Acircumflex Ohungarumlaut -50\r\nKPX Acircumflex Omacron -50\r\nKPX Acircumflex Oslash -50\r\nKPX Acircumflex Otilde -50\r\nKPX Acircumflex Q -55\r\nKPX Acircumflex T -55\r\nKPX Acircumflex Tcaron -55\r\nKPX Acircumflex Tcommaaccent -55\r\nKPX Acircumflex U -50\r\nKPX Acircumflex Uacute -50\r\nKPX Acircumflex Ucircumflex -50\r\nKPX Acircumflex Udieresis -50\r\nKPX Acircumflex Ugrave -50\r\nKPX Acircumflex Uhungarumlaut -50\r\nKPX Acircumflex Umacron -50\r\nKPX Acircumflex Uogonek -50\r\nKPX Acircumflex Uring -50\r\nKPX Acircumflex V -95\r\nKPX Acircumflex W -100\r\nKPX Acircumflex Y -70\r\nKPX Acircumflex Yacute -70\r\nKPX Acircumflex Ydieresis -70\r\nKPX Acircumflex quoteright -74\r\nKPX Acircumflex u -30\r\nKPX Acircumflex uacute -30\r\nKPX Acircumflex ucircumflex -30\r\nKPX Acircumflex udieresis -30\r\nKPX Acircumflex ugrave -30\r\nKPX Acircumflex uhungarumlaut -30\r\nKPX Acircumflex umacron -30\r\nKPX Acircumflex uogonek -30\r\nKPX Acircumflex uring -30\r\nKPX Acircumflex v -74\r\nKPX Acircumflex w -74\r\nKPX Acircumflex y -74\r\nKPX Acircumflex yacute -74\r\nKPX Acircumflex ydieresis -74\r\nKPX Adieresis C -65\r\nKPX Adieresis Cacute -65\r\nKPX Adieresis Ccaron -65\r\nKPX Adieresis Ccedilla -65\r\nKPX Adieresis G -60\r\nKPX Adieresis Gbreve -60\r\nKPX Adieresis Gcommaaccent -60\r\nKPX Adieresis O -50\r\nKPX Adieresis Oacute -50\r\nKPX Adieresis Ocircumflex -50\r\nKPX Adieresis Odieresis -50\r\nKPX Adieresis Ograve -50\r\nKPX Adieresis Ohungarumlaut -50\r\nKPX Adieresis Omacron -50\r\nKPX Adieresis Oslash -50\r\nKPX Adieresis Otilde -50\r\nKPX Adieresis Q -55\r\nKPX Adieresis T -55\r\nKPX Adieresis Tcaron -55\r\nKPX Adieresis Tcommaaccent -55\r\nKPX Adieresis U -50\r\nKPX Adieresis Uacute -50\r\nKPX Adieresis Ucircumflex -50\r\nKPX Adieresis Udieresis -50\r\nKPX Adieresis Ugrave -50\r\nKPX Adieresis Uhungarumlaut -50\r\nKPX Adieresis Umacron -50\r\nKPX Adieresis Uogonek -50\r\nKPX Adieresis Uring -50\r\nKPX Adieresis V -95\r\nKPX Adieresis W -100\r\nKPX Adieresis Y -70\r\nKPX Adieresis Yacute -70\r\nKPX Adieresis Ydieresis -70\r\nKPX Adieresis quoteright -74\r\nKPX Adieresis u -30\r\nKPX Adieresis uacute -30\r\nKPX Adieresis ucircumflex -30\r\nKPX Adieresis udieresis -30\r\nKPX Adieresis ugrave -30\r\nKPX Adieresis uhungarumlaut -30\r\nKPX Adieresis umacron -30\r\nKPX Adieresis uogonek -30\r\nKPX Adieresis uring -30\r\nKPX Adieresis v -74\r\nKPX Adieresis w -74\r\nKPX Adieresis y -74\r\nKPX Adieresis yacute -74\r\nKPX Adieresis ydieresis -74\r\nKPX Agrave C -65\r\nKPX Agrave Cacute -65\r\nKPX Agrave Ccaron -65\r\nKPX Agrave Ccedilla -65\r\nKPX Agrave G -60\r\nKPX Agrave Gbreve -60\r\nKPX Agrave Gcommaaccent -60\r\nKPX Agrave O -50\r\nKPX Agrave Oacute -50\r\nKPX Agrave Ocircumflex -50\r\nKPX Agrave Odieresis -50\r\nKPX Agrave Ograve -50\r\nKPX Agrave Ohungarumlaut -50\r\nKPX Agrave Omacron -50\r\nKPX Agrave Oslash -50\r\nKPX Agrave Otilde -50\r\nKPX Agrave Q -55\r\nKPX Agrave T -55\r\nKPX Agrave Tcaron -55\r\nKPX Agrave Tcommaaccent -55\r\nKPX Agrave U -50\r\nKPX Agrave Uacute -50\r\nKPX Agrave Ucircumflex -50\r\nKPX Agrave Udieresis -50\r\nKPX Agrave Ugrave -50\r\nKPX Agrave Uhungarumlaut -50\r\nKPX Agrave Umacron -50\r\nKPX Agrave Uogonek -50\r\nKPX Agrave Uring -50\r\nKPX Agrave V -95\r\nKPX Agrave W -100\r\nKPX Agrave Y -70\r\nKPX Agrave Yacute -70\r\nKPX Agrave Ydieresis -70\r\nKPX Agrave quoteright -74\r\nKPX Agrave u -30\r\nKPX Agrave uacute -30\r\nKPX Agrave ucircumflex -30\r\nKPX Agrave udieresis -30\r\nKPX Agrave ugrave -30\r\nKPX Agrave uhungarumlaut -30\r\nKPX Agrave umacron -30\r\nKPX Agrave uogonek -30\r\nKPX Agrave uring -30\r\nKPX Agrave v -74\r\nKPX Agrave w -74\r\nKPX Agrave y -74\r\nKPX Agrave yacute -74\r\nKPX Agrave ydieresis -74\r\nKPX Amacron C -65\r\nKPX Amacron Cacute -65\r\nKPX Amacron Ccaron -65\r\nKPX Amacron Ccedilla -65\r\nKPX Amacron G -60\r\nKPX Amacron Gbreve -60\r\nKPX Amacron Gcommaaccent -60\r\nKPX Amacron O -50\r\nKPX Amacron Oacute -50\r\nKPX Amacron Ocircumflex -50\r\nKPX Amacron Odieresis -50\r\nKPX Amacron Ograve -50\r\nKPX Amacron Ohungarumlaut -50\r\nKPX Amacron Omacron -50\r\nKPX Amacron Oslash -50\r\nKPX Amacron Otilde -50\r\nKPX Amacron Q -55\r\nKPX Amacron T -55\r\nKPX Amacron Tcaron -55\r\nKPX Amacron Tcommaaccent -55\r\nKPX Amacron U -50\r\nKPX Amacron Uacute -50\r\nKPX Amacron Ucircumflex -50\r\nKPX Amacron Udieresis -50\r\nKPX Amacron Ugrave -50\r\nKPX Amacron Uhungarumlaut -50\r\nKPX Amacron Umacron -50\r\nKPX Amacron Uogonek -50\r\nKPX Amacron Uring -50\r\nKPX Amacron V -95\r\nKPX Amacron W -100\r\nKPX Amacron Y -70\r\nKPX Amacron Yacute -70\r\nKPX Amacron Ydieresis -70\r\nKPX Amacron quoteright -74\r\nKPX Amacron u -30\r\nKPX Amacron uacute -30\r\nKPX Amacron ucircumflex -30\r\nKPX Amacron udieresis -30\r\nKPX Amacron ugrave -30\r\nKPX Amacron uhungarumlaut -30\r\nKPX Amacron umacron -30\r\nKPX Amacron uogonek -30\r\nKPX Amacron uring -30\r\nKPX Amacron v -74\r\nKPX Amacron w -74\r\nKPX Amacron y -74\r\nKPX Amacron yacute -74\r\nKPX Amacron ydieresis -74\r\nKPX Aogonek C -65\r\nKPX Aogonek Cacute -65\r\nKPX Aogonek Ccaron -65\r\nKPX Aogonek Ccedilla -65\r\nKPX Aogonek G -60\r\nKPX Aogonek Gbreve -60\r\nKPX Aogonek Gcommaaccent -60\r\nKPX Aogonek O -50\r\nKPX Aogonek Oacute -50\r\nKPX Aogonek Ocircumflex -50\r\nKPX Aogonek Odieresis -50\r\nKPX Aogonek Ograve -50\r\nKPX Aogonek Ohungarumlaut -50\r\nKPX Aogonek Omacron -50\r\nKPX Aogonek Oslash -50\r\nKPX Aogonek Otilde -50\r\nKPX Aogonek Q -55\r\nKPX Aogonek T -55\r\nKPX Aogonek Tcaron -55\r\nKPX Aogonek Tcommaaccent -55\r\nKPX Aogonek U -50\r\nKPX Aogonek Uacute -50\r\nKPX Aogonek Ucircumflex -50\r\nKPX Aogonek Udieresis -50\r\nKPX Aogonek Ugrave -50\r\nKPX Aogonek Uhungarumlaut -50\r\nKPX Aogonek Umacron -50\r\nKPX Aogonek Uogonek -50\r\nKPX Aogonek Uring -50\r\nKPX Aogonek V -95\r\nKPX Aogonek W -100\r\nKPX Aogonek Y -70\r\nKPX Aogonek Yacute -70\r\nKPX Aogonek Ydieresis -70\r\nKPX Aogonek quoteright -74\r\nKPX Aogonek u -30\r\nKPX Aogonek uacute -30\r\nKPX Aogonek ucircumflex -30\r\nKPX Aogonek udieresis -30\r\nKPX Aogonek ugrave -30\r\nKPX Aogonek uhungarumlaut -30\r\nKPX Aogonek umacron -30\r\nKPX Aogonek uogonek -30\r\nKPX Aogonek uring -30\r\nKPX Aogonek v -74\r\nKPX Aogonek w -74\r\nKPX Aogonek y -34\r\nKPX Aogonek yacute -34\r\nKPX Aogonek ydieresis -34\r\nKPX Aring C -65\r\nKPX Aring Cacute -65\r\nKPX Aring Ccaron -65\r\nKPX Aring Ccedilla -65\r\nKPX Aring G -60\r\nKPX Aring Gbreve -60\r\nKPX Aring Gcommaaccent -60\r\nKPX Aring O -50\r\nKPX Aring Oacute -50\r\nKPX Aring Ocircumflex -50\r\nKPX Aring Odieresis -50\r\nKPX Aring Ograve -50\r\nKPX Aring Ohungarumlaut -50\r\nKPX Aring Omacron -50\r\nKPX Aring Oslash -50\r\nKPX Aring Otilde -50\r\nKPX Aring Q -55\r\nKPX Aring T -55\r\nKPX Aring Tcaron -55\r\nKPX Aring Tcommaaccent -55\r\nKPX Aring U -50\r\nKPX Aring Uacute -50\r\nKPX Aring Ucircumflex -50\r\nKPX Aring Udieresis -50\r\nKPX Aring Ugrave -50\r\nKPX Aring Uhungarumlaut -50\r\nKPX Aring Umacron -50\r\nKPX Aring Uogonek -50\r\nKPX Aring Uring -50\r\nKPX Aring V -95\r\nKPX Aring W -100\r\nKPX Aring Y -70\r\nKPX Aring Yacute -70\r\nKPX Aring Ydieresis -70\r\nKPX Aring quoteright -74\r\nKPX Aring u -30\r\nKPX Aring uacute -30\r\nKPX Aring ucircumflex -30\r\nKPX Aring udieresis -30\r\nKPX Aring ugrave -30\r\nKPX Aring uhungarumlaut -30\r\nKPX Aring umacron -30\r\nKPX Aring uogonek -30\r\nKPX Aring uring -30\r\nKPX Aring v -74\r\nKPX Aring w -74\r\nKPX Aring y -74\r\nKPX Aring yacute -74\r\nKPX Aring ydieresis -74\r\nKPX Atilde C -65\r\nKPX Atilde Cacute -65\r\nKPX Atilde Ccaron -65\r\nKPX Atilde Ccedilla -65\r\nKPX Atilde G -60\r\nKPX Atilde Gbreve -60\r\nKPX Atilde Gcommaaccent -60\r\nKPX Atilde O -50\r\nKPX Atilde Oacute -50\r\nKPX Atilde Ocircumflex -50\r\nKPX Atilde Odieresis -50\r\nKPX Atilde Ograve -50\r\nKPX Atilde Ohungarumlaut -50\r\nKPX Atilde Omacron -50\r\nKPX Atilde Oslash -50\r\nKPX Atilde Otilde -50\r\nKPX Atilde Q -55\r\nKPX Atilde T -55\r\nKPX Atilde Tcaron -55\r\nKPX Atilde Tcommaaccent -55\r\nKPX Atilde U -50\r\nKPX Atilde Uacute -50\r\nKPX Atilde Ucircumflex -50\r\nKPX Atilde Udieresis -50\r\nKPX Atilde Ugrave -50\r\nKPX Atilde Uhungarumlaut -50\r\nKPX Atilde Umacron -50\r\nKPX Atilde Uogonek -50\r\nKPX Atilde Uring -50\r\nKPX Atilde V -95\r\nKPX Atilde W -100\r\nKPX Atilde Y -70\r\nKPX Atilde Yacute -70\r\nKPX Atilde Ydieresis -70\r\nKPX Atilde quoteright -74\r\nKPX Atilde u -30\r\nKPX Atilde uacute -30\r\nKPX Atilde ucircumflex -30\r\nKPX Atilde udieresis -30\r\nKPX Atilde ugrave -30\r\nKPX Atilde uhungarumlaut -30\r\nKPX Atilde umacron -30\r\nKPX Atilde uogonek -30\r\nKPX Atilde uring -30\r\nKPX Atilde v -74\r\nKPX Atilde w -74\r\nKPX Atilde y -74\r\nKPX Atilde yacute -74\r\nKPX Atilde ydieresis -74\r\nKPX B A -25\r\nKPX B Aacute -25\r\nKPX B Abreve -25\r\nKPX B Acircumflex -25\r\nKPX B Adieresis -25\r\nKPX B Agrave -25\r\nKPX B Amacron -25\r\nKPX B Aogonek -25\r\nKPX B Aring -25\r\nKPX B Atilde -25\r\nKPX B U -10\r\nKPX B Uacute -10\r\nKPX B Ucircumflex -10\r\nKPX B Udieresis -10\r\nKPX B Ugrave -10\r\nKPX B Uhungarumlaut -10\r\nKPX B Umacron -10\r\nKPX B Uogonek -10\r\nKPX B Uring -10\r\nKPX D A -25\r\nKPX D Aacute -25\r\nKPX D Abreve -25\r\nKPX D Acircumflex -25\r\nKPX D Adieresis -25\r\nKPX D Agrave -25\r\nKPX D Amacron -25\r\nKPX D Aogonek -25\r\nKPX D Aring -25\r\nKPX D Atilde -25\r\nKPX D V -50\r\nKPX D W -40\r\nKPX D Y -50\r\nKPX D Yacute -50\r\nKPX D Ydieresis -50\r\nKPX Dcaron A -25\r\nKPX Dcaron Aacute -25\r\nKPX Dcaron Abreve -25\r\nKPX Dcaron Acircumflex -25\r\nKPX Dcaron Adieresis -25\r\nKPX Dcaron Agrave -25\r\nKPX Dcaron Amacron -25\r\nKPX Dcaron Aogonek -25\r\nKPX Dcaron Aring -25\r\nKPX Dcaron Atilde -25\r\nKPX Dcaron V -50\r\nKPX Dcaron W -40\r\nKPX Dcaron Y -50\r\nKPX Dcaron Yacute -50\r\nKPX Dcaron Ydieresis -50\r\nKPX Dcroat A -25\r\nKPX Dcroat Aacute -25\r\nKPX Dcroat Abreve -25\r\nKPX Dcroat Acircumflex -25\r\nKPX Dcroat Adieresis -25\r\nKPX Dcroat Agrave -25\r\nKPX Dcroat Amacron -25\r\nKPX Dcroat Aogonek -25\r\nKPX Dcroat Aring -25\r\nKPX Dcroat Atilde -25\r\nKPX Dcroat V -50\r\nKPX Dcroat W -40\r\nKPX Dcroat Y -50\r\nKPX Dcroat Yacute -50\r\nKPX Dcroat Ydieresis -50\r\nKPX F A -100\r\nKPX F Aacute -100\r\nKPX F Abreve -100\r\nKPX F Acircumflex -100\r\nKPX F Adieresis -100\r\nKPX F Agrave -100\r\nKPX F Amacron -100\r\nKPX F Aogonek -100\r\nKPX F Aring -100\r\nKPX F Atilde -100\r\nKPX F a -95\r\nKPX F aacute -95\r\nKPX F abreve -95\r\nKPX F acircumflex -95\r\nKPX F adieresis -95\r\nKPX F agrave -95\r\nKPX F amacron -95\r\nKPX F aogonek -95\r\nKPX F aring -95\r\nKPX F atilde -95\r\nKPX F comma -129\r\nKPX F e -100\r\nKPX F eacute -100\r\nKPX F ecaron -100\r\nKPX F ecircumflex -100\r\nKPX F edieresis -100\r\nKPX F edotaccent -100\r\nKPX F egrave -100\r\nKPX F emacron -100\r\nKPX F eogonek -100\r\nKPX F i -40\r\nKPX F iacute -40\r\nKPX F icircumflex -40\r\nKPX F idieresis -40\r\nKPX F igrave -40\r\nKPX F imacron -40\r\nKPX F iogonek -40\r\nKPX F o -70\r\nKPX F oacute -70\r\nKPX F ocircumflex -70\r\nKPX F odieresis -70\r\nKPX F ograve -70\r\nKPX F ohungarumlaut -70\r\nKPX F omacron -70\r\nKPX F oslash -70\r\nKPX F otilde -70\r\nKPX F period -129\r\nKPX F r -50\r\nKPX F racute -50\r\nKPX F rcaron -50\r\nKPX F rcommaaccent -50\r\nKPX J A -25\r\nKPX J Aacute -25\r\nKPX J Abreve -25\r\nKPX J Acircumflex -25\r\nKPX J Adieresis -25\r\nKPX J Agrave -25\r\nKPX J Amacron -25\r\nKPX J Aogonek -25\r\nKPX J Aring -25\r\nKPX J Atilde -25\r\nKPX J a -40\r\nKPX J aacute -40\r\nKPX J abreve -40\r\nKPX J acircumflex -40\r\nKPX J adieresis -40\r\nKPX J agrave -40\r\nKPX J amacron -40\r\nKPX J aogonek -40\r\nKPX J aring -40\r\nKPX J atilde -40\r\nKPX J comma -10\r\nKPX J e -40\r\nKPX J eacute -40\r\nKPX J ecaron -40\r\nKPX J ecircumflex -40\r\nKPX J edieresis -40\r\nKPX J edotaccent -40\r\nKPX J egrave -40\r\nKPX J emacron -40\r\nKPX J eogonek -40\r\nKPX J o -40\r\nKPX J oacute -40\r\nKPX J ocircumflex -40\r\nKPX J odieresis -40\r\nKPX J ograve -40\r\nKPX J ohungarumlaut -40\r\nKPX J omacron -40\r\nKPX J oslash -40\r\nKPX J otilde -40\r\nKPX J period -10\r\nKPX J u -40\r\nKPX J uacute -40\r\nKPX J ucircumflex -40\r\nKPX J udieresis -40\r\nKPX J ugrave -40\r\nKPX J uhungarumlaut -40\r\nKPX J umacron -40\r\nKPX J uogonek -40\r\nKPX J uring -40\r\nKPX K O -30\r\nKPX K Oacute -30\r\nKPX K Ocircumflex -30\r\nKPX K Odieresis -30\r\nKPX K Ograve -30\r\nKPX K Ohungarumlaut -30\r\nKPX K Omacron -30\r\nKPX K Oslash -30\r\nKPX K Otilde -30\r\nKPX K e -25\r\nKPX K eacute -25\r\nKPX K ecaron -25\r\nKPX K ecircumflex -25\r\nKPX K edieresis -25\r\nKPX K edotaccent -25\r\nKPX K egrave -25\r\nKPX K emacron -25\r\nKPX K eogonek -25\r\nKPX K o -25\r\nKPX K oacute -25\r\nKPX K ocircumflex -25\r\nKPX K odieresis -25\r\nKPX K ograve -25\r\nKPX K ohungarumlaut -25\r\nKPX K omacron -25\r\nKPX K oslash -25\r\nKPX K otilde -25\r\nKPX K u -20\r\nKPX K uacute -20\r\nKPX K ucircumflex -20\r\nKPX K udieresis -20\r\nKPX K ugrave -20\r\nKPX K uhungarumlaut -20\r\nKPX K umacron -20\r\nKPX K uogonek -20\r\nKPX K uring -20\r\nKPX K y -20\r\nKPX K yacute -20\r\nKPX K ydieresis -20\r\nKPX Kcommaaccent O -30\r\nKPX Kcommaaccent Oacute -30\r\nKPX Kcommaaccent Ocircumflex -30\r\nKPX Kcommaaccent Odieresis -30\r\nKPX Kcommaaccent Ograve -30\r\nKPX Kcommaaccent Ohungarumlaut -30\r\nKPX Kcommaaccent Omacron -30\r\nKPX Kcommaaccent Oslash -30\r\nKPX Kcommaaccent Otilde -30\r\nKPX Kcommaaccent e -25\r\nKPX Kcommaaccent eacute -25\r\nKPX Kcommaaccent ecaron -25\r\nKPX Kcommaaccent ecircumflex -25\r\nKPX Kcommaaccent edieresis -25\r\nKPX Kcommaaccent edotaccent -25\r\nKPX Kcommaaccent egrave -25\r\nKPX Kcommaaccent emacron -25\r\nKPX Kcommaaccent eogonek -25\r\nKPX Kcommaaccent o -25\r\nKPX Kcommaaccent oacute -25\r\nKPX Kcommaaccent ocircumflex -25\r\nKPX Kcommaaccent odieresis -25\r\nKPX Kcommaaccent ograve -25\r\nKPX Kcommaaccent ohungarumlaut -25\r\nKPX Kcommaaccent omacron -25\r\nKPX Kcommaaccent oslash -25\r\nKPX Kcommaaccent otilde -25\r\nKPX Kcommaaccent u -20\r\nKPX Kcommaaccent uacute -20\r\nKPX Kcommaaccent ucircumflex -20\r\nKPX Kcommaaccent udieresis -20\r\nKPX Kcommaaccent ugrave -20\r\nKPX Kcommaaccent uhungarumlaut -20\r\nKPX Kcommaaccent umacron -20\r\nKPX Kcommaaccent uogonek -20\r\nKPX Kcommaaccent uring -20\r\nKPX Kcommaaccent y -20\r\nKPX Kcommaaccent yacute -20\r\nKPX Kcommaaccent ydieresis -20\r\nKPX L T -18\r\nKPX L Tcaron -18\r\nKPX L Tcommaaccent -18\r\nKPX L V -37\r\nKPX L W -37\r\nKPX L Y -37\r\nKPX L Yacute -37\r\nKPX L Ydieresis -37\r\nKPX L quoteright -55\r\nKPX L y -37\r\nKPX L yacute -37\r\nKPX L ydieresis -37\r\nKPX Lacute T -18\r\nKPX Lacute Tcaron -18\r\nKPX Lacute Tcommaaccent -18\r\nKPX Lacute V -37\r\nKPX Lacute W -37\r\nKPX Lacute Y -37\r\nKPX Lacute Yacute -37\r\nKPX Lacute Ydieresis -37\r\nKPX Lacute quoteright -55\r\nKPX Lacute y -37\r\nKPX Lacute yacute -37\r\nKPX Lacute ydieresis -37\r\nKPX Lcommaaccent T -18\r\nKPX Lcommaaccent Tcaron -18\r\nKPX Lcommaaccent Tcommaaccent -18\r\nKPX Lcommaaccent V -37\r\nKPX Lcommaaccent W -37\r\nKPX Lcommaaccent Y -37\r\nKPX Lcommaaccent Yacute -37\r\nKPX Lcommaaccent Ydieresis -37\r\nKPX Lcommaaccent quoteright -55\r\nKPX Lcommaaccent y -37\r\nKPX Lcommaaccent yacute -37\r\nKPX Lcommaaccent ydieresis -37\r\nKPX Lslash T -18\r\nKPX Lslash Tcaron -18\r\nKPX Lslash Tcommaaccent -18\r\nKPX Lslash V -37\r\nKPX Lslash W -37\r\nKPX Lslash Y -37\r\nKPX Lslash Yacute -37\r\nKPX Lslash Ydieresis -37\r\nKPX Lslash quoteright -55\r\nKPX Lslash y -37\r\nKPX Lslash yacute -37\r\nKPX Lslash ydieresis -37\r\nKPX N A -30\r\nKPX N Aacute -30\r\nKPX N Abreve -30\r\nKPX N Acircumflex -30\r\nKPX N Adieresis -30\r\nKPX N Agrave -30\r\nKPX N Amacron -30\r\nKPX N Aogonek -30\r\nKPX N Aring -30\r\nKPX N Atilde -30\r\nKPX Nacute A -30\r\nKPX Nacute Aacute -30\r\nKPX Nacute Abreve -30\r\nKPX Nacute Acircumflex -30\r\nKPX Nacute Adieresis -30\r\nKPX Nacute Agrave -30\r\nKPX Nacute Amacron -30\r\nKPX Nacute Aogonek -30\r\nKPX Nacute Aring -30\r\nKPX Nacute Atilde -30\r\nKPX Ncaron A -30\r\nKPX Ncaron Aacute -30\r\nKPX Ncaron Abreve -30\r\nKPX Ncaron Acircumflex -30\r\nKPX Ncaron Adieresis -30\r\nKPX Ncaron Agrave -30\r\nKPX Ncaron Amacron -30\r\nKPX Ncaron Aogonek -30\r\nKPX Ncaron Aring -30\r\nKPX Ncaron Atilde -30\r\nKPX Ncommaaccent A -30\r\nKPX Ncommaaccent Aacute -30\r\nKPX Ncommaaccent Abreve -30\r\nKPX Ncommaaccent Acircumflex -30\r\nKPX Ncommaaccent Adieresis -30\r\nKPX Ncommaaccent Agrave -30\r\nKPX Ncommaaccent Amacron -30\r\nKPX Ncommaaccent Aogonek -30\r\nKPX Ncommaaccent Aring -30\r\nKPX Ncommaaccent Atilde -30\r\nKPX Ntilde A -30\r\nKPX Ntilde Aacute -30\r\nKPX Ntilde Abreve -30\r\nKPX Ntilde Acircumflex -30\r\nKPX Ntilde Adieresis -30\r\nKPX Ntilde Agrave -30\r\nKPX Ntilde Amacron -30\r\nKPX Ntilde Aogonek -30\r\nKPX Ntilde Aring -30\r\nKPX Ntilde Atilde -30\r\nKPX O A -40\r\nKPX O Aacute -40\r\nKPX O Abreve -40\r\nKPX O Acircumflex -40\r\nKPX O Adieresis -40\r\nKPX O Agrave -40\r\nKPX O Amacron -40\r\nKPX O Aogonek -40\r\nKPX O Aring -40\r\nKPX O Atilde -40\r\nKPX O T -40\r\nKPX O Tcaron -40\r\nKPX O Tcommaaccent -40\r\nKPX O V -50\r\nKPX O W -50\r\nKPX O X -40\r\nKPX O Y -50\r\nKPX O Yacute -50\r\nKPX O Ydieresis -50\r\nKPX Oacute A -40\r\nKPX Oacute Aacute -40\r\nKPX Oacute Abreve -40\r\nKPX Oacute Acircumflex -40\r\nKPX Oacute Adieresis -40\r\nKPX Oacute Agrave -40\r\nKPX Oacute Amacron -40\r\nKPX Oacute Aogonek -40\r\nKPX Oacute Aring -40\r\nKPX Oacute Atilde -40\r\nKPX Oacute T -40\r\nKPX Oacute Tcaron -40\r\nKPX Oacute Tcommaaccent -40\r\nKPX Oacute V -50\r\nKPX Oacute W -50\r\nKPX Oacute X -40\r\nKPX Oacute Y -50\r\nKPX Oacute Yacute -50\r\nKPX Oacute Ydieresis -50\r\nKPX Ocircumflex A -40\r\nKPX Ocircumflex Aacute -40\r\nKPX Ocircumflex Abreve -40\r\nKPX Ocircumflex Acircumflex -40\r\nKPX Ocircumflex Adieresis -40\r\nKPX Ocircumflex Agrave -40\r\nKPX Ocircumflex Amacron -40\r\nKPX Ocircumflex Aogonek -40\r\nKPX Ocircumflex Aring -40\r\nKPX Ocircumflex Atilde -40\r\nKPX Ocircumflex T -40\r\nKPX Ocircumflex Tcaron -40\r\nKPX Ocircumflex Tcommaaccent -40\r\nKPX Ocircumflex V -50\r\nKPX Ocircumflex W -50\r\nKPX Ocircumflex X -40\r\nKPX Ocircumflex Y -50\r\nKPX Ocircumflex Yacute -50\r\nKPX Ocircumflex Ydieresis -50\r\nKPX Odieresis A -40\r\nKPX Odieresis Aacute -40\r\nKPX Odieresis Abreve -40\r\nKPX Odieresis Acircumflex -40\r\nKPX Odieresis Adieresis -40\r\nKPX Odieresis Agrave -40\r\nKPX Odieresis Amacron -40\r\nKPX Odieresis Aogonek -40\r\nKPX Odieresis Aring -40\r\nKPX Odieresis Atilde -40\r\nKPX Odieresis T -40\r\nKPX Odieresis Tcaron -40\r\nKPX Odieresis Tcommaaccent -40\r\nKPX Odieresis V -50\r\nKPX Odieresis W -50\r\nKPX Odieresis X -40\r\nKPX Odieresis Y -50\r\nKPX Odieresis Yacute -50\r\nKPX Odieresis Ydieresis -50\r\nKPX Ograve A -40\r\nKPX Ograve Aacute -40\r\nKPX Ograve Abreve -40\r\nKPX Ograve Acircumflex -40\r\nKPX Ograve Adieresis -40\r\nKPX Ograve Agrave -40\r\nKPX Ograve Amacron -40\r\nKPX Ograve Aogonek -40\r\nKPX Ograve Aring -40\r\nKPX Ograve Atilde -40\r\nKPX Ograve T -40\r\nKPX Ograve Tcaron -40\r\nKPX Ograve Tcommaaccent -40\r\nKPX Ograve V -50\r\nKPX Ograve W -50\r\nKPX Ograve X -40\r\nKPX Ograve Y -50\r\nKPX Ograve Yacute -50\r\nKPX Ograve Ydieresis -50\r\nKPX Ohungarumlaut A -40\r\nKPX Ohungarumlaut Aacute -40\r\nKPX Ohungarumlaut Abreve -40\r\nKPX Ohungarumlaut Acircumflex -40\r\nKPX Ohungarumlaut Adieresis -40\r\nKPX Ohungarumlaut Agrave -40\r\nKPX Ohungarumlaut Amacron -40\r\nKPX Ohungarumlaut Aogonek -40\r\nKPX Ohungarumlaut Aring -40\r\nKPX Ohungarumlaut Atilde -40\r\nKPX Ohungarumlaut T -40\r\nKPX Ohungarumlaut Tcaron -40\r\nKPX Ohungarumlaut Tcommaaccent -40\r\nKPX Ohungarumlaut V -50\r\nKPX Ohungarumlaut W -50\r\nKPX Ohungarumlaut X -40\r\nKPX Ohungarumlaut Y -50\r\nKPX Ohungarumlaut Yacute -50\r\nKPX Ohungarumlaut Ydieresis -50\r\nKPX Omacron A -40\r\nKPX Omacron Aacute -40\r\nKPX Omacron Abreve -40\r\nKPX Omacron Acircumflex -40\r\nKPX Omacron Adieresis -40\r\nKPX Omacron Agrave -40\r\nKPX Omacron Amacron -40\r\nKPX Omacron Aogonek -40\r\nKPX Omacron Aring -40\r\nKPX Omacron Atilde -40\r\nKPX Omacron T -40\r\nKPX Omacron Tcaron -40\r\nKPX Omacron Tcommaaccent -40\r\nKPX Omacron V -50\r\nKPX Omacron W -50\r\nKPX Omacron X -40\r\nKPX Omacron Y -50\r\nKPX Omacron Yacute -50\r\nKPX Omacron Ydieresis -50\r\nKPX Oslash A -40\r\nKPX Oslash Aacute -40\r\nKPX Oslash Abreve -40\r\nKPX Oslash Acircumflex -40\r\nKPX Oslash Adieresis -40\r\nKPX Oslash Agrave -40\r\nKPX Oslash Amacron -40\r\nKPX Oslash Aogonek -40\r\nKPX Oslash Aring -40\r\nKPX Oslash Atilde -40\r\nKPX Oslash T -40\r\nKPX Oslash Tcaron -40\r\nKPX Oslash Tcommaaccent -40\r\nKPX Oslash V -50\r\nKPX Oslash W -50\r\nKPX Oslash X -40\r\nKPX Oslash Y -50\r\nKPX Oslash Yacute -50\r\nKPX Oslash Ydieresis -50\r\nKPX Otilde A -40\r\nKPX Otilde Aacute -40\r\nKPX Otilde Abreve -40\r\nKPX Otilde Acircumflex -40\r\nKPX Otilde Adieresis -40\r\nKPX Otilde Agrave -40\r\nKPX Otilde Amacron -40\r\nKPX Otilde Aogonek -40\r\nKPX Otilde Aring -40\r\nKPX Otilde Atilde -40\r\nKPX Otilde T -40\r\nKPX Otilde Tcaron -40\r\nKPX Otilde Tcommaaccent -40\r\nKPX Otilde V -50\r\nKPX Otilde W -50\r\nKPX Otilde X -40\r\nKPX Otilde Y -50\r\nKPX Otilde Yacute -50\r\nKPX Otilde Ydieresis -50\r\nKPX P A -85\r\nKPX P Aacute -85\r\nKPX P Abreve -85\r\nKPX P Acircumflex -85\r\nKPX P Adieresis -85\r\nKPX P Agrave -85\r\nKPX P Amacron -85\r\nKPX P Aogonek -85\r\nKPX P Aring -85\r\nKPX P Atilde -85\r\nKPX P a -40\r\nKPX P aacute -40\r\nKPX P abreve -40\r\nKPX P acircumflex -40\r\nKPX P adieresis -40\r\nKPX P agrave -40\r\nKPX P amacron -40\r\nKPX P aogonek -40\r\nKPX P aring -40\r\nKPX P atilde -40\r\nKPX P comma -129\r\nKPX P e -50\r\nKPX P eacute -50\r\nKPX P ecaron -50\r\nKPX P ecircumflex -50\r\nKPX P edieresis -50\r\nKPX P edotaccent -50\r\nKPX P egrave -50\r\nKPX P emacron -50\r\nKPX P eogonek -50\r\nKPX P o -55\r\nKPX P oacute -55\r\nKPX P ocircumflex -55\r\nKPX P odieresis -55\r\nKPX P ograve -55\r\nKPX P ohungarumlaut -55\r\nKPX P omacron -55\r\nKPX P oslash -55\r\nKPX P otilde -55\r\nKPX P period -129\r\nKPX Q U -10\r\nKPX Q Uacute -10\r\nKPX Q Ucircumflex -10\r\nKPX Q Udieresis -10\r\nKPX Q Ugrave -10\r\nKPX Q Uhungarumlaut -10\r\nKPX Q Umacron -10\r\nKPX Q Uogonek -10\r\nKPX Q Uring -10\r\nKPX R O -40\r\nKPX R Oacute -40\r\nKPX R Ocircumflex -40\r\nKPX R Odieresis -40\r\nKPX R Ograve -40\r\nKPX R Ohungarumlaut -40\r\nKPX R Omacron -40\r\nKPX R Oslash -40\r\nKPX R Otilde -40\r\nKPX R T -30\r\nKPX R Tcaron -30\r\nKPX R Tcommaaccent -30\r\nKPX R U -40\r\nKPX R Uacute -40\r\nKPX R Ucircumflex -40\r\nKPX R Udieresis -40\r\nKPX R Ugrave -40\r\nKPX R Uhungarumlaut -40\r\nKPX R Umacron -40\r\nKPX R Uogonek -40\r\nKPX R Uring -40\r\nKPX R V -18\r\nKPX R W -18\r\nKPX R Y -18\r\nKPX R Yacute -18\r\nKPX R Ydieresis -18\r\nKPX Racute O -40\r\nKPX Racute Oacute -40\r\nKPX Racute Ocircumflex -40\r\nKPX Racute Odieresis -40\r\nKPX Racute Ograve -40\r\nKPX Racute Ohungarumlaut -40\r\nKPX Racute Omacron -40\r\nKPX Racute Oslash -40\r\nKPX Racute Otilde -40\r\nKPX Racute T -30\r\nKPX Racute Tcaron -30\r\nKPX Racute Tcommaaccent -30\r\nKPX Racute U -40\r\nKPX Racute Uacute -40\r\nKPX Racute Ucircumflex -40\r\nKPX Racute Udieresis -40\r\nKPX Racute Ugrave -40\r\nKPX Racute Uhungarumlaut -40\r\nKPX Racute Umacron -40\r\nKPX Racute Uogonek -40\r\nKPX Racute Uring -40\r\nKPX Racute V -18\r\nKPX Racute W -18\r\nKPX Racute Y -18\r\nKPX Racute Yacute -18\r\nKPX Racute Ydieresis -18\r\nKPX Rcaron O -40\r\nKPX Rcaron Oacute -40\r\nKPX Rcaron Ocircumflex -40\r\nKPX Rcaron Odieresis -40\r\nKPX Rcaron Ograve -40\r\nKPX Rcaron Ohungarumlaut -40\r\nKPX Rcaron Omacron -40\r\nKPX Rcaron Oslash -40\r\nKPX Rcaron Otilde -40\r\nKPX Rcaron T -30\r\nKPX Rcaron Tcaron -30\r\nKPX Rcaron Tcommaaccent -30\r\nKPX Rcaron U -40\r\nKPX Rcaron Uacute -40\r\nKPX Rcaron Ucircumflex -40\r\nKPX Rcaron Udieresis -40\r\nKPX Rcaron Ugrave -40\r\nKPX Rcaron Uhungarumlaut -40\r\nKPX Rcaron Umacron -40\r\nKPX Rcaron Uogonek -40\r\nKPX Rcaron Uring -40\r\nKPX Rcaron V -18\r\nKPX Rcaron W -18\r\nKPX Rcaron Y -18\r\nKPX Rcaron Yacute -18\r\nKPX Rcaron Ydieresis -18\r\nKPX Rcommaaccent O -40\r\nKPX Rcommaaccent Oacute -40\r\nKPX Rcommaaccent Ocircumflex -40\r\nKPX Rcommaaccent Odieresis -40\r\nKPX Rcommaaccent Ograve -40\r\nKPX Rcommaaccent Ohungarumlaut -40\r\nKPX Rcommaaccent Omacron -40\r\nKPX Rcommaaccent Oslash -40\r\nKPX Rcommaaccent Otilde -40\r\nKPX Rcommaaccent T -30\r\nKPX Rcommaaccent Tcaron -30\r\nKPX Rcommaaccent Tcommaaccent -30\r\nKPX Rcommaaccent U -40\r\nKPX Rcommaaccent Uacute -40\r\nKPX Rcommaaccent Ucircumflex -40\r\nKPX Rcommaaccent Udieresis -40\r\nKPX Rcommaaccent Ugrave -40\r\nKPX Rcommaaccent Uhungarumlaut -40\r\nKPX Rcommaaccent Umacron -40\r\nKPX Rcommaaccent Uogonek -40\r\nKPX Rcommaaccent Uring -40\r\nKPX Rcommaaccent V -18\r\nKPX Rcommaaccent W -18\r\nKPX Rcommaaccent Y -18\r\nKPX Rcommaaccent Yacute -18\r\nKPX Rcommaaccent Ydieresis -18\r\nKPX T A -55\r\nKPX T Aacute -55\r\nKPX T Abreve -55\r\nKPX T Acircumflex -55\r\nKPX T Adieresis -55\r\nKPX T Agrave -55\r\nKPX T Amacron -55\r\nKPX T Aogonek -55\r\nKPX T Aring -55\r\nKPX T Atilde -55\r\nKPX T O -18\r\nKPX T Oacute -18\r\nKPX T Ocircumflex -18\r\nKPX T Odieresis -18\r\nKPX T Ograve -18\r\nKPX T Ohungarumlaut -18\r\nKPX T Omacron -18\r\nKPX T Oslash -18\r\nKPX T Otilde -18\r\nKPX T a -92\r\nKPX T aacute -92\r\nKPX T abreve -92\r\nKPX T acircumflex -92\r\nKPX T adieresis -92\r\nKPX T agrave -92\r\nKPX T amacron -92\r\nKPX T aogonek -92\r\nKPX T aring -92\r\nKPX T atilde -92\r\nKPX T colon -74\r\nKPX T comma -92\r\nKPX T e -92\r\nKPX T eacute -92\r\nKPX T ecaron -92\r\nKPX T ecircumflex -92\r\nKPX T edieresis -52\r\nKPX T edotaccent -92\r\nKPX T egrave -52\r\nKPX T emacron -52\r\nKPX T eogonek -92\r\nKPX T hyphen -92\r\nKPX T i -37\r\nKPX T iacute -37\r\nKPX T iogonek -37\r\nKPX T o -95\r\nKPX T oacute -95\r\nKPX T ocircumflex -95\r\nKPX T odieresis -95\r\nKPX T ograve -95\r\nKPX T ohungarumlaut -95\r\nKPX T omacron -95\r\nKPX T oslash -95\r\nKPX T otilde -95\r\nKPX T period -92\r\nKPX T r -37\r\nKPX T racute -37\r\nKPX T rcaron -37\r\nKPX T rcommaaccent -37\r\nKPX T semicolon -74\r\nKPX T u -37\r\nKPX T uacute -37\r\nKPX T ucircumflex -37\r\nKPX T udieresis -37\r\nKPX T ugrave -37\r\nKPX T uhungarumlaut -37\r\nKPX T umacron -37\r\nKPX T uogonek -37\r\nKPX T uring -37\r\nKPX T w -37\r\nKPX T y -37\r\nKPX T yacute -37\r\nKPX T ydieresis -37\r\nKPX Tcaron A -55\r\nKPX Tcaron Aacute -55\r\nKPX Tcaron Abreve -55\r\nKPX Tcaron Acircumflex -55\r\nKPX Tcaron Adieresis -55\r\nKPX Tcaron Agrave -55\r\nKPX Tcaron Amacron -55\r\nKPX Tcaron Aogonek -55\r\nKPX Tcaron Aring -55\r\nKPX Tcaron Atilde -55\r\nKPX Tcaron O -18\r\nKPX Tcaron Oacute -18\r\nKPX Tcaron Ocircumflex -18\r\nKPX Tcaron Odieresis -18\r\nKPX Tcaron Ograve -18\r\nKPX Tcaron Ohungarumlaut -18\r\nKPX Tcaron Omacron -18\r\nKPX Tcaron Oslash -18\r\nKPX Tcaron Otilde -18\r\nKPX Tcaron a -92\r\nKPX Tcaron aacute -92\r\nKPX Tcaron abreve -92\r\nKPX Tcaron acircumflex -92\r\nKPX Tcaron adieresis -92\r\nKPX Tcaron agrave -92\r\nKPX Tcaron amacron -92\r\nKPX Tcaron aogonek -92\r\nKPX Tcaron aring -92\r\nKPX Tcaron atilde -92\r\nKPX Tcaron colon -74\r\nKPX Tcaron comma -92\r\nKPX Tcaron e -92\r\nKPX Tcaron eacute -92\r\nKPX Tcaron ecaron -92\r\nKPX Tcaron ecircumflex -92\r\nKPX Tcaron edieresis -52\r\nKPX Tcaron edotaccent -92\r\nKPX Tcaron egrave -52\r\nKPX Tcaron emacron -52\r\nKPX Tcaron eogonek -92\r\nKPX Tcaron hyphen -92\r\nKPX Tcaron i -37\r\nKPX Tcaron iacute -37\r\nKPX Tcaron iogonek -37\r\nKPX Tcaron o -95\r\nKPX Tcaron oacute -95\r\nKPX Tcaron ocircumflex -95\r\nKPX Tcaron odieresis -95\r\nKPX Tcaron ograve -95\r\nKPX Tcaron ohungarumlaut -95\r\nKPX Tcaron omacron -95\r\nKPX Tcaron oslash -95\r\nKPX Tcaron otilde -95\r\nKPX Tcaron period -92\r\nKPX Tcaron r -37\r\nKPX Tcaron racute -37\r\nKPX Tcaron rcaron -37\r\nKPX Tcaron rcommaaccent -37\r\nKPX Tcaron semicolon -74\r\nKPX Tcaron u -37\r\nKPX Tcaron uacute -37\r\nKPX Tcaron ucircumflex -37\r\nKPX Tcaron udieresis -37\r\nKPX Tcaron ugrave -37\r\nKPX Tcaron uhungarumlaut -37\r\nKPX Tcaron umacron -37\r\nKPX Tcaron uogonek -37\r\nKPX Tcaron uring -37\r\nKPX Tcaron w -37\r\nKPX Tcaron y -37\r\nKPX Tcaron yacute -37\r\nKPX Tcaron ydieresis -37\r\nKPX Tcommaaccent A -55\r\nKPX Tcommaaccent Aacute -55\r\nKPX Tcommaaccent Abreve -55\r\nKPX Tcommaaccent Acircumflex -55\r\nKPX Tcommaaccent Adieresis -55\r\nKPX Tcommaaccent Agrave -55\r\nKPX Tcommaaccent Amacron -55\r\nKPX Tcommaaccent Aogonek -55\r\nKPX Tcommaaccent Aring -55\r\nKPX Tcommaaccent Atilde -55\r\nKPX Tcommaaccent O -18\r\nKPX Tcommaaccent Oacute -18\r\nKPX Tcommaaccent Ocircumflex -18\r\nKPX Tcommaaccent Odieresis -18\r\nKPX Tcommaaccent Ograve -18\r\nKPX Tcommaaccent Ohungarumlaut -18\r\nKPX Tcommaaccent Omacron -18\r\nKPX Tcommaaccent Oslash -18\r\nKPX Tcommaaccent Otilde -18\r\nKPX Tcommaaccent a -92\r\nKPX Tcommaaccent aacute -92\r\nKPX Tcommaaccent abreve -92\r\nKPX Tcommaaccent acircumflex -92\r\nKPX Tcommaaccent adieresis -92\r\nKPX Tcommaaccent agrave -92\r\nKPX Tcommaaccent amacron -92\r\nKPX Tcommaaccent aogonek -92\r\nKPX Tcommaaccent aring -92\r\nKPX Tcommaaccent atilde -92\r\nKPX Tcommaaccent colon -74\r\nKPX Tcommaaccent comma -92\r\nKPX Tcommaaccent e -92\r\nKPX Tcommaaccent eacute -92\r\nKPX Tcommaaccent ecaron -92\r\nKPX Tcommaaccent ecircumflex -92\r\nKPX Tcommaaccent edieresis -52\r\nKPX Tcommaaccent edotaccent -92\r\nKPX Tcommaaccent egrave -52\r\nKPX Tcommaaccent emacron -52\r\nKPX Tcommaaccent eogonek -92\r\nKPX Tcommaaccent hyphen -92\r\nKPX Tcommaaccent i -37\r\nKPX Tcommaaccent iacute -37\r\nKPX Tcommaaccent iogonek -37\r\nKPX Tcommaaccent o -95\r\nKPX Tcommaaccent oacute -95\r\nKPX Tcommaaccent ocircumflex -95\r\nKPX Tcommaaccent odieresis -95\r\nKPX Tcommaaccent ograve -95\r\nKPX Tcommaaccent ohungarumlaut -95\r\nKPX Tcommaaccent omacron -95\r\nKPX Tcommaaccent oslash -95\r\nKPX Tcommaaccent otilde -95\r\nKPX Tcommaaccent period -92\r\nKPX Tcommaaccent r -37\r\nKPX Tcommaaccent racute -37\r\nKPX Tcommaaccent rcaron -37\r\nKPX Tcommaaccent rcommaaccent -37\r\nKPX Tcommaaccent semicolon -74\r\nKPX Tcommaaccent u -37\r\nKPX Tcommaaccent uacute -37\r\nKPX Tcommaaccent ucircumflex -37\r\nKPX Tcommaaccent udieresis -37\r\nKPX Tcommaaccent ugrave -37\r\nKPX Tcommaaccent uhungarumlaut -37\r\nKPX Tcommaaccent umacron -37\r\nKPX Tcommaaccent uogonek -37\r\nKPX Tcommaaccent uring -37\r\nKPX Tcommaaccent w -37\r\nKPX Tcommaaccent y -37\r\nKPX Tcommaaccent yacute -37\r\nKPX Tcommaaccent ydieresis -37\r\nKPX U A -45\r\nKPX U Aacute -45\r\nKPX U Abreve -45\r\nKPX U Acircumflex -45\r\nKPX U Adieresis -45\r\nKPX U Agrave -45\r\nKPX U Amacron -45\r\nKPX U Aogonek -45\r\nKPX U Aring -45\r\nKPX U Atilde -45\r\nKPX Uacute A -45\r\nKPX Uacute Aacute -45\r\nKPX Uacute Abreve -45\r\nKPX Uacute Acircumflex -45\r\nKPX Uacute Adieresis -45\r\nKPX Uacute Agrave -45\r\nKPX Uacute Amacron -45\r\nKPX Uacute Aogonek -45\r\nKPX Uacute Aring -45\r\nKPX Uacute Atilde -45\r\nKPX Ucircumflex A -45\r\nKPX Ucircumflex Aacute -45\r\nKPX Ucircumflex Abreve -45\r\nKPX Ucircumflex Acircumflex -45\r\nKPX Ucircumflex Adieresis -45\r\nKPX Ucircumflex Agrave -45\r\nKPX Ucircumflex Amacron -45\r\nKPX Ucircumflex Aogonek -45\r\nKPX Ucircumflex Aring -45\r\nKPX Ucircumflex Atilde -45\r\nKPX Udieresis A -45\r\nKPX Udieresis Aacute -45\r\nKPX Udieresis Abreve -45\r\nKPX Udieresis Acircumflex -45\r\nKPX Udieresis Adieresis -45\r\nKPX Udieresis Agrave -45\r\nKPX Udieresis Amacron -45\r\nKPX Udieresis Aogonek -45\r\nKPX Udieresis Aring -45\r\nKPX Udieresis Atilde -45\r\nKPX Ugrave A -45\r\nKPX Ugrave Aacute -45\r\nKPX Ugrave Abreve -45\r\nKPX Ugrave Acircumflex -45\r\nKPX Ugrave Adieresis -45\r\nKPX Ugrave Agrave -45\r\nKPX Ugrave Amacron -45\r\nKPX Ugrave Aogonek -45\r\nKPX Ugrave Aring -45\r\nKPX Ugrave Atilde -45\r\nKPX Uhungarumlaut A -45\r\nKPX Uhungarumlaut Aacute -45\r\nKPX Uhungarumlaut Abreve -45\r\nKPX Uhungarumlaut Acircumflex -45\r\nKPX Uhungarumlaut Adieresis -45\r\nKPX Uhungarumlaut Agrave -45\r\nKPX Uhungarumlaut Amacron -45\r\nKPX Uhungarumlaut Aogonek -45\r\nKPX Uhungarumlaut Aring -45\r\nKPX Uhungarumlaut Atilde -45\r\nKPX Umacron A -45\r\nKPX Umacron Aacute -45\r\nKPX Umacron Abreve -45\r\nKPX Umacron Acircumflex -45\r\nKPX Umacron Adieresis -45\r\nKPX Umacron Agrave -45\r\nKPX Umacron Amacron -45\r\nKPX Umacron Aogonek -45\r\nKPX Umacron Aring -45\r\nKPX Umacron Atilde -45\r\nKPX Uogonek A -45\r\nKPX Uogonek Aacute -45\r\nKPX Uogonek Abreve -45\r\nKPX Uogonek Acircumflex -45\r\nKPX Uogonek Adieresis -45\r\nKPX Uogonek Agrave -45\r\nKPX Uogonek Amacron -45\r\nKPX Uogonek Aogonek -45\r\nKPX Uogonek Aring -45\r\nKPX Uogonek Atilde -45\r\nKPX Uring A -45\r\nKPX Uring Aacute -45\r\nKPX Uring Abreve -45\r\nKPX Uring Acircumflex -45\r\nKPX Uring Adieresis -45\r\nKPX Uring Agrave -45\r\nKPX Uring Amacron -45\r\nKPX Uring Aogonek -45\r\nKPX Uring Aring -45\r\nKPX Uring Atilde -45\r\nKPX V A -85\r\nKPX V Aacute -85\r\nKPX V Abreve -85\r\nKPX V Acircumflex -85\r\nKPX V Adieresis -85\r\nKPX V Agrave -85\r\nKPX V Amacron -85\r\nKPX V Aogonek -85\r\nKPX V Aring -85\r\nKPX V Atilde -85\r\nKPX V G -10\r\nKPX V Gbreve -10\r\nKPX V Gcommaaccent -10\r\nKPX V O -30\r\nKPX V Oacute -30\r\nKPX V Ocircumflex -30\r\nKPX V Odieresis -30\r\nKPX V Ograve -30\r\nKPX V Ohungarumlaut -30\r\nKPX V Omacron -30\r\nKPX V Oslash -30\r\nKPX V Otilde -30\r\nKPX V a -111\r\nKPX V aacute -111\r\nKPX V abreve -111\r\nKPX V acircumflex -111\r\nKPX V adieresis -111\r\nKPX V agrave -111\r\nKPX V amacron -111\r\nKPX V aogonek -111\r\nKPX V aring -111\r\nKPX V atilde -111\r\nKPX V colon -74\r\nKPX V comma -129\r\nKPX V e -111\r\nKPX V eacute -111\r\nKPX V ecaron -111\r\nKPX V ecircumflex -111\r\nKPX V edieresis -71\r\nKPX V edotaccent -111\r\nKPX V egrave -71\r\nKPX V emacron -71\r\nKPX V eogonek -111\r\nKPX V hyphen -70\r\nKPX V i -55\r\nKPX V iacute -55\r\nKPX V iogonek -55\r\nKPX V o -111\r\nKPX V oacute -111\r\nKPX V ocircumflex -111\r\nKPX V odieresis -111\r\nKPX V ograve -111\r\nKPX V ohungarumlaut -111\r\nKPX V omacron -111\r\nKPX V oslash -111\r\nKPX V otilde -111\r\nKPX V period -129\r\nKPX V semicolon -74\r\nKPX V u -55\r\nKPX V uacute -55\r\nKPX V ucircumflex -55\r\nKPX V udieresis -55\r\nKPX V ugrave -55\r\nKPX V uhungarumlaut -55\r\nKPX V umacron -55\r\nKPX V uogonek -55\r\nKPX V uring -55\r\nKPX W A -74\r\nKPX W Aacute -74\r\nKPX W Abreve -74\r\nKPX W Acircumflex -74\r\nKPX W Adieresis -74\r\nKPX W Agrave -74\r\nKPX W Amacron -74\r\nKPX W Aogonek -74\r\nKPX W Aring -74\r\nKPX W Atilde -74\r\nKPX W O -15\r\nKPX W Oacute -15\r\nKPX W Ocircumflex -15\r\nKPX W Odieresis -15\r\nKPX W Ograve -15\r\nKPX W Ohungarumlaut -15\r\nKPX W Omacron -15\r\nKPX W Oslash -15\r\nKPX W Otilde -15\r\nKPX W a -85\r\nKPX W aacute -85\r\nKPX W abreve -85\r\nKPX W acircumflex -85\r\nKPX W adieresis -85\r\nKPX W agrave -85\r\nKPX W amacron -85\r\nKPX W aogonek -85\r\nKPX W aring -85\r\nKPX W atilde -85\r\nKPX W colon -55\r\nKPX W comma -74\r\nKPX W e -90\r\nKPX W eacute -90\r\nKPX W ecaron -90\r\nKPX W ecircumflex -90\r\nKPX W edieresis -50\r\nKPX W edotaccent -90\r\nKPX W egrave -50\r\nKPX W emacron -50\r\nKPX W eogonek -90\r\nKPX W hyphen -50\r\nKPX W i -37\r\nKPX W iacute -37\r\nKPX W iogonek -37\r\nKPX W o -80\r\nKPX W oacute -80\r\nKPX W ocircumflex -80\r\nKPX W odieresis -80\r\nKPX W ograve -80\r\nKPX W ohungarumlaut -80\r\nKPX W omacron -80\r\nKPX W oslash -80\r\nKPX W otilde -80\r\nKPX W period -74\r\nKPX W semicolon -55\r\nKPX W u -55\r\nKPX W uacute -55\r\nKPX W ucircumflex -55\r\nKPX W udieresis -55\r\nKPX W ugrave -55\r\nKPX W uhungarumlaut -55\r\nKPX W umacron -55\r\nKPX W uogonek -55\r\nKPX W uring -55\r\nKPX W y -55\r\nKPX W yacute -55\r\nKPX W ydieresis -55\r\nKPX Y A -74\r\nKPX Y Aacute -74\r\nKPX Y Abreve -74\r\nKPX Y Acircumflex -74\r\nKPX Y Adieresis -74\r\nKPX Y Agrave -74\r\nKPX Y Amacron -74\r\nKPX Y Aogonek -74\r\nKPX Y Aring -74\r\nKPX Y Atilde -74\r\nKPX Y O -25\r\nKPX Y Oacute -25\r\nKPX Y Ocircumflex -25\r\nKPX Y Odieresis -25\r\nKPX Y Ograve -25\r\nKPX Y Ohungarumlaut -25\r\nKPX Y Omacron -25\r\nKPX Y Oslash -25\r\nKPX Y Otilde -25\r\nKPX Y a -92\r\nKPX Y aacute -92\r\nKPX Y abreve -92\r\nKPX Y acircumflex -92\r\nKPX Y adieresis -92\r\nKPX Y agrave -92\r\nKPX Y amacron -92\r\nKPX Y aogonek -92\r\nKPX Y aring -92\r\nKPX Y atilde -92\r\nKPX Y colon -92\r\nKPX Y comma -92\r\nKPX Y e -111\r\nKPX Y eacute -111\r\nKPX Y ecaron -111\r\nKPX Y ecircumflex -71\r\nKPX Y edieresis -71\r\nKPX Y edotaccent -111\r\nKPX Y egrave -71\r\nKPX Y emacron -71\r\nKPX Y eogonek -111\r\nKPX Y hyphen -92\r\nKPX Y i -55\r\nKPX Y iacute -55\r\nKPX Y iogonek -55\r\nKPX Y o -111\r\nKPX Y oacute -111\r\nKPX Y ocircumflex -111\r\nKPX Y odieresis -111\r\nKPX Y ograve -111\r\nKPX Y ohungarumlaut -111\r\nKPX Y omacron -111\r\nKPX Y oslash -111\r\nKPX Y otilde -111\r\nKPX Y period -74\r\nKPX Y semicolon -92\r\nKPX Y u -92\r\nKPX Y uacute -92\r\nKPX Y ucircumflex -92\r\nKPX Y udieresis -92\r\nKPX Y ugrave -92\r\nKPX Y uhungarumlaut -92\r\nKPX Y umacron -92\r\nKPX Y uogonek -92\r\nKPX Y uring -92\r\nKPX Yacute A -74\r\nKPX Yacute Aacute -74\r\nKPX Yacute Abreve -74\r\nKPX Yacute Acircumflex -74\r\nKPX Yacute Adieresis -74\r\nKPX Yacute Agrave -74\r\nKPX Yacute Amacron -74\r\nKPX Yacute Aogonek -74\r\nKPX Yacute Aring -74\r\nKPX Yacute Atilde -74\r\nKPX Yacute O -25\r\nKPX Yacute Oacute -25\r\nKPX Yacute Ocircumflex -25\r\nKPX Yacute Odieresis -25\r\nKPX Yacute Ograve -25\r\nKPX Yacute Ohungarumlaut -25\r\nKPX Yacute Omacron -25\r\nKPX Yacute Oslash -25\r\nKPX Yacute Otilde -25\r\nKPX Yacute a -92\r\nKPX Yacute aacute -92\r\nKPX Yacute abreve -92\r\nKPX Yacute acircumflex -92\r\nKPX Yacute adieresis -92\r\nKPX Yacute agrave -92\r\nKPX Yacute amacron -92\r\nKPX Yacute aogonek -92\r\nKPX Yacute aring -92\r\nKPX Yacute atilde -92\r\nKPX Yacute colon -92\r\nKPX Yacute comma -92\r\nKPX Yacute e -111\r\nKPX Yacute eacute -111\r\nKPX Yacute ecaron -111\r\nKPX Yacute ecircumflex -71\r\nKPX Yacute edieresis -71\r\nKPX Yacute edotaccent -111\r\nKPX Yacute egrave -71\r\nKPX Yacute emacron -71\r\nKPX Yacute eogonek -111\r\nKPX Yacute hyphen -92\r\nKPX Yacute i -55\r\nKPX Yacute iacute -55\r\nKPX Yacute iogonek -55\r\nKPX Yacute o -111\r\nKPX Yacute oacute -111\r\nKPX Yacute ocircumflex -111\r\nKPX Yacute odieresis -111\r\nKPX Yacute ograve -111\r\nKPX Yacute ohungarumlaut -111\r\nKPX Yacute omacron -111\r\nKPX Yacute oslash -111\r\nKPX Yacute otilde -111\r\nKPX Yacute period -74\r\nKPX Yacute semicolon -92\r\nKPX Yacute u -92\r\nKPX Yacute uacute -92\r\nKPX Yacute ucircumflex -92\r\nKPX Yacute udieresis -92\r\nKPX Yacute ugrave -92\r\nKPX Yacute uhungarumlaut -92\r\nKPX Yacute umacron -92\r\nKPX Yacute uogonek -92\r\nKPX Yacute uring -92\r\nKPX Ydieresis A -74\r\nKPX Ydieresis Aacute -74\r\nKPX Ydieresis Abreve -74\r\nKPX Ydieresis Acircumflex -74\r\nKPX Ydieresis Adieresis -74\r\nKPX Ydieresis Agrave -74\r\nKPX Ydieresis Amacron -74\r\nKPX Ydieresis Aogonek -74\r\nKPX Ydieresis Aring -74\r\nKPX Ydieresis Atilde -74\r\nKPX Ydieresis O -25\r\nKPX Ydieresis Oacute -25\r\nKPX Ydieresis Ocircumflex -25\r\nKPX Ydieresis Odieresis -25\r\nKPX Ydieresis Ograve -25\r\nKPX Ydieresis Ohungarumlaut -25\r\nKPX Ydieresis Omacron -25\r\nKPX Ydieresis Oslash -25\r\nKPX Ydieresis Otilde -25\r\nKPX Ydieresis a -92\r\nKPX Ydieresis aacute -92\r\nKPX Ydieresis abreve -92\r\nKPX Ydieresis acircumflex -92\r\nKPX Ydieresis adieresis -92\r\nKPX Ydieresis agrave -92\r\nKPX Ydieresis amacron -92\r\nKPX Ydieresis aogonek -92\r\nKPX Ydieresis aring -92\r\nKPX Ydieresis atilde -92\r\nKPX Ydieresis colon -92\r\nKPX Ydieresis comma -92\r\nKPX Ydieresis e -111\r\nKPX Ydieresis eacute -111\r\nKPX Ydieresis ecaron -111\r\nKPX Ydieresis ecircumflex -71\r\nKPX Ydieresis edieresis -71\r\nKPX Ydieresis edotaccent -111\r\nKPX Ydieresis egrave -71\r\nKPX Ydieresis emacron -71\r\nKPX Ydieresis eogonek -111\r\nKPX Ydieresis hyphen -92\r\nKPX Ydieresis i -55\r\nKPX Ydieresis iacute -55\r\nKPX Ydieresis iogonek -55\r\nKPX Ydieresis o -111\r\nKPX Ydieresis oacute -111\r\nKPX Ydieresis ocircumflex -111\r\nKPX Ydieresis odieresis -111\r\nKPX Ydieresis ograve -111\r\nKPX Ydieresis ohungarumlaut -111\r\nKPX Ydieresis omacron -111\r\nKPX Ydieresis oslash -111\r\nKPX Ydieresis otilde -111\r\nKPX Ydieresis period -74\r\nKPX Ydieresis semicolon -92\r\nKPX Ydieresis u -92\r\nKPX Ydieresis uacute -92\r\nKPX Ydieresis ucircumflex -92\r\nKPX Ydieresis udieresis -92\r\nKPX Ydieresis ugrave -92\r\nKPX Ydieresis uhungarumlaut -92\r\nKPX Ydieresis umacron -92\r\nKPX Ydieresis uogonek -92\r\nKPX Ydieresis uring -92\r\nKPX b b -10\r\nKPX b period -40\r\nKPX b u -20\r\nKPX b uacute -20\r\nKPX b ucircumflex -20\r\nKPX b udieresis -20\r\nKPX b ugrave -20\r\nKPX b uhungarumlaut -20\r\nKPX b umacron -20\r\nKPX b uogonek -20\r\nKPX b uring -20\r\nKPX c h -10\r\nKPX c k -10\r\nKPX c kcommaaccent -10\r\nKPX cacute h -10\r\nKPX cacute k -10\r\nKPX cacute kcommaaccent -10\r\nKPX ccaron h -10\r\nKPX ccaron k -10\r\nKPX ccaron kcommaaccent -10\r\nKPX ccedilla h -10\r\nKPX ccedilla k -10\r\nKPX ccedilla kcommaaccent -10\r\nKPX comma quotedblright -95\r\nKPX comma quoteright -95\r\nKPX e b -10\r\nKPX eacute b -10\r\nKPX ecaron b -10\r\nKPX ecircumflex b -10\r\nKPX edieresis b -10\r\nKPX edotaccent b -10\r\nKPX egrave b -10\r\nKPX emacron b -10\r\nKPX eogonek b -10\r\nKPX f comma -10\r\nKPX f dotlessi -30\r\nKPX f e -10\r\nKPX f eacute -10\r\nKPX f edotaccent -10\r\nKPX f eogonek -10\r\nKPX f f -18\r\nKPX f o -10\r\nKPX f oacute -10\r\nKPX f ocircumflex -10\r\nKPX f ograve -10\r\nKPX f ohungarumlaut -10\r\nKPX f oslash -10\r\nKPX f otilde -10\r\nKPX f period -10\r\nKPX f quoteright 55\r\nKPX k e -30\r\nKPX k eacute -30\r\nKPX k ecaron -30\r\nKPX k ecircumflex -30\r\nKPX k edieresis -30\r\nKPX k edotaccent -30\r\nKPX k egrave -30\r\nKPX k emacron -30\r\nKPX k eogonek -30\r\nKPX k o -10\r\nKPX k oacute -10\r\nKPX k ocircumflex -10\r\nKPX k odieresis -10\r\nKPX k ograve -10\r\nKPX k ohungarumlaut -10\r\nKPX k omacron -10\r\nKPX k oslash -10\r\nKPX k otilde -10\r\nKPX kcommaaccent e -30\r\nKPX kcommaaccent eacute -30\r\nKPX kcommaaccent ecaron -30\r\nKPX kcommaaccent ecircumflex -30\r\nKPX kcommaaccent edieresis -30\r\nKPX kcommaaccent edotaccent -30\r\nKPX kcommaaccent egrave -30\r\nKPX kcommaaccent emacron -30\r\nKPX kcommaaccent eogonek -30\r\nKPX kcommaaccent o -10\r\nKPX kcommaaccent oacute -10\r\nKPX kcommaaccent ocircumflex -10\r\nKPX kcommaaccent odieresis -10\r\nKPX kcommaaccent ograve -10\r\nKPX kcommaaccent ohungarumlaut -10\r\nKPX kcommaaccent omacron -10\r\nKPX kcommaaccent oslash -10\r\nKPX kcommaaccent otilde -10\r\nKPX n v -40\r\nKPX nacute v -40\r\nKPX ncaron v -40\r\nKPX ncommaaccent v -40\r\nKPX ntilde v -40\r\nKPX o v -15\r\nKPX o w -25\r\nKPX o x -10\r\nKPX o y -10\r\nKPX o yacute -10\r\nKPX o ydieresis -10\r\nKPX oacute v -15\r\nKPX oacute w -25\r\nKPX oacute x -10\r\nKPX oacute y -10\r\nKPX oacute yacute -10\r\nKPX oacute ydieresis -10\r\nKPX ocircumflex v -15\r\nKPX ocircumflex w -25\r\nKPX ocircumflex x -10\r\nKPX ocircumflex y -10\r\nKPX ocircumflex yacute -10\r\nKPX ocircumflex ydieresis -10\r\nKPX odieresis v -15\r\nKPX odieresis w -25\r\nKPX odieresis x -10\r\nKPX odieresis y -10\r\nKPX odieresis yacute -10\r\nKPX odieresis ydieresis -10\r\nKPX ograve v -15\r\nKPX ograve w -25\r\nKPX ograve x -10\r\nKPX ograve y -10\r\nKPX ograve yacute -10\r\nKPX ograve ydieresis -10\r\nKPX ohungarumlaut v -15\r\nKPX ohungarumlaut w -25\r\nKPX ohungarumlaut x -10\r\nKPX ohungarumlaut y -10\r\nKPX ohungarumlaut yacute -10\r\nKPX ohungarumlaut ydieresis -10\r\nKPX omacron v -15\r\nKPX omacron w -25\r\nKPX omacron x -10\r\nKPX omacron y -10\r\nKPX omacron yacute -10\r\nKPX omacron ydieresis -10\r\nKPX oslash v -15\r\nKPX oslash w -25\r\nKPX oslash x -10\r\nKPX oslash y -10\r\nKPX oslash yacute -10\r\nKPX oslash ydieresis -10\r\nKPX otilde v -15\r\nKPX otilde w -25\r\nKPX otilde x -10\r\nKPX otilde y -10\r\nKPX otilde yacute -10\r\nKPX otilde ydieresis -10\r\nKPX period quotedblright -95\r\nKPX period quoteright -95\r\nKPX quoteleft quoteleft -74\r\nKPX quoteright d -15\r\nKPX quoteright dcroat -15\r\nKPX quoteright quoteright -74\r\nKPX quoteright r -15\r\nKPX quoteright racute -15\r\nKPX quoteright rcaron -15\r\nKPX quoteright rcommaaccent -15\r\nKPX quoteright s -74\r\nKPX quoteright sacute -74\r\nKPX quoteright scaron -74\r\nKPX quoteright scedilla -74\r\nKPX quoteright scommaaccent -74\r\nKPX quoteright space -74\r\nKPX quoteright t -37\r\nKPX quoteright tcommaaccent -37\r\nKPX quoteright v -15\r\nKPX r comma -65\r\nKPX r period -65\r\nKPX racute comma -65\r\nKPX racute period -65\r\nKPX rcaron comma -65\r\nKPX rcaron period -65\r\nKPX rcommaaccent comma -65\r\nKPX rcommaaccent period -65\r\nKPX space A -37\r\nKPX space Aacute -37\r\nKPX space Abreve -37\r\nKPX space Acircumflex -37\r\nKPX space Adieresis -37\r\nKPX space Agrave -37\r\nKPX space Amacron -37\r\nKPX space Aogonek -37\r\nKPX space Aring -37\r\nKPX space Atilde -37\r\nKPX space V -70\r\nKPX space W -70\r\nKPX space Y -70\r\nKPX space Yacute -70\r\nKPX space Ydieresis -70\r\nKPX v comma -37\r\nKPX v e -15\r\nKPX v eacute -15\r\nKPX v ecaron -15\r\nKPX v ecircumflex -15\r\nKPX v edieresis -15\r\nKPX v edotaccent -15\r\nKPX v egrave -15\r\nKPX v emacron -15\r\nKPX v eogonek -15\r\nKPX v o -15\r\nKPX v oacute -15\r\nKPX v ocircumflex -15\r\nKPX v odieresis -15\r\nKPX v ograve -15\r\nKPX v ohungarumlaut -15\r\nKPX v omacron -15\r\nKPX v oslash -15\r\nKPX v otilde -15\r\nKPX v period -37\r\nKPX w a -10\r\nKPX w aacute -10\r\nKPX w abreve -10\r\nKPX w acircumflex -10\r\nKPX w adieresis -10\r\nKPX w agrave -10\r\nKPX w amacron -10\r\nKPX w aogonek -10\r\nKPX w aring -10\r\nKPX w atilde -10\r\nKPX w comma -37\r\nKPX w e -10\r\nKPX w eacute -10\r\nKPX w ecaron -10\r\nKPX w ecircumflex -10\r\nKPX w edieresis -10\r\nKPX w edotaccent -10\r\nKPX w egrave -10\r\nKPX w emacron -10\r\nKPX w eogonek -10\r\nKPX w o -15\r\nKPX w oacute -15\r\nKPX w ocircumflex -15\r\nKPX w odieresis -15\r\nKPX w ograve -15\r\nKPX w ohungarumlaut -15\r\nKPX w omacron -15\r\nKPX w oslash -15\r\nKPX w otilde -15\r\nKPX w period -37\r\nKPX x e -10\r\nKPX x eacute -10\r\nKPX x ecaron -10\r\nKPX x ecircumflex -10\r\nKPX x edieresis -10\r\nKPX x edotaccent -10\r\nKPX x egrave -10\r\nKPX x emacron -10\r\nKPX x eogonek -10\r\nKPX y comma -37\r\nKPX y period -37\r\nKPX yacute comma -37\r\nKPX yacute period -37\r\nKPX ydieresis comma -37\r\nKPX ydieresis period -37\r\nEndKernPairs\r\nEndKernData\r\nEndFontMetrics\r\n",
  'Symbol.afm': "StartFontMetrics 4.1\r\nComment Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated. All rights reserved.\r\nComment Creation Date: Thu May  1 15:12:25 1997\r\nComment UniqueID 43064\r\nComment VMusage 30820 39997\r\nFontName Symbol\r\nFullName Symbol\r\nFamilyName Symbol\r\nWeight Medium\r\nItalicAngle 0\r\nIsFixedPitch false\r\nCharacterSet Special\r\nFontBBox -180 -293 1090 1010 \r\nUnderlinePosition -100\r\nUnderlineThickness 50\r\nVersion 001.008\r\nNotice Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated. All rights reserved.\r\nEncodingScheme FontSpecific\r\nStdHW 92\r\nStdVW 85\r\nStartCharMetrics 190\r\nC 32 ; WX 250 ; N space ; B 0 0 0 0 ;\r\nC 33 ; WX 333 ; N exclam ; B 128 -17 240 672 ;\r\nC 34 ; WX 713 ; N universal ; B 31 0 681 705 ;\r\nC 35 ; WX 500 ; N numbersign ; B 20 -16 481 673 ;\r\nC 36 ; WX 549 ; N existential ; B 25 0 478 707 ;\r\nC 37 ; WX 833 ; N percent ; B 63 -36 771 655 ;\r\nC 38 ; WX 778 ; N ampersand ; B 41 -18 750 661 ;\r\nC 39 ; WX 439 ; N suchthat ; B 48 -17 414 500 ;\r\nC 40 ; WX 333 ; N parenleft ; B 53 -191 300 673 ;\r\nC 41 ; WX 333 ; N parenright ; B 30 -191 277 673 ;\r\nC 42 ; WX 500 ; N asteriskmath ; B 65 134 427 551 ;\r\nC 43 ; WX 549 ; N plus ; B 10 0 539 533 ;\r\nC 44 ; WX 250 ; N comma ; B 56 -152 194 104 ;\r\nC 45 ; WX 549 ; N minus ; B 11 233 535 288 ;\r\nC 46 ; WX 250 ; N period ; B 69 -17 181 95 ;\r\nC 47 ; WX 278 ; N slash ; B 0 -18 254 646 ;\r\nC 48 ; WX 500 ; N zero ; B 24 -14 476 685 ;\r\nC 49 ; WX 500 ; N one ; B 117 0 390 673 ;\r\nC 50 ; WX 500 ; N two ; B 25 0 475 685 ;\r\nC 51 ; WX 500 ; N three ; B 43 -14 435 685 ;\r\nC 52 ; WX 500 ; N four ; B 15 0 469 685 ;\r\nC 53 ; WX 500 ; N five ; B 32 -14 445 690 ;\r\nC 54 ; WX 500 ; N six ; B 34 -14 468 685 ;\r\nC 55 ; WX 500 ; N seven ; B 24 -16 448 673 ;\r\nC 56 ; WX 500 ; N eight ; B 56 -14 445 685 ;\r\nC 57 ; WX 500 ; N nine ; B 30 -18 459 685 ;\r\nC 58 ; WX 278 ; N colon ; B 81 -17 193 460 ;\r\nC 59 ; WX 278 ; N semicolon ; B 83 -152 221 460 ;\r\nC 60 ; WX 549 ; N less ; B 26 0 523 522 ;\r\nC 61 ; WX 549 ; N equal ; B 11 141 537 390 ;\r\nC 62 ; WX 549 ; N greater ; B 26 0 523 522 ;\r\nC 63 ; WX 444 ; N question ; B 70 -17 412 686 ;\r\nC 64 ; WX 549 ; N congruent ; B 11 0 537 475 ;\r\nC 65 ; WX 722 ; N Alpha ; B 4 0 684 673 ;\r\nC 66 ; WX 667 ; N Beta ; B 29 0 592 673 ;\r\nC 67 ; WX 722 ; N Chi ; B -9 0 704 673 ;\r\nC 68 ; WX 612 ; N Delta ; B 6 0 608 688 ;\r\nC 69 ; WX 611 ; N Epsilon ; B 32 0 617 673 ;\r\nC 70 ; WX 763 ; N Phi ; B 26 0 741 673 ;\r\nC 71 ; WX 603 ; N Gamma ; B 24 0 609 673 ;\r\nC 72 ; WX 722 ; N Eta ; B 39 0 729 673 ;\r\nC 73 ; WX 333 ; N Iota ; B 32 0 316 673 ;\r\nC 74 ; WX 631 ; N theta1 ; B 18 -18 623 689 ;\r\nC 75 ; WX 722 ; N Kappa ; B 35 0 722 673 ;\r\nC 76 ; WX 686 ; N Lambda ; B 6 0 680 688 ;\r\nC 77 ; WX 889 ; N Mu ; B 28 0 887 673 ;\r\nC 78 ; WX 722 ; N Nu ; B 29 -8 720 673 ;\r\nC 79 ; WX 722 ; N Omicron ; B 41 -17 715 685 ;\r\nC 80 ; WX 768 ; N Pi ; B 25 0 745 673 ;\r\nC 81 ; WX 741 ; N Theta ; B 41 -17 715 685 ;\r\nC 82 ; WX 556 ; N Rho ; B 28 0 563 673 ;\r\nC 83 ; WX 592 ; N Sigma ; B 5 0 589 673 ;\r\nC 84 ; WX 611 ; N Tau ; B 33 0 607 673 ;\r\nC 85 ; WX 690 ; N Upsilon ; B -8 0 694 673 ;\r\nC 86 ; WX 439 ; N sigma1 ; B 40 -233 436 500 ;\r\nC 87 ; WX 768 ; N Omega ; B 34 0 736 688 ;\r\nC 88 ; WX 645 ; N Xi ; B 40 0 599 673 ;\r\nC 89 ; WX 795 ; N Psi ; B 15 0 781 684 ;\r\nC 90 ; WX 611 ; N Zeta ; B 44 0 636 673 ;\r\nC 91 ; WX 333 ; N bracketleft ; B 86 -155 299 674 ;\r\nC 92 ; WX 863 ; N therefore ; B 163 0 701 487 ;\r\nC 93 ; WX 333 ; N bracketright ; B 33 -155 246 674 ;\r\nC 94 ; WX 658 ; N perpendicular ; B 15 0 652 674 ;\r\nC 95 ; WX 500 ; N underscore ; B -2 -125 502 -75 ;\r\nC 96 ; WX 500 ; N radicalex ; B 480 881 1090 917 ;\r\nC 97 ; WX 631 ; N alpha ; B 41 -18 622 500 ;\r\nC 98 ; WX 549 ; N beta ; B 61 -223 515 741 ;\r\nC 99 ; WX 549 ; N chi ; B 12 -231 522 499 ;\r\nC 100 ; WX 494 ; N delta ; B 40 -19 481 740 ;\r\nC 101 ; WX 439 ; N epsilon ; B 22 -19 427 502 ;\r\nC 102 ; WX 521 ; N phi ; B 28 -224 492 673 ;\r\nC 103 ; WX 411 ; N gamma ; B 5 -225 484 499 ;\r\nC 104 ; WX 603 ; N eta ; B 0 -202 527 514 ;\r\nC 105 ; WX 329 ; N iota ; B 0 -17 301 503 ;\r\nC 106 ; WX 603 ; N phi1 ; B 36 -224 587 499 ;\r\nC 107 ; WX 549 ; N kappa ; B 33 0 558 501 ;\r\nC 108 ; WX 549 ; N lambda ; B 24 -17 548 739 ;\r\nC 109 ; WX 576 ; N mu ; B 33 -223 567 500 ;\r\nC 110 ; WX 521 ; N nu ; B -9 -16 475 507 ;\r\nC 111 ; WX 549 ; N omicron ; B 35 -19 501 499 ;\r\nC 112 ; WX 549 ; N pi ; B 10 -19 530 487 ;\r\nC 113 ; WX 521 ; N theta ; B 43 -17 485 690 ;\r\nC 114 ; WX 549 ; N rho ; B 50 -230 490 499 ;\r\nC 115 ; WX 603 ; N sigma ; B 30 -21 588 500 ;\r\nC 116 ; WX 439 ; N tau ; B 10 -19 418 500 ;\r\nC 117 ; WX 576 ; N upsilon ; B 7 -18 535 507 ;\r\nC 118 ; WX 713 ; N omega1 ; B 12 -18 671 583 ;\r\nC 119 ; WX 686 ; N omega ; B 42 -17 684 500 ;\r\nC 120 ; WX 493 ; N xi ; B 27 -224 469 766 ;\r\nC 121 ; WX 686 ; N psi ; B 12 -228 701 500 ;\r\nC 122 ; WX 494 ; N zeta ; B 60 -225 467 756 ;\r\nC 123 ; WX 480 ; N braceleft ; B 58 -183 397 673 ;\r\nC 124 ; WX 200 ; N bar ; B 65 -293 135 707 ;\r\nC 125 ; WX 480 ; N braceright ; B 79 -183 418 673 ;\r\nC 126 ; WX 549 ; N similar ; B 17 203 529 307 ;\r\nC 160 ; WX 750 ; N Euro ; B 20 -12 714 685 ;\r\nC 161 ; WX 620 ; N Upsilon1 ; B -2 0 610 685 ;\r\nC 162 ; WX 247 ; N minute ; B 27 459 228 735 ;\r\nC 163 ; WX 549 ; N lessequal ; B 29 0 526 639 ;\r\nC 164 ; WX 167 ; N fraction ; B -180 -12 340 677 ;\r\nC 165 ; WX 713 ; N infinity ; B 26 124 688 404 ;\r\nC 166 ; WX 500 ; N florin ; B 2 -193 494 686 ;\r\nC 167 ; WX 753 ; N club ; B 86 -26 660 533 ;\r\nC 168 ; WX 753 ; N diamond ; B 142 -36 600 550 ;\r\nC 169 ; WX 753 ; N heart ; B 117 -33 631 532 ;\r\nC 170 ; WX 753 ; N spade ; B 113 -36 629 548 ;\r\nC 171 ; WX 1042 ; N arrowboth ; B 24 -15 1024 511 ;\r\nC 172 ; WX 987 ; N arrowleft ; B 32 -15 942 511 ;\r\nC 173 ; WX 603 ; N arrowup ; B 45 0 571 910 ;\r\nC 174 ; WX 987 ; N arrowright ; B 49 -15 959 511 ;\r\nC 175 ; WX 603 ; N arrowdown ; B 45 -22 571 888 ;\r\nC 176 ; WX 400 ; N degree ; B 50 385 350 685 ;\r\nC 177 ; WX 549 ; N plusminus ; B 10 0 539 645 ;\r\nC 178 ; WX 411 ; N second ; B 20 459 413 737 ;\r\nC 179 ; WX 549 ; N greaterequal ; B 29 0 526 639 ;\r\nC 180 ; WX 549 ; N multiply ; B 17 8 533 524 ;\r\nC 181 ; WX 713 ; N proportional ; B 27 123 639 404 ;\r\nC 182 ; WX 494 ; N partialdiff ; B 26 -20 462 746 ;\r\nC 183 ; WX 460 ; N bullet ; B 50 113 410 473 ;\r\nC 184 ; WX 549 ; N divide ; B 10 71 536 456 ;\r\nC 185 ; WX 549 ; N notequal ; B 15 -25 540 549 ;\r\nC 186 ; WX 549 ; N equivalence ; B 14 82 538 443 ;\r\nC 187 ; WX 549 ; N approxequal ; B 14 135 527 394 ;\r\nC 188 ; WX 1000 ; N ellipsis ; B 111 -17 889 95 ;\r\nC 189 ; WX 603 ; N arrowvertex ; B 280 -120 336 1010 ;\r\nC 190 ; WX 1000 ; N arrowhorizex ; B -60 220 1050 276 ;\r\nC 191 ; WX 658 ; N carriagereturn ; B 15 -16 602 629 ;\r\nC 192 ; WX 823 ; N aleph ; B 175 -18 661 658 ;\r\nC 193 ; WX 686 ; N Ifraktur ; B 10 -53 578 740 ;\r\nC 194 ; WX 795 ; N Rfraktur ; B 26 -15 759 734 ;\r\nC 195 ; WX 987 ; N weierstrass ; B 159 -211 870 573 ;\r\nC 196 ; WX 768 ; N circlemultiply ; B 43 -17 733 673 ;\r\nC 197 ; WX 768 ; N circleplus ; B 43 -15 733 675 ;\r\nC 198 ; WX 823 ; N emptyset ; B 39 -24 781 719 ;\r\nC 199 ; WX 768 ; N intersection ; B 40 0 732 509 ;\r\nC 200 ; WX 768 ; N union ; B 40 -17 732 492 ;\r\nC 201 ; WX 713 ; N propersuperset ; B 20 0 673 470 ;\r\nC 202 ; WX 713 ; N reflexsuperset ; B 20 -125 673 470 ;\r\nC 203 ; WX 713 ; N notsubset ; B 36 -70 690 540 ;\r\nC 204 ; WX 713 ; N propersubset ; B 37 0 690 470 ;\r\nC 205 ; WX 713 ; N reflexsubset ; B 37 -125 690 470 ;\r\nC 206 ; WX 713 ; N element ; B 45 0 505 468 ;\r\nC 207 ; WX 713 ; N notelement ; B 45 -58 505 555 ;\r\nC 208 ; WX 768 ; N angle ; B 26 0 738 673 ;\r\nC 209 ; WX 713 ; N gradient ; B 36 -19 681 718 ;\r\nC 210 ; WX 790 ; N registerserif ; B 50 -17 740 673 ;\r\nC 211 ; WX 790 ; N copyrightserif ; B 51 -15 741 675 ;\r\nC 212 ; WX 890 ; N trademarkserif ; B 18 293 855 673 ;\r\nC 213 ; WX 823 ; N product ; B 25 -101 803 751 ;\r\nC 214 ; WX 549 ; N radical ; B 10 -38 515 917 ;\r\nC 215 ; WX 250 ; N dotmath ; B 69 210 169 310 ;\r\nC 216 ; WX 713 ; N logicalnot ; B 15 0 680 288 ;\r\nC 217 ; WX 603 ; N logicaland ; B 23 0 583 454 ;\r\nC 218 ; WX 603 ; N logicalor ; B 30 0 578 477 ;\r\nC 219 ; WX 1042 ; N arrowdblboth ; B 27 -20 1023 510 ;\r\nC 220 ; WX 987 ; N arrowdblleft ; B 30 -15 939 513 ;\r\nC 221 ; WX 603 ; N arrowdblup ; B 39 2 567 911 ;\r\nC 222 ; WX 987 ; N arrowdblright ; B 45 -20 954 508 ;\r\nC 223 ; WX 603 ; N arrowdbldown ; B 44 -19 572 890 ;\r\nC 224 ; WX 494 ; N lozenge ; B 18 0 466 745 ;\r\nC 225 ; WX 329 ; N angleleft ; B 25 -198 306 746 ;\r\nC 226 ; WX 790 ; N registersans ; B 50 -20 740 670 ;\r\nC 227 ; WX 790 ; N copyrightsans ; B 49 -15 739 675 ;\r\nC 228 ; WX 786 ; N trademarksans ; B 5 293 725 673 ;\r\nC 229 ; WX 713 ; N summation ; B 14 -108 695 752 ;\r\nC 230 ; WX 384 ; N parenlefttp ; B 24 -293 436 926 ;\r\nC 231 ; WX 384 ; N parenleftex ; B 24 -85 108 925 ;\r\nC 232 ; WX 384 ; N parenleftbt ; B 24 -293 436 926 ;\r\nC 233 ; WX 384 ; N bracketlefttp ; B 0 -80 349 926 ;\r\nC 234 ; WX 384 ; N bracketleftex ; B 0 -79 77 925 ;\r\nC 235 ; WX 384 ; N bracketleftbt ; B 0 -80 349 926 ;\r\nC 236 ; WX 494 ; N bracelefttp ; B 209 -85 445 925 ;\r\nC 237 ; WX 494 ; N braceleftmid ; B 20 -85 284 935 ;\r\nC 238 ; WX 494 ; N braceleftbt ; B 209 -75 445 935 ;\r\nC 239 ; WX 494 ; N braceex ; B 209 -85 284 935 ;\r\nC 241 ; WX 329 ; N angleright ; B 21 -198 302 746 ;\r\nC 242 ; WX 274 ; N integral ; B 2 -107 291 916 ;\r\nC 243 ; WX 686 ; N integraltp ; B 308 -88 675 920 ;\r\nC 244 ; WX 686 ; N integralex ; B 308 -88 378 975 ;\r\nC 245 ; WX 686 ; N integralbt ; B 11 -87 378 921 ;\r\nC 246 ; WX 384 ; N parenrighttp ; B 54 -293 466 926 ;\r\nC 247 ; WX 384 ; N parenrightex ; B 382 -85 466 925 ;\r\nC 248 ; WX 384 ; N parenrightbt ; B 54 -293 466 926 ;\r\nC 249 ; WX 384 ; N bracketrighttp ; B 22 -80 371 926 ;\r\nC 250 ; WX 384 ; N bracketrightex ; B 294 -79 371 925 ;\r\nC 251 ; WX 384 ; N bracketrightbt ; B 22 -80 371 926 ;\r\nC 252 ; WX 494 ; N bracerighttp ; B 48 -85 284 925 ;\r\nC 253 ; WX 494 ; N bracerightmid ; B 209 -85 473 935 ;\r\nC 254 ; WX 494 ; N bracerightbt ; B 48 -75 284 935 ;\r\nC -1 ; WX 790 ; N apple ; B 56 -3 733 808 ;\r\nEndCharMetrics\r\nEndFontMetrics\r\n",
  'ZapfDingbats.afm': "StartFontMetrics 4.1\r\nComment Copyright (c) 1985, 1987, 1988, 1989, 1997 Adobe Systems Incorporated. All Rights Reserved.\r\nComment Creation Date: Thu May  1 15:14:13 1997\r\nComment UniqueID 43082\r\nComment VMusage 45775 55535\r\nFontName ZapfDingbats\r\nFullName ITC Zapf Dingbats\r\nFamilyName ZapfDingbats\r\nWeight Medium\r\nItalicAngle 0\r\nIsFixedPitch false\r\nCharacterSet Special\r\nFontBBox -1 -143 981 820 \r\nUnderlinePosition -100\r\nUnderlineThickness 50\r\nVersion 002.000\r\nNotice Copyright (c) 1985, 1987, 1988, 1989, 1997 Adobe Systems Incorporated. All Rights Reserved.ITC Zapf Dingbats is a registered trademark of International Typeface Corporation.\r\nEncodingScheme FontSpecific\r\nStdHW 28\r\nStdVW 90\r\nStartCharMetrics 202\r\nC 32 ; WX 278 ; N space ; B 0 0 0 0 ;\r\nC 33 ; WX 974 ; N a1 ; B 35 72 939 621 ;\r\nC 34 ; WX 961 ; N a2 ; B 35 81 927 611 ;\r\nC 35 ; WX 974 ; N a202 ; B 35 72 939 621 ;\r\nC 36 ; WX 980 ; N a3 ; B 35 0 945 692 ;\r\nC 37 ; WX 719 ; N a4 ; B 34 139 685 566 ;\r\nC 38 ; WX 789 ; N a5 ; B 35 -14 755 705 ;\r\nC 39 ; WX 790 ; N a119 ; B 35 -14 755 705 ;\r\nC 40 ; WX 791 ; N a118 ; B 35 -13 761 705 ;\r\nC 41 ; WX 690 ; N a117 ; B 34 138 655 553 ;\r\nC 42 ; WX 960 ; N a11 ; B 35 123 925 568 ;\r\nC 43 ; WX 939 ; N a12 ; B 35 134 904 559 ;\r\nC 44 ; WX 549 ; N a13 ; B 29 -11 516 705 ;\r\nC 45 ; WX 855 ; N a14 ; B 34 59 820 632 ;\r\nC 46 ; WX 911 ; N a15 ; B 35 50 876 642 ;\r\nC 47 ; WX 933 ; N a16 ; B 35 139 899 550 ;\r\nC 48 ; WX 911 ; N a105 ; B 35 50 876 642 ;\r\nC 49 ; WX 945 ; N a17 ; B 35 139 909 553 ;\r\nC 50 ; WX 974 ; N a18 ; B 35 104 938 587 ;\r\nC 51 ; WX 755 ; N a19 ; B 34 -13 721 705 ;\r\nC 52 ; WX 846 ; N a20 ; B 36 -14 811 705 ;\r\nC 53 ; WX 762 ; N a21 ; B 35 0 727 692 ;\r\nC 54 ; WX 761 ; N a22 ; B 35 0 727 692 ;\r\nC 55 ; WX 571 ; N a23 ; B -1 -68 571 661 ;\r\nC 56 ; WX 677 ; N a24 ; B 36 -13 642 705 ;\r\nC 57 ; WX 763 ; N a25 ; B 35 0 728 692 ;\r\nC 58 ; WX 760 ; N a26 ; B 35 0 726 692 ;\r\nC 59 ; WX 759 ; N a27 ; B 35 0 725 692 ;\r\nC 60 ; WX 754 ; N a28 ; B 35 0 720 692 ;\r\nC 61 ; WX 494 ; N a6 ; B 35 0 460 692 ;\r\nC 62 ; WX 552 ; N a7 ; B 35 0 517 692 ;\r\nC 63 ; WX 537 ; N a8 ; B 35 0 503 692 ;\r\nC 64 ; WX 577 ; N a9 ; B 35 96 542 596 ;\r\nC 65 ; WX 692 ; N a10 ; B 35 -14 657 705 ;\r\nC 66 ; WX 786 ; N a29 ; B 35 -14 751 705 ;\r\nC 67 ; WX 788 ; N a30 ; B 35 -14 752 705 ;\r\nC 68 ; WX 788 ; N a31 ; B 35 -14 753 705 ;\r\nC 69 ; WX 790 ; N a32 ; B 35 -14 756 705 ;\r\nC 70 ; WX 793 ; N a33 ; B 35 -13 759 705 ;\r\nC 71 ; WX 794 ; N a34 ; B 35 -13 759 705 ;\r\nC 72 ; WX 816 ; N a35 ; B 35 -14 782 705 ;\r\nC 73 ; WX 823 ; N a36 ; B 35 -14 787 705 ;\r\nC 74 ; WX 789 ; N a37 ; B 35 -14 754 705 ;\r\nC 75 ; WX 841 ; N a38 ; B 35 -14 807 705 ;\r\nC 76 ; WX 823 ; N a39 ; B 35 -14 789 705 ;\r\nC 77 ; WX 833 ; N a40 ; B 35 -14 798 705 ;\r\nC 78 ; WX 816 ; N a41 ; B 35 -13 782 705 ;\r\nC 79 ; WX 831 ; N a42 ; B 35 -14 796 705 ;\r\nC 80 ; WX 923 ; N a43 ; B 35 -14 888 705 ;\r\nC 81 ; WX 744 ; N a44 ; B 35 0 710 692 ;\r\nC 82 ; WX 723 ; N a45 ; B 35 0 688 692 ;\r\nC 83 ; WX 749 ; N a46 ; B 35 0 714 692 ;\r\nC 84 ; WX 790 ; N a47 ; B 34 -14 756 705 ;\r\nC 85 ; WX 792 ; N a48 ; B 35 -14 758 705 ;\r\nC 86 ; WX 695 ; N a49 ; B 35 -14 661 706 ;\r\nC 87 ; WX 776 ; N a50 ; B 35 -6 741 699 ;\r\nC 88 ; WX 768 ; N a51 ; B 35 -7 734 699 ;\r\nC 89 ; WX 792 ; N a52 ; B 35 -14 757 705 ;\r\nC 90 ; WX 759 ; N a53 ; B 35 0 725 692 ;\r\nC 91 ; WX 707 ; N a54 ; B 35 -13 672 704 ;\r\nC 92 ; WX 708 ; N a55 ; B 35 -14 672 705 ;\r\nC 93 ; WX 682 ; N a56 ; B 35 -14 647 705 ;\r\nC 94 ; WX 701 ; N a57 ; B 35 -14 666 705 ;\r\nC 95 ; WX 826 ; N a58 ; B 35 -14 791 705 ;\r\nC 96 ; WX 815 ; N a59 ; B 35 -14 780 705 ;\r\nC 97 ; WX 789 ; N a60 ; B 35 -14 754 705 ;\r\nC 98 ; WX 789 ; N a61 ; B 35 -14 754 705 ;\r\nC 99 ; WX 707 ; N a62 ; B 34 -14 673 705 ;\r\nC 100 ; WX 687 ; N a63 ; B 36 0 651 692 ;\r\nC 101 ; WX 696 ; N a64 ; B 35 0 661 691 ;\r\nC 102 ; WX 689 ; N a65 ; B 35 0 655 692 ;\r\nC 103 ; WX 786 ; N a66 ; B 34 -14 751 705 ;\r\nC 104 ; WX 787 ; N a67 ; B 35 -14 752 705 ;\r\nC 105 ; WX 713 ; N a68 ; B 35 -14 678 705 ;\r\nC 106 ; WX 791 ; N a69 ; B 35 -14 756 705 ;\r\nC 107 ; WX 785 ; N a70 ; B 36 -14 751 705 ;\r\nC 108 ; WX 791 ; N a71 ; B 35 -14 757 705 ;\r\nC 109 ; WX 873 ; N a72 ; B 35 -14 838 705 ;\r\nC 110 ; WX 761 ; N a73 ; B 35 0 726 692 ;\r\nC 111 ; WX 762 ; N a74 ; B 35 0 727 692 ;\r\nC 112 ; WX 762 ; N a203 ; B 35 0 727 692 ;\r\nC 113 ; WX 759 ; N a75 ; B 35 0 725 692 ;\r\nC 114 ; WX 759 ; N a204 ; B 35 0 725 692 ;\r\nC 115 ; WX 892 ; N a76 ; B 35 0 858 705 ;\r\nC 116 ; WX 892 ; N a77 ; B 35 -14 858 692 ;\r\nC 117 ; WX 788 ; N a78 ; B 35 -14 754 705 ;\r\nC 118 ; WX 784 ; N a79 ; B 35 -14 749 705 ;\r\nC 119 ; WX 438 ; N a81 ; B 35 -14 403 705 ;\r\nC 120 ; WX 138 ; N a82 ; B 35 0 104 692 ;\r\nC 121 ; WX 277 ; N a83 ; B 35 0 242 692 ;\r\nC 122 ; WX 415 ; N a84 ; B 35 0 380 692 ;\r\nC 123 ; WX 392 ; N a97 ; B 35 263 357 705 ;\r\nC 124 ; WX 392 ; N a98 ; B 34 263 357 705 ;\r\nC 125 ; WX 668 ; N a99 ; B 35 263 633 705 ;\r\nC 126 ; WX 668 ; N a100 ; B 36 263 634 705 ;\r\nC 128 ; WX 390 ; N a89 ; B 35 -14 356 705 ;\r\nC 129 ; WX 390 ; N a90 ; B 35 -14 355 705 ;\r\nC 130 ; WX 317 ; N a93 ; B 35 0 283 692 ;\r\nC 131 ; WX 317 ; N a94 ; B 35 0 283 692 ;\r\nC 132 ; WX 276 ; N a91 ; B 35 0 242 692 ;\r\nC 133 ; WX 276 ; N a92 ; B 35 0 242 692 ;\r\nC 134 ; WX 509 ; N a205 ; B 35 0 475 692 ;\r\nC 135 ; WX 509 ; N a85 ; B 35 0 475 692 ;\r\nC 136 ; WX 410 ; N a206 ; B 35 0 375 692 ;\r\nC 137 ; WX 410 ; N a86 ; B 35 0 375 692 ;\r\nC 138 ; WX 234 ; N a87 ; B 35 -14 199 705 ;\r\nC 139 ; WX 234 ; N a88 ; B 35 -14 199 705 ;\r\nC 140 ; WX 334 ; N a95 ; B 35 0 299 692 ;\r\nC 141 ; WX 334 ; N a96 ; B 35 0 299 692 ;\r\nC 161 ; WX 732 ; N a101 ; B 35 -143 697 806 ;\r\nC 162 ; WX 544 ; N a102 ; B 56 -14 488 706 ;\r\nC 163 ; WX 544 ; N a103 ; B 34 -14 508 705 ;\r\nC 164 ; WX 910 ; N a104 ; B 35 40 875 651 ;\r\nC 165 ; WX 667 ; N a106 ; B 35 -14 633 705 ;\r\nC 166 ; WX 760 ; N a107 ; B 35 -14 726 705 ;\r\nC 167 ; WX 760 ; N a108 ; B 0 121 758 569 ;\r\nC 168 ; WX 776 ; N a112 ; B 35 0 741 705 ;\r\nC 169 ; WX 595 ; N a111 ; B 34 -14 560 705 ;\r\nC 170 ; WX 694 ; N a110 ; B 35 -14 659 705 ;\r\nC 171 ; WX 626 ; N a109 ; B 34 0 591 705 ;\r\nC 172 ; WX 788 ; N a120 ; B 35 -14 754 705 ;\r\nC 173 ; WX 788 ; N a121 ; B 35 -14 754 705 ;\r\nC 174 ; WX 788 ; N a122 ; B 35 -14 754 705 ;\r\nC 175 ; WX 788 ; N a123 ; B 35 -14 754 705 ;\r\nC 176 ; WX 788 ; N a124 ; B 35 -14 754 705 ;\r\nC 177 ; WX 788 ; N a125 ; B 35 -14 754 705 ;\r\nC 178 ; WX 788 ; N a126 ; B 35 -14 754 705 ;\r\nC 179 ; WX 788 ; N a127 ; B 35 -14 754 705 ;\r\nC 180 ; WX 788 ; N a128 ; B 35 -14 754 705 ;\r\nC 181 ; WX 788 ; N a129 ; B 35 -14 754 705 ;\r\nC 182 ; WX 788 ; N a130 ; B 35 -14 754 705 ;\r\nC 183 ; WX 788 ; N a131 ; B 35 -14 754 705 ;\r\nC 184 ; WX 788 ; N a132 ; B 35 -14 754 705 ;\r\nC 185 ; WX 788 ; N a133 ; B 35 -14 754 705 ;\r\nC 186 ; WX 788 ; N a134 ; B 35 -14 754 705 ;\r\nC 187 ; WX 788 ; N a135 ; B 35 -14 754 705 ;\r\nC 188 ; WX 788 ; N a136 ; B 35 -14 754 705 ;\r\nC 189 ; WX 788 ; N a137 ; B 35 -14 754 705 ;\r\nC 190 ; WX 788 ; N a138 ; B 35 -14 754 705 ;\r\nC 191 ; WX 788 ; N a139 ; B 35 -14 754 705 ;\r\nC 192 ; WX 788 ; N a140 ; B 35 -14 754 705 ;\r\nC 193 ; WX 788 ; N a141 ; B 35 -14 754 705 ;\r\nC 194 ; WX 788 ; N a142 ; B 35 -14 754 705 ;\r\nC 195 ; WX 788 ; N a143 ; B 35 -14 754 705 ;\r\nC 196 ; WX 788 ; N a144 ; B 35 -14 754 705 ;\r\nC 197 ; WX 788 ; N a145 ; B 35 -14 754 705 ;\r\nC 198 ; WX 788 ; N a146 ; B 35 -14 754 705 ;\r\nC 199 ; WX 788 ; N a147 ; B 35 -14 754 705 ;\r\nC 200 ; WX 788 ; N a148 ; B 35 -14 754 705 ;\r\nC 201 ; WX 788 ; N a149 ; B 35 -14 754 705 ;\r\nC 202 ; WX 788 ; N a150 ; B 35 -14 754 705 ;\r\nC 203 ; WX 788 ; N a151 ; B 35 -14 754 705 ;\r\nC 204 ; WX 788 ; N a152 ; B 35 -14 754 705 ;\r\nC 205 ; WX 788 ; N a153 ; B 35 -14 754 705 ;\r\nC 206 ; WX 788 ; N a154 ; B 35 -14 754 705 ;\r\nC 207 ; WX 788 ; N a155 ; B 35 -14 754 705 ;\r\nC 208 ; WX 788 ; N a156 ; B 35 -14 754 705 ;\r\nC 209 ; WX 788 ; N a157 ; B 35 -14 754 705 ;\r\nC 210 ; WX 788 ; N a158 ; B 35 -14 754 705 ;\r\nC 211 ; WX 788 ; N a159 ; B 35 -14 754 705 ;\r\nC 212 ; WX 894 ; N a160 ; B 35 58 860 634 ;\r\nC 213 ; WX 838 ; N a161 ; B 35 152 803 540 ;\r\nC 214 ; WX 1016 ; N a163 ; B 34 152 981 540 ;\r\nC 215 ; WX 458 ; N a164 ; B 35 -127 422 820 ;\r\nC 216 ; WX 748 ; N a196 ; B 35 94 698 597 ;\r\nC 217 ; WX 924 ; N a165 ; B 35 140 890 552 ;\r\nC 218 ; WX 748 ; N a192 ; B 35 94 698 597 ;\r\nC 219 ; WX 918 ; N a166 ; B 35 166 884 526 ;\r\nC 220 ; WX 927 ; N a167 ; B 35 32 892 660 ;\r\nC 221 ; WX 928 ; N a168 ; B 35 129 891 562 ;\r\nC 222 ; WX 928 ; N a169 ; B 35 128 893 563 ;\r\nC 223 ; WX 834 ; N a170 ; B 35 155 799 537 ;\r\nC 224 ; WX 873 ; N a171 ; B 35 93 838 599 ;\r\nC 225 ; WX 828 ; N a172 ; B 35 104 791 588 ;\r\nC 226 ; WX 924 ; N a173 ; B 35 98 889 594 ;\r\nC 227 ; WX 924 ; N a162 ; B 35 98 889 594 ;\r\nC 228 ; WX 917 ; N a174 ; B 35 0 882 692 ;\r\nC 229 ; WX 930 ; N a175 ; B 35 84 896 608 ;\r\nC 230 ; WX 931 ; N a176 ; B 35 84 896 608 ;\r\nC 231 ; WX 463 ; N a177 ; B 35 -99 429 791 ;\r\nC 232 ; WX 883 ; N a178 ; B 35 71 848 623 ;\r\nC 233 ; WX 836 ; N a179 ; B 35 44 802 648 ;\r\nC 234 ; WX 836 ; N a193 ; B 35 44 802 648 ;\r\nC 235 ; WX 867 ; N a180 ; B 35 101 832 591 ;\r\nC 236 ; WX 867 ; N a199 ; B 35 101 832 591 ;\r\nC 237 ; WX 696 ; N a181 ; B 35 44 661 648 ;\r\nC 238 ; WX 696 ; N a200 ; B 35 44 661 648 ;\r\nC 239 ; WX 874 ; N a182 ; B 35 77 840 619 ;\r\nC 241 ; WX 874 ; N a201 ; B 35 73 840 615 ;\r\nC 242 ; WX 760 ; N a183 ; B 35 0 725 692 ;\r\nC 243 ; WX 946 ; N a184 ; B 35 160 911 533 ;\r\nC 244 ; WX 771 ; N a197 ; B 34 37 736 655 ;\r\nC 245 ; WX 865 ; N a185 ; B 35 207 830 481 ;\r\nC 246 ; WX 771 ; N a194 ; B 34 37 736 655 ;\r\nC 247 ; WX 888 ; N a198 ; B 34 -19 853 712 ;\r\nC 248 ; WX 967 ; N a186 ; B 35 124 932 568 ;\r\nC 249 ; WX 888 ; N a195 ; B 34 -19 853 712 ;\r\nC 250 ; WX 831 ; N a187 ; B 35 113 796 579 ;\r\nC 251 ; WX 873 ; N a188 ; B 36 118 838 578 ;\r\nC 252 ; WX 927 ; N a189 ; B 35 150 891 542 ;\r\nC 253 ; WX 970 ; N a190 ; B 35 76 931 616 ;\r\nC 254 ; WX 918 ; N a191 ; B 34 99 884 593 ;\r\nEndCharMetrics\r\nEndFontMetrics\r\n"
};

const pdfStyleMapper = {
    fillStyle: {
        prop: "fillColor",
        getValue: (val) => {
            return val;
        },
    },
    fill: {
        prop: "fillColor",
        getValue: (val) => {
            return val;
        },
    },
    strokeStyle: {
        prop: "strokeColor",
        getValue: (val) => {
            return val;
        },
    },
    stroke: {
        prop: "strokeColor",
        getValue: (val) => {
            return val;
        },
    },
    globalAlpha: {
        prop: "opacity",
        getValue: (val) => {
            return val;
        },
    },
    lineDash: {
        prop: "dash",
        getValue: (val) => {
            return val[0];
        },
    },
    textAlign: {
        prop: "align",
        getValue: (val) => {
            return val;
        },
    },
    font: {
        prop: "font",
        getValue: (val) => {
            const familyName = val.match(/\b[A-Za-z]+[0-9]*[A-Za-z0-9]*\b/gm);
            return familyName &&
                familyName.length > 0 &&
                pdfSupportedFontFamily.indexOf(familyName[0]) !== -1
                ? familyName[0]
                : "Helvetica";
        },
    },
};
const queueInstance = queue$1;
const i2DGeometry = geometry;
let Id = 0;
const zoomInstance = behaviour.zoom();
const dragInstance = behaviour.drag();
function domId() {
    Id += 1;
    return Id;
}
function colorValueCheck(value) {
    if (colorMap$1.RGBAInstanceCheck(value)) {
        value = value.rgba;
    }
    return value === "#000" || value === "#000000" || value === "black" ? "#010101" : value;
}
function formatTransformValue(prop, value) {
    if (['translate', 'scale', 'skew'].includes(prop)) {
        return Array.isArray(value) && value.length > 0 ? [value[0], value[1] || value[0]] : [0, 0];
    } else if (prop === 'rotate') {
        return Array.isArray(value) && value.length > 0 ? [value[0] || 0, value[1] || 0, value[2] || 0] : [0, 0, 0];
    }
}
function prepObjProxyCanvas(type, attr, context, BBoxUpdate) {
    const handlr = {
        set(obj, prop, value) {
            if (value === null) {
                delete obj[prop];
                return true;
            }
            const transformProps = ['translate', 'scale', 'skew', 'rotate'];
            if (type === 'transform' && transformProps.includes(prop)) {
                value = formatTransformValue(prop, value);
            } else if (type === 'style') {
                value = colorValueCheck(value);
            }
            if (prop === "transform") {
                value = prepObjProxyCanvas('transform', value, context, BBoxUpdate);
            }
            obj[prop] = value;
            if (context && context.dom) {
                const action = type === 'transform' ? 'setAttr' : (type === 'style' ? 'setStyle' : 'setAttr');
                context.dom[action](prop, value);
            }
            if (BBoxUpdate && (type === 'attr' || type === 'transform')) {
                context.BBoxUpdate = true;
            }
            queueInstance.vDomChanged(context.vDomIndex);
            return true;
        },
        deleteProperty(obj, prop) {
            if (prop in obj) {
                delete obj[prop];
                queueInstance.vDomChanged(context.vDomIndex);
                if (type === 'attr' && BBoxUpdate) {
                    context.BBoxUpdate = true;
                }
            }
            return true;
        },
    };
    return new Proxy(Object.assign({}, attr), handlr);
}
const CanvasCollection = function () {
    CollectionPrototype.apply(this, arguments);
};
CanvasCollection.prototype = new CollectionPrototype();
CanvasCollection.prototype.constructor = CanvasCollection;
CanvasCollection.prototype.createNode = function (ctx, config, vDomIndex) {
    return new CanvasNodeExe(ctx, config, domId(), vDomIndex);
};
function getPixlRatio(ctx) {
    const dpr = window.devicePixelRatio || 1;
    const bsr =
        ctx.webkitBackingStorePixelRatio ||
        ctx.mozBackingStorePixelRatio ||
        ctx.msBackingStorePixelRatio ||
        ctx.oBackingStorePixelRatio ||
        ctx.backingStorePixelRatio ||
        1;
    const ratio = dpr / bsr;
    return ratio < 1.0 ? 1.0 : ratio;
}
function domSetAttribute(attr, value) {
    if (value == null && this.attr[attr] != null) {
        delete this.attr[attr];
    } else {
        this.attr[attr] = value;
    }
}
function domSetStyle(attr, value) {
    if (value == null && this.style[attr] != null) {
        delete this.style[attr];
    } else {
        this.style[attr] = value;
    }
}
function cRenderPdf(attr, pdfCtx, block) {
    const self = this;
    const transform = block ? self.attr.transform || {} : self.abTransform || {};
    const { scale = [1, 1], skew = [0, 0], translate = [0, 0] } = transform;
    const [hozScale = 1, verScale = hozScale] = scale;
    const [hozSkew = 0, verSkew = hozSkew] = skew;
    const [hozMove = 0, verMove = hozMove] = translate;
    pdfCtx.save();
    pdfCtx.transform(hozScale, hozSkew, verSkew, verScale, hozMove, verMove);
    if (transform.rotate && transform.rotate.length > 0) {
        pdfCtx.translate(transform.rotate[1] || 0, transform.rotate[2] || 0);
        pdfCtx.rotate(transform.rotate[0] * (Math.PI / 180));
        pdfCtx.translate(-transform.rotate[1] || 0, -transform.rotate[2] || 0);
    }
    for (let i = 0; i < self.stack.length; i += 1) {
        self.stack[i].executePdf(pdfCtx, block);
    }
    pdfCtx.restore();
}
function cRender(attr) {
    const self = this;
    if (attr.transform) {
        const { transform } = attr;
        const { scale = [1, 1], skew = [0, 0], translate = [0, 0] } = transform;
        const [hozScale = 1, verScale = hozScale] = scale;
        const [hozSkew = 0, verSkew = hozSkew] = skew;
        const [hozMove = 0, verMove = hozMove] = translate;
        self.ctx.transform(hozScale, hozSkew, verSkew, verScale, hozMove, verMove);
        if (transform.rotate && transform.rotate.length > 0) {
            self.ctx.translate(transform.rotate[1] || 0, transform.rotate[2] || 0);
            self.ctx.rotate(transform.rotate[0] * (Math.PI / 180));
            self.ctx.translate(-transform.rotate[1] || 0, -transform.rotate[2] || 0);
        }
    }
    for (let i = 0; i < self.stack.length; i += 1) {
        self.stack[i].execute();
    }
}
function parseTransform(transform) {
    const output = {
        translateX: 0,
        translateY: 0,
        scaleX: 1,
        scaleY: 1,
    };
    if (transform) {
        if (transform.translate && transform.translate.length > 0) {
            output.translateX = transform.translate[0];
            output.translateY = transform.translate[1];
        }
        if (transform.scale && transform.scale.length > 0) {
            output.scaleX = transform.scale[0];
            output.scaleY = transform.scale[1] || output.scaleX;
        }
    }
    return output;
}
function RPolyupdateBBox() {
    const self = this;
    const { transform, points = [] } = self.attr;
    const { translateX, translateY, scaleX, scaleY } = parseTransform(transform);
    let abYposition = 0;
    if (points && points.length > 0) {
        let minX = points[0].x;
        let maxX = points[0].x;
        let minY = points[0].y;
        let maxY = points[0].y;
        for (let i = 1; i < points.length; i += 1) {
            if (minX > points[i].x) minX = points[i].x;
            if (maxX < points[i].x) maxX = points[i].x;
            if (minY > points[i].y) minY = points[i].y;
            if (maxY < points[i].y) maxY = points[i].y;
        }
        self.BBox = {
            x: translateX + minX * scaleX,
            y: translateY + minY * scaleY,
            width: (maxX - minX) * scaleX,
            height: (maxY - minY) * scaleY,
        };
        abYposition = minY;
    } else {
        self.BBox = {
            x: 0,
            y: 0,
            width: 0,
            height: 0,
        };
    }
    if (transform && transform.rotate) {
        self.BBoxHit = i2DGeometry.rotateBBox(this.BBox, transform);
    } else {
        self.BBoxHit = this.BBox;
    }
    self.abYposition = abYposition;
}
function CanvasGradient(config = {}, type = "linear") {
    this.config = config;
    this.type = type;
    this.dom = {};
    this.mode = !this.config.mode || this.config.mode === "percent" ? "percent" : "absolute";
}
CanvasGradient.prototype = new NodePrototype();
CanvasGradient.prototype.exe = function GRAexe(ctx, BBox) {
    if (this.type === "linear" && this.mode === "percent") {
        return this.linearGradient(ctx, BBox);
    } else if (this.type === "linear" && this.mode === "absolute") {
        return this.absoluteLinearGradient(ctx);
    } else if (this.type === "radial" && this.mode === "percent") {
        return this.radialGradient(ctx, BBox);
    } else if (this.type === "radial" && this.mode === "absolute") {
        return this.absoluteRadialGradient(ctx);
    } else {
        console.error("wrong Gradiant type");
    }
};
CanvasGradient.prototype.setAttr = function (attr, value) {
    this.config[attr] = value;
};
CanvasGradient.prototype.exePdf = function GRAexe(ctx, BBox, AABox) {
    if (this.type === "linear" && this.mode === "percent") {
        return this.linearGradientPdf(ctx, BBox, AABox);
    } else if (this.type === "linear" && this.mode === "absolute") {
        return this.absoluteLinearGradientPdf(ctx, AABox);
    } else if (this.type === "radial" && this.mode === "percent") {
        return this.radialGradientPdf(ctx, BBox, AABox);
    } else if (this.type === "radial" && this.mode === "absolute") {
        return this.absoluteRadialGradientPdf(ctx, AABox);
    } else {
        console.error("wrong Gradiant type");
    }
};
CanvasGradient.prototype.linearGradientPdf = function GralinearGradient(ctx, BBox, AABox) {
    const { translate = [0, 0] } = AABox;
    const lGradient = ctx.linearGradient(
        translate[0] + BBox.x + BBox.width * ((this.config.x1 || 0) / 100),
        translate[1] + 0 + BBox.height * ((this.config.y1 || 0) / 100),
        translate[0] + BBox.x + BBox.width * ((this.config.x2 || 0) / 100),
        translate[1] + 0 + BBox.height * ((this.config.y2 || 0) / 100)
    );
    (this.config.colorStops ?? []).forEach((d) => {
        lGradient.stop((d.offset || 0) / 100, d.color, d.opacity);
    });
    return lGradient;
};
CanvasGradient.prototype.linearGradient = function GralinearGradient(ctx, BBox) {
    const lGradient = ctx.createLinearGradient(
        BBox.x + BBox.width * ((this.config.x1 || 0) / 100),
        BBox.y + BBox.height * ((this.config.y1 || 0) / 100),
        BBox.x + BBox.width * ((this.config.x2 || 0) / 100),
        BBox.y + BBox.height * ((this.config.y2 || 0) / 100)
    );
    (this.config.colorStops ?? []).forEach((d) => {
        lGradient.addColorStop( (d.offset || 0) / 100, d.color);
    });
    return lGradient;
};
CanvasGradient.prototype.absoluteLinearGradient = function absoluteGralinearGradient(ctx) {
    const lGradient = ctx.createLinearGradient(
        this.config.x1 || 0,
        this.config.y1 || 0,
        this.config.x2 || 0,
        this.config.y2 || 0
    );
    (this.config.colorStops ?? []).forEach((d) => {
        lGradient.addColorStop((d.offset || 0), d.color);
    });
    return lGradient;
};
CanvasGradient.prototype.absoluteLinearGradientPdf = function absoluteGralinearGradient(
    ctx,
    AABox
) {
    const { translate = [0, 0] } = AABox;
    const lGradient = ctx.linearGradient(
        translate[0] + this.config.x1 || 0,
        translate[1] + this.config.y1 || 0,
        translate[0] + this.config.x2 || 0,
        translate[1] + this.config.y2 || 0
    );
    (this.config.colorStops ?? []).forEach((d) => {
        lGradient.stop((d.offset || 0), d.color, d.opacity);
    });
    return lGradient;
};
CanvasGradient.prototype.radialGradient = function GRAradialGradient(ctx, BBox) {
    const { innerCircle = {}, outerCircle = {} } = this.config;
    const cGradient = ctx.createRadialGradient(
        BBox.x + BBox.width * (innerCircle.x || 0) / 100,
        BBox.y + BBox.height * (innerCircle.y || 0) / 100,
        BBox.width > BBox.height
            ? (BBox.width * (innerCircle.r || 0) / 100)
            : (BBox.height * (innerCircle.r || 0) / 100),
        BBox.x + BBox.width * (outerCircle.x || 0) / 100,
        BBox.y + BBox.height * (outerCircle.y || 0) / 100,
        BBox.width > BBox.height
            ? (BBox.width * (outerCircle.r || 0) / 100)
            : (BBox.height * (outerCircle.r || 0) / 100)
    );
    (this.config.colorStops ?? []).forEach((d) => {
        cGradient.addColorStop((d.offset || 0) / 100, d.color);
    });
    return cGradient;
};
CanvasGradient.prototype.radialGradientPdf = function GRAradialGradient(ctx, BBox, AABox) {
    const { translate = [0, 0] } = AABox;
    const { innerCircle = {}, outerCircle = {} } = this.config;
    const cGradient = ctx.radialGradient(
        translate[0] + BBox.x + BBox.width * (innerCircle.x || 0) / 100,
        translate[1] + 0 + BBox.height * (innerCircle.y || 0) / 100,
        innerCircle.r || 0,
        translate[0] + BBox.x + BBox.width * (outerCircle.x || 0) / 100,
        translate[1] + 0 + BBox.height * (outerCircle.y || 0) / 100,
        outerCircle.r2 || 0
    );
    (this.config.colorStops ?? []).forEach((d) => {
        cGradient.stop((d.offset || 0) / 100, d.color, d.opacity);
    });
    return cGradient;
};
CanvasGradient.prototype.absoluteRadialGradient = function absoluteGraradialGradient(ctx) {
    const { innerCircle = {}, outerCircle = {} } = this.config;
    const cGradient = ctx.createRadialGradient(
        innerCircle.x || 0,
        innerCircle.y || 0,
        innerCircle.r || 0,
        outerCircle.x || 0,
        outerCircle.y || 0,
        outerCircle.r || 0
    );
    (this.config.colorStops ?? []).forEach((d) => {
        cGradient.addColorStop((d.offset || 0) / 100, d.color);
    });
    return cGradient;
};
CanvasGradient.prototype.absoluteRadialGradientPdf = function absoluteGraradialGradient(
    ctx,
    BBox,
    AABox
) {
    const { translate = [0, 0] } = AABox;
    const { innerCircle = {}, outerCircle = {} } = this.config;
    const cGradient = ctx.radialGradient(
        translate[0] + innerCircle.x || 0,
        translate[1] + innerCircle.y || 0,
        innerCircle.r || 0,
        translate[0] + outerCircle.x || 0,
        translate[1] + outerCircle.y || 0,
        outerCircle.r || 0
    );
    (this.config.colorStops ?? []).forEach((d) => {
        cGradient.stop((d.offset || 0) / 100, d.color);
    });
    return cGradient;
};
CanvasGradient.prototype.colorStops = function GRAcolorStops(colorStopValues) {
    if (Object.prototype.toString.call(colorStopValues) !== "[object Array]") {
        return false;
    }
    this.config.colorStops = colorStopValues;
    return this;
};
function createLinearGradient(config) {
    return new CanvasGradient(config, "linear");
}
function createRadialGradient(config) {
    return new CanvasGradient(config, "radial");
}
function PixelObject(data, width, height) {
    this.imageData = data;
    this.width = width;
    this.height = height;
}
PixelObject.prototype.get = function (pos) {
    const pixels = this.imageData ? this.imageData.pixels : [];
    const rIndex = (pos.y - 1) * (this.width * 4) + (pos.x - 1) * 4;
    return (
        "rgba(" +
        pixels[rIndex] +
        ", " +
        pixels[rIndex + 1] +
        ", " +
        pixels[rIndex + 2] +
        ", " +
        pixels[rIndex + 3] +
        ")"
    );
};
PixelObject.prototype.put = function (pos, color) {
    const rIndex = (pos.y - 1) * (this.width * 4) + (pos.x - 1) * 4;
    this.imageData.pixels[rIndex] = color[0];
    this.imageData.pixels[rIndex + 1] = color[1];
    this.imageData.pixels[rIndex + 2] = color[2];
    this.imageData.pixels[rIndex + 3] = color[3];
    return this;
};
function CanvasMask(self, config = {}) {
    const maskId = config.id ? config.id : "mask-" + Math.ceil(Math.random() * 1000);
    this.config = config;
    this.mask = new CanvasNodeExe(
        self.dom.ctx,
        {
            el: "g",
            attr: {
                id: maskId,
            },
        },
        domId(),
        self.vDomIndex
    );
}
CanvasMask.prototype.setAttr = function (attr, value) {
    this.config[attr] = value;
};
CanvasMask.prototype.exe = function () {
    this.mask.execute();
    this.mask.dom.ctx.globalCompositeOperation =
        this.config.globalCompositeOperation || "destination-atop";
    return true;
};
function createCanvasMask(maskConfig) {
    return new CanvasMask(this, maskConfig);
}
function CanvasClipping(self, config = {}) {
    const clipId = config.id ? config.id : "clip-" + Math.ceil(Math.random() * 1000);
    this.clip = new CanvasNodeExe(
        self.dom.ctx,
        {
            el: "g",
            attr: {
                id: clipId,
            },
        },
        domId(),
        self.vDomIndex
    );
}
CanvasClipping.prototype.exe = function () {
    this.clip.dom.ctx.beginPath();
    this.clip.execute();
    this.clip.dom.ctx.clip();
    return true;
};
function createCanvasClip(patternConfig) {
    return new CanvasClipping(this, patternConfig);
}
function CanvasPattern(self, config = {}, width = 0, height = 0) {
    const selfSelf = this;
    const patternId = config.id ? config.id : "pattern-" + Math.ceil(Math.random() * 1000);
    this.repeatInd = config.repeat ? config.repeat : "repeat";
    selfSelf.pattern = canvasLayer(
        null,
        {},
        {
            enableEvents: false,
            enableResize: false,
        }
    );
    selfSelf.pattern.setSize(width, height);
    selfSelf.pattern.setAttr("id", patternId);
    self.prependChild([selfSelf.pattern]);
    selfSelf.pattern.vDomIndex = self.vDomIndex + ":" + patternId;
    selfSelf.pattern.onChange(function () {
        selfSelf.patternObj = self.ctx.createPattern(selfSelf.pattern.domEl, selfSelf.repeatInd);
    });
}
CanvasPattern.prototype.repeat = function (repeat) {
    this.repeatInd = repeat;
};
CanvasPattern.prototype.exe = function () {
    return this.patternObj;
};
function createCanvasPattern(patternConfig, width = 0, height = 0) {
    return new CanvasPattern(this, patternConfig, width, height);
}
function applyStyles() {
    if (this.ctx.fillStyle !== "#000000") {
        this.ctx.fill();
    }
    if (this.ctx.strokeStyle !== "#000000") {
        this.ctx.stroke();
    }
}
function applyStylesPdf(pdfCtx) {
    const fillColor = this.style.fillStyle ?? this.style.fill ?? this.style.fillColor;
    const strokeColor = this.style.stroke ?? this.style.strokeStyle ?? this.style.strokeColor;
    if (fillColor && strokeColor) {
        pdfCtx.fillAndStroke(fillColor, strokeColor);
    } else if (fillColor) {
        pdfCtx.fill();
    } else if (strokeColor) {
        pdfCtx.stroke();
    }
}
function CanvasDom() {
    this.abYposition = 0;
    this.BBox = {
        x: 0,
        y: 0,
        width: 0,
        height: 0,
    };
    this.BBoxHit = {
        x: 0,
        y: 0,
        width: 0,
        height: 0,
    };
}
CanvasDom.prototype = {
    render: cRender,
    renderPdf: cRenderPdf,
    setAttr: domSetAttribute,
    setStyle: domSetStyle,
    applyStyles,
    applyStylesPdf,
    updateBBox: function () {},
    executePdf: function () {},
    execute: function () {}
};
function imageInstance(self) {
    const imageIns = new Image();
    imageIns.crossOrigin = "anonymous";
    imageIns.onload = function onload() {
        self.attr.height = self.attr.height
            ? self.attr.height
            : (self.attr.width / this.naturalWidth) * this.naturalHeight;
        self.attr.width = self.attr.width
            ? self.attr.width
            : (self.attr.height / this.naturalHeight) * this.naturalWidth;
        self.imageObj = this;
        if (self.nodeExe.attr.onload && typeof self.nodeExe.attr.onload === "function") {
            self.nodeExe.attr.onload.call(self.nodeExe, self.image);
        }
        self.nodeExe.BBoxUpdate = true;
        queueInstance.vDomChanged(self.nodeExe.vDomIndex);
    };
    imageIns.onerror = function onerror(error) {
        if (self.nodeExe.attr.onerror && typeof self.nodeExe.attr.onerror === "function") {
            self.nodeExe.attr.onerror.call(self.nodeExe, error);
        }
    };
    return imageIns;
}
function DummyDom(ctx, props, styleProps) {
    const self = this;
    self.ctx = ctx;
    self.nodeName = "dummy";
    self.attr = Object.assign({}, props);
    self.style = Object.assign({}, styleProps);
    self.stack = [self];
    return this;
}
DummyDom.prototype = new CanvasDom();
DummyDom.prototype.constructor = DummyDom;
function RenderImage(ctx, props, styleProps, onloadExe, onerrorExe, nodeExe) {
    const self = this;
    self.ctx = ctx;
    self.nodeName = "Image";
    self.nodeExe = nodeExe;
    self.attr = Object.assign({}, props) ;
    self.style = Object.assign({}, styleProps);
    for (const key in props) {
        this.setAttr(key, props[key]);
    }
    self.stack = [self];
}
RenderImage.prototype = new CanvasDom();
RenderImage.prototype.constructor = RenderImage;
RenderImage.prototype.setAttr = function RIsetAttr(attr, value) {
    const self = this;
    if (attr === "src") {
        if (typeof value === "string") {
            self.image = self.image ? self.image : imageInstance(self);
            if (self.image.src !== value) {
                self.image.src = value;
            }
        } else if (
            value instanceof HTMLImageElement ||
            value instanceof SVGImageElement ||
            value instanceof HTMLCanvasElement
        ) {
            self.imageObj = value;
            self.attr.height = self.attr.height ? self.attr.height : value.height;
            self.attr.width = self.attr.width ? self.attr.width : value.width;
        } else if (value instanceof CanvasNodeExe || value instanceof RenderTexture) {
            self.imageObj = value.domEl;
            self.attr.height = self.attr.height ? self.attr.height : value.attr.height;
            self.attr.width = self.attr.width ? self.attr.width : value.attr.width;
        }
    }
    this.attr[attr] = value;
};
RenderImage.prototype.updateBBox = function RIupdateBBox() {
    const self = this;
    const { transform, x = 0, y = 0, width = 0, height = 0 } = self.attr;
    const { translateX, translateY, scaleX, scaleY } = parseTransform(transform);
    self.BBox = {
        x: (translateX + x) * scaleX,
        y: (translateY + y) * scaleY,
        width: width * scaleX,
        height: height * scaleY,
    };
    if (transform && transform.rotate) {
        self.BBoxHit = i2DGeometry.rotateBBox(this.BBox, transform);
    } else {
        self.BBoxHit = this.BBox;
    }
    self.abYposition = y;
};
RenderImage.prototype.execute = function RIexecute() {
    const { width = 0, height = 0, x = 0, y = 0 } = this.attr;
    if (this.imageObj) {
        this.ctx.drawImage(this.imageObj, x, y, width, height);
    }
};
RenderImage.prototype.executePdf = function RIexecute(pdfCtx) {
    const { width = 0, height = 0, x = 0, y = 0 } = this.attr;
    if (this.attr.src) {
        pdfCtx.translate(0, -this.abYposition);
        pdfCtx.image(this.attr.src, x, y, { width, height });
    }
};
RenderImage.prototype.applyStyles = function RIapplyStyles() {};
RenderImage.prototype.in = function RIinfun(co) {
    const { width = 0, height = 0, x = 0, y = 0 } = this.attr;
    return co.x >= x && co.x <= x + width && co.y >= y && co.y <= y + height;
};
function RenderText(ctx, props, styleProps) {
    const self = this;
    self.ctx = ctx;
    self.attr = Object.assign({}, props) ;
    self.style = Object.assign({}, styleProps);
    self.nodeName = "text";
    self.stack = [self];
    self.textHeight = 0;
    self.height = 1;
    self.pdfSubTexts = [];
    if (self.attr.width && self.attr.text) {
        this.fitWidth();
    }
}
RenderText.prototype = new CanvasDom();
RenderText.prototype.constructor = RenderText;
RenderText.prototype.setAttr = function (attr, value) {
    if (value == null && this.attr[attr] != null) {
        delete this.attr[attr];
    } else {
        this.attr[attr] = value;
        if ((attr === "width" || attr === "text") && this.attr.width && this.attr.text) {
            this.fitWidth();
        }
    }
};
RenderText.prototype.setStyle = function (attr, value) {
    if (value == null && this.style[attr] != null) {
        delete this.style[attr];
    } else {
        this.style[attr] = value;
        if (attr === "font" && this.attr && this.attr.width && this.attr.text) {
            this.fitWidth();
        }
    }
};
RenderText.prototype.fitWidth = function () {
    if (this.style.font) {
        this.ctx.font = this.style.font;
    }
    const width = this.attr.width;
    const textListByLine = this.attr.text.toString().split("\n");
    const textSubStrs = [];
    let strLit = "";
    let i = 0;
    const textList = textListByLine.reduce((p, c) => {
        const sstr = c.split(/( )/g);
        sstr.forEach((d) => {
            if (this.ctx.measureText(d).width < width) {
                p.push(d);
            } else {
                p = p.concat(d.match(new RegExp(".{1,1}", "g")));
            }
        });
        p.push("\n");
        return p;
    }, []);
    while (i < textList.length) {
        if (textList[i] === "\n") {
            textSubStrs.push(strLit);
            strLit = " ";
        } else {
            if (this.ctx.measureText(strLit + textList[i]).width < width) {
                strLit = strLit + textList[i];
            } else {
                if (strLit && strLit.length > 0 && strLit !== " ") {
                    textSubStrs.push(strLit);
                }
                strLit = textList[i];
            }
        }
        i++;
    }
    if (strLit && strLit !== " ") {
        textSubStrs.push(strLit);
    }
    this.textList = textSubStrs;
};
RenderText.prototype.text = function RTtext(value) {
    this.attr.text = value;
    if (this.attr.width) {
        this.fitWidth();
    }
};
RenderText.prototype.updateBBox = function RTupdateBBox() {
    const self = this;
    let height = 1;
    let width = 0;
    let { x = 0, y = 0, transform } = self.attr;
    const { translateX, translateY, scaleX, scaleY } = parseTransform(transform);
    const { doc } = self.ctx;
    if (this.style.font) {
        this.ctx.font = this.style.font;
        height = parseInt(this.style.font.replace(/[^\d.]/g, ""), 10) || 1;
        self.textHeight = height + 3;
    } else {
        self.textHeight = this.ctx.measureText("I2DJS-Z").fontBoundingBoxAscent;
        height = self.textHeight + 7;
    }
    if (this.attr.width && this.textList && this.textList.length > 0) {
        width = this.attr.width;
        height = height * this.textList.length;
    } else {
        width = this.ctx.measureText(this.attr.text).width;
    }
    if (doc) {
        width = this.attr.width || ((doc?.options?.size[0]??0) - this.abTransform.translate[0] - x);
        const alignVlaue = this.style.align ?? this.style.textAlign;
        const styleObect = {
            width,
            ...(this.style.lineGap && { lineGap: this.style.lineGap }),
            ...(this.style.textBaseline && { textBaseline: this.style.textBaseline }),
            ...(alignVlaue && { align: alignVlaue }),
        };
        doc.fontSize(parseInt(this.style.font?.replace(/[^\d.]/g, ""), 10) || 10);
        height = doc.heightOfString(this.attr.text, styleObect);
        this.textHeight = doc.heightOfString("i2djs", styleObect);
    }
    if (this.style.textAlign === "center") {
        x -= width / 2;
    } else if (this.style.textAlign === "right") {
        x -= width;
    }
    Object.assign(self, { width, height, x, y });
    self.width = width;
    self.height = height;
    self.x = x;
    self.y = y;
    self.BBox = {
        x: (translateX + x) * scaleX,
        y: (translateY + y) * scaleY,
        width: width * scaleX,
        height: height * scaleY,
    };
    self.abYposition = y;
    if (transform && transform.rotate) {
        self.BBoxHit = i2DGeometry.rotateBBox(this.BBox, transform);
    } else {
        self.BBoxHit = this.BBox;
    }
};
RenderText.prototype.execute = function RTexecute() {
    if (this.attr.text !== undefined && this.attr.text !== null) {
        if (this.textList && this.textList.length > 0) {
            for (var i = 0; i < this.textList.length; i++) {
                if (this.ctx.fillStyle !== "#000000") {
                    this.ctx.fillText(
                        this.textList[i],
                        this.attr.x,
                        this.attr.y + this.textHeight * (i + 1)
                    );
                }
                if (this.ctx.strokeStyle !== "#000000") {
                    this.ctx.strokeText(
                        this.textList[i],
                        this.attr.x,
                        this.attr.y + this.textHeight * (i + 1)
                    );
                }
            }
        } else {
            if (this.ctx.fillStyle !== "#000000") {
                this.ctx.fillText(this.attr.text, this.attr.x, this.attr.y + this.height);
            }
            if (this.ctx.strokeStyle !== "#000000") {
                this.ctx.strokeText(this.attr.text, this.attr.x, this.attr.y + this.height);
            }
        }
    }
};
function extractFontFamily(fontStyle) {
    const fontFamilyRegex = /(?:[a-zA-Z]+\s)*\d+px\s(.+)/;
    const match = fontStyle.match(fontFamilyRegex);
    return match ? match[1] : null;
  }
RenderText.prototype.executePdf = function RTexecute(pdfCtx, block) {
    if (this.attr.text === undefined || this.attr.text === null) {
        return;
    }
    const { font, align, textAlign, lineGap, textBaseline, fillStyle, fill, fillColor, strokeStyle, stroke, strokeColor, underline, link, anchor, goto, strike, oblique } = this.style;
    const { text, width, x, y } = this.attr;
    const fontSize = font ? parseInt(font.replace(/[^\d.]/g, ""), 10) || 10 : 10;
    pdfCtx.fontSize(fontSize);
    if (font) {
        const fontFamily = extractFontFamily(font);
        if (fontFamily) {
            try {
                pdfCtx.font(fontFamily);
            } catch (err) {
                console.error(`Unknown font family - ${fontFamily}`);
            }
        }
    }
    const alignValue = align ?? textAlign;
    const styleObject = {
        ...(width && { width }),
        ...(lineGap && { lineGap }),
        ...(textBaseline && { textBaseline }),
        ...(alignValue && { align: alignValue }),
        ...(underline && { underline}),
        ...(link && { link }),
        ...(anchor && { destination: anchor }),
        ...(goto && { goTo: goto }),
        ...(strike && { strike }),
        ...(oblique && { oblique })
    };
    const applyText = (d, isSubText) => {
        if (isSubText) {
            pdfCtx.restore();
            pdfCtx.switchToPage(d.pageIndex);
            const { scale = [1, 1], skew = [0, 0], translate = [0, 0], rotate = [] } = this.abTransform || {};
            const [hozScale = 1, verScale = hozScale] = scale;
            const [hozSkew = 0, verSkew = hozSkew] = skew;
            const [hozMove = 0] = translate;
            pdfCtx.save();
            pdfCtx.transform(hozScale, hozSkew, verSkew, verScale, hozMove, 0);
            if (rotate.length > 0) {
                const [angle, cx = 0, cy = 0] = rotate;
                pdfCtx.translate(cx, cy);
                pdfCtx.rotate(angle * (Math.PI / 180));
                pdfCtx.translate(-cx, -cy);
            }
        }
        this.nodeExe.stylesExePdf(pdfCtx);
        if (fillStyle || fill || fillColor) {
            pdfCtx.text(d.text, d.attr.x, d.attr.y, styleObject);
        }
        if (strokeStyle || stroke || strokeColor) {
            pdfCtx.text(d.text, d.attr.x, d.attr.y, styleObject);
        }
        if (!block && !isSubText) {
            pdfCtx.translate(0, -this.abYposition);
        }
        if (isSubText) {
            pdfCtx.restore();
        }
    };
    if (this.pdfSubTexts && this.pdfSubTexts.length) {
        this.pdfSubTexts.forEach((d, i) => applyText(d, i !== 0));
    } else {
        applyText({ text, attr: { x, y: block ? y : 0 } }, false);
    }
};
RenderText.prototype.addSubText = function addSubText(configs) {
    this.pdfSubTexts = configs;
};
RenderText.prototype.in = function RTinfun(co) {
    const { x = 0, y = 0, width = 0, height = 0 } = this;
    return co.x >= x && co.x <= x + width && co.y >= y && co.y <= y + height;
};
const RenderCircle = function RenderCircle(ctx, props, styleProps) {
    const self = this;
    self.ctx = ctx;
    self.attr = Object.assign({}, props) ;
    self.style = Object.assign({}, styleProps);
    self.nodeName = "circle";
    self.stack = [self];
};
RenderCircle.prototype = new CanvasDom();
RenderCircle.prototype.constructor = RenderCircle;
RenderCircle.prototype.updateBBox = function RCupdateBBox() {
    const self = this;
    const { transform, r = 0, cx = 0, cy = 0 } = self.attr;
    const { translateX, translateY, scaleX, scaleY } = parseTransform(transform);
    self.BBox = {
        x: translateX + (cx - r) * scaleX,
        y: translateY + (cy - r) * scaleY,
        width: 2 * r * scaleX,
        height: 2 * r * scaleY,
    };
    if (transform && transform.rotate) {
        self.BBoxHit = i2DGeometry.rotateBBox(this.BBox, transform);
    } else {
        self.BBoxHit = this.BBox;
    }
    self.abYposition = cy;
};
RenderCircle.prototype.execute = function RCexecute() {
    const { r = 0, cx = 0, cy = 0 } = this.attr;
    this.ctx.beginPath();
    this.ctx.arc(cx, cy, r, 0, 2 * Math.PI, false);
    this.applyStyles();
    this.ctx.closePath();
};
RenderCircle.prototype.executePdf = function RCexecute(pdfCtx, block) {
    const { r = 0, cx = 0, cy = 0 } = this.attr;
    if (!block) {
        pdfCtx.translate(0, -this.abYposition);
    }
    pdfCtx.circle(parseInt(cx), parseInt(cy), parseInt(r));
    this.applyStylesPdf(pdfCtx);
};
RenderCircle.prototype.in = function RCinfun(co) {
    const { r = 0, cx = 0, cy = 0 } = this.attr;
    const tr = Math.sqrt((co.x - cx) * (co.x - cx) + (co.y - cy) * (co.y - cy));
    return tr <= r;
};
const RenderLine = function RenderLine(ctx, props, styleProps) {
    const self = this;
    self.ctx = ctx;
    self.attr = Object.assign({}, props) ;
    self.style = Object.assign({}, styleProps);
    self.nodeName = "line";
    self.stack = [self];
};
RenderLine.prototype = new CanvasDom();
RenderLine.prototype.constructor = RenderLine;
RenderLine.prototype.updateBBox = function RLupdateBBox() {
    const self = this;
    const { transform, x1 = 0, y1 = 0, x2 = 0, y2 = 0 } = self.attr;
    const { translateX, translateY, scaleX, scaleY } = parseTransform(transform);
    self.BBox = {
        x: translateX + (x1 < x2 ? x1 : x2) * scaleX,
        y: translateY + (y1 < y2 ? y1 : y2) * scaleY,
        width: Math.abs(x2 - x1) * scaleX,
        height: Math.abs(y2 - y1) * scaleY,
    };
    if (transform && transform.rotate) {
        self.BBoxHit = i2DGeometry.rotateBBox(this.BBox, transform);
    } else {
        self.BBoxHit = this.BBox;
    }
    self.abYposition = y1 < y2 ? y1 : y2;
};
RenderLine.prototype.execute = function RLexecute() {
    const { ctx } = this;
    const { x1 = 0, y1 = 0, x2 = 0, y2 = 0 } = this.attr;
    ctx.beginPath();
    ctx.moveTo(x1, y1);
    ctx.lineTo(x2, y2);
    this.applyStyles();
    ctx.closePath();
};
RenderLine.prototype.executePdf = function RLexecute(pdfCtx, block) {
    const { x1 = 0, y1 = 0, x2 = 0, y2 = 0 } = this.attr;
    if (!block) {
        pdfCtx.translate(0, -this.abYposition);
    }
    pdfCtx.moveTo(x1, y1);
    pdfCtx.lineTo(x2, y2);
    pdfCtx.stroke();
};
RenderLine.prototype.in = function RLinfun(co) {
    const { x1 = 0, y1 = 0, x2 = 0, y2 = 0 } = this.attr;
    return (
        parseFloat(
            i2DGeometry.getDistance(
                {
                    x: x1,
                    y: y1,
                },
                co
            ) +
                i2DGeometry.getDistance(co, {
                    x: x2,
                    y: y2,
                })
        ).toFixed(1) ===
        parseFloat(
            i2DGeometry.getDistance(
                {
                    x: x1,
                    y: y1,
                },
                {
                    x: x2,
                    y: y2,
                }
            )
        ).toFixed(1)
    );
};
function RenderPolyline(ctx, props, styleProps) {
    const self = this;
    self.ctx = ctx;
    self.attr = Object.assign({}, props) ;
    self.style = Object.assign({}, styleProps);
    self.nodeName = "polyline";
    self.stack = [self];
}
RenderPolyline.prototype = new CanvasDom();
RenderPolyline.constructor = RenderPolyline;
RenderPolyline.prototype.execute = function polylineExe() {
    const self = this;
    let d;
    if (!this.attr.points || this.attr.points.length === 0) return;
    this.ctx.beginPath();
    self.ctx.moveTo(this.attr.points[0].x, this.attr.points[0].y);
    for (var i = 1; i < this.attr.points.length; i++) {
        d = this.attr.points[i];
        self.ctx.lineTo(d.x, d.y);
    }
    this.applyStyles();
    this.ctx.closePath();
};
RenderPolyline.prototype.executePdf = function polylineExe(pdfCtx, block) {
    let d;
    if (!this.attr.points || this.attr.points.length === 0) return;
    if (!block) {
        pdfCtx.translate(0, -this.abYposition);
    }
    pdfCtx.moveTo(this.attr.points[0].x, this.attr.points[0].y);
    for (var i = 1; i < this.attr.points.length; i++) {
        d = this.attr.points[i];
        pdfCtx.lineTo(d.x, d.y);
    }
    pdfCtx.stroke();
};
RenderPolyline.prototype.updateBBox = RPolyupdateBBox;
RenderPolyline.prototype.in = function RPolyLinfun(co) {
    let flag = false;
    for (let i = 0, len = this.attr.points.length; i <= len - 2; i++) {
        const p1 = this.attr.points[i];
        const p2 = this.attr.points[i + 1];
        flag =
            flag ||
            parseFloat(
                i2DGeometry.getDistance(
                    {
                        x: p1.x,
                        y: p1.y,
                    },
                    co
                ) +
                    i2DGeometry.getDistance(co, {
                        x: p2.x,
                        y: p2.y,
                    })
            ).toFixed(1) ===
                parseFloat(
                    i2DGeometry.getDistance(
                        {
                            x: p1.x,
                            y: p1.y,
                        },
                        {
                            x: p2.x,
                            y: p2.y,
                        }
                    )
                ).toFixed(1);
    }
    return flag;
};
const RenderPath = function RenderPath(ctx, props, styleProps) {
    const self = this;
    self.ctx = ctx;
    self.angle = 0;
    self.nodeName = "path";
    self.attr = Object.assign({}, props) ;
    self.style = Object.assign({}, styleProps);
    if (self.attr.d) {
        if (CheckPathType(self.attr.d)) {
            self.path = self.attr.d;
            self.attr.d = self.attr.d.fetchPathString();
        } else {
            self.path = CreatePath(self.attr.d);
        }
        self.pathNode = new Path2D(self.attr.d);
    }
    self.stack = [self];
    return self;
};
RenderPath.prototype = new CanvasDom();
RenderPath.prototype.constructor = RenderPath;
RenderPath.prototype.updateBBox = function RPupdateBBox() {
    const self = this;
    const { transform } = self.attr;
    const { translateX, translateY, scaleX, scaleY } = parseTransform(transform);
    self.BBox = self.path
        ? self.path.BBox
        : {
              x: 0,
              y: 0,
              width: 0,
              height: 0,
          };
    self.abYposition = self.BBox.y;
    self.BBox.x = translateX + self.BBox.x * scaleX;
    self.BBox.y = translateY + self.BBox.y * scaleY;
    self.BBox.width *= scaleX;
    self.BBox.height *= scaleY;
    if (transform && transform.rotate) {
        self.BBoxHit = i2DGeometry.rotateBBox(this.BBox, transform);
    } else {
        self.BBoxHit = this.BBox;
    }
};
RenderPath.prototype.setAttr = function RPsetAttr(attr, value) {
    this.attr[attr] = value;
    if (attr === "d") {
        if (CheckPathType(value)) {
            this.path = value;
            this.attr.d = value.fetchPathString();
        } else {
            this.path = CreatePath(this.attr.d);
        }
        this.pathNode = new Path2D(this.attr.d);
    }
};
RenderPath.prototype.getPointAtLength = function RPgetPointAtLength(len) {
    return this.path
        ? this.path.getPointAtLength(len)
        : {
              x: 0,
              y: 0,
          };
};
RenderPath.prototype.getAngleAtLength = function RPgetAngleAtLength(len) {
    return this.path ? this.path.getAngleAtLength(len) : 0;
};
RenderPath.prototype.getTotalLength = function RPgetTotalLength() {
    return this.path ? this.path.getTotalLength() : 0;
};
RenderPath.prototype.execute = function RPexecute() {
    if (this.attr.d) {
        if (this.ctx.fillStyle !== "#000000" || this.ctx.strokeStyle !== "#000000") {
            if (this.ctx.fillStyle !== "#000000") {
                this.ctx.fill(this.pathNode);
            }
            if (this.ctx.strokeStyle !== "#000000") {
                this.ctx.stroke(this.pathNode);
            }
        } else {
            this.path.execute(this.ctx);
        }
    }
};
RenderPath.prototype.executePdf = function RPexecute(pdfCtx, block) {
    if (this.attr.d) {
        if (!block) {
            pdfCtx.translate(0, -this.abYposition);
        }
        pdfCtx.path(this.attr.d);
        this.applyStylesPdf(pdfCtx);
    }
};
RenderPath.prototype.applyStyles = function RPapplyStyles() {};
RenderPath.prototype.in = function RPinfun(co) {
    let flag = false;
    if (!(this.attr.d && this.pathNode)) {
        return flag;
    }
    this.ctx.save();
    this.ctx.scale(1 / this.ctx.pixelRatio, 1 / this.ctx.pixelRatio);
    flag = this.ctx.isPointInPath(this.pathNode, co.x, co.y);
    this.ctx.restore();
    return flag;
};
function polygonExe(points) {
    if (Object.prototype.toString.call(points) !== "[object Array]") {
        console.error("Points expected as array [{x: , y:}]");
        return;
    }
    if (points && points.length === 0) {
        return;
    }
    const polygon = new Path2D();
    polygon.moveTo(points[0].x, points[0].y);
    for (let i = 1; i < points.length; i++) {
        polygon.lineTo(points[i].x, points[i].y);
    }
    polygon.closePath();
    return {
        path: polygon,
        points: points,
        rawPoints: points.map((d) => {
            return [d.x, d.y];
        }),
        execute: function (ctx) {
            ctx.beginPath();
            const points = this.points;
            ctx.moveTo(points[0].x, points[0].y);
            for (let i = 1; i < points.length; i++) {
                ctx.lineTo(points[i].x, points[i].y);
            }
            ctx.closePath();
        },
    };
}
const RenderPolygon = function RenderPolygon(ctx, props, styleProps) {
    const self = this;
    self.ctx = ctx;
    self.nodeName = "polygon";
    self.attr = Object.assign({}, props) ;
    self.style = Object.assign({}, styleProps);
    self.stack = [self];
    if (self.attr.points) {
        self.polygon = polygonExe(self.attr.points);
    }
    return this;
};
RenderPolygon.prototype = new CanvasDom();
RenderPolygon.prototype.constructor = RenderPolygon;
RenderPolygon.prototype.setAttr = function RPolysetAttr(attr, value) {
    this.attr[attr] = value;
    if (attr === "points") {
        this.polygon = polygonExe(this.attr.points);
        if (this.polygon) {
            this.attr.points = this.polygon.points;
        }
    }
};
RenderPolygon.prototype.updateBBox = RPolyupdateBBox;
RenderPolygon.prototype.execute = function RPolyexecute() {
    if (!this.polygon) {
        return;
    }
    if (this.ctx.fillStyle !== "#000000" || this.ctx.strokeStyle !== "#000000") {
        if (this.ctx.fillStyle !== "#000000") {
            this.ctx.fill(this.polygon.path);
        }
        if (this.ctx.strokeStyle !== "#000000") {
            this.ctx.stroke(this.polygon.path);
        }
    } else {
        this.polygon.execute(this.ctx);
    }
};
RenderPolygon.prototype.executePdf = function RPolyexecute(pdfCtx, block) {
    if (!this.polygon) {
        return;
    }
    if (!block) {
        pdfCtx.translate(0, -this.abYposition);
    }
    pdfCtx.polygon(...this.polygon.rawPoints);
    this.applyStylesPdf(pdfCtx);
};
RenderPolygon.prototype.applyStyles = function RPolyapplyStyles() {};
RenderPolygon.prototype.in = function RPolyinfun(co) {
    let flag = false;
    if (!this.polygon) {
        return false;
    }
    this.ctx.save();
    this.ctx.scale(1 / this.ctx.pixelRatio, 1 / this.ctx.pixelRatio);
    flag = this.style.fillStyle ? this.ctx.isPointInPath(this.polygon.path, co.x, co.y) : flag;
    this.ctx.restore();
    return flag;
};
const RenderEllipse = function RenderEllipse(ctx, props, styleProps) {
    const self = this;
    self.ctx = ctx;
    self.nodeName = "ellipse";
    self.attr = Object.assign({}, props) ;
    self.style = Object.assign({}, styleProps);
    self.stack = [self];
    return this;
};
RenderEllipse.prototype = new CanvasDom();
RenderEllipse.prototype.constructor = RenderEllipse;
RenderEllipse.prototype.updateBBox = function REupdateBBox() {
    const self = this;
    const { transform, cx = 0, cy = 0, rx = 0, ry = 0 } = self.attr;
    const { translateX, translateY, scaleX, scaleY } = parseTransform(transform);
    self.BBox = {
        x: translateX + (cx - rx) * scaleX,
        y: translateY + (cy - ry) * scaleY,
        width: rx * 2 * scaleX,
        height: ry * 2 * scaleY,
    };
    if (transform && transform.rotate) {
        self.BBoxHit = i2DGeometry.rotateBBox(this.BBox, transform);
    } else {
        self.BBoxHit = this.BBox;
    }
    this.abYposition = cy - ry;
};
RenderEllipse.prototype.execute = function REexecute() {
    const ctx = this.ctx;
    const { cx = 0, cy = 0, rx = 0, ry = 0 } = this.attr;
    ctx.beginPath();
    ctx.ellipse(cx, cy, rx, ry, 0, 0, 2 * Math.PI);
    this.applyStyles();
    ctx.closePath();
};
RenderEllipse.prototype.executePdf = function REexecute(pdfCtx, block) {
    const { cx = 0, cy = 0, rx = 0, ry = 0 } = this.attr;
    if (!block) {
        pdfCtx.translate(0, -this.abYposition);
    }
    pdfCtx.ellipse(cx, cy, rx, ry);
    this.applyStylesPdf(pdfCtx);
};
RenderEllipse.prototype.in = function REinfun(co) {
    const { cx = 0, cy = 0, rx = 0, ry = 0 } = this.attr;
    return ((co.x - cx) * (co.x - cx)) / (rx * rx) + ((co.y - cy) * (co.y - cy)) / (ry * ry) <= 1;
};
const RenderRect = function RenderRect(ctx, props, styleProps) {
    const self = this;
    self.ctx = ctx;
    self.nodeName = "rect";
    self.attr = Object.assign({}, props) ;
    self.style = Object.assign({}, styleProps);
    self.stack = [self];
    return this;
};
RenderRect.prototype = new CanvasDom();
RenderRect.prototype.constructor = RenderRect;
RenderRect.prototype.updateBBox = function RRupdateBBox() {
    const self = this;
    const { transform, x = 0, y = 0, width = 0, height = 0 } = self.attr;
    const { translateX, translateY, scaleX, scaleY } = parseTransform(transform);
    self.BBox = {
        x: translateX + x * scaleX,
        y: translateY + y * scaleY,
        width: width * scaleX,
        height: height * scaleY,
    };
    if (transform && transform.rotate) {
        self.BBoxHit = i2DGeometry.rotateBBox(this.BBox, transform);
    } else {
        self.BBoxHit = this.BBox;
    }
    self.abYposition = y;
};
function renderRoundRect(ctx, attr) {
    const { x = 0, y = 0, width = 0, height = 0, rx = 0, ry = 0 } = attr;
    ctx.beginPath();
    ctx.moveTo(x + rx, y);
    ctx.lineTo(x + width - rx, y);
    ctx.quadraticCurveTo(x + width, y, x + width, y + ry);
    ctx.lineTo(x + width, y + height - ry);
    ctx.quadraticCurveTo(x + width, y + height, x + width - rx, y + height);
    ctx.lineTo(x + rx, y + height);
    ctx.quadraticCurveTo(x, y + height, x, y + height - ry);
    ctx.lineTo(x, y + ry);
    ctx.quadraticCurveTo(x, y, x + rx, y);
    ctx.closePath();
}
function renderRoundRectPdf(ctx, attr) {
    const { x = 0, y = 0, width = 0, height = 0, rx = 0, ry = 0 } = attr;
    ctx.moveTo(x + rx, y);
    ctx.lineTo(x + width - rx, y);
    ctx.quadraticCurveTo(x + width, y, x + width, y + ry);
    ctx.lineTo(x + width, y + height - ry);
    ctx.quadraticCurveTo(x + width, y + height, x + width - rx, y + height);
    ctx.lineTo(x + rx, y + height);
    ctx.quadraticCurveTo(x, y + height, x, y + height - ry);
    ctx.lineTo(x, y + ry);
    ctx.quadraticCurveTo(x, y, x + rx, y);
}
RenderRect.prototype.executePdf = function RRexecute(pdfCtx, block) {
    const { x = 0, y = 0, width = 0, height = 0, rx = 0, ry = 0 } = this.attr;
    if (!block) {
        pdfCtx.translate(0, -this.abYposition);
    }
    if (!rx && !ry) {
        pdfCtx.rect(x, y, width, height);
    } else {
        renderRoundRectPdf(pdfCtx, {
            x,
            y,
            width,
            height,
            rx,
            ry,
        });
    }
    this.applyStylesPdf(pdfCtx);
};
RenderRect.prototype.execute = function RRexecute() {
    const ctx = this.ctx;
    const { x = 0, y = 0, width = 0, height = 0, rx = 0, ry = 0 } = this.attr;
    if (ctx.fillStyle !== "#000000" || ctx.strokeStyle !== "#000000") {
        if (ctx.fillStyle !== "#000000") {
            if (!rx && !ry) {
                ctx.fillRect(x, y, width, height);
            } else {
                renderRoundRect(ctx, {
                    x,
                    y,
                    width,
                    height,
                    rx,
                    ry,
                });
                ctx.fill();
            }
        }
        if (ctx.strokeStyle !== "#000000") {
            if (!rx && !ry) {
                ctx.strokeRect(x, y, width, height);
            } else {
                renderRoundRect(ctx, {
                    x,
                    y,
                    width,
                    height,
                    rx,
                    ry,
                });
                ctx.stroke();
            }
        }
    }
};
RenderRect.prototype.in = function RRinfun(co) {
    const { x = 0, y = 0, width = 0, height = 0 } = this.attr;
    return co.x >= x && co.x <= x + width && co.y >= y && co.y <= y + height;
};
const RenderGroup = function RenderGroup(ctx, props, styleProps) {
    const self = this;
    self.nodeName = "g";
    self.ctx = ctx;
    self.attr = Object.assign({}, props) ;
    self.style = Object.assign({}, styleProps);
    self.stack = new Array(0);
    return this;
};
RenderGroup.prototype = new CanvasDom();
RenderGroup.prototype.constructor = RenderGroup;
RenderGroup.prototype.updateBBox = function RGupdateBBox(children) {
    if (!children || children.length === 0) {
        this.BBox = { x: 0, y: 0, width: 0, height: 0 };
        this.BBoxHit = this.BBox;
        return;
    }
    let minf = Math.min;
    let maxf = Math.max;
    let absf= Math.abs;
    const { transform } = this.attr;
    const { translateX, translateY, scaleX, scaleY } = parseTransform(transform);
    let { x: minX, y: minY, width, height } = children[0].dom.BBoxHit;
    let maxX = minX + width;
    let maxY = minY + height;
    for (let i = 1; i < children.length; i++) {
        const { x, y, width, height } = children[i].dom.BBoxHit;
        const currentMaxX = x + width;
        const currentMaxY = y + height;
        minX = minf(minX, x);
        minY = minf(minY, y);
        maxX = maxf(maxX, currentMaxX);
        maxY = maxf(maxY, currentMaxY);
    }
    this.BBox = {
        x: translateX + minX * scaleX,
        y: translateY + minY * scaleY,
        width: absf(maxX - minX) * scaleX,
        height: absf(maxY - minY) * scaleY,
    };
    this.BBoxHit = this.attr.transform && this.attr.transform.rotate
        ? i2DGeometry.rotateBBox(this.BBox, this.attr.transform)
        : this.BBox;
};
RenderGroup.prototype.child = function RGchild(obj) {
    const self = this;
    const objLocal = obj;
    if (objLocal instanceof CanvasNodeExe) {
        objLocal.dom.parent = self;
        objLocal.vDomIndex = self.vDomIndex;
        self.stack[self.stack.length] = objLocal;
    } else if (objLocal instanceof CanvasCollection) {
        objLocal.stack.forEach((d) => {
            d.dom.parent = self;
            d.vDomIndex = self.vDomIndex;
            self.stack[self.stack.length] = d;
        });
    } else {
        console.log("wrong Object");
    }
};
RenderGroup.prototype.in = function RGinfun(coOr) {
    const self = this;
    const co = {
        x: coOr.x,
        y: coOr.y,
    };
    const { BBox } = this;
    const { transform } = self.attr;
    const { translateX, translateY, scaleX, scaleY } = parseTransform(transform);
    return (
        co.x >= (BBox.x - translateX) / scaleX &&
        co.x <= (BBox.x - translateX + BBox.width) / scaleX &&
        co.y >= (BBox.y - translateY) / scaleY &&
        co.y <= (BBox.y - translateY + BBox.height) / scaleY
    );
};
const CanvasNodeExe = function CanvasNodeExe(context, config, id, vDomIndex) {
    this.id = id;
    this.nodeName = config.el;
    this.nodeType = "CANVAS";
    this.children = prepArrayProxy([], this, true);
    this.events = {};
    this.ctx = context;
    this.vDomIndex = vDomIndex;
    this.bbox = config.bbox !== undefined ? config.bbox : true;
    this.BBoxUpdate = true;
    this.block = false;
    this.style = prepObjProxyCanvas('style', {}, this, true);
    this.attr = prepObjProxyCanvas('attr', {}, this, true);
    if (config.style) {
        this.setStyle(config.style);
    }
    if (config.attr) {
        this.setAttr(config.attr);
    }
    switch (config.el) {
        case "circle":
            this.dom = new RenderCircle(this.ctx, this.attr, this.style);
            break;
        case "rect":
            this.dom = new RenderRect(this.ctx, this.attr, this.style);
            break;
        case "line":
            this.dom = new RenderLine(this.ctx, this.attr, this.style);
            break;
        case "polyline":
            this.dom = new RenderPolyline(this.ctx, this.attr, this.style);
            break;
        case "path":
            this.dom = new RenderPath(this.ctx, this.attr, this.style);
            break;
        case "group":
        case "g":
            this.dom = new RenderGroup(this.ctx, this.attr, this.style);
            break;
        case "text":
            this.dom = new RenderText(this.ctx, this.attr, this.style);
            break;
        case "image":
            this.dom = new RenderImage(
                this.ctx,
                this.attr,
                this.style,
                config.onload,
                config.onerror,
                this
            );
            break;
        case "polygon":
            this.dom = new RenderPolygon(this.ctx, this.attr, this.style);
            break;
        case "ellipse":
            this.dom = new RenderEllipse(this.ctx, this.attr, this.style);
            break;
        default:
            this.dom = new DummyDom(this.ctx, this.attr, this.style);
            this.bbox = false;
            this.BBoxUpdate = false;
            break;
    }
    this.dom.nodeExe = this;
};
CanvasNodeExe.prototype = new NodePrototype();
CanvasNodeExe.prototype.node = function Cnode() {
    this.updateBBox();
    return this.dom;
};
CanvasNodeExe.prototype.stylesExe = function CstylesExe() {
    const { style, ctx, dom, dataObj } = this;
    this.resolvedStyle = {};
    for (let key in style) {
        let value = style[key];
        if (typeof value === "function") {
            value = value.call(this, dataObj);
        } else if (typeof value === "object" && value !== null) {
            let isSpecialObject = value instanceof CanvasGradient ||
                value instanceof CanvasPattern ||
                value instanceof CanvasClipping ||
                value instanceof CanvasMask;
            if (isSpecialObject) {
                value = value.exe(ctx, dom.BBox);
            }
        } else if (typeof value !== 'string' && typeof value !== 'number') {
            console.log("Unknown Style");
            continue;
        }
        const mappedKey = canvasStyleMapper[key] || key;
        if (typeof ctx[mappedKey] === "function") {
            ctx[mappedKey](value);
        } else {
            ctx[mappedKey] = value;
        }
        this.resolvedStyle[mappedKey] = value;
    }
};
CanvasNodeExe.prototype.stylesExePdf = function CstylesExe(pdfCtx) {
    if (!pdfCtx) return;
    const style = this.style;
    let value;
    for (let key in style) {
        if (typeof style[key] === "string" || typeof style[key] === "number" ||  typeof style[key] === 'boolean') {
            value = style[key];
        } else if (typeof style[key] === "object") {
            if (
                style[key] instanceof CanvasGradient ||
                style[key] instanceof CanvasPattern ||
                style[key] instanceof CanvasClipping ||
                style[key] instanceof CanvasMask
            ) {
                value = style[key].exePdf(pdfCtx, this.dom.BBox, this.dom.abTransform);
            } else {
                value = style[key];
            }
        } else if (typeof style[key] === "function") {
            style[key] = style[key].call(this, this.dataObj);
            value = style[key];
        } else {
            console.log("unkonwn Style");
        }
        if (pdfStyleMapper[key]) {
            value = pdfStyleMapper[key].getValue(value);
            key = pdfStyleMapper[key].prop;
        }
        if ((key === "fillColor" || key === "strokeColor") && typeof value === "string") {
            value = colorMap$1.colorToRGBPdf(value);
        }
        if (['underline', 'strike', 'goto', 'link', 'anchor', 'oblique'].includes(key)) {
            continue;
        }
        if (typeof pdfCtx[key] !== "function") {
            pdfCtx[key] = value;
        } else if (typeof pdfCtx[key] === "function") {
            pdfCtx[key](value);
        } else {
            console.log("junk comp");
        }
    }
};
CanvasNodeExe.prototype.attributesExe = function CattributesExe() {
    this.dom.render(this.attr);
};
CanvasNodeExe.prototype.attributesExePdf = function CattributesExe(pdfCtx, block) {
    this.dom.renderPdf(this.attr, pdfCtx, block);
};
CanvasNodeExe.prototype.setStyle = function CsetStyle(attr, value) {
    if (arguments.length === 2) {
        this.style[attr] = value;
    } else if (arguments.length === 1 && typeof attr === "object") {
        const styleKeys = Object.keys(attr);
        for (let i = 0, len = styleKeys.length; i < len; i += 1) {
            this.style[styleKeys[i]] = attr[styleKeys[i]];
        }
    }
    return this;
};
CanvasNodeExe.prototype.setAttr = function CsetAttr(attr, value) {
    if (arguments.length === 2) {
        this.attr[attr] = value;
    } else if (arguments.length === 1 && typeof attr === "object") {
        const keys = Object.keys(attr);
        for (let i = 0; i < keys.length; i += 1) {
            this.attr[keys[i]] = attr[keys[i]];
        }
    }
    return this;
};
CanvasNodeExe.prototype.rotate = function Crotate(angleXY) {
    if (!this.attr.transform) {
        this.attr.transform = prepObjProxyCanvas('transform', {}, this, true);
    }
    this.attr.transform.rotate = angleXY;
    return this;
};
CanvasNodeExe.prototype.scale = function Cscale(XY) {
    if (!this.attr.transform) {
        this.attr.transform = prepObjProxyCanvas('transform', {}, this, true);
    }
    this.attr.transform.scale = XY;
    return this;
};
CanvasNodeExe.prototype.translate = function Ctranslate(XY) {
    if (!this.attr.transform) {
        this.attr.transform = prepObjProxyCanvas('transform', {}, this, true);
    }
    this.attr.transform.translate = XY;
    return this;
};
CanvasNodeExe.prototype.skew = function Cskew(XY) {
    if (!this.attr.transform) {
        this.attr.transform = prepObjProxyCanvas('transform', {}, this, true);
    }
    this.attr.transform.skew = XY;
    return this;
};
CanvasNodeExe.prototype.execute = function Cexecute() {
    if (this.style.display === "none" || this.deleted) {
        return false
    }
    this.ctx.save();
    this.stylesExe();
    this.attributesExe();
    if (this.dom instanceof RenderGroup) {
        for (let i = 0, len = this.children.length; i < len; i += 1) {
            this.children[i].execute();
        }
    }
    this.ctx.restore();
};
CanvasNodeExe.prototype.executePdf = function Cexecute(pdfCtx, block) {
    if (this.style.display === "none") {
        return;
    }
    if (!(this.dom instanceof RenderGroup) || block || this.block) {
        pdfCtx.switchToPage(this.dom.pageIndex) ;
        pdfCtx.save();
        this.stylesExePdf(pdfCtx);
        this.attributesExePdf(pdfCtx, block);
    }
    if (this.dom instanceof RenderGroup) {
        for (let i = 0, len = this.children.length; i < len; i += 1) {
            this.children[i].executePdf(pdfCtx, block || this.block);
        }
    }
    if (!(this.dom instanceof RenderGroup) || block || this.block) {
        pdfCtx.restore();
    }
};
CanvasNodeExe.prototype.prependChild = function child(childrens) {
    const self = this;
    const childrensLocal = childrens;
    if (self.dom instanceof RenderGroup) {
        for (let i = 0; i < childrensLocal.length; i += 1) {
            childrensLocal[i].dom.parent = self;
            childrensLocal[i].vDomIndex = self.vDomIndex;
            self.children.unshift(childrensLocal[i]);
        }
    } else {
        console.error("Trying to insert child to nonGroup Element");
    }
    return self;
};
CanvasNodeExe.prototype.child = function child(childrens) {
    const self = this;
    const childrensLocal = childrens;
    if (self.dom instanceof RenderGroup) {
        for (let i = 0; i < childrensLocal.length; i += 1) {
            childrensLocal[i].dom.parent = self;
            childrensLocal[i].setVDomIndex(self.vDomIndex);
            self.children[self.children.length] = childrensLocal[i];
        }
    } else {
        console.error("Trying to insert child to nonGroup Element");
    }
    return self;
};
CanvasNodeExe.prototype.setVDomIndex = function (vDomIndex) {
    this.vDomIndex = vDomIndex;
    for (let i = 0, len = this.children.length; i < len; i += 1) {
        if (this.children[i] && this.children[i].setVDomIndex) {
            this.children[i].setVDomIndex(vDomIndex);
        }
    }
};
CanvasNodeExe.prototype.setPdfPageIndex = function (pageIndex) {
    this.dom.pageIndex = pageIndex;
    for (let i = 0, len = this.children.length; i < len; i += 1) {
        if (this.children[i] && this.children[i].setPdfPageIndex) {
            this.children[i].setPdfPageIndex(pageIndex);
        }
    }
};
CanvasNodeExe.prototype.updateBBox = function CupdateBBox() {
    let status;
    if (this.bbox || this.ctx.type_ === "pdf") {
        for (let i = 0, len = this.children.length; i < len; i += 1) {
            if (this.children[i] && this.children[i].updateBBox) {
                status = this.children[i].updateBBox() || status;
            }
        }
        if (this.BBoxUpdate || status) {
            this.dom.updateBBox(this.children);
            this.BBoxUpdate = false;
            return true;
        }
    }
    return false;
};
CanvasNodeExe.prototype.updateABBox = function updateABBox(transform = { translate: [0, 0] }, pageDim = { pageHeight: 0, top: 0, bottom: 0 }) {
    let { pageHeight, top, bottom } = pageDim;
    const localTransform = this.attr.transform || { translate: [0, 0] };
    const abTransform = {
        translate: [
            transform.translate[0] + localTransform.translate[0],
            transform.translate[1] + localTransform.translate[1],
        ],
    };
    this.dom.abTransform = abTransform;
    if (this.dom instanceof RenderGroup) {
        this.dom.pageIndex = Math.floor(abTransform.translate[1] / ((pageHeight - top - bottom) || 1));
        for (let i = 0, len = this.children.length; i < len && this.children[i]; i += 1) {
            this.children[i].updateABBox(abTransform, pageDim);
        }
    } else {
        this.dom.pageIndex = Math.floor((abTransform.translate[1] + (this.dom.abYposition || 0)) / ((pageHeight - top - bottom) || 1));
    }
};
CanvasNodeExe.prototype.in = function Cinfun(co) {
    return this.dom.in(co);
};
CanvasNodeExe.prototype.on = function Con(eventType, hndlr) {
    const self = this;
    if (!this.events) {
        this.events = {};
    }
    if (!hndlr && this.events[eventType]) {
        delete this.events[eventType];
    } else if (hndlr) {
        if (typeof hndlr === "function") {
            const hnd = hndlr.bind(self);
            this.events[eventType] = function (event) {
                hnd(event);
            };
        } else if (typeof hndlr === "object") {
            this.events[eventType] = hndlr;
            if (
                hndlr.constructor === zoomInstance.constructor ||
                hndlr.constructor === dragInstance.constructor
            ) {
                hndlr.bindMethods(this);
            }
        }
    }
    return this;
};
CanvasNodeExe.prototype.animatePathTo = AnimatePathTo;
CanvasNodeExe.prototype.morphTo = MorphTo;
CanvasNodeExe.prototype.vDomIndex = null;
CanvasNodeExe.prototype.createRadialGradient = createRadialGradient;
CanvasNodeExe.prototype.createLinearGradient = createLinearGradient;
CanvasNodeExe.prototype.createEls = function CcreateEls(data, config) {
    const e = new CanvasCollection(
        {
            type: "CANVAS",
            ctx: this.dom.ctx,
        },
        data,
        config,
        this.vDomIndex
    );
    this.child(e.stack);
    return e;
};
CanvasNodeExe.prototype.text = function Ctext(value) {
    if (this.dom instanceof RenderText) {
        this.setAttr('text', value);
    }
    return this;
};
CanvasNodeExe.prototype.createEl = function CcreateEl(config) {
    const e = new CanvasNodeExe(this.dom.ctx, config, domId(), this.vDomIndex);
    this.child([e]);
    return e;
};
CanvasNodeExe.prototype.remove = function Cremove() {
    if (this.dom && this.dom.parent) {
        this.dom.parent.removeChild(this);
    }
};
CanvasNodeExe.prototype.removeChild = function CremoveChild(obj) {
    const index = this.children.indexOf(obj);
    if (index !== -1) {
        const removedNode = this.children.splice(index, 1)[0];
        markForDeletion(removedNode);
    }
};
function markForDeletion(removedNode) {
    removedNode.deleted = true;
    if (removedNode.dom instanceof RenderGroup && !removedNode.deleted) {
        for(let i = 0; i < removedNode.children.length; i++) {
            markForDeletion(removedNode[i]);
        }
    }
}
CanvasNodeExe.prototype.getBBox = function () {
    return {
        x: this.dom.BBox.x,
        y: this.dom.BBox.y,
        width: this.dom.BBox.width,
        height: this.dom.BBox.height,
    };
};
CanvasNodeExe.prototype.getPixels = function () {
    const imageData = this.ctx.getImageData(
        this.dom.BBox.x,
        this.dom.BBox.y,
        this.dom.BBox.width,
        this.dom.BBox.height
    );
    const pixelInstance = new PixelObject(imageData, this.dom.BBox.width, this.dom.BBox.height);
    return pixelInstance;
};
CanvasNodeExe.prototype.putPixels = function (pixels) {
    if (!(pixels instanceof PixelObject)) {
        return;
    }
    return this.ctx.putImageData(pixels.imageData, this.dom.BBox.x, this.dom.BBox.y);
};
function GetCanvasImgInstance(width, height) {
    const canvas = document.createElement("canvas");
    canvas.setAttribute("height", height);
    canvas.setAttribute("width", width);
    this.canvas = canvas;
    this.context = this.canvas.getContext("2d");
}
GetCanvasImgInstance.prototype.setAttr = function (attr, value) {
    if (attr === "height") {
        this.canvas.setAttribute("height", value);
    } else if (attr === "width") {
        this.canvas.setAttribute("width", value);
    }
};
function textureImageInstance(self, url) {
    const imageIns = new Image();
    imageIns.crossOrigin = "anonymous";
    imageIns.src = url;
    if (!self) {
        return imageIns;
    }
    imageIns.onload = function onload() {
        if (!self) {
            return;
        }
        if (self.attr) {
            const width =
                !self.attr.width && !self.attr.height
                    ? this.naturalWidth
                    : self.attr.width
                    ? self.attr.width
                    : (self.attr.height / this.naturalHeight) * this.naturalWidth;
            const height =
                !self.attr.width && !self.attr.height
                    ? this.naturalHeight
                    : self.attr.height
                    ? self.attr.height
                    : (self.attr.width / this.naturalWidth) * this.naturalHeight;
            self.attr.height = height;
            self.attr.width = width;
        }
        if (self instanceof RenderTexture) {
            self.setSize(self.attr.width, self.attr.height);
        }
        self.imageObj = this;
        if (self.attr && self.attr.onload && typeof self.attr.onload === "function") {
            self.attr.onload.call(self, self.image);
        }
        if (self.asyncOnLoad && typeof self.asyncOnLoad === "function") {
            self.asyncOnLoad(self.image);
        }
        postProcess(self);
    };
    imageIns.onerror = function onerror(error) {
        console.error(error);
        if (self.nodeExe.attr.onerror && typeof self.nodeExe.attr.onerror === "function") {
            self.nodeExe.attr.onerror.call(self.nodeExe, error);
        }
        if (self.asyncOnLoad && typeof self.asyncOnLoad === "function") {
            self.asyncOnLoad(self.image);
        }
    };
    return imageIns;
}
function postProcess(self) {
    if (!self.imageObj) {
        return;
    }
    if (self.attr && self.attr.clip) {
        clipExec(self);
    } else {
        self.execute();
    }
    if (self.attr && self.attr.filter) {
        filterExec(self);
    }
    queueInstance.vDomChanged(self.nodeExe.vDomIndex);
}
function clipExec(self) {
    const ctxX = self.ctx;
    const { clip, width = 0, height = 0 } = self.attr;
    const { sx = 0, sy = 0, swidth = width, sheight = height } = clip;
    ctxX.clearRect(0, 0, width, height);
    ctxX.drawImage(self.imageObj, sx, sy, swidth, sheight, 0, 0, width, height);
}
function filterExec(self) {
    const ctxX = self.ctx;
    const { width = 0, height = 0 } = self.attr;
    const pixels = ctxX.getImageData(0, 0, width, height);
    ctxX.putImageData(self.attr.filter(pixels), 0, 0);
}
function RenderTexture(nodeExe, config = {}) {
    const self = this;
    self.attr = prepObjProxyCanvas('attr', config.attr || {}, nodeExe, true);
    self.style = prepObjProxyCanvas('style', config.style || {}, nodeExe);
    const scale = self.attr.scale || 1;
    self.rImageObj = new GetCanvasImgInstance(
        (self.attr.width || 1) * scale,
        (self.attr.height || 1) * scale
    );
    self.ctx = self.rImageObj.context;
    self.domEl = self.rImageObj.canvas;
    self.imageArray = [];
    self.seekIndex = 0;
    self.nodeName = "Sprite";
    self.nodeExe = nodeExe;
    for (const key in self.attr) {
        self.setAttr(key, self.attr[key]);
    }
}
RenderTexture.prototype = new NodePrototype();
RenderTexture.prototype.constructor = RenderTexture;
RenderTexture.prototype.setSize = function (w, h) {
    const scale = this.attr.scale || 1;
    this.rImageObj.setAttr("width", w * scale);
    this.rImageObj.setAttr("height", h * scale);
    postProcess(this);
};
RenderTexture.prototype.setAttr = function RSsetAttr(attr, value) {
    const self = this;
    if (attr === "src") {
        if (Array.isArray(value)) {
            const srcPromises = value.map(function (d) {
                return new Promise((resolve, reject) => {
                    const imageInstance = textureImageInstance(null, d);
                    imageInstance.onload = function () {
                        resolve(this);
                    };
                    imageInstance.onerror = function (error) {
                        reject(error);
                    };
                });
            });
            Promise.all(srcPromises).then(function (images) {
                self.image = images;
                self.imageObj = images[self.seekIndex];
                if (self.attr && self.attr.onload && typeof self.attr.onload === "function") {
                    self.attr.onload.call(self, images);
                }
                if (self.asyncOnLoad && typeof self.asyncOnLoad === "function") {
                    self.asyncOnLoad(images);
                }
                postProcess(self);
            });
        } else if (typeof value === "string") {
            if (!self.image) {
                self.image = textureImageInstance(self, value);
            }
            if (self.image.src !== value) {
                self.image.src = value;
            }
        } else if (
            value instanceof HTMLImageElement ||
            value instanceof SVGImageElement ||
            value instanceof HTMLCanvasElement
        ) {
            self.imageObj = value;
            self.attr.height = self.attr.height ? self.attr.height : value.height;
            self.attr.width = self.attr.width ? self.attr.width : value.width;
            postProcess(self);
        } else if (value instanceof CanvasNodeExe || value instanceof RenderTexture) {
            self.imageObj = value.domEl;
            self.attr.height = self.attr.height ? self.attr.height : value.attr.height;
            self.attr.width = self.attr.width ? self.attr.width : value.attr.width;
            postProcess(self);
        }
    }
    this.attr[attr] = value;
    if (attr === "height" || attr === "width") {
        this.rImageObj.setAttr(attr, value);
        postProcess(self);
    }
    if (attr === "clip" || attr === "filter") {
        postProcess(self);
    }
    return self;
};
RenderTexture.prototype.onLoad = function (exec) {
    this.asyncOnLoad = exec;
};
RenderTexture.prototype.clone = function () {
    const attr = Object.assign({}, this.attr);
    const style = Object.assign({}, this.style);
    attr.src = this;
    return new RenderTexture(this.nodeExe, {
        attr: attr,
        style: style,
    });
};
RenderTexture.prototype.execute = function RIexecute() {
    const { width = 0, height = 0 } = this.attr;
    const draw = this.attr.draw || {};
    const scale = this.attr.scale || 1;
    this.ctx.clearRect(0, 0, width * scale, height * scale);
    this.ctx.drawImage(
        this.imageObj,
        draw.x || 0,
        draw.y || 0,
        (draw.width || width) * scale,
        (draw.height || height) * scale
    );
};
RenderTexture.prototype.exportAsDataUrl = function (type = "image/png", encoderOptions = 1) {
    if (this.rImageObj) {
        return this.rImageObj.canvas.toDataURL(type, encoderOptions);
    }
    return this;
};
RenderTexture.prototype.next = function (index) {
    if (!Array.isArray(this.image)) {
        return;
    }
    if (index < this.image.length && index >= 0) {
        this.seekIndex = index;
    } else if (this.seekIndex < this.image.length - 1) {
        this.seekIndex++;
    }
    this.imageObj = this.image[this.seekIndex];
    postProcess(this);
};
function createPage(ctx, vDomIndex) {
    const root = new CanvasNodeExe(
        ctx,
        {
            el: "g",
            attr: {
                id: "rootNode",
            },
        },
        domId(),
        vDomIndex
    );
    root.setStyle = function (prop, value) {
        this.domEl.style[prop] = value;
    };
    root.addDependentLayer = function (layer) {
        if (!(layer instanceof CanvasNodeExe)) {
            return;
        }
        const depId = layer.attr.id ? layer.attr.id : "dep-" + Math.ceil(Math.random() * 1000);
        layer.setAttr("id", depId);
        layer.vDomIndex = this.vDomIndex + ":" + depId;
        this.prependChild([layer]);
    };
    root.toDataURL = function (p) {
        return this.domEl.toDataURL(p);
    };
    root.invokeOnChange = function () {};
    root.setViewBox = function () {};
    root.setContext = function (prop, value) {
        if (this.ctx[prop] && typeof this.ctx[prop] === "function") {
            this.ctx[prop].apply(null, value);
        } else if (this.ctx[prop]) {
            this.ctx[prop] = value;
        }
    };
    root.createPattern = createCanvasPattern;
    root.createClip = createCanvasClip;
    root.createMask = createCanvasMask;
    root.clear = function () {};
    root.flush = function () {
        this.children = prepArrayProxy([], this, true);
        queueInstance.vDomChanged(this.vDomIndex);
    };
    root.update = function executeUpdate() {
        this.execute();
    };
    root.exportPdf = function (doc) {
        const margin = this.margin || 0;
        const { top = margin, bottom = margin } = this.margins || { };
        const pageHeight = this.height;
        const abPageHeight = (pageHeight - top - bottom);
        this.updateABBox(undefined, { pageHeight, top, bottom});
        this.updateBBox();
        let leafNodes = getAllLeafs(this).sort((a, b) => {
                const aTrans = a.dom && a.dom.abTransform ? a.dom.abTransform : { translate: [0, 0] };
                const bTrans = b.dom && b.dom.abTransform ? b.dom.abTransform : { translate: [0, 0] };
                return (
                    aTrans.translate[1] +
                    a.dom.abYposition -
                    (bTrans.translate[1] + b.dom.abYposition)
                );
            });
        let pages = [];
        const pageRage = doc.bufferedPageRange();
        let pageNumber = pageRage.count;
        leafNodes.forEach((node) => {
            const abTransform = node.dom.abTransform;
            const elHight = node.dom.BBox.height || 0;
            const elY = node.dom.abYposition || 0;
            let newPageIndex= pageNumber + node.dom.pageIndex;
            let currentPageIndex = newPageIndex;
            let posY = calculatePosY(abTransform, elY, (node.dom.pageIndex * abPageHeight));
            if ((posY + elHight) > abPageHeight ) {
                if (node.dom instanceof RenderText) {
                    let pagesCount = splitTextNode(node, posY, newPageIndex);
                    while(pagesCount >= 1) {
                        addNewPage.call(this, newPageIndex);
                        newPageIndex += 1;
                        pagesCount--;
                    }
                }
            } else {
                addNewPage.call(this, newPageIndex);
            }
            node.dom.abTransform = {
                translate: [abTransform.translate[0], posY + top],
            };
            node.dom.pageIndex = currentPageIndex;
        });
        this.executePdf(doc);
        function addNewPage(newPageIndex) {
            if (pages[newPageIndex]) {
                return;
            }
            pages[newPageIndex] = true;
            doc.addPage({
                margin: this.margin,
                margins: this.margins,
                size: [this.width, this.height],
            });
            if (this.pageTemplate) {
                this.pageTemplate.setPdfPageIndex(newPageIndex);
                this.pageTemplate.executePdf(doc);
            }
        }
        function splitTextNode(node, posY, pIndex) {
            let elHeight = node.dom.BBox.height || 0;
            let availablePageHeight = (abPageHeight - posY);
            let text = node.attr.text || "";
            let subStrs = [];
            let subPage = 0;
            let currentAvailableHeight = availablePageHeight;
            let prevIndex = 0;
            posY = 0;
            if (!text || elHeight <= 0) {
                console.warn("Invalid text or element height.");
                return 0;
            }
            while(prevIndex < text.length) {
                elHeight = ((elHeight === node.dom.textHeight) ? currentAvailableHeight : elHeight);
                let percent = currentAvailableHeight / elHeight;
                const index = Math.floor(text.length * percent);
                if (index <= prevIndex) {
                    console.warn("Text splitting encountered an infinite loop.");
                    break;
                }
                subStrs.push({
                    text: text.substring(prevIndex, index),
                    attr: {
                        x: node.getAttr('x'),
                        y: posY
                    },
                    pageIndex: pIndex + subPage
                });
                prevIndex = index;
                currentAvailableHeight += abPageHeight;
                subPage++;
                posY = top;
            }
            node.dom.addSubText(subStrs);
            return subPage;
        }
        function calculatePosY(abTransform, elY, runningY) {
            return (abTransform.translate[1] + elY - runningY);
        }
    };
    root.addTemplate = function (template) {
        this.pageTemplate = template;
        this.pageTemplate.updateBBox();
        this.pageTemplate.updateABBox();
        updateABBoxOfPdfTemplate(this.pageTemplate);
    };
    root.createTexture = function (config = {}) {
        return new RenderTexture(this, config);
    };
    root.createAsyncTexture = function (config) {
        return new Promise((resolve) => {
            const textureInstance = new RenderTexture(this, config);
            textureInstance.onLoad(function () {
                resolve(textureInstance);
            });
        });
    };
    return root;
}
function getAllLeafs(node) {
    const leaves = [];
    let queue = [node];
    while (queue.length > 0) {
        const currentNode = queue.shift();
        const isLeaf = (currentNode.children &&
                        currentNode.children.length === 0 &&
                        currentNode.nodeName !== "g" &&
                        currentNode.nodeName !== "group");
        if (isLeaf) {
            leaves.push(currentNode);
        } else if (currentNode.children) {
            queue.push(...currentNode.children);
        }
    }
    return leaves;
}
function updateABBoxOfPdfTemplate(root) {
    const leafNodes = getAllLeafs(root);
    leafNodes.forEach((node) => {
        const abTransform = node.dom.abTransform;
        const elY = node.dom.abYposition || 0;
        const posY = abTransform.translate[1] + elY || 0;
        node.dom.abTransform = {
            translate: [abTransform.translate[0], posY],
        };
    });
}
function canvasLayer(container, contextConfig = {}, layerSettings = {}) {
    const res = typeof container === 'string' ? document.querySelector(container) : container instanceof HTMLElement ? container : null;
    let height = res?.clientHeight || 0;
    let width = res?.clientWidth || 0;
    const layer = document.createElement("canvas");
    const ctx = layer.getContext("2d", contextConfig);
    let ratio = getPixlRatio(ctx);
    ctx.pixelRatio = ratio;
    let onClear = function (ctx) {
        ctx.clearRect(0, 0, width * ratio, height * ratio);
    };
    layer.setAttribute("height", height * ratio);
    layer.setAttribute("width", width * ratio);
    layer.style.height = `${height}px`;
    layer.style.width = `${width}px`;
    let { enableEvents = true, autoUpdate = true, enableResize = true } = layerSettings;
    let vDomInstance;
    let vDomIndex = 999999;
    let cHeight;
    let cWidth;
    let resizeCall;
    let onChangeExe;
    if (res) {
        res.appendChild(layer);
        vDomInstance = new VDom();
        if (autoUpdate) {
            vDomIndex = queueInstance.addVdom(vDomInstance);
        }
    } else {
        enableEvents = false;
    }
    const root = createPage(ctx, vDomIndex);
    const resize = function (cr) {
        if (
            (container instanceof HTMLElement && !document.body.contains(container)) ||
            (container instanceof String && !document.querySelector(container))
        ) {
            layerResizeUnBind(root);
            root.destroy();
            return;
        }
        height = cHeight || cr.height;
        width = cWidth || cr.width;
        root.width = width;
        root.height = height;
        updateLayerDimension(root.domEl, width, height);
        if (resizeCall) {
            resizeCall();
        }
        root.execute();
    };
    if (vDomInstance) {
        vDomInstance.rootNode(root);
    }
    const execute = root.execute.bind(root);
    root.container = res;
    root.domEl = layer;
    root.height = height;
    root.width = width;
    root.type = "CANVAS";
    root.ctx = ctx;
    root.clear = function () {
        onClear(ctx);
    };
    root.setAttr = function (prop, value) {
        if (prop === "viewBox") {
            this.setViewBox.apply(this, value.split(","));
        }
        layer.setAttribute(prop, value);
        this.attr[prop] = value;
    };
    root.setClear = function (exe) {
        onClear = exe;
    };
    root.setSize = function (width_, height_) {
        cHeight = height_;
        cWidth = width_;
        width = width_;
        height = height_;
        this.width = width;
        this.height = height;
        updateLayerDimension(this.domEl, width, height);
        this.execute();
    };
    root.onResize = function (exec) {
        resizeCall = exec;
    };
    root.getPixels = function (x, y, width_, height_) {
        const imageData = this.ctx.getImageData(x, y, width_, height_);
        const pixelInstance = new PixelObject(imageData, width_, height_);
        return pixelInstance;
    };
    root.putPixels = function (Pixels, x, y) {
        if (!(Pixels instanceof PixelObject)) {
            return;
        }
        return this.ctx.putImageData(Pixels.imageData, x, y);
    };
    root.execute = function executeExe() {
        onClear(ctx);
        ctx.setTransform(ratio, 0, 0, ratio, 0, 0);
        this.updateBBox();
        execute();
        if (onChangeExe && this.stateModified) {
            onChangeExe();
        }
        this.stateModified = false;
    };
    root.onChange = function (exec) {
        onChangeExe = exec;
    };
    const updateLayerDimension = function (layer, width, height) {
        layer.setAttribute("height", height * ratio);
        layer.setAttribute("width", width * ratio);
        layer.style.height = `${height}px`;
        layer.style.width = `${width}px`;
    };
    root.setPixelRatio = function (val) {
        ratio = val;
        this.ctx.pixelRatio = ratio;
        updateLayerDimension(this.domEl, this.width, this.height);
    };
    root.destroy = function () {
        const res = document.body.contains(this.container);
        if (res && this.container.contains(this.domEl)) {
            this.container.removeChild(this.domEl);
        }
        queueInstance.removeVdom(vDomIndex);
        layerResizeUnBind(root, resize);
    };
    if (enableEvents) {
        const eventsInstance = new Events(root);
        layer.addEventListener("mousemove", (e) => {
            e.preventDefault();
            eventsInstance.mousemoveCheck(e);
        });
        layer.addEventListener("mousedown", (e) => {
            eventsInstance.mousedownCheck(e);
        });
        layer.addEventListener("mouseup", (e) => {
            eventsInstance.mouseupCheck(e);
        });
        layer.addEventListener("mouseleave", (e) => {
            eventsInstance.mouseleaveCheck(e);
        });
        layer.addEventListener("contextmenu", (e) => {
            eventsInstance.contextmenuCheck(e);
        });
        layer.addEventListener("touchstart", (e) => {
            eventsInstance.touchstartCheck(e);
        });
        layer.addEventListener("touchend", (e) => {
            eventsInstance.touchendCheck(e);
        });
        layer.addEventListener("touchmove", (e) => {
            e.preventDefault();
            eventsInstance.touchmoveCheck(e);
        });
        layer.addEventListener("touchcancel", (e) => {
            eventsInstance.touchcancelCheck(e);
        });
        layer.addEventListener("wheel", (e) => {
            eventsInstance.wheelEventCheck(e);
        });
        layer.addEventListener("pointerdown", (e) => {
            eventsInstance.addPointer(e);
            eventsInstance.pointerdownCheck(e);
        });
        layer.addEventListener("pointerup", (e) => {
            eventsInstance.removePointer(e);
            eventsInstance.pointerupCheck(e);
        });
        layer.addEventListener("pointermove", (e) => {
            e.preventDefault();
            eventsInstance.pointermoveCheck(e);
        });
    }
    queueInstance.execute();
    if (enableResize && root.container) {
        layerResizeBind(root, resize);
    }
    return root;
}

if (Object.keys(STANDARD_FONTS).length > 0) {
    for(let key in STANDARD_FONTS) {
        fs$1.writeFileSync('/data/'+key, STANDARD_FONTS[key]);
    }
}
function parsePdfConfig(config, oldConfig = {}) {
    return {
        ...oldConfig,
        autoFirstPage: false,
        bufferPages: true,
        ...(config.margin !== undefined && { margin: config.margin }),
        ...(config.margins !== undefined && { margins: config.margins }),
        ...(config.defaultFont !== undefined && { font: config.defaultFont }),
        ...(config.encryption !== undefined && { ...config.encryption }),
    };
}
function PDFCreator(config) {
        this.pages = [];
        this.ctx = config.ctx;
        this.domEl = config.layer;
        this.vDomIndex = config.vDomIndex;
        this.container = config.res;
        this.height = config.height;
        this.width = config.width;
        this.pdfConfig = config.pdfConfig;
        this.pdfInfo = config.pdfInfo;
        this.fontRegister = config.fontRegister;
        this.fallBackPage = config.fallBackPage;
        this.layerConfig = config.layerConfig;
    }
    PDFCreator.prototype.flush = function () {
        this.pages.forEach(function (page) {
            page.flush();
        });
        this.pages = [];
        if (this.doc) {
            this.doc.flushPages();
        }
    };
    PDFCreator.prototype.setConfig = function (config = {}) {
        const tPdfConfig = parsePdfConfig(config, this.pdfConfig);
        if (config.fontRegister) {
            this.fontRegister = {
                ...(config.fontRegister || {}),
            };
        }
        this.pdfInfo = config.info || this.pdfInfo || { title: "I2Djs-PDF" };
        this.height = config.height || this.height;
        this.width = config.width || this.width;
        this.layer.setAttribute("height", this.height * 1);
        this.layer.setAttribute("width", this.width * 1);
        this.pdfConfig = tPdfConfig;
        this.execute();
        return this;
    };
    PDFCreator.prototype.setPageTemplate = function (exec) {
        this.pageDefaultTemplate = exec;
    };
    PDFCreator.prototype.setSize = function (width = 0, height = 0) {
        this.width = width;
        this.height = height;
        this.pdfConfig = parsePdfConfig({
            height, width
        }, this.pdfConfig);
        this.pages.forEach((p) => {
            let pConfig = p.pageConfig;
            p.height = pConfig.height || height;
            p.width = pConfig.width || width;
        });
        this.execute();
        return this;
    };
    PDFCreator.prototype.execute = function () {
        let self = this;
        this.exportPdf(
            this.onUpdateExe ||
                function (url) {
                    self.container.setAttribute("src", url);
                },
            this.pdfConfig
        );
    };
    PDFCreator.prototype.onChange = function (exec) {
        this.onUpdateExe = exec;
    };
    PDFCreator.prototype.addPage = function addPage (config = {}) {
        const newpage = createPage(this.ctx, this.vDomIndex);
        Object.assign(newpage, {
            domEl: this.layer,
            pageConfig: config,
            height: config.height || this.height,
            width: config.width || this.width,
            margin: config.margin || this.pdfConfig.margin || 0,
            margins: config.margins || this.pdfConfig.margins || { top: 0, bottom: 0, left: 0, right: 0 },
            type: 'CANVAS',
            EXEType: 'pdf',
            ctx: this.ctx
        });
        const template = config.pageTemplate || this.pageDefaultTemplate;
        if (template) {
            newpage.addTemplate(template);
        }
        this.pages.push(newpage);
        return newpage;
    };
    PDFCreator.prototype.removePage = function (page) {
        const pageIndex = this.pages.indexOf(page);
        let removedPage = null;
        if (pageIndex !== -1) {
            removedPage = this.pages.splice(pageIndex, 1);
        }
        return removedPage;
    };
    PDFCreator.prototype.createTemplate = function () {
        return new CanvasNodeExe(
            this.ctx,
            {
                el: "g",
                attr: {
                    id: "templateNode",
                },
            },
            Math.round(Math.random() * 99999),
            this.vDomIndex
        )
    };
    PDFCreator.prototype.exportPdf = async function (callback, pdfConfig = {}) {
        let self = this;
        try {
            const doc = new PDFDocument({
                ...pdfConfig,
            });
            const stream_ = doc.pipe(blobStream());
            await registerFontFromConfig(doc, this.fontRegister);
            if (this.pdfInfo) {
                doc.info.Title = this.pdfInfo.title || "";
                doc.info.Author = this.pdfInfo.author || "";
                doc.info.Subject = this.pdfInfo.subject || "";
                doc.info.Keywords = this.pdfInfo.keywords || "";
                doc.info.CreationDate = this.pdfInfo.creationDate || new Date();
            }
            this.doc = doc;
            this.pages.forEach(function (page) {
                page.updateABBox();
                page.updateBBox();
                page.exportPdf(doc, {
                    autoPagination: self.layerConfig.autoPagination
                });
            });
            this.doc.end();
            stream_.on("finish", function () {
                callback(stream_.toBlobURL("application/pdf"));
            });
        }
        catch (err) {
            console.error(err);
        }
    };
    PDFCreator.prototype.destroy = function () {
        const res = document.body.contains(this.container);
        if (res && this.container.contains(this.domEl)) {
            this.container.removeChild(this.domEl);
        }
        this.flush();
        queue$1.removeVdom(this.vDomIndex);
    };
    PDFCreator.prototype.exec = function (exe) {
        exe.call(this, this.dataObj);
    };
    PDFCreator.prototype.data = function (data) {
        if (!data) {
            return this.dataObj;
        } else {
            this.dataObj = data;
        }
        return this;
    };
    PDFCreator.prototype.createTexture = function (config = {}) {
        return this.fallBackPage.createTexture(config);
    };
    PDFCreator.prototype.createAsyncTexture = function (config = {}) {
        return this.fallBackPage.createAsyncTexture(config);
    };
function pdfLayer(container, config = {}, layerSettings = {}) {
    const res = typeof container === 'string' ? document.querySelector(container) : container instanceof HTMLElement ? container : null;
    if (!res) throw new Error('Invalid container provided.');
    let clientHeight = res?.clientHeight || 0;
    let clientWidth = res?.clientWidth || 0;
    let { height = (clientHeight), width = clientWidth } = config;
    let pdfConfig = parsePdfConfig(config);
    let { autoUpdate = true, onUpdate, autoPagination = true } = layerSettings;
    const layer = document.createElement('canvas');
    layer.height = height;
    layer.width = width;
    const ctx = layer.getContext('2d');
    let fontRegister = config.fontRegister || {};
    let pdfInfo = config.info || { title: "I2Djs-PDF" };
    ctx.type_ = "pdf";
    ctx.doc = new PDFDocument({ size: [width, height], ...pdfConfig });
    ctx.doc.addPage();
    const vDomInstance = new VDom();
    const vDomIndex = autoUpdate ? queue$1.addVdom(vDomInstance) : 999999;
    const fallBackPage = createPage(ctx, vDomIndex);
    const pdfInstance = new PDFCreator({
        ctx,
        layer,
        vDomIndex,
        res,
        height,
        width,
        pdfConfig,
        pdfInfo,
        fontRegister,
        fallBackPage,
        layerConfig : {
            autoUpdate,
            autoPagination
        }
    });
    pdfInstance.onChange(onUpdate);
    if (vDomInstance) {
        vDomInstance.rootNode(pdfInstance);
    }
    return pdfInstance;
}
async function CanvasToPdf(options) {
    try {
        const pdfConfig = parsePdfConfig(options);
        const doc = new PDFDocument({
            size: [this.width, this.height],
            ...pdfConfig,
        });
        const stream_ = doc.pipe(blobStream());
        const fontRegister = options.fontRegister || {};
        const pdfInfo = options.info || { title: "I2Djs-PDF" };
        await registerFontFromConfig(doc, fontRegister);
        doc.info = {
            Title: pdfInfo.title || "",
            Author: pdfInfo.author || "",
            Subject: pdfInfo.subject || "",
            Keywords: pdfInfo.keywords || "",
            CreationDate: pdfInfo.creationDate || new Date(),
        };
        this.updateBBox();
        this.updateABBox();
        doc.addPage();
        this.exportPdf(doc, {});
        doc.end();
        return new Promise((resolve) => {
            stream_.on("finish", function () {
                resolve(stream_.toBlobURL("application/pdf"));
            });
        });
    } catch (error) {
        return Promise.reject(error);
    }
}
function exportCanvasToPdf(canvasLayer, options) {
    return CanvasToPdf.call(canvasLayer, options);
}
async function registerFontFromConfig(doc, fontRegister = {}) {
    try {
        const keys = Object.keys(fontRegister);
        for (const key of keys) {
            if (!pdfSupportedFontFamily.includes(key)) {
                pdfSupportedFontFamily.push(key);
            }
            const fontResponse = await fetch(fontRegister[key]);
            if (!fontResponse.ok) {
                throw new Error(`Failed to fetch font: ${fontRegister[key]}`);
            }
            const fontBuffer = await fontResponse.arrayBuffer();
            const fontExtension = fontRegister[key].split('.').pop().toLowerCase();
            if (['ttc', 'dfont'].includes(fontExtension)) {
                const encodedKey = new TextEncoder().encode(key);
                encodedKey._isBuffer = true;
                doc.registerFont(key, fontBuffer, encodedKey);
            } else {
                doc.registerFont(key, fontBuffer);
            }
        }
        return true;
    } catch (err) {
        console.error(err);
        throw new Error('Font registration failed');
    }
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
var mulTable = [512, 512, 456, 512, 328, 456, 335, 512, 405, 328, 271, 456, 388, 335, 292, 512, 454, 405, 364, 328, 298, 271, 496, 456, 420, 388, 360, 335, 312, 292, 273, 512, 482, 454, 428, 405, 383, 364, 345, 328, 312, 298, 284, 271, 259, 496, 475, 456, 437, 420, 404, 388, 374, 360, 347, 335, 323, 312, 302, 292, 282, 273, 265, 512, 497, 482, 468, 454, 441, 428, 417, 405, 394, 383, 373, 364, 354, 345, 337, 328, 320, 312, 305, 298, 291, 284, 278, 271, 265, 259, 507, 496, 485, 475, 465, 456, 446, 437, 428, 420, 412, 404, 396, 388, 381, 374, 367, 360, 354, 347, 341, 335, 329, 323, 318, 312, 307, 302, 297, 292, 287, 282, 278, 273, 269, 265, 261, 512, 505, 497, 489, 482, 475, 468, 461, 454, 447, 441, 435, 428, 422, 417, 411, 405, 399, 394, 389, 383, 378, 373, 368, 364, 359, 354, 350, 345, 341, 337, 332, 328, 324, 320, 316, 312, 309, 305, 301, 298, 294, 291, 287, 284, 281, 278, 274, 271, 268, 265, 262, 259, 257, 507, 501, 496, 491, 485, 480, 475, 470, 465, 460, 456, 451, 446, 442, 437, 433, 428, 424, 420, 416, 412, 408, 404, 400, 396, 392, 388, 385, 381, 377, 374, 370, 367, 363, 360, 357, 354, 350, 347, 344, 341, 338, 335, 332, 329, 326, 323, 320, 318, 315, 312, 310, 307, 304, 302, 299, 297, 294, 292, 289, 287, 285, 282, 280, 278, 275, 273, 271, 269, 267, 265, 263, 261, 259];
var shgTable = [9, 11, 12, 13, 13, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24];
function processImageDataRGBA(imageData, topX, topY, width, height, radius) {
  var pixels = imageData.data;
  var div = 2 * radius + 1;
  var widthMinus1 = width - 1;
  var heightMinus1 = height - 1;
  var radiusPlus1 = radius + 1;
  var sumFactor = radiusPlus1 * (radiusPlus1 + 1) / 2;
  var stackStart = new BlurStack();
  var stack = stackStart;
  var stackEnd;
  for (var i = 1; i < div; i++) {
    stack = stack.next = new BlurStack();
    if (i === radiusPlus1) {
      stackEnd = stack;
    }
  }
  stack.next = stackStart;
  var stackIn = null,
      stackOut = null,
      yw = 0,
      yi = 0;
  var mulSum = mulTable[radius];
  var shgSum = shgTable[radius];
  for (var y = 0; y < height; y++) {
    stack = stackStart;
    var pr = pixels[yi],
        pg = pixels[yi + 1],
        pb = pixels[yi + 2],
        pa = pixels[yi + 3];
    for (var _i = 0; _i < radiusPlus1; _i++) {
      stack.r = pr;
      stack.g = pg;
      stack.b = pb;
      stack.a = pa;
      stack = stack.next;
    }
    var rInSum = 0,
        gInSum = 0,
        bInSum = 0,
        aInSum = 0,
        rOutSum = radiusPlus1 * pr,
        gOutSum = radiusPlus1 * pg,
        bOutSum = radiusPlus1 * pb,
        aOutSum = radiusPlus1 * pa,
        rSum = sumFactor * pr,
        gSum = sumFactor * pg,
        bSum = sumFactor * pb,
        aSum = sumFactor * pa;
    for (var _i2 = 1; _i2 < radiusPlus1; _i2++) {
      var p = yi + ((widthMinus1 < _i2 ? widthMinus1 : _i2) << 2);
      var r = pixels[p],
          g = pixels[p + 1],
          b = pixels[p + 2],
          a = pixels[p + 3];
      var rbs = radiusPlus1 - _i2;
      rSum += (stack.r = r) * rbs;
      gSum += (stack.g = g) * rbs;
      bSum += (stack.b = b) * rbs;
      aSum += (stack.a = a) * rbs;
      rInSum += r;
      gInSum += g;
      bInSum += b;
      aInSum += a;
      stack = stack.next;
    }
    stackIn = stackStart;
    stackOut = stackEnd;
    for (var x = 0; x < width; x++) {
      var paInitial = aSum * mulSum >>> shgSum;
      pixels[yi + 3] = paInitial;
      if (paInitial !== 0) {
        var _a2 = 255 / paInitial;
        pixels[yi] = (rSum * mulSum >>> shgSum) * _a2;
        pixels[yi + 1] = (gSum * mulSum >>> shgSum) * _a2;
        pixels[yi + 2] = (bSum * mulSum >>> shgSum) * _a2;
      } else {
        pixels[yi] = pixels[yi + 1] = pixels[yi + 2] = 0;
      }
      rSum -= rOutSum;
      gSum -= gOutSum;
      bSum -= bOutSum;
      aSum -= aOutSum;
      rOutSum -= stackIn.r;
      gOutSum -= stackIn.g;
      bOutSum -= stackIn.b;
      aOutSum -= stackIn.a;
      var _p = x + radius + 1;
      _p = yw + (_p < widthMinus1 ? _p : widthMinus1) << 2;
      rInSum += stackIn.r = pixels[_p];
      gInSum += stackIn.g = pixels[_p + 1];
      bInSum += stackIn.b = pixels[_p + 2];
      aInSum += stackIn.a = pixels[_p + 3];
      rSum += rInSum;
      gSum += gInSum;
      bSum += bInSum;
      aSum += aInSum;
      stackIn = stackIn.next;
      var _stackOut = stackOut,
          _r = _stackOut.r,
          _g = _stackOut.g,
          _b = _stackOut.b,
          _a = _stackOut.a;
      rOutSum += _r;
      gOutSum += _g;
      bOutSum += _b;
      aOutSum += _a;
      rInSum -= _r;
      gInSum -= _g;
      bInSum -= _b;
      aInSum -= _a;
      stackOut = stackOut.next;
      yi += 4;
    }
    yw += width;
  }
  for (var _x = 0; _x < width; _x++) {
    yi = _x << 2;
    var _pr = pixels[yi],
        _pg = pixels[yi + 1],
        _pb = pixels[yi + 2],
        _pa = pixels[yi + 3],
        _rOutSum = radiusPlus1 * _pr,
        _gOutSum = radiusPlus1 * _pg,
        _bOutSum = radiusPlus1 * _pb,
        _aOutSum = radiusPlus1 * _pa,
        _rSum = sumFactor * _pr,
        _gSum = sumFactor * _pg,
        _bSum = sumFactor * _pb,
        _aSum = sumFactor * _pa;
    stack = stackStart;
    for (var _i3 = 0; _i3 < radiusPlus1; _i3++) {
      stack.r = _pr;
      stack.g = _pg;
      stack.b = _pb;
      stack.a = _pa;
      stack = stack.next;
    }
    var yp = width;
    var _gInSum = 0,
        _bInSum = 0,
        _aInSum = 0,
        _rInSum = 0;
    for (var _i4 = 1; _i4 <= radius; _i4++) {
      yi = yp + _x << 2;
      var _rbs = radiusPlus1 - _i4;
      _rSum += (stack.r = _pr = pixels[yi]) * _rbs;
      _gSum += (stack.g = _pg = pixels[yi + 1]) * _rbs;
      _bSum += (stack.b = _pb = pixels[yi + 2]) * _rbs;
      _aSum += (stack.a = _pa = pixels[yi + 3]) * _rbs;
      _rInSum += _pr;
      _gInSum += _pg;
      _bInSum += _pb;
      _aInSum += _pa;
      stack = stack.next;
      if (_i4 < heightMinus1) {
        yp += width;
      }
    }
    yi = _x;
    stackIn = stackStart;
    stackOut = stackEnd;
    for (var _y = 0; _y < height; _y++) {
      var _p2 = yi << 2;
      pixels[_p2 + 3] = _pa = _aSum * mulSum >>> shgSum;
      if (_pa > 0) {
        _pa = 255 / _pa;
        pixels[_p2] = (_rSum * mulSum >>> shgSum) * _pa;
        pixels[_p2 + 1] = (_gSum * mulSum >>> shgSum) * _pa;
        pixels[_p2 + 2] = (_bSum * mulSum >>> shgSum) * _pa;
      } else {
        pixels[_p2] = pixels[_p2 + 1] = pixels[_p2 + 2] = 0;
      }
      _rSum -= _rOutSum;
      _gSum -= _gOutSum;
      _bSum -= _bOutSum;
      _aSum -= _aOutSum;
      _rOutSum -= stackIn.r;
      _gOutSum -= stackIn.g;
      _bOutSum -= stackIn.b;
      _aOutSum -= stackIn.a;
      _p2 = _x + ((_p2 = _y + radiusPlus1) < heightMinus1 ? _p2 : heightMinus1) * width << 2;
      _rSum += _rInSum += stackIn.r = pixels[_p2];
      _gSum += _gInSum += stackIn.g = pixels[_p2 + 1];
      _bSum += _bInSum += stackIn.b = pixels[_p2 + 2];
      _aSum += _aInSum += stackIn.a = pixels[_p2 + 3];
      stackIn = stackIn.next;
      _rOutSum += _pr = stackOut.r;
      _gOutSum += _pg = stackOut.g;
      _bOutSum += _pb = stackOut.b;
      _aOutSum += _pa = stackOut.a;
      _rInSum -= _pr;
      _gInSum -= _pg;
      _bInSum -= _pb;
      _aInSum -= _pa;
      stackOut = stackOut.next;
      yi += width;
    }
  }
  return imageData;
}
var BlurStack =
function BlurStack() {
  _classCallCheck(this, BlurStack);
  this.r = 0;
  this.g = 0;
  this.b = 0;
  this.a = 0;
  this.next = null;
};

var utilities = {
    blur: function (radius = 1) {
        function blurExec(imageData) {
            return processImageDataRGBA(imageData, 0, 0, imageData.width, imageData.height, radius);
        }
        return blurExec;
    },
    greyScale: function (greyScaleType) {
        let exe = null;
        switch (greyScaleType) {
            case "grey-1":
                exe = function (imgData) {
                    const pixels = imgData.data;
                    let lightness;
                    for (let i = 0, len = pixels.length; i < len; i += 4) {
                        lightness = parseInt(
                            pixels[i] * 0.299 + pixels[i + 1] * 0.587 + pixels[i + 2] * 0.114
                        );
                        imgData.data[i] = lightness;
                        imgData.data[i + 1] = lightness;
                        imgData.data[i + 2] = lightness;
                    }
                    return imgData;
                };
                break;
            case "grey-2":
                exe = function (imgData) {
                    const pixels = imgData.data;
                    let lightness;
                    for (let i = 0, len = pixels.length; i < len; i += 4) {
                        lightness = parseInt(
                            (3 * pixels[i] + 4 * pixels[i + 1] + pixels[i + 2]) >>> 3
                        );
                        imgData.data[i] = lightness;
                        imgData.data[i + 1] = lightness;
                        imgData.data[i + 2] = lightness;
                    }
                    return imgData;
                };
                break;
            case "grey-3":
            default:
                exe = function (imgData) {
                    const pixels = imgData.data;
                    let lightness;
                    for (let i = 0, len = pixels.length; i < len; i += 4) {
                        lightness = parseInt(
                            0.2126 * pixels[i] + 0.715 * pixels[i + 1] + 0.0722 * pixels[i + 2]
                        );
                        imgData.data[i] = lightness;
                        imgData.data[i + 1] = lightness;
                        imgData.data[i + 2] = lightness;
                    }
                    return imgData;
                };
                break;
        }
        return exe;
    },
};

exports.PDFCreator = PDFCreator;
exports.behaviour = behaviour;
exports.canvasGradient = CanvasGradient;
exports.canvasLayer = canvasLayer;
exports.canvasNodeExe = CanvasNodeExe;
exports.chain = chain;
exports.color = colorMap$1;
exports.createLinearGradient = createLinearGradient;
exports.createRadialGradient = createRadialGradient;
exports.ease = fetchTransitionType;
exports.exportCanvasToPdf = exportCanvasToPdf;
exports.geometry = geometry;
exports.path = CreatePath;
exports.pdfLayer = pdfLayer;
exports.queue = queue$1;
exports.svgLayer = svgLayer;
exports.utility = utilities;
exports.webglLayer = webglLayer;
